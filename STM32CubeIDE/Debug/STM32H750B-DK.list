
STM32H750B-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .bootloader   0000227c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   00000298  90000000  90000000  00020000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00027ef4  900002a0  900002a0  000202a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000041a4  90028194  90028194  00048194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000001b8  9002c338  9002c338  0004c338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  9002c4f0  9002c4f0  00b30d94  2**0
                  CONTENTS
  6 .ARM          00000000  9002c4f0  9002c4f0  00b30d94  2**0
                  CONTENTS
  7 .preinit_array 00000000  9002c4f0  9002c4f0  00b30d94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   0000001c  9002c4f0  9002c4f0  0004c4f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  9002c50c  9002c50c  0004c50c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000140  24000000  9002c514  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 CCMRAM        00005a00  24000140  9002c654  00050140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00022a3c  24005b40  90032054  00055b40  2**3
                  ALLOC
 13 ._user_heap_stack 00002004  2402857c  90032054  0005857c  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00b30d94  2**0
                  CONTENTS, READONLY
 15 FontFlashSection 00002198  90200000  90200000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 000000dc  90202198  90202198  00062198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 ExtFlashSection 00aceb20  90202274  90202274  00062274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 TouchGFX_Framebuffer 000bf400  d0000000  d0000000  00b40000  2**2
                  ALLOC
 19 Video_RGB_Buffer 00043800  d00bf400  d00bf400  00b40000  2**2
                  ALLOC
 20 .comment      000000c2  00000000  00000000  00b30dc2  2**0
                  CONTENTS, READONLY
 21 .debug_line   0007cd12  00000000  00000000  00b30e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00badb96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_info   000fd95f  00000000  00000000  00badc01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_abbrev 000187d7  00000000  00000000  00cab560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_aranges 00003780  00000000  00000000  00cc3d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_str    001a3256  00000000  00000000  00cc74b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_rnglists 00007a78  00000000  00000000  00e6a70e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_macro  0004a1cf  00000000  00000000  00e72186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_frame  0000b214  00000000  00000000  00ebc358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_loclists 0003cc07  00000000  00000000  00ec756c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	; (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	; (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	; (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	24005b40 	.word	0x24005b40
900002bc:	00000000 	.word	0x00000000
900002c0:	9002817c 	.word	0x9002817c

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	; (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	; (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	; (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	24005b44 	.word	0x24005b44
900002dc:	9002817c 	.word	0x9002817c

900002e0 <strcmp>:
900002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
900002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
900002e8:	2a01      	cmp	r2, #1
900002ea:	bf28      	it	cs
900002ec:	429a      	cmpcs	r2, r3
900002ee:	d0f7      	beq.n	900002e0 <strcmp>
900002f0:	1ad0      	subs	r0, r2, r3
900002f2:	4770      	bx	lr
	...

90000300 <memchr>:
90000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
90000304:	2a10      	cmp	r2, #16
90000306:	db2b      	blt.n	90000360 <memchr+0x60>
90000308:	f010 0f07 	tst.w	r0, #7
9000030c:	d008      	beq.n	90000320 <memchr+0x20>
9000030e:	f810 3b01 	ldrb.w	r3, [r0], #1
90000312:	3a01      	subs	r2, #1
90000314:	428b      	cmp	r3, r1
90000316:	d02d      	beq.n	90000374 <memchr+0x74>
90000318:	f010 0f07 	tst.w	r0, #7
9000031c:	b342      	cbz	r2, 90000370 <memchr+0x70>
9000031e:	d1f6      	bne.n	9000030e <memchr+0xe>
90000320:	b4f0      	push	{r4, r5, r6, r7}
90000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000032a:	f022 0407 	bic.w	r4, r2, #7
9000032e:	f07f 0700 	mvns.w	r7, #0
90000332:	2300      	movs	r3, #0
90000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000338:	3c08      	subs	r4, #8
9000033a:	ea85 0501 	eor.w	r5, r5, r1
9000033e:	ea86 0601 	eor.w	r6, r6, r1
90000342:	fa85 f547 	uadd8	r5, r5, r7
90000346:	faa3 f587 	sel	r5, r3, r7
9000034a:	fa86 f647 	uadd8	r6, r6, r7
9000034e:	faa5 f687 	sel	r6, r5, r7
90000352:	b98e      	cbnz	r6, 90000378 <memchr+0x78>
90000354:	d1ee      	bne.n	90000334 <memchr+0x34>
90000356:	bcf0      	pop	{r4, r5, r6, r7}
90000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000035c:	f002 0207 	and.w	r2, r2, #7
90000360:	b132      	cbz	r2, 90000370 <memchr+0x70>
90000362:	f810 3b01 	ldrb.w	r3, [r0], #1
90000366:	3a01      	subs	r2, #1
90000368:	ea83 0301 	eor.w	r3, r3, r1
9000036c:	b113      	cbz	r3, 90000374 <memchr+0x74>
9000036e:	d1f8      	bne.n	90000362 <memchr+0x62>
90000370:	2000      	movs	r0, #0
90000372:	4770      	bx	lr
90000374:	3801      	subs	r0, #1
90000376:	4770      	bx	lr
90000378:	2d00      	cmp	r5, #0
9000037a:	bf06      	itte	eq
9000037c:	4635      	moveq	r5, r6
9000037e:	3803      	subeq	r0, #3
90000380:	3807      	subne	r0, #7
90000382:	f015 0f01 	tst.w	r5, #1
90000386:	d107      	bne.n	90000398 <memchr+0x98>
90000388:	3001      	adds	r0, #1
9000038a:	f415 7f80 	tst.w	r5, #256	; 0x100
9000038e:	bf02      	ittt	eq
90000390:	3001      	addeq	r0, #1
90000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
90000396:	3001      	addeq	r0, #1
90000398:	bcf0      	pop	{r4, r5, r6, r7}
9000039a:	3801      	subs	r0, #1
9000039c:	4770      	bx	lr
9000039e:	bf00      	nop

900003a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
900003a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 900003d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
900003a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
900003a6:	e003      	b.n	900003b0 <LoopCopyDataInit>

900003a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
900003a8:	4b0c      	ldr	r3, [pc, #48]	; (900003dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
900003aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
900003ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
900003ae:	3104      	adds	r1, #4

900003b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
900003b0:	480b      	ldr	r0, [pc, #44]	; (900003e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
900003b2:	4b0c      	ldr	r3, [pc, #48]	; (900003e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
900003b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
900003b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
900003b8:	d3f6      	bcc.n	900003a8 <CopyDataInit>
  ldr  r2, =_sbss
900003ba:	4a0b      	ldr	r2, [pc, #44]	; (900003e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
900003bc:	e002      	b.n	900003c4 <LoopFillZerobss>

900003be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
900003be:	2300      	movs	r3, #0
  str  r3, [r2], #4
900003c0:	f842 3b04 	str.w	r3, [r2], #4

900003c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
900003c4:	4b09      	ldr	r3, [pc, #36]	; (900003ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
900003c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
900003c8:	d3f9      	bcc.n	900003be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
900003ca:	f008 ff7d 	bl	900092c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
900003ce:	f027 f9ef 	bl	900277b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
900003d2:	f003 ff49 	bl	90004268 <main>
  bx  lr    
900003d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
900003d8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
900003dc:	9002c514 	.word	0x9002c514
  ldr  r0, =_sdata
900003e0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
900003e4:	24000140 	.word	0x24000140
  ldr  r2, =_sbss
900003e8:	24005b40 	.word	0x24005b40
  ldr  r3, = _ebss
900003ec:	2402857c 	.word	0x2402857c

900003f0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
900003f0:	e7fe      	b.n	900003f0 <ADC3_IRQHandler>
	...

900003f4 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
900003f4:	4770      	bx	lr
900003f6:	bf00      	nop

900003f8 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
900003f8:	4770      	bx	lr
900003fa:	bf00      	nop

900003fc <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
900003fc:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
900003fe:	f001 ff25 	bl	9000224c <touchgfx_components_init>
  touchgfx_init();
}
90000402:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
90000406:	f001 bea7 	b.w	90002158 <touchgfx_init>
9000040a:	bf00      	nop

9000040c <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
9000040c:	f001 bf20 	b.w	90002250 <touchgfx_taskEntry>

90000410 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
90000410:	6840      	ldr	r0, [r0, #4]
    }
90000412:	4770      	bx	lr

90000414 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
90000414:	6041      	str	r1, [r0, #4]
    }
90000416:	4770      	bx	lr

90000418 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
90000418:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
9000041c:	4b08      	ldr	r3, [pc, #32]	; (90000440 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
9000041e:	4a09      	ldr	r2, [pc, #36]	; (90000444 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
90000420:	f8d0 1dfc 	ldr.w	r1, [r0, #3580]	; 0xdfc
90000424:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
90000428:	f8c0 1dfc 	str.w	r1, [r0, #3580]	; 0xdfc
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
9000042c:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
90000430:	430a      	orrs	r2, r1
90000432:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
90000436:	681a      	ldr	r2, [r3, #0]
90000438:	f042 0201 	orr.w	r2, r2, #1
9000043c:	601a      	str	r2, [r3, #0]
}
9000043e:	4770      	bx	lr
90000440:	e0001000 	.word	0xe0001000
90000444:	c5acce55 	.word	0xc5acce55

90000448 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
90000448:	1a51      	subs	r1, r2, r1
9000044a:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
9000044e:	fbb1 f0f3 	udiv	r0, r1, r3
90000452:	4770      	bx	lr

90000454 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
90000454:	4b01      	ldr	r3, [pc, #4]	; (9000045c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
90000456:	6858      	ldr	r0, [r3, #4]
}
90000458:	4770      	bx	lr
9000045a:	bf00      	nop
9000045c:	e0001000 	.word	0xe0001000

90000460 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
90000460:	4770      	bx	lr
90000462:	bf00      	nop

90000464 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
90000464:	b510      	push	{r4, lr}
90000466:	4604      	mov	r4, r0
90000468:	210c      	movs	r1, #12
9000046a:	f026 fe04 	bl	90027076 <_ZdlPvj>
9000046e:	4620      	mov	r0, r4
90000470:	bd10      	pop	{r4, pc}
90000472:	bf00      	nop

90000474 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000474:	6803      	ldr	r3, [r0, #0]
90000476:	4a0c      	ldr	r2, [pc, #48]	; (900004a8 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x34>)
90000478:	691b      	ldr	r3, [r3, #16]
{
9000047a:	b510      	push	{r4, lr}
9000047c:	4604      	mov	r4, r0
    if (active) //idle task sched out
9000047e:	b149      	cbz	r1, 90000494 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x20>
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000480:	4293      	cmp	r3, r2
90000482:	d10d      	bne.n	900004a0 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x2c>
    return *((volatile unsigned int*)0xE0001004);
90000484:	4b09      	ldr	r3, [pc, #36]	; (900004ac <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x38>)
90000486:	6858      	ldr	r0, [r3, #4]
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000488:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
9000048a:	6863      	ldr	r3, [r4, #4]
9000048c:	1a9b      	subs	r3, r3, r2
9000048e:	4403      	add	r3, r0
90000490:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
90000492:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
90000494:	4293      	cmp	r3, r2
90000496:	d105      	bne.n	900004a4 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x30>
    return *((volatile unsigned int*)0xE0001004);
90000498:	4b04      	ldr	r3, [pc, #16]	; (900004ac <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x38>)
9000049a:	6858      	ldr	r0, [r3, #4]
        cc_in = getCPUCycles();
9000049c:	60a0      	str	r0, [r4, #8]
}
9000049e:	bd10      	pop	{r4, pc}
        uint32_t cc_temp = getCPUCycles() - cc_in;
900004a0:	4798      	blx	r3
900004a2:	e7f1      	b.n	90000488 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x14>
        cc_in = getCPUCycles();
900004a4:	4798      	blx	r3
900004a6:	e7f9      	b.n	9000049c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x28>
900004a8:	90000455 	.word	0x90000455
900004ac:	e0001000 	.word	0xe0001000

900004b0 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
900004b0:	4770      	bx	lr
900004b2:	bf00      	nop
900004b4:	0000      	movs	r0, r0
	...

900004b8 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h750b_discovery_ts.h"

void STM32TouchController::init()
{
900004b8:	b500      	push	{lr}
900004ba:	b085      	sub	sp, #20
     *
     */
    TS_Init_t hTS;
    hTS.Orientation = TS_SWAP_XY;
    hTS.Accuracy = 0;
    hTS.Width = 480;
900004bc:	2208      	movs	r2, #8
900004be:	2300      	movs	r3, #0
    hTS.Height = 272;
    BSP_TS_Init(0, &hTS);
900004c0:	2000      	movs	r0, #0
900004c2:	4669      	mov	r1, sp
    hTS.Width = 480;
900004c4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 900004e0 <_ZN20STM32TouchController4initEv+0x28>
900004c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
900004cc:	ed8d 7b00 	vstr	d7, [sp]
    BSP_TS_Init(0, &hTS);
900004d0:	f008 fe08 	bl	900090e4 <BSP_TS_Init>
}
900004d4:	b005      	add	sp, #20
900004d6:	f85d fb04 	ldr.w	pc, [sp], #4
900004da:	bf00      	nop
900004dc:	f3af 8000 	nop.w
900004e0:	000001e0 	.word	0x000001e0
900004e4:	00000110 	.word	0x00000110

900004e8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
900004e8:	b530      	push	{r4, r5, lr}
900004ea:	b085      	sub	sp, #20
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    TS_State_t  TS_State = { 0 };
900004ec:	2000      	movs	r0, #0
{
900004ee:	460d      	mov	r5, r1
900004f0:	4614      	mov	r4, r2
    BSP_TS_GetState(0, &TS_State);
900004f2:	a901      	add	r1, sp, #4
    TS_State_t  TS_State = { 0 };
900004f4:	9001      	str	r0, [sp, #4]
900004f6:	e9cd 0002 	strd	r0, r0, [sp, #8]
    BSP_TS_GetState(0, &TS_State);
900004fa:	f008 fe81 	bl	90009200 <BSP_TS_GetState>
    if (TS_State.TouchDetected)
900004fe:	9801      	ldr	r0, [sp, #4]
90000500:	b120      	cbz	r0, 9000050c <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
    {
        x = TS_State.TouchX;
        y = TS_State.TouchY;
        return true;
90000502:	2001      	movs	r0, #1
        y = TS_State.TouchY;
90000504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        x = TS_State.TouchX;
90000508:	602a      	str	r2, [r5, #0]
        y = TS_State.TouchY;
9000050a:	6023      	str	r3, [r4, #0]
    }

    return false;
}
9000050c:	b005      	add	sp, #20
9000050e:	bd30      	pop	{r4, r5, pc}

90000510 <_ZN20STM32TouchControllerD0Ev>:
90000510:	b510      	push	{r4, lr}
90000512:	4604      	mov	r4, r0
90000514:	2104      	movs	r1, #4
90000516:	f026 fdae 	bl	90027076 <_ZdlPvj>
9000051a:	4620      	mov	r0, r4
9000051c:	bd10      	pop	{r4, pc}
9000051e:	bf00      	nop

90000520 <_ZN8touchgfx4GPIO4initEv>:
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000520:	2108      	movs	r1, #8
90000522:	4810      	ldr	r0, [pc, #64]	; (90000564 <_ZN8touchgfx4GPIO4initEv+0x44>)
{
90000524:	b508      	push	{r3, lr}
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000526:	f009 fbd1 	bl	90009ccc <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000052a:	2801      	cmp	r0, #1
9000052c:	d101      	bne.n	90000532 <_ZN8touchgfx4GPIO4initEv+0x12>
            GPIO_InvertedLevels[id] = 1;
9000052e:	4b0e      	ldr	r3, [pc, #56]	; (90000568 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000530:	6018      	str	r0, [r3, #0]
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
90000532:	2180      	movs	r1, #128	; 0x80
90000534:	480d      	ldr	r0, [pc, #52]	; (9000056c <_ZN8touchgfx4GPIO4initEv+0x4c>)
90000536:	f009 fbc9 	bl	90009ccc <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000053a:	2801      	cmp	r0, #1
9000053c:	d101      	bne.n	90000542 <_ZN8touchgfx4GPIO4initEv+0x22>
            GPIO_InvertedLevels[id] = 1;
9000053e:	4b0a      	ldr	r3, [pc, #40]	; (90000568 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000540:	6058      	str	r0, [r3, #4]
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
90000542:	2140      	movs	r1, #64	; 0x40
90000544:	4809      	ldr	r0, [pc, #36]	; (9000056c <_ZN8touchgfx4GPIO4initEv+0x4c>)
90000546:	f009 fbc1 	bl	90009ccc <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000054a:	2801      	cmp	r0, #1
9000054c:	d101      	bne.n	90000552 <_ZN8touchgfx4GPIO4initEv+0x32>
            GPIO_InvertedLevels[id] = 1;
9000054e:	4b06      	ldr	r3, [pc, #24]	; (90000568 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000550:	6098      	str	r0, [r3, #8]
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
90000552:	2140      	movs	r1, #64	; 0x40
90000554:	4806      	ldr	r0, [pc, #24]	; (90000570 <_ZN8touchgfx4GPIO4initEv+0x50>)
90000556:	f009 fbb9 	bl	90009ccc <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000055a:	2801      	cmp	r0, #1
9000055c:	d101      	bne.n	90000562 <_ZN8touchgfx4GPIO4initEv+0x42>
            GPIO_InvertedLevels[id] = 1;
9000055e:	4b02      	ldr	r3, [pc, #8]	; (90000568 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000560:	60d8      	str	r0, [r3, #12]
}
90000562:	bd08      	pop	{r3, pc}
90000564:	58021800 	.word	0x58021800
90000568:	24005b5c 	.word	0x24005b5c
9000056c:	58020400 	.word	0x58020400
90000570:	58020000 	.word	0x58020000

90000574 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
    switch (id)
90000574:	2803      	cmp	r0, #3
90000576:	d827      	bhi.n	900005c8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>
90000578:	e8df f000 	tbb	[pc, r0]
9000057c:	020b141d 	.word	0x020b141d
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
90000580:	4b12      	ldr	r3, [pc, #72]	; (900005cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000582:	2140      	movs	r1, #64	; 0x40
90000584:	4812      	ldr	r0, [pc, #72]	; (900005d0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
90000586:	68da      	ldr	r2, [r3, #12]
90000588:	fab2 f282 	clz	r2, r2
9000058c:	0952      	lsrs	r2, r2, #5
9000058e:	f009 bba3 	b.w	90009cd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
90000592:	4b0e      	ldr	r3, [pc, #56]	; (900005cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000594:	2140      	movs	r1, #64	; 0x40
90000596:	480f      	ldr	r0, [pc, #60]	; (900005d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
90000598:	689a      	ldr	r2, [r3, #8]
9000059a:	fab2 f282 	clz	r2, r2
9000059e:	0952      	lsrs	r2, r2, #5
900005a0:	f009 bb9a 	b.w	90009cd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
900005a4:	4b09      	ldr	r3, [pc, #36]	; (900005cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
900005a6:	2180      	movs	r1, #128	; 0x80
900005a8:	480a      	ldr	r0, [pc, #40]	; (900005d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
900005aa:	685a      	ldr	r2, [r3, #4]
900005ac:	fab2 f282 	clz	r2, r2
900005b0:	0952      	lsrs	r2, r2, #5
900005b2:	f009 bb91 	b.w	90009cd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
900005b6:	4b05      	ldr	r3, [pc, #20]	; (900005cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
900005b8:	2108      	movs	r1, #8
900005ba:	4807      	ldr	r0, [pc, #28]	; (900005d8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x64>)
900005bc:	681a      	ldr	r2, [r3, #0]
900005be:	fab2 f282 	clz	r2, r2
900005c2:	0952      	lsrs	r2, r2, #5
900005c4:	f009 bb88 	b.w	90009cd8 <HAL_GPIO_WritePin>
}
900005c8:	4770      	bx	lr
900005ca:	bf00      	nop
900005cc:	24005b5c 	.word	0x24005b5c
900005d0:	58020000 	.word	0x58020000
900005d4:	58020400 	.word	0x58020400
900005d8:	58021800 	.word	0x58021800

900005dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
    switch (id)
900005dc:	2803      	cmp	r0, #3
900005de:	d827      	bhi.n	90000630 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>
900005e0:	e8df f000 	tbb	[pc, r0]
900005e4:	020b141d 	.word	0x020b141d
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
900005e8:	4b12      	ldr	r3, [pc, #72]	; (90000634 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900005ea:	2140      	movs	r1, #64	; 0x40
900005ec:	4812      	ldr	r0, [pc, #72]	; (90000638 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
900005ee:	68da      	ldr	r2, [r3, #12]
900005f0:	3a00      	subs	r2, #0
900005f2:	bf18      	it	ne
900005f4:	2201      	movne	r2, #1
900005f6:	f009 bb6f 	b.w	90009cd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
900005fa:	4b0e      	ldr	r3, [pc, #56]	; (90000634 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900005fc:	2140      	movs	r1, #64	; 0x40
900005fe:	480f      	ldr	r0, [pc, #60]	; (9000063c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
90000600:	689a      	ldr	r2, [r3, #8]
90000602:	3a00      	subs	r2, #0
90000604:	bf18      	it	ne
90000606:	2201      	movne	r2, #1
90000608:	f009 bb66 	b.w	90009cd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
9000060c:	4b09      	ldr	r3, [pc, #36]	; (90000634 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
9000060e:	2180      	movs	r1, #128	; 0x80
90000610:	480a      	ldr	r0, [pc, #40]	; (9000063c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
90000612:	685a      	ldr	r2, [r3, #4]
90000614:	3a00      	subs	r2, #0
90000616:	bf18      	it	ne
90000618:	2201      	movne	r2, #1
9000061a:	f009 bb5d 	b.w	90009cd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
9000061e:	4b05      	ldr	r3, [pc, #20]	; (90000634 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
90000620:	2108      	movs	r1, #8
90000622:	4807      	ldr	r0, [pc, #28]	; (90000640 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x64>)
90000624:	681a      	ldr	r2, [r3, #0]
90000626:	3a00      	subs	r2, #0
90000628:	bf18      	it	ne
9000062a:	2201      	movne	r2, #1
9000062c:	f009 bb54 	b.w	90009cd8 <HAL_GPIO_WritePin>
}
90000630:	4770      	bx	lr
90000632:	bf00      	nop
90000634:	24005b5c 	.word	0x24005b5c
90000638:	58020000 	.word	0x58020000
9000063c:	58020400 	.word	0x58020400
90000640:	58021800 	.word	0x58021800

90000644 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
    switch (id)
90000644:	2803      	cmp	r0, #3
90000646:	d813      	bhi.n	90000670 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>
90000648:	e8df f000 	tbb	[pc, r0]
9000064c:	02060a0e 	.word	0x02060a0e
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
90000650:	2140      	movs	r1, #64	; 0x40
90000652:	4808      	ldr	r0, [pc, #32]	; (90000674 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
90000654:	f009 bb44 	b.w	90009ce0 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
90000658:	2140      	movs	r1, #64	; 0x40
9000065a:	4807      	ldr	r0, [pc, #28]	; (90000678 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
9000065c:	f009 bb40 	b.w	90009ce0 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
90000660:	2180      	movs	r1, #128	; 0x80
90000662:	4805      	ldr	r0, [pc, #20]	; (90000678 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
90000664:	f009 bb3c 	b.w	90009ce0 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000668:	2108      	movs	r1, #8
9000066a:	4804      	ldr	r0, [pc, #16]	; (9000067c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x38>)
9000066c:	f009 bb38 	b.w	90009ce0 <HAL_GPIO_TogglePin>
}
90000670:	4770      	bx	lr
90000672:	bf00      	nop
90000674:	58020000 	.word	0x58020000
90000678:	58020400 	.word	0x58020400
9000067c:	58021800 	.word	0x58021800

90000680 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
    {
        return DMA_TYPE_GENERIC;
    }
90000680:	2000      	movs	r0, #0
90000682:	4770      	bx	lr

90000684 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
90000684:	2301      	movs	r3, #1
        requestedOrientation = orientation;
90000686:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
9000068a:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
9000068e:	4770      	bx	lr

90000690 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
90000690:	2000      	movs	r0, #0
90000692:	4770      	bx	lr

90000694 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000694:	1e0a      	subs	r2, r1, #0
90000696:	4b03      	ldr	r3, [pc, #12]	; (900006a4 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000698:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000069a:	bf18      	it	ne
9000069c:	2201      	movne	r2, #1
9000069e:	701a      	strb	r2, [r3, #0]
    }
900006a0:	4770      	bx	lr
900006a2:	bf00      	nop
900006a4:	24028193 	.word	0x24028193

900006a8 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
900006a8:	2000      	movs	r0, #0
900006aa:	4770      	bx	lr

900006ac <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
900006ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
    virtual void taskDelay(uint16_t ms)
900006ae:	4608      	mov	r0, r1
        if (taskDelayFunc)
900006b0:	b103      	cbz	r3, 900006b4 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
900006b2:	4718      	bx	r3
        }
    }
900006b4:	4770      	bx	lr
900006b6:	bf00      	nop

900006b8 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
900006b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
900006bc:	4770      	bx	lr
900006be:	bf00      	nop

900006c0 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
900006c0:	4770      	bx	lr
900006c2:	bf00      	nop

900006c4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
900006c4:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
900006c6:	4b09      	ldr	r3, [pc, #36]	; (900006ec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
900006c8:	881b      	ldrh	r3, [r3, #0]
900006ca:	428b      	cmp	r3, r1
900006cc:	d808      	bhi.n	900006e0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
900006ce:	4b08      	ldr	r3, [pc, #32]	; (900006f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
900006d0:	881b      	ldrh	r3, [r3, #0]
900006d2:	4293      	cmp	r3, r2
900006d4:	d804      	bhi.n	900006e0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
900006d6:	4807      	ldr	r0, [pc, #28]	; (900006f4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
        FRAME_BUFFER_HEIGHT = height;
900006d8:	4b07      	ldr	r3, [pc, #28]	; (900006f8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
        FRAME_BUFFER_WIDTH = width;
900006da:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = height;
900006dc:	801a      	strh	r2, [r3, #0]
    }
900006de:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
900006e0:	4b06      	ldr	r3, [pc, #24]	; (900006fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
900006e2:	219e      	movs	r1, #158	; 0x9e
900006e4:	4a06      	ldr	r2, [pc, #24]	; (90000700 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
900006e6:	4807      	ldr	r0, [pc, #28]	; (90000704 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
900006e8:	f026 fcf4 	bl	900270d4 <__assert_func>
900006ec:	24028188 	.word	0x24028188
900006f0:	2402818a 	.word	0x2402818a
900006f4:	2402818e 	.word	0x2402818e
900006f8:	24028190 	.word	0x24028190
900006fc:	90028214 	.word	0x90028214
90000700:	90028278 	.word	0x90028278
90000704:	900282bc 	.word	0x900282bc

90000708 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
90000708:	b510      	push	{r4, lr}
9000070a:	4604      	mov	r4, r0
        swapFrameBuffers();
9000070c:	f012 ff4a 	bl	900135a4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
90000710:	6823      	ldr	r3, [r4, #0]
90000712:	4620      	mov	r0, r4
90000714:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
90000718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
9000071c:	4718      	bx	r3
9000071e:	bf00      	nop

90000720 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
90000720:	f001 be8e 	b.w	90002440 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

90000724 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
90000724:	f001 be92 	b.w	9000244c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

90000728 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
90000728:	b510      	push	{r4, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
9000072a:	f001 ff51 	bl	900025d0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
9000072e:	4812      	ldr	r0, [pc, #72]	; (90000778 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x50>)
90000730:	2300      	movs	r3, #0
90000732:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000736:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
9000073a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000073e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90000742:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000746:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
9000074a:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000074e:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000752:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90000754:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90000758:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000075a:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
      } while (ways-- != 0U);
9000075e:	1c5a      	adds	r2, r3, #1
90000760:	d1f8      	bne.n	90000754 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2c>
    } while(sets-- != 0U);
90000762:	f1ac 0c20 	sub.w	ip, ip, #32
90000766:	f11c 0f20 	cmn.w	ip, #32
9000076a:	d1f0      	bne.n	9000074e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
9000076c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90000770:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
90000774:	bd10      	pop	{r4, pc}
90000776:	bf00      	nop
90000778:	e000ed00 	.word	0xe000ed00

9000077c <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
9000077c:	f001 be3c 	b.w	900023f8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

90000780 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
90000780:	f002 b84c 	b.w	9000281c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

90000784 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
90000784:	f002 b836 	b.w	900027f4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

90000788 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
90000788:	f001 be40 	b.w	9000240c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

9000078c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
9000078c:	f012 b962 	b.w	90012a54 <_ZN8touchgfx3HAL16flushFrameBufferEv>

90000790 <_ZN11TouchGFXHALD0Ev>:
90000790:	b510      	push	{r4, lr}
90000792:	4604      	mov	r4, r0
90000794:	2188      	movs	r1, #136	; 0x88
90000796:	f026 fc6e 	bl	90027076 <_ZdlPvj>
9000079a:	4620      	mov	r0, r4
9000079c:	bd10      	pop	{r4, pc}
9000079e:	bf00      	nop

900007a0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
900007a0:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
900007a4:	b11b      	cbz	r3, 900007ae <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
900007a6:	6840      	ldr	r0, [r0, #4]
900007a8:	6803      	ldr	r3, [r0, #0]
900007aa:	681b      	ldr	r3, [r3, #0]
900007ac:	4718      	bx	r3
    }
900007ae:	4618      	mov	r0, r3
900007b0:	4770      	bx	lr
900007b2:	bf00      	nop

900007b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
900007b4:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
900007b8:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
900007bc:	429a      	cmp	r2, r3
        {
            if (DISPLAY_ROTATION == rotate0)
900007be:	4b0b      	ldr	r3, [pc, #44]	; (900007ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x38>)
900007c0:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
900007c2:	d00b      	beq.n	900007dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x28>
            if (DISPLAY_ROTATION == rotate0)
900007c4:	b94a      	cbnz	r2, 900007da <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
900007c6:	4a0a      	ldr	r2, [pc, #40]	; (900007f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
                DISPLAY_WIDTH = tmp;
                DISPLAY_ROTATION = rotate90;
900007c8:	f04f 0c01 	mov.w	ip, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007cc:	4909      	ldr	r1, [pc, #36]	; (900007f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
900007ce:	8810      	ldrh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
900007d0:	f883 c000 	strb.w	ip, [r3]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007d4:	880b      	ldrh	r3, [r1, #0]
            DISPLAY_WIDTH = tmp;
900007d6:	8008      	strh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007d8:	8013      	strh	r3, [r2, #0]
        }
    }
900007da:	4770      	bx	lr
        else if (DISPLAY_ROTATION != rotate0)
900007dc:	2a00      	cmp	r2, #0
900007de:	d0fc      	beq.n	900007da <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            const uint16_t tmp = DISPLAY_HEIGHT;
900007e0:	4a03      	ldr	r2, [pc, #12]	; (900007f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
            DISPLAY_ROTATION = rotate0;
900007e2:	f04f 0c00 	mov.w	ip, #0
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007e6:	4903      	ldr	r1, [pc, #12]	; (900007f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
900007e8:	e7f1      	b.n	900007ce <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x1a>
900007ea:	bf00      	nop
900007ec:	2402818c 	.word	0x2402818c
900007f0:	2402818a 	.word	0x2402818a
900007f4:	24028188 	.word	0x24028188

900007f8 <_ZN8touchgfx3HAL10getDMATypeEv>:
        return dma.getDMAType();
900007f8:	6840      	ldr	r0, [r0, #4]
900007fa:	4a04      	ldr	r2, [pc, #16]	; (9000080c <_ZN8touchgfx3HAL10getDMATypeEv+0x14>)
900007fc:	6803      	ldr	r3, [r0, #0]
900007fe:	699b      	ldr	r3, [r3, #24]
90000800:	4293      	cmp	r3, r2
90000802:	d101      	bne.n	90000808 <_ZN8touchgfx3HAL10getDMATypeEv+0x10>
    }
90000804:	2000      	movs	r0, #0
90000806:	4770      	bx	lr
        return dma.getDMAType();
90000808:	4718      	bx	r3
9000080a:	bf00      	nop
9000080c:	90000681 	.word	0x90000681

90000810 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
        assert(frameBuffer != 0 && "A framebuffer address must be set");
90000810:	b1a9      	cbz	r1, 9000083e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2e>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
90000812:	6402      	str	r2, [r0, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90000814:	3a00      	subs	r2, #0
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
90000816:	63c1      	str	r1, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90000818:	bf18      	it	ne
9000081a:	2201      	movne	r2, #1
9000081c:	490c      	ldr	r1, [pc, #48]	; (90000850 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
9000081e:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
90000820:	6802      	ldr	r2, [r0, #0]
90000822:	490c      	ldr	r1, [pc, #48]	; (90000854 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x44>)
90000824:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
90000828:	428a      	cmp	r2, r1
9000082a:	d106      	bne.n	9000083a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2a>
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000082c:	1e19      	subs	r1, r3, #0
9000082e:	4a0a      	ldr	r2, [pc, #40]	; (90000858 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x48>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000830:	6443      	str	r3, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000832:	bf18      	it	ne
90000834:	2101      	movne	r1, #1
90000836:	7011      	strb	r1, [r2, #0]
90000838:	4770      	bx	lr
        setAnimationStorage(animationStorage);
9000083a:	4619      	mov	r1, r3
9000083c:	4710      	bx	r2
        assert(frameBuffer != 0 && "A framebuffer address must be set");
9000083e:	4b07      	ldr	r3, [pc, #28]	; (9000085c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x4c>)
90000840:	f240 21d2 	movw	r1, #722	; 0x2d2
90000844:	4a06      	ldr	r2, [pc, #24]	; (90000860 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x50>)
90000846:	4807      	ldr	r0, [pc, #28]	; (90000864 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
90000848:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
9000084a:	f026 fc43 	bl	900270d4 <__assert_func>
9000084e:	bf00      	nop
90000850:	24028192 	.word	0x24028192
90000854:	90000695 	.word	0x90000695
90000858:	24028193 	.word	0x24028193
9000085c:	90028304 	.word	0x90028304
90000860:	9002833c 	.word	0x9002833c
90000864:	900282bc 	.word	0x900282bc

90000868 <_ZN11TouchGFXHAL9taskEntryEv>:
{
90000868:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
9000086a:	6803      	ldr	r3, [r0, #0]
{
9000086c:	4604      	mov	r4, r0
9000086e:	4d17      	ldr	r5, [pc, #92]	; (900008cc <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
    enableLCDControllerInterrupt();
90000870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90000874:	4798      	blx	r3
    enableInterrupts();
90000876:	6823      	ldr	r3, [r4, #0]
90000878:	4620      	mov	r0, r4
9000087a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000087c:	4798      	blx	r3
    OSWrappers::waitForVSync();
9000087e:	f001 f8bb 	bl	900019f8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
90000882:	6823      	ldr	r3, [r4, #0]
90000884:	4620      	mov	r0, r4
90000886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90000888:	4798      	blx	r3
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
9000088a:	2201      	movs	r2, #1
9000088c:	2104      	movs	r1, #4
9000088e:	4810      	ldr	r0, [pc, #64]	; (900008d0 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
90000890:	f009 fa22 	bl	90009cd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_DE_GPIO_Port, LCD_DE_Pin, GPIO_PIN_SET);
90000894:	2201      	movs	r2, #1
90000896:	2180      	movs	r1, #128	; 0x80
90000898:	480e      	ldr	r0, [pc, #56]	; (900008d4 <_ZN11TouchGFXHAL9taskEntryEv+0x6c>)
9000089a:	f009 fa1d 	bl	90009cd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
9000089e:	2201      	movs	r2, #1
900008a0:	480d      	ldr	r0, [pc, #52]	; (900008d8 <_ZN11TouchGFXHAL9taskEntryEv+0x70>)
900008a2:	4611      	mov	r1, r2
900008a4:	f009 fa18 	bl	90009cd8 <HAL_GPIO_WritePin>
        OSWrappers::waitForVSync();
900008a8:	f001 f8a6 	bl	900019f8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
900008ac:	6823      	ldr	r3, [r4, #0]
        swapFrameBuffers();
900008ae:	4620      	mov	r0, r4
900008b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900008b2:	42ab      	cmp	r3, r5
900008b4:	d107      	bne.n	900008c6 <_ZN11TouchGFXHAL9taskEntryEv+0x5e>
900008b6:	f012 fe75 	bl	900135a4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
900008ba:	6823      	ldr	r3, [r4, #0]
900008bc:	4620      	mov	r0, r4
900008be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
900008c2:	4798      	blx	r3
    }
900008c4:	e7f0      	b.n	900008a8 <_ZN11TouchGFXHAL9taskEntryEv+0x40>
900008c6:	4798      	blx	r3
900008c8:	e7ee      	b.n	900008a8 <_ZN11TouchGFXHAL9taskEntryEv+0x40>
900008ca:	bf00      	nop
900008cc:	90000709 	.word	0x90000709
900008d0:	58020000 	.word	0x58020000
900008d4:	58020c00 	.word	0x58020c00
900008d8:	58022800 	.word	0x58022800

900008dc <_ZN11TouchGFXHAL10initializeEv>:
{
900008dc:	b538      	push	{r3, r4, r5, lr}
900008de:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::initialize();
900008e0:	f001 ffa6 	bl	90002830 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);
900008e4:	4817      	ldr	r0, [pc, #92]	; (90000944 <_ZN11TouchGFXHAL10initializeEv+0x68>)
900008e6:	6823      	ldr	r3, [r4, #0]
900008e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
900008ea:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
900008ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
900008f0:	4285      	cmp	r5, r0
900008f2:	d119      	bne.n	90000928 <_ZN11TouchGFXHAL10initializeEv+0x4c>
        assert(frameBuffer != 0 && "A framebuffer address must be set");
900008f4:	b1f9      	cbz	r1, 90000936 <_ZN11TouchGFXHAL10initializeEv+0x5a>
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900008f6:	3a00      	subs	r2, #0
900008f8:	4913      	ldr	r1, [pc, #76]	; (90000948 <_ZN11TouchGFXHAL10initializeEv+0x6c>)
        setAnimationStorage(animationStorage);
900008fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900008fe:	bf18      	it	ne
90000900:	2201      	movne	r2, #1
90000902:	4812      	ldr	r0, [pc, #72]	; (9000094c <_ZN11TouchGFXHAL10initializeEv+0x70>)
90000904:	428b      	cmp	r3, r1
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000906:	4912      	ldr	r1, [pc, #72]	; (90000950 <_ZN11TouchGFXHAL10initializeEv+0x74>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90000908:	7002      	strb	r2, [r0, #0]
        setAnimationStorage(animationStorage);
9000090a:	d111      	bne.n	90000930 <_ZN11TouchGFXHAL10initializeEv+0x54>
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000090c:	4b11      	ldr	r3, [pc, #68]	; (90000954 <_ZN11TouchGFXHAL10initializeEv+0x78>)
9000090e:	2201      	movs	r2, #1
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000910:	6461      	str	r1, [r4, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000912:	701a      	strb	r2, [r3, #0]
    instrumentation.init();
90000914:	f104 057c 	add.w	r5, r4, #124	; 0x7c
90000918:	4628      	mov	r0, r5
9000091a:	f7ff fd7d 	bl	90000418 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
9000091e:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
90000920:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
90000922:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
90000926:	bd38      	pop	{r3, r4, r5, pc}
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);
90000928:	4b09      	ldr	r3, [pc, #36]	; (90000950 <_ZN11TouchGFXHAL10initializeEv+0x74>)
9000092a:	4620      	mov	r0, r4
9000092c:	47a8      	blx	r5
9000092e:	e7f1      	b.n	90000914 <_ZN11TouchGFXHAL10initializeEv+0x38>
        setAnimationStorage(animationStorage);
90000930:	4620      	mov	r0, r4
90000932:	4798      	blx	r3
90000934:	e7ee      	b.n	90000914 <_ZN11TouchGFXHAL10initializeEv+0x38>
        assert(frameBuffer != 0 && "A framebuffer address must be set");
90000936:	4b08      	ldr	r3, [pc, #32]	; (90000958 <_ZN11TouchGFXHAL10initializeEv+0x7c>)
90000938:	f240 21d2 	movw	r1, #722	; 0x2d2
9000093c:	4a07      	ldr	r2, [pc, #28]	; (9000095c <_ZN11TouchGFXHAL10initializeEv+0x80>)
9000093e:	4808      	ldr	r0, [pc, #32]	; (90000960 <_ZN11TouchGFXHAL10initializeEv+0x84>)
90000940:	f026 fbc8 	bl	900270d4 <__assert_func>
90000944:	90000811 	.word	0x90000811
90000948:	90000695 	.word	0x90000695
9000094c:	24028192 	.word	0x24028192
90000950:	d0000000 	.word	0xd0000000
90000954:	24028193 	.word	0x24028193
90000958:	90028304 	.word	0x90028304
9000095c:	9002833c 	.word	0x9002833c
90000960:	900282bc 	.word	0x900282bc

90000964 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
90000964:	b508      	push	{r3, lr}
        return instance;
90000966:	4b07      	ldr	r3, [pc, #28]	; (90000984 <IdleTaskHook+0x20>)
        if ((int)p) //idle task sched out
90000968:	b128      	cbz	r0, 90000976 <IdleTaskHook+0x12>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
9000096a:	6818      	ldr	r0, [r3, #0]
9000096c:	2101      	movs	r1, #1
9000096e:	f012 fe33 	bl	900135d8 <_ZN8touchgfx3HAL12setMCUActiveEb>
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
        }
        return pdTRUE;
    }
90000972:	2001      	movs	r0, #1
90000974:	bd08      	pop	{r3, pc}
            touchgfx::HAL::getInstance()->setMCUActive(false);
90000976:	4601      	mov	r1, r0
90000978:	6818      	ldr	r0, [r3, #0]
9000097a:	f012 fe2d 	bl	900135d8 <_ZN8touchgfx3HAL12setMCUActiveEb>
    }
9000097e:	2001      	movs	r0, #1
90000980:	bd08      	pop	{r3, pc}
90000982:	bf00      	nop
90000984:	24028194 	.word	0x24028194

90000988 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
90000988:	6940      	ldr	r0, [r0, #20]
9000098a:	4770      	bx	lr

9000098c <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    virtual void setRepeatVideo(bool repeat);
    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
9000098c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
90000990:	4770      	bx	lr
90000992:	bf00      	nop

90000994 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
90000994:	6b03      	ldr	r3, [r0, #48]	; 0x30
90000996:	b10b      	cbz	r3, 9000099c <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x8>
90000998:	2001      	movs	r0, #1
}
9000099a:	4770      	bx	lr
    return (reader != 0) || (movieData != 0);
9000099c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
9000099e:	3800      	subs	r0, #0
900009a0:	bf18      	it	ne
900009a2:	2001      	movne	r0, #1
900009a4:	4770      	bx	lr
900009a6:	bf00      	nop

900009a8 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
900009a8:	6880      	ldr	r0, [r0, #8]
900009aa:	4770      	bx	lr

900009ac <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
900009ac:	4770      	bx	lr
900009ae:	bf00      	nop

900009b0 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
900009b0:	3004      	adds	r0, #4
{
900009b2:	468c      	mov	ip, r1
    *data = videoInfo;
900009b4:	c80f      	ldmia	r0, {r0, r1, r2, r3}
900009b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
900009ba:	4770      	bx	lr

900009bc <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
900009bc:	4770      	bx	lr
900009be:	bf00      	nop

900009c0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
900009c0:	b508      	push	{r3, lr}
    assert(0);
900009c2:	4a03      	ldr	r2, [pc, #12]	; (900009d0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
900009c4:	f240 11cf 	movw	r1, #463	; 0x1cf
900009c8:	4b02      	ldr	r3, [pc, #8]	; (900009d4 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
900009ca:	4803      	ldr	r0, [pc, #12]	; (900009d8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
900009cc:	f026 fb82 	bl	900270d4 <__assert_func>
900009d0:	90028468 	.word	0x90028468
900009d4:	90028464 	.word	0x90028464
900009d8:	900284c4 	.word	0x900284c4

900009dc <_ZN20HardwareMJPEGDecoderD0Ev>:
900009dc:	b510      	push	{r4, lr}
900009de:	4604      	mov	r4, r0
900009e0:	2148      	movs	r1, #72	; 0x48
900009e2:	f026 fb48 	bl	90027076 <_ZdlPvj>
900009e6:	4620      	mov	r0, r4
900009e8:	bd10      	pop	{r4, pc}
900009ea:	bf00      	nop

900009ec <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
900009ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900009f0:	b085      	sub	sp, #20
900009f2:	4605      	mov	r5, r0
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
900009f4:	4c65      	ldr	r4, [pc, #404]	; (90000b8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
900009f6:	9003      	str	r0, [sp, #12]
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
900009f8:	2002      	movs	r0, #2
900009fa:	6120      	str	r0, [r4, #16]
      JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
900009fc:	68e8      	ldr	r0, [r5, #12]
      if((JPEG_ConvertorParams.WidthExtend % 16) != 0)
900009fe:	0705      	lsls	r5, r0, #28
90000a00:	d003      	beq.n	90000a0a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1e>
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
90000a02:	f020 000f 	bic.w	r0, r0, #15
90000a06:	4c61      	ldr	r4, [pc, #388]	; (90000b8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
90000a08:	3010      	adds	r0, #16
90000a0a:	6020      	str	r0, [r4, #0]
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
90000a0c:	0900      	lsrs	r0, r0, #4
90000a0e:	4c5f      	ldr	r4, [pc, #380]	; (90000b8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
{
    FrameBufferAddress = output;
    Output_Is_Paused = 0;
90000a10:	2700      	movs	r7, #0
90000a12:	4e5f      	ldr	r6, [pc, #380]	; (90000b90 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a4>)
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
90000a14:	60e0      	str	r0, [r4, #12]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
    }

    //Do not return from this function until done with decoding all chunks.
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a16:	eb00 0040 	add.w	r0, r0, r0, lsl #1
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000a1a:	4d5e      	ldr	r5, [pc, #376]	; (90000b94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a8>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a1c:	01c0      	lsls	r0, r0, #7
    Output_Is_Paused = 0;
90000a1e:	6037      	str	r7, [r6, #0]
    DMA2D_output_Is_Paused = 1;
90000a20:	f8df b19c 	ldr.w	fp, [pc, #412]	; 90000bc0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d4>
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a24:	9000      	str	r0, [sp, #0]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a26:	9803      	ldr	r0, [sp, #12]
    JPEG_OUT_Read_BufferIndex = 0;
90000a28:	f8df 8198 	ldr.w	r8, [pc, #408]	; 90000bc4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d8>
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a2c:	6900      	ldr	r0, [r0, #16]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000a2e:	702f      	strb	r7, [r5, #0]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a30:	f000 000f 	and.w	r0, r0, #15
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000a34:	60af      	str	r7, [r5, #8]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000a36:	732f      	strb	r7, [r5, #12]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a38:	f1c0 0010 	rsb	r0, r0, #16
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000a3c:	616f      	str	r7, [r5, #20]
90000a3e:	f8df 9188 	ldr.w	r9, [pc, #392]	; 90000bc8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1dc>
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a42:	60a0      	str	r0, [r4, #8]
      JPEG_ConvertorParams.ScaledWidth = 480 * JPEG_ConvertorParams.bytes_pr_pixel;
90000a44:	f44f 7070 	mov.w	r0, #960	; 0x3c0
90000a48:	f8df a180 	ldr.w	sl, [pc, #384]	; 90000bcc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1e0>
90000a4c:	6060      	str	r0, [r4, #4]
    FrameBufferAddress = output;
90000a4e:	4852      	ldr	r0, [pc, #328]	; (90000b98 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1ac>)
90000a50:	4c52      	ldr	r4, [pc, #328]	; (90000b9c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b0>)
90000a52:	6003      	str	r3, [r0, #0]
    JPEG_OUT_Write_BufferIndex = 0;
90000a54:	4b52      	ldr	r3, [pc, #328]	; (90000ba0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b4>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a56:	4853      	ldr	r0, [pc, #332]	; (90000ba4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b8>)
    JPEG_OUT_Write_BufferIndex = 0;
90000a58:	601f      	str	r7, [r3, #0]
    JPEG_InputImageIndex = 0;
90000a5a:	4b53      	ldr	r3, [pc, #332]	; (90000ba8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1bc>)
    JPEG_OUT_Read_BufferIndex = 0;
90000a5c:	f8c8 7000 	str.w	r7, [r8]
    JPEG_InputImageIndex = 0;
90000a60:	601f      	str	r7, [r3, #0]
    JPEG_InputImageAddress = (uint32_t)input;
90000a62:	4b52      	ldr	r3, [pc, #328]	; (90000bac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c0>)
90000a64:	6019      	str	r1, [r3, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000a66:	4b52      	ldr	r3, [pc, #328]	; (90000bb0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c4>)
90000a68:	601a      	str	r2, [r3, #0]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    MCU_BlockIndex = 0;
90000a6e:	4b51      	ldr	r3, [pc, #324]	; (90000bb4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
90000a70:	601f      	str	r7, [r3, #0]
    DMA2D_output_Is_Paused = 1;
90000a72:	2301      	movs	r3, #1
90000a74:	f8cb 3000 	str.w	r3, [fp]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a78:	686b      	ldr	r3, [r5, #4]
90000a7a:	f00a fa5d 	bl	9000af38 <HAL_JPEG_Decode_DMA>
  * @param dma: DMA2D reference
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef *hjpeg, touchgfx::DMA_Interface& dma)
{
  if(Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
90000a7e:	f8d9 3000 	ldr.w	r3, [r9]
90000a82:	b11b      	cbz	r3, 90000a8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xa0>
90000a84:	4b4c      	ldr	r3, [pc, #304]	; (90000bb8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1cc>)
90000a86:	681b      	ldr	r3, [r3, #0]
90000a88:	2b00      	cmp	r3, #0
90000a8a:	d17d      	bne.n	90000b88 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x19c>
  {
      return 1;
  }

  // Add job to DMA2D if ready and JPEG buffer is full
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000a8c:	f8d8 3000 	ldr.w	r3, [r8]
90000a90:	eb03 0243 	add.w	r2, r3, r3, lsl #1
90000a94:	f815 1022 	ldrb.w	r1, [r5, r2, lsl #2]
90000a98:	eb05 0282 	add.w	r2, r5, r2, lsl #2
90000a9c:	2901      	cmp	r1, #1
90000a9e:	d042      	beq.n	90000b26 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x13a>
      // Try to start DMA2D
      dma.start();
  }

  // Start JPEG IP if paused and next buffer is empty
  if((Output_Is_Paused == 1) && \
90000aa0:	6833      	ldr	r3, [r6, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000aa2:	2b01      	cmp	r3, #1
90000aa4:	d029      	beq.n	90000afa <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x10e>
  {
      Output_Is_Paused = 0;
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
  }

  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000aa6:	6833      	ldr	r3, [r6, #0]
90000aa8:	b9c3      	cbnz	r3, 90000adc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xf0>
90000aaa:	f8db 3000 	ldr.w	r3, [fp]
90000aae:	fab3 f383 	clz	r3, r3
90000ab2:	095b      	lsrs	r3, r3, #5
90000ab4:	005b      	lsls	r3, r3, #1
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000ab6:	6023      	str	r3, [r4, #0]
        if (JpegProcessing_End == 2)
90000ab8:	6823      	ldr	r3, [r4, #0]
90000aba:	2b02      	cmp	r3, #2
90000abc:	d013      	beq.n	90000ae6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xfa>
      while(JpegProcessing_End != 1);
90000abe:	6823      	ldr	r3, [r4, #0]
90000ac0:	2b01      	cmp	r3, #1
90000ac2:	d1dc      	bne.n	90000a7e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x92>
  {
      return count_ == max_size_;
  }
  void reset()
  {
      head_ = tail_ = count_ = 0;
90000ac4:	2300      	movs	r3, #0
      DMA2D_CopyBufferEnd = 0;
90000ac6:	4a3c      	ldr	r2, [pc, #240]	; (90000bb8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1cc>)
90000ac8:	e9ca 3302 	strd	r3, r3, [sl, #8]
90000acc:	f8ca 3004 	str.w	r3, [sl, #4]
      Jpeg_HWDecodingEnd = 0;
90000ad0:	f8c9 3000 	str.w	r3, [r9]
      DMA2D_CopyBufferEnd = 0;
90000ad4:	6013      	str	r3, [r2, #0]
}
90000ad6:	b005      	add	sp, #20
90000ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  {
      return 2;
  }

  return 0;
90000adc:	2300      	movs	r3, #0
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000ade:	6023      	str	r3, [r4, #0]
        if (JpegProcessing_End == 2)
90000ae0:	6823      	ldr	r3, [r4, #0]
90000ae2:	2b02      	cmp	r3, #2
90000ae4:	d1eb      	bne.n	90000abe <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xd2>
          SEM_WAIT(semDecodingDone);
90000ae6:	4b35      	ldr	r3, [pc, #212]	; (90000bbc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d0>)
90000ae8:	f04f 31ff 	mov.w	r1, #4294967295
90000aec:	6818      	ldr	r0, [r3, #0]
90000aee:	f00d feed 	bl	9000e8cc <osSemaphoreAcquire>
      while(JpegProcessing_End != 1);
90000af2:	6823      	ldr	r3, [r4, #0]
90000af4:	2b01      	cmp	r3, #1
90000af6:	d1c2      	bne.n	90000a7e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x92>
90000af8:	e7e4      	b.n	90000ac4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xd8>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000afa:	4b29      	ldr	r3, [pc, #164]	; (90000ba0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b4>)
90000afc:	681b      	ldr	r3, [r3, #0]
90000afe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if((Output_Is_Paused == 1) && \
90000b02:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000b06:	2b00      	cmp	r3, #0
90000b08:	d1cd      	bne.n	90000aa6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xba>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
90000b0a:	f8d8 3000 	ldr.w	r3, [r8]
90000b0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000b12:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000b16:	2b00      	cmp	r3, #0
90000b18:	d1c5      	bne.n	90000aa6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xba>
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000b1a:	2102      	movs	r1, #2
90000b1c:	4821      	ldr	r0, [pc, #132]	; (90000ba4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b8>)
      Output_Is_Paused = 0;
90000b1e:	6033      	str	r3, [r6, #0]
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000b20:	f00a fb52 	bl	9000b1c8 <HAL_JPEG_Resume>
90000b24:	e7bf      	b.n	90000aa6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xba>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000b26:	f8db 1000 	ldr.w	r1, [fp]
90000b2a:	2901      	cmp	r1, #1
90000b2c:	d1b8      	bne.n	90000aa0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb4>
      JPEG_OUT_Read_BufferIndex++;
90000b2e:	3301      	adds	r3, #1
      };
90000b30:	4920      	ldr	r1, [pc, #128]	; (90000bb4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
      tail_ = (tail_ + 1) % max_size_;
90000b32:	f8da 0000 	ldr.w	r0, [sl]
      JPEG_OUT_Read_BufferIndex++;
90000b36:	2b01      	cmp	r3, #1
      };
90000b38:	f8d1 c000 	ldr.w	ip, [r1]
      JPEG_OUT_Read_BufferIndex++;
90000b3c:	bf88      	it	hi
90000b3e:	463b      	movhi	r3, r7
90000b40:	f8c8 3000 	str.w	r3, [r8]
      buffer_[tail_] = job;
90000b44:	f8da 3008 	ldr.w	r3, [sl, #8]
      tail_ = (tail_ + 1) % max_size_;
90000b48:	1c59      	adds	r1, r3, #1
      buffer_[tail_] = job;
90000b4a:	3302      	adds	r3, #2
90000b4c:	f84a c033 	str.w	ip, [sl, r3, lsl #3]
90000b50:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
90000b54:	605a      	str	r2, [r3, #4]
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000b56:	9a03      	ldr	r2, [sp, #12]
      tail_ = (tail_ + 1) % max_size_;
90000b58:	fbb1 f3f0 	udiv	r3, r1, r0
90000b5c:	fb00 1113 	mls	r1, r0, r3, r1
90000b60:	6c50      	ldr	r0, [r2, #68]	; 0x44
      count_++;
90000b62:	f8da 200c 	ldr.w	r2, [sl, #12]
      tail_ = (tail_ + 1) % max_size_;
90000b66:	f8ca 1008 	str.w	r1, [sl, #8]
      count_++;
90000b6a:	3201      	adds	r2, #1
      MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
90000b6c:	4911      	ldr	r1, [pc, #68]	; (90000bb4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
90000b6e:	f8ca 200c 	str.w	r2, [sl, #12]
90000b72:	4a06      	ldr	r2, [pc, #24]	; (90000b8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
90000b74:	680b      	ldr	r3, [r1, #0]
90000b76:	68d2      	ldr	r2, [r2, #12]
90000b78:	4413      	add	r3, r2
90000b7a:	600b      	str	r3, [r1, #0]
      dma.start();
90000b7c:	6803      	ldr	r3, [r0, #0]
      DMA2D_output_Is_Paused = 0;
90000b7e:	f8cb 7000 	str.w	r7, [fp]
      dma.start();
90000b82:	691b      	ldr	r3, [r3, #16]
90000b84:	4798      	blx	r3
90000b86:	e78b      	b.n	90000aa0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb4>
      return 1;
90000b88:	2301      	movs	r3, #1
90000b8a:	e794      	b.n	90000ab6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xca>
90000b8c:	24005ba0 	.word	0x24005ba0
90000b90:	24005b9c 	.word	0x24005b9c
90000b94:	24000004 	.word	0x24000004
90000b98:	24005b74 	.word	0x24005b74
90000b9c:	24005b8c 	.word	0x24005b8c
90000ba0:	24005b88 	.word	0x24005b88
90000ba4:	2400ce30 	.word	0x2400ce30
90000ba8:	24005b7c 	.word	0x24005b7c
90000bac:	24005b78 	.word	0x24005b78
90000bb0:	24005b80 	.word	0x24005b80
90000bb4:	24005b94 	.word	0x24005b94
90000bb8:	24005b6c 	.word	0x24005b6c
90000bbc:	24005bd8 	.word	0x24005bd8
90000bc0:	24005b70 	.word	0x24005b70
90000bc4:	24005b84 	.word	0x24005b84
90000bc8:	24005b90 	.word	0x24005b90
90000bcc:	24005bb4 	.word	0x24005bb4

90000bd0 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
{
90000bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (frameNumber > getNumberOfFrames())
90000bd2:	6803      	ldr	r3, [r0, #0]
90000bd4:	2901      	cmp	r1, #1
90000bd6:	4e2a      	ldr	r6, [pc, #168]	; (90000c80 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb0>)
{
90000bd8:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
90000bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000bdc:	bf38      	it	cc
90000bde:	2101      	movcc	r1, #1
90000be0:	42b3      	cmp	r3, r6
90000be2:	460d      	mov	r5, r1
90000be4:	d138      	bne.n	90000c58 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x88>
    return videoInfo.number_of_frames;
90000be6:	6883      	ldr	r3, [r0, #8]
    if (frameNumber > getNumberOfFrames())
90000be8:	4299      	cmp	r1, r3
90000bea:	d82a      	bhi.n	90000c42 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x72>
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000bec:	1e6b      	subs	r3, r5, #1
90000bee:	69e2      	ldr	r2, [r4, #28]
    if (reader != 0)
90000bf0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000bf2:	eb02 1703 	add.w	r7, r2, r3, lsl #4
    if (reader != 0)
90000bf6:	b350      	cbz	r0, 90000c4e <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x7e>
        if (length > aviBufferLength)
90000bf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90000bfa:	2b0f      	cmp	r3, #15
90000bfc:	d937      	bls.n	90000c6e <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x9e>
        reader->seek(offset);
90000bfe:	6803      	ldr	r3, [r0, #0]
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000c00:	f107 0608 	add.w	r6, r7, #8
        reader->seek(offset);
90000c04:	68db      	ldr	r3, [r3, #12]
90000c06:	4631      	mov	r1, r6
90000c08:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000c0a:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000c0c:	2210      	movs	r2, #16
90000c0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000c10:	6803      	ldr	r3, [r0, #0]
90000c12:	691b      	ldr	r3, [r3, #16]
90000c14:	4798      	blx	r3
90000c16:	b1b0      	cbz	r0, 90000c46 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x76>
    if (reader != 0)
90000c18:	6b23      	ldr	r3, [r4, #48]	; 0x30
        aviBufferStartOffset = offset;
90000c1a:	63e6      	str	r6, [r4, #60]	; 0x3c
    if (reader != 0)
90000c1c:	b1bb      	cbz	r3, 90000c4e <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x7e>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000c1e:	6b62      	ldr	r2, [r4, #52]	; 0x34
90000c20:	7a93      	ldrb	r3, [r2, #10]
90000c22:	7a51      	ldrb	r1, [r2, #9]
90000c24:	041b      	lsls	r3, r3, #16
90000c26:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
90000c2a:	7a11      	ldrb	r1, [r2, #8]
90000c2c:	7ad2      	ldrb	r2, [r2, #11]
90000c2e:	430b      	orrs	r3, r1
90000c30:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c34:	6a22      	ldr	r2, [r4, #32]
    this->frameNumber = frameNumber;
90000c36:	6165      	str	r5, [r4, #20]
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c38:	3a04      	subs	r2, #4
90000c3a:	441a      	add	r2, r3
90000c3c:	61a2      	str	r2, [r4, #24]
}
90000c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return videoInfo.number_of_frames;
90000c40:	68a3      	ldr	r3, [r4, #8]
{
90000c42:	461d      	mov	r5, r3
90000c44:	e7d2      	b.n	90000bec <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
            lastError = AVI_ERROR_EOF_REACHED;
90000c46:	230d      	movs	r3, #13
90000c48:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90000c4c:	e7e4      	b.n	90000c18 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x48>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c4e:	f107 0310 	add.w	r3, r7, #16
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000c52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90000c54:	58d3      	ldr	r3, [r2, r3]
90000c56:	e7ed      	b.n	90000c34 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x64>
    if (frameNumber > getNumberOfFrames())
90000c58:	4798      	blx	r3
90000c5a:	4285      	cmp	r5, r0
90000c5c:	d9c6      	bls.n	90000bec <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
        frameNumber = getNumberOfFrames();
90000c5e:	6823      	ldr	r3, [r4, #0]
90000c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000c62:	42b3      	cmp	r3, r6
90000c64:	d0ec      	beq.n	90000c40 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x70>
90000c66:	4620      	mov	r0, r4
90000c68:	4798      	blx	r3
90000c6a:	4605      	mov	r5, r0
90000c6c:	e7be      	b.n	90000bec <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000c6e:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000c70:	4b04      	ldr	r3, [pc, #16]	; (90000c84 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb4>)
90000c72:	4a05      	ldr	r2, [pc, #20]	; (90000c88 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb8>)
90000c74:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000c76:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90000c7a:	4804      	ldr	r0, [pc, #16]	; (90000c8c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xbc>)
90000c7c:	f026 fa2a 	bl	900270d4 <__assert_func>
90000c80:	900009a9 	.word	0x900009a9
90000c84:	90028520 	.word	0x90028520
90000c88:	90028534 	.word	0x90028534
90000c8c:	900284c4 	.word	0x900284c4

90000c90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
90000c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90000c94:	4604      	mov	r4, r0
    if (reader != 0)
90000c96:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
90000c98:	b083      	sub	sp, #12
90000c9a:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
90000c9c:	69a6      	ldr	r6, [r4, #24]
    if (reader != 0)
90000c9e:	2800      	cmp	r0, #0
90000ca0:	f000 80e4 	beq.w	90000e6c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1dc>
        if (length > aviBufferLength)
90000ca4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90000ca6:	2b07      	cmp	r3, #7
90000ca8:	f240 80e7 	bls.w	90000e7a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1ea>
        reader->seek(offset);
90000cac:	6803      	ldr	r3, [r0, #0]
90000cae:	4631      	mov	r1, r6
90000cb0:	68db      	ldr	r3, [r3, #12]
90000cb2:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000cb4:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000cb6:	2208      	movs	r2, #8
90000cb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000cba:	6803      	ldr	r3, [r0, #0]
90000cbc:	691b      	ldr	r3, [r3, #16]
90000cbe:	4798      	blx	r3
90000cc0:	2800      	cmp	r0, #0
90000cc2:	f000 80cf 	beq.w	90000e64 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1d4>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000cc6:	69a7      	ldr	r7, [r4, #24]
    if (reader != 0)
90000cc8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    const uint32_t length = getU32(currentMovieOffset + 4);
90000cca:	1d3a      	adds	r2, r7, #4
        aviBufferStartOffset = offset;
90000ccc:	63e6      	str	r6, [r4, #60]	; 0x3c
    if (reader != 0)
90000cce:	2800      	cmp	r0, #0
90000cd0:	f000 80dc 	beq.w	90000e8c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1fc>
        const uint32_t index = offset - aviBufferStartOffset;
90000cd4:	1b92      	subs	r2, r2, r6
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
90000cd6:	3708      	adds	r7, #8
        if (length > aviBufferLength)
90000cd8:	e9d4 630d 	ldrd	r6, r3, [r4, #52]	; 0x34
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000cdc:	18b1      	adds	r1, r6, r2
90000cde:	5cb2      	ldrb	r2, [r6, r2]
90000ce0:	788e      	ldrb	r6, [r1, #2]
90000ce2:	f891 c001 	ldrb.w	ip, [r1, #1]
90000ce6:	0436      	lsls	r6, r6, #16
90000ce8:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
90000cec:	4316      	orrs	r6, r2
90000cee:	78ca      	ldrb	r2, [r1, #3]
90000cf0:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
        if (length > aviBufferLength)
90000cf4:	42b3      	cmp	r3, r6
90000cf6:	f0c0 80c0 	bcc.w	90000e7a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1ea>
        reader->seek(offset);
90000cfa:	6803      	ldr	r3, [r0, #0]
90000cfc:	4639      	mov	r1, r7
90000cfe:	68db      	ldr	r3, [r3, #12]
90000d00:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000d02:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000d04:	4632      	mov	r2, r6
90000d06:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000d08:	6803      	ldr	r3, [r0, #0]
90000d0a:	691b      	ldr	r3, [r3, #16]
90000d0c:	4798      	blx	r3
90000d0e:	b910      	cbnz	r0, 90000d16 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x86>
            lastError = AVI_ERROR_EOF_REACHED;
90000d10:	230d      	movs	r3, #13
90000d12:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
90000d16:	6b61      	ldr	r1, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
90000d18:	63e7      	str	r7, [r4, #60]	; 0x3c
    if (frameBuffer) //only decode if buffers are assigned.
90000d1a:	2d00      	cmp	r5, #0
90000d1c:	d053      	beq.n	90000dc6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x136>
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d1e:	4a5c      	ldr	r2, [pc, #368]	; (90000e90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x200>)
    FrameBufferAddress = output;
90000d20:	4b5c      	ldr	r3, [pc, #368]	; (90000e94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x204>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d22:	68d2      	ldr	r2, [r2, #12]
    FrameBufferAddress = output;
90000d24:	601d      	str	r5, [r3, #0]
    Output_Is_Paused = 0;
90000d26:	2300      	movs	r3, #0
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d2c:	4d5a      	ldr	r5, [pc, #360]	; (90000e98 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x208>)
    Output_Is_Paused = 0;
90000d2e:	4f5b      	ldr	r7, [pc, #364]	; (90000e9c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x20c>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d30:	01d2      	lsls	r2, r2, #7
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d32:	702b      	strb	r3, [r5, #0]
    Output_Is_Paused = 0;
90000d34:	603b      	str	r3, [r7, #0]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000d36:	60ab      	str	r3, [r5, #8]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d38:	732b      	strb	r3, [r5, #12]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000d3a:	616b      	str	r3, [r5, #20]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d3c:	9200      	str	r2, [sp, #0]
    JPEG_OUT_Write_BufferIndex = 0;
90000d3e:	4a58      	ldr	r2, [pc, #352]	; (90000ea0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x210>)
    JPEG_OUT_Read_BufferIndex = 0;
90000d40:	f8df 8188 	ldr.w	r8, [pc, #392]	; 90000ecc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x23c>
    JPEG_OUT_Write_BufferIndex = 0;
90000d44:	6013      	str	r3, [r2, #0]
    JPEG_InputImageIndex = 0;
90000d46:	4a57      	ldr	r2, [pc, #348]	; (90000ea4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x214>)
    DMA2D_output_Is_Paused = 1;
90000d48:	f8df a184 	ldr.w	sl, [pc, #388]	; 90000ed0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x240>
    JPEG_InputImageIndex = 0;
90000d4c:	6013      	str	r3, [r2, #0]
    JPEG_InputImageAddress = (uint32_t)input;
90000d4e:	4a56      	ldr	r2, [pc, #344]	; (90000ea8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x218>)
    JPEG_OUT_Read_BufferIndex = 0;
90000d50:	f8c8 3000 	str.w	r3, [r8]
    JPEG_InputImageAddress = (uint32_t)input;
90000d54:	6011      	str	r1, [r2, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000d56:	4a55      	ldr	r2, [pc, #340]	; (90000eac <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x21c>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d58:	4855      	ldr	r0, [pc, #340]	; (90000eb0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x220>)
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000d5a:	6016      	str	r6, [r2, #0]
    MCU_BlockIndex = 0;
90000d5c:	4a55      	ldr	r2, [pc, #340]	; (90000eb4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
90000d5e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 90000ed4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x244>
90000d62:	6013      	str	r3, [r2, #0]
    DMA2D_output_Is_Paused = 1;
90000d64:	2301      	movs	r3, #1
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
90000d6a:	4e53      	ldr	r6, [pc, #332]	; (90000eb8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x228>)
    DMA2D_output_Is_Paused = 1;
90000d6c:	f8ca 3000 	str.w	r3, [sl]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d70:	686b      	ldr	r3, [r5, #4]
      buffer_[tail_] = job;
90000d72:	f8df b164 	ldr.w	fp, [pc, #356]	; 90000ed8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x248>
90000d76:	f00a f8df 	bl	9000af38 <HAL_JPEG_Decode_DMA>
    return 0;
90000d7a:	e008      	b.n	90000d8e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xfe>
  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000d7c:	f8da 3000 	ldr.w	r3, [sl]
90000d80:	fab3 f383 	clz	r3, r3
90000d84:	095b      	lsrs	r3, r3, #5
90000d86:	005b      	lsls	r3, r3, #1
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000d88:	6033      	str	r3, [r6, #0]
      while(JpegProcessing_End == 0);
90000d8a:	6833      	ldr	r3, [r6, #0]
90000d8c:	b9db      	cbnz	r3, 90000dc6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x136>
  if(Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
90000d8e:	f8d9 3000 	ldr.w	r3, [r9]
90000d92:	b11b      	cbz	r3, 90000d9c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x10c>
90000d94:	4b49      	ldr	r3, [pc, #292]	; (90000ebc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x22c>)
90000d96:	681b      	ldr	r3, [r3, #0]
90000d98:	2b00      	cmp	r3, #0
90000d9a:	d161      	bne.n	90000e60 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1d0>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000d9c:	f8d8 3000 	ldr.w	r3, [r8]
90000da0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
90000da4:	f815 1022 	ldrb.w	r1, [r5, r2, lsl #2]
90000da8:	eb05 0282 	add.w	r2, r5, r2, lsl #2
90000dac:	2901      	cmp	r1, #1
90000dae:	d024      	beq.n	90000dfa <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x16a>
  if((Output_Is_Paused == 1) && \
90000db0:	683b      	ldr	r3, [r7, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000db2:	2b01      	cmp	r3, #1
90000db4:	d00b      	beq.n	90000dce <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x13e>
  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000db6:	683b      	ldr	r3, [r7, #0]
90000db8:	2b00      	cmp	r3, #0
90000dba:	d0df      	beq.n	90000d7c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xec>
  return 0;
90000dbc:	2300      	movs	r3, #0
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000dbe:	6033      	str	r3, [r6, #0]
      while(JpegProcessing_End == 0);
90000dc0:	6833      	ldr	r3, [r6, #0]
90000dc2:	2b00      	cmp	r3, #0
90000dc4:	d0e3      	beq.n	90000d8e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xfe>
}
90000dc6:	2001      	movs	r0, #1
90000dc8:	b003      	add	sp, #12
90000dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000dce:	4b34      	ldr	r3, [pc, #208]	; (90000ea0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x210>)
90000dd0:	681b      	ldr	r3, [r3, #0]
90000dd2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if((Output_Is_Paused == 1) && \
90000dd6:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000dda:	2b00      	cmp	r3, #0
90000ddc:	d1eb      	bne.n	90000db6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x126>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
90000dde:	f8d8 3000 	ldr.w	r3, [r8]
90000de2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000de6:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000dea:	2b00      	cmp	r3, #0
90000dec:	d1e3      	bne.n	90000db6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x126>
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000dee:	2102      	movs	r1, #2
90000df0:	482f      	ldr	r0, [pc, #188]	; (90000eb0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x220>)
      Output_Is_Paused = 0;
90000df2:	603b      	str	r3, [r7, #0]
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000df4:	f00a f9e8 	bl	9000b1c8 <HAL_JPEG_Resume>
90000df8:	e7dd      	b.n	90000db6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x126>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000dfa:	f8da 1000 	ldr.w	r1, [sl]
90000dfe:	2901      	cmp	r1, #1
90000e00:	d1d6      	bne.n	90000db0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x120>
90000e02:	f8db 1008 	ldr.w	r1, [fp, #8]
      JPEG_OUT_Read_BufferIndex++;
90000e06:	3301      	adds	r3, #1
      };
90000e08:	482a      	ldr	r0, [pc, #168]	; (90000eb4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
      tail_ = (tail_ + 1) % max_size_;
90000e0a:	f8db c000 	ldr.w	ip, [fp]
      if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
90000e0e:	2b01      	cmp	r3, #1
      };
90000e10:	f8d0 e000 	ldr.w	lr, [r0]
90000e14:	f101 0001 	add.w	r0, r1, #1
      buffer_[tail_] = job;
90000e18:	f101 0102 	add.w	r1, r1, #2
        JPEG_OUT_Read_BufferIndex = 0;
90000e1c:	bf88      	it	hi
90000e1e:	2300      	movhi	r3, #0
90000e20:	f84b e031 	str.w	lr, [fp, r1, lsl #3]
90000e24:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
90000e28:	f8c8 3000 	str.w	r3, [r8]
      DMA2D_output_Is_Paused = 0;
90000e2c:	2300      	movs	r3, #0
90000e2e:	604a      	str	r2, [r1, #4]
      count_++;
90000e30:	f8db 100c 	ldr.w	r1, [fp, #12]
      tail_ = (tail_ + 1) % max_size_;
90000e34:	fbb0 f2fc 	udiv	r2, r0, ip
      count_++;
90000e38:	3101      	adds	r1, #1
      tail_ = (tail_ + 1) % max_size_;
90000e3a:	fb0c 0012 	mls	r0, ip, r2, r0
      count_++;
90000e3e:	f8cb 100c 	str.w	r1, [fp, #12]
      tail_ = (tail_ + 1) % max_size_;
90000e42:	f8cb 0008 	str.w	r0, [fp, #8]
      MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
90000e46:	4912      	ldr	r1, [pc, #72]	; (90000e90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x200>)
90000e48:	481a      	ldr	r0, [pc, #104]	; (90000eb4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
90000e4a:	68c9      	ldr	r1, [r1, #12]
90000e4c:	6802      	ldr	r2, [r0, #0]
90000e4e:	440a      	add	r2, r1
90000e50:	6002      	str	r2, [r0, #0]
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000e52:	6c60      	ldr	r0, [r4, #68]	; 0x44
      DMA2D_output_Is_Paused = 0;
90000e54:	f8ca 3000 	str.w	r3, [sl]
      dma.start();
90000e58:	6803      	ldr	r3, [r0, #0]
90000e5a:	691b      	ldr	r3, [r3, #16]
90000e5c:	4798      	blx	r3
90000e5e:	e7a7      	b.n	90000db0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x120>
      return 1;
90000e60:	2301      	movs	r3, #1
90000e62:	e791      	b.n	90000d88 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xf8>
            lastError = AVI_ERROR_EOF_REACHED;
90000e64:	230d      	movs	r3, #13
90000e66:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90000e6a:	e72c      	b.n	90000cc6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x36>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000e6c:	1d32      	adds	r2, r6, #4
    if (reader != 0)
90000e6e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
90000e70:	f106 0308 	add.w	r3, r6, #8
90000e74:	588e      	ldr	r6, [r1, r2]
    return movieData + offset;
90000e76:	4419      	add	r1, r3
90000e78:	e74f      	b.n	90000d1a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x8a>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000e7a:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000e7c:	4b10      	ldr	r3, [pc, #64]	; (90000ec0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x230>)
90000e7e:	4a11      	ldr	r2, [pc, #68]	; (90000ec4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x234>)
90000e80:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000e82:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90000e86:	4810      	ldr	r0, [pc, #64]	; (90000ec8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x238>)
90000e88:	f026 f924 	bl	900270d4 <__assert_func>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000e8c:	463e      	mov	r6, r7
90000e8e:	e7ee      	b.n	90000e6e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1de>
90000e90:	24005ba0 	.word	0x24005ba0
90000e94:	24005b74 	.word	0x24005b74
90000e98:	24000004 	.word	0x24000004
90000e9c:	24005b9c 	.word	0x24005b9c
90000ea0:	24005b88 	.word	0x24005b88
90000ea4:	24005b7c 	.word	0x24005b7c
90000ea8:	24005b78 	.word	0x24005b78
90000eac:	24005b80 	.word	0x24005b80
90000eb0:	2400ce30 	.word	0x2400ce30
90000eb4:	24005b94 	.word	0x24005b94
90000eb8:	24005b8c 	.word	0x24005b8c
90000ebc:	24005b6c 	.word	0x24005b6c
90000ec0:	90028520 	.word	0x90028520
90000ec4:	90028534 	.word	0x90028534
90000ec8:	900284c4 	.word	0x900284c4
90000ecc:	24005b84 	.word	0x24005b84
90000ed0:	24005b70 	.word	0x24005b70
90000ed4:	24005b90 	.word	0x24005b90
90000ed8:	24005bb4 	.word	0x24005bb4

90000edc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90000edc:	6943      	ldr	r3, [r0, #20]
{
90000ede:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90000ee2:	2b00      	cmp	r3, #0
90000ee4:	f000 8098 	beq.w	90001018 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x13c>
    readData(currentMovieOffset, 8);
90000ee8:	4605      	mov	r5, r0
    if (reader != 0)
90000eea:	6b00      	ldr	r0, [r0, #48]	; 0x30
    readData(currentMovieOffset, 8);
90000eec:	69ac      	ldr	r4, [r5, #24]
    if (reader != 0)
90000eee:	2800      	cmp	r0, #0
90000ef0:	f000 8082 	beq.w	90000ff8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x11c>
        if (length > aviBufferLength)
90000ef4:	6bab      	ldr	r3, [r5, #56]	; 0x38
90000ef6:	2b07      	cmp	r3, #7
90000ef8:	f240 8083 	bls.w	90001002 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x126>
        reader->seek(offset);
90000efc:	6803      	ldr	r3, [r0, #0]
90000efe:	4621      	mov	r1, r4
90000f00:	68db      	ldr	r3, [r3, #12]
90000f02:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000f04:	6b28      	ldr	r0, [r5, #48]	; 0x30
90000f06:	2208      	movs	r2, #8
90000f08:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000f0a:	6803      	ldr	r3, [r0, #0]
90000f0c:	691b      	ldr	r3, [r3, #16]
90000f0e:	4798      	blx	r3
90000f10:	2800      	cmp	r0, #0
90000f12:	d06d      	beq.n	90000ff0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x114>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000f14:	69ab      	ldr	r3, [r5, #24]
    if (reader != 0)
90000f16:	6b28      	ldr	r0, [r5, #48]	; 0x30
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000f18:	1d1a      	adds	r2, r3, #4
        aviBufferStartOffset = offset;
90000f1a:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
90000f1c:	2800      	cmp	r0, #0
90000f1e:	d06d      	beq.n	90000ffc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x120>
        const uint32_t index = offset - aviBufferStartOffset;
90000f20:	1b12      	subs	r2, r2, r4
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f22:	6b6c      	ldr	r4, [r5, #52]	; 0x34
90000f24:	18a1      	adds	r1, r4, r2
90000f26:	5ca2      	ldrb	r2, [r4, r2]
90000f28:	788c      	ldrb	r4, [r1, #2]
90000f2a:	784e      	ldrb	r6, [r1, #1]
90000f2c:	0424      	lsls	r4, r4, #16
90000f2e:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
90000f32:	4314      	orrs	r4, r2
90000f34:	78ca      	ldrb	r2, [r1, #3]
90000f36:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
            lastError = AVI_ERROR_EOF_REACHED;
90000f3a:	270d      	movs	r7, #13
        if (streamNo == STREAM0 && chunkType == TYPEDC)
90000f3c:	f243 0630 	movw	r6, #12336	; 0x3030
90000f40:	e039      	b.n	90000fb6 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xda>
        if (length > aviBufferLength)
90000f42:	6bab      	ldr	r3, [r5, #56]	; 0x38
90000f44:	2b07      	cmp	r3, #7
90000f46:	d95c      	bls.n	90001002 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x126>
        reader->seek(offset);
90000f48:	6803      	ldr	r3, [r0, #0]
90000f4a:	4621      	mov	r1, r4
90000f4c:	68db      	ldr	r3, [r3, #12]
90000f4e:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000f50:	6b28      	ldr	r0, [r5, #48]	; 0x30
90000f52:	2208      	movs	r2, #8
90000f54:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000f56:	6803      	ldr	r3, [r0, #0]
90000f58:	691b      	ldr	r3, [r3, #16]
90000f5a:	4798      	blx	r3
90000f5c:	b908      	cbnz	r0, 90000f62 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x86>
            lastError = AVI_ERROR_EOF_REACHED;
90000f5e:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
    if (reader != 0)
90000f62:	6b28      	ldr	r0, [r5, #48]	; 0x30
        uint32_t streamNo  = getU16(currentMovieOffset);
90000f64:	69aa      	ldr	r2, [r5, #24]
        aviBufferStartOffset = offset;
90000f66:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
90000f68:	2800      	cmp	r0, #0
90000f6a:	d053      	beq.n	90001014 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x138>
        const uint32_t index = offset - aviBufferStartOffset;
90000f6c:	1b12      	subs	r2, r2, r4
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f6e:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000f70:	188b      	adds	r3, r1, r2
90000f72:	5c89      	ldrb	r1, [r1, r2]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f74:	799c      	ldrb	r4, [r3, #6]
90000f76:	f893 a005 	ldrb.w	sl, [r3, #5]
90000f7a:	0424      	lsls	r4, r4, #16
90000f7c:	f893 e004 	ldrb.w	lr, [r3, #4]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f80:	f893 9001 	ldrb.w	r9, [r3, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f84:	ea44 240a 	orr.w	r4, r4, sl, lsl #8
90000f88:	f893 c007 	ldrb.w	ip, [r3, #7]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f8c:	f893 8003 	ldrb.w	r8, [r3, #3]
90000f90:	ea41 2109 	orr.w	r1, r1, r9, lsl #8
90000f94:	789a      	ldrb	r2, [r3, #2]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f96:	ea44 040e 	orr.w	r4, r4, lr
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f9a:	ea42 2308 	orr.w	r3, r2, r8, lsl #8
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f9e:	ea44 640c 	orr.w	r4, r4, ip, lsl #24
        if (streamNo == STREAM0 && chunkType == TYPEDC)
90000fa2:	f246 3264 	movw	r2, #25444	; 0x6364
90000fa6:	42b1      	cmp	r1, r6
90000fa8:	bf08      	it	eq
90000faa:	4293      	cmpeq	r3, r2
90000fac:	bf0c      	ite	eq
90000fae:	2101      	moveq	r1, #1
90000fb0:	2100      	movne	r1, #0
90000fb2:	d01a      	beq.n	90000fea <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x10e>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
90000fb4:	69ab      	ldr	r3, [r5, #24]
90000fb6:	441c      	add	r4, r3
90000fb8:	6aab      	ldr	r3, [r5, #40]	; 0x28
90000fba:	f104 0208 	add.w	r2, r4, #8
90000fbe:	429a      	cmp	r2, r3
90000fc0:	d20e      	bcs.n	90000fe0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x104>
        frameNumber++;
90000fc2:	696b      	ldr	r3, [r5, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90000fc4:	3409      	adds	r4, #9
        frameNumber++;
90000fc6:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90000fc8:	f024 0401 	bic.w	r4, r4, #1
90000fcc:	e9c5 3405 	strd	r3, r4, [r5, #20]
    if (reader != 0)
90000fd0:	2800      	cmp	r0, #0
90000fd2:	d1b6      	bne.n	90000f42 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x66>
        const uint8_t* const d = movieData + offset;
90000fd4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        return d[0] | (d[1] << 8);
90000fd6:	191a      	adds	r2, r3, r4
90000fd8:	5b19      	ldrh	r1, [r3, r4]
90000fda:	8853      	ldrh	r3, [r2, #2]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000fdc:	6854      	ldr	r4, [r2, #4]
90000fde:	e7e0      	b.n	90000fa2 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xc6>
    frameNumber = 1;
90000fe0:	2201      	movs	r2, #1
    currentMovieOffset = firstFrameOffset; //start over
90000fe2:	6a2b      	ldr	r3, [r5, #32]
    return false;
90000fe4:	2100      	movs	r1, #0
    currentMovieOffset = firstFrameOffset; //start over
90000fe6:	e9c5 2305 	strd	r2, r3, [r5, #20]
}
90000fea:	4608      	mov	r0, r1
90000fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            lastError = AVI_ERROR_EOF_REACHED;
90000ff0:	230d      	movs	r3, #13
90000ff2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
90000ff6:	e78d      	b.n	90000f14 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x38>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000ff8:	1d22      	adds	r2, r4, #4
90000ffa:	4623      	mov	r3, r4
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000ffc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
90000ffe:	588c      	ldr	r4, [r1, r2]
90001000:	e79b      	b.n	90000f3a <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x5e>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001002:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90001004:	4b07      	ldr	r3, [pc, #28]	; (90001024 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x148>)
90001006:	4a08      	ldr	r2, [pc, #32]	; (90001028 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x14c>)
90001008:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
9000100a:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
            assert(!"Buffer to small");
9000100e:	4807      	ldr	r0, [pc, #28]	; (9000102c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x150>)
90001010:	f026 f860 	bl	900270d4 <__assert_func>
        uint32_t streamNo  = getU16(currentMovieOffset);
90001014:	4614      	mov	r4, r2
90001016:	e7dd      	b.n	90000fd4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90001018:	4b05      	ldr	r3, [pc, #20]	; (90001030 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x154>)
9000101a:	21ec      	movs	r1, #236	; 0xec
9000101c:	4a05      	ldr	r2, [pc, #20]	; (90001034 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x158>)
9000101e:	4803      	ldr	r0, [pc, #12]	; (9000102c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x150>)
90001020:	f026 f858 	bl	900270d4 <__assert_func>
90001024:	90028520 	.word	0x90028520
90001028:	90028534 	.word	0x90028534
9000102c:	900284c4 	.word	0x900284c4
90001030:	90028578 	.word	0x90028578
90001034:	900285c4 	.word	0x900285c4

90001038 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90001038:	6943      	ldr	r3, [r0, #20]
{
9000103a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
9000103e:	2b00      	cmp	r3, #0
90001040:	f000 809b 	beq.w	9000117a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x142>
    readData(currentMovieOffset, 8);
90001044:	4604      	mov	r4, r0
    if (reader != 0)
90001046:	6b00      	ldr	r0, [r0, #48]	; 0x30
90001048:	460e      	mov	r6, r1
    readData(currentMovieOffset, 8);
9000104a:	69a5      	ldr	r5, [r4, #24]
    if (reader != 0)
9000104c:	2800      	cmp	r0, #0
9000104e:	d061      	beq.n	90001114 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xdc>
        if (length > aviBufferLength)
90001050:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90001052:	2b07      	cmp	r3, #7
90001054:	f240 8097 	bls.w	90001186 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x14e>
        reader->seek(offset);
90001058:	6803      	ldr	r3, [r0, #0]
9000105a:	4629      	mov	r1, r5
9000105c:	68db      	ldr	r3, [r3, #12]
9000105e:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001060:	6b20      	ldr	r0, [r4, #48]	; 0x30
90001062:	2208      	movs	r2, #8
90001064:	6b61      	ldr	r1, [r4, #52]	; 0x34
90001066:	6803      	ldr	r3, [r0, #0]
90001068:	691b      	ldr	r3, [r3, #16]
9000106a:	4798      	blx	r3
9000106c:	2800      	cmp	r0, #0
9000106e:	d04c      	beq.n	9000110a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xd2>
    if (reader != 0)
90001070:	6b20      	ldr	r0, [r4, #48]	; 0x30
    uint32_t streamNo  = getU16(currentMovieOffset);
90001072:	69a1      	ldr	r1, [r4, #24]
        aviBufferStartOffset = offset;
90001074:	63e5      	str	r5, [r4, #60]	; 0x3c
    if (reader != 0)
90001076:	2800      	cmp	r0, #0
90001078:	d04b      	beq.n	90001112 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xda>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
9000107a:	f101 0c04 	add.w	ip, r1, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
9000107e:	1c8a      	adds	r2, r1, #2
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001080:	6b63      	ldr	r3, [r4, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90001082:	ebac 0c05 	sub.w	ip, ip, r5
        const uint32_t index = offset - aviBufferStartOffset;
90001086:	1b52      	subs	r2, r2, r5
90001088:	1b4d      	subs	r5, r1, r5
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000108a:	eb03 0e0c 	add.w	lr, r3, ip
9000108e:	f813 700c 	ldrb.w	r7, [r3, ip]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001092:	eb03 0805 	add.w	r8, r3, r5
90001096:	f813 c005 	ldrb.w	ip, [r3, r5]
9000109a:	f898 5001 	ldrb.w	r5, [r8, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000109e:	f89e 8001 	ldrb.w	r8, [lr, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
900010a2:	ea4c 2c05 	orr.w	ip, ip, r5, lsl #8
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900010a6:	f89e 5002 	ldrb.w	r5, [lr, #2]
900010aa:	f89e e003 	ldrb.w	lr, [lr, #3]
900010ae:	042d      	lsls	r5, r5, #16
900010b0:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
900010b4:	433d      	orrs	r5, r7
900010b6:	ea45 650e 	orr.w	r5, r5, lr, lsl #24
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
900010ba:	eb03 0e02 	add.w	lr, r3, r2
900010be:	5c9b      	ldrb	r3, [r3, r2]
900010c0:	f89e 2001 	ldrb.w	r2, [lr, #1]
900010c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
900010c8:	194a      	adds	r2, r1, r5
900010ca:	6aa7      	ldr	r7, [r4, #40]	; 0x28
900010cc:	f102 0e08 	add.w	lr, r2, #8
900010d0:	45be      	cmp	lr, r7
900010d2:	d213      	bcs.n	900010fc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
900010d4:	f243 0730 	movw	r7, #12336	; 0x3030
900010d8:	45bc      	cmp	ip, r7
900010da:	d124      	bne.n	90001126 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xee>
900010dc:	f246 3764 	movw	r7, #25444	; 0x6364
900010e0:	42bb      	cmp	r3, r7
900010e2:	d120      	bne.n	90001126 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xee>
900010e4:	bb1d      	cbnz	r5, 9000112e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xf6>
          currentMovieOffset += 8;
900010e6:	4672      	mov	r2, lr
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010e8:	3201      	adds	r2, #1
        if (currentMovieOffset == lastFrameEnd)
900010ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010ec:	f022 0201 	bic.w	r2, r2, #1
        if (currentMovieOffset == lastFrameEnd)
900010f0:	429a      	cmp	r2, r3
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010f2:	61a2      	str	r2, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
900010f4:	d002      	beq.n	900010fc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>
900010f6:	2001      	movs	r0, #1
}
900010f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        frameNumber = 1;
900010fc:	2201      	movs	r2, #1
        currentMovieOffset = firstFrameOffset; //start over
900010fe:	6a23      	ldr	r3, [r4, #32]
90001100:	2000      	movs	r0, #0
90001102:	e9c4 2305 	strd	r2, r3, [r4, #20]
}
90001106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            lastError = AVI_ERROR_EOF_REACHED;
9000110a:	230d      	movs	r3, #13
9000110c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90001110:	e7ae      	b.n	90001070 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x38>
    uint32_t streamNo  = getU16(currentMovieOffset);
90001112:	460d      	mov	r5, r1
        const uint8_t* const d = movieData + offset;
90001114:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        const uint8_t* const d = movieData + offset;
90001116:	4629      	mov	r1, r5
90001118:	2000      	movs	r0, #0
        return d[0] | (d[1] << 8);
9000111a:	f832 c005 	ldrh.w	ip, [r2, r5]
9000111e:	442a      	add	r2, r5
90001120:	8853      	ldrh	r3, [r2, #2]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90001122:	6855      	ldr	r5, [r2, #4]
90001124:	e7d0      	b.n	900010c8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        currentMovieOffset += chunkSize;
90001126:	61a2      	str	r2, [r4, #24]
        if (chunkSize == 0) // Empty frame - Skip
90001128:	2d00      	cmp	r5, #0
9000112a:	d1dd      	bne.n	900010e8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb0>
9000112c:	e7db      	b.n	900010e6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xae>
            currentMovieOffset += 8;
9000112e:	f101 0708 	add.w	r7, r1, #8
90001132:	61a7      	str	r7, [r4, #24]
    if (reader != 0)
90001134:	b1f0      	cbz	r0, 90001174 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x13c>
        if (length > aviBufferLength)
90001136:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90001138:	429d      	cmp	r5, r3
9000113a:	d824      	bhi.n	90001186 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x14e>
        reader->seek(offset);
9000113c:	6803      	ldr	r3, [r0, #0]
9000113e:	4639      	mov	r1, r7
90001140:	68db      	ldr	r3, [r3, #12]
90001142:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001144:	6b20      	ldr	r0, [r4, #48]	; 0x30
90001146:	462a      	mov	r2, r5
90001148:	6b61      	ldr	r1, [r4, #52]	; 0x34
9000114a:	6803      	ldr	r3, [r0, #0]
9000114c:	691b      	ldr	r3, [r3, #16]
9000114e:	4798      	blx	r3
90001150:	b910      	cbnz	r0, 90001158 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x120>
            lastError = AVI_ERROR_EOF_REACHED;
90001152:	230d      	movs	r3, #13
90001154:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
90001158:	6b61      	ldr	r1, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
9000115a:	63e7      	str	r7, [r4, #60]	; 0x3c
    if (outputBuffer) //only decode if buffers are assigned.
9000115c:	b126      	cbz	r6, 90001168 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x130>
9000115e:	4633      	mov	r3, r6
90001160:	462a      	mov	r2, r5
90001162:	4620      	mov	r0, r4
90001164:	f7ff fc42 	bl	900009ec <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
        currentMovieOffset += chunkSize;
90001168:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
            frameNumber++;
9000116c:	3301      	adds	r3, #1
        currentMovieOffset += chunkSize;
9000116e:	442a      	add	r2, r5
            frameNumber++;
90001170:	6163      	str	r3, [r4, #20]
        if (chunkSize == 0) // Empty frame - Skip
90001172:	e7b9      	b.n	900010e8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb0>
    return movieData + offset;
90001174:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
90001176:	4439      	add	r1, r7
90001178:	e7f0      	b.n	9000115c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x124>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
9000117a:	4b07      	ldr	r3, [pc, #28]	; (90001198 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
9000117c:	21b8      	movs	r1, #184	; 0xb8
9000117e:	4a07      	ldr	r2, [pc, #28]	; (9000119c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x164>)
90001180:	4807      	ldr	r0, [pc, #28]	; (900011a0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x168>)
90001182:	f025 ffa7 	bl	900270d4 <__assert_func>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001186:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90001188:	4b06      	ldr	r3, [pc, #24]	; (900011a4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x16c>)
9000118a:	4a07      	ldr	r2, [pc, #28]	; (900011a8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x170>)
9000118c:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
9000118e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90001192:	4803      	ldr	r0, [pc, #12]	; (900011a0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x168>)
90001194:	f025 ff9e 	bl	900270d4 <__assert_func>
90001198:	90028578 	.word	0x90028578
9000119c:	900285f8 	.word	0x900285f8
900011a0:	900284c4 	.word	0x900284c4
900011a4:	90028520 	.word	0x90028520
900011a8:	90028534 	.word	0x90028534

900011ac <_ZN20HardwareMJPEGDecoderC1Ev>:
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
900011ac:	b538      	push	{r3, r4, r5, lr}
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
900011ae:	2500      	movs	r5, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
900011b0:	4b0f      	ldr	r3, [pc, #60]	; (900011f0 <_ZN20HardwareMJPEGDecoderC1Ev+0x44>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
900011b2:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
900011b4:	6003      	str	r3, [r0, #0]
900011b6:	63c5      	str	r5, [r0, #60]	; 0x3c
900011b8:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
900011bc:	e9c0 5505 	strd	r5, r5, [r0, #20]
900011c0:	e9c0 5507 	strd	r5, r5, [r0, #28]
900011c4:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
900011c8:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
900011cc:	e9c0 550d 	strd	r5, r5, [r0, #52]	; 0x34
    videoInfo.frame_width = 0;
900011d0:	e9c0 5503 	strd	r5, r5, [r0, #12]
    videoInfo.number_of_frames = 0;
900011d4:	e9c0 5501 	strd	r5, r5, [r0, #4]
    TGFX_JPEG_InitColorTables();
900011d8:	f002 fa9a 	bl	90003710 <TGFX_JPEG_InitColorTables>
    semDecodingDone = SEM_CREATE();
900011dc:	462a      	mov	r2, r5
900011de:	4629      	mov	r1, r5
900011e0:	2001      	movs	r0, #1
900011e2:	f00d fb23 	bl	9000e82c <osSemaphoreNew>
900011e6:	4b03      	ldr	r3, [pc, #12]	; (900011f4 <_ZN20HardwareMJPEGDecoderC1Ev+0x48>)
900011e8:	4602      	mov	r2, r0
}
900011ea:	4620      	mov	r0, r4
    semDecodingDone = SEM_CREATE();
900011ec:	601a      	str	r2, [r3, #0]
}
900011ee:	bd38      	pop	{r3, r4, r5, pc}
900011f0:	90028778 	.word	0x90028778
900011f4:	24005bd8 	.word	0x24005bd8

900011f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
{
900011f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    currentMovieOffset = 0;
900011fc:	2100      	movs	r1, #0
    if (reader != 0)
900011fe:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
90001200:	b083      	sub	sp, #12
90001202:	4605      	mov	r5, r0
    currentMovieOffset = 0;
90001204:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
90001206:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    if (reader != 0)
9000120a:	2e00      	cmp	r6, #0
9000120c:	f000 81aa 	beq.w	90001564 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x36c>
        if (length > aviBufferLength)
90001210:	6b83      	ldr	r3, [r0, #56]	; 0x38
90001212:	2b47      	cmp	r3, #71	; 0x47
90001214:	f240 8202 	bls.w	9000161c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
90001218:	6833      	ldr	r3, [r6, #0]
9000121a:	4630      	mov	r0, r6
9000121c:	68db      	ldr	r3, [r3, #12]
9000121e:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001220:	6b28      	ldr	r0, [r5, #48]	; 0x30
90001222:	2248      	movs	r2, #72	; 0x48
90001224:	6b69      	ldr	r1, [r5, #52]	; 0x34
90001226:	6803      	ldr	r3, [r0, #0]
90001228:	691b      	ldr	r3, [r3, #16]
9000122a:	4798      	blx	r3
9000122c:	2800      	cmp	r0, #0
9000122e:	f000 80ce 	beq.w	900013ce <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d6>
        aviBufferStartOffset = offset;
90001232:	2300      	movs	r3, #0
    if (reader != 0)
90001234:	6b2e      	ldr	r6, [r5, #48]	; 0x30
    if (compare(currentMovieOffset, "RIFF", 4))
90001236:	69af      	ldr	r7, [r5, #24]
    if (reader != 0)
90001238:	46b1      	mov	r9, r6
        aviBufferStartOffset = offset;
9000123a:	63eb      	str	r3, [r5, #60]	; 0x3c
    if (reader != 0)
9000123c:	2e00      	cmp	r6, #0
9000123e:	f000 8192 	beq.w	90001566 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x36e>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001242:	f8d5 8034 	ldr.w	r8, [r5, #52]	; 0x34
    return strncmp(src, str, num);
90001246:	2204      	movs	r2, #4
90001248:	49be      	ldr	r1, [pc, #760]	; (90001544 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x34c>)
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
9000124a:	eb08 0b07 	add.w	fp, r8, r7
    return strncmp(src, str, num);
9000124e:	4658      	mov	r0, fp
90001250:	f026 f9fc 	bl	9002764c <strncmp>
    if (compare(currentMovieOffset, "RIFF", 4))
90001254:	2800      	cmp	r0, #0
90001256:	f040 81ea 	bne.w	9000162e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x436>
    currentMovieOffset += 8;
9000125a:	f107 0008 	add.w	r0, r7, #8
    return strncmp(src, str, num);
9000125e:	2204      	movs	r2, #4
90001260:	49b9      	ldr	r1, [pc, #740]	; (90001548 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x350>)
    currentMovieOffset += 8;
90001262:	61a8      	str	r0, [r5, #24]
    return strncmp(src, str, num);
90001264:	4440      	add	r0, r8
90001266:	f026 f9f1 	bl	9002764c <strncmp>
    if (compare(currentMovieOffset, "AVI ", 4))
9000126a:	2800      	cmp	r0, #0
9000126c:	f040 81fa 	bne.w	90001664 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x46c>
    currentMovieOffset += 4;
90001270:	f107 0a0c 	add.w	sl, r7, #12
    return strncmp(src, str, num);
90001274:	2204      	movs	r2, #4
90001276:	49b5      	ldr	r1, [pc, #724]	; (9000154c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x354>)
90001278:	eb08 000a 	add.w	r0, r8, sl
    currentMovieOffset += 4;
9000127c:	f8c5 a018 	str.w	sl, [r5, #24]
    return strncmp(src, str, num);
90001280:	f026 f9e4 	bl	9002764c <strncmp>
    if (compare(currentMovieOffset, "LIST", 4))
90001284:	9001      	str	r0, [sp, #4]
90001286:	2800      	cmp	r0, #0
90001288:	f040 81e2 	bne.w	90001650 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x458>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000128c:	f89b 4012 	ldrb.w	r4, [fp, #18]
90001290:	f89b 2011 	ldrb.w	r2, [fp, #17]
90001294:	0424      	lsls	r4, r4, #16
90001296:	f89b 3013 	ldrb.w	r3, [fp, #19]
9000129a:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
9000129e:	f89b 2010 	ldrb.w	r2, [fp, #16]
900012a2:	4314      	orrs	r4, r2
    assert(aviListSize);
900012a4:	ea54 6403 	orrs.w	r4, r4, r3, lsl #24
900012a8:	f000 81cb 	beq.w	90001642 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x44a>
    uint32_t offset =  currentMovieOffset + 8;
900012ac:	f107 0014 	add.w	r0, r7, #20
    return strncmp(src, str, num);
900012b0:	2204      	movs	r2, #4
900012b2:	49a7      	ldr	r1, [pc, #668]	; (90001550 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x358>)
900012b4:	4440      	add	r0, r8
900012b6:	f026 f9c9 	bl	9002764c <strncmp>
    if (compare(offset, "hdrl", 4))
900012ba:	2800      	cmp	r0, #0
900012bc:	f000 808b 	beq.w	900013d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1de>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900012c0:	2306      	movs	r3, #6
        foundFrame = false;
900012c2:	f8dd b004 	ldr.w	fp, [sp, #4]
    offset += 4;
900012c6:	f107 0018 	add.w	r0, r7, #24
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900012ca:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
900012ce:	4440      	add	r0, r8
    return strncmp(src, str, num);
900012d0:	2204      	movs	r2, #4
900012d2:	49a0      	ldr	r1, [pc, #640]	; (90001554 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x35c>)
900012d4:	f026 f9ba 	bl	9002764c <strncmp>
    if (compare(offset, "avih", 4))
900012d8:	2800      	cmp	r0, #0
900012da:	f000 8085 	beq.w	900013e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1f0>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
900012de:	2307      	movs	r3, #7
900012e0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
900012e4:	4454      	add	r4, sl
900012e6:	3408      	adds	r4, #8
    if (reader != 0)
900012e8:	f1b9 0f00 	cmp.w	r9, #0
900012ec:	d015      	beq.n	9000131a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x122>
        if (length > aviBufferLength)
900012ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
900012f0:	2b0b      	cmp	r3, #11
900012f2:	f240 8193 	bls.w	9000161c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
900012f6:	f8d9 3000 	ldr.w	r3, [r9]
900012fa:	4621      	mov	r1, r4
900012fc:	4648      	mov	r0, r9
900012fe:	68db      	ldr	r3, [r3, #12]
90001300:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001302:	6b28      	ldr	r0, [r5, #48]	; 0x30
90001304:	220c      	movs	r2, #12
90001306:	6b69      	ldr	r1, [r5, #52]	; 0x34
90001308:	6803      	ldr	r3, [r0, #0]
9000130a:	691b      	ldr	r3, [r3, #16]
9000130c:	4798      	blx	r3
9000130e:	b910      	cbnz	r0, 90001316 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x11e>
            lastError = AVI_ERROR_EOF_REACHED;
90001310:	230d      	movs	r3, #13
90001312:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
90001316:	6b2e      	ldr	r6, [r5, #48]	; 0x30
90001318:	63ec      	str	r4, [r5, #60]	; 0x3c
        return aviBuffer;
9000131a:	f895 9040 	ldrb.w	r9, [r5, #64]	; 0x40
    return strncmp(src, str, num);
9000131e:	4f8e      	ldr	r7, [pc, #568]	; (90001558 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x360>)
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
90001320:	f104 0808 	add.w	r8, r4, #8
    if (reader != 0)
90001324:	2e00      	cmp	r6, #0
90001326:	d041      	beq.n	900013ac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001328:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    return strncmp(src, str, num);
9000132a:	2204      	movs	r2, #4
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
9000132c:	6b68      	ldr	r0, [r5, #52]	; 0x34
    return strncmp(src, str, num);
9000132e:	4639      	mov	r1, r7
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001330:	eba8 0303 	sub.w	r3, r8, r3
90001334:	4418      	add	r0, r3
    return strncmp(src, str, num);
90001336:	f026 f989 	bl	9002764c <strncmp>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
9000133a:	2800      	cmp	r0, #0
9000133c:	d03e      	beq.n	900013bc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>
9000133e:	f1b9 0f00 	cmp.w	r9, #0
90001342:	d13e      	bne.n	900013c2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ca>
90001344:	6aab      	ldr	r3, [r5, #40]	; 0x28
90001346:	42a3      	cmp	r3, r4
90001348:	f240 80a7 	bls.w	9000149a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2a2>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
9000134c:	3404      	adds	r4, #4
    if (reader != 0)
9000134e:	2e00      	cmp	r6, #0
90001350:	d046      	beq.n	900013e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1e8>
        const uint32_t index = offset - aviBufferStartOffset;
90001352:	6bea      	ldr	r2, [r5, #60]	; 0x3c
        if (length > aviBufferLength)
90001354:	e9d5 130d 	ldrd	r1, r3, [r5, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90001358:	1aa4      	subs	r4, r4, r2
        if (length > aviBufferLength)
9000135a:	2b0b      	cmp	r3, #11
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000135c:	eb01 0204 	add.w	r2, r1, r4
90001360:	5d09      	ldrb	r1, [r1, r4]
90001362:	7894      	ldrb	r4, [r2, #2]
90001364:	7850      	ldrb	r0, [r2, #1]
90001366:	ea4f 4404 	mov.w	r4, r4, lsl #16
9000136a:	78d2      	ldrb	r2, [r2, #3]
9000136c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
90001370:	ea44 0401 	orr.w	r4, r4, r1
90001374:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
        listOffset += listSize;
90001378:	4444      	add	r4, r8
        if (length > aviBufferLength)
9000137a:	f240 814f 	bls.w	9000161c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
9000137e:	6833      	ldr	r3, [r6, #0]
90001380:	4621      	mov	r1, r4
90001382:	4630      	mov	r0, r6
90001384:	68db      	ldr	r3, [r3, #12]
90001386:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001388:	6b28      	ldr	r0, [r5, #48]	; 0x30
9000138a:	220c      	movs	r2, #12
9000138c:	6b69      	ldr	r1, [r5, #52]	; 0x34
9000138e:	6803      	ldr	r3, [r0, #0]
90001390:	691b      	ldr	r3, [r3, #16]
90001392:	4798      	blx	r3
90001394:	b910      	cbnz	r0, 9000139c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a4>
            lastError = AVI_ERROR_EOF_REACHED;
90001396:	230d      	movs	r3, #13
90001398:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
9000139c:	6b2e      	ldr	r6, [r5, #48]	; 0x30
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
9000139e:	f104 0808 	add.w	r8, r4, #8
900013a2:	f895 9040 	ldrb.w	r9, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
900013a6:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
900013a8:	2e00      	cmp	r6, #0
900013aa:	d1bd      	bne.n	90001328 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x130>
        src = (const char*)movieData + offset;
900013ac:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    return strncmp(src, str, num);
900013ae:	2204      	movs	r2, #4
900013b0:	4639      	mov	r1, r7
        src = (const char*)movieData + offset;
900013b2:	4440      	add	r0, r8
    return strncmp(src, str, num);
900013b4:	f026 f94a 	bl	9002764c <strncmp>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
900013b8:	2800      	cmp	r0, #0
900013ba:	d1c0      	bne.n	9000133e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x146>
    if (lastError != AVI_NO_ERROR)
900013bc:	f1b9 0f00 	cmp.w	r9, #0
900013c0:	d06b      	beq.n	9000149a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2a2>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
900013c2:	230a      	movs	r3, #10
900013c4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
900013c8:	b003      	add	sp, #12
900013ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lastError = AVI_ERROR_EOF_REACHED;
900013ce:	230d      	movs	r3, #13
900013d0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
900013d4:	e72d      	b.n	90001232 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3a>
    offset += 4;
900013d6:	f107 0018 	add.w	r0, r7, #24
    bool foundFrame = true;
900013da:	f04f 0b01 	mov.w	fp, #1
900013de:	e776      	b.n	900012ce <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        listOffset += listSize;
900013e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
900013e2:	591c      	ldr	r4, [r3, r4]
900013e4:	4444      	add	r4, r8
    return movieData + offset;
900013e6:	e79b      	b.n	90001320 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x128>
    if (foundFrame)
900013e8:	f1bb 0f00 	cmp.w	fp, #0
900013ec:	f43f af7a 	beq.w	900012e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xec>
        offset += 8; //skip fourcc and cb in AVIMAINHEADER
900013f0:	f107 0120 	add.w	r1, r7, #32
    if (reader != 0)
900013f4:	f1b9 0f00 	cmp.w	r9, #0
900013f8:	f000 80f4 	beq.w	900015e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3ec>
        const uint32_t index = offset - aviBufferStartOffset;
900013fc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900013fe:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90001400:	1ac9      	subs	r1, r1, r3
90001402:	f1c3 0030 	rsb	r0, r3, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset)/1000;
90001406:	f8df c158 	ldr.w	ip, [pc, #344]	; 90001560 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x368>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000140a:	f812 8001 	ldrb.w	r8, [r2, r1]
9000140e:	eb02 0e01 	add.w	lr, r2, r1
        const uint32_t index = offset - aviBufferStartOffset;
90001412:	f1c3 0140 	rsb	r1, r3, #64	; 0x40
90001416:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
9000141a:	4438      	add	r0, r7
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000141c:	f89e b001 	ldrb.w	fp, [lr, #1]
        const uint32_t index = offset - aviBufferStartOffset;
90001420:	4439      	add	r1, r7
90001422:	441f      	add	r7, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001424:	f89e 3002 	ldrb.w	r3, [lr, #2]
90001428:	f89e e003 	ldrb.w	lr, [lr, #3]
9000142c:	041b      	lsls	r3, r3, #16
9000142e:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
90001432:	ea43 0308 	orr.w	r3, r3, r8
90001436:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
        videoInfo.ms_between_frames = getU32(offset)/1000;
9000143a:	fbac c303 	umull	ip, r3, ip, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000143e:	eb02 0c00 	add.w	ip, r2, r0
        videoInfo.ms_between_frames = getU32(offset)/1000;
90001442:	099b      	lsrs	r3, r3, #6
90001444:	606b      	str	r3, [r5, #4]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001446:	f89c 3002 	ldrb.w	r3, [ip, #2]
9000144a:	f89c 8001 	ldrb.w	r8, [ip, #1]
9000144e:	041b      	lsls	r3, r3, #16
90001450:	f812 e000 	ldrb.w	lr, [r2, r0]
90001454:	f89c c003 	ldrb.w	ip, [ip, #3]
90001458:	1850      	adds	r0, r2, r1
9000145a:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
9000145e:	ea43 030e 	orr.w	r3, r3, lr
90001462:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
        videoInfo.number_of_frames = getU32(offset + 16);
90001466:	60ab      	str	r3, [r5, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001468:	7883      	ldrb	r3, [r0, #2]
9000146a:	f890 c001 	ldrb.w	ip, [r0, #1]
9000146e:	041b      	lsls	r3, r3, #16
90001470:	5c51      	ldrb	r1, [r2, r1]
90001472:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
90001476:	430b      	orrs	r3, r1
90001478:	78c1      	ldrb	r1, [r0, #3]
9000147a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
9000147e:	19d1      	adds	r1, r2, r7
        videoInfo.frame_width = getU32(offset + 32);
90001480:	60eb      	str	r3, [r5, #12]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001482:	788b      	ldrb	r3, [r1, #2]
90001484:	7848      	ldrb	r0, [r1, #1]
90001486:	041b      	lsls	r3, r3, #16
90001488:	5dd2      	ldrb	r2, [r2, r7]
9000148a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
9000148e:	4313      	orrs	r3, r2
90001490:	78ca      	ldrb	r2, [r1, #3]
90001492:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
        videoInfo.frame_height = getU32(offset + 36);
90001496:	612b      	str	r3, [r5, #16]
90001498:	e724      	b.n	900012e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xec>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
9000149a:	f104 030c 	add.w	r3, r4, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
9000149e:	3404      	adds	r4, #4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
900014a0:	61ab      	str	r3, [r5, #24]
    if (reader != 0)
900014a2:	2e00      	cmp	r6, #0
900014a4:	f000 80b2 	beq.w	9000160c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x414>
        const uint32_t index = offset - aviBufferStartOffset;
900014a8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
900014aa:	1ae4      	subs	r4, r4, r3
        if (length > aviBufferLength)
900014ac:	e9d5 120d 	ldrd	r1, r2, [r5, #52]	; 0x34
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900014b0:	f104 0c02 	add.w	ip, r4, #2
900014b4:	1c67      	adds	r7, r4, #1
900014b6:	f811 e004 	ldrb.w	lr, [r1, r4]
900014ba:	1ce0      	adds	r0, r4, #3
900014bc:	f811 300c 	ldrb.w	r3, [r1, ip]
        if (length > aviBufferLength)
900014c0:	2a03      	cmp	r2, #3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900014c2:	f811 9007 	ldrb.w	r9, [r1, r7]
900014c6:	ea4f 4303 	mov.w	r3, r3, lsl #16
900014ca:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
900014ce:	ea43 030e 	orr.w	r3, r3, lr
900014d2:	f811 e000 	ldrb.w	lr, [r1, r0]
900014d6:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
900014da:	4443      	add	r3, r8
900014dc:	626b      	str	r3, [r5, #36]	; 0x24
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900014de:	f811 300c 	ldrb.w	r3, [r1, ip]
900014e2:	f811 c007 	ldrb.w	ip, [r1, r7]
900014e6:	5d0f      	ldrb	r7, [r1, r4]
900014e8:	ea4f 4403 	mov.w	r4, r3, lsl #16
900014ec:	5c09      	ldrb	r1, [r1, r0]
900014ee:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
900014f2:	ea44 0407 	orr.w	r4, r4, r7
900014f6:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
    listOffset += listSize;
900014fa:	4444      	add	r4, r8
        if (length > aviBufferLength)
900014fc:	f240 808e 	bls.w	9000161c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
90001500:	6833      	ldr	r3, [r6, #0]
90001502:	4621      	mov	r1, r4
90001504:	4630      	mov	r0, r6
90001506:	68db      	ldr	r3, [r3, #12]
90001508:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
9000150a:	6b28      	ldr	r0, [r5, #48]	; 0x30
9000150c:	2204      	movs	r2, #4
9000150e:	6b69      	ldr	r1, [r5, #52]	; 0x34
90001510:	6803      	ldr	r3, [r0, #0]
90001512:	691b      	ldr	r3, [r3, #16]
90001514:	4798      	blx	r3
90001516:	2800      	cmp	r0, #0
90001518:	d05a      	beq.n	900015d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3d8>
    if (reader != 0)
9000151a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        aviBufferStartOffset = offset;
9000151c:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
9000151e:	2b00      	cmp	r3, #0
90001520:	f000 80aa 	beq.w	90001678 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x480>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001524:	6b68      	ldr	r0, [r5, #52]	; 0x34
    return strncmp(src, str, num);
90001526:	2204      	movs	r2, #4
90001528:	490c      	ldr	r1, [pc, #48]	; (9000155c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x364>)
9000152a:	f026 f88f 	bl	9002764c <strncmp>
    if (!compare(listOffset, "idx1", 4))
9000152e:	2800      	cmp	r0, #0
90001530:	d166      	bne.n	90001600 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x408>
    frameNumber = 1; //next frame number is 1
90001532:	2201      	movs	r2, #1
    firstFrameOffset = currentMovieOffset;
90001534:	69ab      	ldr	r3, [r5, #24]
        indexOffset = listOffset;
90001536:	61ec      	str	r4, [r5, #28]
    frameNumber = 1; //next frame number is 1
90001538:	616a      	str	r2, [r5, #20]
    firstFrameOffset = currentMovieOffset;
9000153a:	622b      	str	r3, [r5, #32]
}
9000153c:	b003      	add	sp, #12
9000153e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90001542:	bf00      	nop
90001544:	90028654 	.word	0x90028654
90001548:	9002870c 	.word	0x9002870c
9000154c:	90028704 	.word	0x90028704
90001550:	900286fc 	.word	0x900286fc
90001554:	900286e4 	.word	0x900286e4
90001558:	900286ec 	.word	0x900286ec
9000155c:	900286f4 	.word	0x900286f4
90001560:	10624dd3 	.word	0x10624dd3
    if (compare(currentMovieOffset, "RIFF", 4))
90001564:	4637      	mov	r7, r6
        src = (const char*)movieData + offset;
90001566:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
    return strncmp(src, str, num);
9000156a:	2204      	movs	r2, #4
9000156c:	4944      	ldr	r1, [pc, #272]	; (90001680 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x488>)
        src = (const char*)movieData + offset;
9000156e:	eb08 0407 	add.w	r4, r8, r7
    return strncmp(src, str, num);
90001572:	4620      	mov	r0, r4
90001574:	f026 f86a 	bl	9002764c <strncmp>
    if (compare(currentMovieOffset, "RIFF", 4))
90001578:	2800      	cmp	r0, #0
9000157a:	d158      	bne.n	9000162e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x436>
    currentMovieOffset += 8;
9000157c:	f107 0008 	add.w	r0, r7, #8
    return strncmp(src, str, num);
90001580:	2204      	movs	r2, #4
90001582:	4940      	ldr	r1, [pc, #256]	; (90001684 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x48c>)
    currentMovieOffset += 8;
90001584:	61a8      	str	r0, [r5, #24]
    return strncmp(src, str, num);
90001586:	4440      	add	r0, r8
90001588:	f026 f860 	bl	9002764c <strncmp>
    if (compare(currentMovieOffset, "AVI ", 4))
9000158c:	2800      	cmp	r0, #0
9000158e:	d169      	bne.n	90001664 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x46c>
    currentMovieOffset += 4;
90001590:	f107 0a0c 	add.w	sl, r7, #12
    return strncmp(src, str, num);
90001594:	2204      	movs	r2, #4
90001596:	493c      	ldr	r1, [pc, #240]	; (90001688 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x490>)
90001598:	eb08 000a 	add.w	r0, r8, sl
    currentMovieOffset += 4;
9000159c:	f8c5 a018 	str.w	sl, [r5, #24]
    return strncmp(src, str, num);
900015a0:	f026 f854 	bl	9002764c <strncmp>
    if (compare(currentMovieOffset, "LIST", 4))
900015a4:	4683      	mov	fp, r0
900015a6:	2800      	cmp	r0, #0
900015a8:	d152      	bne.n	90001650 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x458>
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015aa:	6924      	ldr	r4, [r4, #16]
    assert(aviListSize);
900015ac:	2c00      	cmp	r4, #0
900015ae:	d048      	beq.n	90001642 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x44a>
    uint32_t offset =  currentMovieOffset + 8;
900015b0:	f107 0014 	add.w	r0, r7, #20
    return strncmp(src, str, num);
900015b4:	2204      	movs	r2, #4
900015b6:	4935      	ldr	r1, [pc, #212]	; (9000168c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x494>)
900015b8:	4440      	add	r0, r8
900015ba:	f026 f847 	bl	9002764c <strncmp>
    if (compare(offset, "hdrl", 4))
900015be:	b958      	cbnz	r0, 900015d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3e0>
    offset += 4;
900015c0:	f107 0018 	add.w	r0, r7, #24
    bool foundFrame = true;
900015c4:	f04f 0b01 	mov.w	fp, #1
        src = (const char*)movieData + offset;
900015c8:	4440      	add	r0, r8
900015ca:	f04f 0900 	mov.w	r9, #0
900015ce:	e67f      	b.n	900012d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd8>
            lastError = AVI_ERROR_EOF_REACHED;
900015d0:	230d      	movs	r3, #13
900015d2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
900015d6:	e7a0      	b.n	9000151a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x322>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900015d8:	2306      	movs	r3, #6
    offset += 4;
900015da:	f107 0018 	add.w	r0, r7, #24
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900015de:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    if (reader != 0)
900015e2:	e7f1      	b.n	900015c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3d0>
900015e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        videoInfo.ms_between_frames = getU32(offset)/1000;
900015e6:	585a      	ldr	r2, [r3, r1]
900015e8:	443b      	add	r3, r7
900015ea:	4929      	ldr	r1, [pc, #164]	; (90001690 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x498>)
900015ec:	fba1 1202 	umull	r1, r2, r1, r2
900015f0:	0992      	lsrs	r2, r2, #6
900015f2:	606a      	str	r2, [r5, #4]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        videoInfo.number_of_frames = getU32(offset + 16);
900015f6:	60aa      	str	r2, [r5, #8]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        videoInfo.frame_width = getU32(offset + 32);
900015fa:	60ea      	str	r2, [r5, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900015fe:	e74a      	b.n	90001496 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x29e>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
90001600:	230b      	movs	r3, #11
90001602:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
90001606:	b003      	add	sp, #12
90001608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000160c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
9000160e:	5903      	ldr	r3, [r0, r4]
90001610:	4443      	add	r3, r8
90001612:	626b      	str	r3, [r5, #36]	; 0x24
    listOffset += listSize;
90001614:	5904      	ldr	r4, [r0, r4]
90001616:	4444      	add	r4, r8
        src = (const char*)movieData + offset;
90001618:	4420      	add	r0, r4
9000161a:	e784      	b.n	90001526 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32e>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
9000161c:	2009      	movs	r0, #9
            assert(!"Buffer to small");
9000161e:	4b1d      	ldr	r3, [pc, #116]	; (90001694 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x49c>)
90001620:	4a1d      	ldr	r2, [pc, #116]	; (90001698 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a0>)
90001622:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001624:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
            assert(!"Buffer to small");
90001628:	481c      	ldr	r0, [pc, #112]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000162a:	f025 fd53 	bl	900270d4 <__assert_func>
        lastError = AVI_ERROR_NOT_RIFF;
9000162e:	2003      	movs	r0, #3
        assert(!"RIFF header not found");
90001630:	4b1b      	ldr	r3, [pc, #108]	; (900016a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a8>)
90001632:	4a1c      	ldr	r2, [pc, #112]	; (900016a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
90001634:	f44f 719a 	mov.w	r1, #308	; 0x134
        lastError = AVI_ERROR_NOT_RIFF;
90001638:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"RIFF header not found");
9000163c:	4817      	ldr	r0, [pc, #92]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000163e:	f025 fd49 	bl	900270d4 <__assert_func>
    assert(aviListSize);
90001642:	4b19      	ldr	r3, [pc, #100]	; (900016a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b0>)
90001644:	f240 1149 	movw	r1, #329	; 0x149
90001648:	4a16      	ldr	r2, [pc, #88]	; (900016a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
9000164a:	4814      	ldr	r0, [pc, #80]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000164c:	f025 fd42 	bl	900270d4 <__assert_func>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
90001650:	2005      	movs	r0, #5
        assert(!"AVI LIST not found");
90001652:	4b16      	ldr	r3, [pc, #88]	; (900016ac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b4>)
90001654:	4a13      	ldr	r2, [pc, #76]	; (900016a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
90001656:	f240 1143 	movw	r1, #323	; 0x143
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
9000165a:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"AVI LIST not found");
9000165e:	480f      	ldr	r0, [pc, #60]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
90001660:	f025 fd38 	bl	900270d4 <__assert_func>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
90001664:	2004      	movs	r0, #4
        assert(!"AVI header not found");
90001666:	4b12      	ldr	r3, [pc, #72]	; (900016b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b8>)
90001668:	4a0e      	ldr	r2, [pc, #56]	; (900016a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
9000166a:	f44f 719e 	mov.w	r1, #316	; 0x13c
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
9000166e:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"AVI header not found");
90001672:	480a      	ldr	r0, [pc, #40]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
90001674:	f025 fd2e 	bl	900270d4 <__assert_func>
        src = (const char*)movieData + offset;
90001678:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000167a:	4420      	add	r0, r4
9000167c:	e753      	b.n	90001526 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32e>
9000167e:	bf00      	nop
90001680:	90028654 	.word	0x90028654
90001684:	9002870c 	.word	0x9002870c
90001688:	90028704 	.word	0x90028704
9000168c:	900286fc 	.word	0x900286fc
90001690:	10624dd3 	.word	0x10624dd3
90001694:	90028520 	.word	0x90028520
90001698:	90028534 	.word	0x90028534
9000169c:	900284c4 	.word	0x900284c4
900016a0:	9002865c 	.word	0x9002865c
900016a4:	90028678 	.word	0x90028678
900016a8:	900286d8 	.word	0x900286d8
900016ac:	900286c0 	.word	0x900286c0
900016b0:	900286a8 	.word	0x900286a8

900016b4 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
{
900016b4:	b410      	push	{r4}
    reader = 0; //not using reader
900016b6:	2400      	movs	r4, #0
    movieLength = length;
900016b8:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
900016bc:	6304      	str	r4, [r0, #48]	; 0x30
}
900016be:	f85d 4b04 	ldr.w	r4, [sp], #4
    readVideoHeader();
900016c2:	f7ff bd99 	b.w	900011f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
900016c6:	bf00      	nop

900016c8 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
900016c8:	b510      	push	{r4, lr}
    movieLength = reader.getDataLength();
900016ca:	680b      	ldr	r3, [r1, #0]
{
900016cc:	4604      	mov	r4, r0
    movieData = 0;
900016ce:	2200      	movs	r2, #0
    movieLength = reader.getDataLength();
900016d0:	4608      	mov	r0, r1
900016d2:	689b      	ldr	r3, [r3, #8]
    movieData = 0;
900016d4:	e9c4 210b 	strd	r2, r1, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
900016d8:	4798      	blx	r3
900016da:	4603      	mov	r3, r0
    readVideoHeader();
900016dc:	4620      	mov	r0, r4
    movieLength = reader.getDataLength();
900016de:	62a3      	str	r3, [r4, #40]	; 0x28
}
900016e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
900016e4:	f7ff bd88 	b.w	900011f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

900016e8 <HAL_JPEG_InfoReadyCallback>:
{
900016e8:	b508      	push	{r3, lr}
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
900016ea:	684b      	ldr	r3, [r1, #4]
{
900016ec:	4608      	mov	r0, r1
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
900016ee:	2b01      	cmp	r3, #1
900016f0:	d01a      	beq.n	90001728 <HAL_JPEG_InfoReadyCallback+0x40>
    if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
900016f2:	2b02      	cmp	r3, #2
900016f4:	d010      	beq.n	90001718 <HAL_JPEG_InfoReadyCallback+0x30>
    if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
900016f6:	b94b      	cbnz	r3, 9000170c <HAL_JPEG_InfoReadyCallback+0x24>
      if((pInfo->ImageWidth % 8) != 0)
900016f8:	68cb      	ldr	r3, [r1, #12]
900016fa:	0759      	lsls	r1, r3, #29
900016fc:	d12f      	bne.n	9000175e <HAL_JPEG_InfoReadyCallback+0x76>
      if((pInfo->ImageHeight % 8) != 0)
900016fe:	6883      	ldr	r3, [r0, #8]
90001700:	075a      	lsls	r2, r3, #29
90001702:	d003      	beq.n	9000170c <HAL_JPEG_InfoReadyCallback+0x24>
        pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
90001704:	f023 0307 	bic.w	r3, r3, #7
90001708:	3308      	adds	r3, #8
9000170a:	6083      	str	r3, [r0, #8]
    HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
9000170c:	4a1a      	ldr	r2, [pc, #104]	; (90001778 <HAL_JPEG_InfoReadyCallback+0x90>)
9000170e:	491b      	ldr	r1, [pc, #108]	; (9000177c <HAL_JPEG_InfoReadyCallback+0x94>)
90001710:	f010 fe4a 	bl	900123a8 <JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
90001714:	bb40      	cbnz	r0, 90001768 <HAL_JPEG_InfoReadyCallback+0x80>
}
90001716:	bd08      	pop	{r3, pc}
      if((pInfo->ImageWidth % 16) != 0)
90001718:	68cb      	ldr	r3, [r1, #12]
9000171a:	071a      	lsls	r2, r3, #28
9000171c:	d0ef      	beq.n	900016fe <HAL_JPEG_InfoReadyCallback+0x16>
        pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
9000171e:	f023 030f 	bic.w	r3, r3, #15
90001722:	3310      	adds	r3, #16
90001724:	60cb      	str	r3, [r1, #12]
90001726:	e7ea      	b.n	900016fe <HAL_JPEG_InfoReadyCallback+0x16>
    if((pInfo->ImageWidth % 16) != 0)
90001728:	68cb      	ldr	r3, [r1, #12]
9000172a:	071a      	lsls	r2, r3, #28
9000172c:	d003      	beq.n	90001736 <HAL_JPEG_InfoReadyCallback+0x4e>
      pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
9000172e:	f023 030f 	bic.w	r3, r3, #15
90001732:	3310      	adds	r3, #16
90001734:	60cb      	str	r3, [r1, #12]
    if((pInfo->ImageHeight % 16) != 0)
90001736:	6883      	ldr	r3, [r0, #8]
90001738:	0719      	lsls	r1, r3, #28
9000173a:	d003      	beq.n	90001744 <HAL_JPEG_InfoReadyCallback+0x5c>
      pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
9000173c:	f023 030f 	bic.w	r3, r3, #15
90001740:	3310      	adds	r3, #16
90001742:	6083      	str	r3, [r0, #8]
    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
90001744:	4a0c      	ldr	r2, [pc, #48]	; (90001778 <HAL_JPEG_InfoReadyCallback+0x90>)
90001746:	490d      	ldr	r1, [pc, #52]	; (9000177c <HAL_JPEG_InfoReadyCallback+0x94>)
90001748:	f001 ff56 	bl	900035f8 <TGFX_JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
9000174c:	2800      	cmp	r0, #0
9000174e:	d0e2      	beq.n	90001716 <HAL_JPEG_InfoReadyCallback+0x2e>
      assert(status == HAL_OK);
90001750:	4b0b      	ldr	r3, [pc, #44]	; (90001780 <HAL_JPEG_InfoReadyCallback+0x98>)
90001752:	f240 212e 	movw	r1, #558	; 0x22e
90001756:	4a0b      	ldr	r2, [pc, #44]	; (90001784 <HAL_JPEG_InfoReadyCallback+0x9c>)
90001758:	480b      	ldr	r0, [pc, #44]	; (90001788 <HAL_JPEG_InfoReadyCallback+0xa0>)
9000175a:	f025 fcbb 	bl	900270d4 <__assert_func>
        pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
9000175e:	f023 0307 	bic.w	r3, r3, #7
90001762:	3308      	adds	r3, #8
90001764:	60c3      	str	r3, [r0, #12]
90001766:	e7ca      	b.n	900016fe <HAL_JPEG_InfoReadyCallback+0x16>
      assert(status == HAL_OK);
90001768:	4b05      	ldr	r3, [pc, #20]	; (90001780 <HAL_JPEG_InfoReadyCallback+0x98>)
9000176a:	f44f 7112 	mov.w	r1, #584	; 0x248
9000176e:	4a05      	ldr	r2, [pc, #20]	; (90001784 <HAL_JPEG_InfoReadyCallback+0x9c>)
90001770:	4805      	ldr	r0, [pc, #20]	; (90001788 <HAL_JPEG_InfoReadyCallback+0xa0>)
90001772:	f025 fcaf 	bl	900270d4 <__assert_func>
90001776:	bf00      	nop
90001778:	24005b98 	.word	0x24005b98
9000177c:	24005bd4 	.word	0x24005bd4
90001780:	90028714 	.word	0x90028714
90001784:	90028728 	.word	0x90028728
90001788:	900284c4 	.word	0x900284c4

9000178c <HAL_JPEG_GetDataCallback>:
{
9000178c:	b410      	push	{r4}
  JPEG_InputImageIndex += NbDecodedData;
9000178e:	4c0c      	ldr	r4, [pc, #48]	; (900017c0 <HAL_JPEG_GetDataCallback+0x34>)
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001790:	4a0c      	ldr	r2, [pc, #48]	; (900017c4 <HAL_JPEG_GetDataCallback+0x38>)
  JPEG_InputImageIndex += NbDecodedData;
90001792:	6823      	ldr	r3, [r4, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001794:	6812      	ldr	r2, [r2, #0]
  JPEG_InputImageIndex += NbDecodedData;
90001796:	440b      	add	r3, r1
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001798:	4293      	cmp	r3, r2
  JPEG_InputImageIndex += NbDecodedData;
9000179a:	6023      	str	r3, [r4, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
9000179c:	d302      	bcc.n	900017a4 <HAL_JPEG_GetDataCallback+0x18>
}
9000179e:	f85d 4b04 	ldr.w	r4, [sp], #4
900017a2:	4770      	bx	lr
    uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
900017a4:	1ad2      	subs	r2, r2, r3
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
900017a6:	4b08      	ldr	r3, [pc, #32]	; (900017c8 <HAL_JPEG_GetDataCallback+0x3c>)
900017a8:	681c      	ldr	r4, [r3, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
900017aa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
900017ae:	4421      	add	r1, r4
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
900017b0:	bf28      	it	cs
900017b2:	f44f 3280 	movcs.w	r2, #65536	; 0x10000
}
900017b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
900017ba:	6019      	str	r1, [r3, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
900017bc:	f009 bc36 	b.w	9000b02c <HAL_JPEG_ConfigInputBuffer>
900017c0:	24005b7c 	.word	0x24005b7c
900017c4:	24005b80 	.word	0x24005b80
900017c8:	24005b78 	.word	0x24005b78

900017cc <HAL_JPEG_DataReadyCallback>:
{
900017cc:	b570      	push	{r4, r5, r6, lr}
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017ce:	4e1e      	ldr	r6, [pc, #120]	; (90001848 <HAL_JPEG_DataReadyCallback+0x7c>)
{
900017d0:	4605      	mov	r5, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017d2:	2001      	movs	r0, #1
900017d4:	4c1d      	ldr	r4, [pc, #116]	; (9000184c <HAL_JPEG_DataReadyCallback+0x80>)
900017d6:	6833      	ldr	r3, [r6, #0]
900017d8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    JPEG_OUT_Write_BufferIndex++;
900017dc:	4403      	add	r3, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017de:	f804 0021 	strb.w	r0, [r4, r1, lsl #2]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
900017e2:	4283      	cmp	r3, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017e4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
900017e8:	608a      	str	r2, [r1, #8]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
900017ea:	d91a      	bls.n	90001822 <HAL_JPEG_DataReadyCallback+0x56>
      JPEG_OUT_Write_BufferIndex = 0;
900017ec:	2200      	movs	r2, #0
900017ee:	4613      	mov	r3, r2
900017f0:	6032      	str	r2, [r6, #0]
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
900017f2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
900017f6:	005a      	lsls	r2, r3, #1
900017f8:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
900017fc:	b9c9      	cbnz	r1, 90001832 <HAL_JPEG_DataReadyCallback+0x66>
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
900017fe:	4914      	ldr	r1, [pc, #80]	; (90001850 <HAL_JPEG_DataReadyCallback+0x84>)
90001800:	4413      	add	r3, r2
90001802:	4628      	mov	r0, r5
90001804:	68ca      	ldr	r2, [r1, #12]
90001806:	eb04 0483 	add.w	r4, r4, r3, lsl #2
9000180a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9000180e:	6861      	ldr	r1, [r4, #4]
90001810:	01d2      	lsls	r2, r2, #7
90001812:	f009 fc0f 	bl	9000b034 <HAL_JPEG_ConfigOutputBuffer>
    SEM_POST(semDecodingDone);
90001816:	4b0f      	ldr	r3, [pc, #60]	; (90001854 <HAL_JPEG_DataReadyCallback+0x88>)
}
90001818:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SEM_POST(semDecodingDone);
9000181c:	6818      	ldr	r0, [r3, #0]
9000181e:	f00d b889 	b.w	9000e934 <osSemaphoreRelease>
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
90001822:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    JPEG_OUT_Write_BufferIndex++;
90001826:	6033      	str	r3, [r6, #0]
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
90001828:	005a      	lsls	r2, r3, #1
9000182a:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
9000182e:	2900      	cmp	r1, #0
90001830:	d0e5      	beq.n	900017fe <HAL_JPEG_DataReadyCallback+0x32>
      HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90001832:	2102      	movs	r1, #2
90001834:	4628      	mov	r0, r5
90001836:	f009 fbc1 	bl	9000afbc <HAL_JPEG_Pause>
      Output_Is_Paused = 1;
9000183a:	4a07      	ldr	r2, [pc, #28]	; (90001858 <HAL_JPEG_DataReadyCallback+0x8c>)
9000183c:	2101      	movs	r1, #1
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
9000183e:	6833      	ldr	r3, [r6, #0]
      Output_Is_Paused = 1;
90001840:	6011      	str	r1, [r2, #0]
90001842:	fa03 f201 	lsl.w	r2, r3, r1
90001846:	e7da      	b.n	900017fe <HAL_JPEG_DataReadyCallback+0x32>
90001848:	24005b88 	.word	0x24005b88
9000184c:	24000004 	.word	0x24000004
90001850:	24005ba0 	.word	0x24005ba0
90001854:	24005bd8 	.word	0x24005bd8
90001858:	24005b9c 	.word	0x24005b9c

9000185c <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
9000185c:	b672      	cpsid	i
  while (1)
9000185e:	e7fe      	b.n	9000185e <HAL_JPEG_ErrorCallback+0x2>

90001860 <HAL_JPEG_DecodeCpltCallback>:
  Jpeg_HWDecodingEnd = 1;
90001860:	4b01      	ldr	r3, [pc, #4]	; (90001868 <HAL_JPEG_DecodeCpltCallback+0x8>)
90001862:	2201      	movs	r2, #1
90001864:	601a      	str	r2, [r3, #0]
}
90001866:	4770      	bx	lr
90001868:	24005b90 	.word	0x24005b90

9000186c <DMA2D_CopyBuffer>:
  * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
  * @param job: External job reference
  * @retval None
  */
void DMA2D_CopyBuffer(External_DMA2D_JobTypeDef& job)
{
9000186c:	b570      	push	{r4, r5, r6, lr}
  uint32_t xRef, yRef, refline;

  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000186e:	491b      	ldr	r1, [pc, #108]	; (900018dc <DMA2D_CopyBuffer+0x70>)
  yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001870:	2302      	movs	r3, #2
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001872:	6805      	ldr	r5, [r0, #0]
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001874:	4c1a      	ldr	r4, [pc, #104]	; (900018e0 <DMA2D_CopyBuffer+0x74>)
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001876:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001878:	6363      	str	r3, [r4, #52]	; 0x34
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000187a:	012b      	lsls	r3, r5, #4

  /* Configure DMA2D data size */
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
9000187c:	4e19      	ldr	r6, [pc, #100]	; (900018e4 <DMA2D_CopyBuffer+0x78>)
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000187e:	fbb3 fcf2 	udiv	ip, r3, r2
  yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
90001882:	fb02 321c 	mls	r2, r2, ip, r3
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
90001886:	684b      	ldr	r3, [r1, #4]
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
90001888:	6836      	ldr	r6, [r6, #0]
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
9000188a:	fb03 fc0c 	mul.w	ip, r3, ip
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
9000188e:	68cb      	ldr	r3, [r1, #12]
90001890:	eba6 0e03 	sub.w	lr, r6, r3
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
90001894:	690e      	ldr	r6, [r1, #16]
90001896:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
9000189a:	4575      	cmp	r5, lr
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
9000189c:	fb06 f202 	mul.w	r2, r6, r2
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
900018a0:	d317      	bcc.n	900018d2 <DMA2D_CopyBuffer+0x66>
  {
      WRITE_REG(DMA2D->NLR, (JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
900018a2:	6889      	ldr	r1, [r1, #8]
900018a4:	ea41 5103 	orr.w	r1, r1, r3, lsl #20
900018a8:	6461      	str	r1, [r4, #68]	; 0x44
  {
      WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
  }

  /* Configure DMA2D destination address */
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
900018aa:	490f      	ldr	r1, [pc, #60]	; (900018e8 <DMA2D_CopyBuffer+0x7c>)

  /* DMA2D OOR register configuration ------------------------------------------*/
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
900018ac:	f1c3 031e 	rsb	r3, r3, #30

  /* DMA2D FGPFCCR register configuration -------------------------------------*/
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));

  /* Configure DMA2D source address */
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
900018b0:	6840      	ldr	r0, [r0, #4]
  WRITE_REG(DMA2D->FGOR, 0);
900018b2:	2400      	movs	r4, #0
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
900018b4:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
900018b6:	011b      	lsls	r3, r3, #4
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
900018b8:	6840      	ldr	r0, [r0, #4]
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
900018ba:	4411      	add	r1, r2
900018bc:	4a08      	ldr	r2, [pc, #32]	; (900018e0 <DMA2D_CopyBuffer+0x74>)
900018be:	4461      	add	r1, ip
900018c0:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
900018c2:	6413      	str	r3, [r2, #64]	; 0x40
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
900018c4:	4909      	ldr	r1, [pc, #36]	; (900018ec <DMA2D_CopyBuffer+0x80>)

  /* Configure DMA2D contol register */
  WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
900018c6:	4b0a      	ldr	r3, [pc, #40]	; (900018f0 <DMA2D_CopyBuffer+0x84>)
  WRITE_REG(DMA2D->FGOR, 0);
900018c8:	6114      	str	r4, [r2, #16]
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
900018ca:	61d1      	str	r1, [r2, #28]
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
900018cc:	60d0      	str	r0, [r2, #12]
  WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
900018ce:	6013      	str	r3, [r2, #0]
}
900018d0:	bd70      	pop	{r4, r5, r6, pc}
      WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
900018d2:	0519      	lsls	r1, r3, #20
900018d4:	f041 0110 	orr.w	r1, r1, #16
900018d8:	6461      	str	r1, [r4, #68]	; 0x44
900018da:	e7e6      	b.n	900018aa <DMA2D_CopyBuffer+0x3e>
900018dc:	24005ba0 	.word	0x24005ba0
900018e0:	52001000 	.word	0x52001000
900018e4:	24005b98 	.word	0x24005b98
900018e8:	24005b74 	.word	0x24005b74
900018ec:	ff09000b 	.word	0xff09000b
900018f0:	00010201 	.word	0x00010201

900018f4 <DMA2D_ExternalJobCompleted>:
  * @retval None
  */
void DMA2D_ExternalJobCompleted(External_DMA2D_JobTypeDef& job)
{
  // Mark ycbcr empty
  job.jpeg_buffer->State = JPEG_BUFFER_EMPTY;
900018f4:	2200      	movs	r2, #0
900018f6:	6843      	ldr	r3, [r0, #4]
      return count_ == 0;
900018f8:	490b      	ldr	r1, [pc, #44]	; (90001928 <DMA2D_ExternalJobCompleted+0x34>)
900018fa:	701a      	strb	r2, [r3, #0]
  job.jpeg_buffer->DataBufferSize = 0;

  // Mark dma paused if queue is empty
  if(external_queue.is_empty())
900018fc:	68c9      	ldr	r1, [r1, #12]
  job.jpeg_buffer->DataBufferSize = 0;
900018fe:	609a      	str	r2, [r3, #8]
  if(external_queue.is_empty())
90001900:	b911      	cbnz	r1, 90001908 <DMA2D_ExternalJobCompleted+0x14>
  {
      DMA2D_output_Is_Paused = 1;
90001902:	4b0a      	ldr	r3, [pc, #40]	; (9000192c <DMA2D_ExternalJobCompleted+0x38>)
90001904:	2201      	movs	r2, #1
90001906:	601a      	str	r2, [r3, #0]
  }

  // Check if last line
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
90001908:	4b09      	ldr	r3, [pc, #36]	; (90001930 <DMA2D_ExternalJobCompleted+0x3c>)
9000190a:	490a      	ldr	r1, [pc, #40]	; (90001934 <DMA2D_ExternalJobCompleted+0x40>)
9000190c:	681b      	ldr	r3, [r3, #0]
9000190e:	68c9      	ldr	r1, [r1, #12]
90001910:	6802      	ldr	r2, [r0, #0]
90001912:	1a5b      	subs	r3, r3, r1
90001914:	429a      	cmp	r2, r3
90001916:	d302      	bcc.n	9000191e <DMA2D_ExternalJobCompleted+0x2a>
  {
      DMA2D_CopyBufferEnd = 1;
90001918:	4b07      	ldr	r3, [pc, #28]	; (90001938 <DMA2D_ExternalJobCompleted+0x44>)
9000191a:	2201      	movs	r2, #1
9000191c:	601a      	str	r2, [r3, #0]
  }

  // Signal Hardware Decoding to wake up
  SEM_POST(semDecodingDone);
9000191e:	4b07      	ldr	r3, [pc, #28]	; (9000193c <DMA2D_ExternalJobCompleted+0x48>)
90001920:	6818      	ldr	r0, [r3, #0]
90001922:	f00d b807 	b.w	9000e934 <osSemaphoreRelease>
90001926:	bf00      	nop
90001928:	24005bb4 	.word	0x24005bb4
9000192c:	24005b70 	.word	0x24005b70
90001930:	24005b98 	.word	0x24005b98
90001934:	24005ba0 	.word	0x24005ba0
90001938:	24005b6c 	.word	0x24005b6c
9000193c:	24005bd8 	.word	0x24005bd8

90001940 <_GLOBAL__sub_I_FrameBufferAddress>:
      : max_size_(Size), head_(0), tail_(0), count_(0)
90001940:	4b03      	ldr	r3, [pc, #12]	; (90001950 <_GLOBAL__sub_I_FrameBufferAddress+0x10>)
90001942:	2200      	movs	r2, #0
90001944:	2102      	movs	r1, #2
90001946:	60da      	str	r2, [r3, #12]
90001948:	6019      	str	r1, [r3, #0]
9000194a:	e9c3 2201 	strd	r2, r2, [r3, #4]
}
9000194e:	4770      	bx	lr
90001950:	24005bb4 	.word	0x24005bb4

90001954 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
90001954:	2101      	movs	r1, #1
90001956:	2200      	movs	r2, #0
{
90001958:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
9000195a:	4608      	mov	r0, r1
9000195c:	f00c ff66 	bl	9000e82c <osSemaphoreNew>
90001960:	4b0b      	ldr	r3, [pc, #44]	; (90001990 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
90001962:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
90001964:	b140      	cbz	r0, 90001978 <_ZN8touchgfx10OSWrappers10initializeEv+0x24>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
90001966:	2200      	movs	r2, #0
90001968:	2104      	movs	r1, #4
9000196a:	2001      	movs	r0, #1
9000196c:	f00d f80e 	bl	9000e98c <osMessageQueueNew>
90001970:	4b08      	ldr	r3, [pc, #32]	; (90001994 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
90001972:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
90001974:	b130      	cbz	r0, 90001984 <_ZN8touchgfx10OSWrappers10initializeEv+0x30>
}
90001976:	bd08      	pop	{r3, pc}
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
90001978:	4b07      	ldr	r3, [pc, #28]	; (90001998 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
9000197a:	2128      	movs	r1, #40	; 0x28
9000197c:	4a07      	ldr	r2, [pc, #28]	; (9000199c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
9000197e:	4808      	ldr	r0, [pc, #32]	; (900019a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
90001980:	f025 fba8 	bl	900270d4 <__assert_func>
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
90001984:	4b07      	ldr	r3, [pc, #28]	; (900019a4 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
90001986:	212c      	movs	r1, #44	; 0x2c
90001988:	4a04      	ldr	r2, [pc, #16]	; (9000199c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
9000198a:	4805      	ldr	r0, [pc, #20]	; (900019a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
9000198c:	f025 fba2 	bl	900270d4 <__assert_func>
90001990:	24005be0 	.word	0x24005be0
90001994:	24005bdc 	.word	0x24005bdc
90001998:	900287b4 	.word	0x900287b4
9000199c:	90028800 	.word	0x90028800
900019a0:	90028830 	.word	0x90028830
900019a4:	90028884 	.word	0x90028884

900019a8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
900019a8:	4b02      	ldr	r3, [pc, #8]	; (900019b4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
900019aa:	f04f 31ff 	mov.w	r1, #4294967295
900019ae:	6818      	ldr	r0, [r3, #0]
900019b0:	f00c bf8c 	b.w	9000e8cc <osSemaphoreAcquire>
900019b4:	24005be0 	.word	0x24005be0

900019b8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
900019b8:	4b01      	ldr	r3, [pc, #4]	; (900019c0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
900019ba:	6818      	ldr	r0, [r3, #0]
900019bc:	f00c bfba 	b.w	9000e934 <osSemaphoreRelease>
900019c0:	24005be0 	.word	0x24005be0

900019c4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
900019c4:	4b02      	ldr	r3, [pc, #8]	; (900019d0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
900019c6:	2100      	movs	r1, #0
900019c8:	6818      	ldr	r0, [r3, #0]
900019ca:	f00c bf7f 	b.w	9000e8cc <osSemaphoreAcquire>
900019ce:	bf00      	nop
900019d0:	24005be0 	.word	0x24005be0

900019d4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
900019d4:	4b01      	ldr	r3, [pc, #4]	; (900019dc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x8>)
900019d6:	6818      	ldr	r0, [r3, #0]
900019d8:	f00c bfac 	b.w	9000e934 <osSemaphoreRelease>
900019dc:	24005be0 	.word	0x24005be0

900019e0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
900019e0:	4803      	ldr	r0, [pc, #12]	; (900019f0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
900019e2:	2300      	movs	r3, #0
900019e4:	4903      	ldr	r1, [pc, #12]	; (900019f4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
900019e6:	461a      	mov	r2, r3
900019e8:	6800      	ldr	r0, [r0, #0]
900019ea:	f00d b80d 	b.w	9000ea08 <osMessageQueuePut>
900019ee:	bf00      	nop
900019f0:	24005bdc 	.word	0x24005bdc
900019f4:	2400001c 	.word	0x2400001c

900019f8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
900019f8:	b510      	push	{r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
900019fa:	2300      	movs	r3, #0
{
900019fc:	b082      	sub	sp, #8
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
900019fe:	4c07      	ldr	r4, [pc, #28]	; (90001a1c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
90001a00:	461a      	mov	r2, r3
90001a02:	a901      	add	r1, sp, #4
90001a04:	6820      	ldr	r0, [r4, #0]
90001a06:	f00d f841 	bl	9000ea8c <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
90001a0a:	f04f 33ff 	mov.w	r3, #4294967295
90001a0e:	2200      	movs	r2, #0
90001a10:	a901      	add	r1, sp, #4
90001a12:	6820      	ldr	r0, [r4, #0]
90001a14:	f00d f83a 	bl	9000ea8c <osMessageQueueGet>
}
90001a18:	b002      	add	sp, #8
90001a1a:	bd10      	pop	{r4, pc}
90001a1c:	24005bdc 	.word	0x24005bdc

90001a20 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
90001a20:	6803      	ldr	r3, [r0, #0]
90001a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001a24:	4718      	bx	r3
90001a26:	bf00      	nop

90001a28 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
90001a28:	2001      	movs	r0, #1
90001a2a:	4770      	bx	lr

90001a2c <_ZN8STM32DMAD1Ev>:
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
{
    mutexIsRunning = MUTEX_CREATE();
}

STM32DMA::~STM32DMA()
90001a2c:	4905      	ldr	r1, [pc, #20]	; (90001a44 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001a2e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001a32:	4b05      	ldr	r3, [pc, #20]	; (90001a48 <_ZN8STM32DMAD1Ev+0x1c>)
90001a34:	6001      	str	r1, [r0, #0]
90001a36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90001a3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001a3e:	f3bf 8f6f 	isb	sy
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
90001a42:	4770      	bx	lr
90001a44:	90028a30 	.word	0x90028a30
90001a48:	e000e100 	.word	0xe000e100

90001a4c <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a4c:	4b0f      	ldr	r3, [pc, #60]	; (90001a8c <_ZN8STM32DMA10initializeEv+0x40>)
{
90001a4e:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_FORCE_RESET();
    __HAL_RCC_DMA2D_RELEASE_RESET();

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a50:	490f      	ldr	r1, [pc, #60]	; (90001a90 <_ZN8STM32DMA10initializeEv+0x44>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a52:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a56:	480f      	ldr	r0, [pc, #60]	; (90001a94 <_ZN8STM32DMA10initializeEv+0x48>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a58:	f042 0210 	orr.w	r2, r2, #16
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a5c:	6208      	str	r0, [r1, #32]
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a5e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90001a62:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90001a66:	f002 0210 	and.w	r2, r2, #16
90001a6a:	9201      	str	r2, [sp, #4]
90001a6c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
90001a6e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90001a70:	f042 0210 	orr.w	r2, r2, #16
90001a74:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
90001a76:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90001a78:	f022 0210 	bic.w	r2, r2, #16
90001a7c:	67da      	str	r2, [r3, #124]	; 0x7c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001a7e:	4b06      	ldr	r3, [pc, #24]	; (90001a98 <_ZN8STM32DMA10initializeEv+0x4c>)
90001a80:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001a84:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
90001a86:	b002      	add	sp, #8
90001a88:	4770      	bx	lr
90001a8a:	bf00      	nop
90001a8c:	58024400 	.word	0x58024400
90001a90:	2400cdc8 	.word	0x2400cdc8
90001a94:	90001e45 	.word	0x90001e45
90001a98:	e000e100 	.word	0xe000e100

90001a9c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
90001a9c:	f240 30ef 	movw	r0, #1007	; 0x3ef
90001aa0:	4770      	bx	lr
90001aa2:	bf00      	nop

90001aa4 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
90001aa4:	4909      	ldr	r1, [pc, #36]	; (90001acc <_ZN8STM32DMAD0Ev+0x28>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001aa6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001aaa:	4b09      	ldr	r3, [pc, #36]	; (90001ad0 <_ZN8STM32DMAD0Ev+0x2c>)
90001aac:	b510      	push	{r4, lr}
90001aae:	6001      	str	r1, [r0, #0]
90001ab0:	4604      	mov	r4, r0
90001ab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90001ab6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001aba:	f3bf 8f6f 	isb	sy
}
90001abe:	f640 51a8 	movw	r1, #3496	; 0xda8
90001ac2:	f025 fad8 	bl	90027076 <_ZdlPvj>
90001ac6:	4620      	mov	r0, r4
90001ac8:	bd10      	pop	{r4, pc}
90001aca:	bf00      	nop
90001acc:	90028a30 	.word	0x90028a30
90001ad0:	e000e100 	.word	0xe000e100

90001ad4 <_ZN8STM32DMA5startEv>:
                externalJobExecute();
            }
        }
    }

    virtual void start()
90001ad4:	b510      	push	{r4, lr}
90001ad6:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
90001ad8:	f04f 31ff 	mov.w	r1, #4294967295
90001adc:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	; 0xda4
90001ae0:	f00c fe5e 	bl	9000e7a0 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
90001ae4:	6860      	ldr	r0, [r4, #4]
90001ae6:	6803      	ldr	r3, [r0, #0]
90001ae8:	681b      	ldr	r3, [r3, #0]
90001aea:	4798      	blx	r3
90001aec:	b978      	cbnz	r0, 90001b0e <_ZN8STM32DMA5startEv+0x3a>
90001aee:	7a63      	ldrb	r3, [r4, #9]
90001af0:	b16b      	cbz	r3, 90001b0e <_ZN8STM32DMA5startEv+0x3a>
90001af2:	7a23      	ldrb	r3, [r4, #8]
90001af4:	b92b      	cbnz	r3, 90001b02 <_ZN8STM32DMA5startEv+0x2e>
        {
            started_by_external_job = false;
            execute();
90001af6:	6822      	ldr	r2, [r4, #0]
90001af8:	4620      	mov	r0, r4
            started_by_external_job = false;
90001afa:	f884 3da0 	strb.w	r3, [r4, #3488]	; 0xda0
            execute();
90001afe:	6a53      	ldr	r3, [r2, #36]	; 0x24
90001b00:	4798      	blx	r3
        else if(!external_queue.is_empty() && !isRunning)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
90001b02:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	; 0xda4
    }
90001b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
90001b0a:	f00c be6d 	b.w	9000e7e8 <osMutexRelease>
      return count_ == 0;
90001b0e:	4b0b      	ldr	r3, [pc, #44]	; (90001b3c <_ZN8STM32DMA5startEv+0x68>)
        else if(!external_queue.is_empty() && !isRunning)
90001b10:	68da      	ldr	r2, [r3, #12]
90001b12:	2a00      	cmp	r2, #0
90001b14:	d0f5      	beq.n	90001b02 <_ZN8STM32DMA5startEv+0x2e>
90001b16:	7a22      	ldrb	r2, [r4, #8]
90001b18:	2a00      	cmp	r2, #0
90001b1a:	d1f2      	bne.n	90001b02 <_ZN8STM32DMA5startEv+0x2e>
      return buffer_[head_];
90001b1c:	6858      	ldr	r0, [r3, #4]
            started_by_external_job = true;
90001b1e:	2201      	movs	r2, #1
      return buffer_[head_];
90001b20:	3002      	adds	r0, #2
            started_by_external_job = true;
90001b22:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
     *
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
90001b26:	7222      	strb	r2, [r4, #8]
        External_DMA2D_JobTypeDef& job = external_queue.front();
        DMA2D_CopyBuffer(job);
90001b28:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001b2c:	f7ff fe9e 	bl	9000186c <DMA2D_CopyBuffer>
        MUTEX_UNLOCK(mutexIsRunning);
90001b30:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	; 0xda4
    }
90001b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
90001b38:	f00c be56 	b.w	9000e7e8 <osMutexRelease>
90001b3c:	24005bb4 	.word	0x24005bb4

90001b40 <_ZN8STM32DMA18signalDMAInterruptEv>:
    virtual void signalDMAInterrupt()
90001b40:	b538      	push	{r3, r4, r5, lr}
        if(started_by_external_job)
90001b42:	f890 3da0 	ldrb.w	r3, [r0, #3488]	; 0xda0
    virtual void signalDMAInterrupt()
90001b46:	4604      	mov	r4, r0
        if(started_by_external_job)
90001b48:	b943      	cbnz	r3, 90001b5c <_ZN8STM32DMA18signalDMAInterruptEv+0x1c>
            executeCompleted();
90001b4a:	6803      	ldr	r3, [r0, #0]
90001b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001b4e:	4798      	blx	r3
      return count_ == 0;
90001b50:	4b15      	ldr	r3, [pc, #84]	; (90001ba8 <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
            if(!external_queue.is_empty() && !isRunning)
90001b52:	68da      	ldr	r2, [r3, #12]
90001b54:	b10a      	cbz	r2, 90001b5a <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
90001b56:	7a22      	ldrb	r2, [r4, #8]
90001b58:	b1d2      	cbz	r2, 90001b90 <_ZN8STM32DMA18signalDMAInterruptEv+0x50>
    }
90001b5a:	bd38      	pop	{r3, r4, r5, pc}
      return count_ == 0;
90001b5c:	4b12      	ldr	r3, [pc, #72]	; (90001ba8 <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
90001b5e:	68da      	ldr	r2, [r3, #12]
        if(!external_queue.is_empty() && isRunning)
90001b60:	2a00      	cmp	r2, #0
90001b62:	d0fa      	beq.n	90001b5a <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
90001b64:	7a01      	ldrb	r1, [r0, #8]
90001b66:	2900      	cmp	r1, #0
90001b68:	d0f7      	beq.n	90001b5a <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
            isRunning = false;
90001b6a:	2100      	movs	r1, #0
      count_--;
90001b6c:	3a01      	subs	r2, #1
      head_ = (head_ + 1) % max_size_;
90001b6e:	e9d3 5000 	ldrd	r5, r0, [r3]
            isRunning = false;
90001b72:	7221      	strb	r1, [r4, #8]
      head_ = (head_ + 1) % max_size_;
90001b74:	1c41      	adds	r1, r0, #1
      count_--;
90001b76:	60da      	str	r2, [r3, #12]
      return buffer_[head_];
90001b78:	3002      	adds	r0, #2
      head_ = (head_ + 1) % max_size_;
90001b7a:	fbb1 f2f5 	udiv	r2, r1, r5
90001b7e:	fb05 1112 	mls	r1, r5, r2, r1
            DMA2D_ExternalJobCompleted(completed_job);
90001b82:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      head_ = (head_ + 1) % max_size_;
90001b86:	6059      	str	r1, [r3, #4]
    }
90001b88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            DMA2D_ExternalJobCompleted(completed_job);
90001b8c:	f7ff beb2 	b.w	900018f4 <DMA2D_ExternalJobCompleted>
      return buffer_[head_];
90001b90:	6858      	ldr	r0, [r3, #4]
                started_by_external_job = true;
90001b92:	2201      	movs	r2, #1
      return buffer_[head_];
90001b94:	3002      	adds	r0, #2
                started_by_external_job = true;
90001b96:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
        isRunning = true;
90001b9a:	7222      	strb	r2, [r4, #8]
        DMA2D_CopyBuffer(job);
90001b9c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    }
90001ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        DMA2D_CopyBuffer(job);
90001ba4:	f7ff be62 	b.w	9000186c <DMA2D_CopyBuffer>
90001ba8:	24005bb4 	.word	0x24005bb4

90001bac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
90001bac:	b538      	push	{r3, r4, r5, lr}
    switch (format)
90001bae:	7f8b      	ldrb	r3, [r1, #30]
90001bb0:	2b0a      	cmp	r3, #10
90001bb2:	d83e      	bhi.n	90001c32 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x86>
90001bb4:	e8df f003 	tbb	[pc, r3]
90001bb8:	3d2a063b 	.word	0x3d2a063b
90001bbc:	063d3d3d 	.word	0x063d3d3d
90001bc0:	0606      	.short	0x0606
90001bc2:	06          	.byte	0x06
90001bc3:	00          	.byte	0x00
90001bc4:	2401      	movs	r4, #1

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001bc6:	f8b1 c014 	ldrh.w	ip, [r1, #20]
90001bca:	8ac8      	ldrh	r0, [r1, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bcc:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001bce:	4b1c      	ldr	r3, [pc, #112]	; (90001c40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x94>)
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001bd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bd4:	eba2 020c 	sub.w	r2, r2, ip
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001bd8:	635c      	str	r4, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001bda:	6458      	str	r0, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001bdc:	6908      	ldr	r0, [r1, #16]
90001bde:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001be0:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
90001be2:	680d      	ldr	r5, [r1, #0]
90001be4:	2d08      	cmp	r5, #8
90001be6:	d013      	beq.n	90001c10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x64>
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, 0);
90001be8:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
90001bea:	61dc      	str	r4, [r3, #28]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90001bec:	4c15      	ldr	r4, [pc, #84]	; (90001c44 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x98>)
        WRITE_REG(DMA2D->FGOR, 0);
90001bee:	611a      	str	r2, [r3, #16]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
90001bf0:	68c9      	ldr	r1, [r1, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
90001bf2:	0a0a      	lsrs	r2, r1, #8
90001bf4:	0948      	lsrs	r0, r1, #5
90001bf6:	f3c1 01c4 	ubfx	r1, r1, #3, #5
90001bfa:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
90001bfe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90001c02:	4302      	orrs	r2, r0
90001c04:	430a      	orrs	r2, r1
90001c06:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90001c08:	601c      	str	r4, [r3, #0]
    }
}
90001c0a:	bd38      	pop	{r3, r4, r5, pc}
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90001c0c:	2400      	movs	r4, #0
90001c0e:	e7da      	b.n	90001bc6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001c10:	619a      	str	r2, [r3, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001c12:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001c14:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001c16:	4a0c      	ldr	r2, [pc, #48]	; (90001c48 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x9c>)
90001c18:	7f0c      	ldrb	r4, [r1, #28]
90001c1a:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
90001c1e:	4c0b      	ldr	r4, [pc, #44]	; (90001c4c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001c20:	61da      	str	r2, [r3, #28]
90001c22:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
90001c24:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001c26:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001c28:	60d8      	str	r0, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
90001c2a:	601c      	str	r4, [r3, #0]
}
90001c2c:	bd38      	pop	{r3, r4, r5, pc}
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
90001c2e:	2402      	movs	r4, #2
90001c30:	e7c9      	b.n	90001bc6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
90001c32:	4b07      	ldr	r3, [pc, #28]	; (90001c50 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa4>)
90001c34:	2188      	movs	r1, #136	; 0x88
90001c36:	4a07      	ldr	r2, [pc, #28]	; (90001c54 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
90001c38:	4807      	ldr	r0, [pc, #28]	; (90001c58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>)
90001c3a:	f025 fa4b 	bl	900270d4 <__assert_func>
90001c3e:	bf00      	nop
90001c40:	52001000 	.word	0x52001000
90001c44:	00030201 	.word	0x00030201
90001c48:	00010009 	.word	0x00010009
90001c4c:	00020201 	.word	0x00020201
90001c50:	900288c8 	.word	0x900288c8
90001c54:	900288e4 	.word	0x900288e4
90001c58:	90028930 	.word	0x90028930

90001c5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
90001c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
90001c5e:	f891 e01d 	ldrb.w	lr, [r1, #29]
    switch (format)
90001c62:	f1be 0f0b 	cmp.w	lr, #11
90001c66:	f200 80c1 	bhi.w	90001dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>
90001c6a:	e8df f01e 	tbh	[pc, lr, lsl #1]
90001c6e:	0063      	.short	0x0063
90001c70:	004c0065 	.word	0x004c0065
90001c74:	00bf00bf 	.word	0x00bf00bf
90001c78:	00bf00bf 	.word	0x00bf00bf
90001c7c:	000c000c 	.word	0x000c000c
90001c80:	000c000c 	.word	0x000c000c
90001c84:	000c      	.short	0x000c
        dma2dColorMode = DMA2D_INPUT_L8;
90001c86:	2505      	movs	r5, #5
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
90001c88:	f891 c01e 	ldrb.w	ip, [r1, #30]
    switch (format)
90001c8c:	f1bc 0f0b 	cmp.w	ip, #11
90001c90:	f200 80ac 	bhi.w	90001dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>
90001c94:	e8df f00c 	tbb	[pc, ip]
90001c98:	aa0e4b52 	.word	0xaa0e4b52
90001c9c:	06aaaaaa 	.word	0x06aaaaaa
90001ca0:	06060606 	.word	0x06060606
    switch (format)
90001ca4:	f1ac 0307 	sub.w	r3, ip, #7
90001ca8:	2b03      	cmp	r3, #3
90001caa:	f200 80a5 	bhi.w	90001df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19c>
90001cae:	2605      	movs	r6, #5
90001cb0:	2701      	movs	r7, #1
90001cb2:	e001      	b.n	90001cb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
90001cb4:	2600      	movs	r6, #0
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90001cb6:	4637      	mov	r7, r6
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001cb8:	8a8b      	ldrh	r3, [r1, #20]
90001cba:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001cbc:	8b0c      	ldrh	r4, [r1, #24]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001cbe:	8ac8      	ldrh	r0, [r1, #22]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001cc0:	1ad2      	subs	r2, r2, r3
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001cc2:	1ae4      	subs	r4, r4, r3
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001cc4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001cc8:	4b52      	ldr	r3, [pc, #328]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001cca:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001ccc:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001cce:	611c      	str	r4, [r3, #16]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
90001cd0:	684a      	ldr	r2, [r1, #4]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001cd2:	635f      	str	r7, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001cd4:	6458      	str	r0, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001cd6:	6908      	ldr	r0, [r1, #16]
90001cd8:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
90001cda:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
90001cdc:	680a      	ldr	r2, [r1, #0]
90001cde:	2a80      	cmp	r2, #128	; 0x80
90001ce0:	d03b      	beq.n	90001d5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
90001ce2:	d812      	bhi.n	90001d0a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
90001ce4:	2a20      	cmp	r2, #32
90001ce6:	d02c      	beq.n	90001d42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
90001ce8:	2a40      	cmp	r2, #64	; 0x40
90001cea:	d02a      	beq.n	90001d42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
90001cec:	2a04      	cmp	r2, #4
90001cee:	d169      	bne.n	90001dc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001cf0:	7f0a      	ldrb	r2, [r1, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001cf2:	4949      	ldr	r1, [pc, #292]	; (90001e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001cf4:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
90001cf8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
90001cfc:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001cfe:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d00:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d02:	6019      	str	r1, [r3, #0]
}
90001d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
90001d06:	2500      	movs	r5, #0
90001d08:	e7be      	b.n	90001c88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
    switch (blitOp.operation)
90001d0a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
90001d0e:	d067      	beq.n	90001de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x184>
90001d10:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
90001d14:	d156      	bne.n	90001dc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d16:	7f0c      	ldrb	r4, [r1, #28]
90001d18:	4a40      	ldr	r2, [pc, #256]	; (90001e1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c0>)
90001d1a:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
90001d1e:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d20:	4a3d      	ldr	r2, [pc, #244]	; (90001e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
90001d22:	68c9      	ldr	r1, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
90001d24:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d26:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d28:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d2a:	601a      	str	r2, [r3, #0]
}
90001d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (format)
90001d2e:	2601      	movs	r6, #1
90001d30:	4637      	mov	r7, r6
90001d32:	e7c1      	b.n	90001cb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
90001d34:	2502      	movs	r5, #2
90001d36:	e7a7      	b.n	90001c88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
        dma2dColorMode = DMA2D_INPUT_RGB888;
90001d38:	2501      	movs	r5, #1
90001d3a:	e7a5      	b.n	90001c88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
        dma2dColorMode = DMA2D_INPUT_RGB565;
90001d3c:	2602      	movs	r6, #2
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
90001d3e:	4637      	mov	r7, r6
90001d40:	e7ba      	b.n	90001cb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d42:	7f0b      	ldrb	r3, [r1, #28]
90001d44:	4a33      	ldr	r2, [pc, #204]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001d46:	ea45 6303 	orr.w	r3, r5, r3, lsl #24
90001d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90001d4e:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d50:	4b31      	ldr	r3, [pc, #196]	; (90001e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d52:	6256      	str	r6, [r2, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d54:	6150      	str	r0, [r2, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d56:	6013      	str	r3, [r2, #0]
}
90001d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
90001d5a:	688a      	ldr	r2, [r1, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
90001d5c:	1d14      	adds	r4, r2, #4
90001d5e:	62dc      	str	r4, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d60:	7f0c      	ldrb	r4, [r1, #28]
            switch ((Bitmap::ClutFormat)palette->format)
90001d62:	7811      	ldrb	r1, [r2, #0]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d64:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
90001d68:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90001d6c:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d6e:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d70:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
90001d72:	b9b1      	cbnz	r1, 90001da2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x146>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d74:	8851      	ldrh	r1, [r2, #2]
            bool blend = true;
90001d76:	2401      	movs	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d78:	69d8      	ldr	r0, [r3, #28]
90001d7a:	4a29      	ldr	r2, [pc, #164]	; (90001e20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>)
90001d7c:	3901      	subs	r1, #1
90001d7e:	4002      	ands	r2, r0
90001d80:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90001d84:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
90001d86:	4a23      	ldr	r2, [pc, #140]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001d88:	69d3      	ldr	r3, [r2, #28]
90001d8a:	f043 0320 	orr.w	r3, r3, #32
90001d8e:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
90001d90:	69d3      	ldr	r3, [r2, #28]
90001d92:	069b      	lsls	r3, r3, #26
90001d94:	d4fc      	bmi.n	90001d90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
90001d96:	2310      	movs	r3, #16
90001d98:	6093      	str	r3, [r2, #8]
            if(blend)
90001d9a:	b324      	cbz	r4, 90001de6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18a>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d9c:	4b1e      	ldr	r3, [pc, #120]	; (90001e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
90001d9e:	6013      	str	r3, [r2, #0]
}
90001da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90001da2:	2901      	cmp	r1, #1
90001da4:	d12e      	bne.n	90001e04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001da6:	8851      	ldrh	r1, [r2, #2]
                if(blitOp.alpha == 255)
90001da8:	3cff      	subs	r4, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001daa:	69d8      	ldr	r0, [r3, #28]
90001dac:	4a1c      	ldr	r2, [pc, #112]	; (90001e20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>)
90001dae:	f101 31ff 	add.w	r1, r1, #4294967295
                if(blitOp.alpha == 255)
90001db2:	bf18      	it	ne
90001db4:	2401      	movne	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001db6:	4002      	ands	r2, r0
90001db8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90001dbc:	f042 0210 	orr.w	r2, r2, #16
90001dc0:	61da      	str	r2, [r3, #28]
                break;
90001dc2:	e7e0      	b.n	90001d86 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001dc4:	7f0a      	ldrb	r2, [r1, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
90001dc6:	45e6      	cmp	lr, ip
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001dc8:	4b12      	ldr	r3, [pc, #72]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001dca:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90001dce:	bf14      	ite	ne
90001dd0:	4a14      	ldrne	r2, [pc, #80]	; (90001e24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c8>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
90001dd2:	f240 2201 	movweq	r2, #513	; 0x201
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001dd6:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90001dda:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
90001ddc:	601a      	str	r2, [r3, #0]
}
90001dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001de0:	7f0c      	ldrb	r4, [r1, #28]
90001de2:	4a11      	ldr	r2, [pc, #68]	; (90001e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1cc>)
90001de4:	e799      	b.n	90001d1a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbe>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90001de6:	4b0f      	ldr	r3, [pc, #60]	; (90001e24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c8>)
90001de8:	6013      	str	r3, [r2, #0]
}
90001dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert(0 && "Unsupported Format!");
90001dec:	4b0f      	ldr	r3, [pc, #60]	; (90001e2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>)
90001dee:	2167      	movs	r1, #103	; 0x67
90001df0:	4a0f      	ldr	r2, [pc, #60]	; (90001e30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d4>)
90001df2:	4810      	ldr	r0, [pc, #64]	; (90001e34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001df4:	f025 f96e 	bl	900270d4 <__assert_func>
        assert(0 && "Unsupported Format!");
90001df8:	4b0c      	ldr	r3, [pc, #48]	; (90001e2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>)
90001dfa:	2188      	movs	r1, #136	; 0x88
90001dfc:	4a0e      	ldr	r2, [pc, #56]	; (90001e38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1dc>)
90001dfe:	480d      	ldr	r0, [pc, #52]	; (90001e34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001e00:	f025 f968 	bl	900270d4 <__assert_func>
                assert(0 && "Unsupported format");
90001e04:	4b0d      	ldr	r3, [pc, #52]	; (90001e3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e0>)
90001e06:	f44f 7189 	mov.w	r1, #274	; 0x112
90001e0a:	4a0d      	ldr	r2, [pc, #52]	; (90001e40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>)
90001e0c:	4809      	ldr	r0, [pc, #36]	; (90001e34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001e0e:	f025 f961 	bl	900270d4 <__assert_func>
90001e12:	bf00      	nop
90001e14:	52001000 	.word	0x52001000
90001e18:	00020201 	.word	0x00020201
90001e1c:	00020009 	.word	0x00020009
90001e20:	ffff00ef 	.word	0xffff00ef
90001e24:	00010201 	.word	0x00010201
90001e28:	0002000a 	.word	0x0002000a
90001e2c:	900288c8 	.word	0x900288c8
90001e30:	90028980 	.word	0x90028980
90001e34:	90028930 	.word	0x90028930
90001e38:	900288e4 	.word	0x900288e4
90001e3c:	900289cc 	.word	0x900289cc
90001e40:	900289e8 	.word	0x900289e8

90001e44 <DMA2D_XferCpltCallback>:
        dma.signalDMAInterrupt();
90001e44:	4b1f      	ldr	r3, [pc, #124]	; (90001ec4 <DMA2D_XferCpltCallback+0x80>)
90001e46:	4920      	ldr	r1, [pc, #128]	; (90001ec8 <DMA2D_XferCpltCallback+0x84>)
90001e48:	681b      	ldr	r3, [r3, #0]
    {
90001e4a:	b570      	push	{r4, r5, r6, lr}
90001e4c:	685c      	ldr	r4, [r3, #4]
90001e4e:	6823      	ldr	r3, [r4, #0]
90001e50:	695a      	ldr	r2, [r3, #20]
90001e52:	428a      	cmp	r2, r1
90001e54:	d125      	bne.n	90001ea2 <DMA2D_XferCpltCallback+0x5e>
        if(started_by_external_job)
90001e56:	f894 2da0 	ldrb.w	r2, [r4, #3488]	; 0xda0
90001e5a:	b942      	cbnz	r2, 90001e6e <DMA2D_XferCpltCallback+0x2a>
            executeCompleted();
90001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001e5e:	4620      	mov	r0, r4
90001e60:	4798      	blx	r3
      return count_ == 0;
90001e62:	4b1a      	ldr	r3, [pc, #104]	; (90001ecc <DMA2D_XferCpltCallback+0x88>)
            if(!external_queue.is_empty() && !isRunning)
90001e64:	68da      	ldr	r2, [r3, #12]
90001e66:	b10a      	cbz	r2, 90001e6c <DMA2D_XferCpltCallback+0x28>
90001e68:	7a22      	ldrb	r2, [r4, #8]
90001e6a:	b1f2      	cbz	r2, 90001eaa <DMA2D_XferCpltCallback+0x66>
    }
90001e6c:	bd70      	pop	{r4, r5, r6, pc}
      return count_ == 0;
90001e6e:	4b17      	ldr	r3, [pc, #92]	; (90001ecc <DMA2D_XferCpltCallback+0x88>)
90001e70:	68da      	ldr	r2, [r3, #12]
        if(!external_queue.is_empty() && isRunning)
90001e72:	2a00      	cmp	r2, #0
90001e74:	d0fa      	beq.n	90001e6c <DMA2D_XferCpltCallback+0x28>
90001e76:	7a21      	ldrb	r1, [r4, #8]
90001e78:	2900      	cmp	r1, #0
90001e7a:	d0f7      	beq.n	90001e6c <DMA2D_XferCpltCallback+0x28>
            isRunning = false;
90001e7c:	2100      	movs	r1, #0
      count_--;
90001e7e:	3a01      	subs	r2, #1
      head_ = (head_ + 1) % max_size_;
90001e80:	e9d3 5000 	ldrd	r5, r0, [r3]
            isRunning = false;
90001e84:	7221      	strb	r1, [r4, #8]
      head_ = (head_ + 1) % max_size_;
90001e86:	1c41      	adds	r1, r0, #1
      count_--;
90001e88:	60da      	str	r2, [r3, #12]
      return buffer_[head_];
90001e8a:	3002      	adds	r0, #2
      head_ = (head_ + 1) % max_size_;
90001e8c:	fbb1 f2f5 	udiv	r2, r1, r5
90001e90:	fb05 1112 	mls	r1, r5, r2, r1
            DMA2D_ExternalJobCompleted(completed_job);
90001e94:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001e98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      head_ = (head_ + 1) % max_size_;
90001e9c:	6059      	str	r1, [r3, #4]
            DMA2D_ExternalJobCompleted(completed_job);
90001e9e:	f7ff bd29 	b.w	900018f4 <DMA2D_ExternalJobCompleted>
90001ea2:	4620      	mov	r0, r4
90001ea4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90001ea8:	4710      	bx	r2
      return buffer_[head_];
90001eaa:	6858      	ldr	r0, [r3, #4]
                started_by_external_job = true;
90001eac:	2201      	movs	r2, #1
      return buffer_[head_];
90001eae:	3002      	adds	r0, #2
                started_by_external_job = true;
90001eb0:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
        isRunning = true;
90001eb4:	7222      	strb	r2, [r4, #8]
        DMA2D_CopyBuffer(job);
90001eb6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90001ebe:	f7ff bcd5 	b.w	9000186c <DMA2D_CopyBuffer>
90001ec2:	bf00      	nop
90001ec4:	24028194 	.word	0x24028194
90001ec8:	90001b41 	.word	0x90001b41
90001ecc:	24005bb4 	.word	0x24005bb4

90001ed0 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
90001ed0:	b570      	push	{r4, r5, r6, lr}
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001ed2:	4b10      	ldr	r3, [pc, #64]	; (90001f14 <_ZN8STM32DMAC1Ev+0x44>)
STM32DMA::STM32DMA()
90001ed4:	4606      	mov	r6, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001ed6:	4604      	mov	r4, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
90001ed8:	2500      	movs	r5, #0
90001eda:	300c      	adds	r0, #12
90001edc:	2260      	movs	r2, #96	; 0x60
90001ede:	7235      	strb	r5, [r6, #8]
90001ee0:	7275      	strb	r5, [r6, #9]
90001ee2:	6070      	str	r0, [r6, #4]
90001ee4:	f844 3b20 	str.w	r3, [r4], #32
90001ee8:	4621      	mov	r1, r4
90001eea:	f011 fcb7 	bl	9001385c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
90001eee:	4621      	mov	r1, r4
90001ef0:	f506 635a 	add.w	r3, r6, #3488	; 0xda0
        : color(0)
90001ef4:	60cd      	str	r5, [r1, #12]
90001ef6:	3124      	adds	r1, #36	; 0x24
90001ef8:	428b      	cmp	r3, r1
90001efa:	d1fb      	bne.n	90001ef4 <_ZN8STM32DMAC1Ev+0x24>
90001efc:	f886 5da0 	strb.w	r5, [r6, #3488]	; 0xda0
    mutexIsRunning = MUTEX_CREATE();
90001f00:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001f02:	f8c6 5da4 	str.w	r5, [r6, #3492]	; 0xda4
    mutexIsRunning = MUTEX_CREATE();
90001f06:	f00c fc0b 	bl	9000e720 <osMutexNew>
90001f0a:	4603      	mov	r3, r0
}
90001f0c:	4630      	mov	r0, r6
    mutexIsRunning = MUTEX_CREATE();
90001f0e:	f8c6 3da4 	str.w	r3, [r6, #3492]	; 0xda4
}
90001f12:	bd70      	pop	{r4, r5, r6, pc}
90001f14:	90028a30 	.word	0x90028a30

90001f18 <_ZN8touchgfx5paint8tearDownEv>:
* @brief Waits until previous DMA drawing operation has finished
*/
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
90001f18:	4a03      	ldr	r2, [pc, #12]	; (90001f28 <_ZN8touchgfx5paint8tearDownEv+0x10>)
90001f1a:	6813      	ldr	r3, [r2, #0]
90001f1c:	07db      	lsls	r3, r3, #31
90001f1e:	d4fc      	bmi.n	90001f1a <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90001f20:	2323      	movs	r3, #35	; 0x23
90001f22:	6093      	str	r3, [r2, #8]
}
90001f24:	4770      	bx	lr
90001f26:	bf00      	nop
90001f28:	52001000 	.word	0x52001000

90001f2c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
*
* @brief Renders Canvas Widget chunks using DMA.
* This functions will not generate an interrupt, and will not affect the DMA queue.
*/
void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
{
90001f2c:	b430      	push	{r4, r5}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
90001f2e:	4c11      	ldr	r4, [pc, #68]	; (90001f74 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x48>)
90001f30:	6825      	ldr	r5, [r4, #0]
90001f32:	07ed      	lsls	r5, r5, #31
90001f34:	d4fc      	bmi.n	90001f30 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90001f36:	2523      	movs	r5, #35	; 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
90001f38:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
90001f3a:	2bff      	cmp	r3, #255	; 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90001f3c:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
90001f3e:	f041 0101 	orr.w	r1, r1, #1
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001f42:	f04f 0502 	mov.w	r5, #2
90001f46:	6365      	str	r5, [r4, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
90001f48:	6461      	str	r1, [r4, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
90001f4a:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (alpha < 0xFF)
90001f4c:	d00b      	beq.n	90001f66 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x3a>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001f4e:	490a      	ldr	r1, [pc, #40]	; (90001f78 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4c>)
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001f50:	6265      	str	r5, [r4, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001f52:	ea41 6303 	orr.w	r3, r1, r3, lsl #24

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
90001f56:	4909      	ldr	r1, [pc, #36]	; (90001f7c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x50>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001f58:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->FGCOLR, color);
90001f5a:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
90001f5c:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
90001f5e:	60e0      	str	r0, [r4, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
90001f60:	6021      	str	r1, [r4, #0]
        WRITE_REG(DMA2D->OCOLR, color565);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
    }
}
90001f62:	bc30      	pop	{r4, r5}
90001f64:	4770      	bx	lr
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
90001f66:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->OCOLR, color565);
90001f68:	9a02      	ldr	r2, [sp, #8]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
90001f6a:	4b05      	ldr	r3, [pc, #20]	; (90001f80 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x54>)
        WRITE_REG(DMA2D->OCOLR, color565);
90001f6c:	63a2      	str	r2, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
90001f6e:	6023      	str	r3, [r4, #0]
}
90001f70:	bc30      	pop	{r4, r5}
90001f72:	4770      	bx	lr
90001f74:	52001000 	.word	0x52001000
90001f78:	00010009 	.word	0x00010009
90001f7c:	00020001 	.word	0x00020001
90001f80:	00030001 	.word	0x00030001

90001f84 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
90001f84:	2001      	movs	r0, #1
90001f86:	4770      	bx	lr

90001f88 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
90001f88:	2040      	movs	r0, #64	; 0x40
90001f8a:	4770      	bx	lr

90001f8c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
90001f8c:	eb00 1081 	add.w	r0, r0, r1, lsl #6
    }
90001f90:	3008      	adds	r0, #8
90001f92:	4770      	bx	lr

90001f94 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
90001f94:	eb00 1081 	add.w	r0, r0, r1, lsl #6
    }
90001f98:	3008      	adds	r0, #8
90001f9a:	4770      	bx	lr

90001f9c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90001f9c:	2001      	movs	r0, #1
90001f9e:	4770      	bx	lr

90001fa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
90001fa0:	f242 0014 	movw	r0, #8212	; 0x2014
90001fa4:	4770      	bx	lr
90001fa6:	bf00      	nop

90001fa8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001fa8:	f242 0314 	movw	r3, #8212	; 0x2014
90001fac:	fb03 0001 	mla	r0, r3, r1, r0
    }
90001fb0:	3008      	adds	r0, #8
90001fb2:	4770      	bx	lr

90001fb4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001fb4:	f242 0314 	movw	r3, #8212	; 0x2014
90001fb8:	fb03 0001 	mla	r0, r3, r1, r0
    }
90001fbc:	3008      	adds	r0, #8
90001fbe:	4770      	bx	lr

90001fc0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90001fc0:	2001      	movs	r0, #1
90001fc2:	4770      	bx	lr

90001fc4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
90001fc4:	2010      	movs	r0, #16
90001fc6:	4770      	bx	lr

90001fc8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001fc8:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
90001fcc:	3008      	adds	r0, #8
90001fce:	4770      	bx	lr

90001fd0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001fd0:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
90001fd4:	3008      	adds	r0, #8
90001fd6:	4770      	bx	lr

90001fd8 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
90001fd8:	4608      	mov	r0, r1
90001fda:	f003 bc8f 	b.w	900058fc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
90001fde:	bf00      	nop

90001fe0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
90001fe0:	4b03      	ldr	r3, [pc, #12]	; (90001ff0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
90001fe2:	b510      	push	{r4, lr}
90001fe4:	4604      	mov	r4, r0
90001fe6:	6003      	str	r3, [r0, #0]
90001fe8:	f010 fa8d 	bl	90012506 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001fec:	4620      	mov	r0, r4
90001fee:	bd10      	pop	{r4, pc}
90001ff0:	90028ae8 	.word	0x90028ae8

90001ff4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
90001ff4:	4b05      	ldr	r3, [pc, #20]	; (9000200c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev+0x18>)
90001ff6:	b510      	push	{r4, lr}
90001ff8:	4604      	mov	r4, r0
90001ffa:	6003      	str	r3, [r0, #0]
90001ffc:	f010 fa83 	bl	90012506 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002000:	2148      	movs	r1, #72	; 0x48
90002002:	4620      	mov	r0, r4
90002004:	f025 f837 	bl	90027076 <_ZdlPvj>
90002008:	4620      	mov	r0, r4
9000200a:	bd10      	pop	{r4, pc}
9000200c:	90028ae8 	.word	0x90028ae8

90002010 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
90002010:	4b03      	ldr	r3, [pc, #12]	; (90002020 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90002012:	b510      	push	{r4, lr}
90002014:	4604      	mov	r4, r0
90002016:	6003      	str	r3, [r0, #0]
90002018:	f010 fa75 	bl	90012506 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000201c:	4620      	mov	r0, r4
9000201e:	bd10      	pop	{r4, pc}
90002020:	90028ab4 	.word	0x90028ab4

90002024 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
90002024:	4b06      	ldr	r3, [pc, #24]	; (90002040 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x1c>)
90002026:	b510      	push	{r4, lr}
90002028:	4604      	mov	r4, r0
9000202a:	6003      	str	r3, [r0, #0]
9000202c:	f010 fa6b 	bl	90012506 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002030:	f242 011c 	movw	r1, #8220	; 0x201c
90002034:	4620      	mov	r0, r4
90002036:	f025 f81e 	bl	90027076 <_ZdlPvj>
9000203a:	4620      	mov	r0, r4
9000203c:	bd10      	pop	{r4, pc}
9000203e:	bf00      	nop
90002040:	90028ab4 	.word	0x90028ab4

90002044 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
90002044:	4b03      	ldr	r3, [pc, #12]	; (90002054 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90002046:	b510      	push	{r4, lr}
90002048:	4604      	mov	r4, r0
9000204a:	6003      	str	r3, [r0, #0]
9000204c:	f010 fa5b 	bl	90012506 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002050:	4620      	mov	r0, r4
90002052:	bd10      	pop	{r4, pc}
90002054:	90028a80 	.word	0x90028a80

90002058 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
90002058:	4b05      	ldr	r3, [pc, #20]	; (90002070 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
9000205a:	b510      	push	{r4, lr}
9000205c:	4604      	mov	r4, r0
9000205e:	6003      	str	r3, [r0, #0]
90002060:	f010 fa51 	bl	90012506 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002064:	2118      	movs	r1, #24
90002066:	4620      	mov	r0, r4
90002068:	f025 f805 	bl	90027076 <_ZdlPvj>
9000206c:	4620      	mov	r0, r4
9000206e:	bd10      	pop	{r4, pc}
90002070:	90028a80 	.word	0x90028a80

90002074 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
90002074:	b510      	push	{r4, lr}
90002076:	4604      	mov	r4, r0
90002078:	490c      	ldr	r1, [pc, #48]	; (900020ac <_ZN12FrontendHeapD1Ev+0x38>)
9000207a:	4a0d      	ldr	r2, [pc, #52]	; (900020b0 <_ZN12FrontendHeapD1Ev+0x3c>)
9000207c:	f242 0048 	movw	r0, #8264	; 0x2048
90002080:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
90002084:	6021      	str	r1, [r4, #0]
90002086:	4420      	add	r0, r4
90002088:	649a      	str	r2, [r3, #72]	; 0x48
9000208a:	f010 fa3c 	bl	90012506 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000208e:	4620      	mov	r0, r4
90002090:	4b08      	ldr	r3, [pc, #32]	; (900020b4 <_ZN12FrontendHeapD1Ev+0x40>)
90002092:	f840 3f2c 	str.w	r3, [r0, #44]!
90002096:	f010 fa36 	bl	90012506 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000209a:	4620      	mov	r0, r4
9000209c:	4b06      	ldr	r3, [pc, #24]	; (900020b8 <_ZN12FrontendHeapD1Ev+0x44>)
9000209e:	f840 3f14 	str.w	r3, [r0, #20]!
900020a2:	f010 fa30 	bl	90012506 <_ZN8touchgfx17AbstractPartitionD1Ev>
900020a6:	4620      	mov	r0, r4
900020a8:	bd10      	pop	{r4, pc}
900020aa:	bf00      	nop
900020ac:	90028b1c 	.word	0x90028b1c
900020b0:	90028ae8 	.word	0x90028ae8
900020b4:	90028ab4 	.word	0x90028ab4
900020b8:	90028a80 	.word	0x90028a80

900020bc <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
900020bc:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
900020be:	4c0c      	ldr	r4, [pc, #48]	; (900020f0 <__tcf_0+0x34>)
900020c0:	4a0c      	ldr	r2, [pc, #48]	; (900020f4 <__tcf_0+0x38>)
900020c2:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
900020c6:	490c      	ldr	r1, [pc, #48]	; (900020f8 <__tcf_0+0x3c>)
900020c8:	480c      	ldr	r0, [pc, #48]	; (900020fc <__tcf_0+0x40>)
900020ca:	649a      	str	r2, [r3, #72]	; 0x48
900020cc:	6021      	str	r1, [r4, #0]
900020ce:	f010 fa1a 	bl	90012506 <_ZN8touchgfx17AbstractPartitionD1Ev>
900020d2:	4620      	mov	r0, r4
900020d4:	4b0a      	ldr	r3, [pc, #40]	; (90002100 <__tcf_0+0x44>)
900020d6:	f840 3f2c 	str.w	r3, [r0, #44]!
900020da:	f010 fa14 	bl	90012506 <_ZN8touchgfx17AbstractPartitionD1Ev>
900020de:	4620      	mov	r0, r4
900020e0:	4b08      	ldr	r3, [pc, #32]	; (90002104 <__tcf_0+0x48>)
        static FrontendHeap instance;
900020e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900020e6:	f840 3f14 	str.w	r3, [r0, #20]!
900020ea:	f010 ba0c 	b.w	90012506 <_ZN8touchgfx17AbstractPartitionD1Ev>
900020ee:	bf00      	nop
900020f0:	24005be8 	.word	0x24005be8
900020f4:	90028ae8 	.word	0x90028ae8
900020f8:	90028b1c 	.word	0x90028b1c
900020fc:	24007c30 	.word	0x24007c30
90002100:	90028ab4 	.word	0x90028ab4
90002104:	90028a80 	.word	0x90028a80

90002108 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
90002108:	b510      	push	{r4, lr}
9000210a:	4604      	mov	r4, r0
9000210c:	4a0e      	ldr	r2, [pc, #56]	; (90002148 <_ZN12FrontendHeapD0Ev+0x40>)
9000210e:	490f      	ldr	r1, [pc, #60]	; (9000214c <_ZN12FrontendHeapD0Ev+0x44>)
90002110:	f242 0048 	movw	r0, #8264	; 0x2048
90002114:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
90002118:	6021      	str	r1, [r4, #0]
9000211a:	4420      	add	r0, r4
9000211c:	649a      	str	r2, [r3, #72]	; 0x48
9000211e:	f010 f9f2 	bl	90012506 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002122:	4620      	mov	r0, r4
90002124:	4b0a      	ldr	r3, [pc, #40]	; (90002150 <_ZN12FrontendHeapD0Ev+0x48>)
90002126:	f840 3f2c 	str.w	r3, [r0, #44]!
9000212a:	f010 f9ec 	bl	90012506 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000212e:	4b09      	ldr	r3, [pc, #36]	; (90002154 <_ZN12FrontendHeapD0Ev+0x4c>)
90002130:	4620      	mov	r0, r4
90002132:	f840 3f14 	str.w	r3, [r0, #20]!
90002136:	f010 f9e6 	bl	90012506 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000213a:	4620      	mov	r0, r4
9000213c:	f242 2104 	movw	r1, #8708	; 0x2204
90002140:	f024 ff99 	bl	90027076 <_ZdlPvj>
90002144:	4620      	mov	r0, r4
90002146:	bd10      	pop	{r4, pc}
90002148:	90028ae8 	.word	0x90028ae8
9000214c:	90028b1c 	.word	0x90028b1c
90002150:	90028ab4 	.word	0x90028ab4
90002154:	90028a80 	.word	0x90028a80

90002158 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
90002158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000215c:	b082      	sub	sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
9000215e:	2400      	movs	r4, #0
90002160:	f002 fe82 	bl	90004e68 <_ZN14BitmapDatabase11getInstanceEv>
90002164:	4605      	mov	r5, r0
90002166:	f002 fe83 	bl	90004e70 <_ZN14BitmapDatabase15getInstanceSizeEv>
9000216a:	4623      	mov	r3, r4
9000216c:	4601      	mov	r1, r0
9000216e:	4622      	mov	r2, r4
90002170:	4628      	mov	r0, r5
90002172:	9400      	str	r4, [sp, #0]
90002174:	f018 fe68 	bl	9001ae48 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
90002178:	4b28      	ldr	r3, [pc, #160]	; (9000221c <touchgfx_init+0xc4>)
9000217a:	4a29      	ldr	r2, [pc, #164]	; (90002220 <touchgfx_init+0xc8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
9000217c:	4620      	mov	r0, r4
        static FrontendHeap instance;
9000217e:	4c29      	ldr	r4, [pc, #164]	; (90002224 <touchgfx_init+0xcc>)
90002180:	601a      	str	r2, [r3, #0]
90002182:	f005 fd99 	bl	90007cb8 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
90002186:	4828      	ldr	r0, [pc, #160]	; (90002228 <touchgfx_init+0xd0>)
90002188:	f018 fdc6 	bl	9001ad18 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
9000218c:	6823      	ldr	r3, [r4, #0]
9000218e:	f3bf 8f5b 	dmb	ish
90002192:	07db      	lsls	r3, r3, #31
90002194:	d505      	bpl.n	900021a2 <touchgfx_init+0x4a>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
90002196:	4825      	ldr	r0, [pc, #148]	; (9000222c <touchgfx_init+0xd4>)
}
90002198:	b002      	add	sp, #8
9000219a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
9000219e:	f7fe bb9d 	b.w	900008dc <_ZN11TouchGFXHAL10initializeEv>
900021a2:	4620      	mov	r0, r4
900021a4:	f024 ff69 	bl	9002707a <__cxa_guard_acquire>
900021a8:	2800      	cmp	r0, #0
900021aa:	d0f4      	beq.n	90002196 <touchgfx_init+0x3e>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
900021ac:	4d20      	ldr	r5, [pc, #128]	; (90002230 <touchgfx_init+0xd8>)
          screenStorage(scr),
          transitionStorage(tra),
900021ae:	4f21      	ldr	r7, [pc, #132]	; (90002234 <touchgfx_init+0xdc>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
900021b0:	4b21      	ldr	r3, [pc, #132]	; (90002238 <touchgfx_init+0xe0>)
        : presenterStorage(pres),
900021b2:	f105 0014 	add.w	r0, r5, #20
          frontendApplication(app)
900021b6:	f107 0660 	add.w	r6, r7, #96	; 0x60
          screenStorage(scr),
900021ba:	f105 082c 	add.w	r8, r5, #44	; 0x2c
900021be:	602b      	str	r3, [r5, #0]
          transitionStorage(tra),
900021c0:	60ef      	str	r7, [r5, #12]
        : presenterStorage(pres),
900021c2:	6068      	str	r0, [r5, #4]
          frontendApplication(app)
900021c4:	612e      	str	r6, [r5, #16]
          screenStorage(scr),
900021c6:	f8c5 8008 	str.w	r8, [r5, #8]
900021ca:	f010 f99d 	bl	90012508 <_ZN8touchgfx17AbstractPartitionC1Ev>
900021ce:	4b1b      	ldr	r3, [pc, #108]	; (9000223c <touchgfx_init+0xe4>)
900021d0:	4640      	mov	r0, r8
900021d2:	616b      	str	r3, [r5, #20]
900021d4:	f010 f998 	bl	90012508 <_ZN8touchgfx17AbstractPartitionC1Ev>
900021d8:	4b19      	ldr	r3, [pc, #100]	; (90002240 <touchgfx_init+0xe8>)
900021da:	4638      	mov	r0, r7
900021dc:	62eb      	str	r3, [r5, #44]	; 0x2c
900021de:	f010 f993 	bl	90012508 <_ZN8touchgfx17AbstractPartitionC1Ev>
900021e2:	f505 5300 	add.w	r3, r5, #8192	; 0x2000
900021e6:	4a17      	ldr	r2, [pc, #92]	; (90002244 <touchgfx_init+0xec>)
900021e8:	f103 0090 	add.w	r0, r3, #144	; 0x90
900021ec:	649a      	str	r2, [r3, #72]	; 0x48
900021ee:	f005 fded 	bl	90007dcc <_ZN5ModelC1Ev>
900021f2:	462a      	mov	r2, r5
900021f4:	f107 0148 	add.w	r1, r7, #72	; 0x48
900021f8:	4630      	mov	r0, r6
900021fa:	f005 fdd3 	bl	90007da4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
900021fe:	4630      	mov	r0, r6
90002200:	f003 fb7c 	bl	900058fc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
90002204:	4810      	ldr	r0, [pc, #64]	; (90002248 <touchgfx_init+0xf0>)
90002206:	f024 ff83 	bl	90027110 <atexit>
9000220a:	4620      	mov	r0, r4
9000220c:	f024 ff41 	bl	90027092 <__cxa_guard_release>
90002210:	4806      	ldr	r0, [pc, #24]	; (9000222c <touchgfx_init+0xd4>)
}
90002212:	b002      	add	sp, #8
90002214:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
90002218:	f7fe bb60 	b.w	900008dc <_ZN11TouchGFXHAL10initializeEv>
9000221c:	240281f8 	.word	0x240281f8
90002220:	24008c20 	.word	0x24008c20
90002224:	24005be4 	.word	0x24005be4
90002228:	24000020 	.word	0x24000020
9000222c:	24008b98 	.word	0x24008b98
90002230:	24005be8 	.word	0x24005be8
90002234:	24007c30 	.word	0x24007c30
90002238:	90028b1c 	.word	0x90028b1c
9000223c:	90028a80 	.word	0x90028a80
90002240:	90028ab4 	.word	0x90028ab4
90002244:	90028ae8 	.word	0x90028ae8
90002248:	900020bd 	.word	0x900020bd

9000224c <touchgfx_components_init>:

void touchgfx_components_init()
{
}
9000224c:	4770      	bx	lr
9000224e:	bf00      	nop

90002250 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
90002250:	4801      	ldr	r0, [pc, #4]	; (90002258 <touchgfx_taskEntry+0x8>)
90002252:	f7fe bb09 	b.w	90000868 <_ZN11TouchGFXHAL9taskEntryEv>
90002256:	bf00      	nop
90002258:	24008b98 	.word	0x24008b98

9000225c <_GLOBAL__sub_I_touchgfx_init>:
}
9000225c:	b570      	push	{r4, r5, r6, lr}
{
public:

    STM32TouchController() {}
9000225e:	4b26      	ldr	r3, [pc, #152]	; (900022f8 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
90002260:	4c26      	ldr	r4, [pc, #152]	; (900022fc <_GLOBAL__sub_I_touchgfx_init+0xa0>)
static STM32DMA dma;
90002262:	4e27      	ldr	r6, [pc, #156]	; (90002300 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
static LCD16bpp display;
90002264:	4d27      	ldr	r5, [pc, #156]	; (90002304 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
90002266:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
90002268:	4630      	mov	r0, r6
9000226a:	f7ff fe31 	bl	90001ed0 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
9000226e:	4628      	mov	r0, r5
90002270:	f01b fef4 	bl	9001e05c <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
90002274:	4b24      	ldr	r3, [pc, #144]	; (90002308 <_GLOBAL__sub_I_touchgfx_init+0xac>)
          mcuInstrumentation(0),
90002276:	2200      	movs	r2, #0
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
90002278:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
9000227c:	f44f 7188 	mov.w	r1, #272	; 0x110
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
90002280:	62da      	str	r2, [r3, #44]	; 0x2c
90002282:	861a      	strh	r2, [r3, #48]	; 0x30
          vSyncCompensationEnabled(false),
90002284:	669a      	str	r2, [r3, #104]	; 0x68
          updateMCULoad(0),
90002286:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
          cc_begin(0),
9000228a:	671a      	str	r2, [r3, #112]	; 0x70
          mcuInstrumentation(0),
9000228c:	e9c3 4203 	strd	r4, r2, [r3, #12]
          touchSampleRate(1),
90002290:	4c1e      	ldr	r4, [pc, #120]	; (9000230c <_GLOBAL__sub_I_touchgfx_init+0xb0>)
90002292:	665c      	str	r4, [r3, #100]	; 0x64
          requestedOrientation(ORIENTATION_LANDSCAPE),
90002294:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
90002298:	675c      	str	r4, [r3, #116]	; 0x74
          lastRenderMethod(HARDWARE)
9000229a:	2401      	movs	r4, #1
9000229c:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
        instance = this;
900022a0:	4c1b      	ldr	r4, [pc, #108]	; (90002310 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
900022a2:	6023      	str	r3, [r4, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
900022a4:	4c1b      	ldr	r4, [pc, #108]	; (90002314 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
900022a6:	8020      	strh	r0, [r4, #0]
900022a8:	4c1b      	ldr	r4, [pc, #108]	; (90002318 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
          lcdRef(display),
900022aa:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
900022ae:	8020      	strh	r0, [r4, #0]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
900022b0:	f44f 7580 	mov.w	r5, #256	; 0x100
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
900022b4:	4c19      	ldr	r4, [pc, #100]	; (9000231c <_GLOBAL__sub_I_touchgfx_init+0xc0>)
900022b6:	481a      	ldr	r0, [pc, #104]	; (90002320 <_GLOBAL__sub_I_touchgfx_init+0xc4>)
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
900022b8:	649d      	str	r5, [r3, #72]	; 0x48
          frameBufferAllocator(0),
900022ba:	e9c3 2205 	strd	r2, r2, [r3, #20]
            : startX(0),
900022be:	e9c3 2207 	strd	r2, r2, [r3, #28]
        : drag(), listener(0), dragThresholdValue(0)
900022c2:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
          frameBuffer0(0),
900022c6:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
          frameBuffer2(0),
900022ca:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
900022ce:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
          listener(0),
900022d2:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
          lastY(0),
900022d6:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
900022da:	8021      	strh	r1, [r4, #0]
900022dc:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
900022de:	4c11      	ldr	r4, [pc, #68]	; (90002324 <_GLOBAL__sub_I_touchgfx_init+0xc8>)
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
900022e0:	4811      	ldr	r0, [pc, #68]	; (90002328 <_GLOBAL__sub_I_touchgfx_init+0xcc>)
900022e2:	4912      	ldr	r1, [pc, #72]	; (9000232c <_GLOBAL__sub_I_touchgfx_init+0xd0>)
        : cc_consumed(0),
900022e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
900022e8:	7022      	strb	r2, [r4, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
900022ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
900022ee:	6018      	str	r0, [r3, #0]
          cc_in(0)
900022f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
900022f4:	67d9      	str	r1, [r3, #124]	; 0x7c
}
900022f6:	bd70      	pop	{r4, r5, r6, pc}
900022f8:	90028204 	.word	0x90028204
900022fc:	24007dec 	.word	0x24007dec
90002300:	24007df0 	.word	0x24007df0
90002304:	24008c24 	.word	0x24008c24
90002308:	24008b98 	.word	0x24008b98
9000230c:	01000001 	.word	0x01000001
90002310:	24028194 	.word	0x24028194
90002314:	24028188 	.word	0x24028188
90002318:	2402818e 	.word	0x2402818e
9000231c:	2402818a 	.word	0x2402818a
90002320:	24028190 	.word	0x24028190
90002324:	2402818c 	.word	0x2402818c
90002328:	90028394 	.word	0x90028394
9000232c:	900281dc 	.word	0x900281dc

90002330 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
90002330:	4801      	ldr	r0, [pc, #4]	; (90002338 <_GLOBAL__sub_D_touchgfx_init+0x8>)
90002332:	f7ff bb7b 	b.w	90001a2c <_ZN8STM32DMAD1Ev>
90002336:	bf00      	nop
90002338:	24007df0 	.word	0x24007df0

9000233c <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * drawn by the widget.
     */
    virtual void invalidateContent() const
    {
        // Consider checking if *this is in the draw chain
        if (visible)
9000233c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90002340:	b112      	cbz	r2, 90002348 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
        {
            invalidate();
90002342:	6803      	ldr	r3, [r0, #0]
90002344:	695b      	ldr	r3, [r3, #20]
90002346:	4718      	bx	r3
        }
    }
90002348:	4770      	bx	lr
9000234a:	bf00      	nop

9000234c <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
9000234c:	2000      	movs	r0, #0
9000234e:	4770      	bx	lr

90002350 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
90002350:	8081      	strh	r1, [r0, #4]
    }
90002352:	4770      	bx	lr

90002354 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
90002354:	80c1      	strh	r1, [r0, #6]
    }
90002356:	4770      	bx	lr

90002358 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
90002358:	8101      	strh	r1, [r0, #8]
    }
9000235a:	4770      	bx	lr

9000235c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
9000235c:	8141      	strh	r1, [r0, #10]
    }
9000235e:	4770      	bx	lr

90002360 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
90002360:	4770      	bx	lr
90002362:	bf00      	nop

90002364 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
90002364:	4770      	bx	lr
90002366:	bf00      	nop

90002368 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
90002368:	4770      	bx	lr
9000236a:	bf00      	nop

9000236c <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
9000236c:	4770      	bx	lr
9000236e:	bf00      	nop

90002370 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
90002370:	4770      	bx	lr
90002372:	bf00      	nop

90002374 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
    {
        moveRelative(x - rect.x, y - rect.y);
90002374:	f8b0 c006 	ldrh.w	ip, [r0, #6]
90002378:	6803      	ldr	r3, [r0, #0]
9000237a:	eba2 020c 	sub.w	r2, r2, ip
9000237e:	f8b0 c004 	ldrh.w	ip, [r0, #4]
90002382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002384:	eba1 010c 	sub.w	r1, r1, ip
90002388:	b212      	sxth	r2, r2
9000238a:	b209      	sxth	r1, r1
9000238c:	4718      	bx	r3
9000238e:	bf00      	nop

90002390 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
90002390:	6813      	ldr	r3, [r2, #0]
        cachedVisibleRect.x = UNCACHED_INDICATOR;
90002392:	f64f 7cff 	movw	ip, #65535	; 0xffff
        cachedAbsX = UNCACHED_INDICATOR;
90002396:	f04f 31ff 	mov.w	r1, #4294967295
        cachedVisibleRect.x = UNCACHED_INDICATOR;
9000239a:	f8a0 c00c 	strh.w	ip, [r0, #12]
        nextDrawChainElement = *nextPreviousElement;
9000239e:	e9c0 3107 	strd	r3, r1, [r0, #28]
        *nextPreviousElement = this;
900023a2:	6010      	str	r0, [r2, #0]
    }
900023a4:	4770      	bx	lr
900023a6:	bf00      	nop

900023a8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
900023a8:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900023ac:	b11a      	cbz	r2, 900023b6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
900023ae:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
900023b2:	b102      	cbz	r2, 900023b6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
900023b4:	6018      	str	r0, [r3, #0]
        }
    }
900023b6:	4770      	bx	lr

900023b8 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
900023b8:	2000      	movs	r0, #0
900023ba:	4770      	bx	lr

900023bc <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
900023bc:	4603      	mov	r3, r0
    {
        widgetWidth = widgetRect.width;
900023be:	888a      	ldrh	r2, [r1, #4]
        return true;
    }
900023c0:	2001      	movs	r0, #1
        widgetWidth = widgetRect.width;
900023c2:	809a      	strh	r2, [r3, #4]
    }
900023c4:	4770      	bx	lr
900023c6:	bf00      	nop

900023c8 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
900023c8:	4770      	bx	lr
900023ca:	bf00      	nop

900023cc <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
900023cc:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    }
900023d0:	4770      	bx	lr
900023d2:	bf00      	nop

900023d4 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
900023d4:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
900023d8:	4770      	bx	lr
900023da:	bf00      	nop

900023dc <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900023dc:	f04f 0c00 	mov.w	ip, #0
        return rect.width;
900023e0:	688a      	ldr	r2, [r1, #8]
900023e2:	f8c0 c000 	str.w	ip, [r0]
900023e6:	6042      	str	r2, [r0, #4]
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
900023e8:	4770      	bx	lr
900023ea:	bf00      	nop

900023ec <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
900023ec:	2200      	movs	r2, #0
900023ee:	6002      	str	r2, [r0, #0]
900023f0:	6042      	str	r2, [r0, #4]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
900023f2:	4770      	bx	lr

900023f4 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
    }

    virtual Bitmap::BitmapFormat framebufferFormat() const
    {
        return Bitmap::RGB565;
    }
900023f4:	2000      	movs	r0, #0
900023f6:	4770      	bx	lr

900023f8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900023f8:	4b03      	ldr	r3, [pc, #12]	; (90002408 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
900023fa:	2290      	movs	r2, #144	; 0x90
900023fc:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
90002400:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
90002404:	4770      	bx	lr
90002406:	bf00      	nop
90002408:	e000e100 	.word	0xe000e100

9000240c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
9000240c:	4a09      	ldr	r2, [pc, #36]	; (90002434 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
9000240e:	490a      	ldr	r1, [pc, #40]	; (90002438 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
90002410:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
90002412:	480a      	ldr	r0, [pc, #40]	; (9000243c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
90002414:	f3c3 030a 	ubfx	r3, r3, #0, #11
90002418:	3b01      	subs	r3, #1
9000241a:	b29b      	uxth	r3, r3
9000241c:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
9000241e:	6911      	ldr	r1, [r2, #16]
90002420:	f3c1 010a 	ubfx	r1, r1, #0, #11
90002424:	3901      	subs	r1, #1
90002426:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
90002428:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
9000242a:	6b53      	ldr	r3, [r2, #52]	; 0x34
9000242c:	f043 0301 	orr.w	r3, r3, #1
90002430:	6353      	str	r3, [r2, #52]	; 0x34
}
90002432:	4770      	bx	lr
90002434:	50001000 	.word	0x50001000
90002438:	24008ca0 	.word	0x24008ca0
9000243c:	24008c9e 	.word	0x24008c9e

90002440 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    videoController.endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
90002440:	4b01      	ldr	r3, [pc, #4]	; (90002448 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
90002442:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
90002446:	4770      	bx	lr
90002448:	50001000 	.word	0x50001000

9000244c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
9000244c:	4b02      	ldr	r3, [pc, #8]	; (90002458 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
9000244e:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
90002450:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
90002454:	625a      	str	r2, [r3, #36]	; 0x24
}
90002456:	4770      	bx	lr
90002458:	50001000 	.word	0x50001000

9000245c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
9000245c:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
        topBufferRGB = bufferRGB;
90002460:	6381      	str	r1, [r0, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
    }
90002462:	4770      	bx	lr

90002464 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
90002464:	4770      	bx	lr
90002466:	bf00      	nop

90002468 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
90002468:	eb00 0081 	add.w	r0, r0, r1, lsl #2
9000246c:	4611      	mov	r1, r2
9000246e:	6840      	ldr	r0, [r0, #4]
90002470:	6803      	ldr	r3, [r0, #0]
90002472:	68db      	ldr	r3, [r3, #12]
90002474:	4718      	bx	r3
90002476:	bf00      	nop

90002478 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
90002478:	b510      	push	{r4, lr}
9000247a:	4604      	mov	r4, r0
9000247c:	2148      	movs	r1, #72	; 0x48
9000247e:	f024 fdfa 	bl	90027076 <_ZdlPvj>
90002482:	4620      	mov	r0, r4
90002484:	bd10      	pop	{r4, pc}
90002486:	bf00      	nop

90002488 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    virtual bool getIsPlaying(const Handle handle)
    {
        assert(handle < no_streams);
90002488:	b911      	cbnz	r1, 90002490 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x8>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
9000248a:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
9000248e:	4770      	bx	lr
    virtual bool getIsPlaying(const Handle handle)
90002490:	b508      	push	{r3, lr}
        assert(handle < no_streams);
90002492:	4a03      	ldr	r2, [pc, #12]	; (900024a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
90002494:	f44f 71b8 	mov.w	r1, #368	; 0x170
90002498:	4b02      	ldr	r3, [pc, #8]	; (900024a4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
9000249a:	4803      	ldr	r0, [pc, #12]	; (900024a8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
9000249c:	f024 fe1a 	bl	900270d4 <__assert_func>
900024a0:	90028b3c 	.word	0x90028b3c
900024a4:	90028b28 	.word	0x90028b28
900024a8:	90028cc8 	.word	0x90028cc8

900024ac <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
        assert(handle < no_streams);
900024ac:	b921      	cbnz	r1, 900024b8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0xc>
        mjpegDecoders[handle]->getVideoInfo(data);
900024ae:	6840      	ldr	r0, [r0, #4]
900024b0:	4611      	mov	r1, r2
900024b2:	6803      	ldr	r3, [r0, #0]
900024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900024b6:	4718      	bx	r3
        assert(handle < no_streams);
900024b8:	4b03      	ldr	r3, [pc, #12]	; (900024c8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x1c>)
900024ba:	f44f 71b5 	mov.w	r1, #362	; 0x16a
900024be:	4a03      	ldr	r2, [pc, #12]	; (900024cc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
900024c0:	4803      	ldr	r0, [pc, #12]	; (900024d0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
900024c2:	b510      	push	{r4, lr}
        assert(handle < no_streams);
900024c4:	f024 fe06 	bl	900270d4 <__assert_func>
900024c8:	90028b28 	.word	0x90028b28
900024cc:	90028d0c 	.word	0x90028d0c
900024d0:	90028cc8 	.word	0x90028cc8

900024d4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
        assert(handle < no_streams);
900024d4:	b909      	cbnz	r1, 900024da <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x6>
    }
900024d6:	68c0      	ldr	r0, [r0, #12]
900024d8:	4770      	bx	lr
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
900024da:	b508      	push	{r3, lr}
        assert(handle < no_streams);
900024dc:	4a02      	ldr	r2, [pc, #8]	; (900024e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
900024de:	2179      	movs	r1, #121	; 0x79
900024e0:	4b02      	ldr	r3, [pc, #8]	; (900024ec <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
900024e2:	4803      	ldr	r0, [pc, #12]	; (900024f0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
900024e4:	f024 fdf6 	bl	900270d4 <__assert_func>
900024e8:	90028ebc 	.word	0x90028ebc
900024ec:	90028b28 	.word	0x90028b28
900024f0:	90028cc8 	.word	0x90028cc8

900024f4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
900024f4:	b510      	push	{r4, lr}
        assert(handle < no_streams);
900024f6:	460c      	mov	r4, r1
900024f8:	b949      	cbnz	r1, 9000250e <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x1a>
900024fa:	4611      	mov	r1, r2
900024fc:	461a      	mov	r2, r3
        mjpegDecoders[handle]->setVideoData(movie, length);
900024fe:	6843      	ldr	r3, [r0, #4]
        stream.frameNumber = 0;
90002500:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
90002502:	681c      	ldr	r4, [r3, #0]
90002504:	4618      	mov	r0, r3
90002506:	68a3      	ldr	r3, [r4, #8]
    }
90002508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
9000250c:	4718      	bx	r3
        assert(handle < no_streams);
9000250e:	4b03      	ldr	r3, [pc, #12]	; (9000251c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x28>)
90002510:	2190      	movs	r1, #144	; 0x90
90002512:	4a03      	ldr	r2, [pc, #12]	; (90002520 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x2c>)
90002514:	4803      	ldr	r0, [pc, #12]	; (90002524 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x30>)
90002516:	f024 fddd 	bl	900270d4 <__assert_func>
9000251a:	bf00      	nop
9000251c:	90028b28 	.word	0x90028b28
90002520:	90029070 	.word	0x90029070
90002524:	90028cc8 	.word	0x90028cc8

90002528 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
        assert(handle < no_streams);
90002528:	b921      	cbnz	r1, 90002534 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0xc>
        stream.tickCount = 0;
9000252a:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
9000252e:	e9c0 3206 	strd	r3, r2, [r0, #24]
90002532:	4770      	bx	lr
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
90002534:	b508      	push	{r3, lr}
        assert(handle < no_streams);
90002536:	4a03      	ldr	r2, [pc, #12]	; (90002544 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
90002538:	2182      	movs	r1, #130	; 0x82
9000253a:	4b03      	ldr	r3, [pc, #12]	; (90002548 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
9000253c:	4803      	ldr	r0, [pc, #12]	; (9000254c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
9000253e:	f024 fdc9 	bl	900270d4 <__assert_func>
90002542:	bf00      	nop
90002544:	9002924c 	.word	0x9002924c
90002548:	90028b28 	.word	0x90028b28
9000254c:	90028cc8 	.word	0x90028cc8

90002550 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
90002550:	f010 babc 	b.w	90012acc <_ZN8touchgfx3HAL10beginFrameEv>

90002554 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
90002554:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
{
90002558:	b510      	push	{r4, lr}
    if (frameBufferUpdatedThisFrame)
9000255a:	b113      	cbz	r3, 90002562 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xe>
        refreshRequested = true;
9000255c:	4b1a      	ldr	r3, [pc, #104]	; (900025c8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x74>)
9000255e:	2201      	movs	r2, #1
90002560:	701a      	strb	r2, [r3, #0]
            if (stream.isPlaying || stream.isShowingOneFrame)
90002562:	4c1a      	ldr	r4, [pc, #104]	; (900025cc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x78>)
    HAL::endFrame();
90002564:	f010 fabe 	bl	90012ae4 <_ZN8touchgfx3HAL8endFrameEv>
90002568:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
9000256c:	b963      	cbnz	r3, 90002588 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>
9000256e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
90002572:	b94b      	cbnz	r3, 90002588 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>
        firstDrawThisFrame = true;
90002574:	2301      	movs	r3, #1
        SEM_POST(semDecode);
90002576:	6c20      	ldr	r0, [r4, #64]	; 0x40
        firstDrawThisFrame = true;
90002578:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        SEM_POST(semDecode);
9000257c:	f00c f9da 	bl	9000e934 <osSemaphoreRelease>
        if (uiHasMutex)
90002580:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
90002584:	b9cb      	cbnz	r3, 900025ba <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x66>
}
90002586:	bd10      	pop	{r4, pc}
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
90002588:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
9000258c:	69e1      	ldr	r1, [r4, #28]
9000258e:	6922      	ldr	r2, [r4, #16]
90002590:	fb00 f303 	mul.w	r3, r0, r3
90002594:	fb01 f202 	mul.w	r2, r1, r2
90002598:	4293      	cmp	r3, r2
9000259a:	d3eb      	bcc.n	90002574 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x20>
        {
            if (allowSkipFrames)
9000259c:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
900025a0:	b138      	cbz	r0, 900025b2 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x5e>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
900025a2:	1a9b      	subs	r3, r3, r2
900025a4:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
900025a8:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
900025aa:	bf98      	it	ls
900025ac:	f102 32ff 	addls.w	r2, r2, #4294967295
900025b0:	6262      	str	r2, [r4, #36]	; 0x24
                    stream.doDecode = true;
900025b2:	2301      	movs	r3, #1
900025b4:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        for (uint32_t i = 0; i < no_streams; i++)
900025b8:	e7dc      	b.n	90002574 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x20>
            MUTEX_UNLOCK(mutexBuffers);
900025ba:	6c60      	ldr	r0, [r4, #68]	; 0x44
900025bc:	f00c f914 	bl	9000e7e8 <osMutexRelease>
            uiHasMutex = false;
900025c0:	2300      	movs	r3, #0
900025c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
900025c6:	bd10      	pop	{r4, pc}
900025c8:	24008c9c 	.word	0x24008c9c
900025cc:	24008cec 	.word	0x24008cec

900025d0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
900025d0:	f010 ba46 	b.w	90012a60 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

900025d4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
900025d4:	f010 bba1 	b.w	90012d1a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

900025d8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
900025d8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
900025dc:	b903      	cbnz	r3, 900025e0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x8>
900025de:	4770      	bx	lr
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
900025e0:	b510      	push	{r4, lr}
            MUTEX_LOCK(mutexBuffers);
900025e2:	f04f 31ff 	mov.w	r1, #4294967295
900025e6:	4604      	mov	r4, r0
900025e8:	6c40      	ldr	r0, [r0, #68]	; 0x44
900025ea:	f00c f8d9 	bl	9000e7a0 <osMutexAcquire>
            firstDrawThisFrame = false;
900025ee:	f44f 7380 	mov.w	r3, #256	; 0x100
900025f2:	f8a4 303d 	strh.w	r3, [r4, #61]	; 0x3d
    }
900025f6:	bd10      	pop	{r4, pc}

900025f8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
900025f8:	b538      	push	{r3, r4, r5, lr}
900025fa:	460c      	mov	r4, r1
900025fc:	4605      	mov	r5, r0
        MUTEX_LOCK(mutexBuffers);
900025fe:	f04f 31ff 	mov.w	r1, #4294967295
90002602:	6c40      	ldr	r0, [r0, #68]	; 0x44
        streams[handle].isActive = false;
90002604:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
        MUTEX_LOCK(mutexBuffers);
90002608:	f00c f8ca 	bl	9000e7a0 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
9000260c:	6c68      	ldr	r0, [r5, #68]	; 0x44
9000260e:	f00c f8eb 	bl	9000e7e8 <osMutexRelease>
        streams[handle].isActive = false;
90002612:	2300      	movs	r3, #0
90002614:	eb05 0484 	add.w	r4, r5, r4, lsl #2
90002618:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        if (oneIsActive == false)
9000261c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
90002620:	b90b      	cbnz	r3, 90002626 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x2e>
            topBufferRGB = bufferRGB;
90002622:	6b2b      	ldr	r3, [r5, #48]	; 0x30
90002624:	63ab      	str	r3, [r5, #56]	; 0x38
    }
90002626:	bd38      	pop	{r3, r4, r5, pc}

90002628 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
90002628:	4814      	ldr	r0, [pc, #80]	; (9000267c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x54>)
9000262a:	6943      	ldr	r3, [r0, #20]
9000262c:	03d9      	lsls	r1, r3, #15
9000262e:	d523      	bpl.n	90002678 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x50>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90002630:	2300      	movs	r3, #0
{
90002632:	b510      	push	{r4, lr}
90002634:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90002638:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
9000263c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002640:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90002644:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90002648:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
9000264c:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002650:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90002654:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002656:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
9000265a:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000265c:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
      } while (ways-- != 0U);
90002660:	1c5a      	adds	r2, r3, #1
90002662:	d1f8      	bne.n	90002656 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2e>
    } while(sets-- != 0U);
90002664:	f1ac 0c20 	sub.w	ip, ip, #32
90002668:	f11c 0f20 	cmn.w	ip, #32
9000266c:	d1f0      	bne.n	90002650 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
9000266e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90002672:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
90002676:	bd10      	pop	{r4, pc}
90002678:	4770      	bx	lr
9000267a:	bf00      	nop
9000267c:	e000ed00 	.word	0xe000ed00

90002680 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
90002680:	b510      	push	{r4, lr}
        assert(handle < no_streams);
90002682:	2900      	cmp	r1, #0
90002684:	d133      	bne.n	900026ee <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x6e>
90002686:	4604      	mov	r4, r0
        switch (cmd)
90002688:	2a05      	cmp	r2, #5
9000268a:	d809      	bhi.n	900026a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x20>
9000268c:	e8df f002 	tbb	[pc, r2]
90002690:	27221e0f 	.word	0x27221e0f
90002694:	0903      	.short	0x0903
            stream.isPlaying = false;
90002696:	2200      	movs	r2, #0
            stream.seek_to_frame = 1;
90002698:	2301      	movs	r3, #1
            stream.isPlaying = false;
9000269a:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
            stream.seek_to_frame = 1;
9000269e:	6203      	str	r3, [r0, #32]
    }
900026a0:	bd10      	pop	{r4, pc}
            stream.repeat = (param > 0);
900026a2:	3b00      	subs	r3, #0
900026a4:	bf18      	it	ne
900026a6:	2301      	movne	r3, #1
900026a8:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    }
900026ac:	bd10      	pop	{r4, pc}
            if (mjpegDecoders[handle]->hasVideo())
900026ae:	6840      	ldr	r0, [r0, #4]
900026b0:	6803      	ldr	r3, [r0, #0]
900026b2:	691b      	ldr	r3, [r3, #16]
900026b4:	4798      	blx	r3
900026b6:	2800      	cmp	r0, #0
900026b8:	d0f2      	beq.n	900026a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x20>
                stream.isPlaying = true;
900026ba:	2201      	movs	r2, #1
                stream.frameCount = 0;
900026bc:	2300      	movs	r3, #0
                stream.isPlaying = true;
900026be:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
900026c2:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
                stream.tickCount = 0;
900026c6:	e9c4 3304 	strd	r3, r3, [r4, #16]
    }
900026ca:	bd10      	pop	{r4, pc}
            stream.isPlaying = false;
900026cc:	2300      	movs	r3, #0
900026ce:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    }
900026d2:	bd10      	pop	{r4, pc}
            stream.frameCount = 0;
900026d4:	2200      	movs	r2, #0
            stream.seek_to_frame = param;
900026d6:	6203      	str	r3, [r0, #32]
            stream.tickCount = 0;
900026d8:	e9c0 2204 	strd	r2, r2, [r0, #16]
    }
900026dc:	bd10      	pop	{r4, pc}
            stream.frameCount = 0;
900026de:	2200      	movs	r2, #0
            stream.isShowingOneFrame = true;
900026e0:	2101      	movs	r1, #1
            stream.seek_to_frame = param;
900026e2:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
900026e4:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
            stream.tickCount = 0;
900026e8:	e9c0 2204 	strd	r2, r2, [r0, #16]
    }
900026ec:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
900026ee:	4b03      	ldr	r3, [pc, #12]	; (900026fc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x7c>)
900026f0:	21a2      	movs	r1, #162	; 0xa2
900026f2:	4a03      	ldr	r2, [pc, #12]	; (90002700 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>)
900026f4:	4803      	ldr	r0, [pc, #12]	; (90002704 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x84>)
900026f6:	f024 fced 	bl	900270d4 <__assert_func>
900026fa:	bf00      	nop
900026fc:	90028b28 	.word	0x90028b28
90002700:	90029408 	.word	0x90029408
90002704:	90028cc8 	.word	0x90028cc8

90002708 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
90002708:	b510      	push	{r4, lr}
        assert(handle < no_streams);
9000270a:	bb39      	cbnz	r1, 9000275c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x54>
        if (stream.isPlaying)
9000270c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
90002710:	4604      	mov	r4, r0
90002712:	b923      	cbnz	r3, 9000271e <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x16>
        if (stream.doInvalidateOnNextTick)
90002714:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
90002718:	b963      	cbnz	r3, 90002734 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x2c>
        return true;
9000271a:	2001      	movs	r0, #1
    }
9000271c:	bd10      	pop	{r4, pc}
        return vSyncForFrame;
9000271e:	4912      	ldr	r1, [pc, #72]	; (90002768 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
90002720:	6943      	ldr	r3, [r0, #20]
90002722:	6809      	ldr	r1, [r1, #0]
90002724:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
90002728:	440b      	add	r3, r1
9000272a:	6143      	str	r3, [r0, #20]
        if (stream.doInvalidateOnNextTick)
9000272c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
90002730:	2b00      	cmp	r3, #0
90002732:	d0f2      	beq.n	9000271a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x12>
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
90002734:	68a1      	ldr	r1, [r4, #8]
            widget.invalidate();
90002736:	4610      	mov	r0, r2
90002738:	6813      	ldr	r3, [r2, #0]
9000273a:	695b      	ldr	r3, [r3, #20]
9000273c:	6311      	str	r1, [r2, #48]	; 0x30
9000273e:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
90002740:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
90002742:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
            stream.doInvalidateOnNextTick = false;
90002746:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
9000274a:	2800      	cmp	r0, #0
9000274c:	d1e5      	bne.n	9000271a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x12>
9000274e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
90002752:	2b00      	cmp	r3, #0
90002754:	d1e2      	bne.n	9000271c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
                stream.isPlaying = false;
90002756:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    }
9000275a:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
9000275c:	4b03      	ldr	r3, [pc, #12]	; (9000276c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
9000275e:	21d0      	movs	r1, #208	; 0xd0
90002760:	4a03      	ldr	r2, [pc, #12]	; (90002770 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x68>)
90002762:	4804      	ldr	r0, [pc, #16]	; (90002774 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x6c>)
90002764:	f024 fcb6 	bl	900270d4 <__assert_func>
90002768:	24028194 	.word	0x24028194
9000276c:	90028b28 	.word	0x90028b28
90002770:	900295dc 	.word	0x900295dc
90002774:	90028cc8 	.word	0x90028cc8

90002778 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
90002778:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
9000277c:	b570      	push	{r4, r5, r6, lr}
            if (streams[i].isActive == false)
9000277e:	b9fb      	cbnz	r3, 900027c0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x48>
            {
                // Reset stream parameters
                streams[i] = Stream();
90002780:	2201      	movs	r2, #1
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
90002782:	6b85      	ldr	r5, [r0, #56]	; 0x38
                streams[i] = Stream();
90002784:	60c3      	str	r3, [r0, #12]
90002786:	f8a0 202d 	strh.w	r2, [r0, #45]	; 0x2d
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
9000278a:	f505 2487 	add.w	r4, r5, #276480	; 0x43800
        streams[handle].isActive = true;
9000278e:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
                streams[i] = Stream();
90002792:	6103      	str	r3, [r0, #16]
90002794:	6143      	str	r3, [r0, #20]
90002796:	6183      	str	r3, [r0, #24]
90002798:	61c3      	str	r3, [r0, #28]
9000279a:	6203      	str	r3, [r0, #32]
9000279c:	6243      	str	r3, [r0, #36]	; 0x24
9000279e:	f8c0 3029 	str.w	r3, [r0, #41]	; 0x29
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900027a2:	e9d0 260c 	ldrd	r2, r6, [r0, #48]	; 0x30
900027a6:	4432      	add	r2, r6
900027a8:	4294      	cmp	r4, r2
900027aa:	d810      	bhi.n	900027ce <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x56>
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
900027ac:	4a0b      	ldr	r2, [pc, #44]	; (900027dc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x64>)
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
900027ae:	6085      	str	r5, [r0, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
900027b0:	6384      	str	r4, [r0, #56]	; 0x38
    }
900027b2:	4618      	mov	r0, r3
        format = bufferFormat;
900027b4:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferWidth = width;
900027b8:	f8c1 2036 	str.w	r2, [r1, #54]	; 0x36
        buffer = videoBuffer;
900027bc:	630b      	str	r3, [r1, #48]	; 0x30
900027be:	bd70      	pop	{r4, r5, r6, pc}

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
900027c0:	4b07      	ldr	r3, [pc, #28]	; (900027e0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
900027c2:	f240 11c5 	movw	r1, #453	; 0x1c5
900027c6:	4a07      	ldr	r2, [pc, #28]	; (900027e4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
900027c8:	4807      	ldr	r0, [pc, #28]	; (900027e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
900027ca:	f024 fc83 	bl	900270d4 <__assert_func>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
900027ce:	4b07      	ldr	r3, [pc, #28]	; (900027ec <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
900027d0:	2152      	movs	r1, #82	; 0x52
900027d2:	4a07      	ldr	r2, [pc, #28]	; (900027f0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
900027d4:	4804      	ldr	r0, [pc, #16]	; (900027e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
900027d6:	f024 fc7d 	bl	900270d4 <__assert_func>
900027da:	bf00      	nop
900027dc:	012001e0 	.word	0x012001e0
900027e0:	9002977c 	.word	0x9002977c
900027e4:	900297ac 	.word	0x900297ac
900027e8:	90028cc8 	.word	0x90028cc8
900027ec:	90029934 	.word	0x90029934
900027f0:	90029970 	.word	0x90029970

900027f4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
900027f4:	4b08      	ldr	r3, [pc, #32]	; (90002818 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
900027f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
900027fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
900027fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90002802:	f3bf 8f6f 	isb	sy
90002806:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
9000280a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
9000280e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90002812:	f3bf 8f6f 	isb	sy
}
90002816:	4770      	bx	lr
90002818:	e000e100 	.word	0xe000e100

9000281c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
9000281c:	4b03      	ldr	r3, [pc, #12]	; (9000282c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
9000281e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90002822:	609a      	str	r2, [r3, #8]
90002824:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90002828:	609a      	str	r2, [r3, #8]
}
9000282a:	4770      	bx	lr
9000282c:	e000e100 	.word	0xe000e100

90002830 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
90002830:	b538      	push	{r3, r4, r5, lr}
90002832:	4604      	mov	r4, r0
    HAL::initialize();
90002834:	f010 f963 	bl	90012afe <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
90002838:	6823      	ldr	r3, [r4, #0]
9000283a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
9000283c:	f015 f99e 	bl	90017b7c <_ZN8touchgfx11Application11getInstanceEv>
90002840:	4601      	mov	r1, r0
90002842:	4620      	mov	r0, r4
90002844:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
90002846:	6823      	ldr	r3, [r4, #0]
90002848:	4a16      	ldr	r2, [pc, #88]	; (900028a4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
9000284a:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
9000284e:	4295      	cmp	r5, r2
90002850:	d11c      	bne.n	9000288c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x5c>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
90002852:	4a15      	ldr	r2, [pc, #84]	; (900028a8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x78>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90002854:	2501      	movs	r5, #1
        setAnimationStorage(animationStorage);
90002856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
9000285a:	f502 317f 	add.w	r1, r2, #261120	; 0x3fc00
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
9000285e:	4813      	ldr	r0, [pc, #76]	; (900028ac <_ZN20TouchGFXGeneratedHAL10initializeEv+0x7c>)
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
90002860:	e9c4 210f 	strd	r2, r1, [r4, #60]	; 0x3c
        setAnimationStorage(animationStorage);
90002864:	4a12      	ldr	r2, [pc, #72]	; (900028b0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x80>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90002866:	7005      	strb	r5, [r0, #0]
90002868:	4293      	cmp	r3, r2
9000286a:	d116      	bne.n	9000289a <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6a>
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
9000286c:	2300      	movs	r3, #0
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000286e:	4a11      	ldr	r2, [pc, #68]	; (900028b4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x84>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90002870:	6463      	str	r3, [r4, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
90002872:	7013      	strb	r3, [r2, #0]
    void addDMA(touchgfx::DMA_Interface& dma) { pDma = &dma; }
90002874:	6864      	ldr	r4, [r4, #4]
        sizeBufferRGB = sizeOfBuffer;
90002876:	f44f 2087 	mov.w	r0, #276480	; 0x43800
        mjpegDecoders[index] = &decoder;
9000287a:	4b0f      	ldr	r3, [pc, #60]	; (900028b8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x88>)
9000287c:	490f      	ldr	r1, [pc, #60]	; (900028bc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x8c>)
        bufferRGB = buffer;
9000287e:	4a10      	ldr	r2, [pc, #64]	; (900028c0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x90>)
90002880:	644c      	str	r4, [r1, #68]	; 0x44
        mjpegDecoders[index] = &decoder;
90002882:	6059      	str	r1, [r3, #4]
        bufferRGB = buffer;
90002884:	631a      	str	r2, [r3, #48]	; 0x30
        sizeBufferRGB = sizeOfBuffer;
90002886:	e9c3 020d 	strd	r0, r2, [r3, #52]	; 0x34
}
9000288a:	bd38      	pop	{r3, r4, r5, pc}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
9000288c:	4a0d      	ldr	r2, [pc, #52]	; (900028c4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x94>)
9000288e:	2300      	movs	r3, #0
90002890:	4620      	mov	r0, r4
90002892:	f5a2 317f 	sub.w	r1, r2, #261120	; 0x3fc00
90002896:	47a8      	blx	r5
90002898:	e7ec      	b.n	90002874 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>
        setAnimationStorage(animationStorage);
9000289a:	2100      	movs	r1, #0
9000289c:	4620      	mov	r0, r4
9000289e:	4798      	blx	r3
900028a0:	e7e8      	b.n	90002874 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>
900028a2:	bf00      	nop
900028a4:	90000811 	.word	0x90000811
900028a8:	d003fc00 	.word	0xd003fc00
900028ac:	24028192 	.word	0x24028192
900028b0:	90000695 	.word	0x90000695
900028b4:	24028193 	.word	0x24028193
900028b8:	24008cec 	.word	0x24008cec
900028bc:	24008ca4 	.word	0x24008ca4
900028c0:	d00bf400 	.word	0xd00bf400
900028c4:	d007f800 	.word	0xd007f800

900028c8 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
900028c8:	b510      	push	{r4, lr}
        return instance;
900028ca:	4c14      	ldr	r4, [pc, #80]	; (9000291c <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
900028cc:	6823      	ldr	r3, [r4, #0]
900028ce:	b323      	cbz	r3, 9000291a <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
900028d0:	4b13      	ldr	r3, [pc, #76]	; (90002920 <HAL_LTDC_LineEventCallback+0x58>)
900028d2:	4a14      	ldr	r2, [pc, #80]	; (90002924 <HAL_LTDC_LineEventCallback+0x5c>)
900028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900028d6:	8811      	ldrh	r1, [r2, #0]
900028d8:	428b      	cmp	r3, r1
900028da:	d00a      	beq.n	900028f2 <HAL_LTDC_LineEventCallback+0x2a>
            GPIO::set(GPIO::VSYNC_FREQ);
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
900028dc:	f009 fbc8 	bl	9000c070 <HAL_LTDC_ProgramLineEvent>
900028e0:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
900028e2:	6803      	ldr	r3, [r0, #0]
900028e4:	6a1b      	ldr	r3, [r3, #32]
900028e6:	4798      	blx	r3

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
900028e8:	2000      	movs	r0, #0
        }
    }
900028ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
900028ee:	f7fd be75 	b.w	900005dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
900028f2:	4b0d      	ldr	r3, [pc, #52]	; (90002928 <HAL_LTDC_LineEventCallback+0x60>)
900028f4:	8819      	ldrh	r1, [r3, #0]
900028f6:	f009 fbbb 	bl	9000c070 <HAL_LTDC_ProgramLineEvent>
        return instance;
900028fa:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
900028fc:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
90002900:	3301      	adds	r3, #1
90002902:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            OSWrappers::signalVSync();
90002906:	f7ff f86b 	bl	900019e0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
9000290a:	6820      	ldr	r0, [r4, #0]
9000290c:	f010 fe4a 	bl	900135a4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
90002910:	2000      	movs	r0, #0
    }
90002912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
90002916:	f7fd be2d 	b.w	90000574 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
    }
9000291a:	bd10      	pop	{r4, pc}
9000291c:	24028194 	.word	0x24028194
90002920:	50001000 	.word	0x50001000
90002924:	24008ca0 	.word	0x24008ca0
90002928:	24008c9e 	.word	0x24008c9e

9000292c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
9000292c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90002930:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 900029ec <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc0>
90002934:	b083      	sub	sp, #12
                    stream.doInvalidateOnNextTick = true;
90002936:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
90002938:	f44f 7770 	mov.w	r7, #960	; 0x3c0
    void decoderTaskEntry()
9000293c:	4604      	mov	r4, r0
9000293e:	e024      	b.n	9000298a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x5e>
                        decoder->gotoFrame(stream.seek_to_frame);
90002940:	682b      	ldr	r3, [r5, #0]
90002942:	4628      	mov	r0, r5
90002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002946:	4798      	blx	r3
                        stream.seek_to_frame = 0;
90002948:	2300      	movs	r3, #0
9000294a:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
9000294c:	6829      	ldr	r1, [r5, #0]
9000294e:	f44f 7390 	mov.w	r3, #288	; 0x120
90002952:	9700      	str	r7, [sp, #0]
90002954:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
90002958:	f8d1 9014 	ldr.w	r9, [r1, #20]
9000295c:	4628      	mov	r0, r5
9000295e:	68a1      	ldr	r1, [r4, #8]
90002960:	47c8      	blx	r9
                    stream.frameCount++;
90002962:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
90002964:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
                    stream.frameCount++;
90002968:	3301      	adds	r3, #1
9000296a:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
9000296c:	2800      	cmp	r0, #0
9000296e:	d033      	beq.n	900029d8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xac>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
90002970:	682b      	ldr	r3, [r5, #0]
90002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90002974:	4543      	cmp	r3, r8
90002976:	d131      	bne.n	900029dc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb0>
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
90002978:	6968      	ldr	r0, [r5, #20]
9000297a:	3801      	subs	r0, #1
                    stream.doDecode = false;
9000297c:	2200      	movs	r2, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
9000297e:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
90002980:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
            MUTEX_UNLOCK(mutexBuffers);
90002984:	6c60      	ldr	r0, [r4, #68]	; 0x44
90002986:	f00b ff2f 	bl	9000e7e8 <osMutexRelease>
            SEM_WAIT(semDecode);
9000298a:	f04f 31ff 	mov.w	r1, #4294967295
9000298e:	6c20      	ldr	r0, [r4, #64]	; 0x40
90002990:	f00b ff9c 	bl	9000e8cc <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
90002994:	f04f 31ff 	mov.w	r1, #4294967295
90002998:	6c60      	ldr	r0, [r4, #68]	; 0x44
9000299a:	f00b ff01 	bl	9000e7a0 <osMutexAcquire>
                if (stream.doDecode)
9000299e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
900029a2:	2b00      	cmp	r3, #0
900029a4:	d0ee      	beq.n	90002984 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x58>
                    if (stream.seek_to_frame > 0)
900029a6:	6a21      	ldr	r1, [r4, #32]
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
900029a8:	6865      	ldr	r5, [r4, #4]
                    stream.doInvalidateOnNextTick = true;
900029aa:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
                    if (stream.seek_to_frame > 0)
900029ae:	2900      	cmp	r1, #0
900029b0:	d1c6      	bne.n	90002940 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x14>
                        if (stream.skip_frames > 0)
900029b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
900029b4:	2b00      	cmp	r3, #0
900029b6:	d0c9      	beq.n	9000294c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x20>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
900029b8:	682a      	ldr	r2, [r5, #0]
900029ba:	e9d2 9109 	ldrd	r9, r1, [r2, #36]	; 0x24
900029be:	4541      	cmp	r1, r8
900029c0:	d10f      	bne.n	900029e2 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb6>
900029c2:	6968      	ldr	r0, [r5, #20]
900029c4:	18c1      	adds	r1, r0, r3
900029c6:	4628      	mov	r0, r5
900029c8:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
900029ca:	6923      	ldr	r3, [r4, #16]
900029cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
                            stream.skip_frames = 0;
900029ce:	2200      	movs	r2, #0
                            stream.frameCount += stream.skip_frames;
900029d0:	440b      	add	r3, r1
                            stream.skip_frames = 0;
900029d2:	6262      	str	r2, [r4, #36]	; 0x24
                            stream.frameCount += stream.skip_frames;
900029d4:	6123      	str	r3, [r4, #16]
900029d6:	e7b9      	b.n	9000294c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x20>
900029d8:	2001      	movs	r0, #1
900029da:	e7cf      	b.n	9000297c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x50>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
900029dc:	4628      	mov	r0, r5
900029de:	4798      	blx	r3
900029e0:	e7cb      	b.n	9000297a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x4e>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
900029e2:	4628      	mov	r0, r5
900029e4:	4788      	blx	r1
900029e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
900029e8:	e7ec      	b.n	900029c4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x98>
900029ea:	bf00      	nop
900029ec:	90000989 	.word	0x90000989

900029f0 <videoTaskFunc>:
    videoController.decoderTaskEntry();
900029f0:	4801      	ldr	r0, [pc, #4]	; (900029f8 <videoTaskFunc+0x8>)
{
900029f2:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
900029f4:	f7ff ff9a 	bl	9000292c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
900029f8:	24008cec 	.word	0x24008cec

900029fc <_GLOBAL__sub_I_mjpegdecoder1>:
}
900029fc:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
900029fe:	4815      	ldr	r0, [pc, #84]	; (90002a54 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002a00:	2500      	movs	r5, #0
90002a02:	f7fe fbd3 	bl	900011ac <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002a06:	4c14      	ldr	r4, [pc, #80]	; (90002a58 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
90002a08:	4914      	ldr	r1, [pc, #80]	; (90002a5c <_GLOBAL__sub_I_mjpegdecoder1+0x60>)
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002a0a:	f44f 7380 	mov.w	r3, #256	; 0x100
        semDecode = SEM_CREATE(); // Binary semaphore
90002a0e:	462a      	mov	r2, r5
90002a10:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002a12:	6021      	str	r1, [r4, #0]
        semDecode = SEM_CREATE(); // Binary semaphore
90002a14:	4629      	mov	r1, r5
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002a16:	85a3      	strh	r3, [r4, #44]	; 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002a18:	87a3      	strh	r3, [r4, #60]	; 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002a1a:	60e5      	str	r5, [r4, #12]
                   isActive(false), isPlaying(false), isShowingOneFrame(false),
90002a1c:	62a5      	str	r5, [r4, #40]	; 0x28
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002a1e:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
90002a22:	63a5      	str	r5, [r4, #56]	; 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002a24:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002a28:	e9c4 5504 	strd	r5, r5, [r4, #16]
90002a2c:	e9c4 5506 	strd	r5, r5, [r4, #24]
                   seek_to_frame(0), skip_frames(0),
90002a30:	e9c4 5508 	strd	r5, r5, [r4, #32]
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
90002a34:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002a38:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
90002a3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
        semDecode = SEM_CREATE(); // Binary semaphore
90002a40:	f00b fef4 	bl	9000e82c <osSemaphoreNew>
90002a44:	4603      	mov	r3, r0
        mutexBuffers = MUTEX_CREATE();
90002a46:	4628      	mov	r0, r5
        semDecode = SEM_CREATE(); // Binary semaphore
90002a48:	6423      	str	r3, [r4, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
90002a4a:	f00b fe69 	bl	9000e720 <osMutexNew>
90002a4e:	6460      	str	r0, [r4, #68]	; 0x44
}
90002a50:	bd38      	pop	{r3, r4, r5, pc}
90002a52:	bf00      	nop
90002a54:	24008ca4 	.word	0x24008ca4
90002a58:	24008cec 	.word	0x24008cec
90002a5c:	90029b3c 	.word	0x90029b3c

90002a60 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002a64:	4c7e      	ldr	r4, [pc, #504]	; (90002c60 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x200>)
{
90002a66:	b08d      	sub	sp, #52	; 0x34
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002a68:	fba4 4303 	umull	r4, r3, r4, r3
{
90002a6c:	9109      	str	r1, [sp, #36]	; 0x24
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002a6e:	0a19      	lsrs	r1, r3, #8
{
90002a70:	9208      	str	r2, [sp, #32]
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90002a72:	eb02 2313 	add.w	r3, r2, r3, lsr #8
{
90002a76:	9006      	str	r0, [sp, #24]
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002a78:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
90002a7c:	4293      	cmp	r3, r2
90002a7e:	930b      	str	r3, [sp, #44]	; 0x2c
90002a80:	f240 80e9 	bls.w	90002c56 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f6>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90002a84:	4b77      	ldr	r3, [pc, #476]	; (90002c64 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x204>)
90002a86:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 90002c74 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x214>
90002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002a8c:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 90002c78 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x218>
90002a90:	930a      	str	r3, [sp, #40]	; 0x28
90002a92:	9a06      	ldr	r2, [sp, #24]
    //tgfx: Set stride to the full width of the RGB Buffer, and not the video itself.
    JPEG_ConvertorParams.ScaledWidth = 480 * 2;

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);

    currentMCU++;
90002a94:	f04f 0e02 	mov.w	lr, #2
90002a98:	9908      	ldr	r1, [sp, #32]
90002a9a:	f502 7080 	add.w	r0, r2, #256	; 0x100
90002a9e:	010b      	lsls	r3, r1, #4
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90002aa0:	3101      	adds	r1, #1
    currentMCU++;
90002aa2:	e9cd 2003 	strd	r2, r0, [sp, #12]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90002aa6:	980a      	ldr	r0, [sp, #40]	; 0x28
90002aa8:	9108      	str	r1, [sp, #32]
90002aaa:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
90002aae:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ab2:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
90002ab6:	005b      	lsls	r3, r3, #1
90002ab8:	eb03 2382 	add.w	r3, r3, r2, lsl #10
90002abc:	9301      	str	r3, [sp, #4]

    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */

    pLum = pInBuffer;

    for(i= 0; i <  16; i+=2)
90002abe:	e009      	b.n	90002ad4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x74>
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }

      if(refline < JPEG_ConvertorParams.ScaledWidth * 288)
90002ac0:	9b01      	ldr	r3, [sp, #4]
90002ac2:	f5b3 2f87 	cmp.w	r3, #276480	; 0x43800
90002ac6:	d30f      	bcc.n	90002ae8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x88>
    for(i= 0; i <  16; i+=2)
90002ac8:	f1be 0f10 	cmp.w	lr, #16
90002acc:	f000 80b6 	beq.w	90002c3c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1dc>
90002ad0:	f10e 0e02 	add.w	lr, lr, #2
      if(i == 8)
90002ad4:	f1be 0f0a 	cmp.w	lr, #10
90002ad8:	d1f2      	bne.n	90002ac0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x60>
        pLum = pInBuffer + 128;
90002ada:	9b06      	ldr	r3, [sp, #24]
90002adc:	3380      	adds	r3, #128	; 0x80
90002ade:	9303      	str	r3, [sp, #12]
      if(refline < JPEG_ConvertorParams.ScaledWidth * 288)
90002ae0:	9b01      	ldr	r3, [sp, #4]
90002ae2:	f5b3 2f87 	cmp.w	r3, #276480	; 0x43800
90002ae6:	d2f3      	bcs.n	90002ad0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x70>
      {
        pOutAddr = pOutBuffer + refline;
90002ae8:	9a01      	ldr	r2, [sp, #4]
90002aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
90002aec:	f8cd e01c 	str.w	lr, [sp, #28]
90002af0:	4413      	add	r3, r2
90002af2:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
90002af6:	f103 0c10 	add.w	ip, r3, #16
90002afa:	3330      	adds	r3, #48	; 0x30
90002afc:	4696      	mov	lr, r2
90002afe:	9102      	str	r1, [sp, #8]
90002b00:	9305      	str	r3, [sp, #20]
90002b02:	9b02      	ldr	r3, [sp, #8]
90002b04:	f50c 766c 	add.w	r6, ip, #944	; 0x3b0
90002b08:	f1ac 0510 	sub.w	r5, ip, #16
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;

        for(k= 0; k<2; k++)
        {
          for(j=0; j < 8; j+=2)
90002b0c:	4674      	mov	r4, lr
90002b0e:	1e5f      	subs	r7, r3, #1
          {
            cbcomp = (int32_t)(*(pChrom));
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002b10:	f817 3f01 	ldrb.w	r3, [r7, #1]!
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
90002b14:	3504      	adds	r5, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002b16:	4954      	ldr	r1, [pc, #336]	; (90002c68 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x208>)
          for(j=0; j < 8; j+=2)
90002b18:	3402      	adds	r4, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002b1a:	f897 0040 	ldrb.w	r0, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
90002b1e:	3604      	adds	r6, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002b20:	f851 a023 	ldr.w	sl, [r1, r3, lsl #2]
          for(j=0; j < 8; j+=2)
90002b24:	4565      	cmp	r5, ip
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002b26:	4951      	ldr	r1, [pc, #324]	; (90002c6c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20c>)
            ycomp = (int32_t)(*(pLum +j));
90002b28:	f814 2c02 	ldrb.w	r2, [r4, #-2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002b2c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002b30:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002b34:	4449      	add	r1, r9
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002b36:	449a      	add	sl, r3
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002b38:	4b4d      	ldr	r3, [pc, #308]	; (90002c70 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x210>)
90002b3a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b3e:	eb09 432a 	add.w	r3, r9, sl, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002b42:	eb01 0a02 	add.w	sl, r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b46:	4448      	add	r0, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b48:	eb03 0b02 	add.w	fp, r3, r2
90002b4c:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b50:	4402      	add	r2, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b52:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b56:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b5a:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b5e:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b62:	ea4f 1b4b 	mov.w	fp, fp, lsl #5
90002b66:	ea4b 22c2 	orr.w	r2, fp, r2, lsl #11
90002b6a:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr =
90002b6e:	f825 2c04 	strh.w	r2, [r5, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90002b72:	f814 ac01 	ldrb.w	sl, [r4, #-1]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b76:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b7a:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002b7e:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b80:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b84:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b88:	ea4f 0292 	mov.w	r2, r2, lsr #2
90002b8c:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b90:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b94:	ea4f 1242 	mov.w	r2, r2, lsl #5
90002b98:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90002b9c:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002ba0:	f825 2c02 	strh.w	r2, [r5, #-2]
            ycomp = (int32_t)(*(pLum +j +8));
90002ba4:	f894 a006 	ldrb.w	sl, [r4, #6]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ba8:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002bac:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002bb0:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002bb2:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002bb6:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002bba:	ea4f 0292 	mov.w	r2, r2, lsr #2
90002bbe:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002bc2:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002bc6:	ea4f 1242 	mov.w	r2, r2, lsl #5
90002bca:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90002bce:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 =
90002bd2:	f826 2c04 	strh.w	r2, [r6, #-4]
            ycomp = (int32_t)(*(pLum +j +8 +1));
90002bd6:	79e2      	ldrb	r2, [r4, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002bd8:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002bda:	4410      	add	r0, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002bdc:	4411      	add	r1, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002bde:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002be2:	f890 2100 	ldrb.w	r2, [r0, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002be6:	ea4f 0393 	mov.w	r3, r3, lsr #2
90002bea:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002bee:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002bf2:	ea4f 1343 	mov.w	r3, r3, lsl #5
90002bf6:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
90002bfa:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) =
90002bfe:	f826 3c02 	strh.w	r3, [r6, #-2]
          for(j=0; j < 8; j+=2)
90002c02:	d185      	bne.n	90002b10 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb0>

            pChrom++;
90002c04:	9b02      	ldr	r3, [sp, #8]
        for(k= 0; k<2; k++)
90002c06:	f105 0c10 	add.w	ip, r5, #16
          }
          pLum += 64;
90002c0a:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
            pChrom++;
90002c0e:	3304      	adds	r3, #4
90002c10:	9302      	str	r3, [sp, #8]
        for(k= 0; k<2; k++)
90002c12:	9b05      	ldr	r3, [sp, #20]
90002c14:	4563      	cmp	r3, ip
90002c16:	f47f af74 	bne.w	90002b02 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa2>
            pChrom++;
90002c1a:	9b04      	ldr	r3, [sp, #16]
90002c1c:	f8dd e01c 	ldr.w	lr, [sp, #28]
90002c20:	3308      	adds	r3, #8
    for(i= 0; i <  16; i+=2)
90002c22:	f1be 0f10 	cmp.w	lr, #16
            pChrom++;
90002c26:	9304      	str	r3, [sp, #16]
        }

        pLum = pLum - 128 + 16;
90002c28:	9b03      	ldr	r3, [sp, #12]
90002c2a:	f103 0310 	add.w	r3, r3, #16
90002c2e:	9303      	str	r3, [sp, #12]

        refline += 2*JPEG_ConvertorParams.ScaledWidth;
90002c30:	9b01      	ldr	r3, [sp, #4]
90002c32:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
90002c36:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
90002c38:	f47f af4a 	bne.w	90002ad0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x70>
      }
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90002c3c:	9b06      	ldr	r3, [sp, #24]
  while(currentMCU < (numberMCU + BlockIndex))
90002c3e:	9a08      	ldr	r2, [sp, #32]
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90002c40:	f503 73c0 	add.w	r3, r3, #384	; 0x180
90002c44:	9306      	str	r3, [sp, #24]
  while(currentMCU < (numberMCU + BlockIndex))
90002c46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90002c48:	4293      	cmp	r3, r2
90002c4a:	f47f af22 	bne.w	90002a92 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x32>
90002c4e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
90002c52:	4a04      	ldr	r2, [pc, #16]	; (90002c64 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x204>)
90002c54:	6293      	str	r3, [r2, #40]	; 0x28
  }
  return numberMCU;
}
90002c56:	ee17 0a90 	vmov	r0, s15
90002c5a:	b00d      	add	sp, #52	; 0x34
90002c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90002c60:	aaaaaaab 	.word	0xaaaaaaab
90002c64:	2400b9b4 	.word	0x2400b9b4
90002c68:	24009d34 	.word	0x24009d34
90002c6c:	24009934 	.word	0x24009934
90002c70:	2400a534 	.word	0x2400a534
90002c74:	2400a134 	.word	0x2400a134
90002c78:	90029b74 	.word	0x90029b74

90002c7c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90002c80:	0a1c      	lsrs	r4, r3, #8
{
90002c82:	b08d      	sub	sp, #52	; 0x34
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90002c84:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90002c88:	ee07 4a90 	vmov	s15, r4
{
90002c8c:	9208      	str	r2, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
90002c8e:	429a      	cmp	r2, r3
{
90002c90:	9007      	str	r0, [sp, #28]
90002c92:	9109      	str	r1, [sp, #36]	; 0x24
  while(currentMCU < (numberMCU + BlockIndex))
90002c94:	930b      	str	r3, [sp, #44]	; 0x2c
90002c96:	f080 814a 	bcs.w	90002f2e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002c9a:	4ba7      	ldr	r3, [pc, #668]	; (90002f38 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2bc>)
90002c9c:	4da7      	ldr	r5, [pc, #668]	; (90002f3c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c0>)
90002c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90002ca0:	f8df 929c 	ldr.w	r9, [pc, #668]	; 90002f40 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c4>
90002ca4:	920a      	str	r2, [sp, #40]	; 0x28

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ca6:	6a9a      	ldr	r2, [r3, #40]	; 0x28

    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002ca8:	691b      	ldr	r3, [r3, #16]
90002caa:	f8df a298 	ldr.w	sl, [pc, #664]	; 90002f44 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c8>
90002cae:	f8df b298 	ldr.w	fp, [pc, #664]	; 90002f48 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2cc>
90002cb2:	f8df 8298 	ldr.w	r8, [pc, #664]	; 90002f4c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d0>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002cb6:	9206      	str	r2, [sp, #24]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002cb8:	9301      	str	r3, [sp, #4]
90002cba:	e008      	b.n	90002cce <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x52>

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90002cbc:	9b07      	ldr	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90002cbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90002cc0:	f503 7380 	add.w	r3, r3, #256	; 0x100
90002cc4:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90002cc6:	9b08      	ldr	r3, [sp, #32]
90002cc8:	4293      	cmp	r3, r2
90002cca:	f000 8130 	beq.w	90002f2e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002cce:	9a07      	ldr	r2, [sp, #28]
90002cd0:	9908      	ldr	r1, [sp, #32]
90002cd2:	f102 0080 	add.w	r0, r2, #128	; 0x80
90002cd6:	010b      	lsls	r3, r1, #4
90002cd8:	3101      	adds	r1, #1
    currentMCU++;
90002cda:	e9cd 0202 	strd	r0, r2, [sp, #8]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002cde:	980a      	ldr	r0, [sp, #40]	; 0x28
90002ce0:	9108      	str	r1, [sp, #32]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ce2:	9906      	ldr	r1, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002ce4:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
90002ce8:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002cec:	fb01 f202 	mul.w	r2, r1, r2
90002cf0:	005b      	lsls	r3, r3, #1
90002cf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
90002cf6:	9300      	str	r3, [sp, #0]
    currentMCU++;
90002cf8:	2308      	movs	r3, #8
90002cfa:	9305      	str	r3, [sp, #20]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002cfc:	e9dd 2300 	ldrd	r2, r3, [sp]
90002d00:	4293      	cmp	r3, r2
90002d02:	d9db      	bls.n	90002cbc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
        pOutAddr = pOutBuffer + refline;
90002d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
90002d06:	4413      	add	r3, r2
        for(k= 0; k<2; k++)
90002d08:	9a03      	ldr	r2, [sp, #12]
90002d0a:	f102 0140 	add.w	r1, r2, #64	; 0x40
90002d0e:	9a02      	ldr	r2, [sp, #8]
90002d10:	f103 0020 	add.w	r0, r3, #32
90002d14:	3204      	adds	r2, #4
90002d16:	9004      	str	r0, [sp, #16]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002d18:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
90002d1c:	3310      	adds	r3, #16
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002d1e:	f812 4c04 	ldrb.w	r4, [r2, #-4]
        for(k= 0; k<2; k++)
90002d22:	3140      	adds	r1, #64	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002d24:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
        for(k= 0; k<2; k++)
90002d28:	3204      	adds	r2, #4
            ycomp = (int32_t)(*(pLum +j));
90002d2a:	f811 cc80 	ldrb.w	ip, [r1, #-128]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002d2e:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d32:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d34:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002d38:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d3c:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d3e:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d40:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d44:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d48:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d4c:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d50:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d52:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d56:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002d5a:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002d5e:	08e4      	lsrs	r4, r4, #3
90002d60:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002d64:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002d68:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002d6c:	f823 4c10 	strh.w	r4, [r3, #-16]
            ycomp = (int32_t)(*(pLum +j +1));
90002d70:	f811 4c7f 	ldrb.w	r4, [r1, #-127]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d74:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d76:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d78:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d7a:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d7e:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002d82:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d86:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d88:	08c0      	lsrs	r0, r0, #3
90002d8a:	08a4      	lsrs	r4, r4, #2
90002d8c:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002d90:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002d94:	f823 0c0e 	strh.w	r0, [r3, #-14]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002d98:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002d9c:	f812 4c07 	ldrb.w	r4, [r2, #-7]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002da0:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90002da4:	f811 cc7e 	ldrb.w	ip, [r1, #-126]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002da8:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dac:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002dae:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002db2:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002db6:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002db8:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dba:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dbe:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dc2:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002dc6:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dca:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dcc:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dd0:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002dd4:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002dd8:	08e4      	lsrs	r4, r4, #3
90002dda:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002dde:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002de2:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002de6:	f823 4c0c 	strh.w	r4, [r3, #-12]
            ycomp = (int32_t)(*(pLum +j +1));
90002dea:	f811 4c7d 	ldrb.w	r4, [r1, #-125]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002dee:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002df0:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002df2:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002df4:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002df8:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002dfc:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e00:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e02:	08c0      	lsrs	r0, r0, #3
90002e04:	08a4      	lsrs	r4, r4, #2
90002e06:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002e0a:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002e0e:	f823 0c0a 	strh.w	r0, [r3, #-10]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002e12:	f812 4c06 	ldrb.w	r4, [r2, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002e16:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90002e1a:	f811 cc7c 	ldrb.w	ip, [r1, #-124]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002e1e:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002e22:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002e26:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e2a:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002e2c:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002e30:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002e32:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e34:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e38:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e3c:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002e40:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e44:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e46:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e4a:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002e4e:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002e52:	08e4      	lsrs	r4, r4, #3
90002e54:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002e58:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002e5c:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002e60:	f823 4c08 	strh.w	r4, [r3, #-8]
            ycomp = (int32_t)(*(pLum +j +1));
90002e64:	f811 4c7b 	ldrb.w	r4, [r1, #-123]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002e68:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e6a:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e6c:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e6e:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e72:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002e76:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e7a:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e7c:	08c0      	lsrs	r0, r0, #3
90002e7e:	08a4      	lsrs	r4, r4, #2
90002e80:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002e84:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002e88:	f823 0c06 	strh.w	r0, [r3, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002e8c:	f892 003b 	ldrb.w	r0, [r2, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002e90:	f812 4c05 	ldrb.w	r4, [r2, #-5]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002e94:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90002e98:	f811 cc7a 	ldrb.w	ip, [r1, #-122]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002e9c:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ea0:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ea2:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002ea6:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002eaa:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002eac:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002eae:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002eb2:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002eb6:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002eba:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ebe:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ec0:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ec4:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002ec8:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002ecc:	08e4      	lsrs	r4, r4, #3
90002ece:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002ed2:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002ed6:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002eda:	f823 4c04 	strh.w	r4, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90002ede:	f811 4c79 	ldrb.w	r4, [r1, #-121]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002ee2:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ee4:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ee6:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ee8:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002eec:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002ef0:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ef4:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ef6:	08c0      	lsrs	r0, r0, #3
90002ef8:	08a4      	lsrs	r4, r4, #2
90002efa:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002efe:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002f02:	f823 0c02 	strh.w	r0, [r3, #-2]
        for(k= 0; k<2; k++)
90002f06:	9804      	ldr	r0, [sp, #16]
90002f08:	4283      	cmp	r3, r0
90002f0a:	f47f af05 	bne.w	90002d18 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9c>
            pChrom++;
90002f0e:	9b02      	ldr	r3, [sp, #8]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002f10:	9a06      	ldr	r2, [sp, #24]
            pChrom++;
90002f12:	3308      	adds	r3, #8
90002f14:	9302      	str	r3, [sp, #8]
        pLum = pLum - 128 + 8;
90002f16:	9b03      	ldr	r3, [sp, #12]
90002f18:	3308      	adds	r3, #8
90002f1a:	9303      	str	r3, [sp, #12]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002f1c:	9b00      	ldr	r3, [sp, #0]
90002f1e:	4413      	add	r3, r2
90002f20:	9300      	str	r3, [sp, #0]
    for(i= 0; i <  8; i++)
90002f22:	9b05      	ldr	r3, [sp, #20]
90002f24:	3b01      	subs	r3, #1
90002f26:	9305      	str	r3, [sp, #20]
90002f28:	f47f aee8 	bne.w	90002cfc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
90002f2c:	e6c6      	b.n	90002cbc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
  }
  return numberMCU;
}
90002f2e:	ee17 0a90 	vmov	r0, s15
90002f32:	b00d      	add	sp, #52	; 0x34
90002f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90002f38:	2400b9b4 	.word	0x2400b9b4
90002f3c:	24009934 	.word	0x24009934
90002f40:	2400a534 	.word	0x2400a534
90002f44:	2400a134 	.word	0x2400a134
90002f48:	24009d34 	.word	0x24009d34
90002f4c:	90029b74 	.word	0x90029b74

90002f50 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002f54:	4cb6      	ldr	r4, [pc, #728]	; (90003230 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e0>)
{
90002f56:	b089      	sub	sp, #36	; 0x24
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002f58:	fba4 4303 	umull	r4, r3, r4, r3
{
90002f5c:	9102      	str	r1, [sp, #8]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002f5e:	09d9      	lsrs	r1, r3, #7
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90002f60:	eb02 13d3 	add.w	r3, r2, r3, lsr #7
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002f64:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
90002f68:	429a      	cmp	r2, r3
90002f6a:	9306      	str	r3, [sp, #24]
{
90002f6c:	e9cd 0204 	strd	r0, r2, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
90002f70:	f080 8158 	bcs.w	90003224 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002f74:	4baf      	ldr	r3, [pc, #700]	; (90003234 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e4>)
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

            ycomp = (int32_t)(*(pLum +j));

            *(__IO uint16_t *)pOutAddr =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f76:	4cb0      	ldr	r4, [pc, #704]	; (90003238 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e8>)
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002f7a:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 90003240 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f0>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002f7e:	9207      	str	r2, [sp, #28]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002f80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002f82:	691b      	ldr	r3, [r3, #16]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002f84:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 90003244 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f4>
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f88:	48ac      	ldr	r0, [pc, #688]	; (9000323c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2ec>)
90002f8a:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 90003248 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f8>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002f8e:	9203      	str	r2, [sp, #12]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002f90:	9300      	str	r3, [sp, #0]
90002f92:	e007      	b.n	90002fa4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x54>

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
90002f94:	9b04      	ldr	r3, [sp, #16]
90002f96:	33c0      	adds	r3, #192	; 0xc0
90002f98:	9304      	str	r3, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
90002f9a:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
90002f9e:	4293      	cmp	r3, r2
90002fa0:	f000 8140 	beq.w	90003224 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002fa4:	9e05      	ldr	r6, [sp, #20]
90002fa6:	9f07      	ldr	r7, [sp, #28]
90002fa8:	00f2      	lsls	r2, r6, #3
90002faa:	3601      	adds	r6, #1
90002fac:	9904      	ldr	r1, [sp, #16]
90002fae:	9605      	str	r6, [sp, #20]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002fb0:	9e03      	ldr	r6, [sp, #12]
90002fb2:	f101 0340 	add.w	r3, r1, #64	; 0x40
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002fb6:	fbb2 f5f7 	udiv	r5, r2, r7
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90002fba:	fb07 2215 	mls	r2, r7, r5, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002fbe:	fb06 f505 	mul.w	r5, r6, r5
90002fc2:	0052      	lsls	r2, r2, #1
90002fc4:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
    currentMCU++;
90002fc8:	2508      	movs	r5, #8
90002fca:	9501      	str	r5, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002fcc:	9d00      	ldr	r5, [sp, #0]
90002fce:	4295      	cmp	r5, r2
90002fd0:	d9e0      	bls.n	90002f94 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002fd2:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
          pLum += 8;
90002fd6:	3108      	adds	r1, #8
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002fd8:	f893 9000 	ldrb.w	r9, [r3]
            pChrom++;
90002fdc:	3308      	adds	r3, #8
            ycomp = (int32_t)(*(pLum +j));
90002fde:	f811 5c08 	ldrb.w	r5, [r1, #-8]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fe2:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fe6:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
90002fea:	4425      	add	r5, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002fec:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ff0:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ff4:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002ff6:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ff8:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ffa:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ffe:	eb05 4929 	add.w	r9, r5, r9, asr #16
90003002:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003006:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003008:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
9000300c:	08ed      	lsrs	r5, r5, #3
9000300e:	08bf      	lsrs	r7, r7, #2
90003010:	ea45 25c6 	orr.w	r5, r5, r6, lsl #11
            *(__IO uint16_t *)pOutAddr =
90003014:	9e02      	ldr	r6, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003016:	ea45 1547 	orr.w	r5, r5, r7, lsl #5
            *(__IO uint16_t *)pOutAddr =
9000301a:	52b5      	strh	r5, [r6, r2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
9000301c:	f893 7039 	ldrb.w	r7, [r3, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003020:	f813 9c07 	ldrb.w	r9, [r3, #-7]
            ycomp = (int32_t)(*(pLum +j));
90003024:	f811 5c07 	ldrb.w	r5, [r1, #-7]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003028:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000302c:	4425      	add	r5, r4
9000302e:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003032:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003036:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000303a:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000303c:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000303e:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003040:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003044:	eb05 4929 	add.w	r9, r5, r9, asr #16
90003048:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000304c:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000304e:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
90003052:	08ed      	lsrs	r5, r5, #3
90003054:	08bf      	lsrs	r7, r7, #2
90003056:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
        pOutAddr = pOutBuffer+ refline;
9000305a:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000305c:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
        pOutAddr = pOutBuffer+ refline;
90003060:	4415      	add	r5, r2
            *(__IO uint16_t *)pOutAddr =
90003062:	806e      	strh	r6, [r5, #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003064:	f893 a03a 	ldrb.w	sl, [r3, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90003068:	f811 7c06 	ldrb.w	r7, [r1, #-6]
        refline += JPEG_ConvertorParams.ScaledWidth;
9000306c:	9e03      	ldr	r6, [sp, #12]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000306e:	4427      	add	r7, r4
90003070:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
        refline += JPEG_ConvertorParams.ScaledWidth;
90003074:	4432      	add	r2, r6
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003076:	f813 6c06 	ldrb.w	r6, [r3, #-6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000307a:	44b9      	add	r9, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000307c:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003080:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003084:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003088:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000308c:	44ba      	add	sl, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000308e:	ea4f 09d9 	mov.w	r9, r9, lsr #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003092:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003094:	eb07 4626 	add.w	r6, r7, r6, asr #16
90003098:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
9000309c:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
900030a0:	08fe      	lsrs	r6, r7, #3
900030a2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
900030a6:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
900030aa:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
900030ae:	80ae      	strh	r6, [r5, #4]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
900030b0:	f893 a03b 	ldrb.w	sl, [r3, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900030b4:	f813 6c05 	ldrb.w	r6, [r3, #-5]
            ycomp = (int32_t)(*(pLum +j));
900030b8:	f811 7c05 	ldrb.w	r7, [r1, #-5]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030bc:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030c0:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
900030c4:	4427      	add	r7, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900030c6:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030ca:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030ce:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900030d0:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030d2:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030d4:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900030d8:	eb07 4626 	add.w	r6, r7, r6, asr #16
900030dc:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030e0:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900030e4:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
900030e8:	08fe      	lsrs	r6, r7, #3
900030ea:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
900030ee:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
900030f2:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
900030f6:	80ee      	strh	r6, [r5, #6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
900030f8:	f893 a03c 	ldrb.w	sl, [r3, #60]	; 0x3c
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900030fc:	f813 6c04 	ldrb.w	r6, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j));
90003100:	f811 7c04 	ldrb.w	r7, [r1, #-4]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003104:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003108:	4427      	add	r7, r4
9000310a:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000310e:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003112:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003116:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003118:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000311a:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000311c:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003120:	eb07 4626 	add.w	r6, r7, r6, asr #16
90003124:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003128:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000312c:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90003130:	08fe      	lsrs	r6, r7, #3
90003132:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90003136:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
9000313a:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
9000313e:	812e      	strh	r6, [r5, #8]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003140:	f893 a03d 	ldrb.w	sl, [r3, #61]	; 0x3d
            ycomp = (int32_t)(*(pLum +j));
90003144:	f811 7c03 	ldrb.w	r7, [r1, #-3]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003148:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
9000314c:	4427      	add	r7, r4
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000314e:	f813 6c03 	ldrb.w	r6, [r3, #-3]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003152:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003156:	44b9      	add	r9, r7
90003158:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000315c:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003160:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003164:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003168:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000316a:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000316c:	eb07 4626 	add.w	r6, r7, r6, asr #16
90003170:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
90003174:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90003178:	08fe      	lsrs	r6, r7, #3
9000317a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9000317e:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90003182:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003186:	816e      	strh	r6, [r5, #10]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003188:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000318c:	f813 6c02 	ldrb.w	r6, [r3, #-2]
            ycomp = (int32_t)(*(pLum +j));
90003190:	f811 7c02 	ldrb.w	r7, [r1, #-2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003194:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003198:	4427      	add	r7, r4
9000319a:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000319e:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900031a2:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900031a6:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900031a8:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900031aa:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900031ac:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900031b0:	eb07 4626 	add.w	r6, r7, r6, asr #16
900031b4:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900031b8:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900031bc:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
900031c0:	08fe      	lsrs	r6, r7, #3
900031c2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
900031c6:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
900031ca:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
900031ce:	81ae      	strh	r6, [r5, #12]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
900031d0:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900031d4:	f813 6c01 	ldrb.w	r6, [r3, #-1]
            ycomp = (int32_t)(*(pLum +j));
900031d8:	f811 7c01 	ldrb.w	r7, [r1, #-1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900031dc:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
900031e0:	4427      	add	r7, r4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900031e2:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900031e6:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900031ea:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900031ee:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900031f0:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900031f2:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900031f4:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900031f8:	eb07 4626 	add.w	r6, r7, r6, asr #16
900031fc:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003200:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003204:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90003208:	08fe      	lsrs	r6, r7, #3
9000320a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9000320e:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90003212:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003216:	81ee      	strh	r6, [r5, #14]
    for(i= 0; i <  8; i++)
90003218:	9d01      	ldr	r5, [sp, #4]
9000321a:	3d01      	subs	r5, #1
9000321c:	9501      	str	r5, [sp, #4]
9000321e:	f47f aed5 	bne.w	90002fcc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x7c>
90003222:	e6b7      	b.n	90002f94 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
  }
  return numberMCU;
}
90003224:	ee17 0a90 	vmov	r0, s15
90003228:	b009      	add	sp, #36	; 0x24
9000322a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000322e:	bf00      	nop
90003230:	aaaaaaab 	.word	0xaaaaaaab
90003234:	2400b9b4 	.word	0x2400b9b4
90003238:	90029b74 	.word	0x90029b74
9000323c:	2400a134 	.word	0x2400a134
90003240:	2400a534 	.word	0x2400a534
90003244:	24009934 	.word	0x24009934
90003248:	24009d34 	.word	0x24009d34

9000324c <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
9000324c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90003250:	eb02 1a93 	add.w	sl, r2, r3, lsr #6
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90003254:	099c      	lsrs	r4, r3, #6
  while(currentMCU < (numberMCU + BlockIndex))
90003256:	4552      	cmp	r2, sl
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90003258:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
9000325c:	f080 8088 	bcs.w	90003370 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90003260:	4b45      	ldr	r3, [pc, #276]	; (90003378 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x12c>)

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90003262:	e9d3 9809 	ldrd	r9, r8, [r3, #36]	; 0x24
    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90003266:	691e      	ldr	r6, [r3, #16]
90003268:	e003      	b.n	90003272 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x26>
  while(currentMCU < (numberMCU + BlockIndex))
9000326a:	4552      	cmp	r2, sl

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
9000326c:	f100 0040 	add.w	r0, r0, #64	; 0x40
  while(currentMCU < (numberMCU + BlockIndex))
90003270:	d07e      	beq.n	90003370 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90003272:	00d3      	lsls	r3, r2, #3
    currentMCU++;
90003274:	4604      	mov	r4, r0
90003276:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000327a:	3201      	adds	r2, #1
9000327c:	fbb3 f5f9 	udiv	r5, r3, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90003280:	fb09 3315 	mls	r3, r9, r5, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90003284:	fb08 f505 	mul.w	r5, r8, r5
90003288:	005b      	lsls	r3, r3, #1
9000328a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000328e:	429e      	cmp	r6, r3
90003290:	d9eb      	bls.n	9000326a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
          ySample =   (uint32_t)(*pLum);
90003292:	f894 c000 	ldrb.w	ip, [r4]
      pOutAddr = pOutBuffer + refline;
90003296:	18cd      	adds	r5, r1, r3
          pLum++;
90003298:	3408      	adds	r4, #8
    for(i= 0; i <  8; i++)
9000329a:	f1be 0e01 	subs.w	lr, lr, #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
9000329e:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900032a2:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900032a6:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900032aa:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900032ae:	ea47 070c 	orr.w	r7, r7, ip
900032b2:	52cf      	strh	r7, [r1, r3]
        refline += JPEG_ConvertorParams.ScaledWidth;
900032b4:	4443      	add	r3, r8
          ySample =   (uint32_t)(*pLum);
900032b6:	f814 cc07 	ldrb.w	ip, [r4, #-7]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900032ba:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900032be:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900032c2:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900032c6:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900032ca:	ea47 070c 	orr.w	r7, r7, ip
900032ce:	806f      	strh	r7, [r5, #2]
          ySample =   (uint32_t)(*pLum);
900032d0:	f814 cc06 	ldrb.w	ip, [r4, #-6]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900032d4:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900032d8:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900032dc:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900032e0:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900032e4:	ea47 070c 	orr.w	r7, r7, ip
900032e8:	80af      	strh	r7, [r5, #4]
          ySample =   (uint32_t)(*pLum);
900032ea:	f814 cc05 	ldrb.w	ip, [r4, #-5]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900032ee:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900032f2:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900032f6:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900032fa:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900032fe:	ea47 070c 	orr.w	r7, r7, ip
90003302:	80ef      	strh	r7, [r5, #6]
          ySample =   (uint32_t)(*pLum);
90003304:	f814 cc04 	ldrb.w	ip, [r4, #-4]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003308:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000330c:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003310:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003314:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003318:	ea47 070c 	orr.w	r7, r7, ip
9000331c:	812f      	strh	r7, [r5, #8]
          ySample =   (uint32_t)(*pLum);
9000331e:	f814 cc03 	ldrb.w	ip, [r4, #-3]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003322:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003326:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000332a:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000332e:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003332:	ea47 070c 	orr.w	r7, r7, ip
90003336:	816f      	strh	r7, [r5, #10]
          ySample =   (uint32_t)(*pLum);
90003338:	f814 cc02 	ldrb.w	ip, [r4, #-2]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
9000333c:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003340:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003344:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003348:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000334c:	ea47 070c 	orr.w	r7, r7, ip
90003350:	81af      	strh	r7, [r5, #12]
          ySample =   (uint32_t)(*pLum);
90003352:	f814 cc01 	ldrb.w	ip, [r4, #-1]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003356:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000335a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000335e:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003362:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003366:	ea47 070c 	orr.w	r7, r7, ip
9000336a:	81ef      	strh	r7, [r5, #14]
    for(i= 0; i <  8; i++)
9000336c:	d18f      	bne.n	9000328e <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
9000336e:	e77c      	b.n	9000326a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
  }
  return numberMCU;
}
90003370:	ee17 0a90 	vmov	r0, s15
90003374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90003378:	2400b9b4 	.word	0x2400b9b4

9000337c <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
9000337c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pChrom;

  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
90003380:	0a1c      	lsrs	r4, r3, #8
{
90003382:	b083      	sub	sp, #12
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90003384:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
90003388:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
9000338c:	429a      	cmp	r2, r3
9000338e:	9300      	str	r3, [sp, #0]
90003390:	f080 8129 	bcs.w	900035e6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90003394:	4b96      	ldr	r3, [pc, #600]	; (900035f0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x274>)
        pOutAddr = pOutBuffer+ refline;

          for(j=0; j < 8; j++)
          {
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003396:	f8df c25c 	ldr.w	ip, [pc, #604]	; 900035f4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x278>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000339a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000339c:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900033a0:	691e      	ldr	r6, [r3, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900033a2:	9401      	str	r4, [sp, #4]
900033a4:	e005      	b.n	900033b2 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x36>
  while(currentMCU < (numberMCU + BlockIndex))
900033a6:	9b00      	ldr	r3, [sp, #0]

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
900033a8:	f500 7080 	add.w	r0, r0, #256	; 0x100
  while(currentMCU < (numberMCU + BlockIndex))
900033ac:	429a      	cmp	r2, r3
900033ae:	f000 811a 	beq.w	900035e6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900033b2:	00d3      	lsls	r3, r2, #3
900033b4:	9c01      	ldr	r4, [sp, #4]
900033b6:	3201      	adds	r2, #1
    currentMCU++;
900033b8:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900033bc:	fbb3 f5f4 	udiv	r5, r3, r4
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
900033c0:	fb04 3415 	mls	r4, r4, r5, r3
    currentMCU++;
900033c4:	4603      	mov	r3, r0
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900033c6:	fb08 f505 	mul.w	r5, r8, r5
900033ca:	0064      	lsls	r4, r4, #1
900033cc:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900033d0:	42a6      	cmp	r6, r4
900033d2:	d9e8      	bls.n	900033a6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
            color_k = (int32_t)(*(pChrom + 192));
900033d4:	f893 a0c0 	ldrb.w	sl, [r3, #192]	; 0xc0
        pOutAddr = pOutBuffer+ refline;
900033d8:	190f      	adds	r7, r1, r4
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900033da:	f893 9040 	ldrb.w	r9, [r3, #64]	; 0x40
    for(i= 0; i <  8; i++)
900033de:	f1be 0e01 	subs.w	lr, lr, #1
            pChrom++;
900033e2:	f103 0308 	add.w	r3, r3, #8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900033e6:	fb19 f90a 	smulbb	r9, r9, sl
900033ea:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033ee:	f813 5c08 	ldrb.w	r5, [r3, #-8]
900033f2:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033f6:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033fa:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033fe:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003402:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003406:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000340a:	f893 9078 	ldrb.w	r9, [r3, #120]	; 0x78
9000340e:	fb19 f90a 	smulbb	r9, r9, sl
90003412:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003416:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000341a:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000341c:	530d      	strh	r5, [r1, r4]
        refline += JPEG_ConvertorParams.ScaledWidth;
9000341e:	4444      	add	r4, r8
            color_k = (int32_t)(*(pChrom + 192));
90003420:	f893 a0b9 	ldrb.w	sl, [r3, #185]	; 0xb9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003424:	f893 9039 	ldrb.w	r9, [r3, #57]	; 0x39
90003428:	fb19 f90a 	smulbb	r9, r9, sl
9000342c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003430:	f813 5c07 	ldrb.w	r5, [r3, #-7]
90003434:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003438:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000343c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003440:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003444:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003448:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000344c:	f893 9079 	ldrb.w	r9, [r3, #121]	; 0x79
90003450:	fb19 f90a 	smulbb	r9, r9, sl
90003454:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003458:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000345c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000345e:	807d      	strh	r5, [r7, #2]
            color_k = (int32_t)(*(pChrom + 192));
90003460:	f893 a0ba 	ldrb.w	sl, [r3, #186]	; 0xba
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003464:	f893 903a 	ldrb.w	r9, [r3, #58]	; 0x3a
90003468:	fb19 f90a 	smulbb	r9, r9, sl
9000346c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003470:	f813 5c06 	ldrb.w	r5, [r3, #-6]
90003474:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003478:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000347c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003480:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003484:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003488:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000348c:	f893 907a 	ldrb.w	r9, [r3, #122]	; 0x7a
90003490:	fb19 f90a 	smulbb	r9, r9, sl
90003494:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003498:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000349c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000349e:	80bd      	strh	r5, [r7, #4]
            color_k = (int32_t)(*(pChrom + 192));
900034a0:	f893 a0bb 	ldrb.w	sl, [r3, #187]	; 0xbb
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034a4:	f893 903b 	ldrb.w	r9, [r3, #59]	; 0x3b
900034a8:	fb19 f90a 	smulbb	r9, r9, sl
900034ac:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034b0:	f813 5c05 	ldrb.w	r5, [r3, #-5]
900034b4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034b8:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034bc:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034c0:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900034c4:	ea4f 2595 	mov.w	r5, r5, lsr #10
900034c8:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900034cc:	f893 907b 	ldrb.w	r9, [r3, #123]	; 0x7b
900034d0:	fb19 f90a 	smulbb	r9, r9, sl
900034d4:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034d8:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900034dc:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
900034de:	80fd      	strh	r5, [r7, #6]
            color_k = (int32_t)(*(pChrom + 192));
900034e0:	f893 a0bc 	ldrb.w	sl, [r3, #188]	; 0xbc
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034e4:	f893 903c 	ldrb.w	r9, [r3, #60]	; 0x3c
900034e8:	fb19 f90a 	smulbb	r9, r9, sl
900034ec:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034f0:	f813 5c04 	ldrb.w	r5, [r3, #-4]
900034f4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034f8:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034fc:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003500:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003504:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003508:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000350c:	f893 907c 	ldrb.w	r9, [r3, #124]	; 0x7c
90003510:	fb19 f90a 	smulbb	r9, r9, sl
90003514:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003518:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000351c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000351e:	813d      	strh	r5, [r7, #8]
            color_k = (int32_t)(*(pChrom + 192));
90003520:	f893 a0bd 	ldrb.w	sl, [r3, #189]	; 0xbd
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003524:	f893 903d 	ldrb.w	r9, [r3, #61]	; 0x3d
90003528:	fb19 f90a 	smulbb	r9, r9, sl
9000352c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003530:	f813 5c03 	ldrb.w	r5, [r3, #-3]
90003534:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003538:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000353c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003540:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003544:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003548:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000354c:	f893 907d 	ldrb.w	r9, [r3, #125]	; 0x7d
90003550:	fb19 f90a 	smulbb	r9, r9, sl
90003554:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003558:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000355c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000355e:	817d      	strh	r5, [r7, #10]
            color_k = (int32_t)(*(pChrom + 192));
90003560:	f893 a0be 	ldrb.w	sl, [r3, #190]	; 0xbe
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003564:	f813 9c02 	ldrb.w	r9, [r3, #-2]
90003568:	fb19 f90a 	smulbb	r9, r9, sl
9000356c:	fbac 5909 	umull	r5, r9, ip, r9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003570:	f893 503e 	ldrb.w	r5, [r3, #62]	; 0x3e
90003574:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003578:	ea4f 2999 	mov.w	r9, r9, lsr #10
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000357c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003580:	ea4f 2555 	mov.w	r5, r5, lsr #9
90003584:	ea4f 1545 	mov.w	r5, r5, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003588:	ea45 25c9 	orr.w	r5, r5, r9, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000358c:	f893 907e 	ldrb.w	r9, [r3, #126]	; 0x7e
90003590:	fb19 f90a 	smulbb	r9, r9, sl
90003594:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003598:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000359c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000359e:	81bd      	strh	r5, [r7, #12]
            color_k = (int32_t)(*(pChrom + 192));
900035a0:	f893 a0bf 	ldrb.w	sl, [r3, #191]	; 0xbf
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900035a4:	f893 903f 	ldrb.w	r9, [r3, #63]	; 0x3f
900035a8:	fb19 f90a 	smulbb	r9, r9, sl
900035ac:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900035b0:	f813 5c01 	ldrb.w	r5, [r3, #-1]
900035b4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900035b8:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900035bc:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900035c0:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900035c4:	ea4f 2595 	mov.w	r5, r5, lsr #10
900035c8:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900035cc:	f893 907f 	ldrb.w	r9, [r3, #127]	; 0x7f
900035d0:	fb19 f90a 	smulbb	r9, r9, sl
900035d4:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900035d8:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900035dc:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
900035de:	81fd      	strh	r5, [r7, #14]
    for(i= 0; i <  8; i++)
900035e0:	f47f aef6 	bne.w	900033d0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x54>
900035e4:	e6df      	b.n	900033a6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
  }
  return numberMCU;
}
900035e6:	ee17 0a90 	vmov	r0, s15
900035ea:	b003      	add	sp, #12
900035ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900035f0:	2400b9b4 	.word	0x2400b9b4
900035f4:	80808081 	.word	0x80808081

900035f8 <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
900035f8:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
900035fa:	68c3      	ldr	r3, [r0, #12]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
900035fc:	6805      	ldr	r5, [r0, #0]
900035fe:	4c3e      	ldr	r4, [pc, #248]	; (900036f8 <TGFX_JPEG_GetDecodeColorConvertFunc+0x100>)
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90003600:	2d10      	cmp	r5, #16
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
90003602:	60a3      	str	r3, [r4, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90003604:	6025      	str	r5, [r4, #0]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
90003606:	e9d0 7601 	ldrd	r7, r6, [r0, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9000360a:	fb06 f003 	mul.w	r0, r6, r3
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
9000360e:	60e6      	str	r6, [r4, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90003610:	ea4f 0040 	mov.w	r0, r0, lsl #1
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
90003614:	6067      	str	r7, [r4, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90003616:	6120      	str	r0, [r4, #16]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90003618:	d027      	beq.n	9000366a <TGFX_JPEG_GetDecodeColorConvertFunc+0x72>
      }
      JPEG_ConvertorParams.H_factor = 8;
      JPEG_ConvertorParams.V_factor  = 8;
    }
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
9000361a:	b9ed      	cbnz	r5, 90003658 <TGFX_JPEG_GetDecodeColorConvertFunc+0x60>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
9000361c:	4837      	ldr	r0, [pc, #220]	; (900036fc <TGFX_JPEG_GetDecodeColorConvertFunc+0x104>)
9000361e:	6008      	str	r0, [r1, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;

    if(JPEG_ConvertorParams.LineOffset != 0)
90003620:	f013 0107 	ands.w	r1, r3, #7
90003624:	d02b      	beq.n	9000367e <TGFX_JPEG_GetDecodeColorConvertFunc+0x86>

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;

    if(JPEG_ConvertorParams.LineOffset != 0)
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
90003626:	f1c1 0108 	rsb	r1, r1, #8
      JPEG_ConvertorParams.H_factor = 16;
9000362a:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
9000362c:	6161      	str	r1, [r4, #20]
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
9000362e:	4419      	add	r1, r3
90003630:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003632:	0059      	lsls	r1, r3, #1

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90003634:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003636:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
90003638:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
9000363c:	3301      	adds	r3, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
9000363e:	fbb6 f1f5 	udiv	r1, r6, r5
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
90003642:	fb05 6611 	mls	r6, r5, r1, r6
90003646:	b106      	cbz	r6, 9000364a <TGFX_JPEG_GetDecodeColorConvertFunc+0x52>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
90003648:	3101      	adds	r1, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
9000364a:	fb01 f303 	mul.w	r3, r1, r3
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
9000364e:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
90003650:	62e3      	str	r3, [r4, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
90003652:	6013      	str	r3, [r2, #0]
}
90003654:	bcf0      	pop	{r4, r5, r6, r7}
90003656:	4770      	bx	lr
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
90003658:	2d30      	cmp	r5, #48	; 0x30
9000365a:	d119      	bne.n	90003690 <TGFX_JPEG_GetDecodeColorConvertFunc+0x98>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
9000365c:	4828      	ldr	r0, [pc, #160]	; (90003700 <TGFX_JPEG_GetDecodeColorConvertFunc+0x108>)
9000365e:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
90003660:	f013 0107 	ands.w	r1, r3, #7
90003664:	d1df      	bne.n	90003626 <TGFX_JPEG_GetDecodeColorConvertFunc+0x2e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
90003666:	6161      	str	r1, [r4, #20]
90003668:	e00a      	b.n	90003680 <TGFX_JPEG_GetDecodeColorConvertFunc+0x88>
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
9000366a:	2f01      	cmp	r7, #1
9000366c:	d024      	beq.n	900036b8 <TGFX_JPEG_GetDecodeColorConvertFunc+0xc0>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
9000366e:	2f02      	cmp	r7, #2
90003670:	d011      	beq.n	90003696 <TGFX_JPEG_GetDecodeColorConvertFunc+0x9e>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
90003672:	4824      	ldr	r0, [pc, #144]	; (90003704 <TGFX_JPEG_GetDecodeColorConvertFunc+0x10c>)
90003674:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
90003676:	f013 0107 	ands.w	r1, r3, #7
9000367a:	d1d4      	bne.n	90003626 <TGFX_JPEG_GetDecodeColorConvertFunc+0x2e>
9000367c:	e7f3      	b.n	90003666 <TGFX_JPEG_GetDecodeColorConvertFunc+0x6e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
9000367e:	6165      	str	r5, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003680:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.H_factor = 16;
90003682:	2508      	movs	r5, #8
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90003684:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90003686:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003688:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
9000368a:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
9000368e:	e7d6      	b.n	9000363e <TGFX_JPEG_GetDecodeColorConvertFunc+0x46>
    return HAL_ERROR; /* Color space Not supported*/
90003690:	2001      	movs	r0, #1
}
90003692:	bcf0      	pop	{r4, r5, r6, r7}
90003694:	4770      	bx	lr
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
90003696:	481c      	ldr	r0, [pc, #112]	; (90003708 <TGFX_JPEG_GetDecodeColorConvertFunc+0x110>)
      JPEG_ConvertorParams.H_factor = 16;
90003698:	61e5      	str	r5, [r4, #28]
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
9000369a:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
9000369c:	f013 010f 	ands.w	r1, r3, #15
900036a0:	d022      	beq.n	900036e8 <TGFX_JPEG_GetDecodeColorConvertFunc+0xf0>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
900036a2:	f1c1 0110 	rsb	r1, r1, #16
      JPEG_ConvertorParams.V_factor  = 8;
900036a6:	2508      	movs	r5, #8
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
900036a8:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900036aa:	4419      	add	r1, r3
      JPEG_ConvertorParams.V_factor  = 8;
900036ac:	6225      	str	r5, [r4, #32]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900036ae:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036b0:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900036b2:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036b4:	62a1      	str	r1, [r4, #40]	; 0x28
900036b6:	e7c1      	b.n	9000363c <TGFX_JPEG_GetDecodeColorConvertFunc+0x44>
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
900036b8:	4814      	ldr	r0, [pc, #80]	; (9000370c <TGFX_JPEG_GetDecodeColorConvertFunc+0x114>)
900036ba:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900036bc:	f013 010f 	ands.w	r1, r3, #15
900036c0:	d107      	bne.n	900036d2 <TGFX_JPEG_GetDecodeColorConvertFunc+0xda>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
900036c2:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036c4:	0059      	lsls	r1, r3, #1
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900036c6:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900036c8:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036ca:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
900036cc:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
900036d0:	e7b5      	b.n	9000363e <TGFX_JPEG_GetDecodeColorConvertFunc+0x46>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
900036d2:	f1c1 0110 	rsb	r1, r1, #16
900036d6:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900036d8:	4419      	add	r1, r3
900036da:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036dc:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900036de:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036e0:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
900036e2:	e9c4 5507 	strd	r5, r5, [r4, #28]
900036e6:	e7a9      	b.n	9000363c <TGFX_JPEG_GetDecodeColorConvertFunc+0x44>
900036e8:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
900036ea:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036ec:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.V_factor  = 8;
900036ee:	e9c4 5308 	strd	r5, r3, [r4, #32]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036f2:	62a1      	str	r1, [r4, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900036f4:	091b      	lsrs	r3, r3, #4
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
900036f6:	e7a2      	b.n	9000363e <TGFX_JPEG_GetDecodeColorConvertFunc+0x46>
900036f8:	2400b9b4 	.word	0x2400b9b4
900036fc:	9000324d 	.word	0x9000324d
90003700:	9000337d 	.word	0x9000337d
90003704:	90002f51 	.word	0x90002f51
90003708:	90002c7d 	.word	0x90002c7d
9000370c:	90002a61 	.word	0x90002a61

90003710 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
90003710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90003714:	f8df c12c 	ldr.w	ip, [pc, #300]	; 90003844 <TGFX_JPEG_InitColorTables+0x134>
90003718:	b0a5      	sub	sp, #148	; 0x94
9000371a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 90003848 <TGFX_JPEG_InitColorTables+0x138>
9000371e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90003722:	f8df e128 	ldr.w	lr, [pc, #296]	; 9000384c <TGFX_JPEG_InitColorTables+0x13c>
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
  int32_t i;

  for (i = 0; i <= 255; i++)
90003726:	2300      	movs	r3, #0
90003728:	4f3d      	ldr	r7, [pc, #244]	; (90003820 <TGFX_JPEG_InitColorTables+0x110>)
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000372a:	f64e 3b2f 	movw	fp, #60207	; 0xeb2f
9000372e:	4e3d      	ldr	r6, [pc, #244]	; (90003824 <TGFX_JPEG_InitColorTables+0x114>)
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003730:	f249 4ad0 	movw	sl, #38096	; 0x94d0
90003734:	4d3c      	ldr	r5, [pc, #240]	; (90003828 <TGFX_JPEG_InitColorTables+0x118>)
  for (i = 0; i <= 255; i++)
90003736:	f644 498b 	movw	r9, #19595	; 0x4c8b
9000373a:	4c3c      	ldr	r4, [pc, #240]	; (9000382c <TGFX_JPEG_InitColorTables+0x11c>)
9000373c:	483c      	ldr	r0, [pc, #240]	; (90003830 <TGFX_JPEG_InitColorTables+0x120>)
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000373e:	f249 6245 	movw	r2, #38469	; 0x9645
90003742:	fb02 f203 	mul.w	r2, r2, r3
90003746:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9000374a:	1412      	asrs	r2, r2, #16
9000374c:	f84e 2f04 	str.w	r2, [lr, #4]!
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003750:	f641 522f 	movw	r2, #7471	; 0x1d2f
90003754:	fb02 f203 	mul.w	r2, r2, r3
90003758:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9000375c:	1412      	asrs	r2, r2, #16
9000375e:	f84c 2f04 	str.w	r2, [ip, #4]!
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003762:	4a34      	ldr	r2, [pc, #208]	; (90003834 <TGFX_JPEG_InitColorTables+0x124>)
90003764:	fb02 f203 	mul.w	r2, r2, r3
90003768:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9000376c:	1412      	asrs	r2, r2, #16
9000376e:	f847 2f04 	str.w	r2, [r7, #4]!
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003772:	4a31      	ldr	r2, [pc, #196]	; (90003838 <TGFX_JPEG_InitColorTables+0x128>)
90003774:	fb02 f203 	mul.w	r2, r2, r3
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003778:	3301      	adds	r3, #1
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000377a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= 255; i++)
9000377e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003782:	ea4f 4222 	mov.w	r2, r2, asr #16
90003786:	f846 2f04 	str.w	r2, [r6, #4]!
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000378a:	4a2c      	ldr	r2, [pc, #176]	; (9000383c <TGFX_JPEG_InitColorTables+0x12c>)
9000378c:	fb02 b203 	mla	r2, r2, r3, fp
90003790:	ea4f 4222 	mov.w	r2, r2, asr #16
90003794:	f844 2f04 	str.w	r2, [r4, #4]!
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003798:	4a29      	ldr	r2, [pc, #164]	; (90003840 <TGFX_JPEG_InitColorTables+0x130>)
9000379a:	fb02 a203 	mla	r2, r2, r3, sl
9000379e:	ea4f 4222 	mov.w	r2, r2, asr #16
900037a2:	f840 2f04 	str.w	r2, [r0, #4]!
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900037a6:	ea4f 4221 	mov.w	r2, r1, asr #16
  for (i = 0; i <= 255; i++)
900037aa:	4449      	add	r1, r9
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900037ac:	f848 2f04 	str.w	r2, [r8, #4]!
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900037b0:	f343 024f 	sbfx	r2, r3, #1, #16
900037b4:	f845 2f04 	str.w	r2, [r5, #4]!
  for (i = 0; i <= 255; i++)
900037b8:	d1c1      	bne.n	9000373e <TGFX_JPEG_InitColorTables+0x2e>
900037ba:	f8df e094 	ldr.w	lr, [pc, #148]	; 90003850 <TGFX_JPEG_InitColorTables+0x140>
900037be:	2138      	movs	r1, #56	; 0x38
void TGFX_JPEG_Init_MCU_LUT(void)
{
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
900037c0:	f04f 0c00 	mov.w	ip, #0
900037c4:	e007      	b.n	900037d6 <TGFX_JPEG_InitColorTables+0xc6>
900037c6:	f10c 0c01 	add.w	ip, ip, #1
900037ca:	4641      	mov	r1, r8
900037cc:	f10e 0e20 	add.w	lr, lr, #32
900037d0:	f1bc 0f10 	cmp.w	ip, #16
900037d4:	d03e      	beq.n	90003854 <TGFX_JPEG_InitColorTables+0x144>
  {
    for(j = 0; j < 16; j++)
    {
      offset =  j + (i*8);
      if((j>=8) && (i>=8)) offset+= 120;
900037d6:	f1bc 0f07 	cmp.w	ip, #7
900037da:	f101 0808 	add.w	r8, r1, #8
900037de:	4672      	mov	r2, lr
900037e0:	f04f 0001 	mov.w	r0, #1
900037e4:	bf94      	ite	ls
900037e6:	2600      	movls	r6, #0
900037e8:	2601      	movhi	r6, #1
900037ea:	fa1f f388 	uxth.w	r3, r8
900037ee:	2400      	movs	r4, #0
900037f0:	2c07      	cmp	r4, #7
900037f2:	f1a1 0538 	sub.w	r5, r1, #56	; 0x38
900037f6:	bf94      	ite	ls
900037f8:	2700      	movls	r7, #0
900037fa:	2701      	movhi	r7, #1
900037fc:	2f00      	cmp	r7, #0
900037fe:	f000 8407 	beq.w	90004010 <TGFX_JPEG_InitColorTables+0x900>
90003802:	2e00      	cmp	r6, #0
90003804:	f000 8404 	beq.w	90004010 <TGFX_JPEG_InitColorTables+0x900>
90003808:	f101 0540 	add.w	r5, r1, #64	; 0x40
    for(j = 0; j < 16; j++)
9000380c:	2810      	cmp	r0, #16
      else  if((j>=8) && (i<8)) offset+= 56;
      else  if((j<8) && (i>=8)) offset+= 64;

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
9000380e:	8015      	strh	r5, [r2, #0]
    for(j = 0; j < 16; j++)
90003810:	d0d9      	beq.n	900037c6 <TGFX_JPEG_InitColorTables+0xb6>
90003812:	3301      	adds	r3, #1
90003814:	3401      	adds	r4, #1
90003816:	3001      	adds	r0, #1
90003818:	3101      	adds	r1, #1
9000381a:	3202      	adds	r2, #2
9000381c:	b29b      	uxth	r3, r3
9000381e:	e7e7      	b.n	900037f0 <TGFX_JPEG_InitColorTables+0xe0>
90003820:	2400c570 	.word	0x2400c570
90003824:	2400a930 	.word	0x2400a930
90003828:	24008d30 	.word	0x24008d30
9000382c:	2400ad30 	.word	0x2400ad30
90003830:	24009130 	.word	0x24009130
90003834:	ffffd4d1 	.word	0xffffd4d1
90003838:	ffffab30 	.word	0xffffab30
9000383c:	ffff94d1 	.word	0xffff94d1
90003840:	ffffeb30 	.word	0xffffeb30
90003844:	24009530 	.word	0x24009530
90003848:	2400c970 	.word	0x2400c970
9000384c:	2400b130 	.word	0x2400b130
90003850:	2400c374 	.word	0x2400c374
90003854:	4b07      	ldr	r3, [pc, #28]	; (90003874 <TGFX_JPEG_InitColorTables+0x164>)
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
90003856:	2000      	movs	r0, #0
90003858:	4907      	ldr	r1, [pc, #28]	; (90003878 <TGFX_JPEG_InitColorTables+0x168>)
  for(i = 0; i < 16; i++)
9000385a:	f04f 0c80 	mov.w	ip, #128	; 0x80
9000385e:	9304      	str	r3, [sp, #16]
90003860:	4b06      	ldr	r3, [pc, #24]	; (9000387c <TGFX_JPEG_InitColorTables+0x16c>)
90003862:	4a07      	ldr	r2, [pc, #28]	; (90003880 <TGFX_JPEG_InitColorTables+0x170>)
90003864:	9303      	str	r3, [sp, #12]
90003866:	4b07      	ldr	r3, [pc, #28]	; (90003884 <TGFX_JPEG_InitColorTables+0x174>)
90003868:	f8df e01c 	ldr.w	lr, [pc, #28]	; 90003888 <TGFX_JPEG_InitColorTables+0x178>
  for(i = 0; i < 16; i++)
9000386c:	469b      	mov	fp, r3
9000386e:	9002      	str	r0, [sp, #8]
90003870:	e00c      	b.n	9000388c <TGFX_JPEG_InitColorTables+0x17c>
90003872:	bf00      	nop
90003874:	2400b534 	.word	0x2400b534
90003878:	2400bbf4 	.word	0x2400bbf4
9000387c:	2400b734 	.word	0x2400b734
90003880:	2400be74 	.word	0x2400be74
90003884:	2400b9f4 	.word	0x2400b9f4
90003888:	2400c074 	.word	0x2400c074
  {
    for(j = 0; j < 16; j++)
    {
      offset = i*16 + j;

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000388c:	9802      	ldr	r0, [sp, #8]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000388e:	f10c 0501 	add.w	r5, ip, #1

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003892:	f10c 0640 	add.w	r6, ip, #64	; 0x40
90003896:	2400      	movs	r4, #0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003898:	0843      	lsrs	r3, r0, #1
  for(i = 0; i < 16; i++)
9000389a:	1c47      	adds	r7, r0, #1
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000389c:	b2ad      	uxth	r5, r5
9000389e:	2000      	movs	r0, #0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038a0:	00db      	lsls	r3, r3, #3
  for(i = 0; i < 16; i++)
900038a2:	9702      	str	r7, [sp, #8]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900038a4:	b2b6      	uxth	r6, r6
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900038a6:	9508      	str	r5, [sp, #32]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038a8:	b29b      	uxth	r3, r3
  for(i = 0; i < 16; i++)
900038aa:	3220      	adds	r2, #32
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900038ac:	9606      	str	r6, [sp, #24]
900038ae:	4626      	mov	r6, r4
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038b0:	f503 7580 	add.w	r5, r3, #256	; 0x100
900038b4:	f503 7a81 	add.w	sl, r3, #258	; 0x102
900038b8:	f203 1903 	addw	r9, r3, #259	; 0x103
  for(i = 0; i < 16; i++)
900038bc:	f10b 0b20 	add.w	fp, fp, #32
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038c0:	b2ad      	uxth	r5, r5
  for(i = 0; i < 16; i++)
900038c2:	3120      	adds	r1, #32
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038c4:	fa1f fa8a 	uxth.w	sl, sl
900038c8:	f365 060f 	bfi	r6, r5, #0, #16
900038cc:	fa1f f989 	uxth.w	r9, r9
900038d0:	f365 461f 	bfi	r6, r5, #16, #16
900038d4:	4635      	mov	r5, r6
900038d6:	9e04      	ldr	r6, [sp, #16]
900038d8:	9500      	str	r5, [sp, #0]
900038da:	4634      	mov	r4, r6
900038dc:	6035      	str	r5, [r6, #0]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900038de:	f10c 0541 	add.w	r5, ip, #65	; 0x41
900038e2:	b2ad      	uxth	r5, r5
900038e4:	950a      	str	r5, [sp, #40]	; 0x28
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900038e6:	f10c 0502 	add.w	r5, ip, #2
900038ea:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900038ee:	f10c 0542 	add.w	r5, ip, #66	; 0x42
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900038f2:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900038f6:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900038fa:	f10c 0503 	add.w	r5, ip, #3
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900038fe:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003902:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003906:	f10c 0543 	add.w	r5, ip, #67	; 0x43
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000390a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000390e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003912:	f10c 0504 	add.w	r5, ip, #4
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003916:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000391a:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000391e:	f10c 0544 	add.w	r5, ip, #68	; 0x44
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003922:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003926:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000392a:	f10c 0505 	add.w	r5, ip, #5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000392e:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003932:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003936:	f10c 0545 	add.w	r5, ip, #69	; 0x45
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000393a:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000393e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003942:	f10c 0506 	add.w	r5, ip, #6
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003946:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000394a:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000394e:	f10c 0546 	add.w	r5, ip, #70	; 0x46
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003952:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003956:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000395a:	f10c 0507 	add.w	r5, ip, #7
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000395e:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003962:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003966:	f10c 0547 	add.w	r5, ip, #71	; 0x47
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000396a:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000396e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003972:	f503 75a0 	add.w	r5, r3, #320	; 0x140
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003976:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000397a:	fa1f f885 	uxth.w	r8, r5

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000397e:	f503 75c0 	add.w	r5, r3, #384	; 0x180
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003982:	f8cd 8014 	str.w	r8, [sp, #20]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003986:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000398a:	f203 1501 	addw	r5, r3, #257	; 0x101
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000398e:	f8cd 801c 	str.w	r8, [sp, #28]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003992:	b2ad      	uxth	r5, r5
90003994:	f365 000f 	bfi	r0, r5, #0, #16
90003998:	f365 401f 	bfi	r0, r5, #16, #16
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000399c:	f203 1541 	addw	r5, r3, #321	; 0x141
900039a0:	fa1f f885 	uxth.w	r8, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039a4:	f203 1581 	addw	r5, r3, #385	; 0x181
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039a8:	6070      	str	r0, [r6, #4]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039aa:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039ae:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039b2:	f503 75a1 	add.w	r5, r3, #322	; 0x142
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039b6:	9001      	str	r0, [sp, #4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039b8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039bc:	f203 1047 	addw	r0, r3, #327	; 0x147
900039c0:	fa1f f885 	uxth.w	r8, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039c4:	f503 75c1 	add.w	r5, r3, #386	; 0x182
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039c8:	b280      	uxth	r0, r0
900039ca:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039ce:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039d2:	f203 1543 	addw	r5, r3, #323	; 0x143
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039d6:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039da:	fa1f f885 	uxth.w	r8, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039de:	f203 1583 	addw	r5, r3, #387	; 0x183
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039e2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039e6:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039ea:	f503 75a2 	add.w	r5, r3, #324	; 0x144
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039ee:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039f2:	f503 7882 	add.w	r8, r3, #260	; 0x104
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039f6:	b2af      	uxth	r7, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039f8:	f503 75c2 	add.w	r5, r3, #388	; 0x184
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039fc:	fa1f f888 	uxth.w	r8, r8
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a00:	9715      	str	r7, [sp, #84]	; 0x54
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a02:	b2af      	uxth	r7, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a04:	f203 1545 	addw	r5, r3, #325	; 0x145
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a08:	9717      	str	r7, [sp, #92]	; 0x5c
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a0a:	f203 1705 	addw	r7, r3, #261	; 0x105
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a0e:	b2ae      	uxth	r6, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a10:	f203 1585 	addw	r5, r3, #389	; 0x185
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a14:	b2bf      	uxth	r7, r7
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a16:	b2ad      	uxth	r5, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a18:	9619      	str	r6, [sp, #100]	; 0x64
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a1a:	f503 7683 	add.w	r6, r3, #262	; 0x106
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a1e:	9021      	str	r0, [sp, #132]	; 0x84
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a20:	951b      	str	r5, [sp, #108]	; 0x6c
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a22:	f503 75a3 	add.w	r5, r3, #326	; 0x146
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a26:	b2b6      	uxth	r6, r6
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003a28:	9803      	ldr	r0, [sp, #12]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a2a:	b2ad      	uxth	r5, r5
90003a2c:	951d      	str	r5, [sp, #116]	; 0x74
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a2e:	f503 75c3 	add.w	r5, r3, #390	; 0x186
90003a32:	b2ad      	uxth	r5, r5
90003a34:	951f      	str	r5, [sp, #124]	; 0x7c
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a36:	f203 1507 	addw	r5, r3, #263	; 0x107
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a3a:	f203 1387 	addw	r3, r3, #391	; 0x187
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a3e:	b2ad      	uxth	r5, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a40:	b29b      	uxth	r3, r3
90003a42:	9323      	str	r3, [sp, #140]	; 0x8c
90003a44:	2300      	movs	r3, #0
90003a46:	f36a 030f 	bfi	r3, sl, #0, #16
90003a4a:	f36a 431f 	bfi	r3, sl, #16, #16
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a4e:	f04f 0a00 	mov.w	sl, #0
90003a52:	f369 0a0f 	bfi	sl, r9, #0, #16
90003a56:	60a3      	str	r3, [r4, #8]
90003a58:	f369 4a1f 	bfi	sl, r9, #16, #16
90003a5c:	f04f 0900 	mov.w	r9, #0
90003a60:	f368 090f 	bfi	r9, r8, #0, #16
90003a64:	f8c4 a00c 	str.w	sl, [r4, #12]
90003a68:	f368 491f 	bfi	r9, r8, #16, #16
90003a6c:	f04f 0800 	mov.w	r8, #0
90003a70:	f367 080f 	bfi	r8, r7, #0, #16
90003a74:	f8c4 9010 	str.w	r9, [r4, #16]
90003a78:	f367 481f 	bfi	r8, r7, #16, #16
90003a7c:	2700      	movs	r7, #0
90003a7e:	f366 070f 	bfi	r7, r6, #0, #16
90003a82:	f8c4 8014 	str.w	r8, [r4, #20]
90003a86:	f366 471f 	bfi	r7, r6, #16, #16
90003a8a:	2600      	movs	r6, #0
90003a8c:	f365 060f 	bfi	r6, r5, #0, #16
90003a90:	61a7      	str	r7, [r4, #24]
90003a92:	f365 461f 	bfi	r6, r5, #16, #16
  for(i = 0; i < 16; i++)
90003a96:	f104 0520 	add.w	r5, r4, #32
90003a9a:	9504      	str	r5, [sp, #16]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003a9c:	2500      	movs	r5, #0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a9e:	61e6      	str	r6, [r4, #28]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003aa0:	f36c 050f 	bfi	r5, ip, #0, #16
90003aa4:	9c08      	ldr	r4, [sp, #32]
90003aa6:	f36c 451f 	bfi	r5, ip, #16, #16
  for(i = 0; i < 16; i++)
90003aaa:	f10c 0c08 	add.w	ip, ip, #8
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003aae:	6005      	str	r5, [r0, #0]
90003ab0:	2500      	movs	r5, #0
  for(i = 0; i < 16; i++)
90003ab2:	fa1f fc8c 	uxth.w	ip, ip
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003ab6:	f364 050f 	bfi	r5, r4, #0, #16
90003aba:	f364 451f 	bfi	r5, r4, #16, #16
90003abe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
90003ac0:	6045      	str	r5, [r0, #4]
90003ac2:	2500      	movs	r5, #0
90003ac4:	f364 050f 	bfi	r5, r4, #0, #16
90003ac8:	f364 451f 	bfi	r5, r4, #16, #16
90003acc:	9c10      	ldr	r4, [sp, #64]	; 0x40
90003ace:	6085      	str	r5, [r0, #8]
90003ad0:	2500      	movs	r5, #0
90003ad2:	f364 050f 	bfi	r5, r4, #0, #16
90003ad6:	f364 451f 	bfi	r5, r4, #16, #16
90003ada:	9c14      	ldr	r4, [sp, #80]	; 0x50
90003adc:	60c5      	str	r5, [r0, #12]
90003ade:	2500      	movs	r5, #0
90003ae0:	f364 050f 	bfi	r5, r4, #0, #16
90003ae4:	f364 451f 	bfi	r5, r4, #16, #16
90003ae8:	9c18      	ldr	r4, [sp, #96]	; 0x60
90003aea:	6105      	str	r5, [r0, #16]
90003aec:	2500      	movs	r5, #0
90003aee:	f364 050f 	bfi	r5, r4, #0, #16
90003af2:	f364 451f 	bfi	r5, r4, #16, #16
90003af6:	9c1c      	ldr	r4, [sp, #112]	; 0x70
90003af8:	6145      	str	r5, [r0, #20]
90003afa:	2500      	movs	r5, #0
90003afc:	f364 050f 	bfi	r5, r4, #0, #16
90003b00:	f364 451f 	bfi	r5, r4, #16, #16
90003b04:	9c20      	ldr	r4, [sp, #128]	; 0x80
90003b06:	6185      	str	r5, [r0, #24]
90003b08:	2500      	movs	r5, #0
90003b0a:	f364 050f 	bfi	r5, r4, #0, #16
90003b0e:	f364 451f 	bfi	r5, r4, #16, #16
  for(i = 0; i < 16; i++)
90003b12:	f100 0420 	add.w	r4, r0, #32
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003b16:	61c5      	str	r5, [r0, #28]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003b18:	2500      	movs	r5, #0
  for(i = 0; i < 16; i++)
90003b1a:	9403      	str	r4, [sp, #12]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003b1c:	9c05      	ldr	r4, [sp, #20]
90003b1e:	f364 050f 	bfi	r5, r4, #0, #16
90003b22:	f364 451f 	bfi	r5, r4, #16, #16
90003b26:	9c09      	ldr	r4, [sp, #36]	; 0x24
90003b28:	f84b 5c20 	str.w	r5, [fp, #-32]
90003b2c:	2500      	movs	r5, #0
90003b2e:	f364 050f 	bfi	r5, r4, #0, #16
90003b32:	f364 451f 	bfi	r5, r4, #16, #16
90003b36:	f84b 5c1c 	str.w	r5, [fp, #-28]
90003b3a:	2500      	movs	r5, #0
90003b3c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003b3e:	9806      	ldr	r0, [sp, #24]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003b40:	f364 050f 	bfi	r5, r4, #0, #16
90003b44:	f364 451f 	bfi	r5, r4, #16, #16
90003b48:	9c11      	ldr	r4, [sp, #68]	; 0x44
90003b4a:	f84b 5c18 	str.w	r5, [fp, #-24]
90003b4e:	2500      	movs	r5, #0
90003b50:	f364 050f 	bfi	r5, r4, #0, #16
90003b54:	f364 451f 	bfi	r5, r4, #16, #16
90003b58:	9c15      	ldr	r4, [sp, #84]	; 0x54
90003b5a:	f84b 5c14 	str.w	r5, [fp, #-20]
90003b5e:	2500      	movs	r5, #0
90003b60:	f364 050f 	bfi	r5, r4, #0, #16
90003b64:	f364 451f 	bfi	r5, r4, #16, #16
90003b68:	9c19      	ldr	r4, [sp, #100]	; 0x64
90003b6a:	f84b 5c10 	str.w	r5, [fp, #-16]
90003b6e:	2500      	movs	r5, #0
90003b70:	f364 050f 	bfi	r5, r4, #0, #16
90003b74:	f364 451f 	bfi	r5, r4, #16, #16
90003b78:	9c1d      	ldr	r4, [sp, #116]	; 0x74
90003b7a:	f84b 5c0c 	str.w	r5, [fp, #-12]
90003b7e:	2500      	movs	r5, #0
90003b80:	f364 050f 	bfi	r5, r4, #0, #16
90003b84:	f364 451f 	bfi	r5, r4, #16, #16
90003b88:	9c21      	ldr	r4, [sp, #132]	; 0x84
90003b8a:	f84b 5c08 	str.w	r5, [fp, #-8]
90003b8e:	2500      	movs	r5, #0
90003b90:	f364 050f 	bfi	r5, r4, #0, #16
90003b94:	f364 451f 	bfi	r5, r4, #16, #16
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b98:	2400      	movs	r4, #0
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003b9a:	f84b 5c04 	str.w	r5, [fp, #-4]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003b9e:	2500      	movs	r5, #0
90003ba0:	f360 050f 	bfi	r5, r0, #0, #16
90003ba4:	f360 451f 	bfi	r5, r0, #16, #16
90003ba8:	980a      	ldr	r0, [sp, #40]	; 0x28
90003baa:	f841 5c20 	str.w	r5, [r1, #-32]
90003bae:	2500      	movs	r5, #0
90003bb0:	f360 050f 	bfi	r5, r0, #0, #16
90003bb4:	f360 451f 	bfi	r5, r0, #16, #16
90003bb8:	980e      	ldr	r0, [sp, #56]	; 0x38
90003bba:	f841 5c1c 	str.w	r5, [r1, #-28]
90003bbe:	2500      	movs	r5, #0
90003bc0:	f360 050f 	bfi	r5, r0, #0, #16
90003bc4:	f360 451f 	bfi	r5, r0, #16, #16
90003bc8:	9812      	ldr	r0, [sp, #72]	; 0x48
90003bca:	f841 5c18 	str.w	r5, [r1, #-24]
90003bce:	2500      	movs	r5, #0
90003bd0:	f360 050f 	bfi	r5, r0, #0, #16
90003bd4:	f360 451f 	bfi	r5, r0, #16, #16
90003bd8:	9816      	ldr	r0, [sp, #88]	; 0x58
90003bda:	f841 5c14 	str.w	r5, [r1, #-20]
90003bde:	2500      	movs	r5, #0
90003be0:	f360 050f 	bfi	r5, r0, #0, #16
90003be4:	f360 451f 	bfi	r5, r0, #16, #16
90003be8:	981a      	ldr	r0, [sp, #104]	; 0x68
90003bea:	f841 5c10 	str.w	r5, [r1, #-16]
90003bee:	2500      	movs	r5, #0
90003bf0:	f360 050f 	bfi	r5, r0, #0, #16
90003bf4:	f360 451f 	bfi	r5, r0, #16, #16
90003bf8:	981e      	ldr	r0, [sp, #120]	; 0x78
90003bfa:	f841 5c0c 	str.w	r5, [r1, #-12]
90003bfe:	2500      	movs	r5, #0
90003c00:	f360 050f 	bfi	r5, r0, #0, #16
90003c04:	f360 451f 	bfi	r5, r0, #16, #16
90003c08:	9822      	ldr	r0, [sp, #136]	; 0x88
90003c0a:	f841 5c08 	str.w	r5, [r1, #-8]
90003c0e:	2500      	movs	r5, #0
90003c10:	f360 050f 	bfi	r5, r0, #0, #16
90003c14:	f360 451f 	bfi	r5, r0, #16, #16
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c18:	9807      	ldr	r0, [sp, #28]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003c1a:	f841 5c04 	str.w	r5, [r1, #-4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c1e:	2500      	movs	r5, #0
90003c20:	f360 050f 	bfi	r5, r0, #0, #16
90003c24:	f360 451f 	bfi	r5, r0, #16, #16
90003c28:	f842 5c20 	str.w	r5, [r2, #-32]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003c2c:	9d00      	ldr	r5, [sp, #0]
90003c2e:	f8ce 5000 	str.w	r5, [lr]
90003c32:	9801      	ldr	r0, [sp, #4]
90003c34:	f8ce 601c 	str.w	r6, [lr, #28]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c38:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
90003c3a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003c3c:	e9ce 0301 	strd	r0, r3, [lr, #4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c40:	2300      	movs	r3, #0
90003c42:	9817      	ldr	r0, [sp, #92]	; 0x5c
90003c44:	f366 030f 	bfi	r3, r6, #0, #16
90003c48:	f366 431f 	bfi	r3, r6, #16, #16
90003c4c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003c4e:	e9ce 8705 	strd	r8, r7, [lr, #20]
90003c52:	e9ce a903 	strd	sl, r9, [lr, #12]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c56:	f842 3c1c 	str.w	r3, [r2, #-28]
90003c5a:	2300      	movs	r3, #0
  for(i = 0; i < 16; i++)
90003c5c:	9f02      	ldr	r7, [sp, #8]
90003c5e:	f10e 0e20 	add.w	lr, lr, #32
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c62:	f366 030f 	bfi	r3, r6, #0, #16
  for(i = 0; i < 16; i++)
90003c66:	2f10      	cmp	r7, #16
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c68:	f366 431f 	bfi	r3, r6, #16, #16
90003c6c:	f842 3c18 	str.w	r3, [r2, #-24]
90003c70:	f04f 0300 	mov.w	r3, #0
90003c74:	f365 030f 	bfi	r3, r5, #0, #16
90003c78:	f365 431f 	bfi	r3, r5, #16, #16
90003c7c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
90003c7e:	f842 3c14 	str.w	r3, [r2, #-20]
90003c82:	f04f 0300 	mov.w	r3, #0
90003c86:	f365 040f 	bfi	r4, r5, #0, #16
90003c8a:	f360 030f 	bfi	r3, r0, #0, #16
90003c8e:	f365 441f 	bfi	r4, r5, #16, #16
90003c92:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
90003c94:	f360 431f 	bfi	r3, r0, #16, #16
90003c98:	f04f 0000 	mov.w	r0, #0
90003c9c:	f842 4c0c 	str.w	r4, [r2, #-12]
90003ca0:	f842 3c10 	str.w	r3, [r2, #-16]
90003ca4:	4603      	mov	r3, r0
90003ca6:	9c23      	ldr	r4, [sp, #140]	; 0x8c
90003ca8:	f365 000f 	bfi	r0, r5, #0, #16
90003cac:	f364 030f 	bfi	r3, r4, #0, #16
90003cb0:	f365 401f 	bfi	r0, r5, #16, #16
90003cb4:	f364 431f 	bfi	r3, r4, #16, #16
90003cb8:	e942 0302 	strd	r0, r3, [r2, #-8]
  for(i = 0; i < 16; i++)
90003cbc:	f47f ade6 	bne.w	9000388c <TGFX_JPEG_InitColorTables+0x17c>
  {
    for(j = 0; j < 8; j++)
    {
      offset = i*8 + j;

      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003cc0:	48db      	ldr	r0, [pc, #876]	; (90004030 <TGFX_JPEG_InitColorTables+0x920>)
90003cc2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
90003cc6:	49db      	ldr	r1, [pc, #876]	; (90004034 <TGFX_JPEG_InitColorTables+0x924>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003cc8:	6004      	str	r4, [r0, #0]
90003cca:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003cce:	4ada      	ldr	r2, [pc, #872]	; (90004038 <TGFX_JPEG_InitColorTables+0x928>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003cd0:	6044      	str	r4, [r0, #4]
90003cd2:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003cd6:	4bd9      	ldr	r3, [pc, #868]	; (9000403c <TGFX_JPEG_InitColorTables+0x92c>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003cd8:	6084      	str	r4, [r0, #8]
90003cda:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cde:	4fd8      	ldr	r7, [pc, #864]	; (90004040 <TGFX_JPEG_InitColorTables+0x930>)
90003ce0:	60c4      	str	r4, [r0, #12]
90003ce2:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003ce6:	4ed7      	ldr	r6, [pc, #860]	; (90004044 <TGFX_JPEG_InitColorTables+0x934>)
90003ce8:	6104      	str	r4, [r0, #16]
90003cea:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cee:	4dd6      	ldr	r5, [pc, #856]	; (90004048 <TGFX_JPEG_InitColorTables+0x938>)
90003cf0:	6144      	str	r4, [r0, #20]
90003cf2:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003cf6:	f8df b374 	ldr.w	fp, [pc, #884]	; 9000406c <TGFX_JPEG_InitColorTables+0x95c>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003cfa:	6184      	str	r4, [r0, #24]
90003cfc:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003d00:	f8df a36c 	ldr.w	sl, [pc, #876]	; 90004070 <TGFX_JPEG_InitColorTables+0x960>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003d04:	61c4      	str	r4, [r0, #28]
90003d06:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003d0a:	f8df 9368 	ldr.w	r9, [pc, #872]	; 90004074 <TGFX_JPEG_InitColorTables+0x964>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003d0e:	6204      	str	r4, [r0, #32]
90003d10:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003d14:	f8df 8360 	ldr.w	r8, [pc, #864]	; 90004078 <TGFX_JPEG_InitColorTables+0x968>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003d18:	6244      	str	r4, [r0, #36]	; 0x24
90003d1a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003d1e:	f8df e35c 	ldr.w	lr, [pc, #860]	; 9000407c <TGFX_JPEG_InitColorTables+0x96c>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003d22:	6284      	str	r4, [r0, #40]	; 0x28
90003d24:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d28:	62c4      	str	r4, [r0, #44]	; 0x2c
90003d2a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d2e:	6304      	str	r4, [r0, #48]	; 0x30
90003d30:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d34:	6344      	str	r4, [r0, #52]	; 0x34
90003d36:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d3a:	6384      	str	r4, [r0, #56]	; 0x38
90003d3c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d40:	63c4      	str	r4, [r0, #60]	; 0x3c
90003d42:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d46:	6404      	str	r4, [r0, #64]	; 0x40
90003d48:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d4c:	6444      	str	r4, [r0, #68]	; 0x44
90003d4e:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d52:	6484      	str	r4, [r0, #72]	; 0x48
90003d54:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d58:	64c4      	str	r4, [r0, #76]	; 0x4c
90003d5a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d5e:	6504      	str	r4, [r0, #80]	; 0x50
90003d60:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d64:	6544      	str	r4, [r0, #84]	; 0x54
90003d66:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d6a:	6584      	str	r4, [r0, #88]	; 0x58
90003d6c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d70:	65c4      	str	r4, [r0, #92]	; 0x5c
90003d72:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d76:	6604      	str	r4, [r0, #96]	; 0x60
90003d78:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d7c:	6644      	str	r4, [r0, #100]	; 0x64
90003d7e:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d82:	6684      	str	r4, [r0, #104]	; 0x68
90003d84:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d88:	66c4      	str	r4, [r0, #108]	; 0x6c
90003d8a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d8e:	6704      	str	r4, [r0, #112]	; 0x70
90003d90:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d94:	6744      	str	r4, [r0, #116]	; 0x74
90003d96:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d9a:	6784      	str	r4, [r0, #120]	; 0x78
90003d9c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003da0:	67c4      	str	r4, [r0, #124]	; 0x7c
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
90003da2:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003da6:	48a9      	ldr	r0, [pc, #676]	; (9000404c <TGFX_JPEG_InitColorTables+0x93c>)
90003da8:	e9c1 4000 	strd	r4, r0, [r1]
90003dac:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003db0:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003db4:	e9c1 4002 	strd	r4, r0, [r1, #8]
90003db8:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003dbc:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003dc0:	e9c1 4004 	strd	r4, r0, [r1, #16]
90003dc4:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003dc8:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003dcc:	e9c1 4006 	strd	r4, r0, [r1, #24]
90003dd0:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003dd4:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003dd8:	e9c1 4008 	strd	r4, r0, [r1, #32]
90003ddc:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003de0:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003de4:	e9c1 400a 	strd	r4, r0, [r1, #40]	; 0x28
90003de8:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003dec:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003df0:	e9c1 400c 	strd	r4, r0, [r1, #48]	; 0x30
90003df4:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003df8:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003dfc:	e9c1 400e 	strd	r4, r0, [r1, #56]	; 0x38
90003e00:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e04:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e08:	e9c1 4010 	strd	r4, r0, [r1, #64]	; 0x40
90003e0c:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e10:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e14:	e9c1 4012 	strd	r4, r0, [r1, #72]	; 0x48
90003e18:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e1c:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e20:	e9c1 4014 	strd	r4, r0, [r1, #80]	; 0x50
90003e24:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e28:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e2c:	e9c1 4016 	strd	r4, r0, [r1, #88]	; 0x58
90003e30:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e34:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e38:	e9c1 4018 	strd	r4, r0, [r1, #96]	; 0x60
90003e3c:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e40:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e44:	e9c1 401a 	strd	r4, r0, [r1, #104]	; 0x68
90003e48:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e4c:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e50:	e9c1 401c 	strd	r4, r0, [r1, #112]	; 0x70
90003e54:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e58:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e5c:	e9c1 401e 	strd	r4, r0, [r1, #120]	; 0x78
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003e60:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e64:	497a      	ldr	r1, [pc, #488]	; (90004050 <TGFX_JPEG_InitColorTables+0x940>)
90003e66:	f100 1006 	add.w	r0, r0, #393222	; 0x60006
90003e6a:	e9c2 4100 	strd	r4, r1, [r2]
90003e6e:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e72:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e76:	e9c2 0102 	strd	r0, r1, [r2, #8]
90003e7a:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e7e:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e82:	e9c2 4104 	strd	r4, r1, [r2, #16]
90003e86:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e8a:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e8e:	e9c2 0106 	strd	r0, r1, [r2, #24]
90003e92:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e96:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e9a:	e9c2 4108 	strd	r4, r1, [r2, #32]
90003e9e:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003ea2:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ea6:	e9c2 010a 	strd	r0, r1, [r2, #40]	; 0x28
90003eaa:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003eae:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003eb2:	e9c2 410c 	strd	r4, r1, [r2, #48]	; 0x30
90003eb6:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003eba:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ebe:	e9c2 010e 	strd	r0, r1, [r2, #56]	; 0x38
90003ec2:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003ec6:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003eca:	e9c2 4110 	strd	r4, r1, [r2, #64]	; 0x40
90003ece:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003ed2:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ed6:	e9c2 0112 	strd	r0, r1, [r2, #72]	; 0x48
90003eda:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003ede:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003ee2:	e9c2 4114 	strd	r4, r1, [r2, #80]	; 0x50
90003ee6:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003eea:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003eee:	e9c2 0116 	strd	r0, r1, [r2, #88]	; 0x58
90003ef2:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003ef6:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003efa:	e9c2 4118 	strd	r4, r1, [r2, #96]	; 0x60
90003efe:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003f02:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f06:	e9c2 011a 	strd	r0, r1, [r2, #104]	; 0x68
90003f0a:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003f0e:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f12:	e9c2 411c 	strd	r4, r1, [r2, #112]	; 0x70
90003f16:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003f1a:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003f1e:	e9c2 011e 	strd	r0, r1, [r2, #120]	; 0x78
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003f22:	f100 1006 	add.w	r0, r0, #393222	; 0x60006
90003f26:	f101 1106 	add.w	r1, r1, #393222	; 0x60006
90003f2a:	4a4a      	ldr	r2, [pc, #296]	; (90004054 <TGFX_JPEG_InitColorTables+0x944>)
90003f2c:	e9c3 4000 	strd	r4, r0, [r3]
90003f30:	e9c3 1202 	strd	r1, r2, [r3, #8]
90003f34:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f38:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f3c:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003f40:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003f44:	e9c3 4004 	strd	r4, r0, [r3, #16]
90003f48:	e9c3 1206 	strd	r1, r2, [r3, #24]
90003f4c:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f50:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f54:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003f58:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003f5c:	e9c3 4008 	strd	r4, r0, [r3, #32]
90003f60:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
90003f64:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f68:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f6c:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003f70:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003f74:	e9c3 400c 	strd	r4, r0, [r3, #48]	; 0x30
90003f78:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
90003f7c:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f80:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f84:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003f88:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003f8c:	e9c3 4010 	strd	r4, r0, [r3, #64]	; 0x40
90003f90:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
90003f94:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f98:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f9c:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003fa0:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003fa4:	e9c3 4014 	strd	r4, r0, [r3, #80]	; 0x50
90003fa8:	e9c3 1216 	strd	r1, r2, [r3, #88]	; 0x58
90003fac:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003fb0:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003fb4:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003fb8:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003fbc:	e9c3 4018 	strd	r4, r0, [r3, #96]	; 0x60
90003fc0:	e9c3 121a 	strd	r1, r2, [r3, #104]	; 0x68
90003fc4:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003fc8:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003fcc:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003fd0:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003fd4:	e9c3 401c 	strd	r4, r0, [r3, #112]	; 0x70
90003fd8:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78
  for(i = 0; i < 8; i++)
90003fdc:	4c1e      	ldr	r4, [pc, #120]	; (90004058 <TGFX_JPEG_InitColorTables+0x948>)
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003fde:	481f      	ldr	r0, [pc, #124]	; (9000405c <TGFX_JPEG_InitColorTables+0x94c>)
90003fe0:	491f      	ldr	r1, [pc, #124]	; (90004060 <TGFX_JPEG_InitColorTables+0x950>)
90003fe2:	4a20      	ldr	r2, [pc, #128]	; (90004064 <TGFX_JPEG_InitColorTables+0x954>)
90003fe4:	4b20      	ldr	r3, [pc, #128]	; (90004068 <TGFX_JPEG_InitColorTables+0x958>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003fe6:	ea4f 4c23 	mov.w	ip, r3, asr #16
  for (i = 0; i <= 255; i++)
90003fea:	445b      	add	r3, fp
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
90003fec:	f845 1f04 	str.w	r1, [r5, #4]!
  for (i = 0; i <= 255; i++)
90003ff0:	4449      	add	r1, r9
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003ff2:	f847 cf04 	str.w	ip, [r7, #4]!
  for (i = 0; i <= 255; i++)
90003ff6:	4573      	cmp	r3, lr
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003ff8:	ea4f 4c22 	mov.w	ip, r2, asr #16
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
90003ffc:	f844 0f04 	str.w	r0, [r4, #4]!
  for (i = 0; i <= 255; i++)
90004000:	4452      	add	r2, sl
90004002:	4440      	add	r0, r8
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90004004:	f846 cf04 	str.w	ip, [r6, #4]!
  for (i = 0; i <= 255; i++)
90004008:	d1ed      	bne.n	90003fe6 <TGFX_JPEG_InitColorTables+0x8d6>
}
9000400a:	b025      	add	sp, #148	; 0x94
9000400c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else  if((j>=8) && (i<8)) offset+= 56;
90004010:	f1bc 0f07 	cmp.w	ip, #7
90004014:	d803      	bhi.n	9000401e <TGFX_JPEG_InitColorTables+0x90e>
90004016:	b117      	cbz	r7, 9000401e <TGFX_JPEG_InitColorTables+0x90e>
90004018:	460d      	mov	r5, r1
9000401a:	f7ff bbf7 	b.w	9000380c <TGFX_JPEG_InitColorTables+0xfc>
      else  if((j<8) && (i>=8)) offset+= 64;
9000401e:	2c07      	cmp	r4, #7
90004020:	f63f abf4 	bhi.w	9000380c <TGFX_JPEG_InitColorTables+0xfc>
90004024:	2e00      	cmp	r6, #0
90004026:	f43f abf1 	beq.w	9000380c <TGFX_JPEG_InitColorTables+0xfc>
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
9000402a:	8013      	strh	r3, [r2, #0]
    for(j = 0; j < 16; j++)
9000402c:	f7ff bbf1 	b.w	90003812 <TGFX_JPEG_InitColorTables+0x102>
90004030:	2400c2f4 	.word	0x2400c2f4
90004034:	2400b934 	.word	0x2400b934
90004038:	2400bdf4 	.word	0x2400bdf4
9000403c:	2400c274 	.word	0x2400c274
90004040:	2400a530 	.word	0x2400a530
90004044:	24009930 	.word	0x24009930
90004048:	2400a130 	.word	0x2400a130
9000404c:	00430042 	.word	0x00430042
90004050:	00830082 	.word	0x00830082
90004054:	00c700c6 	.word	0x00c700c6
90004058:	24009d30 	.word	0x24009d30
9000405c:	002c0c00 	.word	0x002c0c00
90004060:	005b6800 	.word	0x005b6800
90004064:	ff1db000 	.word	0xff1db000
90004068:	ff4d0c00 	.word	0xff4d0c00
9000406c:	000166e8 	.word	0x000166e8
90004070:	0001c5a0 	.word	0x0001c5a0
90004074:	ffff4930 	.word	0xffff4930
90004078:	ffffa7e8 	.word	0xffffa7e8
9000407c:	00b3f400 	.word	0x00b3f400

90004080 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
90004080:	4901      	ldr	r1, [pc, #4]	; (90004088 <vApplicationIdleHook+0x8>)
90004082:	2000      	movs	r0, #0
90004084:	f00c bdf0 	b.w	90010c68 <vTaskSetApplicationTaskTag>
90004088:	90000965 	.word	0x90000965

9000408c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
9000408c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
9000408e:	2064      	movs	r0, #100	; 0x64
90004090:	f00a fade 	bl	9000e650 <osDelay>
  for(;;)
90004094:	e7fb      	b.n	9000408e <StartDefaultTask+0x2>
90004096:	bf00      	nop

90004098 <dht11Task_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dht11Task_handler */
void dht11Task_handler(void *argument)
{
90004098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000409c:	b084      	sub	sp, #16
9000409e:	f04f 0800 	mov.w	r8, #0
900040a2:	4e0a      	ldr	r6, [pc, #40]	; (900040cc <dht11Task_handler+0x34>)
  /* USER CODE BEGIN dht11Task_handler */
  /* Infinite loop */
  for(;;)
  {
	  DHT11_HandleTypeDef dht11 = read_DHT11(GPIOE, GPIO_PIN_3);
900040a4:	f641 2427 	movw	r4, #6695	; 0x1a27
900040a8:	af01      	add	r7, sp, #4
900040aa:	4d09      	ldr	r5, [pc, #36]	; (900040d0 <dht11Task_handler+0x38>)

	  Control_TypeDef control;
	  control.obj = (void*) &dht11;
	  control.type = "DHT11";

	  osStatus_t messageQueuePutStatus = osMessageQueuePut(controlQueueHandle, ( void * ) &control, 0, 0);
900040ac:	2300      	movs	r3, #0
900040ae:	a902      	add	r1, sp, #8
900040b0:	6828      	ldr	r0, [r5, #0]
900040b2:	461a      	mov	r2, r3
	  DHT11_HandleTypeDef dht11 = read_DHT11(GPIOE, GPIO_PIN_3);
900040b4:	f8ad 4004 	strh.w	r4, [sp, #4]
900040b8:	f88d 8006 	strb.w	r8, [sp, #6]
	  control.type = "DHT11";
900040bc:	e9cd 6702 	strd	r6, r7, [sp, #8]
	  osStatus_t messageQueuePutStatus = osMessageQueuePut(controlQueueHandle, ( void * ) &control, 0, 0);
900040c0:	f00a fca2 	bl	9000ea08 <osMessageQueuePut>

	  osDelay(1);
900040c4:	2001      	movs	r0, #1
900040c6:	f00a fac3 	bl	9000e650 <osDelay>
  for(;;)
900040ca:	e7ef      	b.n	900040ac <dht11Task_handler+0x14>
900040cc:	90029e74 	.word	0x90029e74
900040d0:	2400cd98 	.word	0x2400cd98

900040d4 <consumerTask_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_consumerTask_handler */
void consumerTask_handler(void *argument)
{
900040d4:	b570      	push	{r4, r5, r6, lr}
900040d6:	4e11      	ldr	r6, [pc, #68]	; (9000411c <consumerTask_handler+0x48>)
900040d8:	b082      	sub	sp, #8
900040da:	4c11      	ldr	r4, [pc, #68]	; (90004120 <consumerTask_handler+0x4c>)
    if(messageQueueGetStatus != osOK) {
    	osDelay(1);
    	continue;
    }

    if(!strcmp(control.type, "DHT11")) {
900040dc:	4d11      	ldr	r5, [pc, #68]	; (90004124 <consumerTask_handler+0x50>)
    osStatus_t messageQueueGetStatus = osMessageQueueGet(controlQueueHandle, (void*) &control, NULL, 0);
900040de:	2300      	movs	r3, #0
900040e0:	4669      	mov	r1, sp
900040e2:	6830      	ldr	r0, [r6, #0]
900040e4:	461a      	mov	r2, r3
900040e6:	f00a fcd1 	bl	9000ea8c <osMessageQueueGet>
    if(!strcmp(control.type, "DHT11")) {
900040ea:	4629      	mov	r1, r5
    if(messageQueueGetStatus != osOK) {
900040ec:	b990      	cbnz	r0, 90004114 <consumerTask_handler+0x40>
    if(!strcmp(control.type, "DHT11")) {
900040ee:	9800      	ldr	r0, [sp, #0]
900040f0:	f7fc f8f6 	bl	900002e0 <strcmp>
900040f4:	b970      	cbnz	r0, 90004114 <consumerTask_handler+0x40>
      DHT11_HandleTypeDef* dht11 = (DHT11_HandleTypeDef*) control.obj;
900040f6:	9a01      	ldr	r2, [sp, #4]

      if(applicationContext.maxTemperature < dht11->temperature) {
900040f8:	f9b4 1000 	ldrsh.w	r1, [r4]
900040fc:	7853      	ldrb	r3, [r2, #1]
900040fe:	4299      	cmp	r1, r3
    	applicationContext.maxTemperature = dht11->temperature;
      }

      if(applicationContext.minTemperature > dht11->temperature) {
90004100:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
      	applicationContext.minTemperature = dht11->temperature;
	  }

      applicationContext.temperature = dht11->temperature;
90004104:	7123      	strb	r3, [r4, #4]
    	applicationContext.maxTemperature = dht11->temperature;
90004106:	bfb8      	it	lt
90004108:	8023      	strhlt	r3, [r4, #0]
      if(applicationContext.minTemperature > dht11->temperature) {
9000410a:	428b      	cmp	r3, r1
      	applicationContext.minTemperature = dht11->temperature;
9000410c:	bfb8      	it	lt
9000410e:	8063      	strhlt	r3, [r4, #2]
      applicationContext.humidity = dht11->humidity;
90004110:	7813      	ldrb	r3, [r2, #0]
90004112:	7163      	strb	r3, [r4, #5]
    	osDelay(1);
90004114:	2001      	movs	r0, #1
90004116:	f00a fa9b 	bl	9000e650 <osDelay>
    	continue;
9000411a:	e7e0      	b.n	900040de <consumerTask_handler+0xa>
9000411c:	2400cd98 	.word	0x2400cd98
90004120:	2400cd78 	.word	0x2400cd78
90004124:	90029e74 	.word	0x90029e74

90004128 <temperatureHourlyReadCb>:
  /* USER CODE END consumerTask_handler */
}

/* temperatureHourlyReadCb function */
void temperatureHourlyReadCb(void *argument)
{
90004128:	b510      	push	{r4, lr}
  /* USER CODE BEGIN temperatureHourlyReadCb */
	int i = 0;
	int size = 10;

	for(i = 0; i < size; ++i) {
		if(applicationContext.temperatureData[i] == -1) {
9000412a:	4c22      	ldr	r4, [pc, #136]	; (900041b4 <temperatureHourlyReadCb+0x8c>)
9000412c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
90004130:	3301      	adds	r3, #1
90004132:	d029      	beq.n	90004188 <temperatureHourlyReadCb+0x60>
90004134:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
90004138:	3301      	adds	r3, #1
9000413a:	d02b      	beq.n	90004194 <temperatureHourlyReadCb+0x6c>
9000413c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90004140:	3301      	adds	r3, #1
90004142:	d029      	beq.n	90004198 <temperatureHourlyReadCb+0x70>
90004144:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
90004148:	3301      	adds	r3, #1
9000414a:	d027      	beq.n	9000419c <temperatureHourlyReadCb+0x74>
9000414c:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
90004150:	3301      	adds	r3, #1
90004152:	d025      	beq.n	900041a0 <temperatureHourlyReadCb+0x78>
90004154:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
90004158:	3301      	adds	r3, #1
9000415a:	d023      	beq.n	900041a4 <temperatureHourlyReadCb+0x7c>
9000415c:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
90004160:	3301      	adds	r3, #1
90004162:	d021      	beq.n	900041a8 <temperatureHourlyReadCb+0x80>
90004164:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
90004168:	3301      	adds	r3, #1
9000416a:	d01f      	beq.n	900041ac <temperatureHourlyReadCb+0x84>
9000416c:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
90004170:	3301      	adds	r3, #1
90004172:	d01d      	beq.n	900041b0 <temperatureHourlyReadCb+0x88>

	if(i < size - 1) {
		applicationContext.temperatureData[i] = applicationContext.temperature;
	} else {
		for(i = 0; i < size - 1; ++i) {
			applicationContext.temperatureData[i] = applicationContext.temperatureData[i + 1];
90004174:	2212      	movs	r2, #18
90004176:	f104 010a 	add.w	r1, r4, #10
9000417a:	f104 0008 	add.w	r0, r4, #8
9000417e:	f023 fa43 	bl	90027608 <memmove>
		}

		applicationContext.temperatureData[size - 1] = applicationContext.temperature;
90004182:	7923      	ldrb	r3, [r4, #4]
90004184:	8363      	strh	r3, [r4, #26]
	}

  /* USER CODE END temperatureHourlyReadCb */
}
90004186:	bd10      	pop	{r4, pc}
	for(i = 0; i < size; ++i) {
90004188:	2300      	movs	r3, #0
		applicationContext.temperatureData[i] = applicationContext.temperature;
9000418a:	3304      	adds	r3, #4
9000418c:	7922      	ldrb	r2, [r4, #4]
9000418e:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
}
90004192:	bd10      	pop	{r4, pc}
	for(i = 0; i < size; ++i) {
90004194:	2301      	movs	r3, #1
90004196:	e7f8      	b.n	9000418a <temperatureHourlyReadCb+0x62>
90004198:	2302      	movs	r3, #2
9000419a:	e7f6      	b.n	9000418a <temperatureHourlyReadCb+0x62>
9000419c:	2303      	movs	r3, #3
9000419e:	e7f4      	b.n	9000418a <temperatureHourlyReadCb+0x62>
900041a0:	2304      	movs	r3, #4
900041a2:	e7f2      	b.n	9000418a <temperatureHourlyReadCb+0x62>
900041a4:	2305      	movs	r3, #5
900041a6:	e7f0      	b.n	9000418a <temperatureHourlyReadCb+0x62>
900041a8:	2306      	movs	r3, #6
900041aa:	e7ee      	b.n	9000418a <temperatureHourlyReadCb+0x62>
900041ac:	2307      	movs	r3, #7
900041ae:	e7ec      	b.n	9000418a <temperatureHourlyReadCb+0x62>
900041b0:	2308      	movs	r3, #8
900041b2:	e7ea      	b.n	9000418a <temperatureHourlyReadCb+0x62>
900041b4:	2400cd78 	.word	0x2400cd78

900041b8 <SystemClock_Config>:
{
900041b8:	b570      	push	{r4, r5, r6, lr}
900041ba:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
900041bc:	224c      	movs	r2, #76	; 0x4c
900041be:	2100      	movs	r1, #0
900041c0:	a80a      	add	r0, sp, #40	; 0x28
900041c2:	f023 fa3b 	bl	9002763c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
900041c6:	2220      	movs	r2, #32
900041c8:	2100      	movs	r1, #0
900041ca:	a802      	add	r0, sp, #8
900041cc:	f023 fa36 	bl	9002763c <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
900041d0:	2002      	movs	r0, #2
900041d2:	f008 f98b 	bl	9000c4ec <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
900041d6:	4b22      	ldr	r3, [pc, #136]	; (90004260 <SystemClock_Config+0xa8>)
900041d8:	2100      	movs	r1, #0
900041da:	4a22      	ldr	r2, [pc, #136]	; (90004264 <SystemClock_Config+0xac>)
900041dc:	9101      	str	r1, [sp, #4]
900041de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
900041e0:	f021 0101 	bic.w	r1, r1, #1
900041e4:	62d9      	str	r1, [r3, #44]	; 0x2c
900041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900041e8:	f003 0301 	and.w	r3, r3, #1
900041ec:	9301      	str	r3, [sp, #4]
900041ee:	6993      	ldr	r3, [r2, #24]
900041f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
900041f4:	6193      	str	r3, [r2, #24]
900041f6:	6993      	ldr	r3, [r2, #24]
900041f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
900041fc:	9301      	str	r3, [sp, #4]
900041fe:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
90004200:	6993      	ldr	r3, [r2, #24]
90004202:	0499      	lsls	r1, r3, #18
90004204:	d5fc      	bpl.n	90004200 <SystemClock_Config+0x48>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90004206:	2201      	movs	r2, #1
90004208:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
9000420c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
9000420e:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
90004210:	2500      	movs	r5, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
90004212:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = 2;
90004214:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90004216:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 160;
9000421a:	2205      	movs	r2, #5
9000421c:	23a0      	movs	r3, #160	; 0xa0
9000421e:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 4;
90004222:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90004224:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
90004228:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
9000422a:	e9cd 4619 	strd	r4, r6, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
9000422e:	e9cd 551b 	strd	r5, r5, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
90004232:	f008 fa03 	bl	9000c63c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
90004236:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
90004238:	223f      	movs	r2, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
9000423a:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
9000423c:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
9000423e:	eb0d 0006 	add.w	r0, sp, r6
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
90004242:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90004244:	2203      	movs	r2, #3
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
90004246:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
90004248:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
9000424a:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
9000424c:	e9cd 6305 	strd	r6, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
90004250:	f44f 6380 	mov.w	r3, #1024	; 0x400
90004254:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
90004256:	f008 fd85 	bl	9000cd64 <HAL_RCC_ClockConfig>
}
9000425a:	b01e      	add	sp, #120	; 0x78
9000425c:	bd70      	pop	{r4, r5, r6, pc}
9000425e:	bf00      	nop
90004260:	58000400 	.word	0x58000400
90004264:	58024800 	.word	0x58024800

90004268 <main>:
{
90004268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
9000426c:	2400      	movs	r4, #0
{
9000426e:	b099      	sub	sp, #100	; 0x64
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90004270:	2501      	movs	r5, #1

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
90004272:	271b      	movs	r7, #27

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90004274:	2603      	movs	r6, #3
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
90004276:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
9000427a:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_MPU_Disable();
9000427e:	f005 f91d 	bl	900094bc <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0x24000000;
90004282:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
90004286:	49d3      	ldr	r1, [pc, #844]	; (900045d4 <main+0x36c>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004288:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.BaseAddress = 0x24000000;
9000428a:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
9000428c:	4bd2      	ldr	r3, [pc, #840]	; (900045d8 <main+0x370>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
9000428e:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
90004292:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004296:	f005 f92f 	bl	900094f8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x90000000;
9000429a:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000429e:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
900042a0:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
  MPU_InitStruct.BaseAddress = 0x90000000;
900042a4:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
900042a6:	f8ad 403a 	strh.w	r4, [sp, #58]	; 0x3a
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
900042aa:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
900042ae:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900042b2:	f005 f921 	bl	900094f8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
900042b6:	2302      	movs	r3, #2
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900042b8:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
900042ba:	f8ad 6037 	strh.w	r6, [sp, #55]	; 0x37
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
900042be:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
900042c2:	231a      	movs	r3, #26
900042c4:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
900042c8:	f240 1301 	movw	r3, #257	; 0x101
900042cc:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900042d0:	f005 f912 	bl	900094f8 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0xD0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
900042d4:	f44f 7380 	mov.w	r3, #256	; 0x100
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900042d8:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
900042da:	f8ad 403a 	strh.w	r4, [sp, #58]	; 0x3a

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
900042de:	2404      	movs	r4, #4
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
900042e0:	f8ad 3037 	strh.w	r3, [sp, #55]	; 0x37
  MPU_InitStruct.BaseAddress = 0xD0000000;
900042e4:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
900042e8:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
  MPU_InitStruct.BaseAddress = 0xD0000000;
900042ec:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
900042ee:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900042f2:	f005 f901 	bl	900094f8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
900042f6:	2318      	movs	r3, #24
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900042f8:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
900042fa:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
900042fe:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
90004302:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90004306:	f88d 503a 	strb.w	r5, [sp, #58]	; 0x3a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000430a:	f005 f8f5 	bl	900094f8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
9000430e:	4620      	mov	r0, r4
90004310:	f005 f8e2 	bl	900094d8 <HAL_MPU_Enable>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90004314:	4ab1      	ldr	r2, [pc, #708]	; (900045dc <main+0x374>)
90004316:	6953      	ldr	r3, [r2, #20]
90004318:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
9000431c:	d111      	bne.n	90004342 <main+0xda>
  __ASM volatile ("dsb 0xF":::"memory");
9000431e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90004322:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90004326:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
9000432a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000432e:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90004332:	6953      	ldr	r3, [r2, #20]
90004334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90004338:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
9000433a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000433e:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90004342:	48a6      	ldr	r0, [pc, #664]	; (900045dc <main+0x374>)
90004344:	6943      	ldr	r3, [r0, #20]
90004346:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
9000434a:	d124      	bne.n	90004396 <main+0x12e>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
9000434c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90004350:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
90004354:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90004358:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
9000435c:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90004360:	f3c5 05c9 	ubfx	r5, r5, #3, #10
90004364:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90004366:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
9000436a:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
9000436c:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
90004370:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90004372:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
90004376:	1c5a      	adds	r2, r3, #1
90004378:	d1f8      	bne.n	9000436c <main+0x104>
    } while(sets-- != 0U);
9000437a:	3c20      	subs	r4, #32
9000437c:	f114 0f20 	cmn.w	r4, #32
90004380:	d1f1      	bne.n	90004366 <main+0xfe>
90004382:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
90004386:	6943      	ldr	r3, [r0, #20]
90004388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000438c:	6143      	str	r3, [r0, #20]
9000438e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90004392:	f3bf 8f6f 	isb	sy
  HAL_Init();
90004396:	f004 ffd9 	bl	9000934c <HAL_Init>
	  applicationContext.temperatureData[i] = -100;
9000439a:	4b91      	ldr	r3, [pc, #580]	; (900045e0 <main+0x378>)
9000439c:	f06f 1263 	mvn.w	r2, #6488163	; 0x630063
  applicationContext.maxTemperature = -100;
900043a0:	4990      	ldr	r1, [pc, #576]	; (900045e4 <main+0x37c>)
  applicationContext.temperature = 0;
900043a2:	2400      	movs	r4, #0
	  applicationContext.temperatureData[i] = -100;
900043a4:	619a      	str	r2, [r3, #24]
  applicationContext.maxTemperature = -100;
900043a6:	6019      	str	r1, [r3, #0]
  applicationContext.temperature = 0;
900043a8:	711c      	strb	r4, [r3, #4]
	  applicationContext.temperatureData[i] = -100;
900043aa:	e9c3 2202 	strd	r2, r2, [r3, #8]
900043ae:	e9c3 2204 	strd	r2, r2, [r3, #16]
  SystemClock_Config();
900043b2:	f7ff ff01 	bl	900041b8 <SystemClock_Config>
  __ASM volatile ("cpsie i" : : : "memory");
900043b6:	b662      	cpsie	i
  __HAL_RCC_GPIOK_CLK_ENABLE();
900043b8:	4d8b      	ldr	r5, [pc, #556]	; (900045e8 <main+0x380>)
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
900043ba:	21c0      	movs	r1, #192	; 0xc0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900043bc:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
900043be:	4622      	mov	r2, r4
900043c0:	488a      	ldr	r0, [pc, #552]	; (900045ec <main+0x384>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900043c2:	2601      	movs	r6, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900043c4:	f04f 0903 	mov.w	r9, #3
  GPIO_InitStruct.Pin = GPIO_PIN_3;
900043c8:	2708      	movs	r7, #8
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
900043ca:	f04f 0804 	mov.w	r8, #4
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
900043ce:	f04f 0a02 	mov.w	sl, #2
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
900043d2:	f04f 0b05 	mov.w	fp, #5
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900043d6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
900043da:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOK_CLK_ENABLE();
900043de:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900043e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
900043e6:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900043ea:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900043ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
900043f2:	9301      	str	r3, [sp, #4]
900043f4:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
900043f6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900043fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
900043fe:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004402:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004406:	f003 0340 	and.w	r3, r3, #64	; 0x40
9000440a:	9302      	str	r3, [sp, #8]
9000440c:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
9000440e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90004416:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000441a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000441e:	f403 7380 	and.w	r3, r3, #256	; 0x100
90004422:	9303      	str	r3, [sp, #12]
90004424:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90004426:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000442a:	f043 0310 	orr.w	r3, r3, #16
9000442e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004432:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004436:	f003 0310 	and.w	r3, r3, #16
9000443a:	9304      	str	r3, [sp, #16]
9000443c:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
9000443e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004442:	f043 0302 	orr.w	r3, r3, #2
90004446:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000444a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000444e:	f003 0302 	and.w	r3, r3, #2
90004452:	9305      	str	r3, [sp, #20]
90004454:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
90004456:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000445a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
9000445e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004462:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004466:	f403 7300 	and.w	r3, r3, #512	; 0x200
9000446a:	9306      	str	r3, [sp, #24]
9000446c:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
9000446e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004472:	f043 0308 	orr.w	r3, r3, #8
90004476:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000447a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000447e:	f003 0308 	and.w	r3, r3, #8
90004482:	9307      	str	r3, [sp, #28]
90004484:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90004486:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000448a:	f043 0320 	orr.w	r3, r3, #32
9000448e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004492:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004496:	f003 0320 	and.w	r3, r3, #32
9000449a:	9308      	str	r3, [sp, #32]
9000449c:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
9000449e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900044a6:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900044aa:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
900044b2:	9309      	str	r3, [sp, #36]	; 0x24
900044b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
900044b6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044ba:	f043 0301 	orr.w	r3, r3, #1
900044be:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900044c2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044c6:	f003 0301 	and.w	r3, r3, #1
900044ca:	930a      	str	r3, [sp, #40]	; 0x28
900044cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
900044ce:	f005 fc03 	bl	90009cd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DE_GPIO_Port, LCD_DE_Pin, GPIO_PIN_RESET);
900044d2:	4622      	mov	r2, r4
900044d4:	2180      	movs	r1, #128	; 0x80
900044d6:	4846      	ldr	r0, [pc, #280]	; (900045f0 <main+0x388>)
900044d8:	f005 fbfe 	bl	90009cd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
900044dc:	4622      	mov	r2, r4
900044de:	2108      	movs	r1, #8
900044e0:	4844      	ldr	r0, [pc, #272]	; (900045f4 <main+0x38c>)
900044e2:	f005 fbf9 	bl	90009cd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
900044e6:	2201      	movs	r2, #1
900044e8:	4843      	ldr	r0, [pc, #268]	; (900045f8 <main+0x390>)
900044ea:	4611      	mov	r1, r2
900044ec:	f005 fbf4 	bl	90009cd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
900044f0:	4622      	mov	r2, r4
900044f2:	2144      	movs	r1, #68	; 0x44
900044f4:	4841      	ldr	r0, [pc, #260]	; (900045fc <main+0x394>)
900044f6:	f005 fbef 	bl	90009cd8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
900044fa:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
900044fc:	a90b      	add	r1, sp, #44	; 0x2c
900044fe:	483b      	ldr	r0, [pc, #236]	; (900045ec <main+0x384>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90004500:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90004504:	e9cd 490d 	strd	r4, r9, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90004508:	f005 f9e6 	bl	900098d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DE_Pin;
9000450c:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(LCD_DE_GPIO_Port, &GPIO_InitStruct);
9000450e:	a90b      	add	r1, sp, #44	; 0x2c
90004510:	4837      	ldr	r0, [pc, #220]	; (900045f0 <main+0x388>)
  GPIO_InitStruct.Pin = LCD_DE_Pin;
90004512:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90004514:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90004516:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LCD_DE_GPIO_Port, &GPIO_InitStruct);
9000451a:	f005 f9dd 	bl	900098d8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
9000451e:	a90b      	add	r1, sp, #44	; 0x2c
90004520:	4837      	ldr	r0, [pc, #220]	; (90004600 <main+0x398>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90004522:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90004524:	e9cd 740b 	strd	r7, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004528:	f005 f9d6 	bl	900098d8 <HAL_GPIO_Init>
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
9000452c:	a90b      	add	r1, sp, #44	; 0x2c
9000452e:	4831      	ldr	r0, [pc, #196]	; (900045f4 <main+0x38c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90004530:	e9cd 490d 	strd	r4, r9, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90004534:	e9cd 760b 	strd	r7, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
90004538:	f005 f9ce 	bl	900098d8 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
9000453c:	a90b      	add	r1, sp, #44	; 0x2c
9000453e:	482e      	ldr	r0, [pc, #184]	; (900045f8 <main+0x390>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90004540:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90004544:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
90004548:	f005 f9c6 	bl	900098d8 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
9000454c:	a90b      	add	r1, sp, #44	; 0x2c
9000454e:	482b      	ldr	r0, [pc, #172]	; (900045fc <main+0x394>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90004550:	e9cd 860b 	strd	r8, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90004554:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
90004558:	f005 f9be 	bl	900098d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
9000455c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
90004560:	f04f 0940 	mov.w	r9, #64	; 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
90004564:	a90b      	add	r1, sp, #44	; 0x2c
90004566:	4825      	ldr	r0, [pc, #148]	; (900045fc <main+0x394>)
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
90004568:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000456c:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
90004570:	f005 f9b2 	bl	900098d8 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
90004574:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
90004578:	4622      	mov	r2, r4
9000457a:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
9000457c:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
9000457e:	207a      	movs	r0, #122	; 0x7a
  __HAL_RCC_MDMA_CLK_ENABLE();
90004580:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
90004584:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
  hltdc.Instance = LTDC;
90004588:	4d1e      	ldr	r5, [pc, #120]	; (90004604 <main+0x39c>)
  __HAL_RCC_MDMA_CLK_ENABLE();
9000458a:	4033      	ands	r3, r6
9000458c:	9300      	str	r3, [sp, #0]
9000458e:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
90004590:	f004 ff36 	bl	90009400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
90004594:	207a      	movs	r0, #122	; 0x7a
90004596:	f004 ff71 	bl	9000947c <HAL_NVIC_EnableIRQ>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
9000459a:	2234      	movs	r2, #52	; 0x34
9000459c:	4621      	mov	r1, r4
9000459e:	a80b      	add	r0, sp, #44	; 0x2c
900045a0:	f023 f84c 	bl	9002763c <memset>
  hltdc.Instance = LTDC;
900045a4:	4b18      	ldr	r3, [pc, #96]	; (90004608 <main+0x3a0>)
  hltdc.Init.AccumulatedVBP = 11;
900045a6:	202a      	movs	r0, #42	; 0x2a
  hltdc.Init.AccumulatedActiveH = 283;
900045a8:	f240 2c0a 	movw	ip, #522	; 0x20a
  hltdc.Instance = LTDC;
900045ac:	602b      	str	r3, [r5, #0]
  hltdc.Init.HorizontalSync = 39;
900045ae:	2327      	movs	r3, #39	; 0x27
  hltdc.Init.TotalHeigh = 285;
900045b0:	f44f 7e04 	mov.w	lr, #528	; 0x210
  hltdc.Init.Backcolor.Blue = 0;
900045b4:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.HorizontalSync = 39;
900045b6:	616b      	str	r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
900045b8:	230b      	movs	r3, #11
  hltdc.Init.VerticalSync = 8;
900045ba:	61af      	str	r7, [r5, #24]
  hltdc.Init.Backcolor.Red = 0;
900045bc:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.AccumulatedVBP = 11;
900045c0:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
900045c4:	f240 131b 	movw	r3, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
900045c8:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
900045ca:	e9c5 c309 	strd	ip, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
900045ce:	f240 131d 	movw	r3, #285	; 0x11d
900045d2:	e01b      	b.n	9000460c <main+0x3a4>
900045d4:	03000012 	.word	0x03000012
900045d8:	01010001 	.word	0x01010001
900045dc:	e000ed00 	.word	0xe000ed00
900045e0:	2400cd78 	.word	0x2400cd78
900045e4:	0064ff9c 	.word	0x0064ff9c
900045e8:	58024400 	.word	0x58024400
900045ec:	58020400 	.word	0x58020400
900045f0:	58020c00 	.word	0x58020c00
900045f4:	58021800 	.word	0x58021800
900045f8:	58022800 	.word	0x58022800
900045fc:	58020000 	.word	0x58020000
90004600:	58021000 	.word	0x58021000
90004604:	2400ce88 	.word	0x2400ce88
90004608:	50001000 	.word	0x50001000
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
9000460c:	e9c5 4401 	strd	r4, r4, [r5, #4]
  hltdc.Init.TotalHeigh = 285;
90004610:	e9c5 e30b 	strd	lr, r3, [r5, #44]	; 0x2c
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90004614:	e9c5 4403 	strd	r4, r4, [r5, #12]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
90004618:	f007 fb84 	bl	9000bd24 <HAL_LTDC_Init>
  pLayerCfg.WindowX1 = 480;
9000461c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
90004620:	4622      	mov	r2, r4
90004622:	a90b      	add	r1, sp, #44	; 0x2c
  pLayerCfg.WindowX1 = 480;
90004624:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
90004626:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 480;
90004628:	9315      	str	r3, [sp, #84]	; 0x54
  pLayerCfg.WindowY1 = 272;
9000462a:	f44f 7388 	mov.w	r3, #272	; 0x110
  hdma2d.Instance = DMA2D;
9000462e:	4d51      	ldr	r5, [pc, #324]	; (90004774 <main+0x50c>)
  pLayerCfg.WindowY1 = 272;
90004630:	930e      	str	r3, [sp, #56]	; 0x38
  pLayerCfg.ImageHeight = 272;
90004632:	9316      	str	r3, [sp, #88]	; 0x58
  pLayerCfg.Alpha = 255;
90004634:	23ff      	movs	r3, #255	; 0xff
  pLayerCfg.WindowX0 = 0;
90004636:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.Alpha = 255;
90004638:	9310      	str	r3, [sp, #64]	; 0x40
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
9000463a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  pLayerCfg.WindowY0 = 0;
9000463e:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
90004640:	9312      	str	r3, [sp, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
90004642:	9411      	str	r4, [sp, #68]	; 0x44
  pLayerCfg.FBStartAdress = 0;
90004644:	9414      	str	r4, [sp, #80]	; 0x50
  pLayerCfg.Backcolor.Blue = 0;
90004646:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c
  pLayerCfg.Backcolor.Red = 0;
9000464a:	f88d 405e 	strb.w	r4, [sp, #94]	; 0x5e
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
9000464e:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
90004652:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
90004656:	f007 fc39 	bl	9000becc <HAL_LTDC_ConfigLayer>
  hdma2d.Instance = DMA2D;
9000465a:	4b47      	ldr	r3, [pc, #284]	; (90004778 <main+0x510>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
9000465c:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
9000465e:	65ec      	str	r4, [r5, #92]	; 0x5c
  hdma2d.Instance = DMA2D;
90004660:	602b      	str	r3, [r5, #0]
  hdma2d.Init.OutputOffset = 0;
90004662:	60ec      	str	r4, [r5, #12]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
90004664:	e9c5 4a11 	strd	r4, sl, [r5, #68]	; 0x44
  hdma2d.LayerCfg[1].InputAlpha = 0;
90004668:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
9000466c:	e9c5 4415 	strd	r4, r4, [r5, #84]	; 0x54
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
90004670:	e9c5 4a01 	strd	r4, sl, [r5, #4]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
90004674:	f004 ffe8 	bl	90009648 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
90004678:	4631      	mov	r1, r6
9000467a:	4628      	mov	r0, r5
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
9000467c:	2510      	movs	r5, #16
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
9000467e:	f005 f8bb 	bl	900097f8 <HAL_DMA2D_ConfigLayer>
  SdramTiming.ExitSelfRefreshDelay = 7;
90004682:	2307      	movs	r3, #7
  hsdram2.Instance = FMC_SDRAM_DEVICE;
90004684:	483d      	ldr	r0, [pc, #244]	; (9000477c <main+0x514>)
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
90004686:	a90b      	add	r1, sp, #44	; 0x2c
  SdramTiming.ExitSelfRefreshDelay = 7;
90004688:	930c      	str	r3, [sp, #48]	; 0x30
  SdramTiming.RowCycleDelay = 7;
9000468a:	930e      	str	r3, [sp, #56]	; 0x38
  hsdram2.Instance = FMC_SDRAM_DEVICE;
9000468c:	4b3c      	ldr	r3, [pc, #240]	; (90004780 <main+0x518>)
  SdramTiming.SelfRefreshTime = 4;
9000468e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  hsdram2.Instance = FMC_SDRAM_DEVICE;
90004692:	6003      	str	r3, [r0, #0]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
90004694:	f44f 73c0 	mov.w	r3, #384	; 0x180
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
90004698:	f8c0 800c 	str.w	r8, [r0, #12]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
9000469c:	f44f 6800 	mov.w	r8, #2048	; 0x800
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
900046a0:	6183      	str	r3, [r0, #24]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
900046a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
900046a6:	6105      	str	r5, [r0, #16]
  SdramTiming.WriteRecoveryTime = 5;
900046a8:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  SdramTiming.LoadToActiveDelay = 2;
900046ac:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900046b0:	f8c0 9014 	str.w	r9, [r0, #20]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
900046b4:	61c4      	str	r4, [r0, #28]
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
900046b6:	6284      	str	r4, [r0, #40]	; 0x28
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
900046b8:	e9c0 8308 	strd	r8, r3, [r0, #32]
  SdramTiming.RCDDelay = 2;
900046bc:	e9cd aa10 	strd	sl, sl, [sp, #64]	; 0x40
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
900046c0:	e9c0 6401 	strd	r6, r4, [r0, #4]
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
900046c4:	f009 fc26 	bl	9000df14 <HAL_SDRAM_Init>
  BSP_SDRAM_DeInit(0);
900046c8:	4620      	mov	r0, r4
900046ca:	f004 fbd1 	bl	90008e70 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
900046ce:	4620      	mov	r0, r4
900046d0:	f004 fc18 	bl	90008f04 <BSP_SDRAM_Init>
  MX_LIBJPEG_Init();
900046d4:	f7fb fe8e 	bl	900003f4 <MX_LIBJPEG_Init>
  hjpeg.Instance = JPEG;
900046d8:	4b2a      	ldr	r3, [pc, #168]	; (90004784 <main+0x51c>)
900046da:	482b      	ldr	r0, [pc, #172]	; (90004788 <main+0x520>)
900046dc:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
900046de:	f006 faf5 	bl	9000accc <HAL_JPEG_Init>
  hcrc.Instance = CRC;
900046e2:	482a      	ldr	r0, [pc, #168]	; (9000478c <main+0x524>)
900046e4:	4b2a      	ldr	r3, [pc, #168]	; (90004790 <main+0x528>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
900046e6:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
900046e8:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
900046ea:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
900046ec:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
900046f0:	f004 ff34 	bl	9000955c <HAL_CRC_Init>
  MX_TouchGFX_Init();
900046f4:	f7fb fe82 	bl	900003fc <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
900046f8:	f7fb fe7e 	bl	900003f8 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
900046fc:	f009 ff32 	bl	9000e564 <osKernelInitialize>
  temperatureHourlyReadHandle = osTimerNew(temperatureHourlyReadCb, osTimerPeriodic, NULL, &temperatureHourlyRead_attributes);
90004700:	4622      	mov	r2, r4
90004702:	4b24      	ldr	r3, [pc, #144]	; (90004794 <main+0x52c>)
90004704:	4631      	mov	r1, r6
90004706:	4824      	ldr	r0, [pc, #144]	; (90004798 <main+0x530>)
90004708:	f009 ffb0 	bl	9000e66c <osTimerNew>
9000470c:	4b23      	ldr	r3, [pc, #140]	; (9000479c <main+0x534>)
  osStatus_t temperatureHourlyReadStartStatus = osTimerStart(temperatureHourlyReadHandle, 5000);
9000470e:	f241 3188 	movw	r1, #5000	; 0x1388
  temperatureHourlyReadHandle = osTimerNew(temperatureHourlyReadCb, osTimerPeriodic, NULL, &temperatureHourlyRead_attributes);
90004712:	6018      	str	r0, [r3, #0]
  osStatus_t temperatureHourlyReadStartStatus = osTimerStart(temperatureHourlyReadHandle, 5000);
90004714:	f009 ffec 	bl	9000e6f0 <osTimerStart>
  controlQueueHandle = osMessageQueueNew (16, sizeof(Control_TypeDef), &controlQueue_attributes);
90004718:	4a21      	ldr	r2, [pc, #132]	; (900047a0 <main+0x538>)
9000471a:	4639      	mov	r1, r7
9000471c:	4628      	mov	r0, r5
9000471e:	f00a f935 	bl	9000e98c <osMessageQueueNew>
90004722:	4b20      	ldr	r3, [pc, #128]	; (900047a4 <main+0x53c>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
90004724:	4a20      	ldr	r2, [pc, #128]	; (900047a8 <main+0x540>)
90004726:	4621      	mov	r1, r4
  controlQueueHandle = osMessageQueueNew (16, sizeof(Control_TypeDef), &controlQueue_attributes);
90004728:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
9000472a:	4820      	ldr	r0, [pc, #128]	; (900047ac <main+0x544>)
9000472c:	f009 ff46 	bl	9000e5bc <osThreadNew>
90004730:	4b1f      	ldr	r3, [pc, #124]	; (900047b0 <main+0x548>)
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
90004732:	4a20      	ldr	r2, [pc, #128]	; (900047b4 <main+0x54c>)
90004734:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
90004736:	6018      	str	r0, [r3, #0]
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
90004738:	481f      	ldr	r0, [pc, #124]	; (900047b8 <main+0x550>)
9000473a:	f009 ff3f 	bl	9000e5bc <osThreadNew>
9000473e:	4b1f      	ldr	r3, [pc, #124]	; (900047bc <main+0x554>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
90004740:	4a1f      	ldr	r2, [pc, #124]	; (900047c0 <main+0x558>)
90004742:	4621      	mov	r1, r4
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
90004744:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
90004746:	481f      	ldr	r0, [pc, #124]	; (900047c4 <main+0x55c>)
90004748:	f009 ff38 	bl	9000e5bc <osThreadNew>
9000474c:	4b1e      	ldr	r3, [pc, #120]	; (900047c8 <main+0x560>)
  dht11TaskHandle = osThreadNew(dht11Task_handler, NULL, &dht11Task_attributes);
9000474e:	4a1f      	ldr	r2, [pc, #124]	; (900047cc <main+0x564>)
90004750:	4621      	mov	r1, r4
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
90004752:	6018      	str	r0, [r3, #0]
  dht11TaskHandle = osThreadNew(dht11Task_handler, NULL, &dht11Task_attributes);
90004754:	481e      	ldr	r0, [pc, #120]	; (900047d0 <main+0x568>)
90004756:	f009 ff31 	bl	9000e5bc <osThreadNew>
9000475a:	4b1e      	ldr	r3, [pc, #120]	; (900047d4 <main+0x56c>)
9000475c:	4605      	mov	r5, r0
  consumerTaskHandle = osThreadNew(consumerTask_handler, NULL, &consumerTask_attributes);
9000475e:	4a1e      	ldr	r2, [pc, #120]	; (900047d8 <main+0x570>)
90004760:	4621      	mov	r1, r4
90004762:	481e      	ldr	r0, [pc, #120]	; (900047dc <main+0x574>)
  dht11TaskHandle = osThreadNew(dht11Task_handler, NULL, &dht11Task_attributes);
90004764:	601d      	str	r5, [r3, #0]
  consumerTaskHandle = osThreadNew(consumerTask_handler, NULL, &consumerTask_attributes);
90004766:	f009 ff29 	bl	9000e5bc <osThreadNew>
9000476a:	4b1d      	ldr	r3, [pc, #116]	; (900047e0 <main+0x578>)
9000476c:	6018      	str	r0, [r3, #0]
  osKernelStart();
9000476e:	f009 ff0b 	bl	9000e588 <osKernelStart>
  while (1)
90004772:	e7fe      	b.n	90004772 <main+0x50a>
90004774:	2400cdc8 	.word	0x2400cdc8
90004778:	52001000 	.word	0x52001000
9000477c:	2400d008 	.word	0x2400d008
90004780:	52004140 	.word	0x52004140
90004784:	52003000 	.word	0x52003000
90004788:	2400ce30 	.word	0x2400ce30
9000478c:	2400cda4 	.word	0x2400cda4
90004790:	58024c00 	.word	0x58024c00
90004794:	90029f88 	.word	0x90029f88
90004798:	90004129 	.word	0x90004129
9000479c:	2400d03c 	.word	0x2400d03c
900047a0:	90029f28 	.word	0x90029f28
900047a4:	2400cd98 	.word	0x2400cd98
900047a8:	90029f40 	.word	0x90029f40
900047ac:	9000408d 	.word	0x9000408d
900047b0:	2400cd9c 	.word	0x2400cd9c
900047b4:	90029ee0 	.word	0x90029ee0
900047b8:	9000040d 	.word	0x9000040d
900047bc:	2400cd74 	.word	0x2400cd74
900047c0:	90029f98 	.word	0x90029f98
900047c4:	900029f1 	.word	0x900029f1
900047c8:	2400d040 	.word	0x2400d040
900047cc:	90029f64 	.word	0x90029f64
900047d0:	90004099 	.word	0x90004099
900047d4:	2400cda0 	.word	0x2400cda0
900047d8:	90029f04 	.word	0x90029f04
900047dc:	900040d5 	.word	0x900040d5
900047e0:	2400cd94 	.word	0x2400cd94

900047e4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
900047e4:	4b03      	ldr	r3, [pc, #12]	; (900047f4 <HAL_TIM_PeriodElapsedCallback+0x10>)
900047e6:	6802      	ldr	r2, [r0, #0]
900047e8:	429a      	cmp	r2, r3
900047ea:	d000      	beq.n	900047ee <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
900047ec:	4770      	bx	lr
    HAL_IncTick();
900047ee:	f004 bddd 	b.w	900093ac <HAL_IncTick>
900047f2:	bf00      	nop
900047f4:	40001000 	.word	0x40001000

900047f8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
900047f8:	4770      	bx	lr
900047fa:	bf00      	nop

900047fc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
900047fc:	4b0b      	ldr	r3, [pc, #44]	; (9000482c <HAL_MspInit+0x30>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
900047fe:	2200      	movs	r2, #0
90004800:	210f      	movs	r1, #15
90004802:	f06f 0001 	mvn.w	r0, #1
{
90004806:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
90004808:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
{
9000480c:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
9000480e:	f044 0402 	orr.w	r4, r4, #2
90004812:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
90004816:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
9000481a:	f003 0302 	and.w	r3, r3, #2
9000481e:	9301      	str	r3, [sp, #4]
90004820:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
90004822:	b003      	add	sp, #12
90004824:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
90004828:	f004 bdea 	b.w	90009400 <HAL_NVIC_SetPriority>
9000482c:	58024400 	.word	0x58024400

90004830 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
90004830:	4b0a      	ldr	r3, [pc, #40]	; (9000485c <HAL_CRC_MspInit+0x2c>)
90004832:	6802      	ldr	r2, [r0, #0]
90004834:	429a      	cmp	r2, r3
90004836:	d000      	beq.n	9000483a <HAL_CRC_MspInit+0xa>
90004838:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
9000483a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
{
9000483e:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
90004840:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004844:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
90004848:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
9000484c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90004850:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90004854:	9301      	str	r3, [sp, #4]
90004856:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
90004858:	b002      	add	sp, #8
9000485a:	4770      	bx	lr
9000485c:	58024c00 	.word	0x58024c00

90004860 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
90004860:	4b0f      	ldr	r3, [pc, #60]	; (900048a0 <HAL_DMA2D_MspInit+0x40>)
90004862:	6802      	ldr	r2, [r0, #0]
90004864:	429a      	cmp	r2, r3
90004866:	d000      	beq.n	9000486a <HAL_DMA2D_MspInit+0xa>
90004868:	4770      	bx	lr
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
9000486a:	4b0e      	ldr	r3, [pc, #56]	; (900048a4 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
9000486c:	205a      	movs	r0, #90	; 0x5a
9000486e:	2200      	movs	r2, #0
90004870:	2105      	movs	r1, #5
{
90004872:	b510      	push	{r4, lr}
    __HAL_RCC_DMA2D_CLK_ENABLE();
90004874:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
{
90004878:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
9000487a:	f044 0410 	orr.w	r4, r4, #16
9000487e:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
90004882:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
90004886:	f003 0310 	and.w	r3, r3, #16
9000488a:	9301      	str	r3, [sp, #4]
9000488c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
9000488e:	f004 fdb7 	bl	90009400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
90004892:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
90004894:	b002      	add	sp, #8
90004896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
9000489a:	f004 bdef 	b.w	9000947c <HAL_NVIC_EnableIRQ>
9000489e:	bf00      	nop
900048a0:	52001000 	.word	0x52001000
900048a4:	58024400 	.word	0x58024400

900048a8 <HAL_JPEG_MspInit>:
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
  if(hjpeg->Instance==JPEG)
900048a8:	4b3f      	ldr	r3, [pc, #252]	; (900049a8 <HAL_JPEG_MspInit+0x100>)
900048aa:	6802      	ldr	r2, [r0, #0]
900048ac:	429a      	cmp	r2, r3
900048ae:	d000      	beq.n	900048b2 <HAL_JPEG_MspInit+0xa>
900048b0:	4770      	bx	lr
{
900048b2:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN JPEG_MspInit 0 */
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
900048b4:	4b3d      	ldr	r3, [pc, #244]	; (900049ac <HAL_JPEG_MspInit+0x104>)
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
900048b6:	2211      	movs	r2, #17
900048b8:	4e3d      	ldr	r6, [pc, #244]	; (900049b0 <HAL_JPEG_MspInit+0x108>)
{
900048ba:	b082      	sub	sp, #8
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
900048bc:	4d3d      	ldr	r5, [pc, #244]	; (900049b4 <HAL_JPEG_MspInit+0x10c>)
900048be:	4604      	mov	r4, r0
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
900048c0:	6072      	str	r2, [r6, #4]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
900048c2:	4630      	mov	r0, r6
    __HAL_RCC_JPEG_CLK_ENABLE();
900048c4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
900048c8:	493b      	ldr	r1, [pc, #236]	; (900049b8 <HAL_JPEG_MspInit+0x110>)
    __HAL_RCC_JPEG_CLK_ENABLE();
900048ca:	f042 0220 	orr.w	r2, r2, #32
900048ce:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
900048d2:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
900048d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
900048d8:	6232      	str	r2, [r6, #32]
    __HAL_RCC_JPEG_CLK_ENABLE();
900048da:	f003 0320 	and.w	r3, r3, #32
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
900048de:	6031      	str	r1, [r6, #0]
    __HAL_RCC_JPEG_CLK_ENABLE();
900048e0:	9301      	str	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
900048e2:	2300      	movs	r3, #0
    __HAL_RCC_JPEG_CLK_ENABLE();
900048e4:	9901      	ldr	r1, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
900048e6:	6133      	str	r3, [r6, #16]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
900048e8:	e9c6 3202 	strd	r3, r2, [r6, #8]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
900048ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
900048f0:	6272      	str	r2, [r6, #36]	; 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
900048f2:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
900048f4:	e9c6 3306 	strd	r3, r3, [r6, #24]
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
900048f8:	e9c6 330d 	strd	r3, r3, [r6, #52]	; 0x34
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
900048fc:	62b2      	str	r2, [r6, #40]	; 0x28
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
900048fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
90004902:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
90004906:	e9c6 230b 	strd	r2, r3, [r6, #44]	; 0x2c
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
9000490a:	2313      	movs	r3, #19
9000490c:	606b      	str	r3, [r5, #4]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
9000490e:	2302      	movs	r3, #2
90004910:	6173      	str	r3, [r6, #20]
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
90004912:	f007 fbcf 	bl	9000c0b4 <HAL_MDMA_Init>
90004916:	2800      	cmp	r0, #0
90004918:	d13a      	bne.n	90004990 <HAL_JPEG_MspInit+0xe8>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
9000491a:	2200      	movs	r2, #0
9000491c:	4824      	ldr	r0, [pc, #144]	; (900049b0 <HAL_JPEG_MspInit+0x108>)
9000491e:	4611      	mov	r1, r2
90004920:	f007 fc66 	bl	9000c1f0 <HAL_MDMA_ConfigPostRequestMask>
90004924:	2800      	cmp	r0, #0
90004926:	d13c      	bne.n	900049a2 <HAL_JPEG_MspInit+0xfa>
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90004928:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
9000492a:	2300      	movs	r3, #0
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
9000492c:	6326      	str	r6, [r4, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
9000492e:	2013      	movs	r0, #19
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90004930:	61ea      	str	r2, [r5, #28]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
90004932:	62aa      	str	r2, [r5, #40]	; 0x28
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
90004934:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
90004938:	4920      	ldr	r1, [pc, #128]	; (900049bc <HAL_JPEG_MspInit+0x114>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
9000493a:	60ab      	str	r3, [r5, #8]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
9000493c:	622b      	str	r3, [r5, #32]
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
9000493e:	63ab      	str	r3, [r5, #56]	; 0x38
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
90004940:	6434      	str	r4, [r6, #64]	; 0x40
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
90004942:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
90004946:	e9c5 3304 	strd	r3, r3, [r5, #16]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
9000494a:	2308      	movs	r3, #8
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
9000494c:	22c0      	movs	r2, #192	; 0xc0
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
9000494e:	e9c5 1000 	strd	r1, r0, [r5]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
90004952:	61ab      	str	r3, [r5, #24]
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
90004954:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90004958:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
9000495c:	4815      	ldr	r0, [pc, #84]	; (900049b4 <HAL_JPEG_MspInit+0x10c>)
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
9000495e:	62e9      	str	r1, [r5, #44]	; 0x2c
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
90004960:	60ea      	str	r2, [r5, #12]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90004962:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
90004964:	f007 fba6 	bl	9000c0b4 <HAL_MDMA_Init>
90004968:	b9c0      	cbnz	r0, 9000499c <HAL_JPEG_MspInit+0xf4>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
9000496a:	2200      	movs	r2, #0
9000496c:	4811      	ldr	r0, [pc, #68]	; (900049b4 <HAL_JPEG_MspInit+0x10c>)
9000496e:	4611      	mov	r1, r2
90004970:	f007 fc3e 	bl	9000c1f0 <HAL_MDMA_ConfigPostRequestMask>
90004974:	b978      	cbnz	r0, 90004996 <HAL_JPEG_MspInit+0xee>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
90004976:	6365      	str	r5, [r4, #52]	; 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
90004978:	2079      	movs	r0, #121	; 0x79
9000497a:	2200      	movs	r2, #0
9000497c:	2105      	movs	r1, #5
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
9000497e:	642c      	str	r4, [r5, #64]	; 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
90004980:	f004 fd3e 	bl	90009400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
90004984:	2079      	movs	r0, #121	; 0x79
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
90004986:	b002      	add	sp, #8
90004988:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
9000498c:	f004 bd76 	b.w	9000947c <HAL_NVIC_EnableIRQ>
      Error_Handler();
90004990:	f7ff ff32 	bl	900047f8 <Error_Handler>
90004994:	e7c1      	b.n	9000491a <HAL_JPEG_MspInit+0x72>
      Error_Handler();
90004996:	f7ff ff2f 	bl	900047f8 <Error_Handler>
9000499a:	e7ec      	b.n	90004976 <HAL_JPEG_MspInit+0xce>
      Error_Handler();
9000499c:	f7ff ff2c 	bl	900047f8 <Error_Handler>
900049a0:	e7e3      	b.n	9000496a <HAL_JPEG_MspInit+0xc2>
      Error_Handler();
900049a2:	f7ff ff29 	bl	900047f8 <Error_Handler>
900049a6:	e7bf      	b.n	90004928 <HAL_JPEG_MspInit+0x80>
900049a8:	52003000 	.word	0x52003000
900049ac:	58024400 	.word	0x58024400
900049b0:	2400cf30 	.word	0x2400cf30
900049b4:	2400cf9c 	.word	0x2400cf9c
900049b8:	52000200 	.word	0x52000200
900049bc:	520001c0 	.word	0x520001c0

900049c0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
900049c0:	b570      	push	{r4, r5, r6, lr}
900049c2:	b0ba      	sub	sp, #232	; 0xe8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900049c4:	2100      	movs	r1, #0
{
900049c6:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
900049c8:	22c0      	movs	r2, #192	; 0xc0
900049ca:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900049cc:	9109      	str	r1, [sp, #36]	; 0x24
900049ce:	e9cd 1105 	strd	r1, r1, [sp, #20]
900049d2:	e9cd 1107 	strd	r1, r1, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
900049d6:	f022 fe31 	bl	9002763c <memset>
  if(hltdc->Instance==LTDC)
900049da:	4b4a      	ldr	r3, [pc, #296]	; (90004b04 <HAL_LTDC_MspInit+0x144>)
900049dc:	6822      	ldr	r2, [r4, #0]
900049de:	429a      	cmp	r2, r3
900049e0:	d001      	beq.n	900049e6 <HAL_LTDC_MspInit+0x26>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
900049e2:	b03a      	add	sp, #232	; 0xe8
900049e4:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PLL3.PLL3P = 2;
900049e6:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3M = 5;
900049e8:	2205      	movs	r2, #5
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
900049ea:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
900049ee:	2500      	movs	r5, #0
    PeriphClkInitStruct.PLL3.PLL3N = 160;
900049f0:	21a0      	movs	r1, #160	; 0xa0
    PeriphClkInitStruct.PLL3.PLL3P = 2;
900049f2:	9316      	str	r3, [sp, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3M = 5;
900049f4:	9214      	str	r2, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3R = 83;
900049f6:	2253      	movs	r2, #83	; 0x53
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
900049f8:	9317      	str	r3, [sp, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3R = 83;
900049fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
900049fe:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PLL3.PLL3N = 160;
90004a00:	9115      	str	r1, [sp, #84]	; 0x54
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90004a02:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    PeriphClkInitStruct.PLL3.PLL3R = 83;
90004a06:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004a0a:	f008 fc83 	bl	9000d314 <HAL_RCCEx_PeriphCLKConfig>
90004a0e:	2800      	cmp	r0, #0
90004a10:	d174      	bne.n	90004afc <HAL_LTDC_MspInit+0x13c>
    __HAL_RCC_LTDC_CLK_ENABLE();
90004a12:	4b3d      	ldr	r3, [pc, #244]	; (90004b08 <HAL_LTDC_MspInit+0x148>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90004a14:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004a16:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004a18:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
90004a1a:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
90004a1e:	a905      	add	r1, sp, #20
90004a20:	483a      	ldr	r0, [pc, #232]	; (90004b0c <HAL_LTDC_MspInit+0x14c>)
    __HAL_RCC_LTDC_CLK_ENABLE();
90004a22:	f042 0208 	orr.w	r2, r2, #8
90004a26:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
90004a2a:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
90004a2e:	f002 0208 	and.w	r2, r2, #8
90004a32:	9200      	str	r2, [sp, #0]
90004a34:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90004a36:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004a3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
90004a3e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004a42:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004a46:	f402 6280 	and.w	r2, r2, #1024	; 0x400
90004a4a:	9201      	str	r2, [sp, #4]
90004a4c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOI_CLK_ENABLE();
90004a4e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004a52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
90004a56:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004a5a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004a5e:	f402 7280 	and.w	r2, r2, #256	; 0x100
90004a62:	9202      	str	r2, [sp, #8]
90004a64:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
90004a66:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
90004a6e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004a72:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004a76:	f402 7200 	and.w	r2, r2, #512	; 0x200
90004a7a:	9203      	str	r2, [sp, #12]
90004a7c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90004a7e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004a82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
90004a86:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
90004a8e:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90004a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004a94:	9609      	str	r6, [sp, #36]	; 0x24
    __HAL_RCC_GPIOH_CLK_ENABLE();
90004a96:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
90004a98:	23fc      	movs	r3, #252	; 0xfc
    __HAL_RCC_GPIOH_CLK_ENABLE();
90004a9a:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
90004a9c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004a9e:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
90004aa2:	f004 ff19 	bl	900098d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
90004aa6:	f24d 2303 	movw	r3, #53763	; 0xd203
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90004aaa:	a905      	add	r1, sp, #20
90004aac:	4818      	ldr	r0, [pc, #96]	; (90004b10 <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
90004aae:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004ab0:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004ab4:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90004ab8:	f004 ff0e 	bl	900098d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
90004abc:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
90004ac0:	a905      	add	r1, sp, #20
90004ac2:	4814      	ldr	r0, [pc, #80]	; (90004b14 <HAL_LTDC_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
90004ac4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004ac6:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004aca:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
90004ace:	f004 ff03 	bl	900098d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
90004ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004ad6:	a905      	add	r1, sp, #20
90004ad8:	480f      	ldr	r0, [pc, #60]	; (90004b18 <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004ada:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9;
90004adc:	e9cd 3405 	strd	r3, r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
90004ae0:	e9cd 5407 	strd	r5, r4, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004ae4:	f004 fef8 	bl	900098d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
90004ae8:	462a      	mov	r2, r5
90004aea:	2105      	movs	r1, #5
90004aec:	2058      	movs	r0, #88	; 0x58
90004aee:	f004 fc87 	bl	90009400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
90004af2:	2058      	movs	r0, #88	; 0x58
90004af4:	f004 fcc2 	bl	9000947c <HAL_NVIC_EnableIRQ>
}
90004af8:	b03a      	add	sp, #232	; 0xe8
90004afa:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
90004afc:	f7ff fe7c 	bl	900047f8 <Error_Handler>
90004b00:	e787      	b.n	90004a12 <HAL_LTDC_MspInit+0x52>
90004b02:	bf00      	nop
90004b04:	50001000 	.word	0x50001000
90004b08:	58024400 	.word	0x58024400
90004b0c:	58022800 	.word	0x58022800
90004b10:	58022000 	.word	0x58022000
90004b14:	58022400 	.word	0x58022400
90004b18:	58021c00 	.word	0x58021c00

90004b1c <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
90004b1c:	4836      	ldr	r0, [pc, #216]	; (90004bf8 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct ={0};
90004b1e:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
90004b20:	b5d0      	push	{r4, r6, r7, lr}
  if (FMC_Initialized) {
90004b22:	6801      	ldr	r1, [r0, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
90004b24:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct ={0};
90004b26:	e9cd 3302 	strd	r3, r3, [sp, #8]
90004b2a:	e9cd 3304 	strd	r3, r3, [sp, #16]
90004b2e:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
90004b30:	b109      	cbz	r1, 90004b36 <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
90004b32:	b038      	add	sp, #224	; 0xe0
90004b34:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
90004b36:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004b38:	22b8      	movs	r2, #184	; 0xb8
  FMC_Initialized = 1;
90004b3a:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004b3c:	a80a      	add	r0, sp, #40	; 0x28
90004b3e:	f022 fd7d 	bl	9002763c <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
90004b42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90004b46:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004b48:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
90004b4a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004b4e:	f008 fbe1 	bl	9000d314 <HAL_RCCEx_PeriphCLKConfig>
90004b52:	2800      	cmp	r0, #0
90004b54:	d14c      	bne.n	90004bf0 <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
90004b56:	4b29      	ldr	r3, [pc, #164]	; (90004bfc <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004b58:	f64f 7083 	movw	r0, #65411	; 0xff83
90004b5c:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004b5e:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
90004b60:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004b64:	2600      	movs	r6, #0
90004b66:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
90004b68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
90004b6c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90004b70:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004b74:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
90004b76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004b7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
90004b7e:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004b80:	a902      	add	r1, sp, #8
90004b82:	481f      	ldr	r0, [pc, #124]	; (90004c00 <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
90004b84:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004b86:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004b8a:	f004 fea5 	bl	900098d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004b8e:	f248 1233 	movw	r2, #33075	; 0x8133
90004b92:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90004b94:	a902      	add	r1, sp, #8
90004b96:	481b      	ldr	r0, [pc, #108]	; (90004c04 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004b98:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004b9a:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004b9e:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90004ba2:	f004 fe99 	bl	900098d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004ba6:	f24c 7203 	movw	r2, #50947	; 0xc703
90004baa:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90004bac:	a902      	add	r1, sp, #8
90004bae:	4816      	ldr	r0, [pc, #88]	; (90004c08 <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004bb0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004bb2:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004bb6:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90004bba:	f004 fe8d 	bl	900098d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004bbe:	f64f 023f 	movw	r2, #63551	; 0xf83f
90004bc2:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90004bc4:	a902      	add	r1, sp, #8
90004bc6:	4811      	ldr	r0, [pc, #68]	; (90004c0c <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004bc8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004bca:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004bce:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90004bd2:	f004 fe81 	bl	900098d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
90004bd6:	22e0      	movs	r2, #224	; 0xe0
90004bd8:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004bda:	a902      	add	r1, sp, #8
90004bdc:	480c      	ldr	r0, [pc, #48]	; (90004c10 <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004bde:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
90004be0:	e9cd 6704 	strd	r6, r7, [sp, #16]
90004be4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004be8:	f004 fe76 	bl	900098d8 <HAL_GPIO_Init>
}
90004bec:	b038      	add	sp, #224	; 0xe0
90004bee:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
90004bf0:	f7ff fe02 	bl	900047f8 <Error_Handler>
90004bf4:	e7af      	b.n	90004b56 <HAL_SDRAM_MspInit+0x3a>
90004bf6:	bf00      	nop
90004bf8:	2400d048 	.word	0x2400d048
90004bfc:	58024400 	.word	0x58024400
90004c00:	58021000 	.word	0x58021000
90004c04:	58021800 	.word	0x58021800
90004c08:	58020c00 	.word	0x58020c00
90004c0c:	58021400 	.word	0x58021400
90004c10:	58021c00 	.word	0x58021c00

90004c14 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
90004c14:	4b13      	ldr	r3, [pc, #76]	; (90004c64 <HAL_SDRAM_MspDeInit+0x50>)
90004c16:	681a      	ldr	r2, [r3, #0]
90004c18:	b102      	cbz	r2, 90004c1c <HAL_SDRAM_MspDeInit+0x8>
90004c1a:	4770      	bx	lr
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
90004c1c:	b510      	push	{r4, lr}
  __HAL_RCC_FMC_CLK_DISABLE();
90004c1e:	4a12      	ldr	r2, [pc, #72]	; (90004c68 <HAL_SDRAM_MspDeInit+0x54>)
  FMC_DeInitialized = 1;
90004c20:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004c22:	f64f 7183 	movw	r1, #65411	; 0xff83
90004c26:	4811      	ldr	r0, [pc, #68]	; (90004c6c <HAL_SDRAM_MspDeInit+0x58>)
  FMC_DeInitialized = 1;
90004c28:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
90004c2a:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
90004c2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90004c32:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004c36:	f004 ff81 	bl	90009b3c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004c3a:	f248 1133 	movw	r1, #33075	; 0x8133
90004c3e:	480c      	ldr	r0, [pc, #48]	; (90004c70 <HAL_SDRAM_MspDeInit+0x5c>)
90004c40:	f004 ff7c 	bl	90009b3c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004c44:	f24c 7103 	movw	r1, #50947	; 0xc703
90004c48:	480a      	ldr	r0, [pc, #40]	; (90004c74 <HAL_SDRAM_MspDeInit+0x60>)
90004c4a:	f004 ff77 	bl	90009b3c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004c4e:	f64f 013f 	movw	r1, #63551	; 0xf83f
90004c52:	4809      	ldr	r0, [pc, #36]	; (90004c78 <HAL_SDRAM_MspDeInit+0x64>)
90004c54:	f004 ff72 	bl	90009b3c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
90004c58:	21e0      	movs	r1, #224	; 0xe0
90004c5a:	4808      	ldr	r0, [pc, #32]	; (90004c7c <HAL_SDRAM_MspDeInit+0x68>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
90004c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
90004c60:	f004 bf6c 	b.w	90009b3c <HAL_GPIO_DeInit>
90004c64:	2400d044 	.word	0x2400d044
90004c68:	58024400 	.word	0x58024400
90004c6c:	58021000 	.word	0x58021000
90004c70:	58021800 	.word	0x58021800
90004c74:	58020c00 	.word	0x58020c00
90004c78:	58021400 	.word	0x58021400
90004c7c:	58021c00 	.word	0x58021c00

90004c80 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90004c80:	280f      	cmp	r0, #15
90004c82:	d901      	bls.n	90004c88 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
90004c84:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
90004c86:	4770      	bx	lr
{
90004c88:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
90004c8a:	4601      	mov	r1, r0
{
90004c8c:	b08b      	sub	sp, #44	; 0x2c
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
90004c8e:	2200      	movs	r2, #0
90004c90:	4604      	mov	r4, r0
90004c92:	2036      	movs	r0, #54	; 0x36
90004c94:	f004 fbb4 	bl	90009400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
90004c98:	2036      	movs	r0, #54	; 0x36
90004c9a:	f004 fbef 	bl	9000947c <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
90004c9e:	4b1a      	ldr	r3, [pc, #104]	; (90004d08 <HAL_InitTick+0x88>)
    uwTickPrio = TickPriority;
90004ca0:	4a1a      	ldr	r2, [pc, #104]	; (90004d0c <HAL_InitTick+0x8c>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
90004ca2:	4669      	mov	r1, sp
90004ca4:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
90004ca6:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
90004ca8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
90004cac:	f042 0210 	orr.w	r2, r2, #16
90004cb0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
90004cb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90004cb8:	f003 0310 	and.w	r3, r3, #16
90004cbc:	9301      	str	r3, [sp, #4]
90004cbe:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
90004cc0:	f008 fa08 	bl	9000d0d4 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
90004cc4:	9b07      	ldr	r3, [sp, #28]
90004cc6:	b9bb      	cbnz	r3, 90004cf8 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
90004cc8:	f008 f974 	bl	9000cfb4 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004ccc:	4b10      	ldr	r3, [pc, #64]	; (90004d10 <HAL_InitTick+0x90>)
  htim6.Init.ClockDivision = 0;
90004cce:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
90004cd0:	4c10      	ldr	r4, [pc, #64]	; (90004d14 <HAL_InitTick+0x94>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004cd2:	fba3 1300 	umull	r1, r3, r3, r0
  htim6.Instance = TIM6;
90004cd6:	4d10      	ldr	r5, [pc, #64]	; (90004d18 <HAL_InitTick+0x98>)
  htim6.Init.Period = (1000000U / 1000U) - 1U;
90004cd8:	f240 31e7 	movw	r1, #999	; 0x3e7
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
90004cdc:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004cde:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
90004ce0:	6025      	str	r5, [r4, #0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
90004ce2:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004ce4:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000U / 1000U) - 1U;
90004ce6:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
90004cea:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
90004cec:	f009 f984 	bl	9000dff8 <HAL_TIM_Base_Init>
90004cf0:	b130      	cbz	r0, 90004d00 <HAL_InitTick+0x80>
    return HAL_ERROR;
90004cf2:	2001      	movs	r0, #1
}
90004cf4:	b00b      	add	sp, #44	; 0x2c
90004cf6:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
90004cf8:	f008 f95c 	bl	9000cfb4 <HAL_RCC_GetPCLK1Freq>
90004cfc:	0040      	lsls	r0, r0, #1
90004cfe:	e7e5      	b.n	90004ccc <HAL_InitTick+0x4c>
    return HAL_TIM_Base_Start_IT(&htim6);
90004d00:	4620      	mov	r0, r4
90004d02:	f009 fa2f 	bl	9000e164 <HAL_TIM_Base_Start_IT>
90004d06:	e7f5      	b.n	90004cf4 <HAL_InitTick+0x74>
90004d08:	58024400 	.word	0x58024400
90004d0c:	24000060 	.word	0x24000060
90004d10:	431bde83 	.word	0x431bde83
90004d14:	2400d04c 	.word	0x2400d04c
90004d18:	40001000 	.word	0x40001000

90004d1c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
90004d1c:	4770      	bx	lr
90004d1e:	bf00      	nop

90004d20 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
90004d20:	e7fe      	b.n	90004d20 <HardFault_Handler>
90004d22:	bf00      	nop

90004d24 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
90004d24:	e7fe      	b.n	90004d24 <MemManage_Handler>
90004d26:	bf00      	nop

90004d28 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
90004d28:	e7fe      	b.n	90004d28 <BusFault_Handler>
90004d2a:	bf00      	nop

90004d2c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
90004d2c:	e7fe      	b.n	90004d2c <UsageFault_Handler>
90004d2e:	bf00      	nop

90004d30 <DebugMon_Handler>:
90004d30:	4770      	bx	lr
90004d32:	bf00      	nop

90004d34 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
90004d34:	4801      	ldr	r0, [pc, #4]	; (90004d3c <TIM6_DAC_IRQHandler+0x8>)
90004d36:	f009 ba79 	b.w	9000e22c <HAL_TIM_IRQHandler>
90004d3a:	bf00      	nop
90004d3c:	2400d04c 	.word	0x2400d04c

90004d40 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
90004d40:	4801      	ldr	r0, [pc, #4]	; (90004d48 <LTDC_IRQHandler+0x8>)
90004d42:	f007 b861 	b.w	9000be08 <HAL_LTDC_IRQHandler>
90004d46:	bf00      	nop
90004d48:	2400ce88 	.word	0x2400ce88

90004d4c <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
90004d4c:	4801      	ldr	r0, [pc, #4]	; (90004d54 <DMA2D_IRQHandler+0x8>)
90004d4e:	f004 bcbf 	b.w	900096d0 <HAL_DMA2D_IRQHandler>
90004d52:	bf00      	nop
90004d54:	2400cdc8 	.word	0x2400cdc8

90004d58 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
90004d58:	4801      	ldr	r0, [pc, #4]	; (90004d60 <JPEG_IRQHandler+0x8>)
90004d5a:	f006 bf41 	b.w	9000bbe0 <HAL_JPEG_IRQHandler>
90004d5e:	bf00      	nop
90004d60:	2400ce30 	.word	0x2400ce30

90004d64 <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
90004d64:	4804      	ldr	r0, [pc, #16]	; (90004d78 <MDMA_IRQHandler+0x14>)
{
90004d66:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
90004d68:	f007 fb02 	bl	9000c370 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
90004d6c:	4803      	ldr	r0, [pc, #12]	; (90004d7c <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
90004d6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
90004d72:	f007 bafd 	b.w	9000c370 <HAL_MDMA_IRQHandler>
90004d76:	bf00      	nop
90004d78:	2400cf9c 	.word	0x2400cf9c
90004d7c:	2400cf30 	.word	0x2400cf30

90004d80 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
90004d80:	2001      	movs	r0, #1
90004d82:	4770      	bx	lr

90004d84 <_kill>:

int _kill(int pid, int sig)
{
90004d84:	b508      	push	{r3, lr}
	errno = EINVAL;
90004d86:	f022 fd0d 	bl	900277a4 <__errno>
90004d8a:	2216      	movs	r2, #22
90004d8c:	4603      	mov	r3, r0
	return -1;
}
90004d8e:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
90004d92:	601a      	str	r2, [r3, #0]
}
90004d94:	bd08      	pop	{r3, pc}
90004d96:	bf00      	nop

90004d98 <_exit>:

void _exit (int status)
{
90004d98:	b508      	push	{r3, lr}
	errno = EINVAL;
90004d9a:	f022 fd03 	bl	900277a4 <__errno>
90004d9e:	2316      	movs	r3, #22
90004da0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
90004da2:	e7fe      	b.n	90004da2 <_exit+0xa>

90004da4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90004da4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004da6:	1e16      	subs	r6, r2, #0
90004da8:	dd07      	ble.n	90004dba <_read+0x16>
90004daa:	460c      	mov	r4, r1
90004dac:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
90004dae:	f3af 8000 	nop.w
90004db2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004db6:	42a5      	cmp	r5, r4
90004db8:	d1f9      	bne.n	90004dae <_read+0xa>
	}

return len;
}
90004dba:	4630      	mov	r0, r6
90004dbc:	bd70      	pop	{r4, r5, r6, pc}
90004dbe:	bf00      	nop

90004dc0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
90004dc0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004dc2:	1e16      	subs	r6, r2, #0
90004dc4:	dd07      	ble.n	90004dd6 <_write+0x16>
90004dc6:	460c      	mov	r4, r1
90004dc8:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
90004dca:	f814 0b01 	ldrb.w	r0, [r4], #1
90004dce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004dd2:	42ac      	cmp	r4, r5
90004dd4:	d1f9      	bne.n	90004dca <_write+0xa>
	}
	return len;
}
90004dd6:	4630      	mov	r0, r6
90004dd8:	bd70      	pop	{r4, r5, r6, pc}
90004dda:	bf00      	nop

90004ddc <_close>:

int _close(int file)
{
	return -1;
}
90004ddc:	f04f 30ff 	mov.w	r0, #4294967295
90004de0:	4770      	bx	lr
90004de2:	bf00      	nop

90004de4 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
90004de4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
90004de8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
90004dea:	604b      	str	r3, [r1, #4]
}
90004dec:	4770      	bx	lr
90004dee:	bf00      	nop

90004df0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
90004df0:	2001      	movs	r0, #1
90004df2:	4770      	bx	lr

90004df4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
90004df4:	2000      	movs	r0, #0
90004df6:	4770      	bx	lr

90004df8 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
90004df8:	4a0a      	ldr	r2, [pc, #40]	; (90004e24 <_sbrk+0x2c>)
{
90004dfa:	b508      	push	{r3, lr}
90004dfc:	4603      	mov	r3, r0
	if (heap_end == 0)
90004dfe:	6810      	ldr	r0, [r2, #0]
90004e00:	b128      	cbz	r0, 90004e0e <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
90004e02:	4403      	add	r3, r0
90004e04:	4669      	mov	r1, sp
90004e06:	428b      	cmp	r3, r1
90004e08:	d805      	bhi.n	90004e16 <_sbrk+0x1e>
	{
		errno = ENOMEM;
		return NULL;
	}

	heap_end += incr;
90004e0a:	6013      	str	r3, [r2, #0]

	return prev_heap_end;
}
90004e0c:	bd08      	pop	{r3, pc}
		heap_end = &end;
90004e0e:	4906      	ldr	r1, [pc, #24]	; (90004e28 <_sbrk+0x30>)
90004e10:	4608      	mov	r0, r1
90004e12:	6011      	str	r1, [r2, #0]
90004e14:	e7f5      	b.n	90004e02 <_sbrk+0xa>
		errno = ENOMEM;
90004e16:	f022 fcc5 	bl	900277a4 <__errno>
90004e1a:	220c      	movs	r2, #12
90004e1c:	4603      	mov	r3, r0
		return NULL;
90004e1e:	2000      	movs	r0, #0
		errno = ENOMEM;
90004e20:	601a      	str	r2, [r3, #0]
}
90004e22:	bd08      	pop	{r3, pc}
90004e24:	2400d098 	.word	0x2400d098
90004e28:	24028580 	.word	0x24028580

90004e2c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
90004e2c:	4770      	bx	lr
90004e2e:	bf00      	nop

90004e30 <_ZN23ApplicationFontProviderD0Ev>:
90004e30:	b510      	push	{r4, lr}
90004e32:	4604      	mov	r4, r0
90004e34:	2104      	movs	r1, #4
90004e36:	f022 f91e 	bl	90027076 <_ZdlPvj>
90004e3a:	4620      	mov	r0, r4
90004e3c:	bd10      	pop	{r4, pc}
90004e3e:	bf00      	nop

90004e40 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
90004e40:	2901      	cmp	r1, #1
{
90004e42:	b508      	push	{r3, lr}
    switch (typography)
90004e44:	d004      	beq.n	90004e50 <_ZN23ApplicationFontProvider7getFontEt+0x10>
90004e46:	2902      	cmp	r1, #2
90004e48:	d00a      	beq.n	90004e60 <_ZN23ApplicationFontProvider7getFontEt+0x20>
90004e4a:	b129      	cbz	r1, 90004e58 <_ZN23ApplicationFontProvider7getFontEt+0x18>
90004e4c:	2000      	movs	r0, #0
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
90004e4e:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
90004e50:	f002 ff80 	bl	90007d54 <_ZN17TypedTextDatabase8getFontsEv>
90004e54:	6840      	ldr	r0, [r0, #4]
}
90004e56:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
90004e58:	f002 ff7c 	bl	90007d54 <_ZN17TypedTextDatabase8getFontsEv>
90004e5c:	6800      	ldr	r0, [r0, #0]
}
90004e5e:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
90004e60:	f002 ff78 	bl	90007d54 <_ZN17TypedTextDatabase8getFontsEv>
90004e64:	6880      	ldr	r0, [r0, #8]
}
90004e66:	bd08      	pop	{r3, pc}

90004e68 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
90004e68:	4800      	ldr	r0, [pc, #0]	; (90004e6c <_ZN14BitmapDatabase11getInstanceEv+0x4>)
90004e6a:	4770      	bx	lr
90004e6c:	90029fd0 	.word	0x90029fd0

90004e70 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
90004e70:	2016      	movs	r0, #22
90004e72:	4770      	bx	lr

90004e74 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
90004e74:	b169      	cbz	r1, 90004e92 <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004e76:	6802      	ldr	r2, [r0, #0]
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
90004e78:	b530      	push	{r4, r5, lr}
90004e7a:	b083      	sub	sp, #12
        const uint8_t* dummyPixelDataPointer = 0;
90004e7c:	2400      	movs	r4, #0
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004e7e:	6895      	ldr	r5, [r2, #8]
90004e80:	f10d 0303 	add.w	r3, sp, #3
90004e84:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
90004e86:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
90004e88:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004e8c:	47a8      	blx	r5
        return glyph;
    }
90004e8e:	b003      	add	sp, #12
90004e90:	bd30      	pop	{r4, r5, pc}
            return 0;
90004e92:	4608      	mov	r0, r1
    }
90004e94:	4770      	bx	lr
90004e96:	bf00      	nop

90004e98 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
90004e98:	89c0      	ldrh	r0, [r0, #14]
90004e9a:	4770      	bx	lr

90004e9c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
90004e9c:	8a00      	ldrh	r0, [r0, #16]
90004e9e:	4770      	bx	lr

90004ea0 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
90004ea0:	88c0      	ldrh	r0, [r0, #6]
90004ea2:	4770      	bx	lr

90004ea4 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
90004ea4:	8880      	ldrh	r0, [r0, #4]
90004ea6:	4770      	bx	lr

90004ea8 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
90004ea8:	7a80      	ldrb	r0, [r0, #10]
    }
90004eaa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
90004eae:	4770      	bx	lr

90004eb0 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
90004eb0:	7a80      	ldrb	r0, [r0, #10]
    }
90004eb2:	09c0      	lsrs	r0, r0, #7
90004eb4:	4770      	bx	lr
90004eb6:	bf00      	nop

90004eb8 <_ZN8touchgfx9TypedTextD1Ev>:
    }
90004eb8:	4770      	bx	lr
90004eba:	bf00      	nop

90004ebc <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
90004ebc:	b510      	push	{r4, lr}
90004ebe:	4604      	mov	r4, r0
    }
90004ec0:	2108      	movs	r1, #8
90004ec2:	f022 f8d8 	bl	90027076 <_ZdlPvj>
90004ec6:	4620      	mov	r0, r4
90004ec8:	bd10      	pop	{r4, pc}
90004eca:	bf00      	nop

90004ecc <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
90004ecc:	4770      	bx	lr
90004ece:	bf00      	nop

90004ed0 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
90004ed0:	f500 7398 	add.w	r3, r0, #304	; 0x130
90004ed4:	6808      	ldr	r0, [r1, #0]
90004ed6:	6849      	ldr	r1, [r1, #4]
90004ed8:	c303      	stmia	r3!, {r0, r1}
    }
90004eda:	4770      	bx	lr

90004edc <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
90004edc:	6a80      	ldr	r0, [r0, #40]	; 0x28
90004ede:	4770      	bx	lr

90004ee0 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
90004ee0:	4770      	bx	lr
90004ee2:	bf00      	nop

90004ee4 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
90004ee4:	4770      	bx	lr
90004ee6:	bf00      	nop

90004ee8 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
90004ee8:	6041      	str	r1, [r0, #4]
    }
90004eea:	4770      	bx	lr

90004eec <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
90004eec:	4770      	bx	lr
90004eee:	bf00      	nop

90004ef0 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90004ef0:	4905      	ldr	r1, [pc, #20]	; (90004f08 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x18>)
90004ef2:	2200      	movs	r2, #0
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
90004ef4:	f500 73a2 	add.w	r3, r0, #324	; 0x144
90004ef8:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
90004efc:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
90004f00:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
90004f04:	4770      	bx	lr
90004f06:	bf00      	nop
90004f08:	900051ed 	.word	0x900051ed

90004f0c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
90004f0c:	2301      	movs	r3, #1
90004f0e:	7203      	strb	r3, [r0, #8]
    }
90004f10:	4770      	bx	lr
90004f12:	bf00      	nop

90004f14 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>:
 * Screen transitioning to.
 *
 * @see Transition
 */
template <Direction templateDirection>
class SlideTransition : public Transition
90004f14:	4770      	bx	lr
90004f16:	bf00      	nop

90004f18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
90004f18:	4770      	bx	lr
90004f1a:	bf00      	nop

90004f1c <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
90004f1c:	4770      	bx	lr
90004f1e:	bf00      	nop

90004f20 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
90004f20:	4770      	bx	lr
90004f22:	bf00      	nop

90004f24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
    {
        (pobject->*pmemfun)();
90004f24:	68c2      	ldr	r2, [r0, #12]
    virtual void execute()
90004f26:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
90004f28:	6841      	ldr	r1, [r0, #4]
90004f2a:	ea4f 0c62 	mov.w	ip, r2, asr #1
90004f2e:	eb01 0062 	add.w	r0, r1, r2, asr #1
90004f32:	07d2      	lsls	r2, r2, #31
90004f34:	d401      	bmi.n	90004f3a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x16>
90004f36:	689b      	ldr	r3, [r3, #8]
90004f38:	4718      	bx	r3
90004f3a:	f851 200c 	ldr.w	r2, [r1, ip]
90004f3e:	689b      	ldr	r3, [r3, #8]
90004f40:	58d3      	ldr	r3, [r2, r3]
90004f42:	4718      	bx	r3

90004f44 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
90004f44:	6843      	ldr	r3, [r0, #4]
90004f46:	b13b      	cbz	r3, 90004f58 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
90004f48:	6883      	ldr	r3, [r0, #8]
90004f4a:	b10b      	cbz	r3, 90004f50 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
90004f4c:	2001      	movs	r0, #1
    }
90004f4e:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
90004f50:	68c0      	ldr	r0, [r0, #12]
90004f52:	f000 0001 	and.w	r0, r0, #1
90004f56:	4770      	bx	lr
90004f58:	4618      	mov	r0, r3
90004f5a:	4770      	bx	lr

90004f5c <_ZN8touchgfx12NoTransitionD0Ev>:
90004f5c:	b510      	push	{r4, lr}
90004f5e:	4604      	mov	r4, r0
90004f60:	210c      	movs	r1, #12
90004f62:	f022 f888 	bl	90027076 <_ZdlPvj>
90004f66:	4620      	mov	r0, r4
90004f68:	bd10      	pop	{r4, pc}
90004f6a:	bf00      	nop

90004f6c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90004f6c:	b510      	push	{r4, lr}
90004f6e:	4604      	mov	r4, r0
90004f70:	2110      	movs	r1, #16
90004f72:	f022 f880 	bl	90027076 <_ZdlPvj>
90004f76:	4620      	mov	r0, r4
90004f78:	bd10      	pop	{r4, pc}
90004f7a:	bf00      	nop

90004f7c <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
90004f7c:	b510      	push	{r4, lr}
90004f7e:	4604      	mov	r4, r0
90004f80:	f44f 71ae 	mov.w	r1, #348	; 0x15c
90004f84:	f022 f877 	bl	90027076 <_ZdlPvj>
90004f88:	4620      	mov	r0, r4
90004f8a:	bd10      	pop	{r4, pc}

90004f8c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED0Ev>:
90004f8c:	b510      	push	{r4, lr}
90004f8e:	4604      	mov	r4, r0
90004f90:	2140      	movs	r1, #64	; 0x40
90004f92:	f022 f870 	bl	90027076 <_ZdlPvj>
90004f96:	4620      	mov	r0, r4
90004f98:	bd10      	pop	{r4, pc}
90004f9a:	bf00      	nop

90004f9c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
90004f9c:	b510      	push	{r4, lr}
90004f9e:	4604      	mov	r4, r0
90004fa0:	2140      	movs	r1, #64	; 0x40
90004fa2:	f022 f868 	bl	90027076 <_ZdlPvj>
90004fa6:	4620      	mov	r0, r4
90004fa8:	bd10      	pop	{r4, pc}
90004faa:	bf00      	nop

90004fac <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
90004fac:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
90004fae:	f012 fde5 	bl	90017b7c <_ZN8touchgfx11Application11getInstanceEv>
    }
90004fb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
90004fb6:	f013 ba75 	b.w	900184a4 <_ZN8touchgfx11Application10invalidateEv>
90004fba:	bf00      	nop

90004fbc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv>:
        screenContainer->invalidate();
    }

    virtual void tearDown()
    {
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
90004fbc:	4b05      	ldr	r3, [pc, #20]	; (90004fd4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x18>)
90004fbe:	781b      	ldrb	r3, [r3, #0]
90004fc0:	b13b      	cbz	r3, 90004fd2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x16>
90004fc2:	6843      	ldr	r3, [r0, #4]
90004fc4:	b12b      	cbz	r3, 90004fd2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x16>
        {
            screenContainer->remove(snapshot);
90004fc6:	681a      	ldr	r2, [r3, #0]
90004fc8:	f100 010c 	add.w	r1, r0, #12
90004fcc:	4618      	mov	r0, r3
90004fce:	6e53      	ldr	r3, [r2, #100]	; 0x64
90004fd0:	4718      	bx	r3
        }
    }
90004fd2:	4770      	bx	lr
90004fd4:	24028193 	.word	0x24028193

90004fd8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
90004fd8:	4b05      	ldr	r3, [pc, #20]	; (90004ff0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x18>)
90004fda:	781b      	ldrb	r3, [r3, #0]
90004fdc:	b13b      	cbz	r3, 90004fee <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x16>
90004fde:	6843      	ldr	r3, [r0, #4]
90004fe0:	b12b      	cbz	r3, 90004fee <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x16>
            screenContainer->remove(snapshot);
90004fe2:	681a      	ldr	r2, [r3, #0]
90004fe4:	f100 010c 	add.w	r1, r0, #12
90004fe8:	4618      	mov	r0, r3
90004fea:	6e53      	ldr	r3, [r2, #100]	; 0x64
90004fec:	4718      	bx	r3
    }
90004fee:	4770      	bx	lr
90004ff0:	24028193 	.word	0x24028193

90004ff4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv>:
    virtual void handleTickEvent()
90004ff4:	b570      	push	{r4, r5, r6, lr}
90004ff6:	4605      	mov	r5, r0
        animationCounter++;
90004ff8:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
90004ffc:	3001      	adds	r0, #1
        if (animationCounter > animationSteps)
90004ffe:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
        animationCounter++;
90005002:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
90005004:	4298      	cmp	r0, r3
        animationCounter++;
90005006:	f885 0039 	strb.w	r0, [r5, #57]	; 0x39
        if (animationCounter > animationSteps)
9000500a:	d905      	bls.n	90005018 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x24>
            done = true;
9000500c:	2201      	movs	r2, #1
            animationCounter = 0;
9000500e:	2300      	movs	r3, #0
            done = true;
90005010:	722a      	strb	r2, [r5, #8]
            animationCounter = 0;
90005012:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    }
90005016:	bd70      	pop	{r4, r5, r6, pc}
        int16_t calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
90005018:	f9b5 203a 	ldrsh.w	r2, [r5, #58]	; 0x3a
9000501c:	2100      	movs	r1, #0
9000501e:	f014 fb61 	bl	900196e4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
90005022:	f010 0201 	ands.w	r2, r0, #1
90005026:	b283      	uxth	r3, r0
90005028:	d006      	beq.n	90005038 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x44>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
9000502a:	f64f 71ff 	movw	r1, #65535	; 0xffff
9000502e:	2800      	cmp	r0, #0
90005030:	bfd8      	it	le
90005032:	460a      	movle	r2, r1
90005034:	4413      	add	r3, r2
90005036:	b29b      	uxth	r3, r3
        Drawable* d = screenContainer->getFirstChild();
90005038:	6868      	ldr	r0, [r5, #4]
            relativeValue = calculatedValue - snapshot.getX();
9000503a:	8a2c      	ldrh	r4, [r5, #16]
        Drawable* d = screenContainer->getFirstChild();
9000503c:	6802      	ldr	r2, [r0, #0]
9000503e:	4912      	ldr	r1, [pc, #72]	; (90005088 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x94>)
            relativeValue = calculatedValue - snapshot.getX();
90005040:	1b1b      	subs	r3, r3, r4
        Drawable* d = screenContainer->getFirstChild();
90005042:	69d2      	ldr	r2, [r2, #28]
            relativeValue = calculatedValue - snapshot.getX();
90005044:	87ab      	strh	r3, [r5, #60]	; 0x3c
90005046:	428a      	cmp	r2, r1
90005048:	d11b      	bne.n	90005082 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x8e>
        return firstChild;
9000504a:	6a84      	ldr	r4, [r0, #40]	; 0x28
        while (d)
9000504c:	b164      	cbz	r4, 90005068 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x74>
9000504e:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
90005050:	4e0e      	ldr	r6, [pc, #56]	; (9000508c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x98>)
                d->setX(d->getX() + relativeValue);
90005052:	6823      	ldr	r3, [r4, #0]
90005054:	88a1      	ldrh	r1, [r4, #4]
90005056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90005058:	4411      	add	r1, r2
9000505a:	42b3      	cmp	r3, r6
9000505c:	b209      	sxth	r1, r1
        rect.x = x;
9000505e:	d109      	bne.n	90005074 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x80>
90005060:	80a1      	strh	r1, [r4, #4]
        return nextSibling;
90005062:	69a4      	ldr	r4, [r4, #24]
        while (d)
90005064:	2c00      	cmp	r4, #0
90005066:	d1f4      	bne.n	90005052 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x5e>
        screenContainer->invalidate();
90005068:	6868      	ldr	r0, [r5, #4]
9000506a:	6803      	ldr	r3, [r0, #0]
    }
9000506c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->invalidate();
90005070:	695b      	ldr	r3, [r3, #20]
90005072:	4718      	bx	r3
                d->setX(d->getX() + relativeValue);
90005074:	4620      	mov	r0, r4
90005076:	4798      	blx	r3
90005078:	69a4      	ldr	r4, [r4, #24]
        while (d)
9000507a:	2c00      	cmp	r4, #0
9000507c:	d0f4      	beq.n	90005068 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x74>
9000507e:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
90005080:	e7e7      	b.n	90005052 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x5e>
        Drawable* d = screenContainer->getFirstChild();
90005082:	4790      	blx	r2
90005084:	4604      	mov	r4, r0
90005086:	e7e1      	b.n	9000504c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x58>
90005088:	90004edd 	.word	0x90004edd
9000508c:	90002351 	.word	0x90002351

90005090 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
90005090:	b570      	push	{r4, r5, r6, lr}
90005092:	4605      	mov	r5, r0
        animationCounter++;
90005094:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
90005098:	3001      	adds	r0, #1
        if (animationCounter > animationSteps)
9000509a:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
        animationCounter++;
9000509e:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
900050a0:	4298      	cmp	r0, r3
        animationCounter++;
900050a2:	f885 0039 	strb.w	r0, [r5, #57]	; 0x39
        if (animationCounter > animationSteps)
900050a6:	d905      	bls.n	900050b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x24>
            done = true;
900050a8:	2201      	movs	r2, #1
            animationCounter = 0;
900050aa:	2300      	movs	r3, #0
            done = true;
900050ac:	722a      	strb	r2, [r5, #8]
            animationCounter = 0;
900050ae:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    }
900050b2:	bd70      	pop	{r4, r5, r6, pc}
        int16_t calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
900050b4:	f9b5 203a 	ldrsh.w	r2, [r5, #58]	; 0x3a
900050b8:	2100      	movs	r1, #0
900050ba:	f014 fb13 	bl	900196e4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
900050be:	f010 0201 	ands.w	r2, r0, #1
900050c2:	b283      	uxth	r3, r0
900050c4:	d006      	beq.n	900050d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x44>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
900050c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
900050ca:	2800      	cmp	r0, #0
900050cc:	bfd8      	it	le
900050ce:	460a      	movle	r2, r1
900050d0:	4413      	add	r3, r2
900050d2:	b29b      	uxth	r3, r3
        Drawable* d = screenContainer->getFirstChild();
900050d4:	6868      	ldr	r0, [r5, #4]
            relativeValue = calculatedValue - snapshot.getX();
900050d6:	8a2c      	ldrh	r4, [r5, #16]
        Drawable* d = screenContainer->getFirstChild();
900050d8:	6802      	ldr	r2, [r0, #0]
900050da:	4912      	ldr	r1, [pc, #72]	; (90005124 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>)
            relativeValue = calculatedValue - snapshot.getX();
900050dc:	1b1b      	subs	r3, r3, r4
        Drawable* d = screenContainer->getFirstChild();
900050de:	69d2      	ldr	r2, [r2, #28]
            relativeValue = calculatedValue - snapshot.getX();
900050e0:	87ab      	strh	r3, [r5, #60]	; 0x3c
900050e2:	428a      	cmp	r2, r1
900050e4:	d11b      	bne.n	9000511e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
900050e6:	6a84      	ldr	r4, [r0, #40]	; 0x28
        while (d)
900050e8:	b164      	cbz	r4, 90005104 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x74>
900050ea:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
900050ec:	4e0e      	ldr	r6, [pc, #56]	; (90005128 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>)
                d->setX(d->getX() + relativeValue);
900050ee:	6823      	ldr	r3, [r4, #0]
900050f0:	88a1      	ldrh	r1, [r4, #4]
900050f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900050f4:	4411      	add	r1, r2
900050f6:	42b3      	cmp	r3, r6
900050f8:	b209      	sxth	r1, r1
        rect.x = x;
900050fa:	d109      	bne.n	90005110 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x80>
900050fc:	80a1      	strh	r1, [r4, #4]
        return nextSibling;
900050fe:	69a4      	ldr	r4, [r4, #24]
        while (d)
90005100:	2c00      	cmp	r4, #0
90005102:	d1f4      	bne.n	900050ee <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x5e>
        screenContainer->invalidate();
90005104:	6868      	ldr	r0, [r5, #4]
90005106:	6803      	ldr	r3, [r0, #0]
    }
90005108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->invalidate();
9000510c:	695b      	ldr	r3, [r3, #20]
9000510e:	4718      	bx	r3
                d->setX(d->getX() + relativeValue);
90005110:	4620      	mov	r0, r4
90005112:	4798      	blx	r3
90005114:	69a4      	ldr	r4, [r4, #24]
        while (d)
90005116:	2c00      	cmp	r4, #0
90005118:	d0f4      	beq.n	90005104 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x74>
9000511a:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
9000511c:	e7e7      	b.n	900050ee <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x5e>
        Drawable* d = screenContainer->getFirstChild();
9000511e:	4790      	blx	r2
90005120:	4604      	mov	r4, r0
90005122:	e7e1      	b.n	900050e8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x58>
90005124:	90004edd 	.word	0x90004edd
90005128:	90002351 	.word	0x90002351

9000512c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv>:

    virtual void init()
    {
        Transition::init();

        if (done)
9000512c:	7a03      	ldrb	r3, [r0, #8]
9000512e:	bb2b      	cbnz	r3, 9000517c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x50>
90005130:	4a14      	ldr	r2, [pc, #80]	; (90005184 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x58>)
    virtual void init()
90005132:	b570      	push	{r4, r5, r6, lr}
90005134:	4605      	mov	r5, r0
        {
            return;
        }

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
90005136:	6840      	ldr	r0, [r0, #4]
90005138:	6803      	ldr	r3, [r0, #0]
9000513a:	69db      	ldr	r3, [r3, #28]
9000513c:	4293      	cmp	r3, r2
9000513e:	d11e      	bne.n	9000517e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x52>
90005140:	6a84      	ldr	r4, [r0, #40]	; 0x28
        while (d)
90005142:	b164      	cbz	r4, 9000515e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x32>
90005144:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
90005146:	4e10      	ldr	r6, [pc, #64]	; (90005188 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x5c>)
        {
            switch (templateDirection)
            {
            case EAST:
            case WEST:
                d->setX(d->getX() - targetValue);
90005148:	6823      	ldr	r3, [r4, #0]
9000514a:	88a1      	ldrh	r1, [r4, #4]
9000514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000514e:	1a89      	subs	r1, r1, r2
90005150:	42b3      	cmp	r3, r6
90005152:	b209      	sxth	r1, r1
        rect.x = x;
90005154:	d10b      	bne.n	9000516e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x42>
90005156:	80a1      	strh	r1, [r4, #4]
        return nextSibling;
90005158:	69a4      	ldr	r4, [r4, #24]
        while (d)
9000515a:	2c00      	cmp	r4, #0
9000515c:	d1f4      	bne.n	90005148 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x1c>
            }

            d = d->getNextSibling();
        }

        screenContainer->add(snapshot);
9000515e:	6868      	ldr	r0, [r5, #4]
90005160:	f105 010c 	add.w	r1, r5, #12
90005164:	6803      	ldr	r3, [r0, #0]
    }
90005166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(snapshot);
9000516a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
9000516c:	4718      	bx	r3
                d->setX(d->getX() - targetValue);
9000516e:	4620      	mov	r0, r4
90005170:	4798      	blx	r3
90005172:	69a4      	ldr	r4, [r4, #24]
        while (d)
90005174:	2c00      	cmp	r4, #0
90005176:	d0f2      	beq.n	9000515e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x32>
90005178:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
9000517a:	e7e5      	b.n	90005148 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x1c>
9000517c:	4770      	bx	lr
        Drawable* d = screenContainer->getFirstChild();
9000517e:	4798      	blx	r3
90005180:	4604      	mov	r4, r0
90005182:	e7de      	b.n	90005142 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x16>
90005184:	90004edd 	.word	0x90004edd
90005188:	90002351 	.word	0x90002351

9000518c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
        if (done)
9000518c:	7a03      	ldrb	r3, [r0, #8]
9000518e:	bb2b      	cbnz	r3, 900051dc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x50>
90005190:	4a14      	ldr	r2, [pc, #80]	; (900051e4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x58>)
    virtual void init()
90005192:	b570      	push	{r4, r5, r6, lr}
90005194:	4605      	mov	r5, r0
        Drawable* d = screenContainer->getFirstChild();
90005196:	6840      	ldr	r0, [r0, #4]
90005198:	6803      	ldr	r3, [r0, #0]
9000519a:	69db      	ldr	r3, [r3, #28]
9000519c:	4293      	cmp	r3, r2
9000519e:	d11e      	bne.n	900051de <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x52>
900051a0:	6a84      	ldr	r4, [r0, #40]	; 0x28
        while (d)
900051a2:	b164      	cbz	r4, 900051be <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x32>
900051a4:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
900051a6:	4e10      	ldr	r6, [pc, #64]	; (900051e8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x5c>)
                d->setX(d->getX() - targetValue);
900051a8:	6823      	ldr	r3, [r4, #0]
900051aa:	88a1      	ldrh	r1, [r4, #4]
900051ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900051ae:	1a89      	subs	r1, r1, r2
900051b0:	42b3      	cmp	r3, r6
900051b2:	b209      	sxth	r1, r1
        rect.x = x;
900051b4:	d10b      	bne.n	900051ce <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x42>
900051b6:	80a1      	strh	r1, [r4, #4]
        return nextSibling;
900051b8:	69a4      	ldr	r4, [r4, #24]
        while (d)
900051ba:	2c00      	cmp	r4, #0
900051bc:	d1f4      	bne.n	900051a8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x1c>
        screenContainer->add(snapshot);
900051be:	6868      	ldr	r0, [r5, #4]
900051c0:	f105 010c 	add.w	r1, r5, #12
900051c4:	6803      	ldr	r3, [r0, #0]
    }
900051c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(snapshot);
900051ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
900051cc:	4718      	bx	r3
                d->setX(d->getX() - targetValue);
900051ce:	4620      	mov	r0, r4
900051d0:	4798      	blx	r3
900051d2:	69a4      	ldr	r4, [r4, #24]
        while (d)
900051d4:	2c00      	cmp	r4, #0
900051d6:	d0f2      	beq.n	900051be <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x32>
900051d8:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
900051da:	e7e5      	b.n	900051a8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x1c>
900051dc:	4770      	bx	lr
        Drawable* d = screenContainer->getFirstChild();
900051de:	4798      	blx	r3
900051e0:	4604      	mov	r4, r0
900051e2:	e7de      	b.n	900051a2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x16>
900051e4:	90004edd 	.word	0x90004edd
900051e8:	90002351 	.word	0x90002351

900051ec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
900051ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
900051f0:	e9d0 4a55 	ldrd	r4, sl, [r0, #340]	; 0x154
{
900051f4:	4607      	mov	r7, r0
900051f6:	b081      	sub	sp, #4
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
900051f8:	68a0      	ldr	r0, [r4, #8]
900051fa:	6803      	ldr	r3, [r0, #0]
900051fc:	6a1b      	ldr	r3, [r3, #32]
900051fe:	4798      	blx	r3
90005200:	f5b0 7ff2 	cmp.w	r0, #484	; 0x1e4
90005204:	f0c0 809c 	bcc.w	90005340 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x154>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
90005208:	6860      	ldr	r0, [r4, #4]
9000520a:	6803      	ldr	r3, [r0, #0]
9000520c:	6a1b      	ldr	r3, [r3, #32]
9000520e:	4798      	blx	r3
90005210:	280f      	cmp	r0, #15
90005212:	f240 80a1 	bls.w	90005358 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x16c>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
90005216:	68e0      	ldr	r0, [r4, #12]
90005218:	6803      	ldr	r3, [r0, #0]
9000521a:	6a1b      	ldr	r3, [r3, #32]
9000521c:	4798      	blx	r3
9000521e:	280b      	cmp	r0, #11
90005220:	f240 8094 	bls.w	9000534c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x160>
    if (*currentTrans)
90005224:	f8df 915c 	ldr.w	r9, [pc, #348]	; 90005384 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x198>
    Application::getInstance()->clearAllTimerWidgets();
90005228:	f012 fca8 	bl	90017b7c <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
9000522c:	3004      	adds	r0, #4
9000522e:	f012 fce3 	bl	90017bf8 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
90005232:	f8d9 0000 	ldr.w	r0, [r9]
90005236:	b140      	cbz	r0, 9000524a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x5e>
        (*currentTrans)->tearDown();
90005238:	6803      	ldr	r3, [r0, #0]
9000523a:	68db      	ldr	r3, [r3, #12]
9000523c:	4798      	blx	r3
    if (*currentTrans)
9000523e:	f8d9 0000 	ldr.w	r0, [r9]
90005242:	b110      	cbz	r0, 9000524a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x5e>
        (*currentTrans)->~Transition();
90005244:	6803      	ldr	r3, [r0, #0]
90005246:	681b      	ldr	r3, [r3, #0]
90005248:	4798      	blx	r3
    if (*currentScreen)
9000524a:	f8df 813c 	ldr.w	r8, [pc, #316]	; 90005388 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x19c>
9000524e:	f8d8 0000 	ldr.w	r0, [r8]
90005252:	2800      	cmp	r0, #0
90005254:	d061      	beq.n	9000531a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12e>
        (*currentScreen)->tearDownScreen();
90005256:	6803      	ldr	r3, [r0, #0]
90005258:	695b      	ldr	r3, [r3, #20]
9000525a:	4798      	blx	r3
    if (*currentPresenter)
9000525c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
90005260:	2800      	cmp	r0, #0
90005262:	d055      	beq.n	90005310 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x124>
        (*currentPresenter)->deactivate();
90005264:	6803      	ldr	r3, [r0, #0]
90005266:	685b      	ldr	r3, [r3, #4]
90005268:	4798      	blx	r3
    if (*currentScreen)
9000526a:	f8d8 0000 	ldr.w	r0, [r8]
9000526e:	b110      	cbz	r0, 90005276 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8a>
        (*currentScreen)->~Screen();
90005270:	6803      	ldr	r3, [r0, #0]
90005272:	681b      	ldr	r3, [r3, #0]
90005274:	4798      	blx	r3
    if (*currentPresenter)
90005276:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
9000527a:	b110      	cbz	r0, 90005282 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x96>
        (*currentPresenter)->~Presenter();
9000527c:	6803      	ldr	r3, [r0, #0]
9000527e:	689b      	ldr	r3, [r3, #8]
90005280:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
90005282:	68e0      	ldr	r0, [r4, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
90005284:	2100      	movs	r1, #0
90005286:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
90005288:	468b      	mov	fp, r1
9000528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000528c:	4798      	blx	r3
9000528e:	4b35      	ldr	r3, [pc, #212]	; (90005364 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x178>)
90005290:	4605      	mov	r5, r0
90005292:	f8c0 b004 	str.w	fp, [r0, #4]
90005296:	f880 b008 	strb.w	fp, [r0, #8]
9000529a:	4659      	mov	r1, fp
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
9000529c:	68a0      	ldr	r0, [r4, #8]
9000529e:	602b      	str	r3, [r5, #0]
900052a0:	6803      	ldr	r3, [r0, #0]
900052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900052a4:	4798      	blx	r3
900052a6:	4606      	mov	r6, r0
900052a8:	f002 fe40 	bl	90007f2c <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
900052ac:	6860      	ldr	r0, [r4, #4]
900052ae:	4659      	mov	r1, fp
900052b0:	6803      	ldr	r3, [r0, #0]
900052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900052b4:	4798      	blx	r3
900052b6:	4604      	mov	r4, r0
900052b8:	4631      	mov	r1, r6
900052ba:	f002 fe0b 	bl	90007ed4 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
900052be:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
900052c2:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
900052c6:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
900052ca:	b35c      	cbz	r4, 90005324 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>
900052cc:	1d23      	adds	r3, r4, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
900052ce:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
900052d2:	4630      	mov	r0, r6
900052d4:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
900052d6:	f8c4 a008 	str.w	sl, [r4, #8]
900052da:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
900052dc:	63f4      	str	r4, [r6, #60]	; 0x3c
900052de:	4798      	blx	r3
    newPresenter->activate();
900052e0:	6823      	ldr	r3, [r4, #0]
900052e2:	4620      	mov	r0, r4
900052e4:	681b      	ldr	r3, [r3, #0]
900052e6:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
900052e8:	4629      	mov	r1, r5
900052ea:	4630      	mov	r0, r6
900052ec:	f014 f9f4 	bl	900196d8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
900052f0:	682b      	ldr	r3, [r5, #0]
900052f2:	491d      	ldr	r1, [pc, #116]	; (90005368 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x17c>)
900052f4:	691a      	ldr	r2, [r3, #16]
900052f6:	428a      	cmp	r2, r1
900052f8:	d116      	bne.n	90005328 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>
    newTransition->invalidate();
900052fa:	695b      	ldr	r3, [r3, #20]
900052fc:	4a1b      	ldr	r2, [pc, #108]	; (9000536c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x180>)
900052fe:	4293      	cmp	r3, r2
90005300:	d119      	bne.n	90005336 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14a>
        Application::getInstance()->invalidate();
90005302:	f012 fc3b 	bl	90017b7c <_ZN8touchgfx11Application11getInstanceEv>
}
90005306:	b001      	add	sp, #4
90005308:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000530c:	f013 b8ca 	b.w	900184a4 <_ZN8touchgfx11Application10invalidateEv>
    if (*currentScreen)
90005310:	f8d8 0000 	ldr.w	r0, [r8]
90005314:	2800      	cmp	r0, #0
90005316:	d1ab      	bne.n	90005270 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
90005318:	e7b3      	b.n	90005282 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x96>
    if (*currentPresenter)
9000531a:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
9000531e:	2800      	cmp	r0, #0
90005320:	d1a0      	bne.n	90005264 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x78>
90005322:	e7ae      	b.n	90005282 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x96>
    model->bind(newPresenter);
90005324:	4623      	mov	r3, r4
90005326:	e7d2      	b.n	900052ce <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xe2>
    newTransition->init();
90005328:	4628      	mov	r0, r5
9000532a:	4790      	blx	r2
    newTransition->invalidate();
9000532c:	682b      	ldr	r3, [r5, #0]
9000532e:	4a0f      	ldr	r2, [pc, #60]	; (9000536c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x180>)
90005330:	695b      	ldr	r3, [r3, #20]
90005332:	4293      	cmp	r3, r2
90005334:	d0e5      	beq.n	90005302 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x116>
90005336:	4628      	mov	r0, r5
90005338:	b001      	add	sp, #4
9000533a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000533e:	4718      	bx	r3
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
90005340:	4b0b      	ldr	r3, [pc, #44]	; (90005370 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x184>)
90005342:	21a3      	movs	r1, #163	; 0xa3
90005344:	4a0b      	ldr	r2, [pc, #44]	; (90005374 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x188>)
90005346:	480c      	ldr	r0, [pc, #48]	; (90005378 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x18c>)
90005348:	f021 fec4 	bl	900270d4 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
9000534c:	4b0b      	ldr	r3, [pc, #44]	; (9000537c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x190>)
9000534e:	21a5      	movs	r1, #165	; 0xa5
90005350:	4a08      	ldr	r2, [pc, #32]	; (90005374 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x188>)
90005352:	4809      	ldr	r0, [pc, #36]	; (90005378 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x18c>)
90005354:	f021 febe 	bl	900270d4 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
90005358:	4b09      	ldr	r3, [pc, #36]	; (90005380 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x194>)
9000535a:	21a4      	movs	r1, #164	; 0xa4
9000535c:	4a05      	ldr	r2, [pc, #20]	; (90005374 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x188>)
9000535e:	4806      	ldr	r0, [pc, #24]	; (90005378 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x18c>)
90005360:	f021 feb8 	bl	900270d4 <__assert_func>
90005364:	9002a758 	.word	0x9002a758
90005368:	90004ee5 	.word	0x90004ee5
9000536c:	90004fad 	.word	0x90004fad
90005370:	9002a198 	.word	0x9002a198
90005374:	9002a228 	.word	0x9002a228
90005378:	9002a32c 	.word	0x9002a32c
9000537c:	9002a418 	.word	0x9002a418
90005380:	9002a374 	.word	0x9002a374
90005384:	240281dc 	.word	0x240281dc
90005388:	240281d8 	.word	0x240281d8

9000538c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenSlideTransitionWestImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWestImpl()
{
9000538c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::SlideTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
90005390:	e9d0 4b55 	ldrd	r4, fp, [r0, #340]	; 0x154
{
90005394:	4680      	mov	r8, r0
90005396:	b081      	sub	sp, #4
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
90005398:	68a0      	ldr	r0, [r4, #8]
9000539a:	6803      	ldr	r3, [r0, #0]
9000539c:	6a1b      	ldr	r3, [r3, #32]
9000539e:	4798      	blx	r3
900053a0:	f5b0 7ff2 	cmp.w	r0, #484	; 0x1e4
900053a4:	f0c0 80de 	bcc.w	90005564 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1d8>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
900053a8:	6860      	ldr	r0, [r4, #4]
900053aa:	6803      	ldr	r3, [r0, #0]
900053ac:	6a1b      	ldr	r3, [r3, #32]
900053ae:	4798      	blx	r3
900053b0:	280f      	cmp	r0, #15
900053b2:	f240 80e3 	bls.w	9000557c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1f0>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
900053b6:	68e0      	ldr	r0, [r4, #12]
900053b8:	6803      	ldr	r3, [r0, #0]
900053ba:	6a1b      	ldr	r3, [r3, #32]
900053bc:	4798      	blx	r3
900053be:	283f      	cmp	r0, #63	; 0x3f
900053c0:	f240 80d6 	bls.w	90005570 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1e4>
    if (*currentTrans)
900053c4:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 900055bc <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x230>
    Application::getInstance()->clearAllTimerWidgets();
900053c8:	f012 fbd8 	bl	90017b7c <_ZN8touchgfx11Application11getInstanceEv>
900053cc:	3004      	adds	r0, #4
900053ce:	f012 fc13 	bl	90017bf8 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
900053d2:	f8da 0000 	ldr.w	r0, [sl]
900053d6:	b140      	cbz	r0, 900053ea <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x5e>
        (*currentTrans)->tearDown();
900053d8:	6803      	ldr	r3, [r0, #0]
900053da:	68db      	ldr	r3, [r3, #12]
900053dc:	4798      	blx	r3
    if (*currentTrans)
900053de:	f8da 0000 	ldr.w	r0, [sl]
900053e2:	b110      	cbz	r0, 900053ea <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x5e>
        (*currentTrans)->~Transition();
900053e4:	6803      	ldr	r3, [r0, #0]
900053e6:	681b      	ldr	r3, [r3, #0]
900053e8:	4798      	blx	r3
    if (*currentScreen)
900053ea:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 900055c0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x234>
900053ee:	f8d9 0000 	ldr.w	r0, [r9]
900053f2:	2800      	cmp	r0, #0
900053f4:	f000 80a2 	beq.w	9000553c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1b0>
        (*currentScreen)->tearDownScreen();
900053f8:	6803      	ldr	r3, [r0, #0]
900053fa:	695b      	ldr	r3, [r3, #20]
900053fc:	4798      	blx	r3
    if (*currentPresenter)
900053fe:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
90005402:	2800      	cmp	r0, #0
90005404:	d07f      	beq.n	90005506 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x17a>
        (*currentPresenter)->deactivate();
90005406:	6803      	ldr	r3, [r0, #0]
90005408:	685b      	ldr	r3, [r3, #4]
9000540a:	4798      	blx	r3
    if (*currentScreen)
9000540c:	f8d9 0000 	ldr.w	r0, [r9]
90005410:	b110      	cbz	r0, 90005418 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x8c>
        (*currentScreen)->~Screen();
90005412:	6803      	ldr	r3, [r0, #0]
90005414:	681b      	ldr	r3, [r3, #0]
90005416:	4798      	blx	r3
    if (*currentPresenter)
90005418:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
9000541c:	b110      	cbz	r0, 90005424 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x98>
        (*currentPresenter)->~Presenter();
9000541e:	6803      	ldr	r3, [r0, #0]
90005420:	689b      	ldr	r3, [r3, #8]
90005422:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
90005424:	68e0      	ldr	r0, [r4, #12]
90005426:	2100      	movs	r1, #0
90005428:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
9000542a:	460f      	mov	r7, r1
9000542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000542e:	4798      	blx	r3
          relativeValue(0)
90005430:	4b55      	ldr	r3, [pc, #340]	; (90005588 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1fc>)
90005432:	4606      	mov	r6, r0
90005434:	4605      	mov	r5, r0
90005436:	6047      	str	r7, [r0, #4]
90005438:	7207      	strb	r7, [r0, #8]
9000543a:	f846 3b0c 	str.w	r3, [r6], #12
          snapshot(),
9000543e:	4630      	mov	r0, r6
90005440:	f00f fac8 	bl	900149d4 <_ZN8touchgfx14SnapshotWidgetC1Ev>
        if (!HAL::USE_ANIMATION_STORAGE)
90005444:	4b51      	ldr	r3, [pc, #324]	; (9000558c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x200>)
          animationSteps(transitionSteps),
90005446:	2214      	movs	r2, #20
          relativeValue(0)
90005448:	87af      	strh	r7, [r5, #60]	; 0x3c
        if (!HAL::USE_ANIMATION_STORAGE)
9000544a:	781b      	ldrb	r3, [r3, #0]
          animationSteps(transitionSteps),
9000544c:	872a      	strh	r2, [r5, #56]	; 0x38
        if (!HAL::USE_ANIMATION_STORAGE)
9000544e:	2b00      	cmp	r3, #0
90005450:	d165      	bne.n	9000551e <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x192>
            done = true;
90005452:	2301      	movs	r3, #1
90005454:	722b      	strb	r3, [r5, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
90005456:	68a0      	ldr	r0, [r4, #8]
90005458:	2100      	movs	r1, #0
9000545a:	6803      	ldr	r3, [r0, #0]
9000545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000545e:	4798      	blx	r3
90005460:	4607      	mov	r7, r0
90005462:	f002 fd63 	bl	90007f2c <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
90005466:	6860      	ldr	r0, [r4, #4]
90005468:	2100      	movs	r1, #0
9000546a:	6803      	ldr	r3, [r0, #0]
9000546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000546e:	4798      	blx	r3
90005470:	4604      	mov	r4, r0
90005472:	4639      	mov	r1, r7
90005474:	f002 fd2e 	bl	90007ed4 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
90005478:	f8ca 5000 	str.w	r5, [sl]
    *currentPresenter = newPresenter;
9000547c:	f8c8 413c 	str.w	r4, [r8, #316]	; 0x13c
    *currentScreen = newScreen;
90005480:	f8c9 7000 	str.w	r7, [r9]
    model->bind(newPresenter);
90005484:	2c00      	cmp	r4, #0
90005486:	d05f      	beq.n	90005548 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1bc>
90005488:	1d23      	adds	r3, r4, #4
9000548a:	f8cb 3000 	str.w	r3, [fp]
    newScreen->setupScreen();
9000548e:	4638      	mov	r0, r7
90005490:	683b      	ldr	r3, [r7, #0]
90005492:	f8c4 b008 	str.w	fp, [r4, #8]
90005496:	68db      	ldr	r3, [r3, #12]
90005498:	63fc      	str	r4, [r7, #60]	; 0x3c
9000549a:	4798      	blx	r3
    newPresenter->activate();
9000549c:	6823      	ldr	r3, [r4, #0]
9000549e:	4620      	mov	r0, r4
900054a0:	681b      	ldr	r3, [r3, #0]
900054a2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
900054a4:	4629      	mov	r1, r5
900054a6:	4638      	mov	r0, r7
900054a8:	f014 f916 	bl	900196d8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
900054ac:	682b      	ldr	r3, [r5, #0]
900054ae:	4938      	ldr	r1, [pc, #224]	; (90005590 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x204>)
900054b0:	691a      	ldr	r2, [r3, #16]
900054b2:	428a      	cmp	r2, r1
900054b4:	d152      	bne.n	9000555c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1d0>
        if (done)
900054b6:	7a2a      	ldrb	r2, [r5, #8]
900054b8:	b9d2      	cbnz	r2, 900054f0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x164>
        Drawable* d = screenContainer->getFirstChild();
900054ba:	6868      	ldr	r0, [r5, #4]
900054bc:	4a35      	ldr	r2, [pc, #212]	; (90005594 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x208>)
900054be:	6803      	ldr	r3, [r0, #0]
900054c0:	69db      	ldr	r3, [r3, #28]
900054c2:	4293      	cmp	r3, r2
900054c4:	d142      	bne.n	9000554c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1c0>
900054c6:	6a84      	ldr	r4, [r0, #40]	; 0x28
        while (d)
900054c8:	b164      	cbz	r4, 900054e4 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x158>
900054ca:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
900054cc:	4f32      	ldr	r7, [pc, #200]	; (90005598 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x20c>)
                d->setX(d->getX() - targetValue);
900054ce:	6823      	ldr	r3, [r4, #0]
900054d0:	88a1      	ldrh	r1, [r4, #4]
900054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900054d4:	1a89      	subs	r1, r1, r2
900054d6:	42bb      	cmp	r3, r7
900054d8:	b209      	sxth	r1, r1
900054da:	d119      	bne.n	90005510 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x184>
        rect.x = x;
900054dc:	80a1      	strh	r1, [r4, #4]
        return nextSibling;
900054de:	69a4      	ldr	r4, [r4, #24]
        while (d)
900054e0:	2c00      	cmp	r4, #0
900054e2:	d1f4      	bne.n	900054ce <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x142>
        screenContainer->add(snapshot);
900054e4:	6868      	ldr	r0, [r5, #4]
900054e6:	4631      	mov	r1, r6
900054e8:	6803      	ldr	r3, [r0, #0]
900054ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
900054ec:	4798      	blx	r3
    newTransition->invalidate();
900054ee:	682b      	ldr	r3, [r5, #0]
900054f0:	695b      	ldr	r3, [r3, #20]
900054f2:	4a2a      	ldr	r2, [pc, #168]	; (9000559c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x210>)
900054f4:	4293      	cmp	r3, r2
900054f6:	d12c      	bne.n	90005552 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1c6>
        Application::getInstance()->invalidate();
900054f8:	f012 fb40 	bl	90017b7c <_ZN8touchgfx11Application11getInstanceEv>
}
900054fc:	b001      	add	sp, #4
900054fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90005502:	f012 bfcf 	b.w	900184a4 <_ZN8touchgfx11Application10invalidateEv>
    if (*currentScreen)
90005506:	f8d9 0000 	ldr.w	r0, [r9]
9000550a:	2800      	cmp	r0, #0
9000550c:	d181      	bne.n	90005412 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x86>
9000550e:	e789      	b.n	90005424 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x98>
                d->setX(d->getX() - targetValue);
90005510:	4620      	mov	r0, r4
90005512:	4798      	blx	r3
90005514:	69a4      	ldr	r4, [r4, #24]
        while (d)
90005516:	2c00      	cmp	r4, #0
90005518:	d0e4      	beq.n	900054e4 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x158>
9000551a:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
9000551c:	e7d7      	b.n	900054ce <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x142>
        snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
9000551e:	4b20      	ldr	r3, [pc, #128]	; (900055a0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x214>)
        snapshot.makeSnapshot();
90005520:	4630      	mov	r0, r6
        rect.x = x;
90005522:	612f      	str	r7, [r5, #16]
        snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
90005524:	f9b3 3000 	ldrsh.w	r3, [r3]
90005528:	4f1e      	ldr	r7, [pc, #120]	; (900055a4 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x218>)
        rect.height = height;
9000552a:	82eb      	strh	r3, [r5, #22]
9000552c:	f9b7 3000 	ldrsh.w	r3, [r7]
        rect.width = width;
90005530:	82ab      	strh	r3, [r5, #20]
        snapshot.makeSnapshot();
90005532:	f00f f9cb 	bl	900148cc <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
            targetValue = HAL::DISPLAY_WIDTH;
90005536:	883b      	ldrh	r3, [r7, #0]
90005538:	876b      	strh	r3, [r5, #58]	; 0x3a
            break;
9000553a:	e78c      	b.n	90005456 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0xca>
    if (*currentPresenter)
9000553c:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
90005540:	2800      	cmp	r0, #0
90005542:	f47f af60 	bne.w	90005406 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x7a>
90005546:	e76d      	b.n	90005424 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x98>
    model->bind(newPresenter);
90005548:	4623      	mov	r3, r4
9000554a:	e79e      	b.n	9000548a <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0xfe>
        Drawable* d = screenContainer->getFirstChild();
9000554c:	4798      	blx	r3
9000554e:	4604      	mov	r4, r0
90005550:	e7ba      	b.n	900054c8 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x13c>
    newTransition->invalidate();
90005552:	4628      	mov	r0, r5
90005554:	b001      	add	sp, #4
90005556:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000555a:	4718      	bx	r3
    newTransition->init();
9000555c:	4628      	mov	r0, r5
9000555e:	4790      	blx	r2
    newTransition->invalidate();
90005560:	682b      	ldr	r3, [r5, #0]
90005562:	e7c5      	b.n	900054f0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x164>
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
90005564:	4b10      	ldr	r3, [pc, #64]	; (900055a8 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x21c>)
90005566:	21a3      	movs	r1, #163	; 0xa3
90005568:	4a10      	ldr	r2, [pc, #64]	; (900055ac <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x220>)
9000556a:	4811      	ldr	r0, [pc, #68]	; (900055b0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x224>)
9000556c:	f021 fdb2 	bl	900270d4 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
90005570:	4b10      	ldr	r3, [pc, #64]	; (900055b4 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x228>)
90005572:	21a5      	movs	r1, #165	; 0xa5
90005574:	4a0d      	ldr	r2, [pc, #52]	; (900055ac <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x220>)
90005576:	480e      	ldr	r0, [pc, #56]	; (900055b0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x224>)
90005578:	f021 fdac 	bl	900270d4 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
9000557c:	4b0e      	ldr	r3, [pc, #56]	; (900055b8 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x22c>)
9000557e:	21a4      	movs	r1, #164	; 0xa4
90005580:	4a0a      	ldr	r2, [pc, #40]	; (900055ac <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x220>)
90005582:	480b      	ldr	r0, [pc, #44]	; (900055b0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x224>)
90005584:	f021 fda6 	bl	900270d4 <__assert_func>
90005588:	9002a7a0 	.word	0x9002a7a0
9000558c:	24028193 	.word	0x24028193
90005590:	9000512d 	.word	0x9000512d
90005594:	90004edd 	.word	0x90004edd
90005598:	90002351 	.word	0x90002351
9000559c:	90004fad 	.word	0x90004fad
900055a0:	2402818a 	.word	0x2402818a
900055a4:	24028188 	.word	0x24028188
900055a8:	9002a198 	.word	0x9002a198
900055ac:	9002a4bc 	.word	0x9002a4bc
900055b0:	9002a32c 	.word	0x9002a32c
900055b4:	9002a418 	.word	0x9002a418
900055b8:	9002a374 	.word	0x9002a374
900055bc:	240281dc 	.word	0x240281dc
900055c0:	240281d8 	.word	0x240281d8

900055c4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenSlideTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen2ScreenSlideTransitionEastImpl()
{
900055c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
900055c8:	e9d0 4b55 	ldrd	r4, fp, [r0, #340]	; 0x154
{
900055cc:	4680      	mov	r8, r0
900055ce:	b081      	sub	sp, #4
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
900055d0:	68a0      	ldr	r0, [r4, #8]
900055d2:	6803      	ldr	r3, [r0, #0]
900055d4:	6a1b      	ldr	r3, [r3, #32]
900055d6:	4798      	blx	r3
900055d8:	f242 0313 	movw	r3, #8211	; 0x2013
900055dc:	4298      	cmp	r0, r3
900055de:	f240 80df 	bls.w	900057a0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1dc>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
900055e2:	6860      	ldr	r0, [r4, #4]
900055e4:	6803      	ldr	r3, [r0, #0]
900055e6:	6a1b      	ldr	r3, [r3, #32]
900055e8:	4798      	blx	r3
900055ea:	280f      	cmp	r0, #15
900055ec:	f240 80e4 	bls.w	900057b8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1f4>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
900055f0:	68e0      	ldr	r0, [r4, #12]
900055f2:	6803      	ldr	r3, [r0, #0]
900055f4:	6a1b      	ldr	r3, [r3, #32]
900055f6:	4798      	blx	r3
900055f8:	283f      	cmp	r0, #63	; 0x3f
900055fa:	f240 80d7 	bls.w	900057ac <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1e8>
    if (*currentTrans)
900055fe:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 900057f8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x234>
    Application::getInstance()->clearAllTimerWidgets();
90005602:	f012 fabb 	bl	90017b7c <_ZN8touchgfx11Application11getInstanceEv>
90005606:	3004      	adds	r0, #4
90005608:	f012 faf6 	bl	90017bf8 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
9000560c:	f8da 0000 	ldr.w	r0, [sl]
90005610:	b140      	cbz	r0, 90005624 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x60>
        (*currentTrans)->tearDown();
90005612:	6803      	ldr	r3, [r0, #0]
90005614:	68db      	ldr	r3, [r3, #12]
90005616:	4798      	blx	r3
    if (*currentTrans)
90005618:	f8da 0000 	ldr.w	r0, [sl]
9000561c:	b110      	cbz	r0, 90005624 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x60>
        (*currentTrans)->~Transition();
9000561e:	6803      	ldr	r3, [r0, #0]
90005620:	681b      	ldr	r3, [r3, #0]
90005622:	4798      	blx	r3
    if (*currentScreen)
90005624:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 900057fc <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x238>
90005628:	f8d9 0000 	ldr.w	r0, [r9]
9000562c:	2800      	cmp	r0, #0
9000562e:	f000 80a3 	beq.w	90005778 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1b4>
        (*currentScreen)->tearDownScreen();
90005632:	6803      	ldr	r3, [r0, #0]
90005634:	695b      	ldr	r3, [r3, #20]
90005636:	4798      	blx	r3
    if (*currentPresenter)
90005638:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
9000563c:	2800      	cmp	r0, #0
9000563e:	d07f      	beq.n	90005740 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x17c>
        (*currentPresenter)->deactivate();
90005640:	6803      	ldr	r3, [r0, #0]
90005642:	685b      	ldr	r3, [r3, #4]
90005644:	4798      	blx	r3
    if (*currentScreen)
90005646:	f8d9 0000 	ldr.w	r0, [r9]
9000564a:	b110      	cbz	r0, 90005652 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x8e>
        (*currentScreen)->~Screen();
9000564c:	6803      	ldr	r3, [r0, #0]
9000564e:	681b      	ldr	r3, [r3, #0]
90005650:	4798      	blx	r3
    if (*currentPresenter)
90005652:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
90005656:	b110      	cbz	r0, 9000565e <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x9a>
        (*currentPresenter)->~Presenter();
90005658:	6803      	ldr	r3, [r0, #0]
9000565a:	689b      	ldr	r3, [r3, #8]
9000565c:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
9000565e:	68e0      	ldr	r0, [r4, #12]
90005660:	2100      	movs	r1, #0
90005662:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
90005664:	460f      	mov	r7, r1
90005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90005668:	4798      	blx	r3
          relativeValue(0)
9000566a:	4b56      	ldr	r3, [pc, #344]	; (900057c4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x200>)
9000566c:	4606      	mov	r6, r0
9000566e:	4605      	mov	r5, r0
90005670:	6047      	str	r7, [r0, #4]
90005672:	7207      	strb	r7, [r0, #8]
90005674:	f846 3b0c 	str.w	r3, [r6], #12
          snapshot(),
90005678:	4630      	mov	r0, r6
9000567a:	f00f f9ab 	bl	900149d4 <_ZN8touchgfx14SnapshotWidgetC1Ev>
        if (!HAL::USE_ANIMATION_STORAGE)
9000567e:	4b52      	ldr	r3, [pc, #328]	; (900057c8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x204>)
          animationSteps(transitionSteps),
90005680:	2214      	movs	r2, #20
          relativeValue(0)
90005682:	87af      	strh	r7, [r5, #60]	; 0x3c
        if (!HAL::USE_ANIMATION_STORAGE)
90005684:	781b      	ldrb	r3, [r3, #0]
          animationSteps(transitionSteps),
90005686:	872a      	strh	r2, [r5, #56]	; 0x38
        if (!HAL::USE_ANIMATION_STORAGE)
90005688:	2b00      	cmp	r3, #0
9000568a:	d165      	bne.n	90005758 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x194>
            done = true;
9000568c:	2301      	movs	r3, #1
9000568e:	722b      	strb	r3, [r5, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
90005690:	68a0      	ldr	r0, [r4, #8]
90005692:	2100      	movs	r1, #0
90005694:	6803      	ldr	r3, [r0, #0]
90005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90005698:	4798      	blx	r3
9000569a:	4607      	mov	r7, r0
9000569c:	f002 fcec 	bl	90008078 <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
900056a0:	6860      	ldr	r0, [r4, #4]
900056a2:	2100      	movs	r1, #0
900056a4:	6803      	ldr	r3, [r0, #0]
900056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900056a8:	4798      	blx	r3
900056aa:	4604      	mov	r4, r0
900056ac:	4639      	mov	r1, r7
900056ae:	f002 fca7 	bl	90008000 <_ZN16Screen2PresenterC1ER11Screen2View>
    *currentTrans = newTransition;
900056b2:	f8ca 5000 	str.w	r5, [sl]
    *currentPresenter = newPresenter;
900056b6:	f8c8 413c 	str.w	r4, [r8, #316]	; 0x13c
    *currentScreen = newScreen;
900056ba:	f8c9 7000 	str.w	r7, [r9]
    model->bind(newPresenter);
900056be:	2c00      	cmp	r4, #0
900056c0:	d060      	beq.n	90005784 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1c0>
900056c2:	1d23      	adds	r3, r4, #4
900056c4:	f8cb 3000 	str.w	r3, [fp]
    newScreen->setupScreen();
900056c8:	4638      	mov	r0, r7
900056ca:	683b      	ldr	r3, [r7, #0]
900056cc:	f8c4 b008 	str.w	fp, [r4, #8]
900056d0:	68db      	ldr	r3, [r3, #12]
900056d2:	63fc      	str	r4, [r7, #60]	; 0x3c
900056d4:	4798      	blx	r3
    newPresenter->activate();
900056d6:	6823      	ldr	r3, [r4, #0]
900056d8:	4620      	mov	r0, r4
900056da:	681b      	ldr	r3, [r3, #0]
900056dc:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
900056de:	4629      	mov	r1, r5
900056e0:	4638      	mov	r0, r7
900056e2:	f013 fff9 	bl	900196d8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
900056e6:	682b      	ldr	r3, [r5, #0]
900056e8:	4938      	ldr	r1, [pc, #224]	; (900057cc <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x208>)
900056ea:	691a      	ldr	r2, [r3, #16]
900056ec:	428a      	cmp	r2, r1
900056ee:	d153      	bne.n	90005798 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1d4>
        if (done)
900056f0:	7a2a      	ldrb	r2, [r5, #8]
900056f2:	b9d2      	cbnz	r2, 9000572a <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x166>
        Drawable* d = screenContainer->getFirstChild();
900056f4:	6868      	ldr	r0, [r5, #4]
900056f6:	4a36      	ldr	r2, [pc, #216]	; (900057d0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x20c>)
900056f8:	6803      	ldr	r3, [r0, #0]
900056fa:	69db      	ldr	r3, [r3, #28]
900056fc:	4293      	cmp	r3, r2
900056fe:	d143      	bne.n	90005788 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1c4>
90005700:	6a84      	ldr	r4, [r0, #40]	; 0x28
        while (d)
90005702:	b164      	cbz	r4, 9000571e <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x15a>
90005704:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
90005706:	4f33      	ldr	r7, [pc, #204]	; (900057d4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x210>)
                d->setX(d->getX() - targetValue);
90005708:	6823      	ldr	r3, [r4, #0]
9000570a:	88a1      	ldrh	r1, [r4, #4]
9000570c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000570e:	1a89      	subs	r1, r1, r2
90005710:	42bb      	cmp	r3, r7
90005712:	b209      	sxth	r1, r1
90005714:	d119      	bne.n	9000574a <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x186>
        rect.x = x;
90005716:	80a1      	strh	r1, [r4, #4]
        return nextSibling;
90005718:	69a4      	ldr	r4, [r4, #24]
        while (d)
9000571a:	2c00      	cmp	r4, #0
9000571c:	d1f4      	bne.n	90005708 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x144>
        screenContainer->add(snapshot);
9000571e:	6868      	ldr	r0, [r5, #4]
90005720:	4631      	mov	r1, r6
90005722:	6803      	ldr	r3, [r0, #0]
90005724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90005726:	4798      	blx	r3
    newTransition->invalidate();
90005728:	682b      	ldr	r3, [r5, #0]
9000572a:	695b      	ldr	r3, [r3, #20]
9000572c:	4a2a      	ldr	r2, [pc, #168]	; (900057d8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x214>)
9000572e:	4293      	cmp	r3, r2
90005730:	d12d      	bne.n	9000578e <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1ca>
        Application::getInstance()->invalidate();
90005732:	f012 fa23 	bl	90017b7c <_ZN8touchgfx11Application11getInstanceEv>
}
90005736:	b001      	add	sp, #4
90005738:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000573c:	f012 beb2 	b.w	900184a4 <_ZN8touchgfx11Application10invalidateEv>
    if (*currentScreen)
90005740:	f8d9 0000 	ldr.w	r0, [r9]
90005744:	2800      	cmp	r0, #0
90005746:	d181      	bne.n	9000564c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x88>
90005748:	e789      	b.n	9000565e <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x9a>
                d->setX(d->getX() - targetValue);
9000574a:	4620      	mov	r0, r4
9000574c:	4798      	blx	r3
9000574e:	69a4      	ldr	r4, [r4, #24]
        while (d)
90005750:	2c00      	cmp	r4, #0
90005752:	d0e4      	beq.n	9000571e <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x15a>
90005754:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
90005756:	e7d7      	b.n	90005708 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x144>
        snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
90005758:	4b20      	ldr	r3, [pc, #128]	; (900057dc <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x218>)
        snapshot.makeSnapshot();
9000575a:	4630      	mov	r0, r6
        rect.x = x;
9000575c:	612f      	str	r7, [r5, #16]
        snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
9000575e:	f9b3 3000 	ldrsh.w	r3, [r3]
90005762:	4f1f      	ldr	r7, [pc, #124]	; (900057e0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x21c>)
        rect.height = height;
90005764:	82eb      	strh	r3, [r5, #22]
90005766:	f9b7 3000 	ldrsh.w	r3, [r7]
        rect.width = width;
9000576a:	82ab      	strh	r3, [r5, #20]
        snapshot.makeSnapshot();
9000576c:	f00f f8ae 	bl	900148cc <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
            targetValue = -HAL::DISPLAY_WIDTH;
90005770:	883b      	ldrh	r3, [r7, #0]
90005772:	425b      	negs	r3, r3
90005774:	876b      	strh	r3, [r5, #58]	; 0x3a
            break;
90005776:	e78b      	b.n	90005690 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0xcc>
    if (*currentPresenter)
90005778:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
9000577c:	2800      	cmp	r0, #0
9000577e:	f47f af5f 	bne.w	90005640 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x7c>
90005782:	e76c      	b.n	9000565e <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x9a>
    model->bind(newPresenter);
90005784:	4623      	mov	r3, r4
90005786:	e79d      	b.n	900056c4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x100>
        Drawable* d = screenContainer->getFirstChild();
90005788:	4798      	blx	r3
9000578a:	4604      	mov	r4, r0
9000578c:	e7b9      	b.n	90005702 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x13e>
    newTransition->invalidate();
9000578e:	4628      	mov	r0, r5
90005790:	b001      	add	sp, #4
90005792:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90005796:	4718      	bx	r3
    newTransition->init();
90005798:	4628      	mov	r0, r5
9000579a:	4790      	blx	r2
    newTransition->invalidate();
9000579c:	682b      	ldr	r3, [r5, #0]
9000579e:	e7c4      	b.n	9000572a <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x166>
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
900057a0:	4b10      	ldr	r3, [pc, #64]	; (900057e4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x220>)
900057a2:	21a3      	movs	r1, #163	; 0xa3
900057a4:	4a10      	ldr	r2, [pc, #64]	; (900057e8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x224>)
900057a6:	4811      	ldr	r0, [pc, #68]	; (900057ec <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x228>)
900057a8:	f021 fc94 	bl	900270d4 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
900057ac:	4b10      	ldr	r3, [pc, #64]	; (900057f0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x22c>)
900057ae:	21a5      	movs	r1, #165	; 0xa5
900057b0:	4a0d      	ldr	r2, [pc, #52]	; (900057e8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x224>)
900057b2:	480e      	ldr	r0, [pc, #56]	; (900057ec <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x228>)
900057b4:	f021 fc8e 	bl	900270d4 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
900057b8:	4b0e      	ldr	r3, [pc, #56]	; (900057f4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x230>)
900057ba:	21a4      	movs	r1, #164	; 0xa4
900057bc:	4a0a      	ldr	r2, [pc, #40]	; (900057e8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x224>)
900057be:	480b      	ldr	r0, [pc, #44]	; (900057ec <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x228>)
900057c0:	f021 fc88 	bl	900270d4 <__assert_func>
900057c4:	9002a77c 	.word	0x9002a77c
900057c8:	24028193 	.word	0x24028193
900057cc:	9000518d 	.word	0x9000518d
900057d0:	90004edd 	.word	0x90004edd
900057d4:	90002351 	.word	0x90002351
900057d8:	90004fad 	.word	0x90004fad
900057dc:	2402818a 	.word	0x2402818a
900057e0:	24028188 	.word	0x24028188
900057e4:	9002a198 	.word	0x9002a198
900057e8:	9002a5d4 	.word	0x9002a5d4
900057ec:	9002a32c 	.word	0x9002a32c
900057f0:	9002a418 	.word	0x9002a418
900057f4:	9002a374 	.word	0x9002a374
900057f8:	240281dc 	.word	0x240281dc
900057fc:	240281d8 	.word	0x240281d8

90005800 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
90005800:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
90005804:	b1d3      	cbz	r3, 9000583c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3c>
90005806:	681a      	ldr	r2, [r3, #0]
    virtual void handlePendingScreenTransition()
90005808:	b570      	push	{r4, r5, r6, lr}
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
9000580a:	68d1      	ldr	r1, [r2, #12]
9000580c:	4604      	mov	r4, r0
9000580e:	4818      	ldr	r0, [pc, #96]	; (90005870 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x70>)
90005810:	4281      	cmp	r1, r0
90005812:	d118      	bne.n	90005846 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x46>
        return (pobject != 0) && (pmemfun != 0);
90005814:	6858      	ldr	r0, [r3, #4]
90005816:	b180      	cbz	r0, 9000583a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
90005818:	6899      	ldr	r1, [r3, #8]
9000581a:	b1e1      	cbz	r1, 90005856 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x56>
            pendingScreenTransitionCallback->execute();
9000581c:	6892      	ldr	r2, [r2, #8]
9000581e:	4915      	ldr	r1, [pc, #84]	; (90005874 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x74>)
90005820:	428a      	cmp	r2, r1
90005822:	d122      	bne.n	9000586a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6a>
        (pobject->*pmemfun)();
90005824:	68da      	ldr	r2, [r3, #12]
90005826:	6858      	ldr	r0, [r3, #4]
90005828:	eb00 0062 	add.w	r0, r0, r2, asr #1
9000582c:	07d2      	lsls	r2, r2, #31
9000582e:	d406      	bmi.n	9000583e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3e>
90005830:	689b      	ldr	r3, [r3, #8]
90005832:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
90005834:	2300      	movs	r3, #0
90005836:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
9000583a:	bd70      	pop	{r4, r5, r6, pc}
9000583c:	4770      	bx	lr
9000583e:	6899      	ldr	r1, [r3, #8]
90005840:	6803      	ldr	r3, [r0, #0]
90005842:	585b      	ldr	r3, [r3, r1]
90005844:	e7f5      	b.n	90005832 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x32>
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
90005846:	4618      	mov	r0, r3
90005848:	4788      	blx	r1
9000584a:	2800      	cmp	r0, #0
9000584c:	d0f5      	beq.n	9000583a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
            pendingScreenTransitionCallback->execute();
9000584e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
90005852:	681a      	ldr	r2, [r3, #0]
90005854:	e7e2      	b.n	9000581c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x1c>
        return (pobject != 0) && (pmemfun != 0);
90005856:	68dd      	ldr	r5, [r3, #12]
90005858:	07ee      	lsls	r6, r5, #31
9000585a:	d5ee      	bpl.n	9000583a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
9000585c:	6892      	ldr	r2, [r2, #8]
9000585e:	4e05      	ldr	r6, [pc, #20]	; (90005874 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x74>)
90005860:	42b2      	cmp	r2, r6
90005862:	d102      	bne.n	9000586a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6a>
        (pobject->*pmemfun)();
90005864:	eb00 0065 	add.w	r0, r0, r5, asr #1
90005868:	e7ea      	b.n	90005840 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x40>
9000586a:	4618      	mov	r0, r3
9000586c:	4790      	blx	r2
9000586e:	e7e1      	b.n	90005834 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x34>
90005870:	90004f45 	.word	0x90004f45
90005874:	90004f25 	.word	0x90004f25

90005878 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
90005878:	b570      	push	{r4, r5, r6, lr}
9000587a:	4604      	mov	r4, r0
9000587c:	4616      	mov	r6, r2
9000587e:	460d      	mov	r5, r1
          pendingScreenTransitionCallback(0)
90005880:	f012 fa8c 	bl	90017d9c <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
90005884:	4a18      	ldr	r2, [pc, #96]	; (900058e8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
        : currentPresenter(0),
90005886:	2300      	movs	r3, #0
      frontendHeap(heap),
90005888:	f8c4 6154 	str.w	r6, [r4, #340]	; 0x154
        instance = this;
9000588c:	6014      	str	r4, [r2, #0]
        return instance;
9000588e:	4e17      	ldr	r6, [pc, #92]	; (900058ec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x74>)
      model(m)
90005890:	4a17      	ldr	r2, [pc, #92]	; (900058f0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
90005892:	6830      	ldr	r0, [r6, #0]
90005894:	6022      	str	r2, [r4, #0]
        : pobject(0), pmemfun(0)
90005896:	4a17      	ldr	r2, [pc, #92]	; (900058f4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x7c>)
90005898:	4917      	ldr	r1, [pc, #92]	; (900058f8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x80>)
9000589a:	f8c4 2144 	str.w	r2, [r4, #324]	; 0x144
9000589e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
900058a2:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
900058a6:	e9c4 3353 	strd	r3, r3, [r4, #332]	; 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
900058aa:	6802      	ldr	r2, [r0, #0]
900058ac:	6892      	ldr	r2, [r2, #8]
900058ae:	428a      	cmp	r2, r1
          pendingScreenTransitionCallback(0)
900058b0:	e9c4 334f 	strd	r3, r3, [r4, #316]	; 0x13c
900058b4:	d115      	bne.n	900058e2 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6a>
        requestedOrientation = orientation;
900058b6:	f44f 7380 	mov.w	r3, #256	; 0x100
900058ba:	f8a0 3074 	strh.w	r3, [r0, #116]	; 0x74
    touchgfx::Texts::setLanguage(GB);
900058be:	2000      	movs	r0, #0
900058c0:	f002 f9fa 	bl	90007cb8 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
900058c4:	6833      	ldr	r3, [r6, #0]
900058c6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
900058ca:	b12a      	cbz	r2, 900058d8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
900058cc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
900058ce:	b118      	cbz	r0, 900058d8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
900058d0:	f01a f9ab 	bl	9001fc2a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
900058d4:	4620      	mov	r0, r4
900058d6:	bd70      	pop	{r4, r5, r6, pc}
        return instance->lcdRef;
900058d8:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
900058da:	f01a f9a6 	bl	9001fc2a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
900058de:	4620      	mov	r0, r4
900058e0:	bd70      	pop	{r4, r5, r6, pc}
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
900058e2:	4619      	mov	r1, r3
900058e4:	4790      	blx	r2
900058e6:	e7ea      	b.n	900058be <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
900058e8:	240281e8 	.word	0x240281e8
900058ec:	24028194 	.word	0x24028194
900058f0:	9002a70c 	.word	0x9002a70c
900058f4:	9002a6f4 	.word	0x9002a6f4
900058f8:	90000685 	.word	0x90000685

900058fc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
900058fc:	4905      	ldr	r1, [pc, #20]	; (90005914 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x18>)
900058fe:	2200      	movs	r2, #0
    pendingScreenTransitionCallback = &transitionCallback;
90005900:	f500 73a2 	add.w	r3, r0, #324	; 0x144
90005904:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
90005908:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
9000590c:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148
}
90005910:	4770      	bx	lr
90005912:	bf00      	nop
90005914:	900051ed 	.word	0x900051ed

90005918 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv>:
90005918:	4905      	ldr	r1, [pc, #20]	; (90005930 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv+0x18>)
9000591a:	2200      	movs	r2, #0
    pendingScreenTransitionCallback = &transitionCallback;
9000591c:	f500 73a2 	add.w	r3, r0, #324	; 0x144
90005920:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
90005924:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
90005928:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148
}
9000592c:	4770      	bx	lr
9000592e:	bf00      	nop
90005930:	9000538d 	.word	0x9000538d

90005934 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>:
90005934:	4905      	ldr	r1, [pc, #20]	; (9000594c <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv+0x18>)
90005936:	2200      	movs	r2, #0
    pendingScreenTransitionCallback = &transitionCallback;
90005938:	f500 73a2 	add.w	r3, r0, #324	; 0x144
9000593c:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
90005940:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
90005944:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148
}
90005948:	4770      	bx	lr
9000594a:	bf00      	nop
9000594c:	900055c5 	.word	0x900055c5

90005950 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
90005950:	6a40      	ldr	r0, [r0, #36]	; 0x24
90005952:	4770      	bx	lr

90005954 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
90005954:	6a80      	ldr	r0, [r0, #40]	; 0x28
90005956:	4770      	bx	lr

90005958 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
90005958:	4770      	bx	lr
9000595a:	bf00      	nop

9000595c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
9000595c:	888b      	ldrh	r3, [r1, #4]
9000595e:	69c0      	ldr	r0, [r0, #28]
90005960:	0adb      	lsrs	r3, r3, #11
90005962:	680a      	ldr	r2, [r1, #0]
90005964:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
90005968:	4410      	add	r0, r2
9000596a:	4770      	bx	lr

9000596c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
9000596c:	b1da      	cbz	r2, 900059a6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3a>
{
9000596e:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
90005970:	7b14      	ldrb	r4, [r2, #12]
90005972:	b1b4      	cbz	r4, 900059a2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
90005974:	f892 c00d 	ldrb.w	ip, [r2, #13]
90005978:	f892 e00b 	ldrb.w	lr, [r2, #11]
9000597c:	ea4f 220c 	mov.w	r2, ip, lsl #8
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
90005980:	6a03      	ldr	r3, [r0, #32]
90005982:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
90005986:	ea4e 0202 	orr.w	r2, lr, r2
9000598a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
9000598e:	eb03 0084 	add.w	r0, r3, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
90005992:	881a      	ldrh	r2, [r3, #0]
90005994:	428a      	cmp	r2, r1
90005996:	d008      	beq.n	900059aa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
90005998:	f103 0304 	add.w	r3, r3, #4
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
9000599c:	d801      	bhi.n	900059a2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
9000599e:	4283      	cmp	r3, r0
900059a0:	d1f7      	bne.n	90005992 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
900059a2:	2000      	movs	r0, #0
        {
            break;
        }
    }
    return 0;
}
900059a4:	bd10      	pop	{r4, pc}
        return 0;
900059a6:	4610      	mov	r0, r2
}
900059a8:	4770      	bx	lr
            return kerndata->distance;
900059aa:	f993 0002 	ldrsb.w	r0, [r3, #2]
}
900059ae:	bd10      	pop	{r4, pc}

900059b0 <_ZN8touchgfx13GeneratedFontD0Ev>:
900059b0:	b510      	push	{r4, lr}
900059b2:	4604      	mov	r4, r0
900059b4:	212c      	movs	r1, #44	; 0x2c
900059b6:	f021 fb5e 	bl	90027076 <_ZdlPvj>
900059ba:	4620      	mov	r0, r4
900059bc:	bd10      	pop	{r4, pc}
900059be:	bf00      	nop

900059c0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900059c0:	b530      	push	{r4, r5, lr}
900059c2:	b08b      	sub	sp, #44	; 0x2c
900059c4:	4604      	mov	r4, r0
900059c6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
      arabicTable(formsTable)
900059ca:	9500      	str	r5, [sp, #0]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900059cc:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
      arabicTable(formsTable)
900059d0:	9501      	str	r5, [sp, #4]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900059d2:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
      arabicTable(formsTable)
900059d6:	9502      	str	r5, [sp, #8]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900059d8:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
      arabicTable(formsTable)
900059dc:	9503      	str	r5, [sp, #12]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900059de:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
      arabicTable(formsTable)
900059e2:	9504      	str	r5, [sp, #16]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900059e4:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
      arabicTable(formsTable)
900059e8:	9505      	str	r5, [sp, #20]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900059ea:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
      arabicTable(formsTable)
900059ee:	9506      	str	r5, [sp, #24]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900059f0:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
      arabicTable(formsTable)
900059f4:	9507      	str	r5, [sp, #28]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900059f6:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
      arabicTable(formsTable)
900059fa:	9508      	str	r5, [sp, #32]
900059fc:	f013 f9fa 	bl	90018df4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
      glyphData(glyphDataInternalFlash),
90005a00:	9b15      	ldr	r3, [sp, #84]	; 0x54
}
90005a02:	4620      	mov	r0, r4
      glyphData(glyphDataInternalFlash),
90005a04:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
90005a06:	9b16      	ldr	r3, [sp, #88]	; 0x58
90005a08:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
90005a0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
90005a0c:	6263      	str	r3, [r4, #36]	; 0x24
      arabicTable(formsTable)
90005a0e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
90005a10:	62a3      	str	r3, [r4, #40]	; 0x28
90005a12:	4b02      	ldr	r3, [pc, #8]	; (90005a1c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
90005a14:	6023      	str	r3, [r4, #0]
}
90005a16:	b00b      	add	sp, #44	; 0x2c
90005a18:	bd30      	pop	{r4, r5, pc}
90005a1a:	bf00      	nop
90005a1c:	9002a7c4 	.word	0x9002a7c4

90005a20 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
90005a20:	4770      	bx	lr
90005a22:	bf00      	nop

90005a24 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
90005a24:	4770      	bx	lr
90005a26:	bf00      	nop

90005a28 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
90005a28:	4770      	bx	lr
90005a2a:	bf00      	nop

90005a2c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
90005a2c:	4770      	bx	lr
90005a2e:	bf00      	nop

90005a30 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
90005a30:	b530      	push	{r4, r5, lr}
90005a32:	b085      	sub	sp, #20
90005a34:	460a      	mov	r2, r1
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
90005a36:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
90005a38:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
90005a3a:	466d      	mov	r5, sp
90005a3c:	4601      	mov	r1, r0
90005a3e:	8102      	strh	r2, [r0, #8]
90005a40:	343c      	adds	r4, #60	; 0x3c
90005a42:	4628      	mov	r0, r5
90005a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90005a48:	4798      	blx	r3
90005a4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90005a4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
90005a52:	b005      	add	sp, #20
90005a54:	bd30      	pop	{r4, r5, pc}
90005a56:	bf00      	nop

90005a58 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
90005a58:	b530      	push	{r4, r5, lr}
90005a5a:	b085      	sub	sp, #20
90005a5c:	460a      	mov	r2, r1
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
90005a5e:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
90005a60:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
90005a62:	466d      	mov	r5, sp
90005a64:	4601      	mov	r1, r0
        rect.height = height;
90005a66:	8142      	strh	r2, [r0, #10]
90005a68:	343c      	adds	r4, #60	; 0x3c
90005a6a:	4628      	mov	r0, r5
90005a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90005a70:	4798      	blx	r3
90005a72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90005a76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
90005a7a:	b005      	add	sp, #20
90005a7c:	bd30      	pop	{r4, r5, pc}
90005a7e:	bf00      	nop

90005a80 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
90005a80:	2200      	movs	r2, #0
90005a82:	6002      	str	r2, [r0, #0]
90005a84:	6042      	str	r2, [r0, #4]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
90005a86:	4770      	bx	lr

90005a88 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
90005a88:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
90005a8c:	4770      	bx	lr
90005a8e:	bf00      	nop

90005a90 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
90005a90:	2000      	movs	r0, #0
90005a92:	4770      	bx	lr

90005a94 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
        if (visible)
90005a94:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90005a98:	b112      	cbz	r2, 90005aa0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xc>
            invalidate();
90005a9a:	6803      	ldr	r3, [r0, #0]
90005a9c:	695b      	ldr	r3, [r3, #20]
90005a9e:	4718      	bx	r3
    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
    {
        Widget::invalidateContent();
    }
90005aa0:	4770      	bx	lr
90005aa2:	bf00      	nop

90005aa4 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90005aa4:	2200      	movs	r2, #0
90005aa6:	f04f 31ff 	mov.w	r1, #4294967295
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
90005aaa:	6082      	str	r2, [r0, #8]
90005aac:	e9c0 2100 	strd	r2, r1, [r0]

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
    {
        return TextArea::BoundingArea();
    }
90005ab0:	4770      	bx	lr
90005ab2:	bf00      	nop

90005ab4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
90005ab4:	6c80      	ldr	r0, [r0, #72]	; 0x48
90005ab6:	4770      	bx	lr

90005ab8 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
90005ab8:	4770      	bx	lr
90005aba:	bf00      	nop

90005abc <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
90005abc:	4770      	bx	lr
90005abe:	bf00      	nop

90005ac0 <_ZN8touchgfx15TextButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    colortype colorPressed;  ///< The color pressed

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
    {
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
90005ac0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
90005ac4:	b123      	cbz	r3, 90005ad0 <_ZN8touchgfx15TextButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x10>
90005ac6:	f100 0380 	add.w	r3, r0, #128	; 0x80
90005aca:	681b      	ldr	r3, [r3, #0]
        color = newColor;
90005acc:	6643      	str	r3, [r0, #100]	; 0x64
        T::handlePressedUpdated();
    }
90005ace:	4770      	bx	lr
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
90005ad0:	f100 037c 	add.w	r3, r0, #124	; 0x7c
90005ad4:	681b      	ldr	r3, [r3, #0]
90005ad6:	6643      	str	r3, [r0, #100]	; 0x64
    }
90005ad8:	4770      	bx	lr
90005ada:	bf00      	nop

90005adc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
90005adc:	4770      	bx	lr
90005ade:	bf00      	nop

90005ae0 <_ZN8touchgfx15TextButtonStyleINS_18ClickButtonTriggerEED1Ev>:
class TextButtonStyle : public T
90005ae0:	4770      	bx	lr
90005ae2:	bf00      	nop

90005ae4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
90005ae4:	4770      	bx	lr
90005ae6:	bf00      	nop

90005ae8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
90005ae8:	b410      	push	{r4}
        (pobject->*pmemfun)(t1);
90005aea:	68c2      	ldr	r2, [r0, #12]
    virtual void execute(T1 t1)
90005aec:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
90005aee:	6844      	ldr	r4, [r0, #4]
90005af0:	f012 0f01 	tst.w	r2, #1
90005af4:	eb04 0062 	add.w	r0, r4, r2, asr #1
90005af8:	d103      	bne.n	90005b02 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x1a>
90005afa:	689b      	ldr	r3, [r3, #8]
    }
90005afc:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)(t1);
90005b00:	4718      	bx	r3
90005b02:	ea4f 0c62 	mov.w	ip, r2, asr #1
90005b06:	689b      	ldr	r3, [r3, #8]
90005b08:	f854 200c 	ldr.w	r2, [r4, ip]
    }
90005b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)(t1);
90005b10:	58d3      	ldr	r3, [r2, r3]
90005b12:	4718      	bx	r3

90005b14 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
90005b14:	6843      	ldr	r3, [r0, #4]
90005b16:	b13b      	cbz	r3, 90005b28 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
90005b18:	6883      	ldr	r3, [r0, #8]
90005b1a:	b10b      	cbz	r3, 90005b20 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0xc>
90005b1c:	2001      	movs	r0, #1
    }
90005b1e:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
90005b20:	68c0      	ldr	r0, [r0, #12]
90005b22:	f000 0001 	and.w	r0, r0, #1
90005b26:	4770      	bx	lr
90005b28:	4618      	mov	r0, r3
90005b2a:	4770      	bx	lr

90005b2c <_ZN8touchgfx15TextButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
        alpha = newAlpha;
90005b2c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
90005b30:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        text.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
90005b34:	4770      	bx	lr
90005b36:	bf00      	nop

90005b38 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
90005b38:	b510      	push	{r4, lr}
90005b3a:	4604      	mov	r4, r0
90005b3c:	214c      	movs	r1, #76	; 0x4c
90005b3e:	f021 fa9a 	bl	90027076 <_ZdlPvj>
90005b42:	4620      	mov	r0, r4
90005b44:	bd10      	pop	{r4, pc}
90005b46:	bf00      	nop

90005b48 <_ZN8touchgfx15TextButtonStyleINS_18ClickButtonTriggerEED0Ev>:
class TextButtonStyle : public T
90005b48:	b510      	push	{r4, lr}
90005b4a:	4604      	mov	r4, r0
90005b4c:	2184      	movs	r1, #132	; 0x84
90005b4e:	f021 fa92 	bl	90027076 <_ZdlPvj>
90005b52:	4620      	mov	r0, r4
90005b54:	bd10      	pop	{r4, pc}
90005b56:	bf00      	nop

90005b58 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
90005b58:	b510      	push	{r4, lr}
90005b5a:	4604      	mov	r4, r0
90005b5c:	2110      	movs	r1, #16
90005b5e:	f021 fa8a 	bl	90027076 <_ZdlPvj>
90005b62:	4620      	mov	r0, r4
90005b64:	bd10      	pop	{r4, pc}
90005b66:	bf00      	nop

90005b68 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
90005b68:	b510      	push	{r4, lr}
90005b6a:	4604      	mov	r4, r0
}
90005b6c:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
90005b70:	f021 fa81 	bl	90027076 <_ZdlPvj>
90005b74:	4620      	mov	r0, r4
90005b76:	bd10      	pop	{r4, pc}

90005b78 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen1ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &temperatureButton)
90005b78:	f500 70a0 	add.w	r0, r0, #320	; 0x140
90005b7c:	4288      	cmp	r0, r1
90005b7e:	d000      	beq.n	90005b82 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xa>
90005b80:	4770      	bx	lr
{
90005b82:	b508      	push	{r3, lr}
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
90005b84:	f011 fffa 	bl	90017b7c <_ZN8touchgfx11Application11getInstanceEv>
        //temperatureButtonInteraction
        //When temperatureButton clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenSlideTransitionEast();
    }
}
90005b88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenSlideTransitionEast();
90005b8c:	f7ff bed2 	b.w	90005934 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>

90005b90 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005b90:	4b1b      	ldr	r3, [pc, #108]	; (90005c00 <_ZN8touchgfx8TextArea12setBaselineYEs+0x70>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005b92:	6802      	ldr	r2, [r0, #0]
90005b94:	681b      	ldr	r3, [r3, #0]
    virtual void setBaselineY(int16_t baselineY)
90005b96:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005b98:	6b55      	ldr	r5, [r2, #52]	; 0x34
90005b9a:	b323      	cbz	r3, 90005be6 <_ZN8touchgfx8TextArea12setBaselineYEs+0x56>
90005b9c:	b28e      	uxth	r6, r1
        return typedTextId < numberOfTypedTexts;
90005b9e:	4919      	ldr	r1, [pc, #100]	; (90005c04 <_ZN8touchgfx8TextArea12setBaselineYEs+0x74>)
90005ba0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90005ba2:	4604      	mov	r4, r0
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005ba4:	8809      	ldrh	r1, [r1, #0]
90005ba6:	4291      	cmp	r1, r2
90005ba8:	d923      	bls.n	90005bf2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x62>
        return fonts[typedTexts[typedTextId].fontIdx];
90005baa:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
90005bae:	4b16      	ldr	r3, [pc, #88]	; (90005c08 <_ZN8touchgfx8TextArea12setBaselineYEs+0x78>)
90005bb0:	681b      	ldr	r3, [r3, #0]
90005bb2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
90005bb6:	4a15      	ldr	r2, [pc, #84]	; (90005c0c <_ZN8touchgfx8TextArea12setBaselineYEs+0x7c>)
90005bb8:	6803      	ldr	r3, [r0, #0]
90005bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90005bbc:	4293      	cmp	r3, r2
90005bbe:	d107      	bne.n	90005bd0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x40>
        return baselineHeight;
90005bc0:	88c0      	ldrh	r0, [r0, #6]
90005bc2:	4b13      	ldr	r3, [pc, #76]	; (90005c10 <_ZN8touchgfx8TextArea12setBaselineYEs+0x80>)
90005bc4:	1a31      	subs	r1, r6, r0
90005bc6:	429d      	cmp	r5, r3
90005bc8:	b209      	sxth	r1, r1
90005bca:	d107      	bne.n	90005bdc <_ZN8touchgfx8TextArea12setBaselineYEs+0x4c>
        rect.y = y;
90005bcc:	80e1      	strh	r1, [r4, #6]
    }
90005bce:	bd70      	pop	{r4, r5, r6, pc}
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005bd0:	4798      	blx	r3
90005bd2:	4b0f      	ldr	r3, [pc, #60]	; (90005c10 <_ZN8touchgfx8TextArea12setBaselineYEs+0x80>)
90005bd4:	1a31      	subs	r1, r6, r0
90005bd6:	429d      	cmp	r5, r3
90005bd8:	b209      	sxth	r1, r1
90005bda:	d0f7      	beq.n	90005bcc <_ZN8touchgfx8TextArea12setBaselineYEs+0x3c>
90005bdc:	4620      	mov	r0, r4
90005bde:	462b      	mov	r3, r5
    }
90005be0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005be4:	4718      	bx	r3
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005be6:	4b0b      	ldr	r3, [pc, #44]	; (90005c14 <_ZN8touchgfx8TextArea12setBaselineYEs+0x84>)
90005be8:	216c      	movs	r1, #108	; 0x6c
90005bea:	4a0b      	ldr	r2, [pc, #44]	; (90005c18 <_ZN8touchgfx8TextArea12setBaselineYEs+0x88>)
90005bec:	480b      	ldr	r0, [pc, #44]	; (90005c1c <_ZN8touchgfx8TextArea12setBaselineYEs+0x8c>)
90005bee:	f021 fa71 	bl	900270d4 <__assert_func>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005bf2:	4b0b      	ldr	r3, [pc, #44]	; (90005c20 <_ZN8touchgfx8TextArea12setBaselineYEs+0x90>)
90005bf4:	216d      	movs	r1, #109	; 0x6d
90005bf6:	4a08      	ldr	r2, [pc, #32]	; (90005c18 <_ZN8touchgfx8TextArea12setBaselineYEs+0x88>)
90005bf8:	4808      	ldr	r0, [pc, #32]	; (90005c1c <_ZN8touchgfx8TextArea12setBaselineYEs+0x8c>)
90005bfa:	f021 fa6b 	bl	900270d4 <__assert_func>
90005bfe:	bf00      	nop
90005c00:	240281ec 	.word	0x240281ec
90005c04:	240281f0 	.word	0x240281f0
90005c08:	240281f4 	.word	0x240281f4
90005c0c:	90004ea1 	.word	0x90004ea1
90005c10:	90002355 	.word	0x90002355
90005c14:	9002a81c 	.word	0x9002a81c
90005c18:	9002a860 	.word	0x9002a860
90005c1c:	9002a89c 	.word	0x9002a89c
90005c20:	9002a8e4 	.word	0x9002a8e4

90005c24 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
     *
     * @see setAction
     */
    virtual void executeAction()
    {
        if (action && action->isValid())
90005c24:	6b03      	ldr	r3, [r0, #48]	; 0x30
90005c26:	b30b      	cbz	r3, 90005c6c <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x48>
90005c28:	681a      	ldr	r2, [r3, #0]
    virtual void executeAction()
90005c2a:	b570      	push	{r4, r5, r6, lr}
        if (action && action->isValid())
90005c2c:	68d1      	ldr	r1, [r2, #12]
90005c2e:	4604      	mov	r4, r0
90005c30:	481a      	ldr	r0, [pc, #104]	; (90005c9c <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x78>)
90005c32:	4281      	cmp	r1, r0
90005c34:	d11b      	bne.n	90005c6e <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x4a>
        return (pobject != 0) && (pmemfun != 0);
90005c36:	6858      	ldr	r0, [r3, #4]
90005c38:	b180      	cbz	r0, 90005c5c <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x38>
90005c3a:	6899      	ldr	r1, [r3, #8]
90005c3c:	b1f1      	cbz	r1, 90005c7c <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x58>
        {
            action->execute(*this);
90005c3e:	6892      	ldr	r2, [r2, #8]
90005c40:	4917      	ldr	r1, [pc, #92]	; (90005ca0 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x7c>)
90005c42:	428a      	cmp	r2, r1
90005c44:	d124      	bne.n	90005c90 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x6c>
        (pobject->*pmemfun)(t1);
90005c46:	68da      	ldr	r2, [r3, #12]
90005c48:	6858      	ldr	r0, [r3, #4]
90005c4a:	eb00 0062 	add.w	r0, r0, r2, asr #1
90005c4e:	07d2      	lsls	r2, r2, #31
90005c50:	d405      	bmi.n	90005c5e <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x3a>
90005c52:	4621      	mov	r1, r4
90005c54:	689b      	ldr	r3, [r3, #8]
        }
    }
90005c56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90005c5a:	4718      	bx	r3
90005c5c:	bd70      	pop	{r4, r5, r6, pc}
90005c5e:	6899      	ldr	r1, [r3, #8]
90005c60:	6803      	ldr	r3, [r0, #0]
90005c62:	585b      	ldr	r3, [r3, r1]
90005c64:	4621      	mov	r1, r4
90005c66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90005c6a:	4718      	bx	r3
90005c6c:	4770      	bx	lr
        if (action && action->isValid())
90005c6e:	4618      	mov	r0, r3
90005c70:	4788      	blx	r1
90005c72:	2800      	cmp	r0, #0
90005c74:	d0f2      	beq.n	90005c5c <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x38>
            action->execute(*this);
90005c76:	6b23      	ldr	r3, [r4, #48]	; 0x30
90005c78:	681a      	ldr	r2, [r3, #0]
90005c7a:	e7e0      	b.n	90005c3e <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1a>
        return (pobject != 0) && (pmemfun != 0);
90005c7c:	68dd      	ldr	r5, [r3, #12]
90005c7e:	07ee      	lsls	r6, r5, #31
90005c80:	d5ec      	bpl.n	90005c5c <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x38>
90005c82:	6892      	ldr	r2, [r2, #8]
90005c84:	4e06      	ldr	r6, [pc, #24]	; (90005ca0 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x7c>)
90005c86:	42b2      	cmp	r2, r6
90005c88:	d102      	bne.n	90005c90 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x6c>
        (pobject->*pmemfun)(t1);
90005c8a:	eb00 0065 	add.w	r0, r0, r5, asr #1
90005c8e:	e7e7      	b.n	90005c60 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x3c>
90005c90:	4621      	mov	r1, r4
90005c92:	4618      	mov	r0, r3
    }
90005c94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            action->execute(*this);
90005c98:	4710      	bx	r2
90005c9a:	bf00      	nop
90005c9c:	90005b15 	.word	0x90005b15
90005ca0:	90005ae9 	.word	0x90005ae9

90005ca4 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
        setX(x);
90005ca4:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
90005ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90005caa:	4f25      	ldr	r7, [pc, #148]	; (90005d40 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x9c>)
90005cac:	4605      	mov	r5, r0
        setX(x);
90005cae:	6b1e      	ldr	r6, [r3, #48]	; 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
90005cb0:	4690      	mov	r8, r2
90005cb2:	42be      	cmp	r6, r7
90005cb4:	d125      	bne.n	90005d02 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x5e>
        setBaselineY(baselineY);
90005cb6:	6e5c      	ldr	r4, [r3, #100]	; 0x64
        rect.x = x;
90005cb8:	80a9      	strh	r1, [r5, #4]
90005cba:	4922      	ldr	r1, [pc, #136]	; (90005d44 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa0>)
90005cbc:	428c      	cmp	r4, r1
90005cbe:	d126      	bne.n	90005d0e <_ZN8touchgfx8TextArea13setXBaselineYEss+0x6a>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005cc0:	4921      	ldr	r1, [pc, #132]	; (90005d48 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa4>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005cc2:	fa1f f888 	uxth.w	r8, r8
90005cc6:	6b5e      	ldr	r6, [r3, #52]	; 0x34
90005cc8:	680b      	ldr	r3, [r1, #0]
90005cca:	2b00      	cmp	r3, #0
90005ccc:	d032      	beq.n	90005d34 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x90>
        return typedTextId < numberOfTypedTexts;
90005cce:	491f      	ldr	r1, [pc, #124]	; (90005d4c <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa8>)
90005cd0:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005cd2:	8809      	ldrh	r1, [r1, #0]
90005cd4:	4291      	cmp	r1, r2
90005cd6:	d927      	bls.n	90005d28 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x84>
        return fonts[typedTexts[typedTextId].fontIdx];
90005cd8:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
90005cdc:	4b1c      	ldr	r3, [pc, #112]	; (90005d50 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xac>)
90005cde:	681b      	ldr	r3, [r3, #0]
90005ce0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
90005ce4:	4a1b      	ldr	r2, [pc, #108]	; (90005d54 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb0>)
90005ce6:	6803      	ldr	r3, [r0, #0]
90005ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90005cea:	4293      	cmp	r3, r2
90005cec:	d11a      	bne.n	90005d24 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x80>
90005cee:	88c0      	ldrh	r0, [r0, #6]
90005cf0:	4b19      	ldr	r3, [pc, #100]	; (90005d58 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb4>)
90005cf2:	eba8 0200 	sub.w	r2, r8, r0
90005cf6:	429e      	cmp	r6, r3
90005cf8:	b211      	sxth	r1, r2
90005cfa:	d10e      	bne.n	90005d1a <_ZN8touchgfx8TextArea13setXBaselineYEss+0x76>
        rect.y = y;
90005cfc:	80e9      	strh	r1, [r5, #6]
    }
90005cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setX(x);
90005d02:	47b0      	blx	r6
        setBaselineY(baselineY);
90005d04:	682b      	ldr	r3, [r5, #0]
90005d06:	490f      	ldr	r1, [pc, #60]	; (90005d44 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa0>)
90005d08:	6e5c      	ldr	r4, [r3, #100]	; 0x64
90005d0a:	428c      	cmp	r4, r1
90005d0c:	d0d8      	beq.n	90005cc0 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x1c>
90005d0e:	4641      	mov	r1, r8
90005d10:	4628      	mov	r0, r5
90005d12:	4623      	mov	r3, r4
    }
90005d14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setBaselineY(baselineY);
90005d18:	4718      	bx	r3
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005d1a:	4628      	mov	r0, r5
90005d1c:	4633      	mov	r3, r6
    }
90005d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005d22:	4718      	bx	r3
90005d24:	4798      	blx	r3
90005d26:	e7e3      	b.n	90005cf0 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x4c>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005d28:	4b0c      	ldr	r3, [pc, #48]	; (90005d5c <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb8>)
90005d2a:	216d      	movs	r1, #109	; 0x6d
90005d2c:	4a0c      	ldr	r2, [pc, #48]	; (90005d60 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xbc>)
90005d2e:	480d      	ldr	r0, [pc, #52]	; (90005d64 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc0>)
90005d30:	f021 f9d0 	bl	900270d4 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005d34:	4b0c      	ldr	r3, [pc, #48]	; (90005d68 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc4>)
90005d36:	216c      	movs	r1, #108	; 0x6c
90005d38:	4a09      	ldr	r2, [pc, #36]	; (90005d60 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xbc>)
90005d3a:	480a      	ldr	r0, [pc, #40]	; (90005d64 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc0>)
90005d3c:	f021 f9ca 	bl	900270d4 <__assert_func>
90005d40:	90002351 	.word	0x90002351
90005d44:	90005b91 	.word	0x90005b91
90005d48:	240281ec 	.word	0x240281ec
90005d4c:	240281f0 	.word	0x240281f0
90005d50:	240281f4 	.word	0x240281f4
90005d54:	90004ea1 	.word	0x90004ea1
90005d58:	90002355 	.word	0x90002355
90005d5c:	9002a8e4 	.word	0x9002a8e4
90005d60:	9002a860 	.word	0x9002a860
90005d64:	9002a89c 	.word	0x9002a89c
90005d68:	9002a81c 	.word	0x9002a81c

90005d6c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
90005d6c:	790b      	ldrb	r3, [r1, #4]
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
90005d6e:	1e1a      	subs	r2, r3, #0
    virtual void handleClickEvent(const ClickEvent& event)
90005d70:	b570      	push	{r4, r5, r6, lr}
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
90005d72:	bf18      	it	ne
90005d74:	2201      	movne	r2, #1
        return pressed;
90005d76:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
    virtual void handleClickEvent(const ClickEvent& event)
90005d7a:	460d      	mov	r5, r1
90005d7c:	4604      	mov	r4, r0
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
90005d7e:	42b2      	cmp	r2, r6
90005d80:	d004      	beq.n	90005d8c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x20>
        {
            setPressed(newPressedValue);
            invalidate();
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
90005d82:	b116      	cbz	r6, 90005d8a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1e>
90005d84:	792b      	ldrb	r3, [r5, #4]
90005d86:	2b01      	cmp	r3, #1
90005d88:	d00e      	beq.n	90005da8 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3c>
        {
            executeAction();
        }
    }
90005d8a:	bd70      	pop	{r4, r5, r6, pc}
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
90005d8c:	fab3 f383 	clz	r3, r3
90005d90:	095b      	lsrs	r3, r3, #5
90005d92:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
        handlePressedUpdated();
90005d96:	6803      	ldr	r3, [r0, #0]
90005d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90005d9c:	4798      	blx	r3
            invalidate();
90005d9e:	6823      	ldr	r3, [r4, #0]
90005da0:	4620      	mov	r0, r4
90005da2:	695b      	ldr	r3, [r3, #20]
90005da4:	4798      	blx	r3
90005da6:	e7ec      	b.n	90005d82 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x16>
            executeAction();
90005da8:	6823      	ldr	r3, [r4, #0]
90005daa:	4a20      	ldr	r2, [pc, #128]	; (90005e2c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xc0>)
90005dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90005db0:	4293      	cmp	r3, r2
90005db2:	d127      	bne.n	90005e04 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x98>
        if (action && action->isValid())
90005db4:	6b23      	ldr	r3, [r4, #48]	; 0x30
90005db6:	2b00      	cmp	r3, #0
90005db8:	d0e7      	beq.n	90005d8a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1e>
90005dba:	6819      	ldr	r1, [r3, #0]
90005dbc:	481c      	ldr	r0, [pc, #112]	; (90005e30 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xc4>)
90005dbe:	68ca      	ldr	r2, [r1, #12]
90005dc0:	4282      	cmp	r2, r0
90005dc2:	d123      	bne.n	90005e0c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
        return (pobject != 0) && (pmemfun != 0);
90005dc4:	685a      	ldr	r2, [r3, #4]
90005dc6:	2a00      	cmp	r2, #0
90005dc8:	d0df      	beq.n	90005d8a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1e>
90005dca:	689d      	ldr	r5, [r3, #8]
90005dcc:	b175      	cbz	r5, 90005dec <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x80>
            action->execute(*this);
90005dce:	688e      	ldr	r6, [r1, #8]
90005dd0:	4a18      	ldr	r2, [pc, #96]	; (90005e34 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xc8>)
90005dd2:	4296      	cmp	r6, r2
90005dd4:	d123      	bne.n	90005e1e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb2>
        (pobject->*pmemfun)(t1);
90005dd6:	68d9      	ldr	r1, [r3, #12]
90005dd8:	685a      	ldr	r2, [r3, #4]
90005dda:	eb02 0061 	add.w	r0, r2, r1, asr #1
90005dde:	07ca      	lsls	r2, r1, #31
90005de0:	d41b      	bmi.n	90005e1a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xae>
90005de2:	689b      	ldr	r3, [r3, #8]
90005de4:	4621      	mov	r1, r4
    }
90005de6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90005dea:	4718      	bx	r3
        return (pobject != 0) && (pmemfun != 0);
90005dec:	68d8      	ldr	r0, [r3, #12]
90005dee:	07c6      	lsls	r6, r0, #31
90005df0:	d5cb      	bpl.n	90005d8a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1e>
90005df2:	688e      	ldr	r6, [r1, #8]
90005df4:	490f      	ldr	r1, [pc, #60]	; (90005e34 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xc8>)
90005df6:	428e      	cmp	r6, r1
90005df8:	d111      	bne.n	90005e1e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb2>
        (pobject->*pmemfun)(t1);
90005dfa:	eb02 0060 	add.w	r0, r2, r0, asr #1
90005dfe:	6803      	ldr	r3, [r0, #0]
90005e00:	595b      	ldr	r3, [r3, r5]
90005e02:	e7ef      	b.n	90005de4 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x78>
            executeAction();
90005e04:	4620      	mov	r0, r4
    }
90005e06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            executeAction();
90005e0a:	4718      	bx	r3
        if (action && action->isValid())
90005e0c:	4618      	mov	r0, r3
90005e0e:	4790      	blx	r2
90005e10:	2800      	cmp	r0, #0
90005e12:	d0ba      	beq.n	90005d8a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1e>
            action->execute(*this);
90005e14:	6b23      	ldr	r3, [r4, #48]	; 0x30
90005e16:	6819      	ldr	r1, [r3, #0]
90005e18:	e7d9      	b.n	90005dce <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x62>
90005e1a:	689d      	ldr	r5, [r3, #8]
90005e1c:	e7ef      	b.n	90005dfe <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x92>
90005e1e:	4621      	mov	r1, r4
90005e20:	4618      	mov	r0, r3
90005e22:	4633      	mov	r3, r6
    }
90005e24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90005e28:	4718      	bx	r3
90005e2a:	bf00      	nop
90005e2c:	90005c25 	.word	0x90005c25
90005e30:	90005b15 	.word	0x90005b15
90005e34:	90005ae9 	.word	0x90005ae9

90005e38 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
90005e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90005e3c:	b087      	sub	sp, #28
90005e3e:	4604      	mov	r4, r0
        : presenter(0)
90005e40:	f013 fa9e 	bl	90019380 <_ZN8touchgfx6ScreenC1Ev>
    flexButtonCallback(this, &Screen1ViewBase::flexButtonCallbackHandler)
90005e44:	4adf      	ldr	r2, [pc, #892]	; (900061c4 <_ZN15Screen1ViewBaseC1Ev+0x38c>)
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
90005e46:	4be0      	ldr	r3, [pc, #896]	; (900061c8 <_ZN15Screen1ViewBaseC1Ev+0x390>)
90005e48:	2600      	movs	r6, #0
          touchable(false),
90005e4a:	f44f 7780 	mov.w	r7, #256	; 0x100
90005e4e:	f104 086c 	add.w	r8, r4, #108	; 0x6c
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
90005e52:	f64f 75ff 	movw	r5, #65535	; 0xffff
90005e56:	6022      	str	r2, [r4, #0]
90005e58:	6423      	str	r3, [r4, #64]	; 0x40
90005e5a:	22ff      	movs	r2, #255	; 0xff
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
90005e5c:	4bdb      	ldr	r3, [pc, #876]	; (900061cc <_ZN15Screen1ViewBaseC1Ev+0x394>)
    {
        Image::setBitmap(bmp);
90005e5e:	4640      	mov	r0, r8
90005e60:	a904      	add	r1, sp, #16
90005e62:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
90005e66:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
     * @note The bitmaps to display must be configured through set setBitmaps function before this
     *       widget displays anything.
     */
    AnimatedImage(const uint8_t& updateInterval = 1)
        : animationDoneAction(0),
          startId(BITMAP_INVALID),
90005e6a:	f04f 3bff 	mov.w	fp, #4294967295
90005e6e:	f8a4 7090 	strh.w	r7, [r4, #144]	; 0x90
          endId(BITMAP_INVALID),
          updateTicksInterval(updateInterval),
90005e72:	f04f 0901 	mov.w	r9, #1
        : Widget(), bitmap(bmp), alpha(255)
90005e76:	f8a4 5092 	strh.w	r5, [r4, #146]	; 0x92
90005e7a:	f504 7aa0 	add.w	sl, r4, #320	; 0x140
90005e7e:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
90005e82:	66e3      	str	r3, [r4, #108]	; 0x6c
90005e84:	63e6      	str	r6, [r4, #60]	; 0x3c
        : x(0), y(0), width(0), height(0)
90005e86:	6466      	str	r6, [r4, #68]	; 0x44
          cachedAbsX(0),
90005e88:	6626      	str	r6, [r4, #96]	; 0x60
        : color(col)
90005e8a:	66a6      	str	r6, [r4, #104]	; 0x68
90005e8c:	f8ad 5010 	strh.w	r5, [sp, #16]
        : x(0), y(0), width(0), height(0)
90005e90:	e9c4 6612 	strd	r6, r6, [r4, #72]	; 0x48
          parent(0),
90005e94:	e9c4 6614 	strd	r6, r6, [r4, #80]	; 0x50
          nextDrawChainElement(0),
90005e98:	e9c4 6616 	strd	r6, r6, [r4, #88]	; 0x58
90005e9c:	e9c4 661c 	strd	r6, r6, [r4, #112]	; 0x70
90005ea0:	e9c4 661e 	strd	r6, r6, [r4, #120]	; 0x78
          nextSibling(0),
90005ea4:	e9c4 6620 	strd	r6, r6, [r4, #128]	; 0x80
          cachedAbsX(0),
90005ea8:	e9c4 6622 	strd	r6, r6, [r4, #136]	; 0x88
        Image::setBitmap(bmp);
90005eac:	f00f faeb 	bl	90015486 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        : typedTextId(id)
90005eb0:	4bc7      	ldr	r3, [pc, #796]	; (900061d0 <_ZN15Screen1ViewBaseC1Ev+0x398>)
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
90005eb2:	22ff      	movs	r2, #255	; 0xff
        : TextAreaWithWildcardBase(), wc1(0)
90005eb4:	49c7      	ldr	r1, [pc, #796]	; (900061d4 <_ZN15Screen1ViewBaseC1Ev+0x39c>)
          ticksSinceUpdate(0),
          reverse(false),
          loopAnimation(false),
          running(false)
90005eb6:	48c8      	ldr	r0, [pc, #800]	; (900061d8 <_ZN15Screen1ViewBaseC1Ev+0x3a0>)
90005eb8:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
90005ebc:	f8c4 20de 	str.w	r2, [r4, #222]	; 0xde
          touchable(false),
90005ec0:	f8a4 70cc 	strh.w	r7, [r4, #204]	; 0xcc
90005ec4:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
90005ec8:	66e0      	str	r0, [r4, #108]	; 0x6c
        T::add(text);
90005eca:	4650      	mov	r0, sl
90005ecc:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
90005ed0:	f8a4 b0d4 	strh.w	fp, [r4, #212]	; 0xd4
        : color(col)
90005ed4:	f8c4 60d8 	str.w	r6, [r4, #216]	; 0xd8
90005ed8:	f8a4 60dc 	strh.w	r6, [r4, #220]	; 0xdc
          updateTicksInterval(updateInterval),
90005edc:	f8c4 90a0 	str.w	r9, [r4, #160]	; 0xa0
          startId(BITMAP_INVALID),
90005ee0:	e9c4 6b26 	strd	r6, fp, [r4, #152]	; 0x98
        : x(0), y(0), width(0), height(0)
90005ee4:	e9c4 662b 	strd	r6, r6, [r4, #172]	; 0xac
90005ee8:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
          nextSibling(0),
90005eec:	e9c4 662f 	strd	r6, r6, [r4, #188]	; 0xbc
          cachedAbsX(0),
90005ef0:	e9c4 6631 	strd	r6, r6, [r4, #196]	; 0xc4
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90005ef4:	e9c4 6b39 	strd	r6, fp, [r4, #228]	; 0xe4
90005ef8:	e9c4 663b 	strd	r6, r6, [r4, #236]	; 0xec
        : x(0), y(0), width(0), height(0)
90005efc:	e9c4 663e 	strd	r6, r6, [r4, #248]	; 0xf8
90005f00:	e9c4 6640 	strd	r6, r6, [r4, #256]	; 0x100
          nextSibling(0),
90005f04:	e9c4 6642 	strd	r6, r6, [r4, #264]	; 0x108
          cachedAbsX(0),
90005f08:	e9c4 6644 	strd	r6, r6, [r4, #272]	; 0x110
          touchable(false),
90005f0c:	f8a4 7118 	strh.w	r7, [r4, #280]	; 0x118
90005f10:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
        : pressed(false), alpha(255), action(0)
90005f14:	f44f 417f 	mov.w	r1, #65280	; 0xff00
90005f18:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
90005f1c:	f8a4 116c 	strh.w	r1, [r4, #364]	; 0x16c
        touchable = touch;
90005f20:	f240 1101 	movw	r1, #257	; 0x101
90005f24:	f8c4 212a 	str.w	r2, [r4, #298]	; 0x12a
90005f28:	f8a4 1164 	strh.w	r1, [r4, #356]	; 0x164
        : T()
90005f2c:	49ab      	ldr	r1, [pc, #684]	; (900061dc <_ZN15Screen1ViewBaseC1Ev+0x3a4>)
          touchable(false),
90005f2e:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
90005f32:	1d27      	adds	r7, r4, #4
90005f34:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
90005f38:	49a9      	ldr	r1, [pc, #676]	; (900061e0 <_ZN15Screen1ViewBaseC1Ev+0x3a8>)
90005f3a:	f8a4 5120 	strh.w	r5, [r4, #288]	; 0x120
        : color(col)
90005f3e:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
90005f42:	f8a4 6128 	strh.w	r6, [r4, #296]	; 0x128
          firstChild(0)
90005f46:	f8c4 6168 	str.w	r6, [r4, #360]	; 0x168
90005f4a:	f8c4 6170 	str.w	r6, [r4, #368]	; 0x170
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90005f4e:	e9c4 6b4c 	strd	r6, fp, [r4, #304]	; 0x130
90005f52:	e9c4 664e 	strd	r6, r6, [r4, #312]	; 0x138
        : x(0), y(0), width(0), height(0)
90005f56:	e9c4 6651 	strd	r6, r6, [r4, #324]	; 0x144
90005f5a:	e9c4 6653 	strd	r6, r6, [r4, #332]	; 0x14c
          nextSibling(0),
90005f5e:	e9c4 6655 	strd	r6, r6, [r4, #340]	; 0x154
          cachedAbsX(0),
90005f62:	e9c4 6657 	strd	r6, r6, [r4, #348]	; 0x15c
90005f66:	e9c4 665e 	strd	r6, r6, [r4, #376]	; 0x178
90005f6a:	e9c4 6660 	strd	r6, r6, [r4, #384]	; 0x180
          nextSibling(0),
90005f6e:	e9c4 6662 	strd	r6, r6, [r4, #392]	; 0x188
          cachedAbsX(0),
90005f72:	e9c4 6664 	strd	r6, r6, [r4, #400]	; 0x190
90005f76:	f8c4 1174 	str.w	r1, [r4, #372]	; 0x174
90005f7a:	f8a4 51a0 	strh.w	r5, [r4, #416]	; 0x1a0
        T::add(text);
90005f7e:	f504 75ba 	add.w	r5, r4, #372	; 0x174
90005f82:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
90005f86:	4629      	mov	r1, r5
90005f88:	f8c4 21aa 	str.w	r2, [r4, #426]	; 0x1aa
        : color(col)
90005f8c:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
90005f90:	f8a4 61a8 	strh.w	r6, [r4, #424]	; 0x1a8
        : color(0)
90005f94:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90005f98:	e9c4 6b6c 	strd	r6, fp, [r4, #432]	; 0x1b0
        : color(0)
90005f9c:	e9c4 666e 	strd	r6, r6, [r4, #440]	; 0x1b8
90005fa0:	f00c fac4 	bl	9001252c <_ZN8touchgfx9Container3addERNS_8DrawableE>
        : pobject(pObject), pmemfun(pmemfun_1)
90005fa4:	4a8f      	ldr	r2, [pc, #572]	; (900061e4 <_ZN15Screen1ViewBaseC1Ev+0x3ac>)
90005fa6:	f104 0140 	add.w	r1, r4, #64	; 0x40
90005faa:	4638      	mov	r0, r7
90005fac:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
90005fb0:	4a8d      	ldr	r2, [pc, #564]	; (900061e8 <_ZN15Screen1ViewBaseC1Ev+0x3b0>)
90005fb2:	f8c4 41d8 	str.w	r4, [r4, #472]	; 0x1d8
90005fb6:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
        rect.x = x;
90005fba:	4a8c      	ldr	r2, [pc, #560]	; (900061ec <_ZN15Screen1ViewBaseC1Ev+0x3b4>)
90005fbc:	f8c4 61e0 	str.w	r6, [r4, #480]	; 0x1e0
90005fc0:	64a2      	str	r2, [r4, #72]	; 0x48
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
90005fc2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
90005fc6:	6466      	str	r6, [r4, #68]	; 0x44
90005fc8:	66a2      	str	r2, [r4, #104]	; 0x68
90005fca:	f00c faaf 	bl	9001252c <_ZN8touchgfx9Container3addERNS_8DrawableE>
90005fce:	4a88      	ldr	r2, [pc, #544]	; (900061f0 <_ZN15Screen1ViewBaseC1Ev+0x3b8>)
    animatedImage1.setBitmaps(BITMAP_GIPHY_1_ID, BITMAP_GIPHY_5_ID);
90005fd0:	4640      	mov	r0, r8
90005fd2:	4631      	mov	r1, r6
90005fd4:	6722      	str	r2, [r4, #112]	; 0x70
90005fd6:	2210      	movs	r2, #16
90005fd8:	f00e fdea 	bl	90014bb0 <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>
    animatedImage1.setUpdateTicksInterval(6);
90005fdc:	4640      	mov	r0, r8
90005fde:	2106      	movs	r1, #6
90005fe0:	f00e fdf9 	bl	90014bd6 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>
    animatedImage1.startAnimation(false, true, true);
90005fe4:	464b      	mov	r3, r9
90005fe6:	464a      	mov	r2, r9
90005fe8:	4640      	mov	r0, r8
90005fea:	4631      	mov	r1, r6
90005fec:	f00e fd38 	bl	90014a60 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>
90005ff0:	4641      	mov	r1, r8
90005ff2:	4638      	mov	r0, r7
    humidityTextArea.setXY(20, 51);
90005ff4:	f104 08a8 	add.w	r8, r4, #168	; 0xa8
90005ff8:	f00c fa98 	bl	9001252c <_ZN8touchgfx9Container3addERNS_8DrawableE>
90005ffc:	4a7d      	ldr	r2, [pc, #500]	; (900061f4 <_ZN15Screen1ViewBaseC1Ev+0x3bc>)
        setX(x);
90005ffe:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
        color = newColor;
90006002:	f8c4 b0d8 	str.w	fp, [r4, #216]	; 0xd8
        boundingArea = calculateBoundingArea();
90006006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        rect.x = x;
9000600a:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
9000600e:	4a7a      	ldr	r2, [pc, #488]	; (900061f8 <_ZN15Screen1ViewBaseC1Ev+0x3c0>)
        linespace = space;
90006010:	f8a4 60dc 	strh.w	r6, [r4, #220]	; 0xdc
90006014:	4293      	cmp	r3, r2
90006016:	f040 810c 	bne.w	90006232 <_ZN15Screen1ViewBaseC1Ev+0x3fa>
        boundingArea = calculateBoundingArea();
9000601a:	f8c4 60ec 	str.w	r6, [r4, #236]	; 0xec
9000601e:	e9c4 6b39 	strd	r6, fp, [r4, #228]	; 0xe4
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90006022:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 90006218 <_ZN15Screen1ViewBaseC1Ev+0x3e0>
    Unicode::snprintf(humidityTextAreaBuffer, HUMIDITYTEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_YZZO).getText());
90006026:	f504 76e2 	add.w	r6, r4, #452	; 0x1c4
9000602a:	f8db 3000 	ldr.w	r3, [fp]
9000602e:	2b00      	cmp	r3, #0
90006030:	f000 8122 	beq.w	90006278 <_ZN15Screen1ViewBaseC1Ev+0x440>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90006034:	4b71      	ldr	r3, [pc, #452]	; (900061fc <_ZN15Screen1ViewBaseC1Ev+0x3c4>)
90006036:	881b      	ldrh	r3, [r3, #0]
90006038:	2b08      	cmp	r3, #8
9000603a:	f240 8123 	bls.w	90006284 <_ZN15Screen1ViewBaseC1Ev+0x44c>
        return texts->getText(typedTextId);
9000603e:	4b70      	ldr	r3, [pc, #448]	; (90006200 <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
90006040:	2108      	movs	r1, #8
    temperatureTextArea.setXY(20, 16);
90006042:	f104 09f4 	add.w	r9, r4, #244	; 0xf4
90006046:	6818      	ldr	r0, [r3, #0]
90006048:	f001 fe74 	bl	90007d34 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(humidityTextAreaBuffer, HUMIDITYTEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_YZZO).getText());
9000604c:	4a6d      	ldr	r2, [pc, #436]	; (90006204 <_ZN15Screen1ViewBaseC1Ev+0x3cc>)
9000604e:	4603      	mov	r3, r0
90006050:	2104      	movs	r1, #4
90006052:	4630      	mov	r0, r6
90006054:	f014 fe52 	bl	9001acfc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    humidityTextArea.resizeToCurrentText();
90006058:	4640      	mov	r0, r8
        wc1 = value;
9000605a:	f8c4 60f0 	str.w	r6, [r4, #240]	; 0xf0
9000605e:	f00f f92b 	bl	900152b8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
90006062:	4b5b      	ldr	r3, [pc, #364]	; (900061d0 <_ZN15Screen1ViewBaseC1Ev+0x398>)
    humidityTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Y9RM));
90006064:	a904      	add	r1, sp, #16
90006066:	4640      	mov	r0, r8
90006068:	9304      	str	r3, [sp, #16]
9000606a:	2309      	movs	r3, #9
9000606c:	f8ad 3014 	strh.w	r3, [sp, #20]
90006070:	f00f f942 	bl	900152f8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90006074:	4641      	mov	r1, r8
90006076:	4638      	mov	r0, r7
90006078:	f00c fa58 	bl	9001252c <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
9000607c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
        setY(y);
90006080:	485d      	ldr	r0, [pc, #372]	; (900061f8 <_ZN15Screen1ViewBaseC1Ev+0x3c0>)
        color = newColor;
90006082:	f04f 31ff 	mov.w	r1, #4294967295
        boundingArea = calculateBoundingArea();
90006086:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
        rect.x = x;
9000608a:	4b5f      	ldr	r3, [pc, #380]	; (90006208 <_ZN15Screen1ViewBaseC1Ev+0x3d0>)
9000608c:	4282      	cmp	r2, r0
        color = newColor;
9000608e:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
90006092:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
        linespace = space;
90006096:	f04f 0300 	mov.w	r3, #0
9000609a:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
        boundingArea = calculateBoundingArea();
9000609e:	f040 80d3 	bne.w	90006248 <_ZN15Screen1ViewBaseC1Ev+0x410>
900060a2:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
900060a6:	e9c4 314c 	strd	r3, r1, [r4, #304]	; 0x130
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
900060aa:	f8db 3000 	ldr.w	r3, [fp]
    Unicode::snprintf(temperatureTextAreaBuffer, TEMPERATURETEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_1MEA).getText());
900060ae:	f504 78e6 	add.w	r8, r4, #460	; 0x1cc
900060b2:	2b00      	cmp	r3, #0
900060b4:	f000 80e0 	beq.w	90006278 <_ZN15Screen1ViewBaseC1Ev+0x440>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900060b8:	4b50      	ldr	r3, [pc, #320]	; (900061fc <_ZN15Screen1ViewBaseC1Ev+0x3c4>)
900060ba:	881b      	ldrh	r3, [r3, #0]
900060bc:	2b0a      	cmp	r3, #10
900060be:	f240 80e1 	bls.w	90006284 <_ZN15Screen1ViewBaseC1Ev+0x44c>
        return texts->getText(typedTextId);
900060c2:	4b4f      	ldr	r3, [pc, #316]	; (90006200 <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
900060c4:	210a      	movs	r1, #10
        : typedTextId(id)
900060c6:	4e42      	ldr	r6, [pc, #264]	; (900061d0 <_ZN15Screen1ViewBaseC1Ev+0x398>)
        return texts->getText(typedTextId);
900060c8:	6818      	ldr	r0, [r3, #0]
900060ca:	f001 fe33 	bl	90007d34 <_ZNK8touchgfx5Texts7getTextEt>
900060ce:	4a4d      	ldr	r2, [pc, #308]	; (90006204 <_ZN15Screen1ViewBaseC1Ev+0x3cc>)
900060d0:	4603      	mov	r3, r0
900060d2:	2104      	movs	r1, #4
900060d4:	4640      	mov	r0, r8
900060d6:	f014 fe11 	bl	9001acfc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    temperatureTextArea.resizeToCurrentText();
900060da:	4648      	mov	r0, r9
900060dc:	f8c4 813c 	str.w	r8, [r4, #316]	; 0x13c
        boundingArea = calculateBoundingArea();
900060e0:	f105 083c 	add.w	r8, r5, #60	; 0x3c
900060e4:	f00f f8e8 	bl	900152b8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
900060e8:	230b      	movs	r3, #11
    temperatureTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9J1Y));
900060ea:	4648      	mov	r0, r9
900060ec:	a904      	add	r1, sp, #16
900060ee:	f8ad 3014 	strh.w	r3, [sp, #20]
900060f2:	9604      	str	r6, [sp, #16]
900060f4:	f00f f900 	bl	900152f8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
900060f8:	4649      	mov	r1, r9
900060fa:	4638      	mov	r0, r7
900060fc:	f00c fa16 	bl	9001252c <_ZN8touchgfx9Container3addERNS_8DrawableE>
90006100:	2301      	movs	r3, #1
        text.setTypedText(t);
90006102:	a904      	add	r1, sp, #16
90006104:	4628      	mov	r0, r5
90006106:	9604      	str	r6, [sp, #16]
90006108:	466e      	mov	r6, sp
9000610a:	f8ad 3014 	strh.w	r3, [sp, #20]
9000610e:	f00f f8f3 	bl	900152f8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
        rect.width = width;
90006112:	f8b4 3148 	ldrh.w	r3, [r4, #328]	; 0x148
90006116:	4629      	mov	r1, r5
90006118:	4630      	mov	r0, r6
        return rect.height;
9000611a:	f9b4 914a 	ldrsh.w	r9, [r4, #330]	; 0x14a
        rect.width = width;
9000611e:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
90006122:	f00e fe41 	bl	90014da8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
90006126:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
9000612a:	e888 0007 	stmia.w	r8, {r0, r1, r2}
        boundingArea = calculateBoundingArea();
9000612e:	4629      	mov	r1, r5
90006130:	4630      	mov	r0, r6
        rect.height = height;
90006132:	f8a4 917e 	strh.w	r9, [r4, #382]	; 0x17e
90006136:	f00e fe37 	bl	90014da8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
        setX(x);
9000613a:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
9000613e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 9000621c <_ZN15Screen1ViewBaseC1Ev+0x3e4>
        rect.x = x;
90006142:	f04f 0e00 	mov.w	lr, #0
        setWidth(width);
90006146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006148:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
9000614c:	4563      	cmp	r3, ip
9000614e:	e888 0007 	stmia.w	r8, {r0, r1, r2}
        rect.x = x;
90006152:	f8c4 e178 	str.w	lr, [r4, #376]	; 0x178
        setWidth(width);
90006156:	f040 8082 	bne.w	9000625e <_ZN15Screen1ViewBaseC1Ev+0x426>
        rect.width = width;
9000615a:	23a6      	movs	r3, #166	; 0xa6
        boundingArea = calculateBoundingArea();
9000615c:	4629      	mov	r1, r5
9000615e:	4630      	mov	r0, r6
90006160:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
90006164:	f00e fe20 	bl	90014da8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
        setHeight(height);
90006168:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
9000616c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
90006170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90006172:	e888 0007 	stmia.w	r8, {r0, r1, r2}
90006176:	4a25      	ldr	r2, [pc, #148]	; (9000620c <_ZN15Screen1ViewBaseC1Ev+0x3d4>)
90006178:	4293      	cmp	r3, r2
9000617a:	d179      	bne.n	90006270 <_ZN15Screen1ViewBaseC1Ev+0x438>
        rect.height = height;
9000617c:	231d      	movs	r3, #29
        boundingArea = calculateBoundingArea();
9000617e:	4629      	mov	r1, r5
90006180:	4630      	mov	r0, r6
90006182:	f8a4 317e 	strh.w	r3, [r4, #382]	; 0x17e
90006186:	f00e fe0f 	bl	90014da8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
9000618a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
9000618e:	e888 0007 	stmia.w	r8, {r0, r1, r2}
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
90006192:	f894 116c 	ldrb.w	r1, [r4, #364]	; 0x16c
        colorReleased = newColorReleased;
90006196:	f04f 32ff 	mov.w	r2, #4294967295
        colorPressed = newColorPressed;
9000619a:	4b1d      	ldr	r3, [pc, #116]	; (90006210 <_ZN15Screen1ViewBaseC1Ev+0x3d8>)
9000619c:	4638      	mov	r0, r7
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
9000619e:	2900      	cmp	r1, #0
        colorReleased = newColorReleased;
900061a0:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
        colorPressed = newColorPressed;
900061a4:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
900061a8:	4651      	mov	r1, sl
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
900061aa:	bf08      	it	eq
900061ac:	4613      	moveq	r3, r2
    temperatureButton.setAction(flexButtonCallback);
900061ae:	f504 72ea 	add.w	r2, r4, #468	; 0x1d4
        color = newColor;
900061b2:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
        rect.x = x;
900061b6:	4b17      	ldr	r3, [pc, #92]	; (90006214 <_ZN15Screen1ViewBaseC1Ev+0x3dc>)
        action = &callback;
900061b8:	f8c4 2170 	str.w	r2, [r4, #368]	; 0x170
900061bc:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
900061c0:	e02e      	b.n	90006220 <_ZN15Screen1ViewBaseC1Ev+0x3e8>
900061c2:	bf00      	nop
900061c4:	9002aaac 	.word	0x9002aaac
900061c8:	9002be30 	.word	0x9002be30
900061cc:	9002be98 	.word	0x9002be98
900061d0:	9002a190 	.word	0x9002a190
900061d4:	9002a968 	.word	0x9002a968
900061d8:	9002bd24 	.word	0x9002bd24
900061dc:	9002a9f8 	.word	0x9002a9f8
900061e0:	9002bda0 	.word	0x9002bda0
900061e4:	9002aa94 	.word	0x9002aa94
900061e8:	90005b79 	.word	0x90005b79
900061ec:	011001e0 	.word	0x011001e0
900061f0:	fffc0000 	.word	0xfffc0000
900061f4:	00330014 	.word	0x00330014
900061f8:	90005aa5 	.word	0x90005aa5
900061fc:	240281f0 	.word	0x240281f0
90006200:	240281f8 	.word	0x240281f8
90006204:	9002a95c 	.word	0x9002a95c
90006208:	00100014 	.word	0x00100014
9000620c:	90005a59 	.word	0x90005a59
90006210:	ff9e9d9d 	.word	0xff9e9d9d
90006214:	00e50014 	.word	0x00e50014
90006218:	240281ec 	.word	0x240281ec
9000621c:	90005a31 	.word	0x90005a31
90006220:	4b1b      	ldr	r3, [pc, #108]	; (90006290 <_ZN15Screen1ViewBaseC1Ev+0x458>)
90006222:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
90006226:	f00c f981 	bl	9001252c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
9000622a:	4620      	mov	r0, r4
9000622c:	b007      	add	sp, #28
9000622e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        boundingArea = calculateBoundingArea();
90006232:	46e9      	mov	r9, sp
90006234:	4641      	mov	r1, r8
90006236:	4648      	mov	r0, r9
90006238:	4798      	blx	r3
9000623a:	f104 03e4 	add.w	r3, r4, #228	; 0xe4
9000623e:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
90006242:	e883 0007 	stmia.w	r3, {r0, r1, r2}
90006246:	e6ec      	b.n	90006022 <_ZN15Screen1ViewBaseC1Ev+0x1ea>
90006248:	46e8      	mov	r8, sp
9000624a:	4649      	mov	r1, r9
9000624c:	4640      	mov	r0, r8
9000624e:	4790      	blx	r2
90006250:	f504 7398 	add.w	r3, r4, #304	; 0x130
90006254:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
90006258:	e883 0007 	stmia.w	r3, {r0, r1, r2}
9000625c:	e725      	b.n	900060aa <_ZN15Screen1ViewBaseC1Ev+0x272>
        setWidth(width);
9000625e:	21a6      	movs	r1, #166	; 0xa6
90006260:	4628      	mov	r0, r5
90006262:	4798      	blx	r3
        setHeight(height);
90006264:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
90006268:	4a0a      	ldr	r2, [pc, #40]	; (90006294 <_ZN15Screen1ViewBaseC1Ev+0x45c>)
9000626a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000626c:	4293      	cmp	r3, r2
9000626e:	d085      	beq.n	9000617c <_ZN15Screen1ViewBaseC1Ev+0x344>
90006270:	4628      	mov	r0, r5
90006272:	211d      	movs	r1, #29
90006274:	4798      	blx	r3
90006276:	e78c      	b.n	90006192 <_ZN15Screen1ViewBaseC1Ev+0x35a>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90006278:	4b07      	ldr	r3, [pc, #28]	; (90006298 <_ZN15Screen1ViewBaseC1Ev+0x460>)
9000627a:	2160      	movs	r1, #96	; 0x60
9000627c:	4a07      	ldr	r2, [pc, #28]	; (9000629c <_ZN15Screen1ViewBaseC1Ev+0x464>)
9000627e:	4808      	ldr	r0, [pc, #32]	; (900062a0 <_ZN15Screen1ViewBaseC1Ev+0x468>)
90006280:	f020 ff28 	bl	900270d4 <__assert_func>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90006284:	4b07      	ldr	r3, [pc, #28]	; (900062a4 <_ZN15Screen1ViewBaseC1Ev+0x46c>)
90006286:	2161      	movs	r1, #97	; 0x61
90006288:	4a04      	ldr	r2, [pc, #16]	; (9000629c <_ZN15Screen1ViewBaseC1Ev+0x464>)
9000628a:	4805      	ldr	r0, [pc, #20]	; (900062a0 <_ZN15Screen1ViewBaseC1Ev+0x468>)
9000628c:	f020 ff22 	bl	900270d4 <__assert_func>
90006290:	001d00a6 	.word	0x001d00a6
90006294:	90005a59 	.word	0x90005a59
90006298:	9002a81c 	.word	0x9002a81c
9000629c:	9002a924 	.word	0x9002a924
900062a0:	9002a89c 	.word	0x9002a89c
900062a4:	9002a8e4 	.word	0x9002a8e4

900062a8 <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
900062a8:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    }
900062ac:	4770      	bx	lr
900062ae:	bf00      	nop

900062b0 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
900062b0:	b410      	push	{r4}
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
900062b2:	6803      	ldr	r3, [r0, #0]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
900062b4:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
900062b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
900062ba:	fb04 f202 	mul.w	r2, r4, r2
900062be:	fb04 f101 	mul.w	r1, r4, r1
    }
900062c2:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
900062c6:	4718      	bx	r3

900062c8 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
     *
     * @return The product of the two numbers, rounded to nearest integer value.
     */
    FORCE_INLINE_FUNCTION static int float2scaled(float f, int scale)
    {
        const float fs = f * (float)scale;
900062c8:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
900062cc:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
900062ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeX(float min, float max)
900062d2:	b410      	push	{r4}
        const float fs = f * (float)scale;
900062d4:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
900062d8:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
        if (fs >= 0)
900062dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
900062e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900062e4:	da2e      	bge.n	90006344 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x7c>
        {
            return (int)(fs + 0.5f);
        }
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900062e6:	eebd 7ac0 	vcvt.s32.f32	s14, s0
900062ea:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
        const float fs = f * (float)scale;
900062ee:	ee60 0aa7 	vmul.f32	s1, s1, s15
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900062f2:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
900062f6:	ee17 3a10 	vmov	r3, s14
        if (fs >= 0)
900062fa:	eef5 0ac0 	vcmpe.f32	s1, #0.0
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900062fe:	3b01      	subs	r3, #1
90006300:	ee30 0a46 	vsub.f32	s0, s0, s12
        if (fs >= 0)
90006304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006308:	ee30 0a26 	vadd.f32	s0, s0, s13
9000630c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
90006310:	ee10 1a10 	vmov	r1, s0
90006314:	4419      	add	r1, r3
        if (fs >= 0)
90006316:	da24      	bge.n	90006362 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x9a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006318:	eefd 7ae0 	vcvt.s32.f32	s15, s1
9000631c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
90006320:	eef8 6ae7 	vcvt.f32.s32	s13, s15
90006324:	ee17 3a90 	vmov	r3, s15
90006328:	3b01      	subs	r3, #1
9000632a:	ee70 0ae6 	vsub.f32	s1, s1, s13
9000632e:	ee70 0a87 	vadd.f32	s1, s1, s14
90006332:	eefd 0ae0 	vcvt.s32.f32	s1, s1
90006336:	ee10 2a90 	vmov	r2, s1
9000633a:	441a      	add	r2, r3
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
9000633c:	4623      	mov	r3, r4
    }
9000633e:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
90006342:	4718      	bx	r3
            return (int)(fs + 0.5f);
90006344:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
        const float fs = f * (float)scale;
90006348:	ee60 0aa7 	vmul.f32	s1, s1, s15
            return (int)(fs + 0.5f);
9000634c:	ee30 0a07 	vadd.f32	s0, s0, s14
        if (fs >= 0)
90006350:	eef5 0ac0 	vcmpe.f32	s1, #0.0
            return (int)(fs + 0.5f);
90006354:	eebd 7ac0 	vcvt.s32.f32	s14, s0
        if (fs >= 0)
90006358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            return (int)(fs + 0.5f);
9000635c:	ee17 1a10 	vmov	r1, s14
        if (fs >= 0)
90006360:	dbda      	blt.n	90006318 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x50>
            return (int)(fs + 0.5f);
90006362:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
90006366:	4623      	mov	r3, r4
    }
90006368:	f85d 4b04 	ldr.w	r4, [sp], #4
            return (int)(fs + 0.5f);
9000636c:	ee70 0aa7 	vadd.f32	s1, s1, s15
90006370:	eefd 7ae0 	vcvt.s32.f32	s15, s1
90006374:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
90006378:	4718      	bx	r3
9000637a:	bf00      	nop

9000637c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
9000637c:	b410      	push	{r4}
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
9000637e:	6803      	ldr	r3, [r0, #0]
        return int2scaled(i, yScale);
90006380:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
90006382:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
90006386:	fb04 f202 	mul.w	r2, r4, r2
9000638a:	fb04 f101 	mul.w	r1, r4, r1
    }
9000638e:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
90006392:	4718      	bx	r3

90006394 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
        const float fs = f * (float)scale;
90006394:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
90006398:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
9000639a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeY(float min, float max)
9000639e:	b410      	push	{r4}
        const float fs = f * (float)scale;
900063a0:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
900063a4:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
        if (fs >= 0)
900063a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
900063ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900063b0:	da2e      	bge.n	90006410 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x7c>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900063b2:	eebd 7ac0 	vcvt.s32.f32	s14, s0
900063b6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
        const float fs = f * (float)scale;
900063ba:	ee60 0aa7 	vmul.f32	s1, s1, s15
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900063be:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
900063c2:	ee17 3a10 	vmov	r3, s14
        if (fs >= 0)
900063c6:	eef5 0ac0 	vcmpe.f32	s1, #0.0
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900063ca:	3b01      	subs	r3, #1
900063cc:	ee30 0a46 	vsub.f32	s0, s0, s12
        if (fs >= 0)
900063d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900063d4:	ee30 0a26 	vadd.f32	s0, s0, s13
900063d8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
900063dc:	ee10 1a10 	vmov	r1, s0
900063e0:	4419      	add	r1, r3
        if (fs >= 0)
900063e2:	da24      	bge.n	9000642e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x9a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900063e4:	eefd 7ae0 	vcvt.s32.f32	s15, s1
900063e8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
900063ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
900063f0:	ee17 3a90 	vmov	r3, s15
900063f4:	3b01      	subs	r3, #1
900063f6:	ee70 0ae6 	vsub.f32	s1, s1, s13
900063fa:	ee70 0a87 	vadd.f32	s1, s1, s14
900063fe:	eefd 0ae0 	vcvt.s32.f32	s1, s1
90006402:	ee10 2a90 	vmov	r2, s1
90006406:	441a      	add	r2, r3
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
90006408:	4623      	mov	r3, r4
    }
9000640a:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
9000640e:	4718      	bx	r3
            return (int)(fs + 0.5f);
90006410:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
        const float fs = f * (float)scale;
90006414:	ee60 0aa7 	vmul.f32	s1, s1, s15
            return (int)(fs + 0.5f);
90006418:	ee30 0a07 	vadd.f32	s0, s0, s14
        if (fs >= 0)
9000641c:	eef5 0ac0 	vcmpe.f32	s1, #0.0
            return (int)(fs + 0.5f);
90006420:	eebd 7ac0 	vcvt.s32.f32	s14, s0
        if (fs >= 0)
90006424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            return (int)(fs + 0.5f);
90006428:	ee17 1a10 	vmov	r1, s14
        if (fs >= 0)
9000642c:	dbda      	blt.n	900063e4 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x50>
            return (int)(fs + 0.5f);
9000642e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
90006432:	4623      	mov	r3, r4
    }
90006434:	f85d 4b04 	ldr.w	r4, [sp], #4
            return (int)(fs + 0.5f);
90006438:	ee70 0aa7 	vadd.f32	s1, s1, s15
9000643c:	eefd 7ae0 	vcvt.s32.f32	s15, s1
90006440:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
90006444:	4718      	bx	r3
90006446:	bf00      	nop

90006448 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
90006448:	b410      	push	{r4}
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
9000644a:	6803      	ldr	r3, [r0, #0]
9000644c:	6b44      	ldr	r4, [r0, #52]	; 0x34
9000644e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
90006452:	fb04 f202 	mul.w	r2, r4, r2
    }
90006456:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
9000645a:	4718      	bx	r3

9000645c <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
        const float fs = f * (float)scale;
9000645c:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
90006460:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
90006462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeYAuto(bool showXaxis, float margin)
90006466:	b410      	push	{r4}
        const float fs = f * (float)scale;
90006468:	ee27 0a80 	vmul.f32	s0, s15, s0
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
9000646c:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
        if (fs >= 0)
90006470:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
90006474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90006478:	da15      	bge.n	900064a6 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x4a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
9000647a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
9000647e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
90006482:	eef8 6ae7 	vcvt.f32.s32	s13, s15
90006486:	ee17 3a90 	vmov	r3, s15
9000648a:	3b01      	subs	r3, #1
9000648c:	ee30 0a66 	vsub.f32	s0, s0, s13
90006490:	ee30 0a07 	vadd.f32	s0, s0, s14
90006494:	eebd 0ac0 	vcvt.s32.f32	s0, s0
90006498:	ee10 2a10 	vmov	r2, s0
9000649c:	441a      	add	r2, r3
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
9000649e:	4623      	mov	r3, r4
    }
900064a0:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
900064a4:	4718      	bx	r3
            return (int)(fs + 0.5f);
900064a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
900064aa:	4623      	mov	r3, r4
    }
900064ac:	f85d 4b04 	ldr.w	r4, [sp], #4
            return (int)(fs + 0.5f);
900064b0:	ee30 0a27 	vadd.f32	s0, s0, s15
900064b4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
900064b8:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
900064bc:	4718      	bx	r3
900064be:	bf00      	nop

900064c0 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
        return scaled2intX(graphRangeMinX);
900064c0:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
900064c4:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
900064c6:	2b00      	cmp	r3, #0
900064c8:	da0c      	bge.n	900064e4 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x24>
        return -(((-i * 2 + scale - 1) / scale) / 2);
900064ca:	ebc3 70c3 	rsb	r0, r3, r3, lsl #31
900064ce:	eb02 0040 	add.w	r0, r2, r0, lsl #1
900064d2:	3801      	subs	r0, #1
900064d4:	fb90 f0f2 	sdiv	r0, r0, r2
900064d8:	2800      	cmp	r0, #0
900064da:	bfb8      	it	lt
900064dc:	3001      	addlt	r0, #1
900064de:	1040      	asrs	r0, r0, #1
900064e0:	4240      	negs	r0, r0
    }
900064e2:	4770      	bx	lr
            return ((i * 2 + scale) / scale) / 2;
900064e4:	eb02 0043 	add.w	r0, r2, r3, lsl #1
900064e8:	fb90 f0f2 	sdiv	r0, r0, r2
900064ec:	2800      	cmp	r0, #0
900064ee:	bfb8      	it	lt
900064f0:	3001      	addlt	r0, #1
900064f2:	1040      	asrs	r0, r0, #1
900064f4:	4770      	bx	lr
900064f6:	bf00      	nop

900064f8 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
     *
     * @return The number divided by the scale.
     */
    FORCE_INLINE_FUNCTION static float scaled2float(int i, int scale)
    {
        return (float)i / (float)scale;
900064f8:	ed90 0a4b 	vldr	s0, [r0, #300]	; 0x12c
900064fc:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
90006500:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
90006504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
90006508:	ee80 0a27 	vdiv.f32	s0, s0, s15
9000650c:	4770      	bx	lr
9000650e:	bf00      	nop

90006510 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    }
90006510:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
90006514:	4770      	bx	lr
90006516:	bf00      	nop

90006518 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
        return scaled2intX(graphRangeMaxX);
90006518:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
        return scaled2int(i, xScale);
9000651c:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
9000651e:	2b00      	cmp	r3, #0
90006520:	da0c      	bge.n	9000653c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x24>
        return -(((-i * 2 + scale - 1) / scale) / 2);
90006522:	ebc3 70c3 	rsb	r0, r3, r3, lsl #31
90006526:	eb02 0040 	add.w	r0, r2, r0, lsl #1
9000652a:	3801      	subs	r0, #1
9000652c:	fb90 f0f2 	sdiv	r0, r0, r2
90006530:	2800      	cmp	r0, #0
90006532:	bfb8      	it	lt
90006534:	3001      	addlt	r0, #1
90006536:	1040      	asrs	r0, r0, #1
90006538:	4240      	negs	r0, r0
    }
9000653a:	4770      	bx	lr
            return ((i * 2 + scale) / scale) / 2;
9000653c:	eb02 0043 	add.w	r0, r2, r3, lsl #1
90006540:	fb90 f0f2 	sdiv	r0, r0, r2
90006544:	2800      	cmp	r0, #0
90006546:	bfb8      	it	lt
90006548:	3001      	addlt	r0, #1
9000654a:	1040      	asrs	r0, r0, #1
9000654c:	4770      	bx	lr
9000654e:	bf00      	nop

90006550 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
        return (float)i / (float)scale;
90006550:	ed90 0a4c 	vldr	s0, [r0, #304]	; 0x130
90006554:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
90006558:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
9000655c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
90006560:	ee80 0a27 	vdiv.f32	s0, s0, s15
90006564:	4770      	bx	lr
90006566:	bf00      	nop

90006568 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    }
90006568:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
9000656c:	4770      	bx	lr
9000656e:	bf00      	nop

90006570 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
        return scaled2intY(graphRangeMinY);
90006570:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
        return scaled2int(i, yScale);
90006574:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
90006576:	2b00      	cmp	r3, #0
90006578:	da0c      	bge.n	90006594 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x24>
        return -(((-i * 2 + scale - 1) / scale) / 2);
9000657a:	ebc3 70c3 	rsb	r0, r3, r3, lsl #31
9000657e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90006582:	3801      	subs	r0, #1
90006584:	fb90 f0f2 	sdiv	r0, r0, r2
90006588:	2800      	cmp	r0, #0
9000658a:	bfb8      	it	lt
9000658c:	3001      	addlt	r0, #1
9000658e:	1040      	asrs	r0, r0, #1
90006590:	4240      	negs	r0, r0
    }
90006592:	4770      	bx	lr
            return ((i * 2 + scale) / scale) / 2;
90006594:	eb02 0043 	add.w	r0, r2, r3, lsl #1
90006598:	fb90 f0f2 	sdiv	r0, r0, r2
9000659c:	2800      	cmp	r0, #0
9000659e:	bfb8      	it	lt
900065a0:	3001      	addlt	r0, #1
900065a2:	1040      	asrs	r0, r0, #1
900065a4:	4770      	bx	lr
900065a6:	bf00      	nop

900065a8 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
        return (float)i / (float)scale;
900065a8:	ed90 0a4d 	vldr	s0, [r0, #308]	; 0x134
900065ac:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
900065b0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
900065b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
900065b8:	ee80 0a27 	vdiv.f32	s0, s0, s15
900065bc:	4770      	bx	lr
900065be:	bf00      	nop

900065c0 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    }
900065c0:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
900065c4:	4770      	bx	lr
900065c6:	bf00      	nop

900065c8 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
        return scaled2intY(graphRangeMaxY);
900065c8:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        return scaled2int(i, yScale);
900065cc:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
900065ce:	2b00      	cmp	r3, #0
900065d0:	da0c      	bge.n	900065ec <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x24>
        return -(((-i * 2 + scale - 1) / scale) / 2);
900065d2:	ebc3 70c3 	rsb	r0, r3, r3, lsl #31
900065d6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
900065da:	3801      	subs	r0, #1
900065dc:	fb90 f0f2 	sdiv	r0, r0, r2
900065e0:	2800      	cmp	r0, #0
900065e2:	bfb8      	it	lt
900065e4:	3001      	addlt	r0, #1
900065e6:	1040      	asrs	r0, r0, #1
900065e8:	4240      	negs	r0, r0
    }
900065ea:	4770      	bx	lr
            return ((i * 2 + scale) / scale) / 2;
900065ec:	eb02 0043 	add.w	r0, r2, r3, lsl #1
900065f0:	fb90 f0f2 	sdiv	r0, r0, r2
900065f4:	2800      	cmp	r0, #0
900065f6:	bfb8      	it	lt
900065f8:	3001      	addlt	r0, #1
900065fa:	1040      	asrs	r0, r0, #1
900065fc:	4770      	bx	lr
900065fe:	bf00      	nop

90006600 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
        return (float)i / (float)scale;
90006600:	ed90 0a4e 	vldr	s0, [r0, #312]	; 0x138
90006604:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
90006608:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
9000660c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
90006610:	ee80 0a27 	vdiv.f32	s0, s0, s15
90006614:	4770      	bx	lr
90006616:	bf00      	nop

90006618 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    }
90006618:	f8d0 0138 	ldr.w	r0, [r0, #312]	; 0x138
9000661c:	4770      	bx	lr
9000661e:	bf00      	nop

90006620 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>:
     * @note The current xAxisFactor, xAxisOffet and xGraphRange values are updated to reflect the
     *       new scale being set.
     */
    virtual void setScale(int scale, bool updateData = false)
    {
        setScaleX(scale, updateData);
90006620:	6803      	ldr	r3, [r0, #0]
    virtual void setScale(int scale, bool updateData = false)
90006622:	b570      	push	{r4, r5, r6, lr}
90006624:	4604      	mov	r4, r0
        setScaleX(scale, updateData);
90006626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    virtual void setScale(int scale, bool updateData = false)
9000662a:	460d      	mov	r5, r1
9000662c:	4616      	mov	r6, r2
        setScaleX(scale, updateData);
9000662e:	4798      	blx	r3
        setScaleY(scale, updateData);
90006630:	6823      	ldr	r3, [r4, #0]
90006632:	4632      	mov	r2, r6
90006634:	4629      	mov	r1, r5
90006636:	4620      	mov	r0, r4
90006638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    }
9000663c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setScaleY(scale, updateData);
90006640:	4718      	bx	r3
90006642:	bf00      	nop

90006644 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi>:

    virtual void setGraphRangeYAutoScaled(bool showXaxis, int margin);

    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
    {
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006644:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
90006646:	2a00      	cmp	r2, #0
        return scaled2int(i, xScale);
90006648:	6b01      	ldr	r1, [r0, #48]	; 0x30
    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
9000664a:	b410      	push	{r4}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
9000664c:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
        if (i >= 0)
90006650:	da14      	bge.n	9000667c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x38>
        return -(((-i * 2 + scale - 1) / scale) / 2);
90006652:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
90006656:	eb01 0342 	add.w	r3, r1, r2, lsl #1
9000665a:	3b01      	subs	r3, #1
9000665c:	fb93 f3f1 	sdiv	r3, r3, r1
90006660:	2b00      	cmp	r3, #0
90006662:	bfb8      	it	lt
90006664:	3301      	addlt	r3, #1
90006666:	105b      	asrs	r3, r3, #1
90006668:	425b      	negs	r3, r3
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
9000666a:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
9000666e:	4259      	negs	r1, r3
90006670:	3a01      	subs	r2, #1
90006672:	441a      	add	r2, r3
90006674:	4623      	mov	r3, r4
    }
90006676:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
9000667a:	4718      	bx	r3
            return ((i * 2 + scale) / scale) / 2;
9000667c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
90006680:	fb92 f3f1 	sdiv	r3, r2, r1
90006684:	2b00      	cmp	r3, #0
90006686:	bfb8      	it	lt
90006688:	3301      	addlt	r3, #1
9000668a:	105b      	asrs	r3, r3, #1
9000668c:	e7ed      	b.n	9000666a <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x26>
9000668e:	bf00      	nop

90006690 <_ZN8touchgfx16DynamicDataGraph20setXAxisFactorScaledEi>:
     *
     * @see setXAxisFactorScaled,setXAxisFactor
     */
    virtual void setXAxisFactorScaled(int factor)
    {
        xAxisFactor = factor;
90006690:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    }
90006694:	4770      	bx	lr
90006696:	bf00      	nop

90006698 <_ZNK8touchgfx16DynamicDataGraph20getXAxisFactorScaledEv>:
     * @see getXAxisFactorAsInt, getXAxisFactorAsFloat, setXAxisFactor
     */
    virtual int getXAxisFactorScaled() const
    {
        return xAxisFactor;
    }
90006698:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
9000669c:	4770      	bx	lr
9000669e:	bf00      	nop

900066a0 <_ZN8touchgfx16DynamicDataGraph20setXAxisOffsetScaledEi>:
     *
     * @see setXAxisOffset, getXAxisOffsetScaled
     */
    virtual void setXAxisOffsetScaled(int offset)
    {
        xAxisOffset = offset;
900066a0:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    }
900066a4:	4770      	bx	lr
900066a6:	bf00      	nop

900066a8 <_ZNK8touchgfx16DynamicDataGraph20getXAxisOffsetScaledEv>:
     * @see getXAxisOffsetAsInt, getXAxisOffsetAsFloat, setXAxisOffsetScaled, setXAxisOffset
     */
    virtual int getXAxisOffsetScaled() const
    {
        return xAxisOffset;
    }
900066a8:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
900066ac:	4770      	bx	lr
900066ae:	bf00      	nop

900066b0 <_ZNK8touchgfx16DynamicDataGraph9dataIndexEs>:
     * @return The index in the yValues array.
     */
    virtual int16_t dataIndex(int16_t screenIndex) const
    {
        return screenIndex;
    }
900066b0:	4608      	mov	r0, r1
900066b2:	4770      	bx	lr

900066b4 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii>:
    }

    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
    {
        // Value is also index for these types of graphs.
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
900066b4:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
900066b6:	2900      	cmp	r1, #0
        return scaled2int(i, xScale);
900066b8:	6b02      	ldr	r2, [r0, #48]	; 0x30
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
900066ba:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
900066be:	b510      	push	{r4, lr}
900066c0:	4604      	mov	r4, r0
        if (i >= 0)
900066c2:	da13      	bge.n	900066ec <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x38>
        return -(((-i * 2 + scale - 1) / scale) / 2);
900066c4:	ebc1 71c1 	rsb	r1, r1, r1, lsl #31
900066c8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
900066cc:	3901      	subs	r1, #1
900066ce:	fb91 f1f2 	sdiv	r1, r1, r2
900066d2:	2900      	cmp	r1, #0
900066d4:	bfb8      	it	lt
900066d6:	3101      	addlt	r1, #1
900066d8:	1049      	asrs	r1, r1, #1
900066da:	4249      	negs	r1, r1
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
900066dc:	b209      	sxth	r1, r1
900066de:	4620      	mov	r0, r4
900066e0:	4798      	blx	r3
900066e2:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	; 0x13c
    }
900066e6:	fb02 3000 	mla	r0, r2, r0, r3
900066ea:	bd10      	pop	{r4, pc}
            return ((i * 2 + scale) / scale) / 2;
900066ec:	eb02 0141 	add.w	r1, r2, r1, lsl #1
900066f0:	fb91 f1f2 	sdiv	r1, r1, r2
900066f4:	2900      	cmp	r1, #0
900066f6:	bfb8      	it	lt
900066f8:	3101      	addlt	r1, #1
900066fa:	1049      	asrs	r1, r1, #1
900066fc:	e7ee      	b.n	900066dc <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x28>
900066fe:	bf00      	nop

90006700 <_ZNK8touchgfx16DynamicDataGraph9getScaleXEv>:
    virtual void setScaleX(int scale, bool updateData = false);

    virtual int getScaleX() const
    {
        return AbstractDataGraph::getScaleX();
    }
90006700:	6b00      	ldr	r0, [r0, #48]	; 0x30
90006702:	4770      	bx	lr

90006704 <_ZNK8touchgfx16DynamicDataGraph9getScaleYEv>:
    virtual void setScaleY(int scale, bool updateData = false);

    virtual int getScaleY() const
    {
        return AbstractDataGraph::getScaleY();
    }
90006704:	6b40      	ldr	r0, [r0, #52]	; 0x34
90006706:	4770      	bx	lr

90006708 <_ZN15Screen2ViewBase11setupScreenEv>:
}

void Screen2ViewBase::setupScreen()
{

}
90006708:	4770      	bx	lr
9000670a:	bf00      	nop

9000670c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
9000670c:	4770      	bx	lr
9000670e:	bf00      	nop

90006710 <_ZN8touchgfx21GraphWrapAndOverwriteILs10EED1Ev>:
 * A Continuous graph. A quick way to create a GraphWrapAndOverwriteData.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class GraphWrapAndOverwrite : public GraphWrapAndOverwriteData
90006710:	4770      	bx	lr
90006712:	bf00      	nop

90006714 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
90006714:	b410      	push	{r4}
        (pobject->*pmemfun)(t1);
90006716:	68c2      	ldr	r2, [r0, #12]
    virtual void execute(T1 t1)
90006718:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
9000671a:	6844      	ldr	r4, [r0, #4]
9000671c:	f012 0f01 	tst.w	r2, #1
90006720:	eb04 0062 	add.w	r0, r4, r2, asr #1
90006724:	d103      	bne.n	9000672e <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x1a>
90006726:	689b      	ldr	r3, [r3, #8]
    }
90006728:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)(t1);
9000672c:	4718      	bx	r3
9000672e:	ea4f 0c62 	mov.w	ip, r2, asr #1
90006732:	689b      	ldr	r3, [r3, #8]
90006734:	f854 200c 	ldr.w	r2, [r4, ip]
    }
90006738:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)(t1);
9000673c:	58d3      	ldr	r3, [r2, r3]
9000673e:	4718      	bx	r3

90006740 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
90006740:	6843      	ldr	r3, [r0, #4]
90006742:	b13b      	cbz	r3, 90006754 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
90006744:	6883      	ldr	r3, [r0, #8]
90006746:	b10b      	cbz	r3, 9000674c <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0xc>
90006748:	2001      	movs	r0, #1
    }
9000674a:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
9000674c:	68c0      	ldr	r0, [r0, #12]
9000674e:	f000 0001 	and.w	r0, r0, #1
90006752:	4770      	bx	lr
90006754:	4618      	mov	r0, r3
90006756:	4770      	bx	lr

90006758 <_ZN8touchgfx21GraphWrapAndOverwriteILs10EED0Ev>:
90006758:	b510      	push	{r4, lr}
9000675a:	4604      	mov	r4, r0
9000675c:	f44f 71bc 	mov.w	r1, #376	; 0x178
90006760:	f020 fc89 	bl	90027076 <_ZdlPvj>
90006764:	4620      	mov	r0, r4
90006766:	bd10      	pop	{r4, pc}

90006768 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
90006768:	b510      	push	{r4, lr}
9000676a:	4604      	mov	r4, r0
9000676c:	2110      	movs	r1, #16
9000676e:	f020 fc82 	bl	90027076 <_ZdlPvj>
90006772:	4620      	mov	r0, r4
90006774:	bd10      	pop	{r4, pc}
90006776:	bf00      	nop

90006778 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs>:
        assert(index >= 0 && index < usedCapacity);
90006778:	1e0b      	subs	r3, r1, #0
    virtual int indexToDataPointXScaled(int16_t index) const
9000677a:	b510      	push	{r4, lr}
        assert(index >= 0 && index < usedCapacity);
9000677c:	db0d      	blt.n	9000679a <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x22>
9000677e:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
90006782:	4604      	mov	r4, r0
90006784:	429a      	cmp	r2, r3
90006786:	dd08      	ble.n	9000679a <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x22>
        return (indexToGlobalIndex(index) * xAxisFactor) + xAxisOffset;
90006788:	6803      	ldr	r3, [r0, #0]
9000678a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
9000678e:	4798      	blx	r3
90006790:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	; 0x13c
    }
90006794:	fb02 3000 	mla	r0, r2, r0, r3
90006798:	bd10      	pop	{r4, pc}
        assert(index >= 0 && index < usedCapacity);
9000679a:	4b03      	ldr	r3, [pc, #12]	; (900067a8 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x30>)
9000679c:	f240 6133 	movw	r1, #1587	; 0x633
900067a0:	4a02      	ldr	r2, [pc, #8]	; (900067ac <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x34>)
900067a2:	4803      	ldr	r0, [pc, #12]	; (900067b0 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x38>)
900067a4:	f020 fc96 	bl	900270d4 <__assert_func>
900067a8:	9002aad8 	.word	0x9002aad8
900067ac:	9002aafc 	.word	0x9002aafc
900067b0:	9002ab4c 	.word	0x9002ab4c

900067b4 <_ZN15Screen2ViewBaseD1Ev>:
Screen2ViewBase::~Screen2ViewBase()
900067b4:	4b03      	ldr	r3, [pc, #12]	; (900067c4 <_ZN15Screen2ViewBaseD1Ev+0x10>)
900067b6:	b510      	push	{r4, lr}
900067b8:	4604      	mov	r4, r0
900067ba:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
900067bc:	f00f fd5e 	bl	9001627c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
900067c0:	4620      	mov	r0, r4
900067c2:	bd10      	pop	{r4, pc}
900067c4:	9002aeb4 	.word	0x9002aeb4

900067c8 <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
900067c8:	4b07      	ldr	r3, [pc, #28]	; (900067e8 <_ZN15Screen2ViewBaseD0Ev+0x20>)
900067ca:	b500      	push	{lr}
900067cc:	b083      	sub	sp, #12
900067ce:	6003      	str	r3, [r0, #0]
900067d0:	9001      	str	r0, [sp, #4]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
900067d2:	f00f fd53 	bl	9001627c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
900067d6:	9801      	ldr	r0, [sp, #4]
900067d8:	f242 0114 	movw	r1, #8212	; 0x2014
900067dc:	f020 fc4b 	bl	90027076 <_ZdlPvj>
900067e0:	9801      	ldr	r0, [sp, #4]
900067e2:	b003      	add	sp, #12
900067e4:	f85d fb04 	ldr.w	pc, [sp], #4
900067e8:	9002aeb4 	.word	0x9002aeb4

900067ec <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
        if (alpha > 0)
900067ec:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
900067f0:	b12a      	cbz	r2, 900067fe <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0x12>
        if (visible)
900067f2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900067f6:	b112      	cbz	r2, 900067fe <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0x12>
            invalidate();
900067f8:	6803      	ldr	r3, [r0, #0]
900067fa:	695b      	ldr	r3, [r3, #20]
900067fc:	4718      	bx	r3
    }
900067fe:	4770      	bx	lr

90006800 <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &backButton)
90006800:	f500 7052 	add.w	r0, r0, #840	; 0x348
90006804:	4288      	cmp	r0, r1
90006806:	d000      	beq.n	9000680a <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xa>
90006808:	4770      	bx	lr
{
9000680a:	b508      	push	{r3, lr}
    virtual ~Screen2ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
9000680c:	f011 f9b6 	bl	90017b7c <_ZN8touchgfx11Application11getInstanceEv>
        //backButtonInteraction
        //When backButton clicked change screen to Screen1
        //Go to Screen1 with screen transition towards West
        application().gotoScreen1ScreenSlideTransitionWest();
    }
}
90006810:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen1ScreenSlideTransitionWest();
90006814:	f7ff b880 	b.w	90005918 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv>

90006818 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs>:
    virtual int indexToDataPointYScaled(int16_t index) const
90006818:	b538      	push	{r3, r4, r5, lr}
        assert(index >= 0 && index < usedCapacity);
9000681a:	1e0b      	subs	r3, r1, #0
9000681c:	db13      	blt.n	90006846 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x2e>
9000681e:	f9b0 411e 	ldrsh.w	r4, [r0, #286]	; 0x11e
90006822:	429c      	cmp	r4, r3
90006824:	dd0f      	ble.n	90006846 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x2e>
        return yValues[dataIndex(index)];
90006826:	6802      	ldr	r2, [r0, #0]
90006828:	4d0a      	ldr	r5, [pc, #40]	; (90006854 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x3c>)
9000682a:	f8d2 2180 	ldr.w	r2, [r2, #384]	; 0x180
9000682e:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
90006832:	42aa      	cmp	r2, r5
90006834:	d102      	bne.n	9000683c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x24>
    }
90006836:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
9000683a:	bd38      	pop	{r3, r4, r5, pc}
        return yValues[dataIndex(index)];
9000683c:	4790      	blx	r2
9000683e:	4603      	mov	r3, r0
    }
90006840:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
90006844:	bd38      	pop	{r3, r4, r5, pc}
        assert(index >= 0 && index < usedCapacity);
90006846:	4b04      	ldr	r3, [pc, #16]	; (90006858 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x40>)
90006848:	f240 6139 	movw	r1, #1593	; 0x639
9000684c:	4a03      	ldr	r2, [pc, #12]	; (9000685c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x44>)
9000684e:	4804      	ldr	r0, [pc, #16]	; (90006860 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x48>)
90006850:	f020 fc40 	bl	900270d4 <__assert_func>
90006854:	900066b1 	.word	0x900066b1
90006858:	9002aad8 	.word	0x9002aad8
9000685c:	9002abac 	.word	0x9002abac
90006860:	9002ab4c 	.word	0x9002ab4c

90006864 <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactorScaled()", virtual void setXAxisScaleScaled(int scale))
90006864:	b430      	push	{r4, r5}
    {
        setXAxisFactorScaled(scale);
90006866:	6804      	ldr	r4, [r0, #0]
90006868:	4d05      	ldr	r5, [pc, #20]	; (90006880 <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi+0x1c>)
9000686a:	f8d4 4148 	ldr.w	r4, [r4, #328]	; 0x148
9000686e:	42ac      	cmp	r4, r5
90006870:	d103      	bne.n	9000687a <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi+0x16>
        xAxisFactor = factor;
90006872:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    }
90006876:	bc30      	pop	{r4, r5}
90006878:	4770      	bx	lr
        setXAxisFactorScaled(scale);
9000687a:	4623      	mov	r3, r4
    }
9000687c:	bc30      	pop	{r4, r5}
        setXAxisFactorScaled(scale);
9000687e:	4718      	bx	r3
90006880:	90006691 	.word	0x90006691

90006884 <_ZNK8touchgfx16DynamicDataGraph8getScaleEv>:
        return getScaleY();
90006884:	6802      	ldr	r2, [r0, #0]
90006886:	4904      	ldr	r1, [pc, #16]	; (90006898 <_ZNK8touchgfx16DynamicDataGraph8getScaleEv+0x14>)
90006888:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
9000688c:	428a      	cmp	r2, r1
9000688e:	d101      	bne.n	90006894 <_ZNK8touchgfx16DynamicDataGraph8getScaleEv+0x10>
        return yScale;
90006890:	6b40      	ldr	r0, [r0, #52]	; 0x34
    }
90006892:	4770      	bx	lr
        return getScaleY();
90006894:	4710      	bx	r2
90006896:	bf00      	nop
90006898:	90006705 	.word	0x90006705

9000689c <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv>:
        return getGraphRangeXMinScaled();
9000689c:	6802      	ldr	r2, [r0, #0]
9000689e:	4904      	ldr	r1, [pc, #16]	; (900068b0 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv+0x14>)
900068a0:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
900068a4:	428a      	cmp	r2, r1
900068a6:	d102      	bne.n	900068ae <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv+0x12>
        return graphRangeMinX;
900068a8:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
    }
900068ac:	4770      	bx	lr
        return getGraphRangeXMinScaled();
900068ae:	4710      	bx	r2
900068b0:	90006511 	.word	0x90006511

900068b4 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv>:
        return getGraphRangeXMaxScaled();
900068b4:	6802      	ldr	r2, [r0, #0]
900068b6:	4904      	ldr	r1, [pc, #16]	; (900068c8 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv+0x14>)
900068b8:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
900068bc:	428a      	cmp	r2, r1
900068be:	d102      	bne.n	900068c6 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv+0x12>
        return graphRangeMaxX;
900068c0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    }
900068c4:	4770      	bx	lr
        return getGraphRangeXMaxScaled();
900068c6:	4710      	bx	r2
900068c8:	90006569 	.word	0x90006569

900068cc <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv>:
    /// @endcond

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorScaled()", virtual int getXAxisScaleScaled() const)
    {
        return getXAxisFactorScaled();
900068cc:	6802      	ldr	r2, [r0, #0]
900068ce:	4904      	ldr	r1, [pc, #16]	; (900068e0 <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv+0x14>)
900068d0:	f8d2 215c 	ldr.w	r2, [r2, #348]	; 0x15c
900068d4:	428a      	cmp	r2, r1
900068d6:	d102      	bne.n	900068de <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv+0x12>
        return xAxisFactor;
900068d8:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
    }
900068dc:	4770      	bx	lr
        return getXAxisFactorScaled();
900068de:	4710      	bx	r2
900068e0:	90006699 	.word	0x90006699

900068e4 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>:
        setXAxisOffsetScaled(int2scaledX(offset));
900068e4:	6802      	ldr	r2, [r0, #0]
    virtual void setXAxisOffset(int offset)
900068e6:	b410      	push	{r4}
        return i * scale;
900068e8:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setXAxisOffsetScaled(int2scaledX(offset));
900068ea:	f8d2 2168 	ldr.w	r2, [r2, #360]	; 0x168
        return i * scale;
900068ee:	fb04 f101 	mul.w	r1, r4, r1
900068f2:	4c05      	ldr	r4, [pc, #20]	; (90006908 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi+0x24>)
900068f4:	42a2      	cmp	r2, r4
900068f6:	d104      	bne.n	90006902 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi+0x1e>
    }
900068f8:	f85d 4b04 	ldr.w	r4, [sp], #4
        xAxisOffset = offset;
900068fc:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    }
90006900:	4770      	bx	lr
90006902:	f85d 4b04 	ldr.w	r4, [sp], #4
        setXAxisOffsetScaled(int2scaledX(offset));
90006906:	4710      	bx	r2
90006908:	900066a1 	.word	0x900066a1

9000690c <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf>:
        const float fs = f * (float)scale;
9000690c:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setXAxisOffsetScaled(float2scaledX(offset));
90006910:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
90006912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisOffsetScaled(float2scaledX(offset));
90006916:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
        const float fs = f * (float)scale;
9000691a:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
9000691e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
90006922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90006926:	da17      	bge.n	90006958 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x4c>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006928:	eefd 7ac0 	vcvt.s32.f32	s15, s0
9000692c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
90006930:	eef8 6ae7 	vcvt.f32.s32	s13, s15
90006934:	ee17 3a90 	vmov	r3, s15
90006938:	3b01      	subs	r3, #1
9000693a:	ee30 0a66 	vsub.f32	s0, s0, s13
9000693e:	ee30 0a07 	vadd.f32	s0, s0, s14
90006942:	eebd 0ac0 	vcvt.s32.f32	s0, s0
90006946:	ee10 1a10 	vmov	r1, s0
9000694a:	4419      	add	r1, r3
9000694c:	4b08      	ldr	r3, [pc, #32]	; (90006970 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x64>)
9000694e:	429a      	cmp	r2, r3
90006950:	d10d      	bne.n	9000696e <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x62>
        xAxisOffset = offset;
90006952:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    }
90006956:	4770      	bx	lr
            return (int)(fs + 0.5f);
90006958:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
9000695c:	4b04      	ldr	r3, [pc, #16]	; (90006970 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x64>)
9000695e:	429a      	cmp	r2, r3
90006960:	ee30 0a27 	vadd.f32	s0, s0, s15
90006964:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006968:	ee17 1a90 	vmov	r1, s15
9000696c:	d0f1      	beq.n	90006952 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x46>
        setXAxisOffsetScaled(float2scaledX(offset));
9000696e:	4710      	bx	r2
90006970:	900066a1 	.word	0x900066a1

90006974 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv>:
        return scaled2intX(getXAxisOffsetScaled());
90006974:	6803      	ldr	r3, [r0, #0]
90006976:	4a12      	ldr	r2, [pc, #72]	; (900069c0 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x4c>)
90006978:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
9000697c:	4293      	cmp	r3, r2
    virtual int getXAxisOffsetAsInt() const
9000697e:	b510      	push	{r4, lr}
90006980:	4604      	mov	r4, r0
90006982:	d11a      	bne.n	900069ba <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x46>
        return xAxisOffset;
90006984:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
        if (i >= 0)
90006988:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
9000698a:	6b22      	ldr	r2, [r4, #48]	; 0x30
        if (i >= 0)
9000698c:	da0c      	bge.n	900069a8 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x34>
        return -(((-i * 2 + scale - 1) / scale) / 2);
9000698e:	ebc0 70c0 	rsb	r0, r0, r0, lsl #31
90006992:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90006996:	3801      	subs	r0, #1
90006998:	fb90 f0f2 	sdiv	r0, r0, r2
9000699c:	2800      	cmp	r0, #0
9000699e:	bfb8      	it	lt
900069a0:	3001      	addlt	r0, #1
900069a2:	1040      	asrs	r0, r0, #1
900069a4:	4240      	negs	r0, r0
    }
900069a6:	bd10      	pop	{r4, pc}
            return ((i * 2 + scale) / scale) / 2;
900069a8:	eb02 0040 	add.w	r0, r2, r0, lsl #1
900069ac:	fb90 f0f2 	sdiv	r0, r0, r2
900069b0:	2800      	cmp	r0, #0
900069b2:	bfb8      	it	lt
900069b4:	3001      	addlt	r0, #1
900069b6:	1040      	asrs	r0, r0, #1
    }
900069b8:	bd10      	pop	{r4, pc}
        return scaled2intX(getXAxisOffsetScaled());
900069ba:	4798      	blx	r3
900069bc:	e7e4      	b.n	90006988 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x14>
900069be:	bf00      	nop
900069c0:	900066a9 	.word	0x900066a9

900069c4 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv>:
        return scaled2floatX(getXAxisOffsetScaled());
900069c4:	6803      	ldr	r3, [r0, #0]
900069c6:	4a0b      	ldr	r2, [pc, #44]	; (900069f4 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv+0x30>)
900069c8:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
900069cc:	4293      	cmp	r3, r2
    virtual float getXAxisOffsetAsFloat() const
900069ce:	b510      	push	{r4, lr}
900069d0:	4604      	mov	r4, r0
900069d2:	d10a      	bne.n	900069ea <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv+0x26>
        return xAxisOffset;
900069d4:	edd0 7a50 	vldr	s15, [r0, #320]	; 0x140
        return (float)i / (float)scale;
900069d8:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
900069dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900069e0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
900069e4:	ee87 0a80 	vdiv.f32	s0, s15, s0
900069e8:	bd10      	pop	{r4, pc}
        return scaled2floatX(getXAxisOffsetScaled());
900069ea:	4798      	blx	r3
900069ec:	ee07 0a90 	vmov	s15, r0
900069f0:	e7f2      	b.n	900069d8 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv+0x14>
900069f2:	bf00      	nop
900069f4:	900066a9 	.word	0x900066a9

900069f8 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>:
        setXAxisFactorScaled(int2scaledX(factor));
900069f8:	6802      	ldr	r2, [r0, #0]
    virtual void setXAxisFactor(int factor)
900069fa:	b410      	push	{r4}
        return i * scale;
900069fc:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setXAxisFactorScaled(int2scaledX(factor));
900069fe:	f8d2 2148 	ldr.w	r2, [r2, #328]	; 0x148
        return i * scale;
90006a02:	fb04 f101 	mul.w	r1, r4, r1
90006a06:	4c05      	ldr	r4, [pc, #20]	; (90006a1c <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi+0x24>)
90006a08:	42a2      	cmp	r2, r4
90006a0a:	d104      	bne.n	90006a16 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi+0x1e>
    }
90006a0c:	f85d 4b04 	ldr.w	r4, [sp], #4
        xAxisFactor = factor;
90006a10:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    }
90006a14:	4770      	bx	lr
90006a16:	f85d 4b04 	ldr.w	r4, [sp], #4
        setXAxisFactorScaled(int2scaledX(factor));
90006a1a:	4710      	bx	r2
90006a1c:	90006691 	.word	0x90006691

90006a20 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf>:
        const float fs = f * (float)scale;
90006a20:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setXAxisFactorScaled(float2scaledX(factor));
90006a24:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
90006a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisFactorScaled(float2scaledX(factor));
90006a2a:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
        const float fs = f * (float)scale;
90006a2e:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
90006a32:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
90006a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90006a3a:	da17      	bge.n	90006a6c <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x4c>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006a3c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006a40:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
90006a44:	eef8 6ae7 	vcvt.f32.s32	s13, s15
90006a48:	ee17 3a90 	vmov	r3, s15
90006a4c:	3b01      	subs	r3, #1
90006a4e:	ee30 0a66 	vsub.f32	s0, s0, s13
90006a52:	ee30 0a07 	vadd.f32	s0, s0, s14
90006a56:	eebd 0ac0 	vcvt.s32.f32	s0, s0
90006a5a:	ee10 1a10 	vmov	r1, s0
90006a5e:	4419      	add	r1, r3
90006a60:	4b08      	ldr	r3, [pc, #32]	; (90006a84 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x64>)
90006a62:	429a      	cmp	r2, r3
90006a64:	d10d      	bne.n	90006a82 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x62>
        xAxisFactor = factor;
90006a66:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    }
90006a6a:	4770      	bx	lr
            return (int)(fs + 0.5f);
90006a6c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
90006a70:	4b04      	ldr	r3, [pc, #16]	; (90006a84 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x64>)
90006a72:	429a      	cmp	r2, r3
90006a74:	ee30 0a27 	vadd.f32	s0, s0, s15
90006a78:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006a7c:	ee17 1a90 	vmov	r1, s15
90006a80:	d0f1      	beq.n	90006a66 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x46>
        setXAxisFactorScaled(float2scaledX(factor));
90006a82:	4710      	bx	r2
90006a84:	90006691 	.word	0x90006691

90006a88 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv>:
        return scaled2intX(getXAxisFactorScaled());
90006a88:	6803      	ldr	r3, [r0, #0]
90006a8a:	4a12      	ldr	r2, [pc, #72]	; (90006ad4 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x4c>)
90006a8c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
90006a90:	4293      	cmp	r3, r2
    virtual int getXAxisFactorAsInt() const
90006a92:	b510      	push	{r4, lr}
90006a94:	4604      	mov	r4, r0
90006a96:	d11a      	bne.n	90006ace <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x46>
        return xAxisFactor;
90006a98:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
        if (i >= 0)
90006a9c:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
90006a9e:	6b22      	ldr	r2, [r4, #48]	; 0x30
        if (i >= 0)
90006aa0:	da0c      	bge.n	90006abc <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x34>
        return -(((-i * 2 + scale - 1) / scale) / 2);
90006aa2:	ebc0 70c0 	rsb	r0, r0, r0, lsl #31
90006aa6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90006aaa:	3801      	subs	r0, #1
90006aac:	fb90 f0f2 	sdiv	r0, r0, r2
90006ab0:	2800      	cmp	r0, #0
90006ab2:	bfb8      	it	lt
90006ab4:	3001      	addlt	r0, #1
90006ab6:	1040      	asrs	r0, r0, #1
90006ab8:	4240      	negs	r0, r0
    }
90006aba:	bd10      	pop	{r4, pc}
            return ((i * 2 + scale) / scale) / 2;
90006abc:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90006ac0:	fb90 f0f2 	sdiv	r0, r0, r2
90006ac4:	2800      	cmp	r0, #0
90006ac6:	bfb8      	it	lt
90006ac8:	3001      	addlt	r0, #1
90006aca:	1040      	asrs	r0, r0, #1
    }
90006acc:	bd10      	pop	{r4, pc}
        return scaled2intX(getXAxisFactorScaled());
90006ace:	4798      	blx	r3
90006ad0:	e7e4      	b.n	90006a9c <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x14>
90006ad2:	bf00      	nop
90006ad4:	90006699 	.word	0x90006699

90006ad8 <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv>:
        return scaled2floatX(getXAxisFactorScaled());
90006ad8:	6803      	ldr	r3, [r0, #0]
90006ada:	4a0b      	ldr	r2, [pc, #44]	; (90006b08 <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv+0x30>)
90006adc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
90006ae0:	4293      	cmp	r3, r2
    virtual float getXAxisFactorAsFloat() const
90006ae2:	b510      	push	{r4, lr}
90006ae4:	4604      	mov	r4, r0
90006ae6:	d10a      	bne.n	90006afe <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv+0x26>
        return xAxisFactor;
90006ae8:	edd0 7a4f 	vldr	s15, [r0, #316]	; 0x13c
        return (float)i / (float)scale;
90006aec:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
90006af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90006af4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
90006af8:	ee87 0a80 	vdiv.f32	s0, s15, s0
90006afc:	bd10      	pop	{r4, pc}
        return scaled2floatX(getXAxisFactorScaled());
90006afe:	4798      	blx	r3
90006b00:	ee07 0a90 	vmov	s15, r0
90006b04:	e7f2      	b.n	90006aec <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv+0x14>
90006b06:	bf00      	nop
90006b08:	90006699 	.word	0x90006699

90006b0c <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi>:
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(int scale))
90006b0c:	b470      	push	{r4, r5, r6}
        setXAxisFactor(scale);
90006b0e:	6804      	ldr	r4, [r0, #0]
90006b10:	4e0b      	ldr	r6, [pc, #44]	; (90006b40 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi+0x34>)
90006b12:	f8d4 513c 	ldr.w	r5, [r4, #316]	; 0x13c
90006b16:	42b5      	cmp	r5, r6
90006b18:	d10c      	bne.n	90006b34 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi+0x28>
90006b1a:	460a      	mov	r2, r1
        return i * scale;
90006b1c:	6b01      	ldr	r1, [r0, #48]	; 0x30
        setXAxisFactorScaled(int2scaledX(factor));
90006b1e:	f8d4 4148 	ldr.w	r4, [r4, #328]	; 0x148
        return i * scale;
90006b22:	fb02 f101 	mul.w	r1, r2, r1
90006b26:	4a07      	ldr	r2, [pc, #28]	; (90006b44 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi+0x38>)
90006b28:	4294      	cmp	r4, r2
90006b2a:	d106      	bne.n	90006b3a <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi+0x2e>
        xAxisFactor = factor;
90006b2c:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    }
90006b30:	bc70      	pop	{r4, r5, r6}
90006b32:	4770      	bx	lr
        setXAxisFactor(scale);
90006b34:	462b      	mov	r3, r5
    }
90006b36:	bc70      	pop	{r4, r5, r6}
        setXAxisFactor(scale);
90006b38:	4718      	bx	r3
        setXAxisFactorScaled(int2scaledX(factor));
90006b3a:	4623      	mov	r3, r4
    }
90006b3c:	bc70      	pop	{r4, r5, r6}
        setXAxisFactorScaled(int2scaledX(factor));
90006b3e:	4718      	bx	r3
90006b40:	900069f9 	.word	0x900069f9
90006b44:	90006691 	.word	0x90006691

90006b48 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv>:
        return getXAxisFactorAsFloat();
90006b48:	6803      	ldr	r3, [r0, #0]
90006b4a:	490e      	ldr	r1, [pc, #56]	; (90006b84 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv+0x3c>)
90006b4c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
90006b50:	428a      	cmp	r2, r1
90006b52:	d111      	bne.n	90006b78 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv+0x30>
        return scaled2floatX(getXAxisFactorScaled());
90006b54:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
90006b58:	4a0b      	ldr	r2, [pc, #44]	; (90006b88 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv+0x40>)
90006b5a:	4293      	cmp	r3, r2
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsFloat()", virtual float getXAxisScaleAsFloat() const)
90006b5c:	b510      	push	{r4, lr}
90006b5e:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisFactorScaled());
90006b60:	d10b      	bne.n	90006b7a <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv+0x32>
        return xAxisFactor;
90006b62:	edd0 7a4f 	vldr	s15, [r0, #316]	; 0x13c
        return (float)i / (float)scale;
90006b66:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
90006b6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90006b6e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90006b72:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
90006b76:	bd10      	pop	{r4, pc}
        return getXAxisFactorAsFloat();
90006b78:	4710      	bx	r2
        return scaled2floatX(getXAxisFactorScaled());
90006b7a:	4798      	blx	r3
90006b7c:	ee07 0a90 	vmov	s15, r0
90006b80:	e7f1      	b.n	90006b66 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv+0x1e>
90006b82:	bf00      	nop
90006b84:	90006ad9 	.word	0x90006ad9
90006b88:	90006699 	.word	0x90006699

90006b8c <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es>:
        return valueToScreenXQ5(int2scaledX(index));
    }

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
    {
        return valueToScreenYQ5(yValues[dataIndex(index)]);
90006b8c:	6802      	ldr	r2, [r0, #0]
90006b8e:	f8df c090 	ldr.w	ip, [pc, #144]	; 90006c20 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es+0x94>
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
90006b92:	b5f0      	push	{r4, r5, r6, r7, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
90006b94:	f8d2 6180 	ldr.w	r6, [r2, #384]	; 0x180
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
90006b98:	b085      	sub	sp, #20
90006b9a:	4604      	mov	r4, r0
        return valueToScreenYQ5(yValues[dataIndex(index)]);
90006b9c:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
90006ba0:	4566      	cmp	r6, ip
90006ba2:	f8d2 5118 	ldr.w	r5, [r2, #280]	; 0x118
90006ba6:	d136      	bne.n	90006c16 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es+0x8a>
90006ba8:	460b      	mov	r3, r1
90006baa:	4a1c      	ldr	r2, [pc, #112]	; (90006c1c <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es+0x90>)
90006bac:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
90006bb0:	4295      	cmp	r5, r2
90006bb2:	d12a      	bne.n	90006c0a <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es+0x7e>
        return graphArea.getHeight() - (topPadding + bottomPadding);
90006bb4:	f9b4 c114 	ldrsh.w	ip, [r4, #276]	; 0x114
90006bb8:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
90006bbc:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
90006bc0:	4462      	add	r2, ip
90006bc2:	1a9b      	subs	r3, r3, r2
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
90006bc4:	e9d4 524d 	ldrd	r5, r2, [r4, #308]	; 0x134
90006bc8:	b21c      	sxth	r4, r3
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
90006bca:	ab03      	add	r3, sp, #12
90006bcc:	1b52      	subs	r2, r2, r5
90006bce:	1b48      	subs	r0, r1, r5
90006bd0:	44a4      	add	ip, r4
90006bd2:	1e61      	subs	r1, r4, #1
90006bd4:	9201      	str	r2, [sp, #4]
90006bd6:	f10c 3cff 	add.w	ip, ip, #4294967295
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
90006bda:	ea4f 144c 	mov.w	r4, ip, lsl #5
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
90006bde:	f012 fa04 	bl	90018fea <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
90006be2:	1e05      	subs	r5, r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006be4:	9903      	ldr	r1, [sp, #12]
90006be6:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
90006bea:	9a01      	ldr	r2, [sp, #4]
90006bec:	db06      	blt.n	90006bfc <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es+0x70>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006bee:	f012 fa1b 	bl	90019028 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
90006bf2:	eb00 1045 	add.w	r0, r0, r5, lsl #5
            return Q5(v - q5.v);
90006bf6:	1a20      	subs	r0, r4, r0
    }
90006bf8:	b005      	add	sp, #20
90006bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006bfc:	f012 fa14 	bl	90019028 <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
90006c00:	ebc0 1045 	rsb	r0, r0, r5, lsl #5
90006c04:	1a20      	subs	r0, r4, r0
90006c06:	b005      	add	sp, #20
90006c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
90006c0a:	4620      	mov	r0, r4
90006c0c:	462b      	mov	r3, r5
    }
90006c0e:	b005      	add	sp, #20
90006c10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
90006c14:	4718      	bx	r3
90006c16:	47b0      	blx	r6
90006c18:	4603      	mov	r3, r0
90006c1a:	e7c6      	b.n	90006baa <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es+0x1e>
90006c1c:	90006d75 	.word	0x90006d75
90006c20:	900066b1 	.word	0x900066b1

90006c24 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv>:
        return getXAxisFactorAsInt();
90006c24:	6803      	ldr	r3, [r0, #0]
90006c26:	4915      	ldr	r1, [pc, #84]	; (90006c7c <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv+0x58>)
90006c28:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
90006c2c:	428a      	cmp	r2, r1
90006c2e:	d121      	bne.n	90006c74 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv+0x50>
        return scaled2intX(getXAxisFactorScaled());
90006c30:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
90006c34:	4a12      	ldr	r2, [pc, #72]	; (90006c80 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv+0x5c>)
90006c36:	4293      	cmp	r3, r2
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsInt()", virtual int getXAxisScaleAsInt() const)
90006c38:	b510      	push	{r4, lr}
90006c3a:	4604      	mov	r4, r0
        return scaled2intX(getXAxisFactorScaled());
90006c3c:	d11b      	bne.n	90006c76 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv+0x52>
        return xAxisFactor;
90006c3e:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
        if (i >= 0)
90006c42:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
90006c44:	6b22      	ldr	r2, [r4, #48]	; 0x30
        if (i >= 0)
90006c46:	da0c      	bge.n	90006c62 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv+0x3e>
        return -(((-i * 2 + scale - 1) / scale) / 2);
90006c48:	ebc0 70c0 	rsb	r0, r0, r0, lsl #31
90006c4c:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90006c50:	3801      	subs	r0, #1
90006c52:	fb90 f0f2 	sdiv	r0, r0, r2
90006c56:	2800      	cmp	r0, #0
90006c58:	bfb8      	it	lt
90006c5a:	3001      	addlt	r0, #1
90006c5c:	1040      	asrs	r0, r0, #1
90006c5e:	4240      	negs	r0, r0
    }
90006c60:	bd10      	pop	{r4, pc}
            return ((i * 2 + scale) / scale) / 2;
90006c62:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90006c66:	fb90 f0f2 	sdiv	r0, r0, r2
90006c6a:	2800      	cmp	r0, #0
90006c6c:	bfb8      	it	lt
90006c6e:	3001      	addlt	r0, #1
90006c70:	1040      	asrs	r0, r0, #1
    }
90006c72:	bd10      	pop	{r4, pc}
        return getXAxisFactorAsInt();
90006c74:	4710      	bx	r2
        return scaled2intX(getXAxisFactorScaled());
90006c76:	4798      	blx	r3
90006c78:	e7e3      	b.n	90006c42 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv+0x1e>
90006c7a:	bf00      	nop
90006c7c:	90006a89 	.word	0x90006a89
90006c80:	90006699 	.word	0x90006699

90006c84 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf>:
        setXAxisFactor(scale);
90006c84:	6802      	ldr	r2, [r0, #0]
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(float scale))
90006c86:	b410      	push	{r4}
        setXAxisFactor(scale);
90006c88:	f8d2 1144 	ldr.w	r1, [r2, #324]	; 0x144
90006c8c:	4c1e      	ldr	r4, [pc, #120]	; (90006d08 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x84>)
90006c8e:	42a1      	cmp	r1, r4
90006c90:	d137      	bne.n	90006d02 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x7e>
        const float fs = f * (float)scale;
90006c92:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
90006c96:	4603      	mov	r3, r0
        setXAxisFactorScaled(float2scaledX(factor));
90006c98:	f8d2 4148 	ldr.w	r4, [r2, #328]	; 0x148
        const float fs = f * (float)scale;
90006c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90006ca0:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
90006ca4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
90006ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90006cac:	da19      	bge.n	90006ce2 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x5e>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006cae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006cb2:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
90006cb6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
90006cba:	ee17 2a90 	vmov	r2, s15
90006cbe:	3a01      	subs	r2, #1
90006cc0:	ee30 0a66 	vsub.f32	s0, s0, s13
90006cc4:	ee30 0a07 	vadd.f32	s0, s0, s14
90006cc8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
90006ccc:	ee10 1a10 	vmov	r1, s0
90006cd0:	4411      	add	r1, r2
90006cd2:	4a0e      	ldr	r2, [pc, #56]	; (90006d0c <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x88>)
90006cd4:	4294      	cmp	r4, r2
90006cd6:	d10f      	bne.n	90006cf8 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x74>
    }
90006cd8:	f85d 4b04 	ldr.w	r4, [sp], #4
        xAxisFactor = factor;
90006cdc:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
    }
90006ce0:	4770      	bx	lr
            return (int)(fs + 0.5f);
90006ce2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
90006ce6:	4a09      	ldr	r2, [pc, #36]	; (90006d0c <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x88>)
90006ce8:	4294      	cmp	r4, r2
90006cea:	ee30 0a27 	vadd.f32	s0, s0, s15
90006cee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006cf2:	ee17 1a90 	vmov	r1, s15
90006cf6:	d0ef      	beq.n	90006cd8 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x54>
        setXAxisFactorScaled(float2scaledX(factor));
90006cf8:	4618      	mov	r0, r3
90006cfa:	4623      	mov	r3, r4
    }
90006cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
        setXAxisFactorScaled(float2scaledX(factor));
90006d00:	4718      	bx	r3
    }
90006d02:	f85d 4b04 	ldr.w	r4, [sp], #4
        setXAxisFactor(scale);
90006d06:	4708      	bx	r1
90006d08:	90006a21 	.word	0x90006a21
90006d0c:	90006691 	.word	0x90006691

90006d10 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
90006d10:	b530      	push	{r4, r5, lr}
        return graphArea.getWidth() - (leftPadding + rightPadding);
90006d12:	f8b0 2116 	ldrh.w	r2, [r0, #278]	; 0x116
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
90006d16:	4604      	mov	r4, r0
        return graphArea.getWidth() - (leftPadding + rightPadding);
90006d18:	f8b0 0118 	ldrh.w	r0, [r0, #280]	; 0x118
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
90006d1c:	b085      	sub	sp, #20
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
90006d1e:	f8d4 512c 	ldr.w	r5, [r4, #300]	; 0x12c
        return graphArea.getWidth() - (leftPadding + rightPadding);
90006d22:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
90006d26:	4402      	add	r2, r0
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
90006d28:	1b48      	subs	r0, r1, r5
90006d2a:	1a99      	subs	r1, r3, r2
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
90006d2c:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
90006d30:	ab03      	add	r3, sp, #12
90006d32:	b209      	sxth	r1, r1
90006d34:	1b52      	subs	r2, r2, r5
90006d36:	3901      	subs	r1, #1
90006d38:	9201      	str	r2, [sp, #4]
90006d3a:	f012 f956 	bl	90018fea <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
90006d3e:	1e05      	subs	r5, r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006d40:	9903      	ldr	r1, [sp, #12]
90006d42:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
90006d46:	9a01      	ldr	r2, [sp, #4]
90006d48:	db09      	blt.n	90006d5e <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei+0x4e>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006d4a:	f012 f96d 	bl	90019028 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
90006d4e:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
90006d52:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    }
90006d56:	eb00 1043 	add.w	r0, r0, r3, lsl #5
90006d5a:	b005      	add	sp, #20
90006d5c:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006d5e:	f012 f963 	bl	90019028 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
90006d62:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
            return Q5(v - q5.v);
90006d66:	ebc0 1045 	rsb	r0, r0, r5, lsl #5
90006d6a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
90006d6e:	b005      	add	sp, #20
90006d70:	bd30      	pop	{r4, r5, pc}
90006d72:	bf00      	nop

90006d74 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
90006d74:	f9b0 c114 	ldrsh.w	ip, [r0, #276]	; 0x114
90006d78:	f8b0 311a 	ldrh.w	r3, [r0, #282]	; 0x11a
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
90006d7c:	b530      	push	{r4, r5, lr}
        return graphArea.getHeight() - (topPadding + bottomPadding);
90006d7e:	4463      	add	r3, ip
90006d80:	f8b0 4042 	ldrh.w	r4, [r0, #66]	; 0x42
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
90006d84:	b085      	sub	sp, #20
        return graphArea.getHeight() - (topPadding + bottomPadding);
90006d86:	1ae4      	subs	r4, r4, r3
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
90006d88:	b224      	sxth	r4, r4
90006d8a:	e9d0 324d 	ldrd	r3, r2, [r0, #308]	; 0x134
90006d8e:	44a4      	add	ip, r4
90006d90:	1ad2      	subs	r2, r2, r3
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
90006d92:	1ac8      	subs	r0, r1, r3
90006d94:	f10c 3cff 	add.w	ip, ip, #4294967295
90006d98:	1e61      	subs	r1, r4, #1
90006d9a:	ab03      	add	r3, sp, #12
90006d9c:	9201      	str	r2, [sp, #4]
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
90006d9e:	ea4f 144c 	mov.w	r4, ip, lsl #5
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
90006da2:	f012 f922 	bl	90018fea <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
90006da6:	1e05      	subs	r5, r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006da8:	9903      	ldr	r1, [sp, #12]
90006daa:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
90006dae:	9a01      	ldr	r2, [sp, #4]
90006db0:	db06      	blt.n	90006dc0 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei+0x4c>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006db2:	f012 f939 	bl	90019028 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
90006db6:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    }
90006dba:	1a20      	subs	r0, r4, r0
90006dbc:	b005      	add	sp, #20
90006dbe:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006dc0:	f012 f932 	bl	90019028 <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
90006dc4:	ebc0 1045 	rsb	r0, r0, r5, lsl #5
90006dc8:	1a20      	subs	r0, r4, r0
90006dca:	b005      	add	sp, #20
90006dcc:	bd30      	pop	{r4, r5, pc}
90006dce:	bf00      	nop

90006dd0 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es>:
        return i * scale;
90006dd0:	6b02      	ldr	r2, [r0, #48]	; 0x30
        return valueToScreenXQ5(int2scaledX(index));
90006dd2:	6803      	ldr	r3, [r0, #0]
        return i * scale;
90006dd4:	fb02 f101 	mul.w	r1, r2, r1
90006dd8:	4a1b      	ldr	r2, [pc, #108]	; (90006e48 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es+0x78>)
        return valueToScreenXQ5(int2scaledX(index));
90006dda:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
        return i * scale;
90006dde:	4293      	cmp	r3, r2
90006de0:	d130      	bne.n	90006e44 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es+0x74>
        return graphArea.getWidth() - (leftPadding + rightPadding);
90006de2:	f8b0 2116 	ldrh.w	r2, [r0, #278]	; 0x116
    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
90006de6:	b530      	push	{r4, r5, lr}
90006de8:	4604      	mov	r4, r0
        return graphArea.getWidth() - (leftPadding + rightPadding);
90006dea:	f8b0 0118 	ldrh.w	r0, [r0, #280]	; 0x118
    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
90006dee:	b085      	sub	sp, #20
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
90006df0:	f8d4 512c 	ldr.w	r5, [r4, #300]	; 0x12c
        return graphArea.getWidth() - (leftPadding + rightPadding);
90006df4:	4402      	add	r2, r0
90006df6:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
90006dfa:	1b48      	subs	r0, r1, r5
90006dfc:	1a99      	subs	r1, r3, r2
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
90006dfe:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
90006e02:	ab03      	add	r3, sp, #12
90006e04:	b209      	sxth	r1, r1
90006e06:	1b52      	subs	r2, r2, r5
90006e08:	3901      	subs	r1, #1
90006e0a:	9201      	str	r2, [sp, #4]
90006e0c:	f012 f8ed 	bl	90018fea <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
90006e10:	1e05      	subs	r5, r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006e12:	9903      	ldr	r1, [sp, #12]
90006e14:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
90006e18:	9a01      	ldr	r2, [sp, #4]
90006e1a:	db09      	blt.n	90006e30 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es+0x60>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006e1c:	f012 f904 	bl	90019028 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
90006e20:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
90006e24:	eb00 1045 	add.w	r0, r0, r5, lsl #5
90006e28:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    }
90006e2c:	b005      	add	sp, #20
90006e2e:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006e30:	f012 f8fa 	bl	90019028 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
90006e34:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
            return Q5(v - q5.v);
90006e38:	ebc0 1045 	rsb	r0, r0, r5, lsl #5
            return Q5(v + q5.v);
90006e3c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
90006e40:	b005      	add	sp, #20
90006e42:	bd30      	pop	{r4, r5, pc}
        return valueToScreenXQ5(int2scaledX(index));
90006e44:	4718      	bx	r3
90006e46:	bf00      	nop
90006e48:	90006d11 	.word	0x90006d11

90006e4c <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
90006e4c:	6803      	ldr	r3, [r0, #0]
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
90006e4e:	b470      	push	{r4, r5, r6}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
90006e50:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
90006e54:	4e15      	ldr	r6, [pc, #84]	; (90006eac <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi+0x60>)
        return int2scaled(i, xScale);
90006e56:	6b05      	ldr	r5, [r0, #48]	; 0x30
        return i * scale;
90006e58:	42b4      	cmp	r4, r6
90006e5a:	fb05 f202 	mul.w	r2, r5, r2
90006e5e:	d122      	bne.n	90006ea6 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi+0x5a>
        if (i >= 0)
90006e60:	2a00      	cmp	r2, #0
90006e62:	4684      	mov	ip, r0
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006e64:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
        if (i >= 0)
90006e68:	da14      	bge.n	90006e94 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi+0x48>
        return -(((-i * 2 + scale - 1) / scale) / 2);
90006e6a:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
90006e6e:	eb05 0342 	add.w	r3, r5, r2, lsl #1
90006e72:	3b01      	subs	r3, #1
90006e74:	fb93 f3f5 	sdiv	r3, r3, r5
90006e78:	2b00      	cmp	r3, #0
90006e7a:	bfb8      	it	lt
90006e7c:	3301      	addlt	r3, #1
90006e7e:	105b      	asrs	r3, r3, #1
90006e80:	425b      	negs	r3, r3
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006e82:	f9bc 211e 	ldrsh.w	r2, [ip, #286]	; 0x11e
90006e86:	4259      	negs	r1, r3
90006e88:	4660      	mov	r0, ip
90006e8a:	3a01      	subs	r2, #1
90006e8c:	441a      	add	r2, r3
90006e8e:	4623      	mov	r3, r4
    }
90006e90:	bc70      	pop	{r4, r5, r6}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006e92:	4718      	bx	r3
            return ((i * 2 + scale) / scale) / 2;
90006e94:	eb05 0342 	add.w	r3, r5, r2, lsl #1
90006e98:	fb93 f3f5 	sdiv	r3, r3, r5
90006e9c:	2b00      	cmp	r3, #0
90006e9e:	bfb8      	it	lt
90006ea0:	3301      	addlt	r3, #1
90006ea2:	105b      	asrs	r3, r3, #1
90006ea4:	e7ed      	b.n	90006e82 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi+0x36>
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
90006ea6:	4623      	mov	r3, r4
    }
90006ea8:	bc70      	pop	{r4, r5, r6}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
90006eaa:	4718      	bx	r3
90006eac:	90006645 	.word	0x90006645

90006eb0 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
    virtual void setGraphRangeXAuto(bool showYaxis, float margin)
90006eb0:	b470      	push	{r4, r5, r6}
        return float2scaled(f, xScale);
90006eb2:	6b05      	ldr	r5, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
90006eb4:	6804      	ldr	r4, [r0, #0]
        const float fs = f * (float)scale;
90006eb6:	ee07 5a90 	vmov	s15, r5
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
90006eba:	f8d4 60b0 	ldr.w	r6, [r4, #176]	; 0xb0
        const float fs = f * (float)scale;
90006ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90006ec2:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
90006ec6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
90006eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90006ece:	da35      	bge.n	90006f3c <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x8c>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006ed0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006ed4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
90006ed8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
90006edc:	ee17 3a90 	vmov	r3, s15
90006ee0:	3b01      	subs	r3, #1
90006ee2:	ee30 0a66 	vsub.f32	s0, s0, s13
90006ee6:	ee30 0a07 	vadd.f32	s0, s0, s14
90006eea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
90006eee:	ee10 2a10 	vmov	r2, s0
90006ef2:	441a      	add	r2, r3
90006ef4:	4b18      	ldr	r3, [pc, #96]	; (90006f58 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0xa8>)
90006ef6:	429e      	cmp	r6, r3
90006ef8:	d12b      	bne.n	90006f52 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0xa2>
        if (i >= 0)
90006efa:	2a00      	cmp	r2, #0
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006efc:	f8d4 40a4 	ldr.w	r4, [r4, #164]	; 0xa4
        if (i >= 0)
90006f00:	da13      	bge.n	90006f2a <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x7a>
        return -(((-i * 2 + scale - 1) / scale) / 2);
90006f02:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
90006f06:	eb05 0342 	add.w	r3, r5, r2, lsl #1
90006f0a:	3b01      	subs	r3, #1
90006f0c:	fb93 f3f5 	sdiv	r3, r3, r5
90006f10:	2b00      	cmp	r3, #0
90006f12:	bfb8      	it	lt
90006f14:	3301      	addlt	r3, #1
90006f16:	105b      	asrs	r3, r3, #1
90006f18:	425b      	negs	r3, r3
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006f1a:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
90006f1e:	4259      	negs	r1, r3
90006f20:	3a01      	subs	r2, #1
90006f22:	441a      	add	r2, r3
90006f24:	4623      	mov	r3, r4
    }
90006f26:	bc70      	pop	{r4, r5, r6}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006f28:	4718      	bx	r3
            return ((i * 2 + scale) / scale) / 2;
90006f2a:	eb05 0342 	add.w	r3, r5, r2, lsl #1
90006f2e:	fb93 f3f5 	sdiv	r3, r3, r5
90006f32:	2b00      	cmp	r3, #0
90006f34:	bfb8      	it	lt
90006f36:	3301      	addlt	r3, #1
90006f38:	105b      	asrs	r3, r3, #1
90006f3a:	e7ee      	b.n	90006f1a <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x6a>
            return (int)(fs + 0.5f);
90006f3c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
90006f40:	4b05      	ldr	r3, [pc, #20]	; (90006f58 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0xa8>)
90006f42:	429e      	cmp	r6, r3
90006f44:	ee30 0a27 	vadd.f32	s0, s0, s15
90006f48:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006f4c:	ee17 2a90 	vmov	r2, s15
90006f50:	d0d3      	beq.n	90006efa <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x4a>
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
90006f52:	4633      	mov	r3, r6
    }
90006f54:	bc70      	pop	{r4, r5, r6}
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
90006f56:	4718      	bx	r3
90006f58:	90006645 	.word	0x90006645

90006f5c <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
90006f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90006f60:	ed2d 8b02 	vpush	{d8}
90006f64:	b08b      	sub	sp, #44	; 0x2c
90006f66:	4604      	mov	r4, r0
90006f68:	f012 fa0a 	bl	90019380 <_ZN8touchgfx6ScreenC1Ev>
        : Widget(), alpha(255), color(0)
90006f6c:	4a77      	ldr	r2, [pc, #476]	; (9000714c <_ZN15Screen2ViewBaseC1Ev+0x1f0>)
90006f6e:	2500      	movs	r5, #0
90006f70:	f64f 78ff 	movw	r8, #65535	; 0xffff
          touchable(false),
90006f74:	f44f 7980 	mov.w	r9, #256	; 0x100
90006f78:	f04f 0bff 	mov.w	fp, #255	; 0xff
    flexButtonCallback(this, &Screen2ViewBase::flexButtonCallbackHandler)
90006f7c:	4974      	ldr	r1, [pc, #464]	; (90007150 <_ZN15Screen2ViewBaseC1Ev+0x1f4>)
90006f7e:	f104 0a6c 	add.w	sl, r4, #108	; 0x6c
90006f82:	6422      	str	r2, [r4, #64]	; 0x40
        : DynamicDataGraph(capacity, values), current(0)
90006f84:	f504 76c6 	add.w	r6, r4, #396	; 0x18c
        : Widget(), bitmap(bmp), alpha(255)
90006f88:	4a72      	ldr	r2, [pc, #456]	; (90007154 <_ZN15Screen2ViewBaseC1Ev+0x1f8>)
        Image::setBitmap(bmp);
90006f8a:	4650      	mov	r0, sl
90006f8c:	6021      	str	r1, [r4, #0]
90006f8e:	a908      	add	r1, sp, #32
        : Widget(), bitmap(bmp), alpha(255)
90006f90:	f8a4 8092 	strh.w	r8, [r4, #146]	; 0x92
90006f94:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
90006f98:	66e2      	str	r2, [r4, #108]	; 0x6c
90006f9a:	63e5      	str	r5, [r4, #60]	; 0x3c
        : x(0), y(0), width(0), height(0)
90006f9c:	6465      	str	r5, [r4, #68]	; 0x44
          cachedAbsX(0),
90006f9e:	6625      	str	r5, [r4, #96]	; 0x60
          touchable(false),
90006fa0:	f8a4 9064 	strh.w	r9, [r4, #100]	; 0x64
        : color(col)
90006fa4:	66a5      	str	r5, [r4, #104]	; 0x68
        : x(0), y(0), width(0), height(0)
90006fa6:	6725      	str	r5, [r4, #112]	; 0x70
90006fa8:	f884 b066 	strb.w	fp, [r4, #102]	; 0x66
          cachedAbsX(0),
90006fac:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
          touchable(false),
90006fb0:	f8a4 9090 	strh.w	r9, [r4, #144]	; 0x90
        : typedTextId(id)
90006fb4:	4f68      	ldr	r7, [pc, #416]	; (90007158 <_ZN15Screen2ViewBaseC1Ev+0x1fc>)
90006fb6:	f8ad 8020 	strh.w	r8, [sp, #32]
90006fba:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
          parent(0),
90006fbe:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
          nextDrawChainElement(0),
90006fc2:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
90006fc6:	e9c4 551d 	strd	r5, r5, [r4, #116]	; 0x74
          parent(0),
90006fca:	e9c4 551f 	strd	r5, r5, [r4, #124]	; 0x7c
          nextDrawChainElement(0),
90006fce:	e9c4 5521 	strd	r5, r5, [r4, #132]	; 0x84
        Image::setBitmap(bmp);
90006fd2:	f00e fa58 	bl	90015486 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90006fd6:	f04f 32ff 	mov.w	r2, #4294967295
        : TextAreaWithWildcardBase(), wc1(0)
90006fda:	4960      	ldr	r1, [pc, #384]	; (9000715c <_ZN15Screen2ViewBaseC1Ev+0x200>)
          updateTicksInterval(updateInterval),
90006fdc:	2301      	movs	r3, #1
          running(false)
90006fde:	4860      	ldr	r0, [pc, #384]	; (90007160 <_ZN15Screen2ViewBaseC1Ev+0x204>)
          startId(BITMAP_INVALID),
90006fe0:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
90006fe4:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90006fe8:	f8c4 20e8 	str.w	r2, [r4, #232]	; 0xe8
          updateTicksInterval(updateInterval),
90006fec:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
90006ff0:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
          running(false)
90006ff4:	66e0      	str	r0, [r4, #108]	; 0x6c
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
90006ff6:	4630      	mov	r0, r6
        : animationDoneAction(0),
90006ff8:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
          running(false)
90006ffc:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
          touchable(false),
90007000:	f8a4 90cc 	strh.w	r9, [r4, #204]	; 0xcc
90007004:	f8c4 70d0 	str.w	r7, [r4, #208]	; 0xd0
        : color(col)
90007008:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
9000700c:	f8a4 50dc 	strh.w	r5, [r4, #220]	; 0xdc
90007010:	f8c4 b0de 	str.w	fp, [r4, #222]	; 0xde
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90007014:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
        : x(0), y(0), width(0), height(0)
90007018:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
9000701c:	e9c4 552d 	strd	r5, r5, [r4, #180]	; 0xb4
          nextSibling(0),
90007020:	e9c4 552f 	strd	r5, r5, [r4, #188]	; 0xbc
          cachedAbsX(0),
90007024:	e9c4 5531 	strd	r5, r5, [r4, #196]	; 0xc4
90007028:	e9c4 553b 	strd	r5, r5, [r4, #236]	; 0xec
9000702c:	e9c4 553e 	strd	r5, r5, [r4, #248]	; 0xf8
90007030:	e9c4 5540 	strd	r5, r5, [r4, #256]	; 0x100
          nextSibling(0),
90007034:	e9c4 5542 	strd	r5, r5, [r4, #264]	; 0x108
          cachedAbsX(0),
90007038:	e9c4 5544 	strd	r5, r5, [r4, #272]	; 0x110
          touchable(false),
9000703c:	f8a4 9118 	strh.w	r9, [r4, #280]	; 0x118
90007040:	f8a4 8120 	strh.w	r8, [r4, #288]	; 0x120
90007044:	f8a4 816c 	strh.w	r8, [r4, #364]	; 0x16c
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90007048:	f8c4 2180 	str.w	r2, [r4, #384]	; 0x180
9000704c:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
90007050:	f8a4 9164 	strh.w	r9, [r4, #356]	; 0x164
90007054:	f8c4 711c 	str.w	r7, [r4, #284]	; 0x11c
        : color(col)
90007058:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
9000705c:	f8a4 5128 	strh.w	r5, [r4, #296]	; 0x128
90007060:	f8c4 b12a 	str.w	fp, [r4, #298]	; 0x12a
90007064:	f8c4 b176 	str.w	fp, [r4, #374]	; 0x176
              text(0)
90007068:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
9000706c:	f8c4 7168 	str.w	r7, [r4, #360]	; 0x168
90007070:	f8c4 5170 	str.w	r5, [r4, #368]	; 0x170
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
90007074:	f8a4 5174 	strh.w	r5, [r4, #372]	; 0x174
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90007078:	f8c4 517c 	str.w	r5, [r4, #380]	; 0x17c
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
9000707c:	f8df 8100 	ldr.w	r8, [pc, #256]	; 90007180 <_ZN15Screen2ViewBaseC1Ev+0x224>
90007080:	e9c4 524c 	strd	r5, r2, [r4, #304]	; 0x130
90007084:	e9c4 514f 	strd	r5, r1, [r4, #316]	; 0x13c
        : x(0), y(0), width(0), height(0)
90007088:	e9c4 5551 	strd	r5, r5, [r4, #324]	; 0x144
9000708c:	210a      	movs	r1, #10
9000708e:	e9c4 5553 	strd	r5, r5, [r4, #332]	; 0x14c
          nextSibling(0),
90007092:	e9c4 5555 	strd	r5, r5, [r4, #340]	; 0x154
          cachedAbsX(0),
90007096:	e9c4 5557 	strd	r5, r5, [r4, #348]	; 0x15c
9000709a:	e9c4 5561 	strd	r5, r5, [r4, #388]	; 0x184
9000709e:	f00d f857 	bl	90014150 <_ZN8touchgfx17AbstractDataGraphC1Es>
900070a2:	4930      	ldr	r1, [pc, #192]	; (90007164 <_ZN15Screen2ViewBaseC1Ev+0x208>)
900070a4:	2301      	movs	r3, #1
        return i * scale;
900070a6:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
900070aa:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
{
public:
    GraphWrapAndOverwrite()
        : GraphWrapAndOverwriteData(CAPACITY, y)
900070ae:	f504 7137 	add.w	r1, r4, #732	; 0x2dc
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
900070b2:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
900070b6:	4630      	mov	r0, r6
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
900070b8:	f8c4 12d0 	str.w	r1, [r4, #720]	; 0x2d0
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
900070bc:	4629      	mov	r1, r5
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
900070be:	f8c4 52d4 	str.w	r5, [r4, #724]	; 0x2d4
900070c2:	e9c4 35b2 	strd	r3, r5, [r4, #712]	; 0x2c8
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
900070c6:	f00c fcfe 	bl	90013ac6 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>
900070ca:	4a27      	ldr	r2, [pc, #156]	; (90007168 <_ZN15Screen2ViewBaseC1Ev+0x20c>)
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
        : AbstractPainterRGB565(), AbstractPainterColor(color)
900070cc:	f504 734d 	add.w	r3, r4, #820	; 0x334
class AbstractGraphElement : public CanvasWidget
{
public:
    /** Default constructor. */
    AbstractGraphElement()
        : CanvasWidget()
900070d0:	f504 7041 	add.w	r0, r4, #772	; 0x304
900070d4:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
        : DynamicDataGraph(capacity, values), current(0)
900070d8:	f8a4 52d8 	strh.w	r5, [r4, #728]	; 0x2d8
900070dc:	ee08 0a10 	vmov	s16, r0
900070e0:	9303      	str	r3, [sp, #12]
900070e2:	f00c fca3 	bl	90013a2c <_ZN8touchgfx12CanvasWidgetC1Ev>
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
        : lineWidth(2)
900070e6:	2302      	movs	r3, #2
900070e8:	4a20      	ldr	r2, [pc, #128]	; (9000716c <_ZN15Screen2ViewBaseC1Ev+0x210>)
        : widgetWidth(0)
900070ea:	f8a4 5338 	strh.w	r5, [r4, #824]	; 0x338
900070ee:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
900070f2:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
900070f6:	f8d8 3000 	ldr.w	r3, [r8]
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
        : AbstractPainter()
900070fa:	4a1d      	ldr	r2, [pc, #116]	; (90007170 <_ZN15Screen2ViewBaseC1Ev+0x214>)
900070fc:	f8c4 2334 	str.w	r2, [r4, #820]	; 0x334
90007100:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90007104:	2a00      	cmp	r2, #0
90007106:	d03f      	beq.n	90007188 <_ZN15Screen2ViewBaseC1Ev+0x22c>
90007108:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
9000710a:	2800      	cmp	r0, #0
9000710c:	f000 83d7 	beq.w	900078be <_ZN15Screen2ViewBaseC1Ev+0x962>
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
90007110:	6803      	ldr	r3, [r0, #0]
90007112:	f8df 9070 	ldr.w	r9, [pc, #112]	; 90007184 <_ZN15Screen2ViewBaseC1Ev+0x228>
90007116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007118:	454a      	cmp	r2, r9
9000711a:	d043      	beq.n	900071a4 <_ZN15Screen2ViewBaseC1Ev+0x248>
9000711c:	4790      	blx	r2
        return auxiliaryLCD;
9000711e:	f8d8 3000 	ldr.w	r3, [r8]
90007122:	fab0 f580 	clz	r5, r0
90007126:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90007128:	096d      	lsrs	r5, r5, #5
        if (HAL::getInstance()->getAuxiliaryLCD())
9000712a:	b140      	cbz	r0, 9000713e <_ZN15Screen2ViewBaseC1Ev+0x1e2>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
9000712c:	6803      	ldr	r3, [r0, #0]
9000712e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007130:	454b      	cmp	r3, r9
90007132:	d037      	beq.n	900071a4 <_ZN15Screen2ViewBaseC1Ev+0x248>
90007134:	4798      	blx	r3
90007136:	2800      	cmp	r0, #0
90007138:	bf08      	it	eq
9000713a:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
9000713e:	bb8d      	cbnz	r5, 900071a4 <_ZN15Screen2ViewBaseC1Ev+0x248>
90007140:	4b0c      	ldr	r3, [pc, #48]	; (90007174 <_ZN15Screen2ViewBaseC1Ev+0x218>)
90007142:	212c      	movs	r1, #44	; 0x2c
90007144:	4a0c      	ldr	r2, [pc, #48]	; (90007178 <_ZN15Screen2ViewBaseC1Ev+0x21c>)
90007146:	480d      	ldr	r0, [pc, #52]	; (9000717c <_ZN15Screen2ViewBaseC1Ev+0x220>)
90007148:	f01f ffc4 	bl	900270d4 <__assert_func>
9000714c:	9002be30 	.word	0x9002be30
90007150:	9002aeb4 	.word	0x9002aeb4
90007154:	9002be98 	.word	0x9002be98
90007158:	9002a190 	.word	0x9002a190
9000715c:	9002a968 	.word	0x9002a968
90007160:	9002bd24 	.word	0x9002bd24
90007164:	9002b970 	.word	0x9002b970
90007168:	9002ad04 	.word	0x9002ad04
9000716c:	9002bc38 	.word	0x9002bc38
90007170:	90029b1c 	.word	0x90029b1c
90007174:	9002abfc 	.word	0x9002abfc
90007178:	9002ac5c 	.word	0x9002ac5c
9000717c:	9002ac98 	.word	0x9002ac98
90007180:	24028194 	.word	0x24028194
90007184:	900023f5 	.word	0x900023f5
        return instance->lcdRef;
90007188:	6898      	ldr	r0, [r3, #8]
9000718a:	f8df 93cc 	ldr.w	r9, [pc, #972]	; 90007558 <_ZN15Screen2ViewBaseC1Ev+0x5fc>
        bool compat = HAL::lcd().framebufferFormat() == format;
9000718e:	6802      	ldr	r2, [r0, #0]
90007190:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
90007192:	454a      	cmp	r2, r9
90007194:	d1c2      	bne.n	9000711c <_ZN15Screen2ViewBaseC1Ev+0x1c0>
        return auxiliaryLCD;
90007196:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
90007198:	b120      	cbz	r0, 900071a4 <_ZN15Screen2ViewBaseC1Ev+0x248>
        bool compat = HAL::lcd().framebufferFormat() == format;
9000719a:	6803      	ldr	r3, [r0, #0]
9000719c:	2501      	movs	r5, #1
9000719e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
900071a0:	454b      	cmp	r3, r9
900071a2:	d1c7      	bne.n	90007134 <_ZN15Screen2ViewBaseC1Ev+0x1d8>
900071a4:	4bda      	ldr	r3, [pc, #872]	; (90007510 <_ZN15Screen2ViewBaseC1Ev+0x5b4>)
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
900071a6:	2500      	movs	r5, #0
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900071a8:	f04f 3bff 	mov.w	fp, #4294967295
        T::add(text);
900071ac:	f504 795f 	add.w	r9, r4, #892	; 0x37c
900071b0:	f8c4 3334 	str.w	r3, [r4, #820]	; 0x334
900071b4:	3324      	adds	r3, #36	; 0x24
900071b6:	f504 7052 	add.w	r0, r4, #840	; 0x348
900071ba:	4649      	mov	r1, r9
900071bc:	f8c4 333c 	str.w	r3, [r4, #828]	; 0x33c
        : pressed(false), alpha(255), action(0)
900071c0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
900071c4:	f8c4 73a4 	str.w	r7, [r4, #932]	; 0x3a4
900071c8:	ee08 0a90 	vmov	s17, r0
900071cc:	f8a4 3374 	strh.w	r3, [r4, #884]	; 0x374
        touchable = touch;
900071d0:	f240 1301 	movw	r3, #257	; 0x101
900071d4:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340
900071d8:	f104 0804 	add.w	r8, r4, #4
900071dc:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
        : T()
900071e0:	4bcc      	ldr	r3, [pc, #816]	; (90007514 <_ZN15Screen2ViewBaseC1Ev+0x5b8>)
900071e2:	f8c4 5370 	str.w	r5, [r4, #880]	; 0x370
900071e6:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
          touchable(false),
900071ea:	f44f 7380 	mov.w	r3, #256	; 0x100
900071ee:	f8c4 5378 	str.w	r5, [r4, #888]	; 0x378
900071f2:	f8a4 33a0 	strh.w	r3, [r4, #928]	; 0x3a0
900071f6:	4bc8      	ldr	r3, [pc, #800]	; (90007518 <_ZN15Screen2ViewBaseC1Ev+0x5bc>)
        : color(col)
900071f8:	f8c4 53ac 	str.w	r5, [r4, #940]	; 0x3ac
900071fc:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
90007200:	f64f 73ff 	movw	r3, #65535	; 0xffff
90007204:	f8a4 53b0 	strh.w	r5, [r4, #944]	; 0x3b0
90007208:	f8a4 33a8 	strh.w	r3, [r4, #936]	; 0x3a8
9000720c:	23ff      	movs	r3, #255	; 0xff
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
9000720e:	f8c4 53b8 	str.w	r5, [r4, #952]	; 0x3b8
90007212:	f8c4 33b2 	str.w	r3, [r4, #946]	; 0x3b2
        : x(0), y(0), width(0), height(0)
90007216:	e9c4 55d3 	strd	r5, r5, [r4, #844]	; 0x34c
9000721a:	e9c4 55d5 	strd	r5, r5, [r4, #852]	; 0x354
          nextSibling(0),
9000721e:	e9c4 55d7 	strd	r5, r5, [r4, #860]	; 0x35c
          cachedAbsX(0),
90007222:	e9c4 55d9 	strd	r5, r5, [r4, #868]	; 0x364
90007226:	e9c4 55e0 	strd	r5, r5, [r4, #896]	; 0x380
9000722a:	e9c4 55e2 	strd	r5, r5, [r4, #904]	; 0x388
          nextSibling(0),
9000722e:	e9c4 55e4 	strd	r5, r5, [r4, #912]	; 0x390
          cachedAbsX(0),
90007232:	e9c4 55e6 	strd	r5, r5, [r4, #920]	; 0x398
              text(0)
90007236:	e9c4 b5ef 	strd	fp, r5, [r4, #956]	; 0x3bc
        : color(0)
9000723a:	e9c4 55f1 	strd	r5, r5, [r4, #964]	; 0x3c4
        T::add(text);
9000723e:	f00b f975 	bl	9001252c <_ZN8touchgfx9Container3addERNS_8DrawableE>
        : pobject(pObject), pmemfun(pmemfun_1)
90007242:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
90007246:	4ab5      	ldr	r2, [pc, #724]	; (9000751c <_ZN15Screen2ViewBaseC1Ev+0x5c0>)
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
90007248:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
9000724c:	f504 7079 	add.w	r0, r4, #996	; 0x3e4
90007250:	609c      	str	r4, [r3, #8]
90007252:	605a      	str	r2, [r3, #4]
90007254:	4ab2      	ldr	r2, [pc, #712]	; (90007520 <_ZN15Screen2ViewBaseC1Ev+0x5c4>)
90007256:	611d      	str	r5, [r3, #16]
90007258:	60da      	str	r2, [r3, #12]
9000725a:	f00f f805 	bl	90016268 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
        rect.x = x;
9000725e:	4bb1      	ldr	r3, [pc, #708]	; (90007524 <_ZN15Screen2ViewBaseC1Ev+0x5c8>)
90007260:	f104 0140 	add.w	r1, r4, #64	; 0x40
90007264:	4640      	mov	r0, r8
90007266:	64a3      	str	r3, [r4, #72]	; 0x48
        color = newColor;
90007268:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000726c:	6465      	str	r5, [r4, #68]	; 0x44
9000726e:	66a3      	str	r3, [r4, #104]	; 0x68
90007270:	f00b f95c 	bl	9001252c <_ZN8touchgfx9Container3addERNS_8DrawableE>
90007274:	4bac      	ldr	r3, [pc, #688]	; (90007528 <_ZN15Screen2ViewBaseC1Ev+0x5cc>)
    animatedImage1.setBitmaps(BITMAP_GIPHY_1_ID, BITMAP_GIPHY_5_ID);
90007276:	2210      	movs	r2, #16
90007278:	4650      	mov	r0, sl
9000727a:	6723      	str	r3, [r4, #112]	; 0x70
9000727c:	4629      	mov	r1, r5
9000727e:	f00d fc97 	bl	90014bb0 <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>
    animatedImage1.setUpdateTicksInterval(6);
90007282:	4650      	mov	r0, sl
90007284:	2106      	movs	r1, #6
90007286:	f00d fca6 	bl	90014bd6 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>
    animatedImage1.startAnimation(false, true, true);
9000728a:	2301      	movs	r3, #1
9000728c:	4650      	mov	r0, sl
9000728e:	4629      	mov	r1, r5
90007290:	461a      	mov	r2, r3
90007292:	f00d fbe5 	bl	90014a60 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>
90007296:	4651      	mov	r1, sl
90007298:	4640      	mov	r0, r8
    minTemperatureTextArea.setXY(16, 143);
9000729a:	f104 0aa8 	add.w	sl, r4, #168	; 0xa8
9000729e:	f00b f945 	bl	9001252c <_ZN8touchgfx9Container3addERNS_8DrawableE>
900072a2:	4aa2      	ldr	r2, [pc, #648]	; (9000752c <_ZN15Screen2ViewBaseC1Ev+0x5d0>)
        setX(x);
900072a4:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
        color = newColor;
900072a8:	f8c4 b0d8 	str.w	fp, [r4, #216]	; 0xd8
        boundingArea = calculateBoundingArea();
900072ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        rect.x = x;
900072b0:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
900072b4:	4a9e      	ldr	r2, [pc, #632]	; (90007530 <_ZN15Screen2ViewBaseC1Ev+0x5d4>)
        linespace = space;
900072b6:	f8a4 50dc 	strh.w	r5, [r4, #220]	; 0xdc
900072ba:	4293      	cmp	r3, r2
900072bc:	f040 8362 	bne.w	90007984 <_ZN15Screen2ViewBaseC1Ev+0xa28>
        boundingArea = calculateBoundingArea();
900072c0:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
900072c4:	e9c4 5b39 	strd	r5, fp, [r4, #228]	; 0xe4
    Unicode::snprintf(minTemperatureTextAreaBuffer, MINTEMPERATURETEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_4SII).getText());
900072c8:	f504 7373 	add.w	r3, r4, #972	; 0x3cc
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
900072cc:	f8df b28c 	ldr.w	fp, [pc, #652]	; 9000755c <_ZN15Screen2ViewBaseC1Ev+0x600>
900072d0:	9302      	str	r3, [sp, #8]
900072d2:	f8db 3000 	ldr.w	r3, [fp]
900072d6:	2b00      	cmp	r3, #0
900072d8:	f000 838b 	beq.w	900079f2 <_ZN15Screen2ViewBaseC1Ev+0xa96>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900072dc:	4b95      	ldr	r3, [pc, #596]	; (90007534 <_ZN15Screen2ViewBaseC1Ev+0x5d8>)
900072de:	881b      	ldrh	r3, [r3, #0]
900072e0:	2b02      	cmp	r3, #2
900072e2:	f240 8380 	bls.w	900079e6 <_ZN15Screen2ViewBaseC1Ev+0xa8a>
        return texts->getText(typedTextId);
900072e6:	4b94      	ldr	r3, [pc, #592]	; (90007538 <_ZN15Screen2ViewBaseC1Ev+0x5dc>)
900072e8:	2102      	movs	r1, #2
    temperatureTextArea.setXY(16, 76);
900072ea:	f104 05f4 	add.w	r5, r4, #244	; 0xf4
900072ee:	6818      	ldr	r0, [r3, #0]
900072f0:	f000 fd20 	bl	90007d34 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(minTemperatureTextAreaBuffer, MINTEMPERATURETEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_4SII).getText());
900072f4:	4a91      	ldr	r2, [pc, #580]	; (9000753c <_ZN15Screen2ViewBaseC1Ev+0x5e0>)
900072f6:	4603      	mov	r3, r0
900072f8:	2104      	movs	r1, #4
900072fa:	9802      	ldr	r0, [sp, #8]
900072fc:	f013 fcfe 	bl	9001acfc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
90007300:	9b02      	ldr	r3, [sp, #8]
    minTemperatureTextArea.resizeToCurrentText();
90007302:	4650      	mov	r0, sl
90007304:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
90007308:	f00d ffd6 	bl	900152b8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
9000730c:	2303      	movs	r3, #3
    minTemperatureTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_JNB3));
9000730e:	a908      	add	r1, sp, #32
90007310:	4650      	mov	r0, sl
90007312:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
90007316:	9708      	str	r7, [sp, #32]
90007318:	f00d ffee 	bl	900152f8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
9000731c:	4651      	mov	r1, sl
9000731e:	4640      	mov	r0, r8
90007320:	f00b f904 	bl	9001252c <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
90007324:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
        setY(y);
90007328:	4881      	ldr	r0, [pc, #516]	; (90007530 <_ZN15Screen2ViewBaseC1Ev+0x5d4>)
        color = newColor;
9000732a:	f04f 31ff 	mov.w	r1, #4294967295
        boundingArea = calculateBoundingArea();
9000732e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
        rect.x = x;
90007332:	4b83      	ldr	r3, [pc, #524]	; (90007540 <_ZN15Screen2ViewBaseC1Ev+0x5e4>)
90007334:	4282      	cmp	r2, r0
        color = newColor;
90007336:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
9000733a:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
        linespace = space;
9000733e:	f04f 0300 	mov.w	r3, #0
90007342:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
        boundingArea = calculateBoundingArea();
90007346:	f040 8328 	bne.w	9000799a <_ZN15Screen2ViewBaseC1Ev+0xa3e>
9000734a:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
9000734e:	e9c4 314c 	strd	r3, r1, [r4, #304]	; 0x130
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90007352:	f8db 3000 	ldr.w	r3, [fp]
    Unicode::snprintf(temperatureTextAreaBuffer, TEMPERATURETEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_DG5G).getText());
90007356:	f504 7a75 	add.w	sl, r4, #980	; 0x3d4
9000735a:	2b00      	cmp	r3, #0
9000735c:	f000 8349 	beq.w	900079f2 <_ZN15Screen2ViewBaseC1Ev+0xa96>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90007360:	4b74      	ldr	r3, [pc, #464]	; (90007534 <_ZN15Screen2ViewBaseC1Ev+0x5d8>)
90007362:	881b      	ldrh	r3, [r3, #0]
90007364:	2b06      	cmp	r3, #6
90007366:	f240 833e 	bls.w	900079e6 <_ZN15Screen2ViewBaseC1Ev+0xa8a>
        return texts->getText(typedTextId);
9000736a:	4b73      	ldr	r3, [pc, #460]	; (90007538 <_ZN15Screen2ViewBaseC1Ev+0x5dc>)
9000736c:	2106      	movs	r1, #6
9000736e:	6818      	ldr	r0, [r3, #0]
90007370:	f000 fce0 	bl	90007d34 <_ZNK8touchgfx5Texts7getTextEt>
90007374:	4a71      	ldr	r2, [pc, #452]	; (9000753c <_ZN15Screen2ViewBaseC1Ev+0x5e0>)
90007376:	4603      	mov	r3, r0
90007378:	2104      	movs	r1, #4
9000737a:	4650      	mov	r0, sl
9000737c:	f013 fcbe 	bl	9001acfc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    temperatureTextArea.resizeToCurrentText();
90007380:	4628      	mov	r0, r5
90007382:	f8c4 a13c 	str.w	sl, [r4, #316]	; 0x13c
90007386:	f00d ff97 	bl	900152b8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
9000738a:	2307      	movs	r3, #7
    temperatureTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_DSQV));
9000738c:	4628      	mov	r0, r5
9000738e:	a908      	add	r1, sp, #32
90007390:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
90007394:	9708      	str	r7, [sp, #32]
90007396:	f00d ffaf 	bl	900152f8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
9000739a:	4629      	mov	r1, r5
9000739c:	4640      	mov	r0, r8
9000739e:	f00b f8c5 	bl	9001252c <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
900073a2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
900073a6:	4862      	ldr	r0, [pc, #392]	; (90007530 <_ZN15Screen2ViewBaseC1Ev+0x5d4>)
        color = newColor;
900073a8:	f04f 31ff 	mov.w	r1, #4294967295
        boundingArea = calculateBoundingArea();
900073ac:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
    maxTemperatureTextArea.setXY(16, 108);
900073b0:	f504 75a0 	add.w	r5, r4, #320	; 0x140
        rect.x = x;
900073b4:	4b63      	ldr	r3, [pc, #396]	; (90007544 <_ZN15Screen2ViewBaseC1Ev+0x5e8>)
900073b6:	4282      	cmp	r2, r0
        color = newColor;
900073b8:	f8c4 1170 	str.w	r1, [r4, #368]	; 0x170
900073bc:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
        linespace = space;
900073c0:	f04f 0300 	mov.w	r3, #0
900073c4:	f8a4 3174 	strh.w	r3, [r4, #372]	; 0x174
900073c8:	f040 82f3 	bne.w	900079b2 <_ZN15Screen2ViewBaseC1Ev+0xa56>
        boundingArea = calculateBoundingArea();
900073cc:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
900073d0:	e9c4 315f 	strd	r3, r1, [r4, #380]	; 0x17c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
900073d4:	f8db 3000 	ldr.w	r3, [fp]
    Unicode::snprintf(maxTemperatureTextAreaBuffer, MAXTEMPERATURETEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_HQVR).getText());
900073d8:	f504 7a77 	add.w	sl, r4, #988	; 0x3dc
900073dc:	2b00      	cmp	r3, #0
900073de:	f000 8308 	beq.w	900079f2 <_ZN15Screen2ViewBaseC1Ev+0xa96>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900073e2:	4b54      	ldr	r3, [pc, #336]	; (90007534 <_ZN15Screen2ViewBaseC1Ev+0x5d8>)
900073e4:	881b      	ldrh	r3, [r3, #0]
900073e6:	2b04      	cmp	r3, #4
900073e8:	f240 82fd 	bls.w	900079e6 <_ZN15Screen2ViewBaseC1Ev+0xa8a>
        return texts->getText(typedTextId);
900073ec:	4b52      	ldr	r3, [pc, #328]	; (90007538 <_ZN15Screen2ViewBaseC1Ev+0x5dc>)
900073ee:	2104      	movs	r1, #4
900073f0:	6818      	ldr	r0, [r3, #0]
900073f2:	f000 fc9f 	bl	90007d34 <_ZNK8touchgfx5Texts7getTextEt>
900073f6:	4a51      	ldr	r2, [pc, #324]	; (9000753c <_ZN15Screen2ViewBaseC1Ev+0x5e0>)
900073f8:	4603      	mov	r3, r0
900073fa:	2104      	movs	r1, #4
900073fc:	4650      	mov	r0, sl
900073fe:	f013 fc7d 	bl	9001acfc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    maxTemperatureTextArea.resizeToCurrentText();
90007402:	4628      	mov	r0, r5
90007404:	f8c4 a188 	str.w	sl, [r4, #392]	; 0x188
90007408:	f00d ff56 	bl	900152b8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
9000740c:	2305      	movs	r3, #5
    maxTemperatureTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_XZKY));
9000740e:	4628      	mov	r0, r5
90007410:	a908      	add	r1, sp, #32
90007412:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
90007416:	9708      	str	r7, [sp, #32]
90007418:	f00d ff6e 	bl	900152f8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
9000741c:	4629      	mov	r1, r5
9000741e:	4640      	mov	r0, r8
90007420:	f00b f884 	bl	9001252c <_ZN8touchgfx9Container3addERNS_8DrawableE>
90007424:	4a48      	ldr	r2, [pc, #288]	; (90007548 <_ZN15Screen2ViewBaseC1Ev+0x5ec>)
        setX(x);
90007426:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
        setWidth(width);
9000742a:	f240 11c7 	movw	r1, #455	; 0x1c7
9000742e:	4630      	mov	r0, r6
    temperatureGraph.setGraphAreaMargin(0, 0, 0, 0);
90007430:	2500      	movs	r5, #0
90007432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        rect.x = x;
90007434:	f8c4 2190 	str.w	r2, [r4, #400]	; 0x190
        setWidth(width);
90007438:	4798      	blx	r3
        setHeight(height);
9000743a:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
9000743e:	213f      	movs	r1, #63	; 0x3f
90007440:	4630      	mov	r0, r6
90007442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90007444:	4798      	blx	r3
        setScaleX(scale, updateData);
90007446:	462a      	mov	r2, r5
90007448:	2101      	movs	r1, #1
9000744a:	4630      	mov	r0, r6
9000744c:	f00c feec 	bl	90014228 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>
        setScaleY(scale, updateData);
90007450:	462a      	mov	r2, r5
90007452:	2101      	movs	r1, #1
90007454:	4630      	mov	r0, r6
90007456:	f00c ff19 	bl	9001428c <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>
9000745a:	462b      	mov	r3, r5
9000745c:	462a      	mov	r2, r5
9000745e:	4629      	mov	r1, r5
90007460:	4630      	mov	r0, r6
90007462:	9500      	str	r5, [sp, #0]
90007464:	f00c fe25 	bl	900140b2 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    temperatureGraph.setGraphAreaPadding(0, 0, 0, 0);
90007468:	462b      	mov	r3, r5
9000746a:	462a      	mov	r2, r5
9000746c:	4629      	mov	r1, r5
9000746e:	4630      	mov	r0, r6
90007470:	9500      	str	r5, [sp, #0]
90007472:	f00c fd5c 	bl	90013f2e <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
        return i * scale;
90007476:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
9000747a:	4629      	mov	r1, r5
9000747c:	4630      	mov	r0, r6
        return i * scale;
9000747e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
90007482:	0052      	lsls	r2, r2, #1
90007484:	f00c fb42 	bl	90013b0c <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>
        canvasPainter = &painter;
90007488:	9b03      	ldr	r3, [sp, #12]
    temperatureGraph.addGraphElement(temperatureGraphLine1);
9000748a:	ee18 1a10 	vmov	r1, s16
9000748e:	4630      	mov	r0, r6
90007490:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
90007494:	4b2d      	ldr	r3, [pc, #180]	; (9000754c <_ZN15Screen2ViewBaseC1Ev+0x5f0>)
90007496:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    }

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        color565 = LCD16bpp::getNativeColor(painterColor);
9000749a:	f241 43b8 	movw	r3, #5304	; 0x14b8
9000749e:	f8a4 3344 	strh.w	r3, [r4, #836]	; 0x344
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
900074a2:	2302      	movs	r3, #2
900074a4:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
900074a8:	f00c fd4c 	bl	90013f44 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        const float fs = f * (float)scale;
900074ac:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
900074b0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 90007550 <_ZN15Screen2ViewBaseC1Ev+0x5f4>
900074b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900074b8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
900074bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
900074c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900074c4:	f280 8255 	bge.w	90007972 <_ZN15Screen2ViewBaseC1Ev+0xa16>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900074c8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
900074cc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
900074d0:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
900074d4:	ee17 3a10 	vmov	r3, s14
900074d8:	3b01      	subs	r3, #1
900074da:	ee77 7ac6 	vsub.f32	s15, s15, s12
900074de:	ee77 7aa6 	vadd.f32	s15, s15, s13
900074e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900074e6:	ee17 1a90 	vmov	r1, s15
900074ea:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
900074ec:	4630      	mov	r0, r6
900074ee:	f00c feec 	bl	900142ca <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
900074f2:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
900074f6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 90007554 <_ZN15Screen2ViewBaseC1Ev+0x5f8>
900074fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900074fe:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007502:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9000750a:	f280 8229 	bge.w	90007960 <_ZN15Screen2ViewBaseC1Ev+0xa04>
9000750e:	e037      	b.n	90007580 <_ZN15Screen2ViewBaseC1Ev+0x624>
90007510:	9002b8c0 	.word	0x9002b8c0
90007514:	9002a9f8 	.word	0x9002a9f8
90007518:	9002bda0 	.word	0x9002bda0
9000751c:	9002ae9c 	.word	0x9002ae9c
90007520:	90006801 	.word	0x90006801
90007524:	011001e0 	.word	0x011001e0
90007528:	fffb0000 	.word	0xfffb0000
9000752c:	008f0010 	.word	0x008f0010
90007530:	90005aa5 	.word	0x90005aa5
90007534:	240281f0 	.word	0x240281f0
90007538:	240281f8 	.word	0x240281f8
9000753c:	9002a95c 	.word	0x9002a95c
90007540:	004c0010 	.word	0x004c0010
90007544:	006c0010 	.word	0x006c0010
90007548:	00c4000d 	.word	0x00c4000d
9000754c:	ff1497c5 	.word	0xff1497c5
90007550:	40e06335 	.word	0x40e06335
90007554:	3ef4e11e 	.word	0x3ef4e11e
90007558:	900023f5 	.word	0x900023f5
9000755c:	240281ec 	.word	0x240281ec
90007560:	407a8701 	.word	0x407a8701
90007564:	40f50000 	.word	0x40f50000
90007568:	40a48034 	.word	0x40a48034
9000756c:	40b6d788 	.word	0x40b6d788
90007570:	409f48fe 	.word	0x409f48fe
90007574:	3f9c64ed 	.word	0x3f9c64ed
90007578:	40b692f7 	.word	0x40b692f7
9000757c:	411e0a72 	.word	0x411e0a72
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007580:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007584:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007588:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
9000758c:	ee17 3a10 	vmov	r3, s14
90007590:	3b01      	subs	r3, #1
90007592:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007596:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000759a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
9000759e:	ee17 1a90 	vmov	r1, s15
900075a2:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
900075a4:	4630      	mov	r0, r6
900075a6:	f00c fe90 	bl	900142ca <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
900075aa:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
900075ae:	ed1f 7a14 	vldr	s14, [pc, #-80]	; 90007560 <_ZN15Screen2ViewBaseC1Ev+0x604>
900075b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900075b6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
900075ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
900075be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900075c2:	f280 81c4 	bge.w	9000794e <_ZN15Screen2ViewBaseC1Ev+0x9f2>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900075c6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
900075ca:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
900075ce:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
900075d2:	ee17 3a10 	vmov	r3, s14
900075d6:	3b01      	subs	r3, #1
900075d8:	ee77 7ac6 	vsub.f32	s15, s15, s12
900075dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
900075e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900075e4:	ee17 1a90 	vmov	r1, s15
900075e8:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
900075ea:	4630      	mov	r0, r6
900075ec:	f00c fe6d 	bl	900142ca <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
900075f0:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
900075f4:	ed1f 7a25 	vldr	s14, [pc, #-148]	; 90007564 <_ZN15Screen2ViewBaseC1Ev+0x608>
900075f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900075fc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007600:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007608:	f280 8198 	bge.w	9000793c <_ZN15Screen2ViewBaseC1Ev+0x9e0>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
9000760c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007610:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007614:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007618:	ee17 3a10 	vmov	r3, s14
9000761c:	3b01      	subs	r3, #1
9000761e:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007622:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007626:	eefd 7ae7 	vcvt.s32.f32	s15, s15
9000762a:	ee17 1a90 	vmov	r1, s15
9000762e:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007630:	4630      	mov	r0, r6
90007632:	f00c fe4a 	bl	900142ca <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007636:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
9000763a:	ed1f 7a35 	vldr	s14, [pc, #-212]	; 90007568 <_ZN15Screen2ViewBaseC1Ev+0x60c>
9000763e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007642:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007646:	eef5 7ac0 	vcmpe.f32	s15, #0.0
9000764a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9000764e:	f280 816c 	bge.w	9000792a <_ZN15Screen2ViewBaseC1Ev+0x9ce>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007652:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007656:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
9000765a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
9000765e:	ee17 3a10 	vmov	r3, s14
90007662:	3b01      	subs	r3, #1
90007664:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007668:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000766c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007670:	ee17 1a90 	vmov	r1, s15
90007674:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007676:	4630      	mov	r0, r6
90007678:	f00c fe27 	bl	900142ca <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
9000767c:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007680:	ed1f 7a46 	vldr	s14, [pc, #-280]	; 9000756c <_ZN15Screen2ViewBaseC1Ev+0x610>
90007684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007688:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
9000768c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007694:	f280 8140 	bge.w	90007918 <_ZN15Screen2ViewBaseC1Ev+0x9bc>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007698:	eebd 7ae7 	vcvt.s32.f32	s14, s15
9000769c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
900076a0:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
900076a4:	ee17 3a10 	vmov	r3, s14
900076a8:	3b01      	subs	r3, #1
900076aa:	ee77 7ac6 	vsub.f32	s15, s15, s12
900076ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
900076b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900076b6:	ee17 1a90 	vmov	r1, s15
900076ba:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
900076bc:	4630      	mov	r0, r6
900076be:	f00c fe04 	bl	900142ca <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
900076c2:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
900076c6:	ed1f 7a56 	vldr	s14, [pc, #-344]	; 90007570 <_ZN15Screen2ViewBaseC1Ev+0x614>
900076ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900076ce:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
900076d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
900076d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900076da:	f280 8114 	bge.w	90007906 <_ZN15Screen2ViewBaseC1Ev+0x9aa>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900076de:	eebd 7ae7 	vcvt.s32.f32	s14, s15
900076e2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
900076e6:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
900076ea:	ee17 3a10 	vmov	r3, s14
900076ee:	3b01      	subs	r3, #1
900076f0:	ee77 7ac6 	vsub.f32	s15, s15, s12
900076f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
900076f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900076fc:	ee17 1a90 	vmov	r1, s15
90007700:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007702:	4630      	mov	r0, r6
90007704:	f00c fde1 	bl	900142ca <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007708:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
9000770c:	ed1f 7a67 	vldr	s14, [pc, #-412]	; 90007574 <_ZN15Screen2ViewBaseC1Ev+0x618>
90007710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007714:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007718:	eef5 7ac0 	vcmpe.f32	s15, #0.0
9000771c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007720:	f280 80e8 	bge.w	900078f4 <_ZN15Screen2ViewBaseC1Ev+0x998>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007724:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007728:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
9000772c:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007730:	ee17 3a10 	vmov	r3, s14
90007734:	3b01      	subs	r3, #1
90007736:	ee77 7ac6 	vsub.f32	s15, s15, s12
9000773a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000773e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007742:	ee17 1a90 	vmov	r1, s15
90007746:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007748:	4630      	mov	r0, r6
9000774a:	f00c fdbe 	bl	900142ca <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
9000774e:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007752:	ed1f 7a77 	vldr	s14, [pc, #-476]	; 90007578 <_ZN15Screen2ViewBaseC1Ev+0x61c>
90007756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000775a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
9000775e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007766:	f280 80bc 	bge.w	900078e2 <_ZN15Screen2ViewBaseC1Ev+0x986>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
9000776a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
9000776e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007772:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007776:	ee17 3a10 	vmov	r3, s14
9000777a:	3b01      	subs	r3, #1
9000777c:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007780:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007784:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007788:	ee17 1a90 	vmov	r1, s15
9000778c:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
9000778e:	4630      	mov	r0, r6
90007790:	f00c fd9b 	bl	900142ca <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007794:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007798:	ed1f 7a88 	vldr	s14, [pc, #-544]	; 9000757c <_ZN15Screen2ViewBaseC1Ev+0x620>
9000779c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900077a0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
900077a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
900077a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900077ac:	f280 8090 	bge.w	900078d0 <_ZN15Screen2ViewBaseC1Ev+0x974>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900077b0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
900077b4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
900077b8:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
900077bc:	ee17 3a10 	vmov	r3, s14
900077c0:	3b01      	subs	r3, #1
900077c2:	ee77 7ac6 	vsub.f32	s15, s15, s12
900077c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900077ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900077ce:	ee17 1a90 	vmov	r1, s15
900077d2:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
900077d4:	4630      	mov	r0, r6
        boundingArea = calculateBoundingArea();
900077d6:	ad04      	add	r5, sp, #16
900077d8:	f00c fd77 	bl	900142ca <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
900077dc:	4631      	mov	r1, r6
900077de:	4640      	mov	r0, r8
900077e0:	f109 063c 	add.w	r6, r9, #60	; 0x3c
900077e4:	f00a fea2 	bl	9001252c <_ZN8touchgfx9Container3addERNS_8DrawableE>
900077e8:	9708      	str	r7, [sp, #32]
900077ea:	2700      	movs	r7, #0
        text.setTypedText(t);
900077ec:	a908      	add	r1, sp, #32
900077ee:	4648      	mov	r0, r9
900077f0:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
900077f4:	f00d fd80 	bl	900152f8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
        rect.width = width;
900077f8:	f8b4 3350 	ldrh.w	r3, [r4, #848]	; 0x350
900077fc:	4649      	mov	r1, r9
900077fe:	4628      	mov	r0, r5
        return rect.height;
90007800:	f9b4 a352 	ldrsh.w	sl, [r4, #850]	; 0x352
        rect.width = width;
90007804:	f8a4 3384 	strh.w	r3, [r4, #900]	; 0x384
90007808:	f00d face 	bl	90014da8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
9000780c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90007810:	e886 0007 	stmia.w	r6, {r0, r1, r2}
        boundingArea = calculateBoundingArea();
90007814:	4649      	mov	r1, r9
90007816:	4628      	mov	r0, r5
        rect.height = height;
90007818:	f8a4 a386 	strh.w	sl, [r4, #902]	; 0x386
9000781c:	f00d fac4 	bl	90014da8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
        setX(x);
90007820:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
90007824:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 90007a20 <_ZN15Screen2ViewBaseC1Ev+0xac4>
        setWidth(width);
90007828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000782a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
9000782e:	4563      	cmp	r3, ip
90007830:	e886 0007 	stmia.w	r6, {r0, r1, r2}
        rect.x = x;
90007834:	f8c4 7380 	str.w	r7, [r4, #896]	; 0x380
        setWidth(width);
90007838:	f040 80c7 	bne.w	900079ca <_ZN15Screen2ViewBaseC1Ev+0xa6e>
        rect.width = width;
9000783c:	234e      	movs	r3, #78	; 0x4e
        boundingArea = calculateBoundingArea();
9000783e:	4649      	mov	r1, r9
90007840:	4628      	mov	r0, r5
90007842:	f8a4 3384 	strh.w	r3, [r4, #900]	; 0x384
90007846:	f00d faaf 	bl	90014da8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
        setHeight(height);
9000784a:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
9000784e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90007852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90007854:	e886 0007 	stmia.w	r6, {r0, r1, r2}
90007858:	4a69      	ldr	r2, [pc, #420]	; (90007a00 <_ZN15Screen2ViewBaseC1Ev+0xaa4>)
9000785a:	4293      	cmp	r3, r2
9000785c:	f040 80bf 	bne.w	900079de <_ZN15Screen2ViewBaseC1Ev+0xa82>
        rect.height = height;
90007860:	231c      	movs	r3, #28
        boundingArea = calculateBoundingArea();
90007862:	4649      	mov	r1, r9
90007864:	4628      	mov	r0, r5
90007866:	f8a4 3386 	strh.w	r3, [r4, #902]	; 0x386
9000786a:	f00d fa9d 	bl	90014da8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
9000786e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90007872:	e886 0007 	stmia.w	r6, {r0, r1, r2}
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
90007876:	f894 1374 	ldrb.w	r1, [r4, #884]	; 0x374
        colorReleased = newColorReleased;
9000787a:	f04f 32ff 	mov.w	r2, #4294967295
        colorPressed = newColorPressed;
9000787e:	4b61      	ldr	r3, [pc, #388]	; (90007a04 <_ZN15Screen2ViewBaseC1Ev+0xaa8>)
90007880:	4640      	mov	r0, r8
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
90007882:	2900      	cmp	r1, #0
        colorReleased = newColorReleased;
90007884:	f8c4 23c4 	str.w	r2, [r4, #964]	; 0x3c4
        colorPressed = newColorPressed;
90007888:	f8c4 33c8 	str.w	r3, [r4, #968]	; 0x3c8
9000788c:	ee18 1a90 	vmov	r1, s17
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
90007890:	bf08      	it	eq
90007892:	4613      	moveq	r3, r2
        rect.x = x;
90007894:	4a5c      	ldr	r2, [pc, #368]	; (90007a08 <_ZN15Screen2ViewBaseC1Ev+0xaac>)
        color = newColor;
90007896:	f8c4 33ac 	str.w	r3, [r4, #940]	; 0x3ac
    backButton.setAction(flexButtonCallback);
9000789a:	f242 0304 	movw	r3, #8196	; 0x2004
9000789e:	f8c4 234c 	str.w	r2, [r4, #844]	; 0x34c
900078a2:	4423      	add	r3, r4
900078a4:	4a59      	ldr	r2, [pc, #356]	; (90007a0c <_ZN15Screen2ViewBaseC1Ev+0xab0>)
        action = &callback;
900078a6:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
900078aa:	f8c4 2350 	str.w	r2, [r4, #848]	; 0x350
900078ae:	f00a fe3d 	bl	9001252c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
900078b2:	4620      	mov	r0, r4
900078b4:	b00b      	add	sp, #44	; 0x2c
900078b6:	ecbd 8b02 	vpop	{d8}
900078ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return instance->lcdRef;
900078be:	6898      	ldr	r0, [r3, #8]
900078c0:	f8df 9160 	ldr.w	r9, [pc, #352]	; 90007a24 <_ZN15Screen2ViewBaseC1Ev+0xac8>
        bool compat = HAL::lcd().framebufferFormat() == format;
900078c4:	6803      	ldr	r3, [r0, #0]
900078c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
900078c8:	454a      	cmp	r2, r9
900078ca:	f43f ac6b 	beq.w	900071a4 <_ZN15Screen2ViewBaseC1Ev+0x248>
900078ce:	e425      	b.n	9000711c <_ZN15Screen2ViewBaseC1Ev+0x1c0>
            return (int)(fs + 0.5f);
900078d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
900078d4:	ee77 7a87 	vadd.f32	s15, s15, s14
900078d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900078dc:	ee17 1a90 	vmov	r1, s15
900078e0:	e778      	b.n	900077d4 <_ZN15Screen2ViewBaseC1Ev+0x878>
900078e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
900078e6:	ee77 7a87 	vadd.f32	s15, s15, s14
900078ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900078ee:	ee17 1a90 	vmov	r1, s15
900078f2:	e74c      	b.n	9000778e <_ZN15Screen2ViewBaseC1Ev+0x832>
900078f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
900078f8:	ee77 7a87 	vadd.f32	s15, s15, s14
900078fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007900:	ee17 1a90 	vmov	r1, s15
90007904:	e720      	b.n	90007748 <_ZN15Screen2ViewBaseC1Ev+0x7ec>
90007906:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
9000790a:	ee77 7a87 	vadd.f32	s15, s15, s14
9000790e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007912:	ee17 1a90 	vmov	r1, s15
90007916:	e6f4      	b.n	90007702 <_ZN15Screen2ViewBaseC1Ev+0x7a6>
90007918:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
9000791c:	ee77 7a87 	vadd.f32	s15, s15, s14
90007920:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007924:	ee17 1a90 	vmov	r1, s15
90007928:	e6c8      	b.n	900076bc <_ZN15Screen2ViewBaseC1Ev+0x760>
9000792a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
9000792e:	ee77 7a87 	vadd.f32	s15, s15, s14
90007932:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007936:	ee17 1a90 	vmov	r1, s15
9000793a:	e69c      	b.n	90007676 <_ZN15Screen2ViewBaseC1Ev+0x71a>
9000793c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007940:	ee77 7a87 	vadd.f32	s15, s15, s14
90007944:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007948:	ee17 1a90 	vmov	r1, s15
9000794c:	e670      	b.n	90007630 <_ZN15Screen2ViewBaseC1Ev+0x6d4>
9000794e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007952:	ee77 7a87 	vadd.f32	s15, s15, s14
90007956:	eefd 7ae7 	vcvt.s32.f32	s15, s15
9000795a:	ee17 1a90 	vmov	r1, s15
9000795e:	e644      	b.n	900075ea <_ZN15Screen2ViewBaseC1Ev+0x68e>
90007960:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007964:	ee77 7a87 	vadd.f32	s15, s15, s14
90007968:	eefd 7ae7 	vcvt.s32.f32	s15, s15
9000796c:	ee17 1a90 	vmov	r1, s15
90007970:	e618      	b.n	900075a4 <_ZN15Screen2ViewBaseC1Ev+0x648>
90007972:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007976:	ee77 7a87 	vadd.f32	s15, s15, s14
9000797a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
9000797e:	ee17 1a90 	vmov	r1, s15
90007982:	e5b3      	b.n	900074ec <_ZN15Screen2ViewBaseC1Ev+0x590>
        boundingArea = calculateBoundingArea();
90007984:	ad04      	add	r5, sp, #16
90007986:	4651      	mov	r1, sl
90007988:	4628      	mov	r0, r5
9000798a:	4798      	blx	r3
9000798c:	f104 03e4 	add.w	r3, r4, #228	; 0xe4
90007990:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90007994:	e883 0007 	stmia.w	r3, {r0, r1, r2}
90007998:	e496      	b.n	900072c8 <_ZN15Screen2ViewBaseC1Ev+0x36c>
9000799a:	f10d 0a10 	add.w	sl, sp, #16
9000799e:	4629      	mov	r1, r5
900079a0:	4650      	mov	r0, sl
900079a2:	4790      	blx	r2
900079a4:	f504 7398 	add.w	r3, r4, #304	; 0x130
900079a8:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
900079ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
900079b0:	e4cf      	b.n	90007352 <_ZN15Screen2ViewBaseC1Ev+0x3f6>
900079b2:	f10d 0a10 	add.w	sl, sp, #16
900079b6:	4629      	mov	r1, r5
900079b8:	4650      	mov	r0, sl
900079ba:	4790      	blx	r2
900079bc:	f504 73be 	add.w	r3, r4, #380	; 0x17c
900079c0:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
900079c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
900079c8:	e504      	b.n	900073d4 <_ZN15Screen2ViewBaseC1Ev+0x478>
        setWidth(width);
900079ca:	214e      	movs	r1, #78	; 0x4e
900079cc:	4648      	mov	r0, r9
900079ce:	4798      	blx	r3
        setHeight(height);
900079d0:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
900079d4:	4a0a      	ldr	r2, [pc, #40]	; (90007a00 <_ZN15Screen2ViewBaseC1Ev+0xaa4>)
900079d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900079d8:	4293      	cmp	r3, r2
900079da:	f43f af41 	beq.w	90007860 <_ZN15Screen2ViewBaseC1Ev+0x904>
900079de:	4648      	mov	r0, r9
900079e0:	211c      	movs	r1, #28
900079e2:	4798      	blx	r3
900079e4:	e747      	b.n	90007876 <_ZN15Screen2ViewBaseC1Ev+0x91a>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900079e6:	4b0a      	ldr	r3, [pc, #40]	; (90007a10 <_ZN15Screen2ViewBaseC1Ev+0xab4>)
900079e8:	2161      	movs	r1, #97	; 0x61
900079ea:	4a0a      	ldr	r2, [pc, #40]	; (90007a14 <_ZN15Screen2ViewBaseC1Ev+0xab8>)
900079ec:	480a      	ldr	r0, [pc, #40]	; (90007a18 <_ZN15Screen2ViewBaseC1Ev+0xabc>)
900079ee:	f01f fb71 	bl	900270d4 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
900079f2:	4b0a      	ldr	r3, [pc, #40]	; (90007a1c <_ZN15Screen2ViewBaseC1Ev+0xac0>)
900079f4:	2160      	movs	r1, #96	; 0x60
900079f6:	4a07      	ldr	r2, [pc, #28]	; (90007a14 <_ZN15Screen2ViewBaseC1Ev+0xab8>)
900079f8:	4807      	ldr	r0, [pc, #28]	; (90007a18 <_ZN15Screen2ViewBaseC1Ev+0xabc>)
900079fa:	f01f fb6b 	bl	900270d4 <__assert_func>
900079fe:	bf00      	nop
90007a00:	90005a59 	.word	0x90005a59
90007a04:	ff9e9d9d 	.word	0xff9e9d9d
90007a08:	0017000d 	.word	0x0017000d
90007a0c:	001c004e 	.word	0x001c004e
90007a10:	9002a8e4 	.word	0x9002a8e4
90007a14:	9002a924 	.word	0x9002a924
90007a18:	9002a89c 	.word	0x9002a89c
90007a1c:	9002a81c 	.word	0x9002a81c
90007a20:	90005a31 	.word	0x90005a31
90007a24:	900023f5 	.word	0x900023f5

90007a28 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90007a28:	4770      	bx	lr
90007a2a:	bf00      	nop

90007a2c <_Z23getFont_verdana_10_4bppv>:
{
90007a2c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90007a2e:	4d18      	ldr	r5, [pc, #96]	; (90007a90 <_Z23getFont_verdana_10_4bppv+0x64>)
{
90007a30:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90007a32:	682c      	ldr	r4, [r5, #0]
90007a34:	f3bf 8f5b 	dmb	ish
90007a38:	f014 0401 	ands.w	r4, r4, #1
90007a3c:	d002      	beq.n	90007a44 <_Z23getFont_verdana_10_4bppv+0x18>
    return verdana_10_4bpp;
}
90007a3e:	4815      	ldr	r0, [pc, #84]	; (90007a94 <_Z23getFont_verdana_10_4bppv+0x68>)
90007a40:	b00f      	add	sp, #60	; 0x3c
90007a42:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90007a44:	4628      	mov	r0, r5
90007a46:	f01f fb18 	bl	9002707a <__cxa_guard_acquire>
90007a4a:	2800      	cmp	r0, #0
90007a4c:	d0f7      	beq.n	90007a3e <_Z23getFont_verdana_10_4bppv+0x12>
90007a4e:	213f      	movs	r1, #63	; 0x3f
90007a50:	2201      	movs	r2, #1
90007a52:	230a      	movs	r3, #10
90007a54:	2004      	movs	r0, #4
90007a56:	9204      	str	r2, [sp, #16]
90007a58:	9300      	str	r3, [sp, #0]
90007a5a:	9003      	str	r0, [sp, #12]
90007a5c:	480d      	ldr	r0, [pc, #52]	; (90007a94 <_Z23getFont_verdana_10_4bppv+0x68>)
90007a5e:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
90007a62:	490d      	ldr	r1, [pc, #52]	; (90007a98 <_Z23getFont_verdana_10_4bppv+0x6c>)
90007a64:	9108      	str	r1, [sp, #32]
90007a66:	490d      	ldr	r1, [pc, #52]	; (90007a9c <_Z23getFont_verdana_10_4bppv+0x70>)
90007a68:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90007a6c:	9107      	str	r1, [sp, #28]
90007a6e:	490c      	ldr	r1, [pc, #48]	; (90007aa0 <_Z23getFont_verdana_10_4bppv+0x74>)
90007a70:	e9cd 4405 	strd	r4, r4, [sp, #20]
90007a74:	e9cd 4401 	strd	r4, r4, [sp, #4]
90007a78:	f7fd ffa2 	bl	900059c0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
90007a7c:	4809      	ldr	r0, [pc, #36]	; (90007aa4 <_Z23getFont_verdana_10_4bppv+0x78>)
90007a7e:	f01f fb47 	bl	90027110 <atexit>
90007a82:	4628      	mov	r0, r5
90007a84:	f01f fb05 	bl	90027092 <__cxa_guard_release>
}
90007a88:	4802      	ldr	r0, [pc, #8]	; (90007a94 <_Z23getFont_verdana_10_4bppv+0x68>)
90007a8a:	b00f      	add	sp, #60	; 0x3c
90007a8c:	bd30      	pop	{r4, r5, pc}
90007a8e:	bf00      	nop
90007a90:	2400d09c 	.word	0x2400d09c
90007a94:	2400d0a0 	.word	0x2400d0a0
90007a98:	9002c338 	.word	0x9002c338
90007a9c:	9002c4e4 	.word	0x9002c4e4
90007aa0:	90201c38 	.word	0x90201c38
90007aa4:	90007a29 	.word	0x90007a29

90007aa8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 96, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
90007aa8:	4770      	bx	lr
90007aaa:	bf00      	nop

90007aac <_Z23getFont_verdana_20_4bppv>:
{
90007aac:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 96, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
90007aae:	4d19      	ldr	r5, [pc, #100]	; (90007b14 <_Z23getFont_verdana_20_4bppv+0x68>)
{
90007ab0:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 96, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
90007ab2:	682c      	ldr	r4, [r5, #0]
90007ab4:	f3bf 8f5b 	dmb	ish
90007ab8:	f014 0401 	ands.w	r4, r4, #1
90007abc:	d002      	beq.n	90007ac4 <_Z23getFont_verdana_20_4bppv+0x18>
    return verdana_20_4bpp;
}
90007abe:	4816      	ldr	r0, [pc, #88]	; (90007b18 <_Z23getFont_verdana_20_4bppv+0x6c>)
90007ac0:	b00f      	add	sp, #60	; 0x3c
90007ac2:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 96, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
90007ac4:	4628      	mov	r0, r5
90007ac6:	f01f fad8 	bl	9002707a <__cxa_guard_acquire>
90007aca:	2800      	cmp	r0, #0
90007acc:	d0f7      	beq.n	90007abe <_Z23getFont_verdana_20_4bppv+0x12>
90007ace:	213f      	movs	r1, #63	; 0x3f
90007ad0:	4a12      	ldr	r2, [pc, #72]	; (90007b1c <_Z23getFont_verdana_20_4bppv+0x70>)
90007ad2:	2301      	movs	r3, #1
90007ad4:	2014      	movs	r0, #20
90007ad6:	9208      	str	r2, [sp, #32]
90007ad8:	2204      	movs	r2, #4
90007ada:	9304      	str	r3, [sp, #16]
90007adc:	9000      	str	r0, [sp, #0]
90007ade:	9401      	str	r4, [sp, #4]
90007ae0:	480d      	ldr	r0, [pc, #52]	; (90007b18 <_Z23getFont_verdana_20_4bppv+0x6c>)
90007ae2:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
90007ae6:	490e      	ldr	r1, [pc, #56]	; (90007b20 <_Z23getFont_verdana_20_4bppv+0x74>)
90007ae8:	e9cd 3305 	strd	r3, r3, [sp, #20]
90007aec:	9107      	str	r1, [sp, #28]
90007aee:	2318      	movs	r3, #24
90007af0:	490c      	ldr	r1, [pc, #48]	; (90007b24 <_Z23getFont_verdana_20_4bppv+0x78>)
90007af2:	e9cd 4202 	strd	r4, r2, [sp, #8]
90007af6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90007afa:	2260      	movs	r2, #96	; 0x60
90007afc:	f7fd ff60 	bl	900059c0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
90007b00:	4809      	ldr	r0, [pc, #36]	; (90007b28 <_Z23getFont_verdana_20_4bppv+0x7c>)
90007b02:	f01f fb05 	bl	90027110 <atexit>
90007b06:	4628      	mov	r0, r5
90007b08:	f01f fac3 	bl	90027092 <__cxa_guard_release>
}
90007b0c:	4802      	ldr	r0, [pc, #8]	; (90007b18 <_Z23getFont_verdana_20_4bppv+0x6c>)
90007b0e:	b00f      	add	sp, #60	; 0x3c
90007b10:	bd30      	pop	{r4, r5, pc}
90007b12:	bf00      	nop
90007b14:	2400d0cc 	.word	0x2400d0cc
90007b18:	2400d0d0 	.word	0x2400d0d0
90007b1c:	9002c33c 	.word	0x9002c33c
90007b20:	9002c4e8 	.word	0x9002c4e8
90007b24:	90201c48 	.word	0x90201c48
90007b28:	90007aa9 	.word	0x90007aa9

90007b2c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90007b2c:	4770      	bx	lr
90007b2e:	bf00      	nop

90007b30 <_Z23getFont_verdana_40_4bppv>:
{
90007b30:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90007b32:	4d18      	ldr	r5, [pc, #96]	; (90007b94 <_Z23getFont_verdana_40_4bppv+0x64>)
{
90007b34:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90007b36:	682c      	ldr	r4, [r5, #0]
90007b38:	f3bf 8f5b 	dmb	ish
90007b3c:	f014 0401 	ands.w	r4, r4, #1
90007b40:	d002      	beq.n	90007b48 <_Z23getFont_verdana_40_4bppv+0x18>
    return verdana_40_4bpp;
}
90007b42:	4815      	ldr	r0, [pc, #84]	; (90007b98 <_Z23getFont_verdana_40_4bppv+0x68>)
90007b44:	b00f      	add	sp, #60	; 0x3c
90007b46:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90007b48:	4628      	mov	r0, r5
90007b4a:	f01f fa96 	bl	9002707a <__cxa_guard_acquire>
90007b4e:	2800      	cmp	r0, #0
90007b50:	d0f7      	beq.n	90007b42 <_Z23getFont_verdana_40_4bppv+0x12>
90007b52:	213f      	movs	r1, #63	; 0x3f
90007b54:	2201      	movs	r2, #1
90007b56:	2328      	movs	r3, #40	; 0x28
90007b58:	2004      	movs	r0, #4
90007b5a:	9204      	str	r2, [sp, #16]
90007b5c:	9300      	str	r3, [sp, #0]
90007b5e:	9003      	str	r0, [sp, #12]
90007b60:	480d      	ldr	r0, [pc, #52]	; (90007b98 <_Z23getFont_verdana_40_4bppv+0x68>)
90007b62:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
90007b66:	490d      	ldr	r1, [pc, #52]	; (90007b9c <_Z23getFont_verdana_40_4bppv+0x6c>)
90007b68:	9108      	str	r1, [sp, #32]
90007b6a:	490d      	ldr	r1, [pc, #52]	; (90007ba0 <_Z23getFont_verdana_40_4bppv+0x70>)
90007b6c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90007b70:	9107      	str	r1, [sp, #28]
90007b72:	490c      	ldr	r1, [pc, #48]	; (90007ba4 <_Z23getFont_verdana_40_4bppv+0x74>)
90007b74:	e9cd 4405 	strd	r4, r4, [sp, #20]
90007b78:	e9cd 4401 	strd	r4, r4, [sp, #4]
90007b7c:	f7fd ff20 	bl	900059c0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
90007b80:	4809      	ldr	r0, [pc, #36]	; (90007ba8 <_Z23getFont_verdana_40_4bppv+0x78>)
90007b82:	f01f fac5 	bl	90027110 <atexit>
90007b86:	4628      	mov	r0, r5
90007b88:	f01f fa83 	bl	90027092 <__cxa_guard_release>
}
90007b8c:	4802      	ldr	r0, [pc, #8]	; (90007b98 <_Z23getFont_verdana_40_4bppv+0x68>)
90007b8e:	b00f      	add	sp, #60	; 0x3c
90007b90:	bd30      	pop	{r4, r5, pc}
90007b92:	bf00      	nop
90007b94:	2400d0fc 	.word	0x2400d0fc
90007b98:	2400d100 	.word	0x2400d100
90007b9c:	9002c4e0 	.word	0x9002c4e0
90007ba0:	9002c4ec 	.word	0x9002c4ec
90007ba4:	90202188 	.word	0x90202188
90007ba8:	90007b2d 	.word	0x90007b2d

90007bac <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
90007bac:	2000      	movs	r0, #0
90007bae:	4770      	bx	lr

90007bb0 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
90007bb0:	2000      	movs	r0, #0
90007bb2:	4770      	bx	lr

90007bb4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
90007bb4:	b40e      	push	{r1, r2, r3}
90007bb6:	b500      	push	{lr}
90007bb8:	b082      	sub	sp, #8
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
90007bba:	2100      	movs	r1, #0
{
90007bbc:	ab03      	add	r3, sp, #12
90007bbe:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
90007bc2:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
90007bc4:	f010 ff3e 	bl	90018a44 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
90007bc8:	b002      	add	sp, #8
90007bca:	f85d eb04 	ldr.w	lr, [sp], #4
90007bce:	b003      	add	sp, #12
90007bd0:	4770      	bx	lr
90007bd2:	bf00      	nop

90007bd4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
90007bd4:	b40c      	push	{r2, r3}
90007bd6:	b500      	push	{lr}
90007bd8:	b083      	sub	sp, #12
90007bda:	ab04      	add	r3, sp, #16
90007bdc:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
90007be0:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
90007be2:	f010 ff2f 	bl	90018a44 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
90007be6:	b003      	add	sp, #12
90007be8:	f85d eb04 	ldr.w	lr, [sp], #4
90007bec:	b002      	add	sp, #8
90007bee:	4770      	bx	lr

90007bf0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
90007bf0:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
90007bf2:	b510      	push	{r4, lr}
90007bf4:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
90007bf6:	b133      	cbz	r3, 90007c06 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
90007bf8:	8f03      	ldrh	r3, [r0, #56]	; 0x38
90007bfa:	b39b      	cbz	r3, 90007c64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>
            return buffer[pos];
90007bfc:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90007bfe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
90007c02:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
90007c04:	b923      	cbnz	r3, 90007c10 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
90007c06:	4620      	mov	r0, r4
}
90007c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
90007c0c:	f012 b9ca 	b.w	90019fa4 <_ZN8touchgfx12TextProvider11getNextCharEv>
        substituteGlyphs();
90007c10:	f012 fac6 	bl	9001a1a0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
90007c14:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90007c16:	2b01      	cmp	r3, #1
90007c18:	d92a      	bls.n	90007c70 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>
            const uint16_t index = pos + offset;
90007c1a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
90007c1c:	1c53      	adds	r3, r2, #1
90007c1e:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
90007c20:	2b09      	cmp	r3, #9
90007c22:	d812      	bhi.n	90007c4a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5a>
90007c24:	eb04 0143 	add.w	r1, r4, r3, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
90007c28:	f640 103f 	movw	r0, #2367	; 0x93f
90007c2c:	8c49      	ldrh	r1, [r1, #34]	; 0x22
90007c2e:	4281      	cmp	r1, r0
90007c30:	d1e9      	bne.n	90007c06 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
90007c32:	eb04 0142 	add.w	r1, r4, r2, lsl #1
90007c36:	0052      	lsls	r2, r2, #1
90007c38:	8c49      	ldrh	r1, [r1, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
90007c3a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            buffer[pos] = newChar;
90007c3e:	4422      	add	r2, r4
90007c40:	f640 103f 	movw	r0, #2367	; 0x93f
            buffer[index < size ? index : 0] = newChar;
90007c44:	8459      	strh	r1, [r3, #34]	; 0x22
            buffer[pos] = newChar;
90007c46:	8450      	strh	r0, [r2, #34]	; 0x22
        }
90007c48:	e7dd      	b.n	90007c06 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[index < size ? index : index - size];
90007c4a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90007c4e:	f640 113f 	movw	r1, #2367	; 0x93f
90007c52:	89db      	ldrh	r3, [r3, #14]
90007c54:	428b      	cmp	r3, r1
90007c56:	d1d6      	bne.n	90007c06 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
90007c58:	eb04 0142 	add.w	r1, r4, r2, lsl #1
90007c5c:	2300      	movs	r3, #0
90007c5e:	0052      	lsls	r2, r2, #1
90007c60:	8c49      	ldrh	r1, [r1, #34]	; 0x22
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
90007c62:	e7ea      	b.n	90007c3a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x4a>
            assert(used > 0);
90007c64:	4b05      	ldr	r3, [pc, #20]	; (90007c7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x8c>)
90007c66:	21c5      	movs	r1, #197	; 0xc5
90007c68:	4a05      	ldr	r2, [pc, #20]	; (90007c80 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
90007c6a:	4806      	ldr	r0, [pc, #24]	; (90007c84 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
90007c6c:	f01f fa32 	bl	900270d4 <__assert_func>
            assert(offset < used);
90007c70:	4b05      	ldr	r3, [pc, #20]	; (90007c88 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
90007c72:	21cb      	movs	r1, #203	; 0xcb
90007c74:	4a05      	ldr	r2, [pc, #20]	; (90007c8c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
90007c76:	4803      	ldr	r0, [pc, #12]	; (90007c84 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
90007c78:	f01f fa2c 	bl	900270d4 <__assert_func>
90007c7c:	9002aee0 	.word	0x9002aee0
90007c80:	9002aeec 	.word	0x9002aeec
90007c84:	9002af98 	.word	0x9002af98
90007c88:	9002afe4 	.word	0x9002afe4
90007c8c:	9002aff4 	.word	0x9002aff4

90007c90 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
90007c90:	f012 b951 	b.w	90019f36 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

90007c94 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
90007c94:	b510      	push	{r4, lr}
90007c96:	b086      	sub	sp, #24
90007c98:	f10d 0c08 	add.w	ip, sp, #8
    va_list pArg;
    va_start(pArg, format);
90007c9c:	ac0a      	add	r4, sp, #40	; 0x28
{
90007c9e:	e88c 0006 	stmia.w	ip, {r1, r2}
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
90007ca2:	461a      	mov	r2, r3
90007ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
90007ca6:	4661      	mov	r1, ip
90007ca8:	9401      	str	r4, [sp, #4]
90007caa:	9300      	str	r3, [sp, #0]
90007cac:	9b08      	ldr	r3, [sp, #32]
    va_start(pArg, format);
90007cae:	9405      	str	r4, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
90007cb0:	f00f fb66 	bl	90017380 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
90007cb4:	b006      	add	sp, #24
90007cb6:	bd10      	pop	{r4, pc}

90007cb8 <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
90007cb8:	b9e0      	cbnz	r0, 90007cf4 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
{
90007cba:	b538      	push	{r3, r4, r5, lr}
    {
        if (languagesArray[id] != 0)
90007cbc:	4b13      	ldr	r3, [pc, #76]	; (90007d0c <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
90007cbe:	681b      	ldr	r3, [r3, #0]
90007cc0:	b1cb      	cbz	r3, 90007cf6 <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
90007cc2:	4c13      	ldr	r4, [pc, #76]	; (90007d10 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
90007cc4:	4813      	ldr	r0, [pc, #76]	; (90007d14 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
90007cc6:	e9d3 1200 	ldrd	r1, r2, [r3]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
90007cca:	4419      	add	r1, r3
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
90007ccc:	441a      	add	r2, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
90007cce:	6021      	str	r1, [r4, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
90007cd0:	6899      	ldr	r1, [r3, #8]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
90007cd2:	6002      	str	r2, [r0, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
90007cd4:	185c      	adds	r4, r3, r1
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
90007cd6:	4b10      	ldr	r3, [pc, #64]	; (90007d18 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
90007cd8:	2200      	movs	r2, #0
90007cda:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
90007cdc:	f000 f83a 	bl	90007d54 <_ZN17TypedTextDatabase8getFontsEv>
90007ce0:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
90007ce2:	f000 f835 	bl	90007d50 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
90007ce6:	4b0d      	ldr	r3, [pc, #52]	; (90007d1c <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
        fonts = f;
90007ce8:	4a0d      	ldr	r2, [pc, #52]	; (90007d20 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
        typedTexts = data;
90007cea:	601c      	str	r4, [r3, #0]
        numberOfTypedTexts = n;
90007cec:	4b0d      	ldr	r3, [pc, #52]	; (90007d24 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
        fonts = f;
90007cee:	6015      	str	r5, [r2, #0]
        numberOfTypedTexts = n;
90007cf0:	8018      	strh	r0, [r3, #0]
    }
}
90007cf2:	bd38      	pop	{r3, r4, r5, pc}
90007cf4:	4770      	bx	lr
            currentLanguageTypedText = typedTextDatabaseArray[id];
90007cf6:	4c0c      	ldr	r4, [pc, #48]	; (90007d28 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
            currentLanguagePtr = texts_all_languages;
90007cf8:	4905      	ldr	r1, [pc, #20]	; (90007d10 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageTypedText = typedTextDatabaseArray[id];
90007cfa:	6824      	ldr	r4, [r4, #0]
            currentLanguagePtr = texts_all_languages;
90007cfc:	480b      	ldr	r0, [pc, #44]	; (90007d2c <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
            currentLanguageIndices = staticLanguageIndices[id];
90007cfe:	4b05      	ldr	r3, [pc, #20]	; (90007d14 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
90007d00:	4a0b      	ldr	r2, [pc, #44]	; (90007d30 <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
            currentLanguagePtr = texts_all_languages;
90007d02:	6008      	str	r0, [r1, #0]
            currentLanguageIndices = staticLanguageIndices[id];
90007d04:	601a      	str	r2, [r3, #0]
    if (currentLanguageTypedText)
90007d06:	2c00      	cmp	r4, #0
90007d08:	d1e5      	bne.n	90007cd6 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
90007d0a:	bd38      	pop	{r3, r4, r5, pc}
90007d0c:	2400d12c 	.word	0x2400d12c
90007d10:	2400d130 	.word	0x2400d130
90007d14:	2400d134 	.word	0x2400d134
90007d18:	2400d138 	.word	0x2400d138
90007d1c:	240281ec 	.word	0x240281ec
90007d20:	240281f4 	.word	0x240281f4
90007d24:	240281f0 	.word	0x240281f0
90007d28:	90202270 	.word	0x90202270
90007d2c:	902021c8 	.word	0x902021c8
90007d30:	90202198 	.word	0x90202198

90007d34 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
90007d34:	4a04      	ldr	r2, [pc, #16]	; (90007d48 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
90007d36:	4b05      	ldr	r3, [pc, #20]	; (90007d4c <_ZNK8touchgfx5Texts7getTextEt+0x18>)
90007d38:	6812      	ldr	r2, [r2, #0]
90007d3a:	681b      	ldr	r3, [r3, #0]
90007d3c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
}
90007d40:	eb03 0040 	add.w	r0, r3, r0, lsl #1
90007d44:	4770      	bx	lr
90007d46:	bf00      	nop
90007d48:	2400d134 	.word	0x2400d134
90007d4c:	2400d130 	.word	0x2400d130

90007d50 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
90007d50:	200c      	movs	r0, #12
90007d52:	4770      	bx	lr

90007d54 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
90007d54:	4800      	ldr	r0, [pc, #0]	; (90007d58 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
90007d56:	4770      	bx	lr
90007d58:	2400d13c 	.word	0x2400d13c

90007d5c <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
90007d5c:	b510      	push	{r4, lr}
};
90007d5e:	4c05      	ldr	r4, [pc, #20]	; (90007d74 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
90007d60:	f7ff fea4 	bl	90007aac <_Z23getFont_verdana_20_4bppv>
};
90007d64:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
90007d66:	f7ff fee3 	bl	90007b30 <_Z23getFont_verdana_40_4bppv>
};
90007d6a:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
90007d6c:	f7ff fe5e 	bl	90007a2c <_Z23getFont_verdana_10_4bppv>
};
90007d70:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
90007d72:	bd10      	pop	{r4, pc}
90007d74:	2400d13c 	.word	0x2400d13c

90007d78 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
90007d78:	4770      	bx	lr
90007d7a:	bf00      	nop

90007d7c <_ZN19FrontendApplicationD0Ev>:
90007d7c:	b510      	push	{r4, lr}
90007d7e:	4604      	mov	r4, r0
90007d80:	f44f 71ae 	mov.w	r1, #348	; 0x15c
90007d84:	f01f f977 	bl	90027076 <_ZdlPvj>
90007d88:	4620      	mov	r0, r4
90007d8a:	bd10      	pop	{r4, pc}

90007d8c <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
90007d8c:	b510      	push	{r4, lr}
90007d8e:	4604      	mov	r4, r0
    {
        model.tick();
90007d90:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
90007d94:	f000 f822 	bl	90007ddc <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
90007d98:	4620      	mov	r0, r4
    }
90007d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
90007d9e:	f00f bf89 	b.w	90017cb4 <_ZN8touchgfx11Application15handleTickEventEv>
90007da2:	bf00      	nop

90007da4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
90007da4:	b510      	push	{r4, lr}
90007da6:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
90007da8:	f7fd fd66 	bl	90005878 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
90007dac:	4b01      	ldr	r3, [pc, #4]	; (90007db4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
90007dae:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
90007db0:	6023      	str	r3, [r4, #0]
}
90007db2:	bd10      	pop	{r4, pc}
90007db4:	9002b0d0 	.word	0x9002b0d0

90007db8 <_ZN13ModelListener14setTemperatureEi>:
    }
    virtual void setTemperature(int temperature) {};
90007db8:	4770      	bx	lr
90007dba:	bf00      	nop

90007dbc <_ZN13ModelListener11setHumidityEi>:
    virtual void setHumidity(int humidity) {};
90007dbc:	4770      	bx	lr
90007dbe:	bf00      	nop

90007dc0 <_ZN13ModelListener17setMaxTemperatureEi>:
    virtual void setMaxTemperature(int temperature) {};
90007dc0:	4770      	bx	lr
90007dc2:	bf00      	nop

90007dc4 <_ZN13ModelListener17setMinTemperatureEi>:
    virtual void setMinTemperature(int temperature) {};
90007dc4:	4770      	bx	lr
90007dc6:	bf00      	nop

90007dc8 <_ZN13ModelListener23setTemperatureGraphDataEPi>:
    virtual void setTemperatureGraphData(int* points) {};
90007dc8:	4770      	bx	lr
90007dca:	bf00      	nop

90007dcc <_ZN5ModelC1Ev>:
extern "C"
{
	extern ApplicationContext_TypeDef applicationContext;
}
#endif
Model::Model() : modelListener(0),
90007dcc:	2200      	movs	r2, #0
		temperature(0), maxTemperature(0), minTemperature(0), temperatureGraphData(NULL), humidity(0)
90007dce:	e9c0 2200 	strd	r2, r2, [r0]
90007dd2:	e9c0 2202 	strd	r2, r2, [r0, #8]
90007dd6:	e9c0 2204 	strd	r2, r2, [r0, #16]
{

}
90007dda:	4770      	bx	lr

90007ddc <_ZN5Model4tickEv>:

void Model::tick()
{
90007ddc:	b510      	push	{r4, lr}
90007dde:	4604      	mov	r4, r0
//	uint16_t value = HAL_ADC_GetValue(&hadc1);
//	HAL_ADC_Stop (&hadc1);

//	ADC_VAL = map(0, 0, 65535, 0, 100);

	modelListener->setHumidity(applicationContext.humidity);
90007de0:	6800      	ldr	r0, [r0, #0]
90007de2:	4920      	ldr	r1, [pc, #128]	; (90007e64 <_ZN5Model4tickEv+0x88>)
90007de4:	6803      	ldr	r3, [r0, #0]
90007de6:	68da      	ldr	r2, [r3, #12]
90007de8:	428a      	cmp	r2, r1
90007dea:	d110      	bne.n	90007e0e <_ZN5Model4tickEv+0x32>

	modelListener->setTemperature(applicationContext.temperature);
90007dec:	689a      	ldr	r2, [r3, #8]
90007dee:	491e      	ldr	r1, [pc, #120]	; (90007e68 <_ZN5Model4tickEv+0x8c>)
90007df0:	428a      	cmp	r2, r1
90007df2:	d115      	bne.n	90007e20 <_ZN5Model4tickEv+0x44>
	modelListener->setMaxTemperature(applicationContext.maxTemperature);
90007df4:	691a      	ldr	r2, [r3, #16]
90007df6:	491d      	ldr	r1, [pc, #116]	; (90007e6c <_ZN5Model4tickEv+0x90>)
90007df8:	428a      	cmp	r2, r1
90007dfa:	d11a      	bne.n	90007e32 <_ZN5Model4tickEv+0x56>
	modelListener->setMinTemperature(applicationContext.minTemperature);
90007dfc:	695a      	ldr	r2, [r3, #20]
90007dfe:	491c      	ldr	r1, [pc, #112]	; (90007e70 <_ZN5Model4tickEv+0x94>)
90007e00:	428a      	cmp	r2, r1
90007e02:	d120      	bne.n	90007e46 <_ZN5Model4tickEv+0x6a>

	modelListener->setTemperatureGraphData((int*) &applicationContext.temperatureData);
90007e04:	699b      	ldr	r3, [r3, #24]
90007e06:	4a1b      	ldr	r2, [pc, #108]	; (90007e74 <_ZN5Model4tickEv+0x98>)
90007e08:	4293      	cmp	r3, r2
90007e0a:	d126      	bne.n	90007e5a <_ZN5Model4tickEv+0x7e>

	#endif
}
90007e0c:	bd10      	pop	{r4, pc}
	modelListener->setHumidity(applicationContext.humidity);
90007e0e:	4b1a      	ldr	r3, [pc, #104]	; (90007e78 <_ZN5Model4tickEv+0x9c>)
90007e10:	7959      	ldrb	r1, [r3, #5]
90007e12:	4790      	blx	r2
	modelListener->setTemperature(applicationContext.temperature);
90007e14:	6820      	ldr	r0, [r4, #0]
90007e16:	4914      	ldr	r1, [pc, #80]	; (90007e68 <_ZN5Model4tickEv+0x8c>)
90007e18:	6803      	ldr	r3, [r0, #0]
90007e1a:	689a      	ldr	r2, [r3, #8]
90007e1c:	428a      	cmp	r2, r1
90007e1e:	d0e9      	beq.n	90007df4 <_ZN5Model4tickEv+0x18>
90007e20:	4b15      	ldr	r3, [pc, #84]	; (90007e78 <_ZN5Model4tickEv+0x9c>)
90007e22:	7919      	ldrb	r1, [r3, #4]
90007e24:	4790      	blx	r2
	modelListener->setMaxTemperature(applicationContext.maxTemperature);
90007e26:	6820      	ldr	r0, [r4, #0]
90007e28:	4910      	ldr	r1, [pc, #64]	; (90007e6c <_ZN5Model4tickEv+0x90>)
90007e2a:	6803      	ldr	r3, [r0, #0]
90007e2c:	691a      	ldr	r2, [r3, #16]
90007e2e:	428a      	cmp	r2, r1
90007e30:	d0e4      	beq.n	90007dfc <_ZN5Model4tickEv+0x20>
90007e32:	4b11      	ldr	r3, [pc, #68]	; (90007e78 <_ZN5Model4tickEv+0x9c>)
90007e34:	f9b3 1000 	ldrsh.w	r1, [r3]
90007e38:	4790      	blx	r2
	modelListener->setMinTemperature(applicationContext.minTemperature);
90007e3a:	6820      	ldr	r0, [r4, #0]
90007e3c:	490c      	ldr	r1, [pc, #48]	; (90007e70 <_ZN5Model4tickEv+0x94>)
90007e3e:	6803      	ldr	r3, [r0, #0]
90007e40:	695a      	ldr	r2, [r3, #20]
90007e42:	428a      	cmp	r2, r1
90007e44:	d0de      	beq.n	90007e04 <_ZN5Model4tickEv+0x28>
90007e46:	4b0c      	ldr	r3, [pc, #48]	; (90007e78 <_ZN5Model4tickEv+0x9c>)
90007e48:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
90007e4c:	4790      	blx	r2
	modelListener->setTemperatureGraphData((int*) &applicationContext.temperatureData);
90007e4e:	6820      	ldr	r0, [r4, #0]
90007e50:	4a08      	ldr	r2, [pc, #32]	; (90007e74 <_ZN5Model4tickEv+0x98>)
90007e52:	6803      	ldr	r3, [r0, #0]
90007e54:	699b      	ldr	r3, [r3, #24]
90007e56:	4293      	cmp	r3, r2
90007e58:	d0d8      	beq.n	90007e0c <_ZN5Model4tickEv+0x30>
90007e5a:	4908      	ldr	r1, [pc, #32]	; (90007e7c <_ZN5Model4tickEv+0xa0>)
}
90007e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	modelListener->setTemperatureGraphData((int*) &applicationContext.temperatureData);
90007e60:	4718      	bx	r3
90007e62:	bf00      	nop
90007e64:	90007dbd 	.word	0x90007dbd
90007e68:	90007db9 	.word	0x90007db9
90007e6c:	90007dc1 	.word	0x90007dc1
90007e70:	90007dc5 	.word	0x90007dc5
90007e74:	90007dc9 	.word	0x90007dc9
90007e78:	2400cd78 	.word	0x2400cd78
90007e7c:	2400cd80 	.word	0x2400cd80

90007e80 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
90007e80:	4770      	bx	lr
90007e82:	bf00      	nop

90007e84 <_ZThn4_N16Screen1PresenterD1Ev>:
90007e84:	3804      	subs	r0, #4
90007e86:	4770      	bx	lr

90007e88 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
90007e88:	4770      	bx	lr
90007e8a:	bf00      	nop

90007e8c <_ZN16Screen1Presenter14setTemperatureEi>:
{

}

void Screen1Presenter::setTemperature(int value) {
	view.setTemperature(value);
90007e8c:	68c0      	ldr	r0, [r0, #12]
90007e8e:	6803      	ldr	r3, [r0, #0]
90007e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007e92:	4718      	bx	r3

90007e94 <_ZN16Screen1Presenter11setHumidityEi>:
}
void Screen1Presenter::setHumidity(int value) {
	view.setHumidity(value);
90007e94:	68c0      	ldr	r0, [r0, #12]
90007e96:	6803      	ldr	r3, [r0, #0]
90007e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90007e9a:	4718      	bx	r3

90007e9c <_ZN16Screen1PresenterD0Ev>:
90007e9c:	b510      	push	{r4, lr}
90007e9e:	4604      	mov	r4, r0
90007ea0:	2110      	movs	r1, #16
90007ea2:	f01f f8e8 	bl	90027076 <_ZdlPvj>
90007ea6:	4620      	mov	r0, r4
90007ea8:	bd10      	pop	{r4, pc}
90007eaa:	bf00      	nop

90007eac <_ZThn4_N16Screen1PresenterD0Ev>:
90007eac:	b500      	push	{lr}
90007eae:	3804      	subs	r0, #4
90007eb0:	b083      	sub	sp, #12
90007eb2:	2110      	movs	r1, #16
90007eb4:	9001      	str	r0, [sp, #4]
90007eb6:	f01f f8de 	bl	90027076 <_ZdlPvj>
90007eba:	9801      	ldr	r0, [sp, #4]
90007ebc:	b003      	add	sp, #12
90007ebe:	f85d fb04 	ldr.w	pc, [sp], #4
90007ec2:	bf00      	nop

90007ec4 <_ZThn4_N16Screen1Presenter14setTemperatureEi>:
90007ec4:	6880      	ldr	r0, [r0, #8]
90007ec6:	6803      	ldr	r3, [r0, #0]
90007ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007eca:	4718      	bx	r3

90007ecc <_ZThn4_N16Screen1Presenter11setHumidityEi>:
90007ecc:	6880      	ldr	r0, [r0, #8]
90007ece:	6803      	ldr	r3, [r0, #0]
90007ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90007ed2:	4718      	bx	r3

90007ed4 <_ZN16Screen1PresenterC1ER11Screen1View>:
    : view(v)
90007ed4:	4a06      	ldr	r2, [pc, #24]	; (90007ef0 <_ZN16Screen1PresenterC1ER11Screen1View+0x1c>)
90007ed6:	60c1      	str	r1, [r0, #12]
Screen1Presenter::Screen1Presenter(Screen1View& v)
90007ed8:	b410      	push	{r4}
    ModelListener() : model(0) {}
90007eda:	2400      	movs	r4, #0
90007edc:	6084      	str	r4, [r0, #8]
    : view(v)
90007ede:	f102 0408 	add.w	r4, r2, #8
90007ee2:	3228      	adds	r2, #40	; 0x28
90007ee4:	e9c0 4200 	strd	r4, r2, [r0]
}
90007ee8:	f85d 4b04 	ldr.w	r4, [sp], #4
90007eec:	4770      	bx	lr
90007eee:	bf00      	nop
90007ef0:	9002b114 	.word	0x9002b114

90007ef4 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
90007ef4:	4770      	bx	lr
90007ef6:	bf00      	nop

90007ef8 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
90007ef8:	4b03      	ldr	r3, [pc, #12]	; (90007f08 <_ZN11Screen1ViewD1Ev+0x10>)
90007efa:	b510      	push	{r4, lr}
90007efc:	4604      	mov	r4, r0
90007efe:	6003      	str	r3, [r0, #0]
90007f00:	f7fd fdda 	bl	90005ab8 <_ZN15Screen1ViewBaseD1Ev>
90007f04:	4620      	mov	r0, r4
90007f06:	bd10      	pop	{r4, pc}
90007f08:	9002b164 	.word	0x9002b164

90007f0c <_ZN11Screen1ViewD0Ev>:
90007f0c:	4b06      	ldr	r3, [pc, #24]	; (90007f28 <_ZN11Screen1ViewD0Ev+0x1c>)
90007f0e:	b510      	push	{r4, lr}
90007f10:	4604      	mov	r4, r0
90007f12:	6003      	str	r3, [r0, #0]
90007f14:	f7fd fdd0 	bl	90005ab8 <_ZN15Screen1ViewBaseD1Ev>
90007f18:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
90007f1c:	4620      	mov	r0, r4
90007f1e:	f01f f8aa 	bl	90027076 <_ZdlPvj>
90007f22:	4620      	mov	r0, r4
90007f24:	bd10      	pop	{r4, pc}
90007f26:	bf00      	nop
90007f28:	9002b164 	.word	0x9002b164

90007f2c <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
90007f2c:	b510      	push	{r4, lr}
90007f2e:	4604      	mov	r4, r0
90007f30:	f7fd ff82 	bl	90005e38 <_ZN15Screen1ViewBaseC1Ev>
90007f34:	4b01      	ldr	r3, [pc, #4]	; (90007f3c <_ZN11Screen1ViewC1Ev+0x10>)
}
90007f36:	4620      	mov	r0, r4
Screen1View::Screen1View()
90007f38:	6023      	str	r3, [r4, #0]
}
90007f3a:	bd10      	pop	{r4, pc}
90007f3c:	9002b164 	.word	0x9002b164

90007f40 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
90007f40:	f7fd bdbc 	b.w	90005abc <_ZN15Screen1ViewBase11setupScreenEv>

90007f44 <_ZN11Screen1View14setTemperatureEi>:

void Screen1View::setTemperature(int value) {
90007f44:	b510      	push	{r4, lr}
90007f46:	4604      	mov	r4, r0
90007f48:	460b      	mov	r3, r1
	Unicode::snprintf(temperatureTextAreaBuffer, TEMPERATURETEXTAREA_SIZE, "%d", value);
90007f4a:	4a06      	ldr	r2, [pc, #24]	; (90007f64 <_ZN11Screen1View14setTemperatureEi+0x20>)
90007f4c:	2104      	movs	r1, #4
90007f4e:	f500 70e6 	add.w	r0, r0, #460	; 0x1cc
90007f52:	f012 fed3 	bl	9001acfc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	temperatureTextArea.invalidate();
90007f56:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
};
90007f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	temperatureTextArea.invalidate();
90007f5e:	f010 be9c 	b.w	90018c9a <_ZNK8touchgfx8Drawable10invalidateEv>
90007f62:	bf00      	nop
90007f64:	9002b158 	.word	0x9002b158

90007f68 <_ZN11Screen1View11setHumidityEi>:

void Screen1View::setHumidity(int value) {
90007f68:	b510      	push	{r4, lr}
90007f6a:	4604      	mov	r4, r0
90007f6c:	460b      	mov	r3, r1
	Unicode::snprintf(humidityTextAreaBuffer, HUMIDITYTEXTAREA_SIZE, "%d", value);
90007f6e:	4a06      	ldr	r2, [pc, #24]	; (90007f88 <_ZN11Screen1View11setHumidityEi+0x20>)
90007f70:	2104      	movs	r1, #4
90007f72:	f500 70e2 	add.w	r0, r0, #452	; 0x1c4
90007f76:	f012 fec1 	bl	9001acfc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	humidityTextArea.invalidate();
90007f7a:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
};
90007f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	humidityTextArea.invalidate();
90007f82:	f010 be8a 	b.w	90018c9a <_ZNK8touchgfx8Drawable10invalidateEv>
90007f86:	bf00      	nop
90007f88:	9002b158 	.word	0x9002b158

90007f8c <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
90007f8c:	4770      	bx	lr
90007f8e:	bf00      	nop

90007f90 <_ZThn4_N16Screen2PresenterD1Ev>:
90007f90:	3804      	subs	r0, #4
90007f92:	4770      	bx	lr

90007f94 <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
90007f94:	4770      	bx	lr
90007f96:	bf00      	nop

90007f98 <_ZN16Screen2Presenter14setTemperatureEi>:
{

}

void Screen2Presenter::setTemperature(int value) {
	view.setTemperature(value);
90007f98:	68c0      	ldr	r0, [r0, #12]
90007f9a:	6803      	ldr	r3, [r0, #0]
90007f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007f9e:	4718      	bx	r3

90007fa0 <_ZN16Screen2Presenter17setMaxTemperatureEi>:
};

void Screen2Presenter::setMaxTemperature(int value) {
	view.setMaxTemperature(value);
90007fa0:	68c0      	ldr	r0, [r0, #12]
90007fa2:	6803      	ldr	r3, [r0, #0]
90007fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90007fa6:	4718      	bx	r3

90007fa8 <_ZN16Screen2Presenter17setMinTemperatureEi>:
};

void Screen2Presenter::setMinTemperature(int value) {
	view.setMinTemperature(value);
90007fa8:	68c0      	ldr	r0, [r0, #12]
90007faa:	6803      	ldr	r3, [r0, #0]
90007fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90007fae:	4718      	bx	r3

90007fb0 <_ZN16Screen2Presenter23setTemperatureGraphDataEPi>:
};

void Screen2Presenter::setTemperatureGraphData(int* data) {
	view.setTemperatureGraphData(data);
90007fb0:	68c0      	ldr	r0, [r0, #12]
90007fb2:	6803      	ldr	r3, [r0, #0]
90007fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90007fb6:	4718      	bx	r3

90007fb8 <_ZN16Screen2PresenterD0Ev>:
90007fb8:	b510      	push	{r4, lr}
90007fba:	4604      	mov	r4, r0
90007fbc:	2110      	movs	r1, #16
90007fbe:	f01f f85a 	bl	90027076 <_ZdlPvj>
90007fc2:	4620      	mov	r0, r4
90007fc4:	bd10      	pop	{r4, pc}
90007fc6:	bf00      	nop

90007fc8 <_ZThn4_N16Screen2PresenterD0Ev>:
90007fc8:	b500      	push	{lr}
90007fca:	3804      	subs	r0, #4
90007fcc:	b083      	sub	sp, #12
90007fce:	2110      	movs	r1, #16
90007fd0:	9001      	str	r0, [sp, #4]
90007fd2:	f01f f850 	bl	90027076 <_ZdlPvj>
90007fd6:	9801      	ldr	r0, [sp, #4]
90007fd8:	b003      	add	sp, #12
90007fda:	f85d fb04 	ldr.w	pc, [sp], #4
90007fde:	bf00      	nop

90007fe0 <_ZThn4_N16Screen2Presenter14setTemperatureEi>:
90007fe0:	6880      	ldr	r0, [r0, #8]
90007fe2:	6803      	ldr	r3, [r0, #0]
90007fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007fe6:	4718      	bx	r3

90007fe8 <_ZThn4_N16Screen2Presenter17setMaxTemperatureEi>:
90007fe8:	6880      	ldr	r0, [r0, #8]
90007fea:	6803      	ldr	r3, [r0, #0]
90007fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90007fee:	4718      	bx	r3

90007ff0 <_ZThn4_N16Screen2Presenter17setMinTemperatureEi>:
90007ff0:	6880      	ldr	r0, [r0, #8]
90007ff2:	6803      	ldr	r3, [r0, #0]
90007ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90007ff6:	4718      	bx	r3

90007ff8 <_ZThn4_N16Screen2Presenter23setTemperatureGraphDataEPi>:
90007ff8:	6880      	ldr	r0, [r0, #8]
90007ffa:	6803      	ldr	r3, [r0, #0]
90007ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90007ffe:	4718      	bx	r3

90008000 <_ZN16Screen2PresenterC1ER11Screen2View>:
    : view(v)
90008000:	4a06      	ldr	r2, [pc, #24]	; (9000801c <_ZN16Screen2PresenterC1ER11Screen2View+0x1c>)
90008002:	60c1      	str	r1, [r0, #12]
Screen2Presenter::Screen2Presenter(Screen2View& v)
90008004:	b410      	push	{r4}
90008006:	2400      	movs	r4, #0
90008008:	6084      	str	r4, [r0, #8]
    : view(v)
9000800a:	f102 0408 	add.w	r4, r2, #8
9000800e:	3230      	adds	r2, #48	; 0x30
90008010:	e9c0 4200 	strd	r4, r2, [r0]
}
90008014:	f85d 4b04 	ldr.w	r4, [sp], #4
90008018:	4770      	bx	lr
9000801a:	bf00      	nop
9000801c:	9002b198 	.word	0x9002b198

90008020 <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
}
90008020:	4770      	bx	lr
90008022:	bf00      	nop

90008024 <_ZN11Screen2View23setTemperatureGraphDataEPi>:
void Screen2View::setMinTemperature(int value) {
	Unicode::snprintf(minTemperatureTextAreaBuffer, MINTEMPERATURETEXTAREA_SIZE, "%d", value);
	minTemperatureTextArea.invalidate();
};

void Screen2View::setTemperatureGraphData(int* data) {
90008024:	b570      	push	{r4, r5, r6, lr}
	for(int i = 0; i < 10; ++i) {
90008026:	2400      	movs	r4, #0
void Screen2View::setTemperatureGraphData(int* data) {
90008028:	4605      	mov	r5, r0
	  temperatureGraph.addDataPoint(i);
9000802a:	f500 76c6 	add.w	r6, r0, #396	; 0x18c
        return i * scale;
9000802e:	f8d5 11c0 	ldr.w	r1, [r5, #448]	; 0x1c0
        return addDataPointScaled(int2scaledY(y));
90008032:	4630      	mov	r0, r6
90008034:	fb04 f101 	mul.w	r1, r4, r1
	for(int i = 0; i < 10; ++i) {
90008038:	3401      	adds	r4, #1
9000803a:	f00c f946 	bl	900142ca <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
9000803e:	2c0a      	cmp	r4, #10
90008040:	d1f5      	bne.n	9000802e <_ZN11Screen2View23setTemperatureGraphDataEPi+0xa>
	}
};
90008042:	bd70      	pop	{r4, r5, r6, pc}

90008044 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
90008044:	4b03      	ldr	r3, [pc, #12]	; (90008054 <_ZN11Screen2ViewD1Ev+0x10>)
90008046:	b510      	push	{r4, lr}
90008048:	4604      	mov	r4, r0
9000804a:	6003      	str	r3, [r0, #0]
9000804c:	f7fe fbb2 	bl	900067b4 <_ZN15Screen2ViewBaseD1Ev>
90008050:	4620      	mov	r0, r4
90008052:	bd10      	pop	{r4, pc}
90008054:	9002b1ec 	.word	0x9002b1ec

90008058 <_ZN11Screen2ViewD0Ev>:
90008058:	4b06      	ldr	r3, [pc, #24]	; (90008074 <_ZN11Screen2ViewD0Ev+0x1c>)
9000805a:	b510      	push	{r4, lr}
9000805c:	4604      	mov	r4, r0
9000805e:	6003      	str	r3, [r0, #0]
90008060:	f7fe fba8 	bl	900067b4 <_ZN15Screen2ViewBaseD1Ev>
90008064:	f242 0114 	movw	r1, #8212	; 0x2014
90008068:	4620      	mov	r0, r4
9000806a:	f01f f804 	bl	90027076 <_ZdlPvj>
9000806e:	4620      	mov	r0, r4
90008070:	bd10      	pop	{r4, pc}
90008072:	bf00      	nop
90008074:	9002b1ec 	.word	0x9002b1ec

90008078 <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
90008078:	b510      	push	{r4, lr}
9000807a:	4604      	mov	r4, r0
9000807c:	f7fe ff6e 	bl	90006f5c <_ZN15Screen2ViewBaseC1Ev>
90008080:	4b01      	ldr	r3, [pc, #4]	; (90008088 <_ZN11Screen2ViewC1Ev+0x10>)
}
90008082:	4620      	mov	r0, r4
Screen2View::Screen2View()
90008084:	6023      	str	r3, [r4, #0]
}
90008086:	bd10      	pop	{r4, pc}
90008088:	9002b1ec 	.word	0x9002b1ec

9000808c <_ZN11Screen2View11setupScreenEv>:
    Screen2ViewBase::setupScreen();
9000808c:	f7fe bb3c 	b.w	90006708 <_ZN15Screen2ViewBase11setupScreenEv>

90008090 <_ZN11Screen2View14setTemperatureEi>:
void Screen2View::setTemperature(int value) {
90008090:	b510      	push	{r4, lr}
90008092:	4604      	mov	r4, r0
90008094:	460b      	mov	r3, r1
	Unicode::snprintf(temperatureTextAreaBuffer, TEMPERATURETEXTAREA_SIZE, "%d", value);
90008096:	4a06      	ldr	r2, [pc, #24]	; (900080b0 <_ZN11Screen2View14setTemperatureEi+0x20>)
90008098:	2104      	movs	r1, #4
9000809a:	f500 7075 	add.w	r0, r0, #980	; 0x3d4
9000809e:	f012 fe2d 	bl	9001acfc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	temperatureTextArea.invalidate();
900080a2:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
};
900080a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	temperatureTextArea.invalidate();
900080aa:	f010 bdf6 	b.w	90018c9a <_ZNK8touchgfx8Drawable10invalidateEv>
900080ae:	bf00      	nop
900080b0:	9002b158 	.word	0x9002b158

900080b4 <_ZN11Screen2View17setMaxTemperatureEi>:
void Screen2View::setMaxTemperature(int value) {
900080b4:	b510      	push	{r4, lr}
900080b6:	4604      	mov	r4, r0
900080b8:	460b      	mov	r3, r1
	Unicode::snprintf(maxTemperatureTextAreaBuffer, MAXTEMPERATURETEXTAREA_SIZE, "%d", value);
900080ba:	4a06      	ldr	r2, [pc, #24]	; (900080d4 <_ZN11Screen2View17setMaxTemperatureEi+0x20>)
900080bc:	2104      	movs	r1, #4
900080be:	f500 7077 	add.w	r0, r0, #988	; 0x3dc
900080c2:	f012 fe1b 	bl	9001acfc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	maxTemperatureTextArea.invalidate();
900080c6:	f504 70a0 	add.w	r0, r4, #320	; 0x140
};
900080ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	maxTemperatureTextArea.invalidate();
900080ce:	f010 bde4 	b.w	90018c9a <_ZNK8touchgfx8Drawable10invalidateEv>
900080d2:	bf00      	nop
900080d4:	9002b158 	.word	0x9002b158

900080d8 <_ZN11Screen2View17setMinTemperatureEi>:
void Screen2View::setMinTemperature(int value) {
900080d8:	b510      	push	{r4, lr}
900080da:	4604      	mov	r4, r0
900080dc:	460b      	mov	r3, r1
	Unicode::snprintf(minTemperatureTextAreaBuffer, MINTEMPERATURETEXTAREA_SIZE, "%d", value);
900080de:	4a06      	ldr	r2, [pc, #24]	; (900080f8 <_ZN11Screen2View17setMinTemperatureEi+0x20>)
900080e0:	2104      	movs	r1, #4
900080e2:	f500 7073 	add.w	r0, r0, #972	; 0x3cc
900080e6:	f012 fe09 	bl	9001acfc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	minTemperatureTextArea.invalidate();
900080ea:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
};
900080ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	minTemperatureTextArea.invalidate();
900080f2:	f010 bdd2 	b.w	90018c9a <_ZNK8touchgfx8Drawable10invalidateEv>
900080f6:	bf00      	nop
900080f8:	9002b158 	.word	0x9002b158

900080fc <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
900080fc:	f240 1c01 	movw	ip, #257	; 0x101
  Capabilities->Gesture    = 1;
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
90008100:	2005      	movs	r0, #5
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
90008102:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
90008106:	f44f 7388 	mov.w	r3, #272	; 0x110
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
9000810a:	7088      	strb	r0, [r1, #2]

  return FT5336_OK;
}
9000810c:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
9000810e:	f8a1 c000 	strh.w	ip, [r1]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
90008112:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
90008116:	4770      	bx	lr

90008118 <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
90008118:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
9000811c:	2b01      	cmp	r3, #1
9000811e:	d102      	bne.n	90008126 <FT5336_DeInit+0xe>
  {
    pObj->IsInitialized = 0;
90008120:	2300      	movs	r3, #0
90008122:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return ret;
}
90008126:	2000      	movs	r0, #0
90008128:	4770      	bx	lr
9000812a:	bf00      	nop

9000812c <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
9000812c:	2000      	movs	r0, #0
9000812e:	4770      	bx	lr

90008130 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90008130:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90008132:	6904      	ldr	r4, [r0, #16]
90008134:	8900      	ldrh	r0, [r0, #8]
90008136:	46a4      	mov	ip, r4
}
90008138:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
9000813c:	4760      	bx	ip
9000813e:	bf00      	nop

90008140 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90008140:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90008142:	68c4      	ldr	r4, [r0, #12]
90008144:	8900      	ldrh	r0, [r0, #8]
90008146:	46a4      	mov	ip, r4
}
90008148:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
9000814c:	4760      	bx	ip
9000814e:	bf00      	nop

90008150 <FT5336_GestureConfig>:
{
90008150:	b570      	push	{r4, r5, r6, lr}
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
90008152:	f100 0518 	add.w	r5, r0, #24
{
90008156:	460e      	mov	r6, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
90008158:	7809      	ldrb	r1, [r1, #0]
9000815a:	4628      	mov	r0, r5
9000815c:	f000 f96c 	bl	90008438 <ft5336_radian_value>
90008160:	4604      	mov	r4, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
90008162:	7931      	ldrb	r1, [r6, #4]
90008164:	4628      	mov	r0, r5
90008166:	f000 f975 	bl	90008454 <ft5336_offset_left_right>
9000816a:	4404      	add	r4, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
9000816c:	7a31      	ldrb	r1, [r6, #8]
9000816e:	4628      	mov	r0, r5
90008170:	f000 f97e 	bl	90008470 <ft5336_offset_up_down>
90008174:	4404      	add	r4, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
90008176:	7b31      	ldrb	r1, [r6, #12]
90008178:	4628      	mov	r0, r5
9000817a:	f000 f987 	bl	9000848c <ft5336_disatnce_left_right>
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
9000817e:	7c31      	ldrb	r1, [r6, #16]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
90008180:	4404      	add	r4, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90008182:	4628      	mov	r0, r5
90008184:	f000 f990 	bl	900084a8 <ft5336_distance_up_down>
90008188:	4603      	mov	r3, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
9000818a:	7d31      	ldrb	r1, [r6, #20]
9000818c:	4628      	mov	r0, r5
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
9000818e:	441c      	add	r4, r3
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
90008190:	f000 f998 	bl	900084c4 <ft5336_distance_zoom>
  if(ret != FT5336_OK)
90008194:	42c4      	cmn	r4, r0
}
90008196:	bf14      	ite	ne
90008198:	f04f 30ff 	movne.w	r0, #4294967295
9000819c:	2000      	moveq	r0, #0
9000819e:	bd70      	pop	{r4, r5, r6, pc}

900081a0 <FT5336_ReadID>:
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
900081a0:	3018      	adds	r0, #24
900081a2:	f000 b9ab 	b.w	900084fc <ft5336_chip_id>
900081a6:	bf00      	nop

900081a8 <FT5336_GetState>:
{
900081a8:	b530      	push	{r4, r5, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
900081aa:	f100 0518 	add.w	r5, r0, #24
{
900081ae:	b083      	sub	sp, #12
900081b0:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
900081b2:	4628      	mov	r0, r5
900081b4:	a901      	add	r1, sp, #4
900081b6:	f000 f931 	bl	9000841c <ft5336_td_status>
900081ba:	bb10      	cbnz	r0, 90008202 <FT5336_GetState+0x5a>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
900081bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
900081c0:	2b05      	cmp	r3, #5
900081c2:	bf94      	ite	ls
900081c4:	4619      	movls	r1, r3
900081c6:	2100      	movhi	r1, #0
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
900081c8:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
900081ca:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
900081cc:	4628      	mov	r0, r5
900081ce:	2103      	movs	r1, #3
900081d0:	eb0d 0203 	add.w	r2, sp, r3
900081d4:	f000 f910 	bl	900083f8 <ft5336_read_reg>
900081d8:	b9b0      	cbnz	r0, 90008208 <FT5336_GetState+0x60>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
900081da:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
900081de:	f89d 3006 	ldrb.w	r3, [sp, #6]
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
900081e2:	0212      	lsls	r2, r2, #8
900081e4:	f89d 1005 	ldrb.w	r1, [sp, #5]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
900081e8:	021b      	lsls	r3, r3, #8
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
900081ea:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
900081ee:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
900081f2:	430a      	orrs	r2, r1
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
900081f4:	f89d 1007 	ldrb.w	r1, [sp, #7]
900081f8:	430b      	orrs	r3, r1
900081fa:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
900081fe:	b003      	add	sp, #12
90008200:	bd30      	pop	{r4, r5, pc}
90008202:	f04f 31ff 	mov.w	r1, #4294967295
90008206:	e7df      	b.n	900081c8 <FT5336_GetState+0x20>
    ret = FT5336_ERROR;
90008208:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
9000820c:	e7f7      	b.n	900081fe <FT5336_GetState+0x56>
9000820e:	bf00      	nop

90008210 <FT5336_GetMultiTouchState>:
{
90008210:	b570      	push	{r4, r5, r6, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90008212:	f100 0518 	add.w	r5, r0, #24
{
90008216:	b088      	sub	sp, #32
90008218:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
9000821a:	4628      	mov	r0, r5
9000821c:	4669      	mov	r1, sp
9000821e:	f000 f8fd 	bl	9000841c <ft5336_td_status>
90008222:	2800      	cmp	r0, #0
90008224:	f040 809a 	bne.w	9000835c <FT5336_GetMultiTouchState+0x14c>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
90008228:	f89d 3000 	ldrb.w	r3, [sp]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
9000822c:	2b05      	cmp	r3, #5
9000822e:	bf94      	ite	ls
90008230:	4619      	movls	r1, r3
90008232:	2100      	movhi	r1, #0
90008234:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90008236:	231e      	movs	r3, #30
90008238:	466a      	mov	r2, sp
9000823a:	4628      	mov	r0, r5
9000823c:	2103      	movs	r1, #3
9000823e:	f000 f8db 	bl	900083f8 <ft5336_read_reg>
90008242:	2800      	cmp	r0, #0
90008244:	f040 808d 	bne.w	90008362 <FT5336_GetMultiTouchState+0x152>
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008248:	f89d 1000 	ldrb.w	r1, [sp]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000824c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008250:	020a      	lsls	r2, r1, #8
90008252:	f89d 5001 	ldrb.w	r5, [sp, #1]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008256:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008258:	f89d c007 	ldrb.w	ip, [sp, #7]
9000825c:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90008260:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008262:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90008266:	f89d 6011 	ldrb.w	r6, [sp, #17]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000826a:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000826c:	f89d 5003 	ldrb.w	r5, [sp, #3]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90008270:	6421      	str	r1, [r4, #64]	; 0x40
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90008272:	0936      	lsrs	r6, r6, #4
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008274:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008276:	6062      	str	r2, [r4, #4]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90008278:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000827c:	61a3      	str	r3, [r4, #24]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000827e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008282:	f89d 1006 	ldrb.w	r1, [sp, #6]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90008286:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90008288:	62e2      	str	r2, [r4, #44]	; 0x2c
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000828a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000828e:	020d      	lsls	r5, r1, #8
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90008290:	6563      	str	r3, [r4, #84]	; 0x54
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90008292:	0989      	lsrs	r1, r1, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008294:	f89d 300c 	ldrb.w	r3, [sp, #12]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90008298:	0912      	lsrs	r2, r2, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
9000829a:	6461      	str	r1, [r4, #68]	; 0x44
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000829c:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900082a0:	f89d 100a 	ldrb.w	r1, [sp, #10]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900082a4:	65a2      	str	r2, [r4, #88]	; 0x58
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900082a6:	021a      	lsls	r2, r3, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900082a8:	6321      	str	r1, [r4, #48]	; 0x30
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900082aa:	ea45 050c 	orr.w	r5, r5, ip
900082ae:	f402 6170 	and.w	r1, r2, #3840	; 0xf00
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900082b2:	f89d 2008 	ldrb.w	r2, [sp, #8]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900082b6:	099b      	lsrs	r3, r3, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900082b8:	60a5      	str	r5, [r4, #8]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900082ba:	0212      	lsls	r2, r2, #8
900082bc:	f89d 5009 	ldrb.w	r5, [sp, #9]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900082c0:	64a3      	str	r3, [r4, #72]	; 0x48
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900082c2:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900082c6:	f89d 3010 	ldrb.w	r3, [sp, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900082ca:	432a      	orrs	r2, r5
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900082cc:	6363      	str	r3, [r4, #52]	; 0x34
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900082ce:	f89d 300e 	ldrb.w	r3, [sp, #14]
900082d2:	61e2      	str	r2, [r4, #28]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900082d4:	f89d 200d 	ldrb.w	r2, [sp, #13]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900082d8:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900082da:	430a      	orrs	r2, r1
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900082dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900082e0:	60e2      	str	r2, [r4, #12]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900082e2:	f89d 200f 	ldrb.w	r2, [sp, #15]
900082e6:	4313      	orrs	r3, r2
900082e8:	6223      	str	r3, [r4, #32]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900082ea:	65e6      	str	r6, [r4, #92]	; 0x5c
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900082ec:	f89d 1012 	ldrb.w	r1, [sp, #18]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900082f0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900082f4:	020a      	lsls	r2, r1, #8
900082f6:	f89d 5013 	ldrb.w	r5, [sp, #19]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900082fa:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900082fc:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90008300:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008302:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008306:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008308:	f89d 5015 	ldrb.w	r5, [sp, #21]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
9000830c:	64e1      	str	r1, [r4, #76]	; 0x4c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000830e:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008310:	f89d 1018 	ldrb.w	r1, [sp, #24]
90008314:	6122      	str	r2, [r4, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008316:	6263      	str	r3, [r4, #36]	; 0x24
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008318:	020b      	lsls	r3, r1, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
9000831a:	f89d 2016 	ldrb.w	r2, [sp, #22]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
9000831e:	0989      	lsrs	r1, r1, #6
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90008320:	f89d 5017 	ldrb.w	r5, [sp, #23]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90008324:	63a2      	str	r2, [r4, #56]	; 0x38
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008326:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000832a:	f89d 301d 	ldrb.w	r3, [sp, #29]
9000832e:	092d      	lsrs	r5, r5, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90008330:	6521      	str	r1, [r4, #80]	; 0x50
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90008332:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90008334:	f89d 101c 	ldrb.w	r1, [sp, #28]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90008338:	6625      	str	r5, [r4, #96]	; 0x60
9000833a:	6663      	str	r3, [r4, #100]	; 0x64
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000833c:	f89d 301a 	ldrb.w	r3, [sp, #26]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90008340:	63e1      	str	r1, [r4, #60]	; 0x3c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008342:	021b      	lsls	r3, r3, #8
90008344:	f89d 101b 	ldrb.w	r1, [sp, #27]
90008348:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
9000834c:	430b      	orrs	r3, r1
9000834e:	62a3      	str	r3, [r4, #40]	; 0x28
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008350:	f89d 3019 	ldrb.w	r3, [sp, #25]
90008354:	4313      	orrs	r3, r2
90008356:	6163      	str	r3, [r4, #20]
}
90008358:	b008      	add	sp, #32
9000835a:	bd70      	pop	{r4, r5, r6, pc}
9000835c:	f04f 31ff 	mov.w	r1, #4294967295
90008360:	e768      	b.n	90008234 <FT5336_GetMultiTouchState+0x24>
    ret = FT5336_ERROR;
90008362:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
90008366:	e7f7      	b.n	90008358 <FT5336_GetMultiTouchState+0x148>

90008368 <FT5336_GetGesture>:
  return ft5336_gest_id(&pObj->Ctx, GestureId);
90008368:	3018      	adds	r0, #24
9000836a:	f000 b84d 	b.w	90008408 <ft5336_gest_id>
9000836e:	bf00      	nop

90008370 <FT5336_EnableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
90008370:	2101      	movs	r1, #1
90008372:	3018      	adds	r0, #24
90008374:	f000 b8b4 	b.w	900084e0 <ft5336_g_mode>

90008378 <FT5336_DisableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
90008378:	2100      	movs	r1, #0
9000837a:	3018      	adds	r0, #24
9000837c:	f000 b8b0 	b.w	900084e0 <ft5336_g_mode>

90008380 <FT5336_Init>:
{
90008380:	b570      	push	{r4, r5, r6, lr}
  if(pObj->IsInitialized == 0U)
90008382:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
90008386:	b98d      	cbnz	r5, 900083ac <FT5336_Init+0x2c>
    pObj->IO.Init();
90008388:	4606      	mov	r6, r0
9000838a:	4604      	mov	r4, r0
9000838c:	f856 3b18 	ldr.w	r3, [r6], #24
90008390:	4798      	blx	r3
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
90008392:	4629      	mov	r1, r5
90008394:	4630      	mov	r0, r6
90008396:	f000 f8a3 	bl	900084e0 <ft5336_g_mode>
  if(ret != FT5336_OK)
9000839a:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
9000839c:	f04f 0301 	mov.w	r3, #1
  if(ret != FT5336_OK)
900083a0:	bf18      	it	ne
900083a2:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
900083a4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
900083a8:	4240      	negs	r0, r0
}
900083aa:	bd70      	pop	{r4, r5, r6, pc}
  int32_t ret = FT5336_OK;
900083ac:	2000      	movs	r0, #0
}
900083ae:	bd70      	pop	{r4, r5, r6, pc}

900083b0 <FT5336_ClearIT>:
900083b0:	2000      	movs	r0, #0
900083b2:	4770      	bx	lr

900083b4 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
900083b4:	b1c0      	cbz	r0, 900083e8 <FT5336_RegisterBusIO+0x34>
    pObj->IO.Address   = pIO->Address;
900083b6:	890a      	ldrh	r2, [r1, #8]
{
900083b8:	b430      	push	{r4, r5}
    pObj->IO.DeInit    = pIO->DeInit;
900083ba:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
900083be:	8102      	strh	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
900083c0:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.WriteReg  = pIO->WriteReg;
900083c4:	694a      	ldr	r2, [r1, #20]
900083c6:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
    pObj->Ctx.ReadReg  = ReadRegWrap;
900083ca:	4909      	ldr	r1, [pc, #36]	; (900083f0 <FT5336_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
900083cc:	60c5      	str	r5, [r0, #12]
900083ce:	e9c0 4204 	strd	r4, r2, [r0, #16]
    pObj->Ctx.WriteReg = WriteRegWrap;
900083d2:	4a08      	ldr	r2, [pc, #32]	; (900083f4 <FT5336_RegisterBusIO+0x40>)
    pObj->Ctx.handle   = pObj;
900083d4:	e9c0 1007 	strd	r1, r0, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
900083d8:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
900083da:	b10b      	cbz	r3, 900083e0 <FT5336_RegisterBusIO+0x2c>
}
900083dc:	bc30      	pop	{r4, r5}
      ret = pObj->IO.Init();
900083de:	4718      	bx	r3
}
900083e0:	f04f 30ff 	mov.w	r0, #4294967295
900083e4:	bc30      	pop	{r4, r5}
900083e6:	4770      	bx	lr
900083e8:	f04f 30ff 	mov.w	r0, #4294967295
900083ec:	4770      	bx	lr
900083ee:	bf00      	nop
900083f0:	90008131 	.word	0x90008131
900083f4:	90008141 	.word	0x90008141

900083f8 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
900083f8:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900083fa:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
900083fe:	46a4      	mov	ip, r4
}
90008400:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90008404:	4760      	bx	ip
90008406:	bf00      	nop

90008408 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90008408:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
9000840a:	2301      	movs	r3, #1
{
9000840c:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
9000840e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
90008412:	4619      	mov	r1, r3
90008414:	46a4      	mov	ip, r4
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
}
90008416:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
9000841a:	4760      	bx	ip

9000841c <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
9000841c:	b538      	push	{r3, r4, r5, lr}
9000841e:	460c      	mov	r4, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90008420:	2301      	movs	r3, #1
90008422:	2102      	movs	r1, #2
90008424:	4622      	mov	r2, r4
90008426:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
9000842a:	47a8      	blx	r5
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
  
  if(ret == 0)
9000842c:	b918      	cbnz	r0, 90008436 <ft5336_td_status+0x1a>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
9000842e:	7823      	ldrb	r3, [r4, #0]
90008430:	f003 030f 	and.w	r3, r3, #15
90008434:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
90008436:	bd38      	pop	{r3, r4, r5, pc}

90008438 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
90008438:	b510      	push	{r4, lr}
9000843a:	460c      	mov	r4, r1
9000843c:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
9000843e:	2301      	movs	r3, #1
90008440:	2191      	movs	r1, #145	; 0x91
{
90008442:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008446:	f10d 0207 	add.w	r2, sp, #7
9000844a:	6804      	ldr	r4, [r0, #0]
9000844c:	6880      	ldr	r0, [r0, #8]
9000844e:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
}
90008450:	b002      	add	sp, #8
90008452:	bd10      	pop	{r4, pc}

90008454 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90008454:	b510      	push	{r4, lr}
90008456:	460c      	mov	r4, r1
90008458:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
9000845a:	2301      	movs	r3, #1
9000845c:	2192      	movs	r1, #146	; 0x92
{
9000845e:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008462:	f10d 0207 	add.w	r2, sp, #7
90008466:	6804      	ldr	r4, [r0, #0]
90008468:	6880      	ldr	r0, [r0, #8]
9000846a:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
}
9000846c:	b002      	add	sp, #8
9000846e:	bd10      	pop	{r4, pc}

90008470 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
90008470:	b510      	push	{r4, lr}
90008472:	460c      	mov	r4, r1
90008474:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008476:	2301      	movs	r3, #1
90008478:	2193      	movs	r1, #147	; 0x93
{
9000847a:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
9000847e:	f10d 0207 	add.w	r2, sp, #7
90008482:	6804      	ldr	r4, [r0, #0]
90008484:	6880      	ldr	r0, [r0, #8]
90008486:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
}
90008488:	b002      	add	sp, #8
9000848a:	bd10      	pop	{r4, pc}

9000848c <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
9000848c:	b510      	push	{r4, lr}
9000848e:	460c      	mov	r4, r1
90008490:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008492:	2301      	movs	r3, #1
90008494:	2194      	movs	r1, #148	; 0x94
{
90008496:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
9000849a:	f10d 0207 	add.w	r2, sp, #7
9000849e:	6804      	ldr	r4, [r0, #0]
900084a0:	6880      	ldr	r0, [r0, #8]
900084a2:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
}
900084a4:	b002      	add	sp, #8
900084a6:	bd10      	pop	{r4, pc}

900084a8 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
900084a8:	b510      	push	{r4, lr}
900084aa:	460c      	mov	r4, r1
900084ac:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900084ae:	2301      	movs	r3, #1
900084b0:	2195      	movs	r1, #149	; 0x95
{
900084b2:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900084b6:	f10d 0207 	add.w	r2, sp, #7
900084ba:	6804      	ldr	r4, [r0, #0]
900084bc:	6880      	ldr	r0, [r0, #8]
900084be:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
}
900084c0:	b002      	add	sp, #8
900084c2:	bd10      	pop	{r4, pc}

900084c4 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
900084c4:	b510      	push	{r4, lr}
900084c6:	460c      	mov	r4, r1
900084c8:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900084ca:	2301      	movs	r3, #1
900084cc:	2196      	movs	r1, #150	; 0x96
{
900084ce:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900084d2:	f10d 0207 	add.w	r2, sp, #7
900084d6:	6804      	ldr	r4, [r0, #0]
900084d8:	6880      	ldr	r0, [r0, #8]
900084da:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
}
900084dc:	b002      	add	sp, #8
900084de:	bd10      	pop	{r4, pc}

900084e0 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
900084e0:	b510      	push	{r4, lr}
900084e2:	460c      	mov	r4, r1
900084e4:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900084e6:	2301      	movs	r3, #1
900084e8:	21a4      	movs	r1, #164	; 0xa4
{
900084ea:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900084ee:	f10d 0207 	add.w	r2, sp, #7
900084f2:	6804      	ldr	r4, [r0, #0]
900084f4:	6880      	ldr	r0, [r0, #8]
900084f6:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
}
900084f8:	b002      	add	sp, #8
900084fa:	bd10      	pop	{r4, pc}

900084fc <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
900084fc:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900084fe:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
90008502:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90008504:	2301      	movs	r3, #1
90008506:	46a4      	mov	ip, r4
90008508:	21a8      	movs	r1, #168	; 0xa8
    *value &= FT5336_CHIP_ID_BIT_MASK; 
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
  }
  
  return ret;
}
9000850a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
9000850e:	4760      	bx	ip

90008510 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
90008510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int32_t ret = MT48LC4M32B2_ERROR;
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90008512:	680b      	ldr	r3, [r1, #0]
{
90008514:	460d      	mov	r5, r1
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
90008516:	4c2a      	ldr	r4, [pc, #168]	; (900085c0 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandTarget          = Interface;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008518:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
9000851c:	4607      	mov	r7, r0
  Command.CommandTarget          = Interface;
9000851e:	6063      	str	r3, [r4, #4]
  Command.ModeRegisterDefinition = 0;
90008520:	2300      	movs	r3, #0
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008522:	4621      	mov	r1, r4
  Command.ModeRegisterDefinition = 0;
90008524:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
90008526:	2301      	movs	r3, #1
90008528:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
9000852a:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
9000852c:	f005 fd2a 	bl	9000df84 <HAL_SDRAM_SendCommand>
90008530:	2800      	cmp	r0, #0
90008532:	d142      	bne.n	900085ba <MT48LC4M32B2_Init+0xaa>
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
90008534:	f000 ff46 	bl	900093c4 <HAL_GetTick>
90008538:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
9000853a:	f000 ff43 	bl	900093c4 <HAL_GetTick>
9000853e:	4286      	cmp	r6, r0
90008540:	d0fb      	beq.n	9000853a <MT48LC4M32B2_Init+0x2a>
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
90008542:	2302      	movs	r3, #2
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90008544:	682a      	ldr	r2, [r5, #0]
  Command.AutoRefreshNumber      = 1;
90008546:	2601      	movs	r6, #1
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008548:	491d      	ldr	r1, [pc, #116]	; (900085c0 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
9000854a:	6023      	str	r3, [r4, #0]
  Command.ModeRegisterDefinition = 0;
9000854c:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
9000854e:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008550:	4638      	mov	r0, r7
90008552:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 1;
90008556:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
90008558:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
9000855a:	f005 fd13 	bl	9000df84 <HAL_SDRAM_SendCommand>
9000855e:	bb60      	cbnz	r0, 900085ba <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008560:	4917      	ldr	r1, [pc, #92]	; (900085c0 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandMode            = RefreshMode;
90008562:	e9d5 3200 	ldrd	r3, r2, [r5]
  Command.ModeRegisterDefinition = 0;
90008566:	60e0      	str	r0, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008568:	4638      	mov	r0, r7
  Command.CommandMode            = RefreshMode;
9000856a:	e9c4 2300 	strd	r2, r3, [r4]
  Command.AutoRefreshNumber      = 8;
9000856e:	2308      	movs	r3, #8
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008570:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 8;
90008574:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008576:	f005 fd05 	bl	9000df84 <HAL_SDRAM_SendCommand>
9000857a:	b9f0      	cbnz	r0, 900085ba <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
9000857c:	4910      	ldr	r1, [pc, #64]	; (900085c0 <MT48LC4M32B2_Init+0xb0>)
9000857e:	4638      	mov	r0, r7
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90008580:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
90008584:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
90008586:	696a      	ldr	r2, [r5, #20]
90008588:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
9000858a:	69aa      	ldr	r2, [r5, #24]
9000858c:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
9000858e:	69ea      	ldr	r2, [r5, #28]
90008590:	4313      	orrs	r3, r2
  Command.CommandTarget          = pRegMode->TargetBank;
90008592:	682a      	ldr	r2, [r5, #0]
  Command.ModeRegisterDefinition = tmpmrd;
90008594:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
90008596:	2304      	movs	r3, #4
  Command.CommandTarget          = pRegMode->TargetBank;
90008598:	e9c4 2601 	strd	r2, r6, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
9000859c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
900085a0:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900085a2:	f005 fcef 	bl	9000df84 <HAL_SDRAM_SendCommand>
900085a6:	b940      	cbnz	r0, 900085ba <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
900085a8:	68a9      	ldr	r1, [r5, #8]
900085aa:	4638      	mov	r0, r7
900085ac:	f005 fd0a 	bl	9000dfc4 <HAL_SDRAM_ProgramRefreshRate>
900085b0:	3800      	subs	r0, #0
900085b2:	bf18      	it	ne
900085b4:	2001      	movne	r0, #1
900085b6:	4240      	negs	r0, r0
}
900085b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = MT48LC4M32B2_ERROR;
900085ba:	f04f 30ff 	mov.w	r0, #4294967295
}
900085be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
900085c0:	2400d148 	.word	0x2400d148

900085c4 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
900085c4:	4a10      	ldr	r2, [pc, #64]	; (90008608 <BSP_I2C4_DeInit+0x44>)
{
900085c6:	b508      	push	{r3, lr}
  I2c4InitCounter--;
900085c8:	6813      	ldr	r3, [r2, #0]
900085ca:	3b01      	subs	r3, #1
900085cc:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
900085ce:	b10b      	cbz	r3, 900085d4 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
900085d0:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
900085d2:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
900085d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
900085d8:	480c      	ldr	r0, [pc, #48]	; (9000860c <BSP_I2C4_DeInit+0x48>)
900085da:	f001 faaf 	bl	90009b3c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
900085de:	480b      	ldr	r0, [pc, #44]	; (9000860c <BSP_I2C4_DeInit+0x48>)
900085e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
900085e4:	f001 faaa 	bl	90009b3c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
900085e8:	4a09      	ldr	r2, [pc, #36]	; (90008610 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
900085ea:	480a      	ldr	r0, [pc, #40]	; (90008614 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
900085ec:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
900085f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
900085f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
900085f8:	f001 fd48 	bl	9000a08c <HAL_I2C_DeInit>
900085fc:	2800      	cmp	r0, #0
900085fe:	d0e7      	beq.n	900085d0 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
90008600:	f06f 0007 	mvn.w	r0, #7
}
90008604:	bd08      	pop	{r3, pc}
90008606:	bf00      	nop
90008608:	2400d158 	.word	0x2400d158
9000860c:	58020c00 	.word	0x58020c00
90008610:	58024400 	.word	0x58024400
90008614:	2400db60 	.word	0x2400db60

90008618 <MX_I2C4_Init>:
  hI2c->Init.OwnAddress1      = 0;
90008618:	2300      	movs	r3, #0
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
9000861a:	2201      	movs	r2, #1
{
9000861c:	b510      	push	{r4, lr}
  hI2c->Init.OwnAddress1      = 0;
9000861e:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
90008622:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90008626:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
9000862a:	e9c0 3307 	strd	r3, r3, [r0, #28]
{
9000862e:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hI2c) != HAL_OK)
90008630:	f001 fcd4 	bl	90009fdc <HAL_I2C_Init>
90008634:	b108      	cbz	r0, 9000863a <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
90008636:	2001      	movs	r0, #1
}
90008638:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
9000863a:	4601      	mov	r1, r0
9000863c:	4620      	mov	r0, r4
9000863e:	f001 ffe3 	bl	9000a608 <HAL_I2CEx_ConfigAnalogFilter>
90008642:	2800      	cmp	r0, #0
90008644:	d1f7      	bne.n	90008636 <MX_I2C4_Init+0x1e>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
90008646:	4601      	mov	r1, r0
90008648:	4620      	mov	r0, r4
9000864a:	f002 f807 	bl	9000a65c <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
9000864e:	3800      	subs	r0, #0
90008650:	bf18      	it	ne
90008652:	2001      	movne	r0, #1
}
90008654:	bd10      	pop	{r4, pc}
90008656:	bf00      	nop

90008658 <BSP_I2C4_Init>:
  if (I2c4InitCounter == 0U)
90008658:	4b99      	ldr	r3, [pc, #612]	; (900088c0 <BSP_I2C4_Init+0x268>)
  hbus_i2c4.Instance = BUS_I2C4;
9000865a:	489a      	ldr	r0, [pc, #616]	; (900088c4 <BSP_I2C4_Init+0x26c>)
9000865c:	4a9a      	ldr	r2, [pc, #616]	; (900088c8 <BSP_I2C4_Init+0x270>)
  if (I2c4InitCounter == 0U)
9000865e:	6819      	ldr	r1, [r3, #0]
{
90008660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90008664:	b09f      	sub	sp, #124	; 0x7c
  hbus_i2c4.Instance = BUS_I2C4;
90008666:	6002      	str	r2, [r0, #0]
  if (I2c4InitCounter == 0U)
90008668:	9103      	str	r1, [sp, #12]
9000866a:	b119      	cbz	r1, 90008674 <BSP_I2C4_Init+0x1c>
  int32_t ret = BSP_ERROR_NONE;
9000866c:	2000      	movs	r0, #0
}
9000866e:	b01f      	add	sp, #124	; 0x7c
90008670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
90008674:	2201      	movs	r2, #1
90008676:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
90008678:	f001 ffc0 	bl	9000a5fc <HAL_I2C_GetState>
9000867c:	2800      	cmp	r0, #0
9000867e:	d1f5      	bne.n	9000866c <BSP_I2C4_Init+0x14>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90008680:	4c92      	ldr	r4, [pc, #584]	; (900088cc <BSP_I2C4_Init+0x274>)
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90008682:	f44f 5080 	mov.w	r0, #4096	; 0x1000
90008686:	2112      	movs	r1, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90008688:	2504      	movs	r5, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
9000868a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
9000868e:	2600      	movs	r6, #0
90008690:	2702      	movs	r7, #2
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90008692:	f043 0308 	orr.w	r3, r3, #8
90008696:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
9000869a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
9000869e:	f003 0308 	and.w	r3, r3, #8
900086a2:	9315      	str	r3, [sp, #84]	; 0x54
900086a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
900086a6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
900086aa:	f043 0308 	orr.w	r3, r3, #8
900086ae:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
900086b2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
900086b6:	951c      	str	r5, [sp, #112]	; 0x70
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
900086b8:	f003 0308 	and.w	r3, r3, #8
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
900086bc:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
900086c0:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
900086c2:	a918      	add	r1, sp, #96	; 0x60
900086c4:	4882      	ldr	r0, [pc, #520]	; (900088d0 <BSP_I2C4_Init+0x278>)
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
900086c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
900086c8:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
900086cc:	f001 f904 	bl	900098d8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
900086d0:	2312      	movs	r3, #18
900086d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
900086d6:	a918      	add	r1, sp, #96	; 0x60
900086d8:	487d      	ldr	r0, [pc, #500]	; (900088d0 <BSP_I2C4_Init+0x278>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
900086da:	951c      	str	r5, [sp, #112]	; 0x70
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
900086dc:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
900086e0:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
900086e4:	f001 f8f8 	bl	900098d8 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
900086e8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
900086ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900086f0:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
900086f4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
900086f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
900086fc:	9317      	str	r3, [sp, #92]	; 0x5c
900086fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  BUS_I2C4_FORCE_RESET();
90008700:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
90008704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90008708:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
9000870c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
90008710:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90008714:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
90008718:	f004 fc94 	bl	9000d044 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
9000871c:	2800      	cmp	r0, #0
9000871e:	f000 81f6 	beq.w	90008b0e <BSP_I2C4_Init+0x4b6>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90008722:	4b6c      	ldr	r3, [pc, #432]	; (900088d4 <BSP_I2C4_Init+0x27c>)
  uint32_t prev_presc = I2C_PRESC_MAX;
90008724:	f04f 0b10 	mov.w	fp, #16
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90008728:	9e03      	ldr	r6, [sp, #12]
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
9000872a:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000872e:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 900088dc <BSP_I2C4_Init+0x284>
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90008732:	4635      	mov	r5, r6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90008734:	fbb3 f7f0 	udiv	r7, r3, r0
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90008738:	00bb      	lsls	r3, r7, #2
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
9000873a:	9702      	str	r7, [sp, #8]
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
9000873c:	eb07 0247 	add.w	r2, r7, r7, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90008740:	f5c3 7cc3 	rsb	ip, r3, #390	; 0x186
90008744:	4b64      	ldr	r3, [pc, #400]	; (900088d8 <BSP_I2C4_Init+0x280>)
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90008746:	f1c2 0432 	rsb	r4, r2, #50	; 0x32
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
9000874a:	0079      	lsls	r1, r7, #1
9000874c:	681b      	ldr	r3, [r3, #0]
9000874e:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
90008752:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
90008756:	9113      	str	r1, [sp, #76]	; 0x4c
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90008758:	4699      	mov	r9, r3
9000875a:	930a      	str	r3, [sp, #40]	; 0x28
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
9000875c:	ebb4 0f47 	cmp.w	r4, r7, lsl #1
90008760:	46b8      	mov	r8, r7
90008762:	eb07 0347 	add.w	r3, r7, r7, lsl #1
90008766:	bf94      	ite	ls
90008768:	2101      	movls	r1, #1
9000876a:	2100      	movhi	r1, #0
9000876c:	ebbc 0f47 	cmp.w	ip, r7, lsl #1
90008770:	f001 0101 	and.w	r1, r1, #1
90008774:	eb07 0287 	add.w	r2, r7, r7, lsl #2
90008778:	bf38      	it	cc
9000877a:	2100      	movcc	r1, #0
9000877c:	429c      	cmp	r4, r3
9000877e:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
90008782:	9105      	str	r1, [sp, #20]
90008784:	bf8c      	ite	hi
90008786:	2100      	movhi	r1, #0
90008788:	2101      	movls	r1, #1
9000878a:	459c      	cmp	ip, r3
9000878c:	bf38      	it	cc
9000878e:	2100      	movcc	r1, #0
90008790:	ebb4 0f87 	cmp.w	r4, r7, lsl #2
90008794:	9106      	str	r1, [sp, #24]
90008796:	eb07 0142 	add.w	r1, r7, r2, lsl #1
9000879a:	9104      	str	r1, [sp, #16]
9000879c:	eb07 0183 	add.w	r1, r7, r3, lsl #2
900087a0:	9111      	str	r1, [sp, #68]	; 0x44
900087a2:	bf94      	ite	ls
900087a4:	2101      	movls	r1, #1
900087a6:	2100      	movhi	r1, #0
900087a8:	ebbc 0f87 	cmp.w	ip, r7, lsl #2
900087ac:	f001 0e01 	and.w	lr, r1, #1
900087b0:	bf38      	it	cc
900087b2:	f04f 0e00 	movcc.w	lr, #0
900087b6:	4294      	cmp	r4, r2
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
900087b8:	f04f 0100 	mov.w	r1, #0
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
900087bc:	f8cd e01c 	str.w	lr, [sp, #28]
900087c0:	bf8c      	ite	hi
900087c2:	f04f 0e00 	movhi.w	lr, #0
900087c6:	f04f 0e01 	movls.w	lr, #1
900087ca:	4594      	cmp	ip, r2
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
900087cc:	9101      	str	r1, [sp, #4]
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
900087ce:	bf38      	it	cc
900087d0:	f04f 0e00 	movcc.w	lr, #0
900087d4:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
900087d8:	bf98      	it	ls
900087da:	2101      	movls	r1, #1
900087dc:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
900087e0:	f8cd e020 	str.w	lr, [sp, #32]
900087e4:	f001 0101 	and.w	r1, r1, #1
900087e8:	bf38      	it	cc
900087ea:	2100      	movcc	r1, #0
900087ec:	4284      	cmp	r4, r0
900087ee:	9109      	str	r1, [sp, #36]	; 0x24
900087f0:	4601      	mov	r1, r0
900087f2:	bf8c      	ite	hi
900087f4:	2000      	movhi	r0, #0
900087f6:	2001      	movls	r0, #1
900087f8:	458c      	cmp	ip, r1
900087fa:	bf38      	it	cc
900087fc:	2000      	movcc	r0, #0
900087fe:	ebb4 0fc7 	cmp.w	r4, r7, lsl #3
90008802:	900b      	str	r0, [sp, #44]	; 0x2c
90008804:	bf94      	ite	ls
90008806:	2001      	movls	r0, #1
90008808:	2000      	movhi	r0, #0
9000880a:	ebbc 0fc7 	cmp.w	ip, r7, lsl #3
9000880e:	f000 0001 	and.w	r0, r0, #1
90008812:	bf38      	it	cc
90008814:	2000      	movcc	r0, #0
90008816:	900c      	str	r0, [sp, #48]	; 0x30
90008818:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
9000881c:	4284      	cmp	r4, r0
9000881e:	bf8c      	ite	hi
90008820:	f04f 0e00 	movhi.w	lr, #0
90008824:	f04f 0e01 	movls.w	lr, #1
90008828:	4584      	cmp	ip, r0
9000882a:	bf38      	it	cc
9000882c:	f04f 0e00 	movcc.w	lr, #0
90008830:	ebb4 0f42 	cmp.w	r4, r2, lsl #1
90008834:	4670      	mov	r0, lr
90008836:	bf94      	ite	ls
90008838:	2001      	movls	r0, #1
9000883a:	2000      	movhi	r0, #0
9000883c:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
90008840:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
90008844:	f04f 0e00 	mov.w	lr, #0
90008848:	f000 0001 	and.w	r0, r0, #1
9000884c:	bf38      	it	cc
9000884e:	2000      	movcc	r0, #0
90008850:	900e      	str	r0, [sp, #56]	; 0x38
90008852:	9804      	ldr	r0, [sp, #16]
90008854:	4284      	cmp	r4, r0
90008856:	4602      	mov	r2, r0
90008858:	bf8c      	ite	hi
9000885a:	2200      	movhi	r2, #0
9000885c:	2201      	movls	r2, #1
9000885e:	4584      	cmp	ip, r0
90008860:	bf38      	it	cc
90008862:	2200      	movcc	r2, #0
90008864:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
90008868:	920f      	str	r2, [sp, #60]	; 0x3c
9000886a:	bf94      	ite	ls
9000886c:	2201      	movls	r2, #1
9000886e:	2200      	movhi	r2, #0
90008870:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
90008874:	f002 0201 	and.w	r2, r2, #1
90008878:	bf38      	it	cc
9000887a:	2200      	movcc	r2, #0
9000887c:	9210      	str	r2, [sp, #64]	; 0x40
9000887e:	9a11      	ldr	r2, [sp, #68]	; 0x44
90008880:	4294      	cmp	r4, r2
90008882:	4613      	mov	r3, r2
90008884:	bf8c      	ite	hi
90008886:	2300      	movhi	r3, #0
90008888:	2301      	movls	r3, #1
9000888a:	4594      	cmp	ip, r2
9000888c:	bf38      	it	cc
9000888e:	2300      	movcc	r3, #0
90008890:	ebb4 0f41 	cmp.w	r4, r1, lsl #1
90008894:	9311      	str	r3, [sp, #68]	; 0x44
90008896:	bf94      	ite	ls
90008898:	2301      	movls	r3, #1
9000889a:	2300      	movhi	r3, #0
9000889c:	ebbc 0f41 	cmp.w	ip, r1, lsl #1
900088a0:	f003 0301 	and.w	r3, r3, #1
900088a4:	bf38      	it	cc
900088a6:	2300      	movcc	r3, #0
900088a8:	9312      	str	r3, [sp, #72]	; 0x48
900088aa:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
900088ae:	429c      	cmp	r4, r3
900088b0:	bf8c      	ite	hi
900088b2:	2200      	movhi	r2, #0
900088b4:	2201      	movls	r2, #1
900088b6:	459c      	cmp	ip, r3
900088b8:	bf38      	it	cc
900088ba:	2200      	movcc	r2, #0
900088bc:	9204      	str	r2, [sp, #16]
900088be:	e014      	b.n	900088ea <BSP_I2C4_Init+0x292>
900088c0:	2400d158 	.word	0x2400d158
900088c4:	2400db60 	.word	0x2400db60
900088c8:	58001c00 	.word	0x58001c00
900088cc:	58024400 	.word	0x58024400
900088d0:	58020c00 	.word	0x58020c00
900088d4:	3b9aca00 	.word	0x3b9aca00
900088d8:	2400db5c 	.word	0x2400db5c
900088dc:	2400d15c 	.word	0x2400d15c
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
900088e0:	f1be 0f10 	cmp.w	lr, #16
900088e4:	44b8      	add	r8, r7
900088e6:	f000 826c 	beq.w	90008dc2 <BSP_I2C4_Init+0x76a>
      if (tscldel >= (uint32_t)tscldel_min)
900088ea:	f5b8 7faf 	cmp.w	r8, #350	; 0x15e
900088ee:	4673      	mov	r3, lr
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
900088f0:	f10e 0e01 	add.w	lr, lr, #1
      if (tscldel >= (uint32_t)tscldel_min)
900088f4:	d3f4      	bcc.n	900088e0 <BSP_I2C4_Init+0x288>
            if(presc != prev_presc)
900088f6:	ebbb 0205 	subs.w	r2, fp, r5
900088fa:	bf18      	it	ne
900088fc:	2201      	movne	r2, #1
900088fe:	2c00      	cmp	r4, #0
90008900:	bf18      	it	ne
90008902:	2200      	movne	r2, #0
90008904:	2a00      	cmp	r2, #0
90008906:	f040 824a 	bne.w	90008d9e <BSP_I2C4_Init+0x746>
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
9000890a:	45bc      	cmp	ip, r7
9000890c:	bf34      	ite	cc
9000890e:	2200      	movcc	r2, #0
90008910:	2201      	movcs	r2, #1
90008912:	42bc      	cmp	r4, r7
90008914:	bf88      	it	hi
90008916:	2200      	movhi	r2, #0
            if(presc != prev_presc)
90008918:	45ab      	cmp	fp, r5
9000891a:	bf0c      	ite	eq
9000891c:	2200      	moveq	r2, #0
9000891e:	f002 0201 	andne.w	r2, r2, #1
90008922:	2a00      	cmp	r2, #0
90008924:	f000 80fd 	beq.w	90008b22 <BSP_I2C4_Init+0x4ca>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008928:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000892c:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008930:	2001      	movs	r0, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008932:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008936:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000893a:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000893e:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008940:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008942:	604b      	str	r3, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008944:	f200 81a5 	bhi.w	90008c92 <BSP_I2C4_Init+0x63a>
90008948:	46ab      	mov	fp, r5
            if(presc != prev_presc)
9000894a:	9906      	ldr	r1, [sp, #24]
9000894c:	45ab      	cmp	fp, r5
9000894e:	bf0c      	ite	eq
90008950:	2100      	moveq	r1, #0
90008952:	f001 0101 	andne.w	r1, r1, #1
90008956:	2900      	cmp	r1, #0
90008958:	f000 80ff 	beq.w	90008b5a <BSP_I2C4_Init+0x502>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000895c:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008960:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008964:	2003      	movs	r0, #3
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008966:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000896a:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000896e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008972:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008974:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008976:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008978:	f200 818b 	bhi.w	90008c92 <BSP_I2C4_Init+0x63a>
9000897c:	460a      	mov	r2, r1
9000897e:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008980:	9908      	ldr	r1, [sp, #32]
90008982:	45ab      	cmp	fp, r5
90008984:	bf0c      	ite	eq
90008986:	2100      	moveq	r1, #0
90008988:	f001 0101 	andne.w	r1, r1, #1
9000898c:	2900      	cmp	r1, #0
9000898e:	f000 80ff 	beq.w	90008b90 <BSP_I2C4_Init+0x538>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008992:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008996:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000899a:	2005      	movs	r0, #5
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000899c:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900089a0:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900089a4:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900089a8:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900089aa:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900089ac:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900089ae:	f200 8170 	bhi.w	90008c92 <BSP_I2C4_Init+0x63a>
900089b2:	460a      	mov	r2, r1
900089b4:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900089b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
900089b8:	45ab      	cmp	fp, r5
900089ba:	bf0c      	ite	eq
900089bc:	2100      	moveq	r1, #0
900089be:	f001 0101 	andne.w	r1, r1, #1
900089c2:	2900      	cmp	r1, #0
900089c4:	f000 80fe 	beq.w	90008bc4 <BSP_I2C4_Init+0x56c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900089c8:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900089cc:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900089d0:	2007      	movs	r0, #7
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900089d2:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900089d6:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900089da:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900089de:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900089e0:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900089e2:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900089e4:	f200 8155 	bhi.w	90008c92 <BSP_I2C4_Init+0x63a>
900089e8:	460a      	mov	r2, r1
900089ea:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900089ec:	990d      	ldr	r1, [sp, #52]	; 0x34
900089ee:	45ab      	cmp	fp, r5
900089f0:	bf0c      	ite	eq
900089f2:	2100      	moveq	r1, #0
900089f4:	f001 0101 	andne.w	r1, r1, #1
900089f8:	2900      	cmp	r1, #0
900089fa:	f000 80fd 	beq.w	90008bf8 <BSP_I2C4_Init+0x5a0>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900089fe:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008a02:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008a06:	2009      	movs	r0, #9
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008a08:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008a0c:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008a10:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008a14:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008a16:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008a18:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008a1a:	f200 813a 	bhi.w	90008c92 <BSP_I2C4_Init+0x63a>
90008a1e:	460a      	mov	r2, r1
90008a20:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008a22:	990f      	ldr	r1, [sp, #60]	; 0x3c
90008a24:	45ab      	cmp	fp, r5
90008a26:	bf0c      	ite	eq
90008a28:	2100      	moveq	r1, #0
90008a2a:	f001 0101 	andne.w	r1, r1, #1
90008a2e:	2900      	cmp	r1, #0
90008a30:	f000 80fc 	beq.w	90008c2c <BSP_I2C4_Init+0x5d4>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008a34:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008a38:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008a3c:	200b      	movs	r0, #11
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008a3e:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008a42:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008a46:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008a4a:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008a4c:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008a4e:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008a50:	f200 811f 	bhi.w	90008c92 <BSP_I2C4_Init+0x63a>
90008a54:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008a56:	9e11      	ldr	r6, [sp, #68]	; 0x44
90008a58:	455d      	cmp	r5, fp
90008a5a:	bf0c      	ite	eq
90008a5c:	2600      	moveq	r6, #0
90008a5e:	f006 0601 	andne.w	r6, r6, #1
90008a62:	2e00      	cmp	r6, #0
90008a64:	f000 80fb 	beq.w	90008c5e <BSP_I2C4_Init+0x606>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008a68:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008a6c:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008a70:	210d      	movs	r1, #13
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008a72:	4650      	mov	r0, sl
90008a74:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008a78:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008a7c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008a80:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008a82:	6091      	str	r1, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008a84:	f200 8105 	bhi.w	90008c92 <BSP_I2C4_Init+0x63a>
90008a88:	4631      	mov	r1, r6
90008a8a:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008a8c:	9e04      	ldr	r6, [sp, #16]
90008a8e:	455d      	cmp	r5, fp
90008a90:	bf0c      	ite	eq
90008a92:	2600      	moveq	r6, #0
90008a94:	f006 0601 	andne.w	r6, r6, #1
90008a98:	2e00      	cmp	r6, #0
90008a9a:	f000 817c 	beq.w	90008d96 <BSP_I2C4_Init+0x73e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008a9e:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008aa2:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008aa6:	4650      	mov	r0, sl
90008aa8:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
90008aac:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008ab0:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008ab4:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008ab6:	f04f 030f 	mov.w	r3, #15
90008aba:	6093      	str	r3, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008abc:	f200 80e9 	bhi.w	90008c92 <BSP_I2C4_Init+0x63a>
90008ac0:	46ab      	mov	fp, r5
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90008ac2:	e70d      	b.n	900088e0 <BSP_I2C4_Init+0x288>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90008ac4:	9a07      	ldr	r2, [sp, #28]
90008ac6:	9b08      	ldr	r3, [sp, #32]
90008ac8:	3214      	adds	r2, #20
90008aca:	3301      	adds	r3, #1
90008acc:	9207      	str	r2, [sp, #28]
90008ace:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90008ad0:	9308      	str	r3, [sp, #32]
90008ad2:	4293      	cmp	r3, r2
90008ad4:	f040 80ff 	bne.w	90008cd6 <BSP_I2C4_Init+0x67e>
        if (idx < I2C_VALID_TIMING_NBR)
90008ad8:	297f      	cmp	r1, #127	; 0x7f
90008ada:	d818      	bhi.n	90008b0e <BSP_I2C4_Init+0x4b6>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90008adc:	eb01 0381 	add.w	r3, r1, r1, lsl #2
90008ae0:	990b      	ldr	r1, [sp, #44]	; 0x2c
90008ae2:	eb01 0283 	add.w	r2, r1, r3, lsl #2
90008ae6:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90008aea:	6850      	ldr	r0, [r2, #4]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
90008aec:	7c13      	ldrb	r3, [r2, #16]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90008aee:	0500      	lsls	r0, r0, #20
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90008af0:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90008af4:	f400 0070 	and.w	r0, r0, #15728640	; 0xf00000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
90008af8:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90008afc:	4303      	orrs	r3, r0
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90008afe:	0409      	lsls	r1, r1, #16
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
90008b00:	0212      	lsls	r2, r2, #8
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90008b02:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
90008b06:	b292      	uxth	r2, r2
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90008b08:	430b      	orrs	r3, r1
90008b0a:	4313      	orrs	r3, r2
90008b0c:	9303      	str	r3, [sp, #12]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
90008b0e:	9903      	ldr	r1, [sp, #12]
90008b10:	48b5      	ldr	r0, [pc, #724]	; (90008de8 <BSP_I2C4_Init+0x790>)
90008b12:	f7ff fd81 	bl	90008618 <MX_I2C4_Init>
90008b16:	2800      	cmp	r0, #0
90008b18:	f43f ada8 	beq.w	9000866c <BSP_I2C4_Init+0x14>
          ret = BSP_ERROR_BUS_FAILURE;
90008b1c:	f06f 0007 	mvn.w	r0, #7
  return ret;
90008b20:	e5a5      	b.n	9000866e <BSP_I2C4_Init+0x16>
            if(presc != prev_presc)
90008b22:	4632      	mov	r2, r6
90008b24:	9905      	ldr	r1, [sp, #20]
90008b26:	45ab      	cmp	fp, r5
90008b28:	bf0c      	ite	eq
90008b2a:	2100      	moveq	r1, #0
90008b2c:	f001 0101 	andne.w	r1, r1, #1
90008b30:	2900      	cmp	r1, #0
90008b32:	f43f af0a 	beq.w	9000894a <BSP_I2C4_Init+0x2f2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008b36:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008b3a:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008b3e:	2002      	movs	r0, #2
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008b40:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008b44:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008b48:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008b4c:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008b4e:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008b50:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008b52:	f200 809e 	bhi.w	90008c92 <BSP_I2C4_Init+0x63a>
90008b56:	460a      	mov	r2, r1
90008b58:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008b5a:	9907      	ldr	r1, [sp, #28]
90008b5c:	45ab      	cmp	fp, r5
90008b5e:	bf0c      	ite	eq
90008b60:	2100      	moveq	r1, #0
90008b62:	f001 0101 	andne.w	r1, r1, #1
90008b66:	2900      	cmp	r1, #0
90008b68:	f43f af0a 	beq.w	90008980 <BSP_I2C4_Init+0x328>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008b6c:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008b70:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008b74:	2004      	movs	r0, #4
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008b76:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008b7a:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008b7e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008b82:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008b84:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008b86:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008b88:	f200 8083 	bhi.w	90008c92 <BSP_I2C4_Init+0x63a>
90008b8c:	460a      	mov	r2, r1
90008b8e:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008b90:	9909      	ldr	r1, [sp, #36]	; 0x24
90008b92:	45ab      	cmp	fp, r5
90008b94:	bf0c      	ite	eq
90008b96:	2100      	moveq	r1, #0
90008b98:	f001 0101 	andne.w	r1, r1, #1
90008b9c:	2900      	cmp	r1, #0
90008b9e:	f43f af0a 	beq.w	900089b6 <BSP_I2C4_Init+0x35e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008ba2:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008ba6:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008baa:	2006      	movs	r0, #6
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008bac:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008bb0:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008bb4:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008bb8:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008bba:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008bbc:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008bbe:	d868      	bhi.n	90008c92 <BSP_I2C4_Init+0x63a>
90008bc0:	460a      	mov	r2, r1
90008bc2:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008bc4:	990c      	ldr	r1, [sp, #48]	; 0x30
90008bc6:	45ab      	cmp	fp, r5
90008bc8:	bf0c      	ite	eq
90008bca:	2100      	moveq	r1, #0
90008bcc:	f001 0101 	andne.w	r1, r1, #1
90008bd0:	2900      	cmp	r1, #0
90008bd2:	f43f af0b 	beq.w	900089ec <BSP_I2C4_Init+0x394>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008bd6:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008bda:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008bde:	2008      	movs	r0, #8
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008be0:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008be4:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008be8:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008bec:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008bee:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008bf0:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008bf2:	d84e      	bhi.n	90008c92 <BSP_I2C4_Init+0x63a>
90008bf4:	460a      	mov	r2, r1
90008bf6:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008bf8:	990e      	ldr	r1, [sp, #56]	; 0x38
90008bfa:	45ab      	cmp	fp, r5
90008bfc:	bf0c      	ite	eq
90008bfe:	2100      	moveq	r1, #0
90008c00:	f001 0101 	andne.w	r1, r1, #1
90008c04:	2900      	cmp	r1, #0
90008c06:	f43f af0c 	beq.w	90008a22 <BSP_I2C4_Init+0x3ca>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008c0a:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008c0e:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008c12:	200a      	movs	r0, #10
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008c14:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008c18:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008c1c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008c20:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008c22:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008c24:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008c26:	d834      	bhi.n	90008c92 <BSP_I2C4_Init+0x63a>
90008c28:	460a      	mov	r2, r1
90008c2a:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008c2c:	9910      	ldr	r1, [sp, #64]	; 0x40
90008c2e:	45ab      	cmp	fp, r5
90008c30:	bf0c      	ite	eq
90008c32:	2100      	moveq	r1, #0
90008c34:	f001 0101 	andne.w	r1, r1, #1
90008c38:	2900      	cmp	r1, #0
90008c3a:	f000 80ae 	beq.w	90008d9a <BSP_I2C4_Init+0x742>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008c3e:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008c42:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008c46:	200c      	movs	r0, #12
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008c48:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008c4c:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008c50:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008c54:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008c56:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008c58:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008c5a:	d81a      	bhi.n	90008c92 <BSP_I2C4_Init+0x63a>
90008c5c:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008c5e:	9e12      	ldr	r6, [sp, #72]	; 0x48
90008c60:	455d      	cmp	r5, fp
90008c62:	bf0c      	ite	eq
90008c64:	2600      	moveq	r6, #0
90008c66:	f006 0601 	andne.w	r6, r6, #1
90008c6a:	2e00      	cmp	r6, #0
90008c6c:	f43f af0e 	beq.w	90008a8c <BSP_I2C4_Init+0x434>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008c70:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008c74:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008c78:	4650      	mov	r0, sl
90008c7a:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
90008c7e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008c82:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008c86:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008c88:	f04f 030e 	mov.w	r3, #14
90008c8c:	6093      	str	r3, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008c8e:	f67f af17 	bls.w	90008ac0 <BSP_I2C4_Init+0x468>
90008c92:	4b56      	ldr	r3, [pc, #344]	; (90008dec <BSP_I2C4_Init+0x794>)
90008c94:	900b      	str	r0, [sp, #44]	; 0x2c
90008c96:	f8c3 9000 	str.w	r9, [r3]
              I2c_valid_timing_nbr ++;
90008c9a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
90008c9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90008ca0:	f240 4201 	movw	r2, #1025	; 0x401
90008ca4:	f240 2657 	movw	r6, #599	; 0x257
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90008ca8:	f640 1ac4 	movw	sl, #2500	; 0x9c4
90008cac:	1ad2      	subs	r2, r2, r3
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90008cae:	f240 4b12 	movw	fp, #1042	; 0x412
90008cb2:	920d      	str	r2, [sp, #52]	; 0x34
90008cb4:	9a02      	ldr	r2, [sp, #8]
90008cb6:	4296      	cmp	r6, r2
90008cb8:	bf38      	it	cc
90008cba:	4616      	movcc	r6, r2
90008cbc:	4a4c      	ldr	r2, [pc, #304]	; (90008df0 <BSP_I2C4_Init+0x798>)
90008cbe:	9207      	str	r2, [sp, #28]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90008cc0:	2200      	movs	r2, #0
90008cc2:	9208      	str	r2, [sp, #32]
90008cc4:	f04f 32ff 	mov.w	r2, #4294967295
90008cc8:	4611      	mov	r1, r2
90008cca:	f103 0232 	add.w	r2, r3, #50	; 0x32
90008cce:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
90008cd2:	920c      	str	r2, [sp, #48]	; 0x30
90008cd4:	930e      	str	r3, [sp, #56]	; 0x38
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90008cd6:	9b07      	ldr	r3, [sp, #28]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90008cd8:	f04f 0800 	mov.w	r8, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90008cdc:	6818      	ldr	r0, [r3, #0]
90008cde:	9b02      	ldr	r3, [sp, #8]
90008ce0:	fb00 3003 	mla	r0, r0, r3, r3
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90008ce4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90008ce6:	1a1b      	subs	r3, r3, r0
90008ce8:	ea4f 0943 	mov.w	r9, r3, lsl #1
90008cec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90008cee:	eb03 0e00 	add.w	lr, r3, r0
90008cf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90008cf4:	4403      	add	r3, r0
90008cf6:	9309      	str	r3, [sp, #36]	; 0x24
90008cf8:	e006      	b.n	90008d08 <BSP_I2C4_Init+0x6b0>
90008cfa:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
90008cfe:	4486      	add	lr, r0
90008d00:	eba9 0900 	sub.w	r9, r9, r0
90008d04:	f43f aede 	beq.w	90008ac4 <BSP_I2C4_Init+0x46c>
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90008d08:	f240 5214 	movw	r2, #1300	; 0x514
90008d0c:	f8cd 8004 	str.w	r8, [sp, #4]
90008d10:	f1ae 0332 	sub.w	r3, lr, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90008d14:	f108 0801 	add.w	r8, r8, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90008d18:	4596      	cmp	lr, r2
90008d1a:	d9ee      	bls.n	90008cfa <BSP_I2C4_Init+0x6a2>
90008d1c:	9a02      	ldr	r2, [sp, #8]
90008d1e:	ebb2 0f93 	cmp.w	r2, r3, lsr #2
90008d22:	d2ea      	bcs.n	90008cfa <BSP_I2C4_Init+0x6a2>
90008d24:	f640 0c34 	movw	ip, #2100	; 0x834
90008d28:	464c      	mov	r4, r9
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90008d2a:	f8cd 9018 	str.w	r9, [sp, #24]
90008d2e:	2200      	movs	r2, #0
90008d30:	ebac 0c03 	sub.w	ip, ip, r3
90008d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
90008d36:	4689      	mov	r9, r1
90008d38:	4473      	add	r3, lr
90008d3a:	e9cd e804 	strd	lr, r8, [sp, #16]
90008d3e:	f8dd 8020 	ldr.w	r8, [sp, #32]
90008d42:	f8dd e01c 	ldr.w	lr, [sp, #28]
90008d46:	e005      	b.n	90008d54 <BSP_I2C4_Init+0x6fc>
90008d48:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
90008d4c:	4403      	add	r3, r0
90008d4e:	eba4 0400 	sub.w	r4, r4, r0
90008d52:	d01a      	beq.n	90008d8a <BSP_I2C4_Init+0x732>
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90008d54:	eb0c 0103 	add.w	r1, ip, r3
90008d58:	4617      	mov	r7, r2
90008d5a:	f203 15a1 	addw	r5, r3, #417	; 0x1a1
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
90008d5e:	3201      	adds	r2, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90008d60:	42b1      	cmp	r1, r6
90008d62:	d9f1      	bls.n	90008d48 <BSP_I2C4_Init+0x6f0>
90008d64:	455d      	cmp	r5, fp
90008d66:	d8ef      	bhi.n	90008d48 <BSP_I2C4_Init+0x6f0>
            if (error < 0)
90008d68:	ea33 0123 	bics.w	r1, r3, r3, asr #32
90008d6c:	bf28      	it	cs
90008d6e:	4621      	movcs	r1, r4
            if ((uint32_t)error < prev_error)
90008d70:	458a      	cmp	sl, r1
90008d72:	d9e9      	bls.n	90008d48 <BSP_I2C4_Init+0x6f0>
              I2c_valid_timing[count].sclh = sclh;
90008d74:	468a      	mov	sl, r1
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90008d76:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
              I2c_valid_timing[count].scll = scll;
90008d7a:	9901      	ldr	r1, [sp, #4]
              I2c_valid_timing[count].sclh = sclh;
90008d7c:	46c1      	mov	r9, r8
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90008d7e:	4403      	add	r3, r0
90008d80:	eba4 0400 	sub.w	r4, r4, r0
              I2c_valid_timing[count].sclh = sclh;
90008d84:	e9ce 7103 	strd	r7, r1, [lr, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90008d88:	d1e4      	bne.n	90008d54 <BSP_I2C4_Init+0x6fc>
90008d8a:	4649      	mov	r1, r9
90008d8c:	f8dd 9018 	ldr.w	r9, [sp, #24]
90008d90:	e9dd e804 	ldrd	lr, r8, [sp, #16]
90008d94:	e7b1      	b.n	90008cfa <BSP_I2C4_Init+0x6a2>
90008d96:	460e      	mov	r6, r1
90008d98:	e5a2      	b.n	900088e0 <BSP_I2C4_Init+0x288>
            if(presc != prev_presc)
90008d9a:	4611      	mov	r1, r2
90008d9c:	e65b      	b.n	90008a56 <BSP_I2C4_Init+0x3fe>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008d9e:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008da2:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008da6:	2000      	movs	r0, #0
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008da8:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008dac:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008db0:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008db4:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008db6:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008db8:	604b      	str	r3, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008dba:	f63f af6a 	bhi.w	90008c92 <BSP_I2C4_Init+0x63a>
90008dbe:	46ab      	mov	fp, r5
90008dc0:	e6b0      	b.n	90008b24 <BSP_I2C4_Init+0x4cc>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90008dc2:	3501      	adds	r5, #1
90008dc4:	9b02      	ldr	r3, [sp, #8]
90008dc6:	2d10      	cmp	r5, #16
90008dc8:	441f      	add	r7, r3
90008dca:	f47f acc7 	bne.w	9000875c <BSP_I2C4_Init+0x104>
90008dce:	b126      	cbz	r6, 90008dda <BSP_I2C4_Init+0x782>
90008dd0:	4b06      	ldr	r3, [pc, #24]	; (90008dec <BSP_I2C4_Init+0x794>)
90008dd2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
90008dd6:	f8c3 9000 	str.w	r9, [r3]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90008dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90008ddc:	2b00      	cmp	r3, #0
90008dde:	f43f ae96 	beq.w	90008b0e <BSP_I2C4_Init+0x4b6>
90008de2:	4b03      	ldr	r3, [pc, #12]	; (90008df0 <BSP_I2C4_Init+0x798>)
90008de4:	930b      	str	r3, [sp, #44]	; 0x2c
90008de6:	e75a      	b.n	90008c9e <BSP_I2C4_Init+0x646>
90008de8:	2400db60 	.word	0x2400db60
90008dec:	2400db5c 	.word	0x2400db5c
90008df0:	2400d15c 	.word	0x2400d15c

90008df4 <BSP_I2C4_WriteReg>:
{
90008df4:	b530      	push	{r4, r5, lr}
90008df6:	4614      	mov	r4, r2
90008df8:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90008dfa:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
90008dfe:	460a      	mov	r2, r1
90008e00:	9301      	str	r3, [sp, #4]
90008e02:	4601      	mov	r1, r0
90008e04:	2301      	movs	r3, #1
90008e06:	4809      	ldr	r0, [pc, #36]	; (90008e2c <BSP_I2C4_WriteReg+0x38>)
90008e08:	9502      	str	r5, [sp, #8]
90008e0a:	9400      	str	r4, [sp, #0]
90008e0c:	f001 f958 	bl	9000a0c0 <HAL_I2C_Mem_Write>
90008e10:	b908      	cbnz	r0, 90008e16 <BSP_I2C4_WriteReg+0x22>
}
90008e12:	b005      	add	sp, #20
90008e14:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90008e16:	4805      	ldr	r0, [pc, #20]	; (90008e2c <BSP_I2C4_WriteReg+0x38>)
90008e18:	f001 fbf4 	bl	9000a604 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
90008e1c:	2804      	cmp	r0, #4
90008e1e:	bf0c      	ite	eq
90008e20:	f06f 0065 	mvneq.w	r0, #101	; 0x65
90008e24:	f06f 0003 	mvnne.w	r0, #3
90008e28:	e7f3      	b.n	90008e12 <BSP_I2C4_WriteReg+0x1e>
90008e2a:	bf00      	nop
90008e2c:	2400db60 	.word	0x2400db60

90008e30 <BSP_I2C4_ReadReg>:
{
90008e30:	b530      	push	{r4, r5, lr}
90008e32:	4614      	mov	r4, r2
90008e34:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90008e36:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
90008e3a:	460a      	mov	r2, r1
90008e3c:	9301      	str	r3, [sp, #4]
90008e3e:	4601      	mov	r1, r0
90008e40:	2301      	movs	r3, #1
90008e42:	4809      	ldr	r0, [pc, #36]	; (90008e68 <BSP_I2C4_ReadReg+0x38>)
90008e44:	9502      	str	r5, [sp, #8]
90008e46:	9400      	str	r4, [sp, #0]
90008e48:	f001 fa6e 	bl	9000a328 <HAL_I2C_Mem_Read>
90008e4c:	b908      	cbnz	r0, 90008e52 <BSP_I2C4_ReadReg+0x22>
}
90008e4e:	b005      	add	sp, #20
90008e50:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90008e52:	4805      	ldr	r0, [pc, #20]	; (90008e68 <BSP_I2C4_ReadReg+0x38>)
90008e54:	f001 fbd6 	bl	9000a604 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
90008e58:	2804      	cmp	r0, #4
90008e5a:	bf0c      	ite	eq
90008e5c:	f06f 0065 	mvneq.w	r0, #101	; 0x65
90008e60:	f06f 0003 	mvnne.w	r0, #3
90008e64:	e7f3      	b.n	90008e4e <BSP_I2C4_ReadReg+0x1e>
90008e66:	bf00      	nop
90008e68:	2400db60 	.word	0x2400db60

90008e6c <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
90008e6c:	f000 baaa 	b.w	900093c4 <HAL_GetTick>

90008e70 <BSP_SDRAM_DeInit>:
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= SDRAM_INSTANCES_NBR)
90008e70:	b970      	cbnz	r0, 90008e90 <BSP_SDRAM_DeInit+0x20>
{
90008e72:	b510      	push	{r4, lr}
90008e74:	4604      	mov	r4, r0
  {
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
90008e76:	4808      	ldr	r0, [pc, #32]	; (90008e98 <BSP_SDRAM_DeInit+0x28>)
90008e78:	f005 f876 	bl	9000df68 <HAL_SDRAM_DeInit>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
90008e7c:	207a      	movs	r0, #122	; 0x7a
90008e7e:	f000 fb0b 	bl	90009498 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90008e82:	4b06      	ldr	r3, [pc, #24]	; (90008e9c <BSP_SDRAM_DeInit+0x2c>)
90008e84:	4806      	ldr	r0, [pc, #24]	; (90008ea0 <BSP_SDRAM_DeInit+0x30>)
90008e86:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
90008e88:	f003 f98e 	bl	9000c1a8 <HAL_MDMA_DeInit>
  int32_t ret = BSP_ERROR_NONE;
90008e8c:	4620      	mov	r0, r4
}
90008e8e:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
90008e90:	f06f 0001 	mvn.w	r0, #1
}
90008e94:	4770      	bx	lr
90008e96:	bf00      	nop
90008e98:	2400dbb4 	.word	0x2400dbb4
90008e9c:	52000040 	.word	0x52000040
90008ea0:	2400dbe8 	.word	0x2400dbe8

90008ea4 <MX_SDRAM_BANK2_Init>:
{
90008ea4:	b530      	push	{r4, r5, lr}
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
90008ea6:	6102      	str	r2, [r0, #16]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90008ea8:	2200      	movs	r2, #0
{
90008eaa:	b089      	sub	sp, #36	; 0x24
  hsdram->Instance = FMC_SDRAM_DEVICE;
90008eac:	4c13      	ldr	r4, [pc, #76]	; (90008efc <MX_SDRAM_BANK2_Init+0x58>)
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90008eae:	6082      	str	r2, [r0, #8]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90008eb0:	2540      	movs	r5, #64	; 0x40
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90008eb2:	61c2      	str	r2, [r0, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
90008eb4:	2307      	movs	r3, #7
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90008eb6:	6282      	str	r2, [r0, #40]	; 0x28
  sdram_timing.LoadToActiveDelay    = 2;
90008eb8:	2202      	movs	r2, #2
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
90008eba:	60c1      	str	r1, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90008ebc:	f44f 71c0 	mov.w	r1, #384	; 0x180
  sdram_timing.LoadToActiveDelay    = 2;
90008ec0:	9200      	str	r2, [sp, #0]
  sdram_timing.RCDDelay             = 2;
90008ec2:	9206      	str	r2, [sp, #24]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90008ec4:	2201      	movs	r2, #1
  sdram_timing.ExitSelfRefreshDelay = 7;
90008ec6:	9301      	str	r3, [sp, #4]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90008ec8:	6042      	str	r2, [r0, #4]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90008eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90008ece:	6165      	str	r5, [r4, #20]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90008ed0:	f44f 6500 	mov.w	r5, #2048	; 0x800
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90008ed4:	6181      	str	r1, [r0, #24]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90008ed6:	4669      	mov	r1, sp
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90008ed8:	e9c0 5208 	strd	r5, r2, [r0, #32]
  sdram_timing.SelfRefreshTime      = 4;
90008edc:	2204      	movs	r2, #4
90008ede:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdram_timing.WriteRecoveryTime    = 2;
90008ee2:	2202      	movs	r2, #2
90008ee4:	2302      	movs	r3, #2
90008ee6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  hsdram->Instance = FMC_SDRAM_DEVICE;
90008eea:	4b05      	ldr	r3, [pc, #20]	; (90008f00 <MX_SDRAM_BANK2_Init+0x5c>)
90008eec:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90008eee:	f005 f811 	bl	9000df14 <HAL_SDRAM_Init>
}
90008ef2:	3800      	subs	r0, #0
90008ef4:	bf18      	it	ne
90008ef6:	2001      	movne	r0, #1
90008ef8:	b009      	add	sp, #36	; 0x24
90008efa:	bd30      	pop	{r4, r5, pc}
90008efc:	2400dbb4 	.word	0x2400dbb4
90008f00:	52004140 	.word	0x52004140

90008f04 <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
90008f04:	2800      	cmp	r0, #0
90008f06:	f040 80d2 	bne.w	900090ae <BSP_SDRAM_Init+0x1aa>
  __HAL_RCC_FMC_CLK_ENABLE();
90008f0a:	4b6c      	ldr	r3, [pc, #432]	; (900090bc <BSP_SDRAM_Init+0x1b8>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90008f0c:	210c      	movs	r1, #12
  __HAL_RCC_FMC_CLK_ENABLE();
90008f0e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90008f12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
{
90008f16:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
90008f18:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
{
90008f1c:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
90008f1e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90008f22:	4605      	mov	r5, r0
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90008f24:	f24c 7003 	movw	r0, #50947	; 0xc703
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90008f28:	4c65      	ldr	r4, [pc, #404]	; (900090c0 <BSP_SDRAM_Init+0x1bc>)
  __HAL_RCC_FMC_CLK_ENABLE();
90008f2a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90008f2e:	4e65      	ldr	r6, [pc, #404]	; (900090c4 <BSP_SDRAM_Init+0x1c0>)
  __HAL_RCC_FMC_CLK_ENABLE();
90008f30:	9201      	str	r2, [sp, #4]
90008f32:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
90008f34:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90008f38:	f042 0201 	orr.w	r2, r2, #1
90008f3c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90008f40:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90008f44:	f002 0201 	and.w	r2, r2, #1
90008f48:	9202      	str	r2, [sp, #8]
90008f4a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90008f4c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90008f50:	f042 0208 	orr.w	r2, r2, #8
90008f54:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90008f58:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90008f5c:	f002 0208 	and.w	r2, r2, #8
90008f60:	9203      	str	r2, [sp, #12]
90008f62:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90008f64:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90008f68:	f042 0210 	orr.w	r2, r2, #16
90008f6c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90008f70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90008f74:	f002 0210 	and.w	r2, r2, #16
90008f78:	9204      	str	r2, [sp, #16]
90008f7a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90008f7c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90008f80:	f042 0220 	orr.w	r2, r2, #32
90008f84:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90008f88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90008f8c:	f002 0220 	and.w	r2, r2, #32
90008f90:	9205      	str	r2, [sp, #20]
90008f92:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90008f94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90008f98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
90008f9c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90008fa0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90008fa4:	f002 0240 	and.w	r2, r2, #64	; 0x40
90008fa8:	9206      	str	r2, [sp, #24]
90008faa:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90008fac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90008fb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
90008fb4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90008fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90008fbc:	910c      	str	r1, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90008fbe:	2102      	movs	r1, #2
  __HAL_RCC_GPIOH_CLK_ENABLE();
90008fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90008fc4:	e9cd 0108 	strd	r0, r1, [sp, #32]
90008fc8:	2001      	movs	r0, #1
90008fca:	2103      	movs	r1, #3
  __HAL_RCC_GPIOH_CLK_ENABLE();
90008fcc:	9307      	str	r3, [sp, #28]
90008fce:	9b07      	ldr	r3, [sp, #28]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90008fd0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90008fd4:	a908      	add	r1, sp, #32
90008fd6:	483c      	ldr	r0, [pc, #240]	; (900090c8 <BSP_SDRAM_Init+0x1c4>)
90008fd8:	f000 fc7e 	bl	900098d8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90008fdc:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90008fe0:	a908      	add	r1, sp, #32
90008fe2:	483a      	ldr	r0, [pc, #232]	; (900090cc <BSP_SDRAM_Init+0x1c8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90008fe4:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90008fe6:	f000 fc77 	bl	900098d8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90008fea:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90008fee:	a908      	add	r1, sp, #32
90008ff0:	4837      	ldr	r0, [pc, #220]	; (900090d0 <BSP_SDRAM_Init+0x1cc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90008ff2:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90008ff4:	f000 fc70 	bl	900098d8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90008ff8:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90008ffc:	a908      	add	r1, sp, #32
90008ffe:	4835      	ldr	r0, [pc, #212]	; (900090d4 <BSP_SDRAM_Init+0x1d0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90009000:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90009002:	f000 fc69 	bl	900098d8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90009006:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90009008:	a908      	add	r1, sp, #32
9000900a:	4833      	ldr	r0, [pc, #204]	; (900090d8 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
9000900c:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
9000900e:	f000 fc63 	bl	900098d8 <HAL_GPIO_Init>
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
90009012:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90009014:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
90009018:	f240 2102 	movw	r1, #514	; 0x202
  HAL_MDMA_DeInit(&mdma_handle);
9000901c:	4620      	mov	r0, r4
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
9000901e:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength = 128;
90009020:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90009022:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
90009024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
90009028:	6161      	str	r1, [r4, #20]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
9000902a:	60a2      	str	r2, [r4, #8]
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
9000902c:	4a2b      	ldr	r2, [pc, #172]	; (900090dc <BSP_SDRAM_Init+0x1d8>)
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
9000902e:	6334      	str	r4, [r6, #48]	; 0x30
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90009030:	6022      	str	r2, [r4, #0]
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90009032:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
90009034:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
90009038:	f640 0308 	movw	r3, #2056	; 0x808
9000903c:	61a3      	str	r3, [r4, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
9000903e:	2320      	movs	r3, #32
90009040:	61e3      	str	r3, [r4, #28]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90009042:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
90009046:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
9000904a:	6263      	str	r3, [r4, #36]	; 0x24
  mdma_handle.Init.DestBlockAddressOffset = 0;
9000904c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  HAL_MDMA_DeInit(&mdma_handle);
90009050:	f003 f8aa 	bl	9000c1a8 <HAL_MDMA_DeInit>
  HAL_MDMA_Init(&mdma_handle);
90009054:	4620      	mov	r0, r4
90009056:	f003 f82d 	bl	9000c0b4 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
9000905a:	462a      	mov	r2, r5
9000905c:	210f      	movs	r1, #15
9000905e:	207a      	movs	r0, #122	; 0x7a
90009060:	f000 f9ce 	bl	90009400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
90009064:	207a      	movs	r0, #122	; 0x7a
90009066:	f000 fa09 	bl	9000947c <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
9000906a:	2210      	movs	r2, #16
9000906c:	2104      	movs	r1, #4
9000906e:	4630      	mov	r0, r6
90009070:	f7ff ff18 	bl	90008ea4 <MX_SDRAM_BANK2_Init>
90009074:	b9f0      	cbnz	r0, 900090b4 <BSP_SDRAM_Init+0x1b0>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90009076:	491a      	ldr	r1, [pc, #104]	; (900090e0 <BSP_SDRAM_Init+0x1dc>)
90009078:	2208      	movs	r2, #8
9000907a:	2303      	movs	r3, #3
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
9000907c:	4630      	mov	r0, r6
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
9000907e:	e9c1 2300 	strd	r2, r3, [r1]
90009082:	f240 6203 	movw	r2, #1539	; 0x603
90009086:	2300      	movs	r3, #0
90009088:	e9c1 2302 	strd	r2, r3, [r1, #8]
9000908c:	2200      	movs	r2, #0
9000908e:	2330      	movs	r3, #48	; 0x30
90009090:	e9c1 2304 	strd	r2, r3, [r1, #16]
90009094:	2200      	movs	r2, #0
90009096:	f44f 7300 	mov.w	r3, #512	; 0x200
9000909a:	e9c1 2306 	strd	r2, r3, [r1, #24]
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
9000909e:	f7ff fa37 	bl	90008510 <MT48LC4M32B2_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
900090a2:	2800      	cmp	r0, #0
900090a4:	bf18      	it	ne
900090a6:	f06f 0004 	mvnne.w	r0, #4
}
900090aa:	b00e      	add	sp, #56	; 0x38
900090ac:	bd70      	pop	{r4, r5, r6, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
900090ae:	f06f 0001 	mvn.w	r0, #1
}
900090b2:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
900090b4:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
900090b8:	e7f7      	b.n	900090aa <BSP_SDRAM_Init+0x1a6>
900090ba:	bf00      	nop
900090bc:	58024400 	.word	0x58024400
900090c0:	2400dc54 	.word	0x2400dc54
900090c4:	2400dbb4 	.word	0x2400dbb4
900090c8:	58020c00 	.word	0x58020c00
900090cc:	58021000 	.word	0x58021000
900090d0:	58021400 	.word	0x58021400
900090d4:	58021800 	.word	0x58021800
900090d8:	58021c00 	.word	0x58021c00
900090dc:	52000040 	.word	0x52000040
900090e0:	2400dcc0 	.word	0x2400dcc0

900090e4 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
900090e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900090e8:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
900090ea:	2800      	cmp	r0, #0
900090ec:	d16b      	bne.n	900091c6 <BSP_TS_Init+0xe2>
900090ee:	680b      	ldr	r3, [r1, #0]
900090f0:	460c      	mov	r4, r1
900090f2:	1e5a      	subs	r2, r3, #1
900090f4:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
900090f8:	d265      	bcs.n	900091c6 <BSP_TS_Init+0xe2>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
900090fa:	684a      	ldr	r2, [r1, #4]
900090fc:	1e51      	subs	r1, r2, #1
900090fe:	f5b1 7f88 	cmp.w	r1, #272	; 0x110
90009102:	d260      	bcs.n	900091c6 <BSP_TS_Init+0xe2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
90009104:	4293      	cmp	r3, r2
90009106:	bf28      	it	cs
90009108:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
9000910a:	68e2      	ldr	r2, [r4, #12]
9000910c:	429a      	cmp	r2, r3
9000910e:	d85a      	bhi.n	900091c6 <BSP_TS_Init+0xe2>
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
90009110:	2270      	movs	r2, #112	; 0x70
  IOCtx.Init        = BSP_I2C4_Init;
90009112:	4b31      	ldr	r3, [pc, #196]	; (900091d8 <BSP_TS_Init+0xf4>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90009114:	4d31      	ldr	r5, [pc, #196]	; (900091dc <BSP_TS_Init+0xf8>)
90009116:	a902      	add	r1, sp, #8
  IOCtx.Address     = TS_I2C_ADDRESS;
90009118:	f8ad 2010 	strh.w	r2, [sp, #16]
  IOCtx.Init        = BSP_I2C4_Init;
9000911c:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
9000911e:	4a30      	ldr	r2, [pc, #192]	; (900091e0 <BSP_TS_Init+0xfc>)
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
90009120:	4b30      	ldr	r3, [pc, #192]	; (900091e4 <BSP_TS_Init+0x100>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
90009122:	9203      	str	r2, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
90009124:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
90009126:	4a30      	ldr	r2, [pc, #192]	; (900091e8 <BSP_TS_Init+0x104>)
  IOCtx.GetTick     = BSP_GetTick;
90009128:	4b30      	ldr	r3, [pc, #192]	; (900091ec <BSP_TS_Init+0x108>)
  uint32_t ft5336_id       = 0;
9000912a:	9001      	str	r0, [sp, #4]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
9000912c:	4628      	mov	r0, r5
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
9000912e:	9205      	str	r2, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
90009130:	9307      	str	r3, [sp, #28]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90009132:	f7ff f93f 	bl	900083b4 <FT5336_RegisterBusIO>
90009136:	2800      	cmp	r0, #0
90009138:	d14b      	bne.n	900091d2 <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
9000913a:	a901      	add	r1, sp, #4
9000913c:	4628      	mov	r0, r5
9000913e:	f7ff f82f 	bl	900081a0 <FT5336_ReadID>
90009142:	2800      	cmp	r0, #0
90009144:	d145      	bne.n	900091d2 <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
90009146:	9b01      	ldr	r3, [sp, #4]
90009148:	2b51      	cmp	r3, #81	; 0x51
9000914a:	d142      	bne.n	900091d2 <BSP_TS_Init+0xee>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
9000914c:	4b28      	ldr	r3, [pc, #160]	; (900091f0 <BSP_TS_Init+0x10c>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
9000914e:	4628      	mov	r0, r5
    Ts_CompObj[Instance] = &FT5336Obj;
90009150:	4f28      	ldr	r7, [pc, #160]	; (900091f4 <BSP_TS_Init+0x110>)
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90009152:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 900091fc <BSP_TS_Init+0x118>
    Ts_CompObj[Instance] = &FT5336Obj;
90009156:	603d      	str	r5, [r7, #0]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90009158:	f8c8 3000 	str.w	r3, [r8]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
9000915c:	681b      	ldr	r3, [r3, #0]
9000915e:	4798      	blx	r3
90009160:	4606      	mov	r6, r0
90009162:	2800      	cmp	r0, #0
90009164:	d135      	bne.n	900091d2 <BSP_TS_Init+0xee>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90009166:	4d24      	ldr	r5, [pc, #144]	; (900091f8 <BSP_TS_Init+0x114>)
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90009168:	a902      	add	r1, sp, #8
9000916a:	6838      	ldr	r0, [r7, #0]
9000916c:	f8d8 3000 	ldr.w	r3, [r8]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90009170:	e9d4 7200 	ldrd	r7, r2, [r4]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90009174:	69db      	ldr	r3, [r3, #28]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90009176:	e9c5 7200 	strd	r7, r2, [r5]
9000917a:	68a2      	ldr	r2, [r4, #8]
9000917c:	60aa      	str	r2, [r5, #8]
9000917e:	68e2      	ldr	r2, [r4, #12]
90009180:	60ea      	str	r2, [r5, #12]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90009182:	4798      	blx	r3
90009184:	2800      	cmp	r0, #0
90009186:	db18      	blt.n	900091ba <BSP_TS_Init+0xd6>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
90009188:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
9000918c:	e9c5 3204 	strd	r3, r2, [r5, #16]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90009190:	68e3      	ldr	r3, [r4, #12]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90009192:	e9d4 2100 	ldrd	r2, r1, [r4]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90009196:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90009198:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
9000919a:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
9000919c:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
9000919e:	e9c5 2206 	strd	r2, r2, [r5, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
900091a2:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
900091a6:	622a      	str	r2, [r5, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
900091a8:	636b      	str	r3, [r5, #52]	; 0x34
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
900091aa:	626a      	str	r2, [r5, #36]	; 0x24
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
900091ac:	63ab      	str	r3, [r5, #56]	; 0x38
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
900091ae:	62aa      	str	r2, [r5, #40]	; 0x28
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
900091b0:	63eb      	str	r3, [r5, #60]	; 0x3c
}
900091b2:	4630      	mov	r0, r6
900091b4:	b008      	add	sp, #32
900091b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
900091ba:	f06f 0604 	mvn.w	r6, #4
}
900091be:	4630      	mov	r0, r6
900091c0:	b008      	add	sp, #32
900091c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = BSP_ERROR_WRONG_PARAM;
900091c6:	f06f 0601 	mvn.w	r6, #1
}
900091ca:	4630      	mov	r0, r6
900091cc:	b008      	add	sp, #32
900091ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ret = BSP_ERROR_NO_INIT;
900091d2:	f04f 36ff 	mov.w	r6, #4294967295
900091d6:	e7ec      	b.n	900091b2 <BSP_TS_Init+0xce>
900091d8:	90008659 	.word	0x90008659
900091dc:	2400dce0 	.word	0x2400dce0
900091e0:	900085c5 	.word	0x900085c5
900091e4:	90008e31 	.word	0x90008e31
900091e8:	90008df5 	.word	0x90008df5
900091ec:	90008e6d 	.word	0x90008e6d
900091f0:	24000024 	.word	0x24000024
900091f4:	2400dd08 	.word	0x2400dd08
900091f8:	2400dd0c 	.word	0x2400dd0c
900091fc:	2400dd4c 	.word	0x2400dd4c

90009200 <BSP_TS_GetState>:
  if(Instance >= TS_INSTANCES_NBR)
90009200:	2800      	cmp	r0, #0
90009202:	d157      	bne.n	900092b4 <BSP_TS_GetState+0xb4>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
90009204:	4b2d      	ldr	r3, [pc, #180]	; (900092bc <BSP_TS_GetState+0xbc>)
90009206:	4a2e      	ldr	r2, [pc, #184]	; (900092c0 <BSP_TS_GetState+0xc0>)
90009208:	681b      	ldr	r3, [r3, #0]
9000920a:	6810      	ldr	r0, [r2, #0]
9000920c:	691b      	ldr	r3, [r3, #16]
{
9000920e:	b5f0      	push	{r4, r5, r6, r7, lr}
90009210:	b085      	sub	sp, #20
90009212:	460c      	mov	r4, r1
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
90009214:	a901      	add	r1, sp, #4
90009216:	4798      	blx	r3
90009218:	2800      	cmp	r0, #0
9000921a:	db41      	blt.n	900092a0 <BSP_TS_GetState+0xa0>
    else if(state.TouchDetected != 0U)
9000921c:	9d01      	ldr	r5, [sp, #4]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
9000921e:	4b29      	ldr	r3, [pc, #164]	; (900092c4 <BSP_TS_GetState+0xc4>)
    else if(state.TouchDetected != 0U)
90009220:	b93d      	cbnz	r5, 90009232 <BSP_TS_GetState+0x32>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
90009222:	699a      	ldr	r2, [r3, #24]
  int32_t ret = BSP_ERROR_NONE;
90009224:	4628      	mov	r0, r5
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
90009226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      TS_State->TouchDetected = 0U;
90009228:	6025      	str	r5, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
9000922a:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
9000922e:	b005      	add	sp, #20
90009230:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
90009232:	6898      	ldr	r0, [r3, #8]
90009234:	0702      	lsls	r2, r0, #28
      y_oriented = state.TouchY;
90009236:	e9dd c702 	ldrd	ip, r7, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
9000923a:	d435      	bmi.n	900092a8 <BSP_TS_GetState+0xa8>
      y_oriented = state.TouchY;
9000923c:	4639      	mov	r1, r7
      x_oriented = state.TouchX;
9000923e:	4662      	mov	r2, ip
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
90009240:	691e      	ldr	r6, [r3, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
90009242:	f010 0f02 	tst.w	r0, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
90009246:	bf1c      	itt	ne
90009248:	f106 32ff 	addne.w	r2, r6, #4294967295
9000924c:	eba2 020c 	subne.w	r2, r2, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
90009250:	f010 0f04 	tst.w	r0, #4
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
90009254:	6958      	ldr	r0, [r3, #20]
90009256:	bf18      	it	ne
90009258:	1bc1      	subne	r1, r0, r7
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
9000925a:	681f      	ldr	r7, [r3, #0]
9000925c:	fb07 f202 	mul.w	r2, r7, r2
90009260:	fbb2 f2f6 	udiv	r2, r2, r6
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90009264:	685e      	ldr	r6, [r3, #4]
      TS_State->TouchDetected = state.TouchDetected;
90009266:	6025      	str	r5, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90009268:	fb06 f101 	mul.w	r1, r6, r1
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
9000926c:	699e      	ldr	r6, [r3, #24]
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
9000926e:	6add      	ldr	r5, [r3, #44]	; 0x2c
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
90009270:	42b2      	cmp	r2, r6
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
90009272:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90009274:	fbb1 f1f0 	udiv	r1, r1, r0
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
90009278:	bf8c      	ite	hi
9000927a:	1b90      	subhi	r0, r2, r6
9000927c:	1ab0      	subls	r0, r6, r2
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
9000927e:	42a9      	cmp	r1, r5
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90009280:	60a1      	str	r1, [r4, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
90009282:	bf8c      	ite	hi
90009284:	1b4f      	subhi	r7, r1, r5
90009286:	1a6f      	subls	r7, r5, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
90009288:	42b8      	cmp	r0, r7
9000928a:	bf38      	it	cc
9000928c:	4638      	movcc	r0, r7
9000928e:	68df      	ldr	r7, [r3, #12]
90009290:	4287      	cmp	r7, r0
  int32_t ret = BSP_ERROR_NONE;
90009292:	f04f 0000 	mov.w	r0, #0
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
90009296:	d20a      	bcs.n	900092ae <BSP_TS_GetState+0xae>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
90009298:	619a      	str	r2, [r3, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
9000929a:	62d9      	str	r1, [r3, #44]	; 0x2c
}
9000929c:	b005      	add	sp, #20
9000929e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = BSP_ERROR_COMPONENT_FAILURE;
900092a0:	f06f 0004 	mvn.w	r0, #4
}
900092a4:	b005      	add	sp, #20
900092a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        y_oriented = state.TouchX;
900092a8:	4661      	mov	r1, ip
        x_oriented = state.TouchY;
900092aa:	463a      	mov	r2, r7
900092ac:	e7c8      	b.n	90009240 <BSP_TS_GetState+0x40>
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
900092ae:	e9c4 6501 	strd	r6, r5, [r4, #4]
900092b2:	e7bc      	b.n	9000922e <BSP_TS_GetState+0x2e>
    ret = BSP_ERROR_WRONG_PARAM;
900092b4:	f06f 0001 	mvn.w	r0, #1
}
900092b8:	4770      	bx	lr
900092ba:	bf00      	nop
900092bc:	2400dd4c 	.word	0x2400dd4c
900092c0:	2400dd08 	.word	0x2400dd08
900092c4:	2400dd0c 	.word	0x2400dd0c

900092c8 <SystemInit>:
#endif

extern unsigned int VECTOR_TABLE_LOCATION;

void SystemInit (void)
{
900092c8:	b410      	push	{r4}
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
900092ca:	4c19      	ldr	r4, [pc, #100]	; (90009330 <SystemInit+0x68>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
900092cc:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
900092ce:	4b19      	ldr	r3, [pc, #100]	; (90009334 <SystemInit+0x6c>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
900092d0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
900092d4:	4818      	ldr	r0, [pc, #96]	; (90009338 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
900092d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
900092da:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
900092de:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
900092e0:	4c16      	ldr	r4, [pc, #88]	; (9000933c <SystemInit+0x74>)
  RCC->CR |= RCC_CR_HSION;
900092e2:	f041 0101 	orr.w	r1, r1, #1
900092e6:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
900092e8:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
900092ea:	6819      	ldr	r1, [r3, #0]
900092ec:	4008      	ands	r0, r1
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
900092ee:	4914      	ldr	r1, [pc, #80]	; (90009340 <SystemInit+0x78>)
  RCC->CR &= 0xEAF6ED7FU;
900092f0:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
900092f2:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
900092f4:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
900092f6:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
900092f8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
900092fa:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
900092fc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
900092fe:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
90009300:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
90009302:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
90009304:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
90009306:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
90009308:	6818      	ldr	r0, [r3, #0]
9000930a:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
9000930e:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
90009310:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90009312:	6823      	ldr	r3, [r4, #0]
90009314:	4019      	ands	r1, r3
90009316:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000931a:	d203      	bcs.n	90009324 <SystemInit+0x5c>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
9000931c:	4b09      	ldr	r3, [pc, #36]	; (90009344 <SystemInit+0x7c>)
9000931e:	2201      	movs	r2, #1
90009320:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#elif defined(VECT_TAB_QSPI)
  SCB->VTOR = (unsigned int)&VECTOR_TABLE_LOCATION; /* Vector Table Relocation in External FLASH */
90009324:	4a08      	ldr	r2, [pc, #32]	; (90009348 <SystemInit+0x80>)
90009326:	4b02      	ldr	r3, [pc, #8]	; (90009330 <SystemInit+0x68>)
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
90009328:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = (unsigned int)&VECTOR_TABLE_LOCATION; /* Vector Table Relocation in External FLASH */
9000932c:	609a      	str	r2, [r3, #8]
}
9000932e:	4770      	bx	lr
90009330:	e000ed00 	.word	0xe000ed00
90009334:	58024400 	.word	0x58024400
90009338:	eaf6ed7f 	.word	0xeaf6ed7f
9000933c:	5c001000 	.word	0x5c001000
90009340:	ffff0000 	.word	0xffff0000
90009344:	51008000 	.word	0x51008000
90009348:	90000000 	.word	0x90000000

9000934c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
9000934c:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
9000934e:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90009350:	4c12      	ldr	r4, [pc, #72]	; (9000939c <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90009352:	f000 f843 	bl	900093dc <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90009356:	f003 fc65 	bl	9000cc24 <HAL_RCC_GetSysClockFreq>
9000935a:	4b11      	ldr	r3, [pc, #68]	; (900093a0 <HAL_Init+0x54>)
9000935c:	4911      	ldr	r1, [pc, #68]	; (900093a4 <HAL_Init+0x58>)
9000935e:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90009360:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90009362:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90009366:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000936a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000936c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000936e:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90009372:	490d      	ldr	r1, [pc, #52]	; (900093a8 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90009374:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90009378:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000937a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
9000937e:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90009380:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90009382:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90009384:	f7fb fc7c 	bl	90004c80 <HAL_InitTick>
90009388:	b110      	cbz	r0, 90009390 <HAL_Init+0x44>
  {
    return HAL_ERROR;
9000938a:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
9000938c:	4620      	mov	r0, r4
9000938e:	bd10      	pop	{r4, pc}
90009390:	4604      	mov	r4, r0
  HAL_MspInit();
90009392:	f7fb fa33 	bl	900047fc <HAL_MspInit>
}
90009396:	4620      	mov	r0, r4
90009398:	bd10      	pop	{r4, pc}
9000939a:	bf00      	nop
9000939c:	24000058 	.word	0x24000058
900093a0:	58024400 	.word	0x58024400
900093a4:	9002b228 	.word	0x9002b228
900093a8:	24000054 	.word	0x24000054

900093ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
900093ac:	4a03      	ldr	r2, [pc, #12]	; (900093bc <HAL_IncTick+0x10>)
900093ae:	4b04      	ldr	r3, [pc, #16]	; (900093c0 <HAL_IncTick+0x14>)
900093b0:	6811      	ldr	r1, [r2, #0]
900093b2:	781b      	ldrb	r3, [r3, #0]
900093b4:	440b      	add	r3, r1
900093b6:	6013      	str	r3, [r2, #0]
}
900093b8:	4770      	bx	lr
900093ba:	bf00      	nop
900093bc:	2400dd50 	.word	0x2400dd50
900093c0:	2400005c 	.word	0x2400005c

900093c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
900093c4:	4b01      	ldr	r3, [pc, #4]	; (900093cc <HAL_GetTick+0x8>)
900093c6:	6818      	ldr	r0, [r3, #0]
}
900093c8:	4770      	bx	lr
900093ca:	bf00      	nop
900093cc:	2400dd50 	.word	0x2400dd50

900093d0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
900093d0:	4b01      	ldr	r3, [pc, #4]	; (900093d8 <HAL_GetREVID+0x8>)
900093d2:	6818      	ldr	r0, [r3, #0]
}
900093d4:	0c00      	lsrs	r0, r0, #16
900093d6:	4770      	bx	lr
900093d8:	5c001000 	.word	0x5c001000

900093dc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
900093dc:	4906      	ldr	r1, [pc, #24]	; (900093f8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
900093de:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
900093e2:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
900093e4:	4b05      	ldr	r3, [pc, #20]	; (900093fc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
900093e6:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
900093e8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
900093ec:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
900093f0:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
900093f2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
900093f4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
900093f6:	4770      	bx	lr
900093f8:	e000ed00 	.word	0xe000ed00
900093fc:	05fa0000 	.word	0x05fa0000

90009400 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90009400:	4b1b      	ldr	r3, [pc, #108]	; (90009470 <HAL_NVIC_SetPriority+0x70>)
90009402:	68db      	ldr	r3, [r3, #12]
90009404:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
90009408:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
9000940a:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
9000940e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90009412:	f1be 0f04 	cmp.w	lr, #4
90009416:	bf28      	it	cs
90009418:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
9000941c:	f1bc 0f06 	cmp.w	ip, #6
90009420:	d91a      	bls.n	90009458 <HAL_NVIC_SetPriority+0x58>
90009422:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90009424:	f04f 3cff 	mov.w	ip, #4294967295
90009428:	fa0c fc03 	lsl.w	ip, ip, r3
9000942c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90009430:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
90009434:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90009436:	fa0c fc0e 	lsl.w	ip, ip, lr
9000943a:	ea21 010c 	bic.w	r1, r1, ip
9000943e:	fa01 f103 	lsl.w	r1, r1, r3
90009442:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
90009446:	db0a      	blt.n	9000945e <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90009448:	0109      	lsls	r1, r1, #4
9000944a:	4b0a      	ldr	r3, [pc, #40]	; (90009474 <HAL_NVIC_SetPriority+0x74>)
9000944c:	b2c9      	uxtb	r1, r1
9000944e:	4403      	add	r3, r0
90009450:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
90009454:	f85d fb04 	ldr.w	pc, [sp], #4
90009458:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
9000945a:	4613      	mov	r3, r2
9000945c:	e7e8      	b.n	90009430 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000945e:	f000 000f 	and.w	r0, r0, #15
90009462:	0109      	lsls	r1, r1, #4
90009464:	4b04      	ldr	r3, [pc, #16]	; (90009478 <HAL_NVIC_SetPriority+0x78>)
90009466:	b2c9      	uxtb	r1, r1
90009468:	4403      	add	r3, r0
9000946a:	7619      	strb	r1, [r3, #24]
9000946c:	f85d fb04 	ldr.w	pc, [sp], #4
90009470:	e000ed00 	.word	0xe000ed00
90009474:	e000e100 	.word	0xe000e100
90009478:	e000ecfc 	.word	0xe000ecfc

9000947c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
9000947c:	2800      	cmp	r0, #0
9000947e:	db07      	blt.n	90009490 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90009480:	2301      	movs	r3, #1
90009482:	f000 011f 	and.w	r1, r0, #31
90009486:	4a03      	ldr	r2, [pc, #12]	; (90009494 <HAL_NVIC_EnableIRQ+0x18>)
90009488:	0940      	lsrs	r0, r0, #5
9000948a:	408b      	lsls	r3, r1
9000948c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
90009490:	4770      	bx	lr
90009492:	bf00      	nop
90009494:	e000e100 	.word	0xe000e100

90009498 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
90009498:	2800      	cmp	r0, #0
9000949a:	db0c      	blt.n	900094b6 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
9000949c:	0943      	lsrs	r3, r0, #5
9000949e:	2201      	movs	r2, #1
900094a0:	f000 001f 	and.w	r0, r0, #31
900094a4:	4904      	ldr	r1, [pc, #16]	; (900094b8 <HAL_NVIC_DisableIRQ+0x20>)
900094a6:	3320      	adds	r3, #32
900094a8:	4082      	lsls	r2, r0
900094aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
900094ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900094b2:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
900094b6:	4770      	bx	lr
900094b8:	e000e100 	.word	0xe000e100

900094bc <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
900094bc:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
900094c0:	4b04      	ldr	r3, [pc, #16]	; (900094d4 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
900094c2:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
900094c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
900094c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
900094ca:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
900094cc:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
900094d0:	4770      	bx	lr
900094d2:	bf00      	nop
900094d4:	e000ed00 	.word	0xe000ed00

900094d8 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
900094d8:	4b06      	ldr	r3, [pc, #24]	; (900094f4 <HAL_MPU_Enable+0x1c>)
900094da:	f040 0001 	orr.w	r0, r0, #1
900094de:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
900094e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
900094e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
900094e8:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
900094ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900094ee:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
900094f2:	4770      	bx	lr
900094f4:	e000ed00 	.word	0xe000ed00

900094f8 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
900094f8:	4a17      	ldr	r2, [pc, #92]	; (90009558 <HAL_MPU_ConfigRegion+0x60>)
900094fa:	7843      	ldrb	r3, [r0, #1]
900094fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
90009500:	7801      	ldrb	r1, [r0, #0]
90009502:	b321      	cbz	r1, 9000954e <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
90009504:	6843      	ldr	r3, [r0, #4]
{
90009506:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
90009508:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
9000950c:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
9000950e:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90009512:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90009514:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90009518:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
9000951c:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90009520:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90009522:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90009524:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90009528:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
9000952c:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90009530:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90009534:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
90009538:	7a01      	ldrb	r1, [r0, #8]
9000953a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
9000953e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
90009542:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90009546:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
9000954a:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
9000954e:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
90009552:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
90009556:	4770      	bx	lr
90009558:	e000ed00 	.word	0xe000ed00

9000955c <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
9000955c:	2800      	cmp	r0, #0
9000955e:	d036      	beq.n	900095ce <HAL_CRC_Init+0x72>
{
90009560:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
90009562:	7f43      	ldrb	r3, [r0, #29]
90009564:	4604      	mov	r4, r0
90009566:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000956a:	b363      	cbz	r3, 900095c6 <HAL_CRC_Init+0x6a>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
9000956c:	2202      	movs	r2, #2

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
9000956e:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
90009570:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
90009572:	b9f3      	cbnz	r3, 900095b2 <HAL_CRC_Init+0x56>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
90009574:	6823      	ldr	r3, [r4, #0]
90009576:	4a17      	ldr	r2, [pc, #92]	; (900095d4 <HAL_CRC_Init+0x78>)
90009578:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
9000957a:	689a      	ldr	r2, [r3, #8]
9000957c:	f022 0218 	bic.w	r2, r2, #24
90009580:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
90009582:	7962      	ldrb	r2, [r4, #5]
90009584:	b18a      	cbz	r2, 900095aa <HAL_CRC_Init+0x4e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
90009586:	6922      	ldr	r2, [r4, #16]
90009588:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
9000958a:	689a      	ldr	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
9000958c:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90009590:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90009594:	4302      	orrs	r2, r0

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
90009596:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90009598:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
9000959a:	689a      	ldr	r2, [r3, #8]
9000959c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
900095a0:	430a      	orrs	r2, r1
  hcrc->State = HAL_CRC_STATE_READY;
900095a2:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
900095a4:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
900095a6:	7761      	strb	r1, [r4, #29]
}
900095a8:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
900095aa:	f04f 32ff 	mov.w	r2, #4294967295
900095ae:	611a      	str	r2, [r3, #16]
900095b0:	e7eb      	b.n	9000958a <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
900095b2:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
900095b6:	4620      	mov	r0, r4
900095b8:	f000 f80e 	bl	900095d8 <HAL_CRCEx_Polynomial_Set>
900095bc:	b908      	cbnz	r0, 900095c2 <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
900095be:	6823      	ldr	r3, [r4, #0]
900095c0:	e7df      	b.n	90009582 <HAL_CRC_Init+0x26>
    return HAL_ERROR;
900095c2:	2001      	movs	r0, #1
}
900095c4:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
900095c6:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
900095c8:	f7fb f932 	bl	90004830 <HAL_CRC_MspInit>
900095cc:	e7ce      	b.n	9000956c <HAL_CRC_Init+0x10>
    return HAL_ERROR;
900095ce:	2001      	movs	r0, #1
}
900095d0:	4770      	bx	lr
900095d2:	bf00      	nop
900095d4:	04c11db7 	.word	0x04c11db7

900095d8 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
900095d8:	07cb      	lsls	r3, r1, #31
900095da:	d51a      	bpl.n	90009612 <HAL_CRCEx_Polynomial_Set+0x3a>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
900095dc:	231e      	movs	r3, #30
{
900095de:	b410      	push	{r4}
900095e0:	e001      	b.n	900095e6 <HAL_CRCEx_Polynomial_Set+0xe>
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
900095e2:	3b01      	subs	r3, #1
900095e4:	d317      	bcc.n	90009616 <HAL_CRCEx_Polynomial_Set+0x3e>
900095e6:	fa21 fc03 	lsr.w	ip, r1, r3
900095ea:	f01c 0f01 	tst.w	ip, #1
900095ee:	d0f8      	beq.n	900095e2 <HAL_CRCEx_Polynomial_Set+0xa>
    {
    }

    switch (PolyLength)
900095f0:	2a18      	cmp	r2, #24
900095f2:	d811      	bhi.n	90009618 <HAL_CRCEx_Polynomial_Set+0x40>
900095f4:	e8df f002 	tbb	[pc, r2]
900095f8:	10101016 	.word	0x10101016
900095fc:	10101010 	.word	0x10101010
90009600:	10101024 	.word	0x10101024
90009604:	10101010 	.word	0x10101010
90009608:	10101021 	.word	0x10101021
9000960c:	10101010 	.word	0x10101010
90009610:	14          	.byte	0x14
90009611:	00          	.byte	0x00
    status =  HAL_ERROR;
90009612:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
90009614:	4770      	bx	lr
    switch (PolyLength)
90009616:	b12a      	cbz	r2, 90009624 <HAL_CRCEx_Polynomial_Set+0x4c>
        status =  HAL_ERROR;
90009618:	2001      	movs	r0, #1
}
9000961a:	f85d 4b04 	ldr.w	r4, [sp], #4
9000961e:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_7B)
90009620:	2b06      	cmp	r3, #6
90009622:	d8f9      	bhi.n	90009618 <HAL_CRCEx_Polynomial_Set+0x40>
    WRITE_REG(hcrc->Instance->POL, Pol);
90009624:	6804      	ldr	r4, [r0, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
90009626:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
90009628:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
9000962a:	68a3      	ldr	r3, [r4, #8]
9000962c:	f023 0318 	bic.w	r3, r3, #24
90009630:	4313      	orrs	r3, r2
90009632:	60a3      	str	r3, [r4, #8]
}
90009634:	f85d 4b04 	ldr.w	r4, [sp], #4
90009638:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_8B)
9000963a:	2b07      	cmp	r3, #7
9000963c:	d9f2      	bls.n	90009624 <HAL_CRCEx_Polynomial_Set+0x4c>
9000963e:	e7eb      	b.n	90009618 <HAL_CRCEx_Polynomial_Set+0x40>
        if (msb >= HAL_CRC_LENGTH_16B)
90009640:	2b0f      	cmp	r3, #15
90009642:	d9ef      	bls.n	90009624 <HAL_CRCEx_Polynomial_Set+0x4c>
90009644:	e7e8      	b.n	90009618 <HAL_CRCEx_Polynomial_Set+0x40>
90009646:	bf00      	nop

90009648 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
90009648:	2800      	cmp	r0, #0
9000964a:	d035      	beq.n	900096b8 <HAL_DMA2D_Init+0x70>
{
9000964c:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
9000964e:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
90009652:	4604      	mov	r4, r0
90009654:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90009658:	b34b      	cbz	r3, 900096ae <HAL_DMA2D_Init+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
9000965a:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
9000965c:	2002      	movs	r0, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
9000965e:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90009660:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90009664:	69e1      	ldr	r1, [r4, #28]
90009666:	681d      	ldr	r5, [r3, #0]
90009668:	4814      	ldr	r0, [pc, #80]	; (900096bc <HAL_DMA2D_Init+0x74>)
9000966a:	4311      	orrs	r1, r2

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
9000966c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
9000966e:	4028      	ands	r0, r5
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90009670:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90009672:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90009674:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90009676:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90009678:	4302      	orrs	r2, r0
9000967a:	6b59      	ldr	r1, [r3, #52]	; 0x34
9000967c:	4810      	ldr	r0, [pc, #64]	; (900096c0 <HAL_DMA2D_Init+0x78>)
9000967e:	4008      	ands	r0, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90009680:	4910      	ldr	r1, [pc, #64]	; (900096c4 <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90009682:	4302      	orrs	r2, r0
90009684:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90009686:	6c1a      	ldr	r2, [r3, #64]	; 0x40
90009688:	4011      	ands	r1, r2
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
9000968a:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
9000968e:	4329      	orrs	r1, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90009690:	0552      	lsls	r2, r2, #21
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90009692:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90009694:	6b59      	ldr	r1, [r3, #52]	; 0x34
90009696:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
9000969a:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
9000969c:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
900096a0:	430a      	orrs	r2, r1
900096a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
900096a4:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
900096a6:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
900096a8:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
900096ac:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
900096ae:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
900096b2:	f7fb f8d5 	bl	90004860 <HAL_DMA2D_MspInit>
900096b6:	e7d0      	b.n	9000965a <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
900096b8:	2001      	movs	r0, #1
}
900096ba:	4770      	bx	lr
900096bc:	fff8ffbf 	.word	0xfff8ffbf
900096c0:	fffffef8 	.word	0xfffffef8
900096c4:	ffff0000 	.word	0xffff0000

900096c8 <HAL_DMA2D_LineEventCallback>:
900096c8:	4770      	bx	lr
900096ca:	bf00      	nop

900096cc <HAL_DMA2D_CLUTLoadingCpltCallback>:
900096cc:	4770      	bx	lr
900096ce:	bf00      	nop

900096d0 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
900096d0:	6803      	ldr	r3, [r0, #0]
{
900096d2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
900096d4:	685d      	ldr	r5, [r3, #4]
{
900096d6:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
900096d8:	681e      	ldr	r6, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
900096da:	07ea      	lsls	r2, r5, #31
900096dc:	d501      	bpl.n	900096e2 <HAL_DMA2D_IRQHandler+0x12>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
900096de:	05f1      	lsls	r1, r6, #23
900096e0:	d456      	bmi.n	90009790 <HAL_DMA2D_IRQHandler+0xc0>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
900096e2:	06aa      	lsls	r2, r5, #26
900096e4:	d501      	bpl.n	900096ea <HAL_DMA2D_IRQHandler+0x1a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
900096e6:	04b3      	lsls	r3, r6, #18
900096e8:	d43b      	bmi.n	90009762 <HAL_DMA2D_IRQHandler+0x92>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
900096ea:	0728      	lsls	r0, r5, #28
900096ec:	d501      	bpl.n	900096f2 <HAL_DMA2D_IRQHandler+0x22>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
900096ee:	0531      	lsls	r1, r6, #20
900096f0:	d421      	bmi.n	90009736 <HAL_DMA2D_IRQHandler+0x66>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
900096f2:	076a      	lsls	r2, r5, #29
900096f4:	d501      	bpl.n	900096fa <HAL_DMA2D_IRQHandler+0x2a>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
900096f6:	0573      	lsls	r3, r6, #21
900096f8:	d472      	bmi.n	900097e0 <HAL_DMA2D_IRQHandler+0x110>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
900096fa:	07a8      	lsls	r0, r5, #30
900096fc:	d501      	bpl.n	90009702 <HAL_DMA2D_IRQHandler+0x32>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
900096fe:	05b1      	lsls	r1, r6, #22
90009700:	d404      	bmi.n	9000970c <HAL_DMA2D_IRQHandler+0x3c>
        hdma2d->XferCpltCallback(hdma2d);
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
90009702:	06ea      	lsls	r2, r5, #27
90009704:	d501      	bpl.n	9000970a <HAL_DMA2D_IRQHandler+0x3a>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
90009706:	04f3      	lsls	r3, r6, #19
90009708:	d457      	bmi.n	900097ba <HAL_DMA2D_IRQHandler+0xea>
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
9000970a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
9000970c:	6823      	ldr	r3, [r4, #0]
9000970e:	681a      	ldr	r2, [r3, #0]
90009710:	f422 7200 	bic.w	r2, r2, #512	; 0x200
90009714:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
90009716:	2202      	movs	r2, #2
90009718:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_READY;
9000971a:	2201      	movs	r2, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
9000971c:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000971e:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
90009720:	2300      	movs	r3, #0
      hdma2d->State = HAL_DMA2D_STATE_READY;
90009722:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90009726:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferCpltCallback != NULL)
9000972a:	6a23      	ldr	r3, [r4, #32]
9000972c:	2b00      	cmp	r3, #0
9000972e:	d0e8      	beq.n	90009702 <HAL_DMA2D_IRQHandler+0x32>
        hdma2d->XferCpltCallback(hdma2d);
90009730:	4620      	mov	r0, r4
90009732:	4798      	blx	r3
90009734:	e7e5      	b.n	90009702 <HAL_DMA2D_IRQHandler+0x32>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
90009736:	6823      	ldr	r3, [r4, #0]
90009738:	681a      	ldr	r2, [r3, #0]
9000973a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
9000973e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
90009740:	2208      	movs	r2, #8
90009742:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90009744:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
90009746:	6e63      	ldr	r3, [r4, #100]	; 0x64
90009748:	4313      	orrs	r3, r2
9000974a:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
9000974c:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90009750:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
90009752:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
90009754:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
90009758:	2b00      	cmp	r3, #0
9000975a:	d0ca      	beq.n	900096f2 <HAL_DMA2D_IRQHandler+0x22>
        hdma2d->XferErrorCallback(hdma2d);
9000975c:	4620      	mov	r0, r4
9000975e:	4798      	blx	r3
90009760:	e7c7      	b.n	900096f2 <HAL_DMA2D_IRQHandler+0x22>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
90009762:	6823      	ldr	r3, [r4, #0]
90009764:	681a      	ldr	r2, [r3, #0]
90009766:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
9000976a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
9000976c:	2220      	movs	r2, #32
9000976e:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90009770:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90009772:	6e63      	ldr	r3, [r4, #100]	; 0x64
90009774:	f043 0302 	orr.w	r3, r3, #2
90009778:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
9000977a:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
9000977e:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
90009780:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
90009782:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
90009786:	2b00      	cmp	r3, #0
90009788:	d0af      	beq.n	900096ea <HAL_DMA2D_IRQHandler+0x1a>
        hdma2d->XferErrorCallback(hdma2d);
9000978a:	4620      	mov	r0, r4
9000978c:	4798      	blx	r3
9000978e:	e7ac      	b.n	900096ea <HAL_DMA2D_IRQHandler+0x1a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
90009790:	681a      	ldr	r2, [r3, #0]
90009792:	f422 7280 	bic.w	r2, r2, #256	; 0x100
90009796:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90009798:	6e42      	ldr	r2, [r0, #100]	; 0x64
9000979a:	f042 0201 	orr.w	r2, r2, #1
9000979e:	6642      	str	r2, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
900097a0:	2201      	movs	r2, #1
900097a2:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
900097a4:	2304      	movs	r3, #4
900097a6:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
900097aa:	2300      	movs	r3, #0
900097ac:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
900097b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
900097b2:	2b00      	cmp	r3, #0
900097b4:	d095      	beq.n	900096e2 <HAL_DMA2D_IRQHandler+0x12>
        hdma2d->XferErrorCallback(hdma2d);
900097b6:	4798      	blx	r3
900097b8:	e793      	b.n	900096e2 <HAL_DMA2D_IRQHandler+0x12>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
900097ba:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
900097bc:	2010      	movs	r0, #16
      hdma2d->State = HAL_DMA2D_STATE_READY;
900097be:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
900097c0:	2500      	movs	r5, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
900097c2:	681a      	ldr	r2, [r3, #0]
900097c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
900097c8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
900097ca:	6098      	str	r0, [r3, #8]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
900097cc:	4620      	mov	r0, r4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
900097ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
900097d0:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
900097d4:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
900097d6:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
900097da:	f7ff ff77 	bl	900096cc <HAL_DMA2D_CLUTLoadingCpltCallback>
}
900097de:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
900097e0:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
900097e2:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
900097e4:	681a      	ldr	r2, [r3, #0]
900097e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
900097ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
900097ec:	2204      	movs	r2, #4
900097ee:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
900097f0:	f7ff ff6a 	bl	900096c8 <HAL_DMA2D_LineEventCallback>
900097f4:	e781      	b.n	900096fa <HAL_DMA2D_IRQHandler+0x2a>
900097f6:	bf00      	nop

900097f8 <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
900097f8:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
900097fc:	2a01      	cmp	r2, #1
900097fe:	d065      	beq.n	900098cc <HAL_DMA2D_ConfigLayer+0xd4>
90009800:	4603      	mov	r3, r0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90009802:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90009806:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90009808:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
9000980c:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
9000980e:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90009810:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
90009814:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90009818:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
9000981a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
9000981c:	6b05      	ldr	r5, [r0, #48]	; 0x30
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
9000981e:	0512      	lsls	r2, r2, #20
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90009820:	f1a4 0c09 	sub.w	ip, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90009824:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
90009828:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
9000982a:	f1bc 0f01 	cmp.w	ip, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
9000982e:	ea42 0204 	orr.w	r2, r2, r4
90009832:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90009836:	d922      	bls.n	9000987e <HAL_DMA2D_ConfigLayer+0x86>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90009838:	6b45      	ldr	r5, [r0, #52]	; 0x34
9000983a:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
9000983e:	b981      	cbnz	r1, 90009862 <HAL_DMA2D_ConfigLayer+0x6a>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90009840:	6818      	ldr	r0, [r3, #0]
90009842:	4923      	ldr	r1, [pc, #140]	; (900098d0 <HAL_DMA2D_ConfigLayer+0xd8>)
90009844:	6a45      	ldr	r5, [r0, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90009846:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90009848:	4029      	ands	r1, r5
9000984a:	4311      	orrs	r1, r2
9000984c:	6241      	str	r1, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
9000984e:	6184      	str	r4, [r0, #24]
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90009850:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
90009852:	2101      	movs	r1, #1

  return HAL_OK;
90009854:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
90009856:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
9000985a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
9000985e:	bc70      	pop	{r4, r5, r6}
90009860:	4770      	bx	lr
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90009862:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90009864:	681c      	ldr	r4, [r3, #0]
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90009866:	d129      	bne.n	900098bc <HAL_DMA2D_ConfigLayer+0xc4>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90009868:	69e5      	ldr	r5, [r4, #28]
9000986a:	491a      	ldr	r1, [pc, #104]	; (900098d4 <HAL_DMA2D_ConfigLayer+0xdc>)
9000986c:	4029      	ands	r1, r5
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
9000986e:	6c05      	ldr	r5, [r0, #64]	; 0x40
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90009870:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90009872:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
90009876:	4311      	orrs	r1, r2
90009878:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
9000987a:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
9000987c:	e7e8      	b.n	90009850 <HAL_DMA2D_ConfigLayer+0x58>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
9000987e:	6b44      	ldr	r4, [r0, #52]	; 0x34
90009880:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
90009884:	4314      	orrs	r4, r2
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90009886:	b961      	cbnz	r1, 900098a2 <HAL_DMA2D_ConfigLayer+0xaa>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90009888:	6819      	ldr	r1, [r3, #0]
9000988a:	4a11      	ldr	r2, [pc, #68]	; (900098d0 <HAL_DMA2D_ConfigLayer+0xd8>)
9000988c:	6a4e      	ldr	r6, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
9000988e:	6b58      	ldr	r0, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90009890:	4032      	ands	r2, r6
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90009892:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90009894:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90009898:	4322      	orrs	r2, r4
9000989a:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
9000989c:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
9000989e:	6288      	str	r0, [r1, #40]	; 0x28
900098a0:	e7d6      	b.n	90009850 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
900098a2:	6819      	ldr	r1, [r3, #0]
900098a4:	4a0a      	ldr	r2, [pc, #40]	; (900098d0 <HAL_DMA2D_ConfigLayer+0xd8>)
900098a6:	69cd      	ldr	r5, [r1, #28]
900098a8:	402a      	ands	r2, r5
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
900098aa:	6a85      	ldr	r5, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
900098ac:	4322      	orrs	r2, r4
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
900098ae:	6b44      	ldr	r4, [r0, #52]	; 0x34
900098b0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
900098b4:	61ca      	str	r2, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
900098b6:	610d      	str	r5, [r1, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
900098b8:	620c      	str	r4, [r1, #32]
900098ba:	e7c9      	b.n	90009850 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
900098bc:	69e5      	ldr	r5, [r4, #28]
900098be:	4904      	ldr	r1, [pc, #16]	; (900098d0 <HAL_DMA2D_ConfigLayer+0xd8>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
900098c0:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
900098c2:	4029      	ands	r1, r5
900098c4:	4311      	orrs	r1, r2
900098c6:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
900098c8:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900098ca:	e7c1      	b.n	90009850 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
900098cc:	2002      	movs	r0, #2
}
900098ce:	4770      	bx	lr
900098d0:	00ccfff0 	.word	0x00ccfff0
900098d4:	00c0fff0 	.word	0x00c0fff0

900098d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
900098d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
900098dc:	680c      	ldr	r4, [r1, #0]
{
900098de:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
900098e0:	2c00      	cmp	r4, #0
900098e2:	f000 80a7 	beq.w	90009a34 <HAL_GPIO_Init+0x15c>
900098e6:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
900098ea:	4f8a      	ldr	r7, [pc, #552]	; (90009b14 <HAL_GPIO_Init+0x23c>)
  uint32_t position = 0x00U;
900098ec:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
900098ee:	2201      	movs	r2, #1
900098f0:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
900098f2:	ea12 0e04 	ands.w	lr, r2, r4
900098f6:	f000 8096 	beq.w	90009a26 <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
900098fa:	684d      	ldr	r5, [r1, #4]
900098fc:	f005 0903 	and.w	r9, r5, #3
90009900:	f109 36ff 	add.w	r6, r9, #4294967295
90009904:	2e01      	cmp	r6, #1
90009906:	f240 8098 	bls.w	90009a3a <HAL_GPIO_Init+0x162>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
9000990a:	f1b9 0f03 	cmp.w	r9, #3
9000990e:	f040 80d2 	bne.w	90009ab6 <HAL_GPIO_Init+0x1de>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90009912:	fa09 f20c 	lsl.w	r2, r9, ip
90009916:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
9000991a:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
9000991c:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90009920:	ea06 0608 	and.w	r6, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
90009924:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
90009928:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
9000992a:	d07c      	beq.n	90009a26 <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
9000992c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
90009930:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90009934:	f003 0903 	and.w	r9, r3, #3
90009938:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
9000993a:	f042 0202 	orr.w	r2, r2, #2
9000993e:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90009942:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90009946:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
9000994a:	f508 6880 	add.w	r8, r8, #1024	; 0x400
9000994e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90009952:	fa06 f609 	lsl.w	r6, r6, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90009956:	f002 0202 	and.w	r2, r2, #2
9000995a:	9201      	str	r2, [sp, #4]
9000995c:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
9000995e:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90009962:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90009966:	4e6c      	ldr	r6, [pc, #432]	; (90009b18 <HAL_GPIO_Init+0x240>)
90009968:	42b0      	cmp	r0, r6
9000996a:	d028      	beq.n	900099be <HAL_GPIO_Init+0xe6>
9000996c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
90009970:	42b0      	cmp	r0, r6
90009972:	f000 80ac 	beq.w	90009ace <HAL_GPIO_Init+0x1f6>
90009976:	4e69      	ldr	r6, [pc, #420]	; (90009b1c <HAL_GPIO_Init+0x244>)
90009978:	42b0      	cmp	r0, r6
9000997a:	f000 80ad 	beq.w	90009ad8 <HAL_GPIO_Init+0x200>
9000997e:	4e68      	ldr	r6, [pc, #416]	; (90009b20 <HAL_GPIO_Init+0x248>)
90009980:	42b0      	cmp	r0, r6
90009982:	f000 809f 	beq.w	90009ac4 <HAL_GPIO_Init+0x1ec>
90009986:	4e67      	ldr	r6, [pc, #412]	; (90009b24 <HAL_GPIO_Init+0x24c>)
90009988:	42b0      	cmp	r0, r6
9000998a:	f000 80af 	beq.w	90009aec <HAL_GPIO_Init+0x214>
9000998e:	4e66      	ldr	r6, [pc, #408]	; (90009b28 <HAL_GPIO_Init+0x250>)
90009990:	42b0      	cmp	r0, r6
90009992:	f000 80b0 	beq.w	90009af6 <HAL_GPIO_Init+0x21e>
90009996:	4e65      	ldr	r6, [pc, #404]	; (90009b2c <HAL_GPIO_Init+0x254>)
90009998:	42b0      	cmp	r0, r6
9000999a:	f000 80a2 	beq.w	90009ae2 <HAL_GPIO_Init+0x20a>
9000999e:	4e64      	ldr	r6, [pc, #400]	; (90009b30 <HAL_GPIO_Init+0x258>)
900099a0:	42b0      	cmp	r0, r6
900099a2:	f000 80ad 	beq.w	90009b00 <HAL_GPIO_Init+0x228>
900099a6:	4e63      	ldr	r6, [pc, #396]	; (90009b34 <HAL_GPIO_Init+0x25c>)
900099a8:	42b0      	cmp	r0, r6
900099aa:	f000 80ae 	beq.w	90009b0a <HAL_GPIO_Init+0x232>
900099ae:	4e62      	ldr	r6, [pc, #392]	; (90009b38 <HAL_GPIO_Init+0x260>)
900099b0:	42b0      	cmp	r0, r6
900099b2:	bf0c      	ite	eq
900099b4:	2609      	moveq	r6, #9
900099b6:	260a      	movne	r6, #10
900099b8:	fa06 f609 	lsl.w	r6, r6, r9
900099bc:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
900099be:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
900099c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
900099c6:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
900099ca:	ea6f 060e 	mvn.w	r6, lr
        temp = EXTI->RTSR1;
900099ce:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
900099d0:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
900099d4:	bf0c      	ite	eq
900099d6:	4032      	andeq	r2, r6
          temp |= iocurrent;
900099d8:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
900099dc:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
900099e0:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->FTSR1;
900099e4:	f8d8 2004 	ldr.w	r2, [r8, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
900099e8:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
900099ec:	bf0c      	ite	eq
900099ee:	4032      	andeq	r2, r6
          temp |= iocurrent;
900099f0:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
900099f4:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        EXTI->FTSR1 = temp;
900099f8:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI_CurrentCPU->EMR1;
900099fc:	f8d8 2084 	ldr.w	r2, [r8, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
90009a00:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
90009a04:	bf0c      	ite	eq
90009a06:	4032      	andeq	r2, r6
          temp |= iocurrent;
90009a08:	ea4e 0202 	orrne.w	r2, lr, r2

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
90009a0c:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
90009a0e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
90009a12:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
90009a16:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
90009a1a:	bf54      	ite	pl
90009a1c:	4032      	andpl	r2, r6
          temp |= iocurrent;
90009a1e:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
90009a22:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
90009a26:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90009a28:	f10c 0c02 	add.w	ip, ip, #2
90009a2c:	fa34 f203 	lsrs.w	r2, r4, r3
90009a30:	f47f af5d 	bne.w	900098ee <HAL_GPIO_Init+0x16>
  }
}
90009a34:	b003      	add	sp, #12
90009a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90009a3a:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
90009a3e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90009a40:	fa08 f80c 	lsl.w	r8, r8, ip
90009a44:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
90009a48:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90009a4a:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
90009a4e:	fa06 f60c 	lsl.w	r6, r6, ip
90009a52:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
90009a56:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90009a58:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
90009a5c:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90009a60:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90009a62:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90009a66:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
90009a68:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
90009a6a:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90009a6c:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90009a70:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90009a72:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90009a76:	fa06 f60c 	lsl.w	r6, r6, ip
90009a7a:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
90009a7e:	fa09 f20c 	lsl.w	r2, r9, ip
90009a82:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90009a84:	f47f af49 	bne.w	9000991a <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
90009a88:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90009a8c:	f003 0b07 	and.w	fp, r3, #7
90009a90:	260f      	movs	r6, #15
90009a92:	eb00 0989 	add.w	r9, r0, r9, lsl #2
90009a96:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
90009a9a:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90009a9e:	fa06 f60b 	lsl.w	r6, r6, fp
90009aa2:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90009aa6:	690e      	ldr	r6, [r1, #16]
90009aa8:	fa06 f60b 	lsl.w	r6, r6, fp
90009aac:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
90009ab0:	f8c9 6020 	str.w	r6, [r9, #32]
90009ab4:	e731      	b.n	9000991a <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90009ab6:	f04f 0803 	mov.w	r8, #3
90009aba:	fa08 f80c 	lsl.w	r8, r8, ip
90009abe:	ea6f 0808 	mvn.w	r8, r8
90009ac2:	e7d2      	b.n	90009a6a <HAL_GPIO_Init+0x192>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90009ac4:	2603      	movs	r6, #3
90009ac6:	fa06 f609 	lsl.w	r6, r6, r9
90009aca:	4332      	orrs	r2, r6
90009acc:	e777      	b.n	900099be <HAL_GPIO_Init+0xe6>
90009ace:	2601      	movs	r6, #1
90009ad0:	fa06 f609 	lsl.w	r6, r6, r9
90009ad4:	4332      	orrs	r2, r6
90009ad6:	e772      	b.n	900099be <HAL_GPIO_Init+0xe6>
90009ad8:	2602      	movs	r6, #2
90009ada:	fa06 f609 	lsl.w	r6, r6, r9
90009ade:	4332      	orrs	r2, r6
90009ae0:	e76d      	b.n	900099be <HAL_GPIO_Init+0xe6>
90009ae2:	2606      	movs	r6, #6
90009ae4:	fa06 f609 	lsl.w	r6, r6, r9
90009ae8:	4332      	orrs	r2, r6
90009aea:	e768      	b.n	900099be <HAL_GPIO_Init+0xe6>
90009aec:	2604      	movs	r6, #4
90009aee:	fa06 f609 	lsl.w	r6, r6, r9
90009af2:	4332      	orrs	r2, r6
90009af4:	e763      	b.n	900099be <HAL_GPIO_Init+0xe6>
90009af6:	2605      	movs	r6, #5
90009af8:	fa06 f609 	lsl.w	r6, r6, r9
90009afc:	4332      	orrs	r2, r6
90009afe:	e75e      	b.n	900099be <HAL_GPIO_Init+0xe6>
90009b00:	2607      	movs	r6, #7
90009b02:	fa06 f609 	lsl.w	r6, r6, r9
90009b06:	4332      	orrs	r2, r6
90009b08:	e759      	b.n	900099be <HAL_GPIO_Init+0xe6>
90009b0a:	2608      	movs	r6, #8
90009b0c:	fa06 f609 	lsl.w	r6, r6, r9
90009b10:	4332      	orrs	r2, r6
90009b12:	e754      	b.n	900099be <HAL_GPIO_Init+0xe6>
90009b14:	58024400 	.word	0x58024400
90009b18:	58020000 	.word	0x58020000
90009b1c:	58020800 	.word	0x58020800
90009b20:	58020c00 	.word	0x58020c00
90009b24:	58021000 	.word	0x58021000
90009b28:	58021400 	.word	0x58021400
90009b2c:	58021800 	.word	0x58021800
90009b30:	58021c00 	.word	0x58021c00
90009b34:	58022000 	.word	0x58022000
90009b38:	58022400 	.word	0x58022400

90009b3c <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
90009b3c:	2900      	cmp	r1, #0
90009b3e:	f000 80a4 	beq.w	90009c8a <HAL_GPIO_DeInit+0x14e>
  uint32_t position = 0x00U;
90009b42:	2300      	movs	r3, #0
{
90009b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90009b48:	f8df 9168 	ldr.w	r9, [pc, #360]	; 90009cb4 <HAL_GPIO_DeInit+0x178>
90009b4c:	b083      	sub	sp, #12
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90009b4e:	f8df 8168 	ldr.w	r8, [pc, #360]	; 90009cb8 <HAL_GPIO_DeInit+0x17c>
90009b52:	f8df a168 	ldr.w	sl, [pc, #360]	; 90009cbc <HAL_GPIO_DeInit+0x180>
90009b56:	f8df b168 	ldr.w	fp, [pc, #360]	; 90009cc0 <HAL_GPIO_DeInit+0x184>
    iocurrent = GPIO_Pin & (1UL << position) ;
90009b5a:	f04f 0e01 	mov.w	lr, #1
90009b5e:	fa0e f203 	lsl.w	r2, lr, r3
    if (iocurrent != 0x00U)
90009b62:	ea12 0c01 	ands.w	ip, r2, r1
90009b66:	d06b      	beq.n	90009c40 <HAL_GPIO_DeInit+0x104>
      tmp = SYSCFG->EXTICR[position >> 2U];
90009b68:	f023 0503 	bic.w	r5, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
90009b6c:	f003 0403 	and.w	r4, r3, #3
90009b70:	260f      	movs	r6, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90009b72:	4540      	cmp	r0, r8
90009b74:	444d      	add	r5, r9
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
90009b76:	ea4f 0484 	mov.w	r4, r4, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2U];
90009b7a:	68af      	ldr	r7, [r5, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
90009b7c:	fa06 f604 	lsl.w	r6, r6, r4
90009b80:	ea07 0706 	and.w	r7, r7, r6
90009b84:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90009b86:	d01f      	beq.n	90009bc8 <HAL_GPIO_DeInit+0x8c>
90009b88:	4550      	cmp	r0, sl
90009b8a:	d01a      	beq.n	90009bc2 <HAL_GPIO_DeInit+0x86>
90009b8c:	4558      	cmp	r0, fp
90009b8e:	d05e      	beq.n	90009c4e <HAL_GPIO_DeInit+0x112>
90009b90:	4f43      	ldr	r7, [pc, #268]	; (90009ca0 <HAL_GPIO_DeInit+0x164>)
90009b92:	42b8      	cmp	r0, r7
90009b94:	d065      	beq.n	90009c62 <HAL_GPIO_DeInit+0x126>
90009b96:	4f43      	ldr	r7, [pc, #268]	; (90009ca4 <HAL_GPIO_DeInit+0x168>)
90009b98:	42b8      	cmp	r0, r7
90009b9a:	d067      	beq.n	90009c6c <HAL_GPIO_DeInit+0x130>
90009b9c:	4f42      	ldr	r7, [pc, #264]	; (90009ca8 <HAL_GPIO_DeInit+0x16c>)
90009b9e:	42b8      	cmp	r0, r7
90009ba0:	d05a      	beq.n	90009c58 <HAL_GPIO_DeInit+0x11c>
90009ba2:	4f42      	ldr	r7, [pc, #264]	; (90009cac <HAL_GPIO_DeInit+0x170>)
90009ba4:	42b8      	cmp	r0, r7
90009ba6:	d06b      	beq.n	90009c80 <HAL_GPIO_DeInit+0x144>
90009ba8:	4f41      	ldr	r7, [pc, #260]	; (90009cb0 <HAL_GPIO_DeInit+0x174>)
90009baa:	42b8      	cmp	r0, r7
90009bac:	d06e      	beq.n	90009c8c <HAL_GPIO_DeInit+0x150>
90009bae:	f8df e114 	ldr.w	lr, [pc, #276]	; 90009cc4 <HAL_GPIO_DeInit+0x188>
90009bb2:	4570      	cmp	r0, lr
90009bb4:	d05f      	beq.n	90009c76 <HAL_GPIO_DeInit+0x13a>
90009bb6:	f8df e110 	ldr.w	lr, [pc, #272]	; 90009cc8 <HAL_GPIO_DeInit+0x18c>
90009bba:	4570      	cmp	r0, lr
90009bbc:	d06b      	beq.n	90009c96 <HAL_GPIO_DeInit+0x15a>
90009bbe:	f04f 0e0a 	mov.w	lr, #10
90009bc2:	fa0e f404 	lsl.w	r4, lr, r4
90009bc6:	e000      	b.n	90009bca <HAL_GPIO_DeInit+0x8e>
90009bc8:	2400      	movs	r4, #0
90009bca:	9f01      	ldr	r7, [sp, #4]
90009bcc:	42a7      	cmp	r7, r4
90009bce:	d119      	bne.n	90009c04 <HAL_GPIO_DeInit+0xc8>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
90009bd0:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
90009bd4:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
90009bd8:	ea27 070c 	bic.w	r7, r7, ip
90009bdc:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
90009be0:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
90009be4:	ea27 070c 	bic.w	r7, r7, ip
90009be8:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
90009bec:	6867      	ldr	r7, [r4, #4]
90009bee:	ea27 070c 	bic.w	r7, r7, ip
90009bf2:	6067      	str	r7, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
90009bf4:	6827      	ldr	r7, [r4, #0]
90009bf6:	ea27 070c 	bic.w	r7, r7, ip
90009bfa:	6027      	str	r7, [r4, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
90009bfc:	68ac      	ldr	r4, [r5, #8]
90009bfe:	ea24 0406 	bic.w	r4, r4, r6
90009c02:	60ac      	str	r4, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
90009c04:	005d      	lsls	r5, r3, #1
90009c06:	2403      	movs	r4, #3

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
90009c08:	f003 0607 	and.w	r6, r3, #7
90009c0c:	270f      	movs	r7, #15
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
90009c0e:	40ac      	lsls	r4, r5
90009c10:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
90009c12:	00b6      	lsls	r6, r6, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
90009c14:	4325      	orrs	r5, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
90009c16:	40b7      	lsls	r7, r6
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
90009c18:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
90009c1a:	08dd      	lsrs	r5, r3, #3
90009c1c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
90009c20:	6a2e      	ldr	r6, [r5, #32]
90009c22:	ea26 0607 	bic.w	r6, r6, r7
90009c26:	622e      	str	r6, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90009c28:	68c5      	ldr	r5, [r0, #12]
90009c2a:	ea25 0504 	bic.w	r5, r5, r4
90009c2e:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
90009c30:	6845      	ldr	r5, [r0, #4]
90009c32:	ea25 0202 	bic.w	r2, r5, r2
90009c36:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90009c38:	6882      	ldr	r2, [r0, #8]
90009c3a:	ea22 0204 	bic.w	r2, r2, r4
90009c3e:	6082      	str	r2, [r0, #8]
    }

    position++;
90009c40:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
90009c42:	fa31 f203 	lsrs.w	r2, r1, r3
90009c46:	d188      	bne.n	90009b5a <HAL_GPIO_DeInit+0x1e>
  }
}
90009c48:	b003      	add	sp, #12
90009c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90009c4e:	f04f 0e02 	mov.w	lr, #2
90009c52:	fa0e f404 	lsl.w	r4, lr, r4
90009c56:	e7b8      	b.n	90009bca <HAL_GPIO_DeInit+0x8e>
90009c58:	f04f 0e05 	mov.w	lr, #5
90009c5c:	fa0e f404 	lsl.w	r4, lr, r4
90009c60:	e7b3      	b.n	90009bca <HAL_GPIO_DeInit+0x8e>
90009c62:	f04f 0e03 	mov.w	lr, #3
90009c66:	fa0e f404 	lsl.w	r4, lr, r4
90009c6a:	e7ae      	b.n	90009bca <HAL_GPIO_DeInit+0x8e>
90009c6c:	f04f 0e04 	mov.w	lr, #4
90009c70:	fa0e f404 	lsl.w	r4, lr, r4
90009c74:	e7a9      	b.n	90009bca <HAL_GPIO_DeInit+0x8e>
90009c76:	f04f 0e08 	mov.w	lr, #8
90009c7a:	fa0e f404 	lsl.w	r4, lr, r4
90009c7e:	e7a4      	b.n	90009bca <HAL_GPIO_DeInit+0x8e>
90009c80:	f04f 0e06 	mov.w	lr, #6
90009c84:	fa0e f404 	lsl.w	r4, lr, r4
90009c88:	e79f      	b.n	90009bca <HAL_GPIO_DeInit+0x8e>
90009c8a:	4770      	bx	lr
90009c8c:	f04f 0e07 	mov.w	lr, #7
90009c90:	fa0e f404 	lsl.w	r4, lr, r4
90009c94:	e799      	b.n	90009bca <HAL_GPIO_DeInit+0x8e>
90009c96:	f04f 0e09 	mov.w	lr, #9
90009c9a:	fa0e f404 	lsl.w	r4, lr, r4
90009c9e:	e794      	b.n	90009bca <HAL_GPIO_DeInit+0x8e>
90009ca0:	58020c00 	.word	0x58020c00
90009ca4:	58021000 	.word	0x58021000
90009ca8:	58021400 	.word	0x58021400
90009cac:	58021800 	.word	0x58021800
90009cb0:	58021c00 	.word	0x58021c00
90009cb4:	58000400 	.word	0x58000400
90009cb8:	58020000 	.word	0x58020000
90009cbc:	58020400 	.word	0x58020400
90009cc0:	58020800 	.word	0x58020800
90009cc4:	58022000 	.word	0x58022000
90009cc8:	58022400 	.word	0x58022400

90009ccc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
90009ccc:	6903      	ldr	r3, [r0, #16]
90009cce:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
90009cd0:	bf14      	ite	ne
90009cd2:	2001      	movne	r0, #1
90009cd4:	2000      	moveq	r0, #0
90009cd6:	4770      	bx	lr

90009cd8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
90009cd8:	b902      	cbnz	r2, 90009cdc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
90009cda:	0409      	lsls	r1, r1, #16
90009cdc:	6181      	str	r1, [r0, #24]
  }
}
90009cde:	4770      	bx	lr

90009ce0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
90009ce0:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
90009ce2:	ea01 0203 	and.w	r2, r1, r3
90009ce6:	ea21 0103 	bic.w	r1, r1, r3
90009cea:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
90009cee:	6181      	str	r1, [r0, #24]
}
90009cf0:	4770      	bx	lr
90009cf2:	bf00      	nop

90009cf4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90009cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90009cf8:	6803      	ldr	r3, [r0, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90009cfa:	f04f 0820 	mov.w	r8, #32
{
90009cfe:	4605      	mov	r5, r0
90009d00:	460e      	mov	r6, r1
90009d02:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90009d04:	6998      	ldr	r0, [r3, #24]
90009d06:	f010 0902 	ands.w	r9, r0, #2
90009d0a:	f040 809e 	bne.w	90009e4a <I2C_WaitOnTXISFlagUntilTimeout+0x156>
  uint32_t itflag   = hi2c->Instance->ISR;
90009d0e:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
90009d10:	f014 0410 	ands.w	r4, r4, #16
90009d14:	d068      	beq.n	90009de8 <I2C_WaitOnTXISFlagUntilTimeout+0xf4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90009d16:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
90009d18:	463c      	mov	r4, r7
  HAL_StatusTypeDef status = HAL_OK;
90009d1a:	46ca      	mov	sl, r9
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90009d1c:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90009d1e:	1c71      	adds	r1, r6, #1
90009d20:	699a      	ldr	r2, [r3, #24]
90009d22:	d163      	bne.n	90009dec <I2C_WaitOnTXISFlagUntilTimeout+0xf8>
90009d24:	0690      	lsls	r0, r2, #26
90009d26:	f100 8093 	bmi.w	90009e50 <I2C_WaitOnTXISFlagUntilTimeout+0x15c>
90009d2a:	f1ba 0f00 	cmp.w	sl, #0
90009d2e:	d104      	bne.n	90009d3a <I2C_WaitOnTXISFlagUntilTimeout+0x46>
90009d30:	699c      	ldr	r4, [r3, #24]
90009d32:	06a1      	lsls	r1, r4, #26
90009d34:	d5fc      	bpl.n	90009d30 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90009d36:	f8c3 801c 	str.w	r8, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
90009d3a:	f049 0404 	orr.w	r4, r9, #4

    status = HAL_ERROR;
90009d3e:	2101      	movs	r1, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
90009d40:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
90009d42:	05d0      	lsls	r0, r2, #23
90009d44:	d530      	bpl.n	90009da8 <I2C_WaitOnTXISFlagUntilTimeout+0xb4>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90009d46:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90009d4a:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
90009d4c:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90009d50:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90009d52:	d504      	bpl.n	90009d5e <I2C_WaitOnTXISFlagUntilTimeout+0x6a>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90009d54:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
90009d58:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90009d5c:	61d9      	str	r1, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90009d5e:	0591      	lsls	r1, r2, #22
90009d60:	d504      	bpl.n	90009d6c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90009d62:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
90009d66:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90009d6a:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90009d6c:	699a      	ldr	r2, [r3, #24]
90009d6e:	0790      	lsls	r0, r2, #30
90009d70:	d501      	bpl.n	90009d76 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
    hi2c->Instance->TXDR = 0x00U;
90009d72:	2200      	movs	r2, #0
90009d74:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90009d76:	699a      	ldr	r2, [r3, #24]
90009d78:	07d1      	lsls	r1, r2, #31
90009d7a:	d403      	bmi.n	90009d84 <I2C_WaitOnTXISFlagUntilTimeout+0x90>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90009d7c:	699a      	ldr	r2, [r3, #24]
90009d7e:	f042 0201 	orr.w	r2, r2, #1
90009d82:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90009d84:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
90009d86:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
90009d88:	4834      	ldr	r0, [pc, #208]	; (90009e5c <I2C_WaitOnTXISFlagUntilTimeout+0x168>)
    hi2c->State = HAL_I2C_STATE_READY;
90009d8a:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
90009d8c:	4002      	ands	r2, r0
      return HAL_ERROR;
90009d8e:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
90009d90:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
90009d92:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90009d94:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
90009d98:	4323      	orrs	r3, r4
90009d9a:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90009d9c:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
90009da0:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
90009da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90009da8:	0550      	lsls	r0, r2, #21
90009daa:	d4d3      	bmi.n	90009d54 <I2C_WaitOnTXISFlagUntilTimeout+0x60>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90009dac:	0592      	lsls	r2, r2, #22
90009dae:	d4d8      	bmi.n	90009d62 <I2C_WaitOnTXISFlagUntilTimeout+0x6e>
  if (status != HAL_OK)
90009db0:	2900      	cmp	r1, #0
90009db2:	d1db      	bne.n	90009d6c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
90009db4:	1c72      	adds	r2, r6, #1
90009db6:	d0a5      	beq.n	90009d04 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90009db8:	f7ff fb04 	bl	900093c4 <HAL_GetTick>
90009dbc:	1bc0      	subs	r0, r0, r7
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
90009dbe:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90009dc0:	42b0      	cmp	r0, r6
90009dc2:	d801      	bhi.n	90009dc8 <I2C_WaitOnTXISFlagUntilTimeout+0xd4>
90009dc4:	2e00      	cmp	r6, #0
90009dc6:	d19d      	bne.n	90009d04 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
90009dc8:	699a      	ldr	r2, [r3, #24]
90009dca:	f012 0202 	ands.w	r2, r2, #2
90009dce:	d199      	bne.n	90009d04 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90009dd0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90009dd2:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
90009dd4:	2001      	movs	r0, #1
90009dd6:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90009dda:	430b      	orrs	r3, r1
90009ddc:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90009dde:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90009de2:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
          return HAL_ERROR;
90009de6:	e7dd      	b.n	90009da4 <I2C_WaitOnTXISFlagUntilTimeout+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
90009de8:	4621      	mov	r1, r4
90009dea:	e7a9      	b.n	90009d40 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90009dec:	0692      	lsls	r2, r2, #26
90009dee:	d42f      	bmi.n	90009e50 <I2C_WaitOnTXISFlagUntilTimeout+0x15c>
90009df0:	f1ba 0f00 	cmp.w	sl, #0
90009df4:	d1a1      	bne.n	90009d3a <I2C_WaitOnTXISFlagUntilTimeout+0x46>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90009df6:	f7ff fae5 	bl	900093c4 <HAL_GetTick>
90009dfa:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90009dfc:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90009dfe:	4286      	cmp	r6, r0
90009e00:	d301      	bcc.n	90009e06 <I2C_WaitOnTXISFlagUntilTimeout+0x112>
90009e02:	2e00      	cmp	r6, #0
90009e04:	d18b      	bne.n	90009d1e <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90009e06:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
90009e08:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90009e0c:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
90009e0e:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90009e10:	0409      	lsls	r1, r1, #16
90009e12:	d50b      	bpl.n	90009e2c <I2C_WaitOnTXISFlagUntilTimeout+0x138>
              (tmp1 != I2C_CR2_STOP) && \
90009e14:	0441      	lsls	r1, r0, #17
90009e16:	d409      	bmi.n	90009e2c <I2C_WaitOnTXISFlagUntilTimeout+0x138>
90009e18:	2a20      	cmp	r2, #32
90009e1a:	d007      	beq.n	90009e2c <I2C_WaitOnTXISFlagUntilTimeout+0x138>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
90009e1c:	685a      	ldr	r2, [r3, #4]
90009e1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
90009e22:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
90009e24:	f7ff face 	bl	900093c4 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90009e28:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
90009e2a:	4604      	mov	r4, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90009e2c:	699a      	ldr	r2, [r3, #24]
90009e2e:	0690      	lsls	r0, r2, #26
90009e30:	f53f af75 	bmi.w	90009d1e <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90009e34:	f7ff fac6 	bl	900093c4 <HAL_GetTick>
90009e38:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90009e3a:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90009e3c:	2819      	cmp	r0, #25
90009e3e:	d9f5      	bls.n	90009e2c <I2C_WaitOnTXISFlagUntilTimeout+0x138>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90009e40:	f04f 0920 	mov.w	r9, #32
              status = HAL_ERROR;
90009e44:	f04f 0a01 	mov.w	sl, #1
90009e48:	e769      	b.n	90009d1e <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  return HAL_OK;
90009e4a:	2000      	movs	r0, #0
}
90009e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (status == HAL_OK)
90009e50:	f1ba 0f00 	cmp.w	sl, #0
90009e54:	f43f af6f 	beq.w	90009d36 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
90009e58:	e76f      	b.n	90009d3a <I2C_WaitOnTXISFlagUntilTimeout+0x46>
90009e5a:	bf00      	nop
90009e5c:	fe00e800 	.word	0xfe00e800

90009e60 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
90009e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90009e64:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90009e66:	6802      	ldr	r2, [r0, #0]
{
90009e68:	460f      	mov	r7, r1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90009e6a:	6991      	ldr	r1, [r2, #24]
90009e6c:	068c      	lsls	r4, r1, #26
90009e6e:	d469      	bmi.n	90009f44 <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
90009e70:	4606      	mov	r6, r0
90009e72:	4613      	mov	r3, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90009e74:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
90009e78:	6994      	ldr	r4, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
90009e7a:	f014 0410 	ands.w	r4, r4, #16
90009e7e:	d064      	beq.n	90009f4a <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
  uint32_t error_code = 0;
90009e80:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90009e82:	4613      	mov	r3, r2
  uint32_t tickstart = Tickstart;
90009e84:	4644      	mov	r4, r8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90009e86:	f8c2 901c 	str.w	r9, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
90009e8a:	46aa      	mov	sl, r5
90009e8c:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90009e8e:	699a      	ldr	r2, [r3, #24]
90009e90:	d15d      	bne.n	90009f4e <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
90009e92:	0690      	lsls	r0, r2, #26
90009e94:	f100 8083 	bmi.w	90009f9e <I2C_WaitOnSTOPFlagUntilTimeout+0x13e>
90009e98:	f1ba 0f00 	cmp.w	sl, #0
90009e9c:	d104      	bne.n	90009ea8 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
90009e9e:	699c      	ldr	r4, [r3, #24]
90009ea0:	06a1      	lsls	r1, r4, #26
90009ea2:	d5fc      	bpl.n	90009e9e <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90009ea4:	2220      	movs	r2, #32
90009ea6:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
90009ea8:	f045 0404 	orr.w	r4, r5, #4
    status = HAL_ERROR;
90009eac:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
90009eae:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
90009eb0:	05d0      	lsls	r0, r2, #23
90009eb2:	d530      	bpl.n	90009f16 <I2C_WaitOnSTOPFlagUntilTimeout+0xb6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90009eb4:	f44f 7180 	mov.w	r1, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90009eb8:	0555      	lsls	r5, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
90009eba:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90009ebe:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90009ec0:	d504      	bpl.n	90009ecc <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90009ec2:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
90009ec6:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90009eca:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90009ecc:	0591      	lsls	r1, r2, #22
90009ece:	d504      	bpl.n	90009eda <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90009ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
90009ed4:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90009ed8:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90009eda:	699a      	ldr	r2, [r3, #24]
90009edc:	0795      	lsls	r5, r2, #30
90009ede:	d501      	bpl.n	90009ee4 <I2C_WaitOnSTOPFlagUntilTimeout+0x84>
    hi2c->Instance->TXDR = 0x00U;
90009ee0:	2200      	movs	r2, #0
90009ee2:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90009ee4:	699a      	ldr	r2, [r3, #24]
90009ee6:	07d0      	lsls	r0, r2, #31
90009ee8:	d403      	bmi.n	90009ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90009eea:	699a      	ldr	r2, [r3, #24]
90009eec:	f042 0201 	orr.w	r2, r2, #1
90009ef0:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
90009ef2:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
90009ef4:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
90009ef6:	4837      	ldr	r0, [pc, #220]	; (90009fd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x174>)
    hi2c->State = HAL_I2C_STATE_READY;
90009ef8:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
90009efa:	4002      	ands	r2, r0
      return HAL_ERROR;
90009efc:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
90009efe:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
90009f00:	6c73      	ldr	r3, [r6, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
90009f02:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
90009f06:	4323      	orrs	r3, r4
90009f08:	6473      	str	r3, [r6, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90009f0a:	f886 5041 	strb.w	r5, [r6, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
90009f0e:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
}
90009f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90009f16:	0550      	lsls	r0, r2, #21
90009f18:	d4d3      	bmi.n	90009ec2 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90009f1a:	0592      	lsls	r2, r2, #22
90009f1c:	d4d8      	bmi.n	90009ed0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  if (status != HAL_OK)
90009f1e:	2900      	cmp	r1, #0
90009f20:	d1db      	bne.n	90009eda <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90009f22:	f7ff fa4f 	bl	900093c4 <HAL_GetTick>
90009f26:	eba0 0008 	sub.w	r0, r0, r8
90009f2a:	42b8      	cmp	r0, r7
90009f2c:	d801      	bhi.n	90009f32 <I2C_WaitOnSTOPFlagUntilTimeout+0xd2>
90009f2e:	2f00      	cmp	r7, #0
90009f30:	d132      	bne.n	90009f98 <I2C_WaitOnSTOPFlagUntilTimeout+0x138>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
90009f32:	6832      	ldr	r2, [r6, #0]
90009f34:	6991      	ldr	r1, [r2, #24]
90009f36:	4613      	mov	r3, r2
90009f38:	f011 0120 	ands.w	r1, r1, #32
90009f3c:	d034      	beq.n	90009fa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90009f3e:	6991      	ldr	r1, [r2, #24]
90009f40:	0689      	lsls	r1, r1, #26
90009f42:	d599      	bpl.n	90009e78 <I2C_WaitOnSTOPFlagUntilTimeout+0x18>
  return HAL_OK;
90009f44:	2000      	movs	r0, #0
}
90009f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
90009f4a:	4621      	mov	r1, r4
90009f4c:	e7af      	b.n	90009eae <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90009f4e:	0692      	lsls	r2, r2, #26
90009f50:	d425      	bmi.n	90009f9e <I2C_WaitOnSTOPFlagUntilTimeout+0x13e>
90009f52:	f1ba 0f00 	cmp.w	sl, #0
90009f56:	d1a7      	bne.n	90009ea8 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90009f58:	f7ff fa34 	bl	900093c4 <HAL_GetTick>
90009f5c:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90009f5e:	6833      	ldr	r3, [r6, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90009f60:	4287      	cmp	r7, r0
90009f62:	d301      	bcc.n	90009f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x108>
90009f64:	2f00      	cmp	r7, #0
90009f66:	d191      	bne.n	90009e8c <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90009f68:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
90009f6a:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90009f6e:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
90009f70:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90009f72:	0409      	lsls	r1, r1, #16
90009f74:	d503      	bpl.n	90009f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
              (tmp1 != I2C_CR2_STOP) && \
90009f76:	0441      	lsls	r1, r0, #17
90009f78:	d401      	bmi.n	90009f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
90009f7a:	2a20      	cmp	r2, #32
90009f7c:	d121      	bne.n	90009fc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x162>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90009f7e:	699a      	ldr	r2, [r3, #24]
90009f80:	0690      	lsls	r0, r2, #26
90009f82:	d483      	bmi.n	90009e8c <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90009f84:	f7ff fa1e 	bl	900093c4 <HAL_GetTick>
90009f88:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90009f8a:	6833      	ldr	r3, [r6, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90009f8c:	2819      	cmp	r0, #25
90009f8e:	d9f6      	bls.n	90009f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90009f90:	2520      	movs	r5, #32
              status = HAL_ERROR;
90009f92:	f04f 0a01 	mov.w	sl, #1
90009f96:	e779      	b.n	90009e8c <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
90009f98:	6833      	ldr	r3, [r6, #0]
90009f9a:	461a      	mov	r2, r3
90009f9c:	e7cf      	b.n	90009f3e <I2C_WaitOnSTOPFlagUntilTimeout+0xde>
    if (status == HAL_OK)
90009f9e:	f1ba 0f00 	cmp.w	sl, #0
90009fa2:	f43f af7f 	beq.w	90009ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
90009fa6:	e77f      	b.n	90009ea8 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90009fa8:	6c73      	ldr	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90009faa:	2220      	movs	r2, #32
          __HAL_UNLOCK(hi2c);
90009fac:	2001      	movs	r0, #1
90009fae:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90009fb2:	4313      	orrs	r3, r2
90009fb4:	6473      	str	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90009fb6:	f886 2041 	strb.w	r2, [r6, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90009fba:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
}
90009fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
90009fc2:	685a      	ldr	r2, [r3, #4]
90009fc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
90009fc8:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
90009fca:	f7ff f9fb 	bl	900093c4 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90009fce:	6833      	ldr	r3, [r6, #0]
            tickstart = HAL_GetTick();
90009fd0:	4604      	mov	r4, r0
90009fd2:	e7d4      	b.n	90009f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
90009fd4:	fe00e800 	.word	0xfe00e800

90009fd8 <HAL_I2C_MspInit>:
}
90009fd8:	4770      	bx	lr
90009fda:	bf00      	nop

90009fdc <HAL_I2C_Init>:
  if (hi2c == NULL)
90009fdc:	2800      	cmp	r0, #0
90009fde:	d04e      	beq.n	9000a07e <HAL_I2C_Init+0xa2>
{
90009fe0:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
90009fe2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
90009fe6:	4604      	mov	r4, r0
90009fe8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90009fec:	2b00      	cmp	r3, #0
90009fee:	d041      	beq.n	9000a074 <HAL_I2C_Init+0x98>
  __HAL_I2C_DISABLE(hi2c);
90009ff0:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
90009ff2:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90009ff4:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
90009ff6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
90009ffa:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90009ffc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
9000a000:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
9000a002:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
9000a006:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
9000a008:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
9000a00a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
9000a00c:	689a      	ldr	r2, [r3, #8]
9000a00e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
9000a012:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
9000a014:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
9000a016:	d029      	beq.n	9000a06c <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
9000a018:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
9000a01c:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
9000a01e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
9000a020:	d102      	bne.n	9000a028 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
9000a022:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000a026:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
9000a028:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
9000a02a:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
9000a02e:	4915      	ldr	r1, [pc, #84]	; (9000a084 <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
9000a030:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
9000a032:	4301      	orrs	r1, r0
9000a034:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
9000a036:	68d9      	ldr	r1, [r3, #12]
9000a038:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
9000a03c:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
9000a03e:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
9000a042:	4302      	orrs	r2, r0
9000a044:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
9000a048:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
9000a04c:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a04e:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
9000a050:	4301      	orrs	r1, r0
  return HAL_OK;
9000a052:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
9000a054:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
9000a056:	6819      	ldr	r1, [r3, #0]
9000a058:	f041 0101 	orr.w	r1, r1, #1
9000a05c:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a05e:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
9000a060:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
9000a064:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
9000a066:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
9000a06a:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
9000a06c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
9000a070:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
9000a072:	e7d9      	b.n	9000a028 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
9000a074:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
9000a078:	f7ff ffae 	bl	90009fd8 <HAL_I2C_MspInit>
9000a07c:	e7b8      	b.n	90009ff0 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
9000a07e:	2001      	movs	r0, #1
}
9000a080:	4770      	bx	lr
9000a082:	bf00      	nop
9000a084:	02008000 	.word	0x02008000

9000a088 <HAL_I2C_MspDeInit>:
9000a088:	4770      	bx	lr
9000a08a:	bf00      	nop

9000a08c <HAL_I2C_DeInit>:
  if (hi2c == NULL)
9000a08c:	b1b0      	cbz	r0, 9000a0bc <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
9000a08e:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
9000a090:	2324      	movs	r3, #36	; 0x24
{
9000a092:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
9000a094:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
9000a098:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
9000a09a:	6813      	ldr	r3, [r2, #0]
9000a09c:	f023 0301 	bic.w	r3, r3, #1
9000a0a0:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
9000a0a2:	f7ff fff1 	bl	9000a088 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a0a6:	2300      	movs	r3, #0
9000a0a8:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
9000a0aa:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
9000a0ac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
9000a0b0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
9000a0b4:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
9000a0b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
9000a0ba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
9000a0bc:	2001      	movs	r0, #1
}
9000a0be:	4770      	bx	lr

9000a0c0 <HAL_I2C_Mem_Write>:
{
9000a0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000a0c4:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
9000a0c6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
9000a0ca:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
9000a0ce:	2b20      	cmp	r3, #32
{
9000a0d0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
9000a0d2:	d132      	bne.n	9000a13a <HAL_I2C_Mem_Write+0x7a>
    if ((pData == NULL) || (Size == 0U))
9000a0d4:	9b08      	ldr	r3, [sp, #32]
9000a0d6:	4604      	mov	r4, r0
9000a0d8:	b34b      	cbz	r3, 9000a12e <HAL_I2C_Mem_Write+0x6e>
9000a0da:	f1ba 0f00 	cmp.w	sl, #0
9000a0de:	d026      	beq.n	9000a12e <HAL_I2C_Mem_Write+0x6e>
    __HAL_LOCK(hi2c);
9000a0e0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
9000a0e4:	2b01      	cmp	r3, #1
9000a0e6:	d028      	beq.n	9000a13a <HAL_I2C_Mem_Write+0x7a>
9000a0e8:	2301      	movs	r3, #1
9000a0ea:	460e      	mov	r6, r1
9000a0ec:	4691      	mov	r9, r2
9000a0ee:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
9000a0f2:	f7ff f967 	bl	900093c4 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a0f6:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
9000a0f8:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a0fa:	699a      	ldr	r2, [r3, #24]
9000a0fc:	0411      	lsls	r1, r2, #16
9000a0fe:	d51f      	bpl.n	9000a140 <HAL_I2C_Mem_Write+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a100:	f7ff f960 	bl	900093c4 <HAL_GetTick>
9000a104:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a106:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a108:	2819      	cmp	r0, #25
9000a10a:	d9f6      	bls.n	9000a0fa <HAL_I2C_Mem_Write+0x3a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a10c:	699a      	ldr	r2, [r3, #24]
9000a10e:	0412      	lsls	r2, r2, #16
9000a110:	d5f3      	bpl.n	9000a0fa <HAL_I2C_Mem_Write+0x3a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a112:	6c63      	ldr	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a114:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a116:	2200      	movs	r2, #0
      return HAL_ERROR;
9000a118:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a11a:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
9000a11c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a120:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a122:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a126:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
9000a12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
9000a12e:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
9000a132:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
9000a134:	6463      	str	r3, [r4, #68]	; 0x44
}
9000a136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
9000a13a:	2002      	movs	r0, #2
}
9000a13c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->pBuffPtr  = pData;
9000a140:	9a08      	ldr	r2, [sp, #32]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
9000a142:	2121      	movs	r1, #33	; 0x21
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
9000a144:	f3c6 0609 	ubfx	r6, r6, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a148:	4620      	mov	r0, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
9000a14a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000a14e:	2140      	movs	r1, #64	; 0x40
    hi2c->pBuffPtr  = pData;
9000a150:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a152:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000a154:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    hi2c->XferISR   = NULL;
9000a158:	6362      	str	r2, [r4, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a15a:	6462      	str	r2, [r4, #68]	; 0x44
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
9000a15c:	496d      	ldr	r1, [pc, #436]	; (9000a314 <HAL_I2C_Mem_Write+0x254>)
    hi2c->XferCount = Size;
9000a15e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
9000a162:	685a      	ldr	r2, [r3, #4]
9000a164:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000a166:	fa5f f188 	uxtb.w	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
9000a16a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
9000a16e:	496a      	ldr	r1, [pc, #424]	; (9000a318 <HAL_I2C_Mem_Write+0x258>)
9000a170:	4332      	orrs	r2, r6
9000a172:	4311      	orrs	r1, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a174:	462a      	mov	r2, r5
  MODIFY_REG(hi2c->Instance->CR2, \
9000a176:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a178:	4639      	mov	r1, r7
9000a17a:	f7ff fdbb 	bl	90009cf4 <I2C_WaitOnTXISFlagUntilTimeout>
9000a17e:	2800      	cmp	r0, #0
9000a180:	d175      	bne.n	9000a26e <HAL_I2C_Mem_Write+0x1ae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
9000a182:	f1b8 0f01 	cmp.w	r8, #1
9000a186:	d00a      	beq.n	9000a19e <HAL_I2C_Mem_Write+0xde>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000a188:	ea4f 2219 	mov.w	r2, r9, lsr #8
9000a18c:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a18e:	4639      	mov	r1, r7
9000a190:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000a192:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a194:	462a      	mov	r2, r5
9000a196:	f7ff fdad 	bl	90009cf4 <I2C_WaitOnTXISFlagUntilTimeout>
9000a19a:	2800      	cmp	r0, #0
9000a19c:	d167      	bne.n	9000a26e <HAL_I2C_Mem_Write+0x1ae>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
9000a19e:	fa5f f389 	uxtb.w	r3, r9
9000a1a2:	6822      	ldr	r2, [r4, #0]
9000a1a4:	6293      	str	r3, [r2, #40]	; 0x28
9000a1a6:	1c78      	adds	r0, r7, #1
9000a1a8:	d14a      	bne.n	9000a240 <HAL_I2C_Mem_Write+0x180>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a1aa:	6993      	ldr	r3, [r2, #24]
9000a1ac:	0619      	lsls	r1, r3, #24
9000a1ae:	d5fc      	bpl.n	9000a1aa <HAL_I2C_Mem_Write+0xea>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000a1b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000a1b2:	b29b      	uxth	r3, r3
9000a1b4:	2bff      	cmp	r3, #255	; 0xff
9000a1b6:	f240 808a 	bls.w	9000a2ce <HAL_I2C_Mem_Write+0x20e>
  MODIFY_REG(hi2c->Instance->CR2, \
9000a1ba:	6853      	ldr	r3, [r2, #4]
9000a1bc:	4957      	ldr	r1, [pc, #348]	; (9000a31c <HAL_I2C_Mem_Write+0x25c>)
9000a1be:	400b      	ands	r3, r1
9000a1c0:	4957      	ldr	r1, [pc, #348]	; (9000a320 <HAL_I2C_Mem_Write+0x260>)
9000a1c2:	4333      	orrs	r3, r6
9000a1c4:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
9000a1c6:	23ff      	movs	r3, #255	; 0xff
9000a1c8:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000a1ca:	6051      	str	r1, [r2, #4]
9000a1cc:	f8df 814c 	ldr.w	r8, [pc, #332]	; 9000a31c <HAL_I2C_Mem_Write+0x25c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000a1d0:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
9000a1d4:	f8df 9148 	ldr.w	r9, [pc, #328]	; 9000a320 <HAL_I2C_Mem_Write+0x260>
9000a1d8:	e004      	b.n	9000a1e4 <HAL_I2C_Mem_Write+0x124>
    } while (hi2c->XferCount > 0U);
9000a1da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000a1dc:	b29b      	uxth	r3, r3
9000a1de:	2b00      	cmp	r3, #0
9000a1e0:	f000 8083 	beq.w	9000a2ea <HAL_I2C_Mem_Write+0x22a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
9000a1e4:	462a      	mov	r2, r5
9000a1e6:	4639      	mov	r1, r7
9000a1e8:	4620      	mov	r0, r4
9000a1ea:	f7ff fd83 	bl	90009cf4 <I2C_WaitOnTXISFlagUntilTimeout>
9000a1ee:	2800      	cmp	r0, #0
9000a1f0:	d16b      	bne.n	9000a2ca <HAL_I2C_Mem_Write+0x20a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
9000a1f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a1f4:	6821      	ldr	r1, [r4, #0]
9000a1f6:	f812 0b01 	ldrb.w	r0, [r2], #1
      hi2c->XferSize--;
9000a1fa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
9000a1fc:	6288      	str	r0, [r1, #40]	; 0x28
      hi2c->pBuffPtr++;
9000a1fe:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
9000a200:	3b01      	subs	r3, #1
      hi2c->XferCount--;
9000a202:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
9000a204:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
9000a206:	3a01      	subs	r2, #1
      hi2c->XferSize--;
9000a208:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
9000a20a:	b292      	uxth	r2, r2
9000a20c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000a20e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
9000a210:	b292      	uxth	r2, r2
9000a212:	2a00      	cmp	r2, #0
9000a214:	d0e1      	beq.n	9000a1da <HAL_I2C_Mem_Write+0x11a>
9000a216:	2b00      	cmp	r3, #0
9000a218:	d1df      	bne.n	9000a1da <HAL_I2C_Mem_Write+0x11a>
9000a21a:	1c78      	adds	r0, r7, #1
9000a21c:	d12c      	bne.n	9000a278 <HAL_I2C_Mem_Write+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a21e:	698b      	ldr	r3, [r1, #24]
9000a220:	061a      	lsls	r2, r3, #24
9000a222:	d5fc      	bpl.n	9000a21e <HAL_I2C_Mem_Write+0x15e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000a224:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000a226:	b29b      	uxth	r3, r3
9000a228:	2bff      	cmp	r3, #255	; 0xff
9000a22a:	d940      	bls.n	9000a2ae <HAL_I2C_Mem_Write+0x1ee>
  MODIFY_REG(hi2c->Instance->CR2, \
9000a22c:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000a22e:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000a232:	ea03 0308 	and.w	r3, r3, r8
9000a236:	4333      	orrs	r3, r6
9000a238:	ea43 0309 	orr.w	r3, r3, r9
9000a23c:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
9000a23e:	e7cc      	b.n	9000a1da <HAL_I2C_Mem_Write+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a240:	6993      	ldr	r3, [r2, #24]
9000a242:	061b      	lsls	r3, r3, #24
9000a244:	d4b4      	bmi.n	9000a1b0 <HAL_I2C_Mem_Write+0xf0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a246:	f7ff f8bd 	bl	900093c4 <HAL_GetTick>
9000a24a:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a24c:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a24e:	4287      	cmp	r7, r0
9000a250:	d301      	bcc.n	9000a256 <HAL_I2C_Mem_Write+0x196>
9000a252:	2f00      	cmp	r7, #0
9000a254:	d1a7      	bne.n	9000a1a6 <HAL_I2C_Mem_Write+0xe6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a256:	6993      	ldr	r3, [r2, #24]
9000a258:	f013 0380 	ands.w	r3, r3, #128	; 0x80
9000a25c:	d1a3      	bne.n	9000a1a6 <HAL_I2C_Mem_Write+0xe6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a25e:	6c62      	ldr	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a260:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a262:	430a      	orrs	r2, r1
9000a264:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a266:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a26a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
9000a26e:	2300      	movs	r3, #0
      return HAL_ERROR;
9000a270:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
9000a272:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
9000a276:	e75e      	b.n	9000a136 <HAL_I2C_Mem_Write+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a278:	698b      	ldr	r3, [r1, #24]
9000a27a:	061b      	lsls	r3, r3, #24
9000a27c:	d4d2      	bmi.n	9000a224 <HAL_I2C_Mem_Write+0x164>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a27e:	f7ff f8a1 	bl	900093c4 <HAL_GetTick>
9000a282:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a284:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a286:	4287      	cmp	r7, r0
9000a288:	d301      	bcc.n	9000a28e <HAL_I2C_Mem_Write+0x1ce>
9000a28a:	2f00      	cmp	r7, #0
9000a28c:	d1c5      	bne.n	9000a21a <HAL_I2C_Mem_Write+0x15a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a28e:	698b      	ldr	r3, [r1, #24]
9000a290:	f013 0380 	ands.w	r3, r3, #128	; 0x80
9000a294:	d1c1      	bne.n	9000a21a <HAL_I2C_Mem_Write+0x15a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a296:	6c62      	ldr	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a298:	2120      	movs	r1, #32
          return HAL_ERROR;
9000a29a:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
9000a29c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a2a0:	430a      	orrs	r2, r1
9000a2a2:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a2a4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a2a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          return HAL_ERROR;
9000a2ac:	e743      	b.n	9000a136 <HAL_I2C_Mem_Write+0x76>
          hi2c->XferSize = hi2c->XferCount;
9000a2ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000a2b0:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000a2b2:	b2da      	uxtb	r2, r3
          hi2c->XferSize = hi2c->XferCount;
9000a2b4:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000a2b6:	684b      	ldr	r3, [r1, #4]
9000a2b8:	ea03 0308 	and.w	r3, r3, r8
9000a2bc:	4333      	orrs	r3, r6
9000a2be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
9000a2c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
9000a2c6:	604b      	str	r3, [r1, #4]
}
9000a2c8:	e787      	b.n	9000a1da <HAL_I2C_Mem_Write+0x11a>
        return HAL_ERROR;
9000a2ca:	2001      	movs	r0, #1
9000a2cc:	e733      	b.n	9000a136 <HAL_I2C_Mem_Write+0x76>
      hi2c->XferSize = hi2c->XferCount;
9000a2ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
9000a2d0:	4812      	ldr	r0, [pc, #72]	; (9000a31c <HAL_I2C_Mem_Write+0x25c>)
      hi2c->XferSize = hi2c->XferCount;
9000a2d2:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000a2d4:	b2d9      	uxtb	r1, r3
      hi2c->XferSize = hi2c->XferCount;
9000a2d6:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000a2d8:	6853      	ldr	r3, [r2, #4]
9000a2da:	4003      	ands	r3, r0
9000a2dc:	4333      	orrs	r3, r6
9000a2de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000a2e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
9000a2e6:	6053      	str	r3, [r2, #4]
}
9000a2e8:	e770      	b.n	9000a1cc <HAL_I2C_Mem_Write+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
9000a2ea:	462a      	mov	r2, r5
9000a2ec:	4639      	mov	r1, r7
9000a2ee:	4620      	mov	r0, r4
9000a2f0:	f7ff fdb6 	bl	90009e60 <I2C_WaitOnSTOPFlagUntilTimeout>
9000a2f4:	2800      	cmp	r0, #0
9000a2f6:	d1e8      	bne.n	9000a2ca <HAL_I2C_Mem_Write+0x20a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000a2f8:	6823      	ldr	r3, [r4, #0]
9000a2fa:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
9000a2fc:	4d09      	ldr	r5, [pc, #36]	; (9000a324 <HAL_I2C_Mem_Write+0x264>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000a2fe:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
9000a300:	685a      	ldr	r2, [r3, #4]
9000a302:	402a      	ands	r2, r5
9000a304:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
9000a306:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
9000a30a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
9000a30e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
9000a312:	e710      	b.n	9000a136 <HAL_I2C_Mem_Write+0x76>
9000a314:	fc009800 	.word	0xfc009800
9000a318:	01002000 	.word	0x01002000
9000a31c:	fc009c00 	.word	0xfc009c00
9000a320:	01ff0000 	.word	0x01ff0000
9000a324:	fe00e800 	.word	0xfe00e800

9000a328 <HAL_I2C_Mem_Read>:
{
9000a328:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000a32c:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
9000a32e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
9000a332:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
9000a336:	2b20      	cmp	r3, #32
{
9000a338:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
9000a33a:	d137      	bne.n	9000a3ac <HAL_I2C_Mem_Read+0x84>
    if ((pData == NULL) || (Size == 0U))
9000a33c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9000a33e:	4683      	mov	fp, r0
9000a340:	b36b      	cbz	r3, 9000a39e <HAL_I2C_Mem_Read+0x76>
9000a342:	f1b9 0f00 	cmp.w	r9, #0
9000a346:	d02a      	beq.n	9000a39e <HAL_I2C_Mem_Read+0x76>
    __HAL_LOCK(hi2c);
9000a348:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
9000a34c:	2b01      	cmp	r3, #1
9000a34e:	d02d      	beq.n	9000a3ac <HAL_I2C_Mem_Read+0x84>
9000a350:	2301      	movs	r3, #1
9000a352:	460f      	mov	r7, r1
9000a354:	4690      	mov	r8, r2
9000a356:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
9000a35a:	f7ff f833 	bl	900093c4 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a35e:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
9000a362:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a364:	699a      	ldr	r2, [r3, #24]
9000a366:	0410      	lsls	r0, r2, #16
9000a368:	d523      	bpl.n	9000a3b2 <HAL_I2C_Mem_Read+0x8a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a36a:	f7ff f82b 	bl	900093c4 <HAL_GetTick>
9000a36e:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a370:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a374:	2819      	cmp	r0, #25
9000a376:	d9f5      	bls.n	9000a364 <HAL_I2C_Mem_Read+0x3c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a378:	699a      	ldr	r2, [r3, #24]
9000a37a:	0411      	lsls	r1, r2, #16
9000a37c:	d5f2      	bpl.n	9000a364 <HAL_I2C_Mem_Read+0x3c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a37e:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a382:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a384:	2200      	movs	r2, #0
      return HAL_ERROR;
9000a386:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a388:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
9000a38a:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a38e:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a392:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a396:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
9000a39a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
9000a39e:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
9000a3a2:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
9000a3a4:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
}
9000a3a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
9000a3ac:	2002      	movs	r0, #2
}
9000a3ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->pBuffPtr  = pData;
9000a3b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
9000a3b4:	2122      	movs	r1, #34	; 0x22
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
9000a3b6:	f3c7 0709 	ubfx	r7, r7, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a3ba:	4658      	mov	r0, fp
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
9000a3bc:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000a3c0:	2140      	movs	r1, #64	; 0x40
    hi2c->pBuffPtr  = pData;
9000a3c2:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a3c6:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000a3c8:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->XferISR   = NULL;
9000a3cc:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a3d0:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
  MODIFY_REG(hi2c->Instance->CR2, \
9000a3d4:	4983      	ldr	r1, [pc, #524]	; (9000a5e4 <HAL_I2C_Mem_Read+0x2bc>)
    hi2c->XferCount = Size;
9000a3d6:	f8ab 902a 	strh.w	r9, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
9000a3da:	685a      	ldr	r2, [r3, #4]
9000a3dc:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000a3de:	b2e1      	uxtb	r1, r4
  MODIFY_REG(hi2c->Instance->CR2, \
9000a3e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a3e4:	4629      	mov	r1, r5
  MODIFY_REG(hi2c->Instance->CR2, \
9000a3e6:	433a      	orrs	r2, r7
9000a3e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
9000a3ec:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a3ee:	4632      	mov	r2, r6
9000a3f0:	f7ff fc80 	bl	90009cf4 <I2C_WaitOnTXISFlagUntilTimeout>
9000a3f4:	2800      	cmp	r0, #0
9000a3f6:	f040 8091 	bne.w	9000a51c <HAL_I2C_Mem_Read+0x1f4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
9000a3fa:	2c01      	cmp	r4, #1
9000a3fc:	d00c      	beq.n	9000a418 <HAL_I2C_Mem_Read+0xf0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000a3fe:	ea4f 2218 	mov.w	r2, r8, lsr #8
9000a402:	f8db 3000 	ldr.w	r3, [fp]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a406:	4629      	mov	r1, r5
9000a408:	4658      	mov	r0, fp
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000a40a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a40c:	4632      	mov	r2, r6
9000a40e:	f7ff fc71 	bl	90009cf4 <I2C_WaitOnTXISFlagUntilTimeout>
9000a412:	2800      	cmp	r0, #0
9000a414:	f040 8082 	bne.w	9000a51c <HAL_I2C_Mem_Read+0x1f4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
9000a418:	fa5f f388 	uxtb.w	r3, r8
9000a41c:	f8db 4000 	ldr.w	r4, [fp]
9000a420:	62a3      	str	r3, [r4, #40]	; 0x28
9000a422:	1c6a      	adds	r2, r5, #1
9000a424:	d160      	bne.n	9000a4e8 <HAL_I2C_Mem_Read+0x1c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a426:	69a3      	ldr	r3, [r4, #24]
9000a428:	065b      	lsls	r3, r3, #25
9000a42a:	d5fc      	bpl.n	9000a426 <HAL_I2C_Mem_Read+0xfe>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000a42c:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
9000a430:	b29b      	uxth	r3, r3
9000a432:	2bff      	cmp	r3, #255	; 0xff
9000a434:	f240 80ae 	bls.w	9000a594 <HAL_I2C_Mem_Read+0x26c>
  MODIFY_REG(hi2c->Instance->CR2, \
9000a438:	6863      	ldr	r3, [r4, #4]
9000a43a:	4a6a      	ldr	r2, [pc, #424]	; (9000a5e4 <HAL_I2C_Mem_Read+0x2bc>)
9000a43c:	4013      	ands	r3, r2
9000a43e:	4a6a      	ldr	r2, [pc, #424]	; (9000a5e8 <HAL_I2C_Mem_Read+0x2c0>)
9000a440:	433b      	orrs	r3, r7
9000a442:	431a      	orrs	r2, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
9000a444:	23ff      	movs	r3, #255	; 0xff
9000a446:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000a44a:	6062      	str	r2, [r4, #4]
9000a44c:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 9000a5f4 <HAL_I2C_Mem_Read+0x2cc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000a450:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
9000a454:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 9000a5f8 <HAL_I2C_Mem_Read+0x2d0>
9000a458:	1c69      	adds	r1, r5, #1
9000a45a:	d127      	bne.n	9000a4ac <HAL_I2C_Mem_Read+0x184>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a45c:	69a3      	ldr	r3, [r4, #24]
9000a45e:	075a      	lsls	r2, r3, #29
9000a460:	d5fc      	bpl.n	9000a45c <HAL_I2C_Mem_Read+0x134>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
9000a462:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a464:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
9000a468:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
9000a46a:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
9000a46e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
      hi2c->XferCount--;
9000a472:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
9000a474:	3301      	adds	r3, #1
      hi2c->XferCount--;
9000a476:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
9000a478:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
      hi2c->XferSize--;
9000a47c:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
9000a480:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
9000a484:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000a486:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
9000a48a:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000a48c:	b292      	uxth	r2, r2
      hi2c->XferSize--;
9000a48e:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000a492:	b10a      	cbz	r2, 9000a498 <HAL_I2C_Mem_Read+0x170>
9000a494:	2b00      	cmp	r3, #0
9000a496:	d046      	beq.n	9000a526 <HAL_I2C_Mem_Read+0x1fe>
    } while (hi2c->XferCount > 0U);
9000a498:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
9000a49c:	b29b      	uxth	r3, r3
9000a49e:	2b00      	cmp	r3, #0
9000a4a0:	f000 8088 	beq.w	9000a5b4 <HAL_I2C_Mem_Read+0x28c>
9000a4a4:	1c69      	adds	r1, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a4a6:	f8db 4000 	ldr.w	r4, [fp]
9000a4aa:	d0d7      	beq.n	9000a45c <HAL_I2C_Mem_Read+0x134>
9000a4ac:	69a3      	ldr	r3, [r4, #24]
9000a4ae:	075b      	lsls	r3, r3, #29
9000a4b0:	d4d7      	bmi.n	9000a462 <HAL_I2C_Mem_Read+0x13a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a4b2:	f7fe ff87 	bl	900093c4 <HAL_GetTick>
9000a4b6:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a4b8:	f8db 4000 	ldr.w	r4, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a4bc:	4285      	cmp	r5, r0
9000a4be:	d301      	bcc.n	9000a4c4 <HAL_I2C_Mem_Read+0x19c>
9000a4c0:	2d00      	cmp	r5, #0
9000a4c2:	d1c9      	bne.n	9000a458 <HAL_I2C_Mem_Read+0x130>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a4c4:	69a3      	ldr	r3, [r4, #24]
9000a4c6:	f013 0304 	ands.w	r3, r3, #4
9000a4ca:	d1c5      	bne.n	9000a458 <HAL_I2C_Mem_Read+0x130>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a4cc:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a4d0:	2120      	movs	r1, #32
          return HAL_ERROR;
9000a4d2:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
9000a4d4:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a4d8:	430a      	orrs	r2, r1
9000a4da:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a4de:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a4e2:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
9000a4e6:	e75f      	b.n	9000a3a8 <HAL_I2C_Mem_Read+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a4e8:	69a3      	ldr	r3, [r4, #24]
9000a4ea:	0658      	lsls	r0, r3, #25
9000a4ec:	d49e      	bmi.n	9000a42c <HAL_I2C_Mem_Read+0x104>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a4ee:	f7fe ff69 	bl	900093c4 <HAL_GetTick>
9000a4f2:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a4f4:	f8db 4000 	ldr.w	r4, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a4f8:	4285      	cmp	r5, r0
9000a4fa:	d301      	bcc.n	9000a500 <HAL_I2C_Mem_Read+0x1d8>
9000a4fc:	2d00      	cmp	r5, #0
9000a4fe:	d190      	bne.n	9000a422 <HAL_I2C_Mem_Read+0xfa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a500:	69a3      	ldr	r3, [r4, #24]
9000a502:	f013 0340 	ands.w	r3, r3, #64	; 0x40
9000a506:	d18c      	bne.n	9000a422 <HAL_I2C_Mem_Read+0xfa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a508:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a50c:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a50e:	430a      	orrs	r2, r1
9000a510:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a514:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a518:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
9000a51c:	2300      	movs	r3, #0
      return HAL_ERROR;
9000a51e:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
9000a520:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
      return HAL_ERROR;
9000a524:	e740      	b.n	9000a3a8 <HAL_I2C_Mem_Read+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a526:	f8db 2000 	ldr.w	r2, [fp]
9000a52a:	1c68      	adds	r0, r5, #1
9000a52c:	d111      	bne.n	9000a552 <HAL_I2C_Mem_Read+0x22a>
9000a52e:	6993      	ldr	r3, [r2, #24]
9000a530:	0619      	lsls	r1, r3, #24
9000a532:	d5fc      	bpl.n	9000a52e <HAL_I2C_Mem_Read+0x206>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000a534:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
9000a538:	b29b      	uxth	r3, r3
9000a53a:	2bff      	cmp	r3, #255	; 0xff
9000a53c:	d91a      	bls.n	9000a574 <HAL_I2C_Mem_Read+0x24c>
  MODIFY_REG(hi2c->Instance->CR2, \
9000a53e:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000a540:	f8ab a028 	strh.w	sl, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000a544:	ea03 0308 	and.w	r3, r3, r8
9000a548:	433b      	orrs	r3, r7
9000a54a:	ea43 0309 	orr.w	r3, r3, r9
9000a54e:	6053      	str	r3, [r2, #4]
}
9000a550:	e7a2      	b.n	9000a498 <HAL_I2C_Mem_Read+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a552:	6993      	ldr	r3, [r2, #24]
9000a554:	061b      	lsls	r3, r3, #24
9000a556:	d4ed      	bmi.n	9000a534 <HAL_I2C_Mem_Read+0x20c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a558:	f7fe ff34 	bl	900093c4 <HAL_GetTick>
9000a55c:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a55e:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a562:	4285      	cmp	r5, r0
9000a564:	d301      	bcc.n	9000a56a <HAL_I2C_Mem_Read+0x242>
9000a566:	2d00      	cmp	r5, #0
9000a568:	d1df      	bne.n	9000a52a <HAL_I2C_Mem_Read+0x202>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a56a:	6993      	ldr	r3, [r2, #24]
9000a56c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
9000a570:	d1db      	bne.n	9000a52a <HAL_I2C_Mem_Read+0x202>
9000a572:	e7ab      	b.n	9000a4cc <HAL_I2C_Mem_Read+0x1a4>
          hi2c->XferSize = hi2c->XferCount;
9000a574:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
9000a578:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000a57a:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
9000a57c:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000a580:	6853      	ldr	r3, [r2, #4]
9000a582:	ea03 0308 	and.w	r3, r3, r8
9000a586:	433b      	orrs	r3, r7
9000a588:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000a58c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
9000a590:	6053      	str	r3, [r2, #4]
}
9000a592:	e781      	b.n	9000a498 <HAL_I2C_Mem_Read+0x170>
      hi2c->XferSize = hi2c->XferCount;
9000a594:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
9000a598:	4912      	ldr	r1, [pc, #72]	; (9000a5e4 <HAL_I2C_Mem_Read+0x2bc>)
      hi2c->XferSize = hi2c->XferCount;
9000a59a:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000a59c:	b2da      	uxtb	r2, r3
      hi2c->XferSize = hi2c->XferCount;
9000a59e:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000a5a2:	6863      	ldr	r3, [r4, #4]
9000a5a4:	400b      	ands	r3, r1
9000a5a6:	433b      	orrs	r3, r7
9000a5a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
9000a5ac:	4a0f      	ldr	r2, [pc, #60]	; (9000a5ec <HAL_I2C_Mem_Read+0x2c4>)
9000a5ae:	431a      	orrs	r2, r3
9000a5b0:	6062      	str	r2, [r4, #4]
}
9000a5b2:	e74b      	b.n	9000a44c <HAL_I2C_Mem_Read+0x124>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
9000a5b4:	4632      	mov	r2, r6
9000a5b6:	4629      	mov	r1, r5
9000a5b8:	4658      	mov	r0, fp
9000a5ba:	f7ff fc51 	bl	90009e60 <I2C_WaitOnSTOPFlagUntilTimeout>
9000a5be:	b970      	cbnz	r0, 9000a5de <HAL_I2C_Mem_Read+0x2b6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000a5c0:	f8db 3000 	ldr.w	r3, [fp]
9000a5c4:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
9000a5c6:	4c0a      	ldr	r4, [pc, #40]	; (9000a5f0 <HAL_I2C_Mem_Read+0x2c8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000a5c8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
9000a5ca:	685a      	ldr	r2, [r3, #4]
9000a5cc:	4022      	ands	r2, r4
9000a5ce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
9000a5d0:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
9000a5d4:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
9000a5d8:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
9000a5dc:	e6e4      	b.n	9000a3a8 <HAL_I2C_Mem_Read+0x80>
      return HAL_ERROR;
9000a5de:	2001      	movs	r0, #1
9000a5e0:	e6e2      	b.n	9000a3a8 <HAL_I2C_Mem_Read+0x80>
9000a5e2:	bf00      	nop
9000a5e4:	fc009800 	.word	0xfc009800
9000a5e8:	01ff2400 	.word	0x01ff2400
9000a5ec:	02002400 	.word	0x02002400
9000a5f0:	fe00e800 	.word	0xfe00e800
9000a5f4:	fc009c00 	.word	0xfc009c00
9000a5f8:	01ff0000 	.word	0x01ff0000

9000a5fc <HAL_I2C_GetState>:
  return hi2c->State;
9000a5fc:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
9000a600:	4770      	bx	lr
9000a602:	bf00      	nop

9000a604 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
9000a604:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
9000a606:	4770      	bx	lr

9000a608 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
9000a608:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
9000a60c:	2a20      	cmp	r2, #32
9000a60e:	d123      	bne.n	9000a658 <HAL_I2CEx_ConfigAnalogFilter+0x50>
9000a610:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
9000a614:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
9000a618:	4603      	mov	r3, r0
9000a61a:	2a01      	cmp	r2, #1
9000a61c:	d01c      	beq.n	9000a658 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
9000a61e:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
9000a620:	2024      	movs	r0, #36	; 0x24
{
9000a622:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
9000a624:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000a628:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
9000a62c:	6810      	ldr	r0, [r2, #0]
9000a62e:	f020 0001 	bic.w	r0, r0, #1
9000a632:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
9000a634:	6810      	ldr	r0, [r2, #0]
9000a636:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
9000a63a:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
9000a63c:	6810      	ldr	r0, [r2, #0]
9000a63e:	4301      	orrs	r1, r0

    return HAL_OK;
9000a640:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
9000a642:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
9000a644:	6811      	ldr	r1, [r2, #0]
9000a646:	f041 0101 	orr.w	r1, r1, #1
9000a64a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
9000a64c:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
9000a650:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
9000a654:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
9000a658:	2002      	movs	r0, #2
}
9000a65a:	4770      	bx	lr

9000a65c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
9000a65c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
9000a660:	2a20      	cmp	r2, #32
9000a662:	d122      	bne.n	9000a6aa <HAL_I2CEx_ConfigDigitalFilter+0x4e>
9000a664:	4603      	mov	r3, r0
{
9000a666:	b500      	push	{lr}
9000a668:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
9000a66c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
9000a670:	2a01      	cmp	r2, #1
9000a672:	d01c      	beq.n	9000a6ae <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
9000a674:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
9000a676:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000a678:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
9000a67c:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
9000a680:	6810      	ldr	r0, [r2, #0]
9000a682:	f020 0001 	bic.w	r0, r0, #1
9000a686:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
9000a688:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
9000a68a:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
9000a68e:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
9000a692:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
9000a694:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
9000a696:	6811      	ldr	r1, [r2, #0]
9000a698:	f041 0101 	orr.w	r1, r1, #1
9000a69c:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
9000a69e:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
9000a6a2:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
9000a6a6:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
9000a6aa:	2002      	movs	r0, #2
}
9000a6ac:	4770      	bx	lr
    return HAL_BUSY;
9000a6ae:	2002      	movs	r0, #2
}
9000a6b0:	f85d fb04 	ldr.w	pc, [sp], #4

9000a6b4 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
9000a6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000a6b8:	460d      	mov	r5, r1
9000a6ba:	4614      	mov	r4, r2
9000a6bc:	469a      	mov	sl, r3

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
9000a6be:	7806      	ldrb	r6, [r0, #0]
    if ((p + i) > 256UL)
9000a6c0:	4681      	mov	r9, r0
    i = (uint32_t)Bits[l];
9000a6c2:	2701      	movs	r7, #1
  p = 0;
9000a6c4:	f04f 0800 	mov.w	r8, #0
9000a6c8:	e006      	b.n	9000a6d8 <JPEG_Bits_To_SizeCodes+0x24>
    i = (uint32_t)Bits[l];
9000a6ca:	f819 6f01 	ldrb.w	r6, [r9, #1]!
    if ((p + i) > 256UL)
9000a6ce:	eb06 0308 	add.w	r3, r6, r8
9000a6d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000a6d6:	d837      	bhi.n	9000a748 <JPEG_Bits_To_SizeCodes+0x94>
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
9000a6d8:	eb05 0008 	add.w	r0, r5, r8
9000a6dc:	4632      	mov	r2, r6
9000a6de:	4639      	mov	r1, r7
    while (i != 0UL)
9000a6e0:	b116      	cbz	r6, 9000a6e8 <JPEG_Bits_To_SizeCodes+0x34>
      p++;
9000a6e2:	44b0      	add	r8, r6
      Huffsize[p] = (uint8_t) l + 1U;
9000a6e4:	f01c ffaa 	bl	9002763c <memset>
  for (l = 0; l < 16UL; l++)
9000a6e8:	2f10      	cmp	r7, #16
    if ((p + i) > 256UL)
9000a6ea:	f107 0701 	add.w	r7, r7, #1
  for (l = 0; l < 16UL; l++)
9000a6ee:	d1ec      	bne.n	9000a6ca <JPEG_Bits_To_SizeCodes+0x16>
      i--;
    }
  }
  Huffsize[p] = 0;
9000a6f0:	2300      	movs	r3, #0
9000a6f2:	f805 3008 	strb.w	r3, [r5, r8]
  *LastK = p;
9000a6f6:	f8ca 8000 	str.w	r8, [sl]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
  si = Huffsize[0];
9000a6fa:	7828      	ldrb	r0, [r5, #0]
9000a6fc:	4601      	mov	r1, r0
  p = 0;
  while (Huffsize[p] != 0U)
9000a6fe:	b300      	cbz	r0, 9000a742 <JPEG_Bits_To_SizeCodes+0x8e>
9000a700:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
9000a704:	2701      	movs	r7, #1
  p = 0;
9000a706:	461a      	mov	r2, r3
    while (((uint32_t) Huffsize[p]) == si)
9000a708:	4288      	cmp	r0, r1
9000a70a:	d10f      	bne.n	9000a72c <JPEG_Bits_To_SizeCodes+0x78>
9000a70c:	eb02 0008 	add.w	r0, r2, r8
9000a710:	1c56      	adds	r6, r2, #1
9000a712:	eb05 0c02 	add.w	ip, r5, r2
9000a716:	eb04 0080 	add.w	r0, r4, r0, lsl #2
9000a71a:	1af6      	subs	r6, r6, r3
      Huffcode[p] = code;
9000a71c:	f840 3f04 	str.w	r3, [r0, #4]!
      p++;
9000a720:	18f2      	adds	r2, r6, r3
    while (((uint32_t) Huffsize[p]) == si)
9000a722:	f81c ef01 	ldrb.w	lr, [ip, #1]!
      code++;
9000a726:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
9000a728:	458e      	cmp	lr, r1
9000a72a:	d0f7      	beq.n	9000a71c <JPEG_Bits_To_SizeCodes+0x68>
    if(si > 31UL)
9000a72c:	291f      	cmp	r1, #31
9000a72e:	d80b      	bhi.n	9000a748 <JPEG_Bits_To_SizeCodes+0x94>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
9000a730:	fa07 f001 	lsl.w	r0, r7, r1
9000a734:	4298      	cmp	r0, r3
9000a736:	d907      	bls.n	9000a748 <JPEG_Bits_To_SizeCodes+0x94>
  while (Huffsize[p] != 0U)
9000a738:	5ca8      	ldrb	r0, [r5, r2]
    {
      return HAL_ERROR;
    }
    code <<= 1;
9000a73a:	005b      	lsls	r3, r3, #1
    si++;
9000a73c:	3101      	adds	r1, #1
  while (Huffsize[p] != 0U)
9000a73e:	2800      	cmp	r0, #0
9000a740:	d1e2      	bne.n	9000a708 <JPEG_Bits_To_SizeCodes+0x54>
  }
  /* Return function status */
  return HAL_OK;
9000a742:	2000      	movs	r0, #0
}
9000a744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_ERROR;
9000a748:	2001      	movs	r0, #1
}
9000a74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000a74e:	bf00      	nop

9000a750 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
9000a750:	b5f0      	push	{r4, r5, r6, r7, lr}
9000a752:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
9000a756:	460d      	mov	r5, r1
9000a758:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
9000a75a:	ab01      	add	r3, sp, #4
9000a75c:	aa43      	add	r2, sp, #268	; 0x10c
9000a75e:	a902      	add	r1, sp, #8
9000a760:	f7ff ffa8 	bl	9000a6b4 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
9000a764:	b9d0      	cbnz	r0, 9000a79c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
9000a766:	9f01      	ldr	r7, [sp, #4]
9000a768:	b1c7      	cbz	r7, 9000a79c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
9000a76a:	370f      	adds	r7, #15
9000a76c:	f50d 7e86 	add.w	lr, sp, #268	; 0x10c
9000a770:	a902      	add	r1, sp, #8
9000a772:	f104 0c0f 	add.w	ip, r4, #15
9000a776:	4427      	add	r7, r4
9000a778:	e009      	b.n	9000a78e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x3e>
      return HAL_ERROR; /* Huffman Table overflow error*/
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000a77a:	f811 2b01 	ldrb.w	r2, [r1], #1
  while (k < lastK)
9000a77e:	45bc      	cmp	ip, r7
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000a780:	f85e 6b04 	ldr.w	r6, [lr], #4
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000a784:	f102 32ff 	add.w	r2, r2, #4294967295
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000a788:	60e6      	str	r6, [r4, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000a78a:	54ea      	strb	r2, [r5, r3]
  while (k < lastK)
9000a78c:	d006      	beq.n	9000a79c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    l = DC_BitsValsTable->HuffVal[k];
9000a78e:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
9000a792:	2b0b      	cmp	r3, #11
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000a794:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
9000a798:	d9ef      	bls.n	9000a77a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2a>
      return HAL_ERROR; /* Huffman Table overflow error*/
9000a79a:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
9000a79c:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
9000a7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000a7a2:	bf00      	nop

9000a7a4 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
9000a7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
9000a7a8:	6804      	ldr	r4, [r0, #0]
{
9000a7aa:	b093      	sub	sp, #76	; 0x4c
9000a7ac:	4608      	mov	r0, r1
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
9000a7ae:	f504 63f8 	add.w	r3, r4, #1984	; 0x7c0
9000a7b2:	429a      	cmp	r2, r3
9000a7b4:	f000 809d 	beq.w	9000a8f2 <JPEG_Set_HuffDC_Mem+0x14e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
9000a7b8:	f504 63fc 	add.w	r3, r4, #2016	; 0x7e0
9000a7bc:	429a      	cmp	r2, r3
9000a7be:	d003      	beq.n	9000a7c8 <JPEG_Set_HuffDC_Mem+0x24>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
9000a7c0:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
9000a7c2:	b013      	add	sp, #76	; 0x4c
9000a7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
9000a7c8:	f504 64ff 	add.w	r4, r4, #2040	; 0x7f8
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
9000a7cc:	a903      	add	r1, sp, #12
9000a7ce:	f7ff ffbf 	bl	9000a750 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
9000a7d2:	2800      	cmp	r0, #0
9000a7d4:	d1f5      	bne.n	9000a7c2 <JPEG_Set_HuffDC_Mem+0x1e>
    *addressDef = 0x0FFF0FFF;
9000a7d6:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a7da:	f89d a017 	ldrb.w	sl, [sp, #23]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a7de:	f89d e016 	ldrb.w	lr, [sp, #22]
    *addressDef = 0x0FFF0FFF;
9000a7e2:	6023      	str	r3, [r4, #0]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a7e4:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    *addressDef = 0x0FFF0FFF;
9000a7e8:	6063      	str	r3, [r4, #4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a7ea:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
9000a7ee:	f89d 300e 	ldrb.w	r3, [sp, #14]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a7f2:	f40a 6a70 	and.w	sl, sl, #3840	; 0xf00
9000a7f6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a7fa:	f40e 6e70 	and.w	lr, lr, #3840	; 0xf00
9000a7fe:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a800:	f89d 9015 	ldrb.w	r9, [sp, #21]
9000a804:	ea4a 0a02 	orr.w	sl, sl, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a808:	f89d c014 	ldrb.w	ip, [sp, #20]
9000a80c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a810:	ea4f 2909 	mov.w	r9, r9, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a814:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a818:	f89d 8013 	ldrb.w	r8, [sp, #19]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a81c:	9301      	str	r3, [sp, #4]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a81e:	f409 6970 	and.w	r9, r9, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a822:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
9000a826:	f40c 6c70 	and.w	ip, ip, #3840	; 0xf00
9000a82a:	f89d 1012 	ldrb.w	r1, [sp, #18]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a82e:	ea4f 2808 	mov.w	r8, r8, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a832:	ea4e 0e03 	orr.w	lr, lr, r3
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a836:	f89d 7011 	ldrb.w	r7, [sp, #17]
9000a83a:	f408 6870 	and.w	r8, r8, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a83e:	0209      	lsls	r1, r1, #8
      *address = lsb | (msb << 16);
9000a840:	ea4e 4e0a 	orr.w	lr, lr, sl, lsl #16
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a844:	f89d 2010 	ldrb.w	r2, [sp, #16]
9000a848:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a84c:	023f      	lsls	r7, r7, #8
      *address = lsb | (msb << 16);
9000a84e:	f844 ec04 	str.w	lr, [r4, #-4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a852:	0212      	lsls	r2, r2, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a854:	f89d e03c 	ldrb.w	lr, [sp, #60]	; 0x3c
9000a858:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a85c:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a860:	f89d 600f 	ldrb.w	r6, [sp, #15]
9000a864:	ea49 090e 	orr.w	r9, r9, lr
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a868:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a86c:	0236      	lsls	r6, r6, #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a86e:	9b01      	ldr	r3, [sp, #4]
9000a870:	ea4c 0c0e 	orr.w	ip, ip, lr
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a874:	f89d 500d 	ldrb.w	r5, [sp, #13]
9000a878:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a87c:	f89d b00c 	ldrb.w	fp, [sp, #12]
      *address = lsb | (msb << 16);
9000a880:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a884:	022d      	lsls	r5, r5, #8
      *address = lsb | (msb << 16);
9000a886:	f844 cc08 	str.w	ip, [r4, #-8]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a88a:	ea4f 2b0b 	mov.w	fp, fp, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a88e:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
9000a892:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a896:	f40b 6b70 	and.w	fp, fp, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a89a:	ea48 080c 	orr.w	r8, r8, ip
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a89e:	f89d c030 	ldrb.w	ip, [sp, #48]	; 0x30
9000a8a2:	ea41 010c 	orr.w	r1, r1, ip
      *address = lsb | (msb << 16);
9000a8a6:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
9000a8aa:	f844 1c0c 	str.w	r1, [r4, #-12]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a8ae:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
9000a8b2:	430f      	orrs	r7, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a8b4:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
9000a8b8:	430a      	orrs	r2, r1
      *address = lsb | (msb << 16);
9000a8ba:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
9000a8be:	f844 2c10 	str.w	r2, [r4, #-16]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a8c2:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
9000a8c6:	4316      	orrs	r6, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a8c8:	f89d 2020 	ldrb.w	r2, [sp, #32]
9000a8cc:	4313      	orrs	r3, r2
      *address = lsb | (msb << 16);
9000a8ce:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
9000a8d2:	f844 3c14 	str.w	r3, [r4, #-20]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a8d6:	f89d 301c 	ldrb.w	r3, [sp, #28]
9000a8da:	431d      	orrs	r5, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000a8dc:	f89d 3018 	ldrb.w	r3, [sp, #24]
9000a8e0:	ea4b 0303 	orr.w	r3, fp, r3
      *address = lsb | (msb << 16);
9000a8e4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
9000a8e8:	f844 3c18 	str.w	r3, [r4, #-24]
}
9000a8ec:	b013      	add	sp, #76	; 0x4c
9000a8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
9000a8f2:	f504 64fb 	add.w	r4, r4, #2008	; 0x7d8
9000a8f6:	e769      	b.n	9000a7cc <JPEG_Set_HuffDC_Mem+0x28>

9000a8f8 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
9000a8f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
9000a8fc:	6804      	ldr	r4, [r0, #0]
{
9000a8fe:	f6ad 0d3c 	subw	sp, sp, #2108	; 0x83c
9000a902:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
9000a904:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
9000a908:	429a      	cmp	r2, r3
9000a90a:	d042      	beq.n	9000a992 <JPEG_Set_HuffAC_Mem+0x9a>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
9000a90c:	f504 63cc 	add.w	r3, r4, #1632	; 0x660
9000a910:	429a      	cmp	r2, r3
9000a912:	d004      	beq.n	9000a91e <JPEG_Set_HuffAC_Mem+0x26>
      return HAL_ERROR; /* Huffman Table overflow error*/
9000a914:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
9000a916:	f60d 0d3c 	addw	sp, sp, #2108	; 0x83c
9000a91a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
9000a91e:	f204 74a4 	addw	r4, r4, #1956	; 0x7a4
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
9000a922:	4628      	mov	r0, r5
9000a924:	466b      	mov	r3, sp
9000a926:	f20d 4234 	addw	r2, sp, #1076	; 0x434
9000a92a:	a901      	add	r1, sp, #4
9000a92c:	f7ff fec2 	bl	9000a6b4 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
9000a930:	2800      	cmp	r0, #0
9000a932:	d1f0      	bne.n	9000a916 <JPEG_Set_HuffAC_Mem+0x1e>
  while (k < lastK)
9000a934:	9b00      	ldr	r3, [sp, #0]
9000a936:	b37b      	cbz	r3, 9000a998 <JPEG_Set_HuffAC_Mem+0xa0>
9000a938:	330f      	adds	r3, #15
9000a93a:	f20d 4734 	addw	r7, sp, #1076	; 0x434
9000a93e:	f10d 0c04 	add.w	ip, sp, #4
9000a942:	f105 020f 	add.w	r2, r5, #15
9000a946:	eb05 0e03 	add.w	lr, r5, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000a94a:	ae42      	add	r6, sp, #264	; 0x108
9000a94c:	e011      	b.n	9000a972 <JPEG_Set_HuffAC_Mem+0x7a>
      l = (msb * 10UL) + lsb - 1UL;
9000a94e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
9000a952:	2ba1      	cmp	r3, #161	; 0xa1
9000a954:	d8de      	bhi.n	9000a914 <JPEG_Set_HuffAC_Mem+0x1c>
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000a956:	f81c 5b01 	ldrb.w	r5, [ip], #1
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000a95a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
9000a95e:	f857 9b04 	ldr.w	r9, [r7], #4
  while (k < lastK)
9000a962:	4596      	cmp	lr, r2
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000a964:	f105 35ff 	add.w	r5, r5, #4294967295
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000a968:	4631      	mov	r1, r6
9000a96a:	f8c8 90a4 	str.w	r9, [r8, #164]	; 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000a96e:	54f5      	strb	r5, [r6, r3]
  while (k < lastK)
9000a970:	d013      	beq.n	9000a99a <JPEG_Set_HuffAC_Mem+0xa2>
    l = AC_BitsValsTable->HuffVal[k];
9000a972:	f812 1f01 	ldrb.w	r1, [r2, #1]!
      l = 160; /*l = 0x00 EOB code*/
9000a976:	23a0      	movs	r3, #160	; 0xa0
    if (l == 0UL)
9000a978:	2900      	cmp	r1, #0
9000a97a:	d0ec      	beq.n	9000a956 <JPEG_Set_HuffAC_Mem+0x5e>
      msb = (l & 0xF0UL) >> 4;
9000a97c:	090d      	lsrs	r5, r1, #4
      lsb = (l & 0x0FUL);
9000a97e:	f001 030f 	and.w	r3, r1, #15
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
9000a982:	29f0      	cmp	r1, #240	; 0xf0
      l = (msb * 10UL) + lsb - 1UL;
9000a984:	eb05 0585 	add.w	r5, r5, r5, lsl #2
9000a988:	f103 33ff 	add.w	r3, r3, #4294967295
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
9000a98c:	d1df      	bne.n	9000a94e <JPEG_Set_HuffAC_Mem+0x56>
      l = 161;
9000a98e:	23a1      	movs	r3, #161	; 0xa1
9000a990:	e7e1      	b.n	9000a956 <JPEG_Set_HuffAC_Mem+0x5e>
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
9000a992:	f204 6444 	addw	r4, r4, #1604	; 0x644
9000a996:	e7c4      	b.n	9000a922 <JPEG_Set_HuffAC_Mem+0x2a>
9000a998:	a942      	add	r1, sp, #264	; 0x108
      *addressDef = 0x0FFF0FFF;
9000a99a:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
    *addressDef = 0x0FD10FD0;
9000a99e:	4a1a      	ldr	r2, [pc, #104]	; (9000aa08 <JPEG_Set_HuffAC_Mem+0x110>)
9000a9a0:	eba1 0c81 	sub.w	ip, r1, r1, lsl #2
9000a9a4:	f10d 0566 	add.w	r5, sp, #102	; 0x66
      *addressDef = 0x0FFF0FFF;
9000a9a8:	6023      	str	r3, [r4, #0]
9000a9aa:	6063      	str	r3, [r4, #4]
9000a9ac:	f50c 7e4a 	add.w	lr, ip, #808	; 0x328
9000a9b0:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD30FD2;
9000a9b2:	f103 33d3 	add.w	r3, r3, #3553874899	; 0xd3d3d3d3
    *addressDef = 0x0FD10FD0;
9000a9b6:	60e2      	str	r2, [r4, #12]
    *addressDef = 0x0FD30FD2;
9000a9b8:	f50c 7c49 	add.w	ip, ip, #804	; 0x324
9000a9bc:	f103 232c 	add.w	r3, r3, #738208768	; 0x2c002c00
9000a9c0:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
9000a9c2:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
9000a9c6:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
9000a9c8:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
9000a9cc:	61a3      	str	r3, [r4, #24]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000a9ce:	f891 20a1 	ldrb.w	r2, [r1, #161]	; 0xa1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000a9d2:	f891 30a0 	ldrb.w	r3, [r1, #160]	; 0xa0
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000a9d6:	0212      	lsls	r2, r2, #8
9000a9d8:	f81e 7021 	ldrb.w	r7, [lr, r1, lsl #2]
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000a9dc:	021b      	lsls	r3, r3, #8
9000a9de:	f81c 6021 	ldrb.w	r6, [ip, r1, lsl #2]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000a9e2:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    while (i > 1UL)
9000a9e6:	3902      	subs	r1, #2
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000a9e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000a9ec:	433a      	orrs	r2, r7
    while (i > 1UL)
9000a9ee:	428d      	cmp	r5, r1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000a9f0:	ea43 0306 	orr.w	r3, r3, r6
      *address = lsb | (msb << 16);
9000a9f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
9000a9f8:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
9000a9fc:	d1e7      	bne.n	9000a9ce <JPEG_Set_HuffAC_Mem+0xd6>
}
9000a9fe:	f60d 0d3c 	addw	sp, sp, #2108	; 0x83c
9000aa02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9000aa06:	bf00      	nop
9000aa08:	0fd10fd0 	.word	0x0fd10fd0

9000aa0c <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
9000aa0c:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000aa0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
9000aa12:	6543      	str	r3, [r0, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000aa14:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000aa16:	f003 0303 	and.w	r3, r3, #3
9000aa1a:	2b02      	cmp	r3, #2
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
9000aa1c:	6803      	ldr	r3, [r0, #0]
9000aa1e:	685a      	ldr	r2, [r3, #4]
9000aa20:	bf0c      	ite	eq
9000aa22:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
9000aa26:	f022 0208 	bicne.w	r2, r2, #8
9000aa2a:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000aa2c:	681a      	ldr	r2, [r3, #0]
9000aa2e:	f022 0201 	bic.w	r2, r2, #1
9000aa32:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000aa34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000aa36:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000aa3a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
9000aa3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000aa3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
9000aa42:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
9000aa44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000aa46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
9000aa4a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000aa4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000aa4e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000aa52:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
9000aa54:	681a      	ldr	r2, [r3, #0]
9000aa56:	f042 0201 	orr.w	r2, r2, #1
9000aa5a:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000aa5c:	6d42      	ldr	r2, [r0, #84]	; 0x54
9000aa5e:	f002 020c 	and.w	r2, r2, #12
9000aa62:	2a08      	cmp	r2, #8
9000aa64:	d00a      	beq.n	9000aa7c <JPEG_Init_Process+0x70>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000aa66:	6d42      	ldr	r2, [r0, #84]	; 0x54
9000aa68:	f002 020c 	and.w	r2, r2, #12
9000aa6c:	2a0c      	cmp	r2, #12
9000aa6e:	d000      	beq.n	9000aa72 <JPEG_Init_Process+0x66>
  }
  else
  {
    /* Nothing to do */
  }
}
9000aa70:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
9000aa72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000aa74:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000aa78:	631a      	str	r2, [r3, #48]	; 0x30
}
9000aa7a:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
9000aa7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000aa7e:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
9000aa82:	631a      	str	r2, [r3, #48]	; 0x30
9000aa84:	4770      	bx	lr
9000aa86:	bf00      	nop

9000aa88 <JPEG_DMA_StartProcess>:
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000aa88:	6b01      	ldr	r1, [r0, #48]	; 0x30
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
9000aa8a:	6a82      	ldr	r2, [r0, #40]	; 0x28
{
9000aa8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000aa8e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
{
9000aa90:	b083      	sub	sp, #12
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
9000aa92:	42aa      	cmp	r2, r5
9000aa94:	d32d      	bcc.n	9000aaf2 <JPEG_DMA_StartProcess+0x6a>
9000aa96:	4604      	mov	r4, r0
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
9000aa98:	6b40      	ldr	r0, [r0, #52]	; 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
9000aa9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
9000aa9c:	6a86      	ldr	r6, [r0, #40]	; 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
9000aa9e:	42b3      	cmp	r3, r6
9000aaa0:	d327      	bcc.n	9000aaf2 <JPEG_DMA_StartProcess+0x6a>
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
9000aaa2:	4f1b      	ldr	r7, [pc, #108]	; (9000ab10 <JPEG_DMA_StartProcess+0x88>)
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
9000aaa4:	f8df c074 	ldr.w	ip, [pc, #116]	; 9000ab1c <JPEG_DMA_StartProcess+0x94>
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
9000aaa8:	654f      	str	r7, [r1, #84]	; 0x54
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
9000aaaa:	f8c1 c044 	str.w	ip, [r1, #68]	; 0x44

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
9000aaae:	4919      	ldr	r1, [pc, #100]	; (9000ab14 <JPEG_DMA_StartProcess+0x8c>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
9000aab0:	6547      	str	r7, [r0, #84]	; 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
9000aab2:	6441      	str	r1, [r0, #68]	; 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
9000aab4:	4918      	ldr	r1, [pc, #96]	; (9000ab18 <JPEG_DMA_StartProcess+0x90>)
9000aab6:	6581      	str	r1, [r0, #88]	; 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
9000aab8:	b1a5      	cbz	r5, 9000aae4 <JPEG_DMA_StartProcess+0x5c>
9000aaba:	b19e      	cbz	r6, 9000aae4 <JPEG_DMA_StartProcess+0x5c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000aabc:	fbb2 f1f5 	udiv	r1, r2, r5
9000aac0:	fb05 2111 	mls	r1, r5, r1, r2
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000aac4:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000aac6:	1a52      	subs	r2, r2, r1
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000aac8:	6821      	ldr	r1, [r4, #0]
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000aaca:	62a2      	str	r2, [r4, #40]	; 0x28
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000aacc:	3144      	adds	r1, #68	; 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
9000aace:	fbb3 f2f6 	udiv	r2, r3, r6
9000aad2:	fb06 3212 	mls	r2, r6, r2, r3
9000aad6:	1a9b      	subs	r3, r3, r2
9000aad8:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000aada:	9500      	str	r5, [sp, #0]
9000aadc:	69e2      	ldr	r2, [r4, #28]
9000aade:	f001 fbb5 	bl	9000c24c <HAL_MDMA_Start_IT>
9000aae2:	b148      	cbz	r0, 9000aaf8 <JPEG_DMA_StartProcess+0x70>
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000aae4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    return HAL_ERROR;
9000aae6:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000aae8:	f043 0304 	orr.w	r3, r3, #4
9000aaec:	6523      	str	r3, [r4, #80]	; 0x50
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
9000aaee:	b003      	add	sp, #12
9000aaf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000aaf2:	2001      	movs	r0, #1
}
9000aaf4:	b003      	add	sp, #12
9000aaf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
9000aaf8:	6822      	ldr	r2, [r4, #0]
9000aafa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000aafc:	69a1      	ldr	r1, [r4, #24]
9000aafe:	3240      	adds	r2, #64	; 0x40
9000ab00:	9500      	str	r5, [sp, #0]
9000ab02:	6b20      	ldr	r0, [r4, #48]	; 0x30
9000ab04:	f001 fba2 	bl	9000c24c <HAL_MDMA_Start_IT>
9000ab08:	2800      	cmp	r0, #0
9000ab0a:	d0f3      	beq.n	9000aaf4 <JPEG_DMA_StartProcess+0x6c>
9000ab0c:	e7ea      	b.n	9000aae4 <JPEG_DMA_StartProcess+0x5c>
9000ab0e:	bf00      	nop
9000ab10:	9000b041 	.word	0x9000b041
9000ab14:	9000b2b9 	.word	0x9000b2b9
9000ab18:	9000b339 	.word	0x9000b339
9000ab1c:	9000b06d 	.word	0x9000b06d

9000ab20 <HAL_JPEG_GetInfo.part.0>:
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
9000ab20:	6803      	ldr	r3, [r0, #0]
9000ab22:	685a      	ldr	r2, [r3, #4]
9000ab24:	f002 0203 	and.w	r2, r2, #3
9000ab28:	2a02      	cmp	r2, #2
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
9000ab2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000ab2e:	4689      	mov	r9, r1
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
9000ab30:	f000 8094 	beq.w	9000ac5c <HAL_JPEG_GetInfo.part.0+0x13c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
9000ab34:	685c      	ldr	r4, [r3, #4]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000ab36:	685a      	ldr	r2, [r3, #4]
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
9000ab38:	f014 0403 	ands.w	r4, r4, #3
9000ab3c:	d172      	bne.n	9000ac24 <HAL_JPEG_GetInfo.part.0+0x104>
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000ab3e:	0c12      	lsrs	r2, r2, #16
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
9000ab40:	600c      	str	r4, [r1, #0]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000ab42:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000ab44:	68da      	ldr	r2, [r3, #12]
9000ab46:	0c12      	lsrs	r2, r2, #16
9000ab48:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
9000ab4a:	4a5f      	ldr	r2, [pc, #380]	; (9000acc8 <HAL_JPEG_GetInfo.part.0+0x1a8>)
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
9000ab4c:	f103 0c50 	add.w	ip, r3, #80	; 0x50
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
9000ab50:	f8c9 4004 	str.w	r4, [r9, #4]
  uint32_t quality = 0;
9000ab54:	2600      	movs	r6, #0
9000ab56:	f102 0540 	add.w	r5, r2, #64	; 0x40
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000ab5a:	f04f 0e64 	mov.w	lr, #100	; 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
9000ab5e:	f241 3488 	movw	r4, #5000	; 0x1388
9000ab62:	e033      	b.n	9000abcc <HAL_JPEG_GetInfo.part.0+0xac>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000ab64:	f892 8001 	ldrb.w	r8, [r2, #1]
9000ab68:	fb0e f707 	mul.w	r7, lr, r7
9000ab6c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
9000ab6e:	f811 8008 	ldrb.w	r8, [r1, r8]
9000ab72:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
9000ab76:	2f64      	cmp	r7, #100	; 0x64
9000ab78:	d961      	bls.n	9000ac3e <HAL_JPEG_GetInfo.part.0+0x11e>
          quality += 5000UL / scale;
9000ab7a:	fbb4 f7f7 	udiv	r7, r4, r7
9000ab7e:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000ab80:	f3c3 4707 	ubfx	r7, r3, #16, #8
      if (quantVal == 1UL)
9000ab84:	2f01      	cmp	r7, #1
9000ab86:	d03d      	beq.n	9000ac04 <HAL_JPEG_GetInfo.part.0+0xe4>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000ab88:	f892 8002 	ldrb.w	r8, [r2, #2]
9000ab8c:	fb0e f707 	mul.w	r7, lr, r7
9000ab90:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
9000ab92:	f811 8008 	ldrb.w	r8, [r1, r8]
9000ab96:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
9000ab9a:	2f64      	cmp	r7, #100	; 0x64
9000ab9c:	d94a      	bls.n	9000ac34 <HAL_JPEG_GetInfo.part.0+0x114>
          quality += 5000UL / scale;
9000ab9e:	fbb4 f7f7 	udiv	r7, r4, r7
9000aba2:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000aba4:	0e1b      	lsrs	r3, r3, #24
      if (quantVal == 1UL)
9000aba6:	2b01      	cmp	r3, #1
9000aba8:	d030      	beq.n	9000ac0c <HAL_JPEG_GetInfo.part.0+0xec>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000abaa:	78d7      	ldrb	r7, [r2, #3]
9000abac:	fb0e f303 	mul.w	r3, lr, r3
9000abb0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
9000abb2:	5dcf      	ldrb	r7, [r1, r7]
9000abb4:	fbb3 f3f7 	udiv	r3, r3, r7
        if (scale <= 100UL)
9000abb8:	2b64      	cmp	r3, #100	; 0x64
9000abba:	d94a      	bls.n	9000ac52 <HAL_JPEG_GetInfo.part.0+0x132>
          quality += 5000UL / scale;
9000abbc:	fbb4 f3f3 	udiv	r3, r4, r3
9000abc0:	441e      	add	r6, r3
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
9000abc2:	3204      	adds	r2, #4
        }
      }
    }

    i += 4UL;
    tableAddress ++;
9000abc4:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
9000abc8:	4295      	cmp	r5, r2
9000abca:	d025      	beq.n	9000ac18 <HAL_JPEG_GetInfo.part.0+0xf8>
    quantRow = *tableAddress;
9000abcc:	f8dc 3000 	ldr.w	r3, [ip]
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000abd0:	b2df      	uxtb	r7, r3
      if (quantVal == 1UL)
9000abd2:	2f01      	cmp	r7, #1
9000abd4:	d02c      	beq.n	9000ac30 <HAL_JPEG_GetInfo.part.0+0x110>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000abd6:	f892 8000 	ldrb.w	r8, [r2]
9000abda:	fb0e f707 	mul.w	r7, lr, r7
9000abde:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
9000abe0:	f811 8008 	ldrb.w	r8, [r1, r8]
9000abe4:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
9000abe8:	2f64      	cmp	r7, #100	; 0x64
9000abea:	d92d      	bls.n	9000ac48 <HAL_JPEG_GetInfo.part.0+0x128>
          quality += 5000UL / scale;
9000abec:	fbb4 f7f7 	udiv	r7, r4, r7
9000abf0:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000abf2:	f3c3 2707 	ubfx	r7, r3, #8, #8
      if (quantVal == 1UL)
9000abf6:	2f01      	cmp	r7, #1
9000abf8:	d1b4      	bne.n	9000ab64 <HAL_JPEG_GetInfo.part.0+0x44>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000abfa:	f3c3 4707 	ubfx	r7, r3, #16, #8
        quality += 100UL;
9000abfe:	3664      	adds	r6, #100	; 0x64
      if (quantVal == 1UL)
9000ac00:	2f01      	cmp	r7, #1
9000ac02:	d1c1      	bne.n	9000ab88 <HAL_JPEG_GetInfo.part.0+0x68>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000ac04:	0e1b      	lsrs	r3, r3, #24
        quality += 100UL;
9000ac06:	3664      	adds	r6, #100	; 0x64
      if (quantVal == 1UL)
9000ac08:	2b01      	cmp	r3, #1
9000ac0a:	d1ce      	bne.n	9000abaa <HAL_JPEG_GetInfo.part.0+0x8a>
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
9000ac0c:	3204      	adds	r2, #4
        quality += 100UL;
9000ac0e:	3664      	adds	r6, #100	; 0x64
    tableAddress ++;
9000ac10:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
9000ac14:	4295      	cmp	r5, r2
9000ac16:	d1d9      	bne.n	9000abcc <HAL_JPEG_GetInfo.part.0+0xac>
  }

  return (quality / 64UL);
9000ac18:	09b6      	lsrs	r6, r6, #6
  return HAL_OK;
9000ac1a:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
9000ac1c:	f8c9 6010 	str.w	r6, [r9, #16]
}
9000ac20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
9000ac24:	f002 0203 	and.w	r2, r2, #3
9000ac28:	2a03      	cmp	r2, #3
9000ac2a:	d14a      	bne.n	9000acc2 <HAL_JPEG_GetInfo.part.0+0x1a2>
9000ac2c:	2430      	movs	r4, #48	; 0x30
9000ac2e:	e016      	b.n	9000ac5e <HAL_JPEG_GetInfo.part.0+0x13e>
        quality += 100UL;
9000ac30:	3664      	adds	r6, #100	; 0x64
9000ac32:	e7de      	b.n	9000abf2 <HAL_JPEG_GetInfo.part.0+0xd2>
          quality += (200UL - scale) / 2UL;
9000ac34:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
9000ac38:	eb06 0657 	add.w	r6, r6, r7, lsr #1
9000ac3c:	e7b2      	b.n	9000aba4 <HAL_JPEG_GetInfo.part.0+0x84>
9000ac3e:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
9000ac42:	eb06 0657 	add.w	r6, r6, r7, lsr #1
9000ac46:	e79b      	b.n	9000ab80 <HAL_JPEG_GetInfo.part.0+0x60>
9000ac48:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
9000ac4c:	eb06 0657 	add.w	r6, r6, r7, lsr #1
9000ac50:	e7cf      	b.n	9000abf2 <HAL_JPEG_GetInfo.part.0+0xd2>
9000ac52:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
9000ac56:	eb06 0653 	add.w	r6, r6, r3, lsr #1
9000ac5a:	e7b2      	b.n	9000abc2 <HAL_JPEG_GetInfo.part.0+0xa2>
9000ac5c:	2410      	movs	r4, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000ac5e:	685a      	ldr	r2, [r3, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
9000ac60:	f8c9 4000 	str.w	r4, [r9]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000ac64:	0c12      	lsrs	r2, r2, #16
9000ac66:	f8c9 2008 	str.w	r2, [r9, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000ac6a:	68da      	ldr	r2, [r3, #12]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
9000ac6c:	691d      	ldr	r5, [r3, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
9000ac6e:	695f      	ldr	r7, [r3, #20]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000ac70:	0c12      	lsrs	r2, r2, #16
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
9000ac72:	699e      	ldr	r6, [r3, #24]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
9000ac74:	f017 0ff0 	tst.w	r7, #240	; 0xf0
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000ac78:	f8c9 200c 	str.w	r2, [r9, #12]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
9000ac7c:	ea4f 1616 	mov.w	r6, r6, lsr #4
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
9000ac80:	ea4f 1215 	mov.w	r2, r5, lsr #4
9000ac84:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
9000ac88:	ea4f 1c17 	mov.w	ip, r7, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
9000ac8c:	d108      	bne.n	9000aca0 <HAL_JPEG_GetInfo.part.0+0x180>
9000ac8e:	2d01      	cmp	r5, #1
9000ac90:	d106      	bne.n	9000aca0 <HAL_JPEG_GetInfo.part.0+0x180>
9000ac92:	f016 0f0f 	tst.w	r6, #15
9000ac96:	bf0c      	ite	eq
9000ac98:	2401      	moveq	r4, #1
9000ac9a:	2400      	movne	r4, #0
9000ac9c:	0064      	lsls	r4, r4, #1
9000ac9e:	e754      	b.n	9000ab4a <HAL_JPEG_GetInfo.part.0+0x2a>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
9000aca0:	ea42 020c 	orr.w	r2, r2, ip
9000aca4:	f012 040f 	ands.w	r4, r2, #15
9000aca8:	f43f af4f 	beq.w	9000ab4a <HAL_JPEG_GetInfo.part.0+0x2a>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
9000acac:	ea4c 0206 	orr.w	r2, ip, r6
9000acb0:	f3c2 0203 	ubfx	r2, r2, #0, #4
9000acb4:	2d03      	cmp	r5, #3
9000acb6:	bf08      	it	eq
9000acb8:	2a00      	cmpeq	r2, #0
9000acba:	bf0c      	ite	eq
9000acbc:	2401      	moveq	r4, #1
9000acbe:	2400      	movne	r4, #0
9000acc0:	e743      	b.n	9000ab4a <HAL_JPEG_GetInfo.part.0+0x2a>
    return HAL_ERROR;
9000acc2:	2001      	movs	r0, #1
}
9000acc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9000acc8:	9002b458 	.word	0x9002b458

9000accc <HAL_JPEG_Init>:
  if (hjpeg == NULL)
9000accc:	2800      	cmp	r0, #0
9000acce:	f000 810b 	beq.w	9000aee8 <HAL_JPEG_Init+0x21c>
{
9000acd2:	b570      	push	{r4, r5, r6, lr}
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
9000acd4:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
9000acd8:	4604      	mov	r4, r0
9000acda:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000acde:	2b00      	cmp	r3, #0
9000ace0:	f000 80fd 	beq.w	9000aede <HAL_JPEG_Init+0x212>
  __HAL_JPEG_ENABLE(hjpeg);
9000ace4:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
9000ace6:	2102      	movs	r1, #2
  hjpeg->QuantTable2 = NULL;
9000ace8:	2300      	movs	r3, #0
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
9000acea:	4880      	ldr	r0, [pc, #512]	; (9000aeec <HAL_JPEG_Init+0x220>)
  hjpeg->State = HAL_JPEG_STATE_BUSY;
9000acec:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
  __HAL_JPEG_ENABLE(hjpeg);
9000acf0:	6b11      	ldr	r1, [r2, #48]	; 0x30
9000acf2:	f041 0101 	orr.w	r1, r1, #1
9000acf6:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000acf8:	6811      	ldr	r1, [r2, #0]
9000acfa:	f021 0101 	bic.w	r1, r1, #1
9000acfe:	6011      	str	r1, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000ad00:	6b11      	ldr	r1, [r2, #48]	; 0x30
9000ad02:	f021 017e 	bic.w	r1, r1, #126	; 0x7e
9000ad06:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
9000ad08:	6b11      	ldr	r1, [r2, #48]	; 0x30
9000ad0a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
9000ad0e:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
9000ad10:	6b11      	ldr	r1, [r2, #48]	; 0x30
9000ad12:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
9000ad16:	6311      	str	r1, [r2, #48]	; 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000ad18:	6b91      	ldr	r1, [r2, #56]	; 0x38
9000ad1a:	f041 0160 	orr.w	r1, r1, #96	; 0x60
9000ad1e:	6391      	str	r1, [r2, #56]	; 0x38
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
9000ad20:	4973      	ldr	r1, [pc, #460]	; (9000aef0 <HAL_JPEG_Init+0x224>)
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
9000ad22:	63e0      	str	r0, [r4, #60]	; 0x3c
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000ad24:	2001      	movs	r0, #1
  hjpeg->QuantTable3 = NULL;
9000ad26:	64a3      	str	r3, [r4, #72]	; 0x48
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
9000ad28:	e9c4 1310 	strd	r1, r3, [r4, #64]	; 0x40
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000ad2c:	f8c2 336c 	str.w	r3, [r2, #876]	; 0x36c
9000ad30:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
9000ad34:	4b6f      	ldr	r3, [pc, #444]	; (9000aef4 <HAL_JPEG_Init+0x228>)
9000ad36:	f8c2 0368 	str.w	r0, [r2, #872]	; 0x368
9000ad3a:	f8c2 1364 	str.w	r1, [r2, #868]	; 0x364
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000ad3e:	486e      	ldr	r0, [pc, #440]	; (9000aef8 <HAL_JPEG_Init+0x22c>)
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000ad40:	f8c2 3360 	str.w	r3, [r2, #864]	; 0x360
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000ad44:	4b6d      	ldr	r3, [pc, #436]	; (9000aefc <HAL_JPEG_Init+0x230>)
9000ad46:	f8c2 0378 	str.w	r0, [r2, #888]	; 0x378
9000ad4a:	496d      	ldr	r1, [pc, #436]	; (9000af00 <HAL_JPEG_Init+0x234>)
9000ad4c:	f8c2 3374 	str.w	r3, [r2, #884]	; 0x374
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000ad50:	4b6c      	ldr	r3, [pc, #432]	; (9000af04 <HAL_JPEG_Init+0x238>)
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000ad52:	f8c2 1370 	str.w	r1, [r2, #880]	; 0x370
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000ad56:	486c      	ldr	r0, [pc, #432]	; (9000af08 <HAL_JPEG_Init+0x23c>)
9000ad58:	f8c2 3388 	str.w	r3, [r2, #904]	; 0x388
9000ad5c:	496b      	ldr	r1, [pc, #428]	; (9000af0c <HAL_JPEG_Init+0x240>)
9000ad5e:	4b6c      	ldr	r3, [pc, #432]	; (9000af10 <HAL_JPEG_Init+0x244>)
9000ad60:	f8c2 0384 	str.w	r0, [r2, #900]	; 0x384
9000ad64:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
9000ad68:	f8c2 337c 	str.w	r3, [r2, #892]	; 0x37c
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
9000ad6c:	f64f 23f9 	movw	r3, #64249	; 0xfaf9
  value = *address & 0xFFFF0000U;
9000ad70:	f8d2 042c 	ldr.w	r0, [r2, #1068]	; 0x42c
9000ad74:	4967      	ldr	r1, [pc, #412]	; (9000af14 <HAL_JPEG_Init+0x248>)
9000ad76:	4001      	ands	r1, r0
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
9000ad78:	f502 6085 	add.w	r0, r2, #1064	; 0x428
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
9000ad7c:	430b      	orrs	r3, r1
  *address = value;
9000ad7e:	4966      	ldr	r1, [pc, #408]	; (9000af18 <HAL_JPEG_Init+0x24c>)
9000ad80:	f1a1 06a0 	sub.w	r6, r1, #160	; 0xa0
9000ad84:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
9000ad88:	f891 30ae 	ldrb.w	r3, [r1, #174]	; 0xae
  while (index > 3UL)
9000ad8c:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000ad8e:	f891 e0b3 	ldrb.w	lr, [r1, #179]	; 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
9000ad92:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
9000ad94:	f891 c0b0 	ldrb.w	ip, [r1, #176]	; 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
9000ad98:	f891 50b1 	ldrb.w	r5, [r1, #177]	; 0xb1
  while (index > 3UL)
9000ad9c:	42b1      	cmp	r1, r6
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000ad9e:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
9000ada2:	ea43 030c 	orr.w	r3, r3, ip
9000ada6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000adaa:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
9000adae:	d1eb      	bne.n	9000ad88 <HAL_JPEG_Init+0xbc>
  value = *address & 0x0000FFFFU;
9000adb0:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000adb4:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
  value = *address & 0xFFFF0000U;
9000adb8:	4856      	ldr	r0, [pc, #344]	; (9000af14 <HAL_JPEG_Init+0x248>)
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000adba:	2501      	movs	r5, #1
  value = *address & 0x0000FFFFU;
9000adbc:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
9000adbe:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
  *address = value;
9000adc2:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
  value = *address & 0xFFFF0000U;
9000adc6:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
9000adca:	4003      	ands	r3, r0
  *address = value;
9000adcc:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000add0:	f8c2 5438 	str.w	r5, [r2, #1080]	; 0x438
9000add4:	f8c2 1434 	str.w	r1, [r2, #1076]	; 0x434
9000add8:	f8c2 1430 	str.w	r1, [r2, #1072]	; 0x430
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
9000addc:	f640 310a 	movw	r1, #2826	; 0xb0a
  value = *address & 0x0000FFFFUL;
9000ade0:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
9000ade4:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
9000ade6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
9000adea:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
  value = *address & 0xFFFF0000UL;
9000adee:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
9000adf2:	4003      	ands	r3, r0
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
9000adf4:	4319      	orrs	r1, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
9000adf6:	4b49      	ldr	r3, [pc, #292]	; (9000af1c <HAL_JPEG_Init+0x250>)
  *address = value;
9000adf8:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
9000adfc:	f247 7102 	movw	r1, #30466	; 0x7702
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
9000ae00:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444
9000ae04:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
9000ae08:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
  value = *address & 0x0000FFFFU;
9000ae0c:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
9000ae10:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
9000ae12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  *address = value;
9000ae16:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
  value = *address & 0xFFFF0000U;
9000ae1a:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
9000ae1e:	4003      	ands	r3, r0
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000ae20:	483f      	ldr	r0, [pc, #252]	; (9000af20 <HAL_JPEG_Init+0x254>)
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
9000ae22:	4319      	orrs	r1, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000ae24:	4b3f      	ldr	r3, [pc, #252]	; (9000af24 <HAL_JPEG_Init+0x258>)
  *address = value;
9000ae26:	f8c2 1458 	str.w	r1, [r2, #1112]	; 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000ae2a:	493f      	ldr	r1, [pc, #252]	; (9000af28 <HAL_JPEG_Init+0x25c>)
9000ae2c:	f8c2 0454 	str.w	r0, [r2, #1108]	; 0x454
  address = (hjpeg->Instance->DHTMEM + 102);
9000ae30:	f502 609f 	add.w	r0, r2, #1272	; 0x4f8
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000ae34:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
9000ae38:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
  value = *address & 0x0000FFFFUL;
9000ae3c:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
9000ae40:	493a      	ldr	r1, [pc, #232]	; (9000af2c <HAL_JPEG_Init+0x260>)
  value = *address & 0x0000FFFFUL;
9000ae42:	b29b      	uxth	r3, r3
9000ae44:	f1a1 06a0 	sub.w	r6, r1, #160	; 0xa0
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
9000ae48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
9000ae4c:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
9000ae50:	f891 30b0 	ldrb.w	r3, [r1, #176]	; 0xb0
  while (index > 3UL)
9000ae54:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
9000ae56:	f891 50b5 	ldrb.w	r5, [r1, #181]	; 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
9000ae5a:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
9000ae5c:	f891 e0b2 	ldrb.w	lr, [r1, #178]	; 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
9000ae60:	f891 c0b3 	ldrb.w	ip, [r1, #179]	; 0xb3
  while (index > 3UL)
9000ae64:	42b1      	cmp	r1, r6
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
9000ae66:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
9000ae6a:	ea43 030e 	orr.w	r3, r3, lr
9000ae6e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
9000ae72:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
9000ae76:	d1eb      	bne.n	9000ae50 <HAL_JPEG_Init+0x184>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
9000ae78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
9000ae7c:	4926      	ldr	r1, [pc, #152]	; (9000af18 <HAL_JPEG_Init+0x24c>)
9000ae7e:	4620      	mov	r0, r4
9000ae80:	f7ff fd3a 	bl	9000a8f8 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
9000ae84:	b118      	cbz	r0, 9000ae8e <HAL_JPEG_Init+0x1c2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
9000ae86:	2301      	movs	r3, #1
    return HAL_ERROR;
9000ae88:	4618      	mov	r0, r3
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
9000ae8a:	6523      	str	r3, [r4, #80]	; 0x50
}
9000ae8c:	bd70      	pop	{r4, r5, r6, pc}
                              (hjpeg->Instance->HUFFENC_AC1));
9000ae8e:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
9000ae90:	4620      	mov	r0, r4
9000ae92:	4926      	ldr	r1, [pc, #152]	; (9000af2c <HAL_JPEG_Init+0x260>)
9000ae94:	f502 62cc 	add.w	r2, r2, #1632	; 0x660
9000ae98:	f7ff fd2e 	bl	9000a8f8 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
9000ae9c:	2800      	cmp	r0, #0
9000ae9e:	d1f2      	bne.n	9000ae86 <HAL_JPEG_Init+0x1ba>
                              hjpeg->Instance->HUFFENC_DC0);
9000aea0:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
9000aea2:	4620      	mov	r0, r4
9000aea4:	4922      	ldr	r1, [pc, #136]	; (9000af30 <HAL_JPEG_Init+0x264>)
9000aea6:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
9000aeaa:	f7ff fc7b 	bl	9000a7a4 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
9000aeae:	2800      	cmp	r0, #0
9000aeb0:	d1e9      	bne.n	9000ae86 <HAL_JPEG_Init+0x1ba>
                              hjpeg->Instance->HUFFENC_DC1);
9000aeb2:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
9000aeb4:	4620      	mov	r0, r4
9000aeb6:	491f      	ldr	r1, [pc, #124]	; (9000af34 <HAL_JPEG_Init+0x268>)
9000aeb8:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
9000aebc:	f7ff fc72 	bl	9000a7a4 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
9000aec0:	2800      	cmp	r0, #0
9000aec2:	d1e0      	bne.n	9000ae86 <HAL_JPEG_Init+0x1ba>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
9000aec4:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_READY;
9000aec6:	2101      	movs	r1, #1
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
9000aec8:	6853      	ldr	r3, [r2, #4]
9000aeca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000aece:	6053      	str	r3, [r2, #4]
  hjpeg->JpegInCount = 0;
9000aed0:	6220      	str	r0, [r4, #32]
  hjpeg->JpegOutCount = 0;
9000aed2:	6260      	str	r0, [r4, #36]	; 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
9000aed4:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
9000aed8:	6520      	str	r0, [r4, #80]	; 0x50
  hjpeg->Context = 0;
9000aeda:	6560      	str	r0, [r4, #84]	; 0x54
}
9000aedc:	bd70      	pop	{r4, r5, r6, pc}
    hjpeg->Lock = HAL_UNLOCKED;
9000aede:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
    HAL_JPEG_MspInit(hjpeg);
9000aee2:	f7f9 fce1 	bl	900048a8 <HAL_JPEG_MspInit>
9000aee6:	e6fd      	b.n	9000ace4 <HAL_JPEG_Init+0x18>
    return HAL_ERROR;
9000aee8:	2001      	movs	r0, #1
}
9000aeea:	4770      	bx	lr
9000aeec:	9002b418 	.word	0x9002b418
9000aef0:	9002b3a0 	.word	0x9002b3a0
9000aef4:	01050100 	.word	0x01050100
9000aef8:	0b0a0908 	.word	0x0b0a0908
9000aefc:	07060504 	.word	0x07060504
9000af00:	03020100 	.word	0x03020100
9000af04:	7d010000 	.word	0x7d010000
9000af08:	04040505 	.word	0x04040505
9000af0c:	03040203 	.word	0x03040203
9000af10:	03010200 	.word	0x03010200
9000af14:	ffff0000 	.word	0xffff0000
9000af18:	9002b2ec 	.word	0x9002b2ec
9000af1c:	09080706 	.word	0x09080706
9000af20:	01000404 	.word	0x01000404
9000af24:	04040201 	.word	0x04040201
9000af28:	05070403 	.word	0x05070403
9000af2c:	9002b238 	.word	0x9002b238
9000af30:	9002b3fc 	.word	0x9002b3fc
9000af34:	9002b3e0 	.word	0x9002b3e0

9000af38 <HAL_JPEG_Decode_DMA>:
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
9000af38:	2b00      	cmp	r3, #0
9000af3a:	bf18      	it	ne
9000af3c:	2900      	cmpne	r1, #0
9000af3e:	d03b      	beq.n	9000afb8 <HAL_JPEG_Decode_DMA+0x80>
{
9000af40:	b570      	push	{r4, r5, r6, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
9000af42:	fab0 f580 	clz	r5, r0
9000af46:	4604      	mov	r4, r0
9000af48:	096d      	lsrs	r5, r5, #5
9000af4a:	b330      	cbz	r0, 9000af9a <HAL_JPEG_Decode_DMA+0x62>
  __HAL_LOCK(hjpeg);
9000af4c:	f890 c04c 	ldrb.w	ip, [r0, #76]	; 0x4c
9000af50:	f1bc 0f01 	cmp.w	ip, #1
9000af54:	d02e      	beq.n	9000afb4 <HAL_JPEG_Decode_DMA+0x7c>
  if (hjpeg->State == HAL_JPEG_STATE_READY)
9000af56:	f890 c04d 	ldrb.w	ip, [r0, #77]	; 0x4d
  __HAL_LOCK(hjpeg);
9000af5a:	f04f 0e01 	mov.w	lr, #1
  if (hjpeg->State == HAL_JPEG_STATE_READY)
9000af5e:	45f4      	cmp	ip, lr
9000af60:	fa5f f68c 	uxtb.w	r6, ip
  __HAL_LOCK(hjpeg);
9000af64:	f880 e04c 	strb.w	lr, [r0, #76]	; 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
9000af68:	d119      	bne.n	9000af9e <HAL_JPEG_Decode_DMA+0x66>
    hjpeg->InDataLength = InDataLength;
9000af6a:	6282      	str	r2, [r0, #40]	; 0x28
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
9000af6c:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->OutDataLength = OutDataLength;
9000af70:	9b04      	ldr	r3, [sp, #16]
9000af72:	62c3      	str	r3, [r0, #44]	; 0x2c
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
9000af74:	2304      	movs	r3, #4
9000af76:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
9000af7a:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000af7c:	f023 030f 	bic.w	r3, r3, #15
9000af80:	6543      	str	r3, [r0, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
9000af82:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000af84:	f043 030e 	orr.w	r3, r3, #14
9000af88:	6543      	str	r3, [r0, #84]	; 0x54
    hjpeg->JpegInCount = 0;
9000af8a:	6205      	str	r5, [r0, #32]
    hjpeg->JpegOutCount = 0;
9000af8c:	6245      	str	r5, [r0, #36]	; 0x24
    JPEG_Init_Process(hjpeg);
9000af8e:	f7ff fd3d 	bl	9000aa0c <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
9000af92:	f7ff fd79 	bl	9000aa88 <JPEG_DMA_StartProcess>
9000af96:	b930      	cbnz	r0, 9000afa6 <HAL_JPEG_Decode_DMA+0x6e>
}
9000af98:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
9000af9a:	2001      	movs	r0, #1
}
9000af9c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
9000af9e:	2002      	movs	r0, #2
    __HAL_UNLOCK(hjpeg);
9000afa0:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
9000afa4:	bd70      	pop	{r4, r5, r6, pc}
      hjpeg->State = HAL_JPEG_STATE_ERROR;
9000afa6:	2306      	movs	r3, #6
      return HAL_ERROR;
9000afa8:	4630      	mov	r0, r6
      __HAL_UNLOCK(hjpeg);
9000afaa:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
9000afae:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
}
9000afb2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hjpeg);
9000afb4:	2002      	movs	r0, #2
}
9000afb6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
9000afb8:	2001      	movs	r0, #1
}
9000afba:	4770      	bx	lr

9000afbc <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000afbc:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000afbe:	f003 030c 	and.w	r3, r3, #12
9000afc2:	2b0c      	cmp	r3, #12
9000afc4:	d01a      	beq.n	9000affc <HAL_JPEG_Pause+0x40>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000afc6:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000afc8:	f003 030c 	and.w	r3, r3, #12
9000afcc:	2b08      	cmp	r3, #8
9000afce:	d001      	beq.n	9000afd4 <HAL_JPEG_Pause+0x18>
}
9000afd0:	2000      	movs	r0, #0
9000afd2:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
9000afd4:	07ca      	lsls	r2, r1, #31
9000afd6:	d41f      	bmi.n	9000b018 <HAL_JPEG_Pause+0x5c>
9000afd8:	f04f 3cff 	mov.w	ip, #4294967295
9000afdc:	f06f 0228 	mvn.w	r2, #40	; 0x28
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
9000afe0:	078b      	lsls	r3, r1, #30
9000afe2:	d504      	bpl.n	9000afee <HAL_JPEG_Pause+0x32>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
9000afe4:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000afe6:	4694      	mov	ip, r2
9000afe8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
9000afec:	6543      	str	r3, [r0, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
9000afee:	6802      	ldr	r2, [r0, #0]
}
9000aff0:	2000      	movs	r0, #0
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
9000aff2:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000aff4:	ea03 030c 	and.w	r3, r3, ip
9000aff8:	6313      	str	r3, [r2, #48]	; 0x30
}
9000affa:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
9000affc:	07cb      	lsls	r3, r1, #31
9000affe:	d503      	bpl.n	9000b008 <HAL_JPEG_Pause+0x4c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000b000:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b002:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
9000b006:	6543      	str	r3, [r0, #84]	; 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
9000b008:	0789      	lsls	r1, r1, #30
9000b00a:	d5e1      	bpl.n	9000afd0 <HAL_JPEG_Pause+0x14>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
9000b00c:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b00e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
9000b012:	6543      	str	r3, [r0, #84]	; 0x54
}
9000b014:	2000      	movs	r0, #0
9000b016:	4770      	bx	lr
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000b018:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b01a:	f06f 0c06 	mvn.w	ip, #6
9000b01e:	f06f 022e 	mvn.w	r2, #46	; 0x2e
9000b022:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
9000b026:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
9000b028:	e7da      	b.n	9000afe0 <HAL_JPEG_Pause+0x24>
9000b02a:	bf00      	nop

9000b02c <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
9000b02c:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
9000b02e:	6282      	str	r2, [r0, #40]	; 0x28
}
9000b030:	4770      	bx	lr
9000b032:	bf00      	nop

9000b034 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
9000b034:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
9000b036:	62c2      	str	r2, [r0, #44]	; 0x2c
}
9000b038:	4770      	bx	lr
9000b03a:	bf00      	nop

9000b03c <HAL_JPEG_EncodeCpltCallback>:
9000b03c:	4770      	bx	lr
9000b03e:	bf00      	nop

9000b040 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
9000b040:	6c00      	ldr	r0, [r0, #64]	; 0x40
  hjpeg->State = HAL_JPEG_STATE_READY;
9000b042:	2101      	movs	r1, #1
{
9000b044:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b046:	6803      	ldr	r3, [r0, #0]
9000b048:	681a      	ldr	r2, [r3, #0]
9000b04a:	f022 0201 	bic.w	r2, r2, #1
9000b04e:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000b050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b052:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000b056:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
9000b058:	f880 104d 	strb.w	r1, [r0, #77]	; 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b05c:	6d03      	ldr	r3, [r0, #80]	; 0x50
9000b05e:	f043 0304 	orr.w	r3, r3, #4
9000b062:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
9000b064:	f7f6 fbfa 	bl	9000185c <HAL_JPEG_ErrorCallback>
}
9000b068:	bd08      	pop	{r3, pc}
9000b06a:	bf00      	nop

9000b06c <JPEG_MDMAInCpltCallback>:
{
9000b06c:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
9000b06e:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
9000b070:	f248 010c 	movw	r1, #32780	; 0x800c
{
9000b074:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000b076:	6822      	ldr	r2, [r4, #0]
9000b078:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000b07a:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
9000b07e:	6313      	str	r3, [r2, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
9000b080:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b082:	400b      	ands	r3, r1
9000b084:	2b0c      	cmp	r3, #12
9000b086:	d001      	beq.n	9000b08c <JPEG_MDMAInCpltCallback+0x20>
}
9000b088:	b003      	add	sp, #12
9000b08a:	bd30      	pop	{r4, r5, pc}
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b08c:	6802      	ldr	r2, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
9000b08e:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b090:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b092:	6952      	ldr	r2, [r2, #20]
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000b094:	6b21      	ldr	r1, [r4, #48]	; 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b096:	f3c2 0210 	ubfx	r2, r2, #0, #17
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000b09a:	6a8d      	ldr	r5, [r1, #40]	; 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b09c:	1a9b      	subs	r3, r3, r2
9000b09e:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
9000b0a0:	6a21      	ldr	r1, [r4, #32]
9000b0a2:	f7f6 fb73 	bl	9000178c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
9000b0a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b0a8:	42ab      	cmp	r3, r5
9000b0aa:	d311      	bcc.n	9000b0d0 <JPEG_MDMAInCpltCallback+0x64>
      if (inXfrSize == 0UL)
9000b0ac:	b305      	cbz	r5, 9000b0f0 <JPEG_MDMAInCpltCallback+0x84>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000b0ae:	fbb3 f2f5 	udiv	r2, r3, r5
9000b0b2:	fb05 3212 	mls	r2, r5, r2, r3
9000b0b6:	1a9b      	subs	r3, r3, r2
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
9000b0b8:	6d62      	ldr	r2, [r4, #84]	; 0x54
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000b0ba:	62a3      	str	r3, [r4, #40]	; 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
9000b0bc:	04d1      	lsls	r1, r2, #19
9000b0be:	d400      	bmi.n	9000b0c2 <JPEG_MDMAInCpltCallback+0x56>
9000b0c0:	b963      	cbnz	r3, 9000b0dc <JPEG_MDMAInCpltCallback+0x70>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
9000b0c2:	6822      	ldr	r2, [r4, #0]
9000b0c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000b0c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
9000b0ca:	6313      	str	r3, [r2, #48]	; 0x30
}
9000b0cc:	b003      	add	sp, #12
9000b0ce:	bd30      	pop	{r4, r5, pc}
    else if (hjpeg->InDataLength > 0UL)
9000b0d0:	b1cb      	cbz	r3, 9000b106 <JPEG_MDMAInCpltCallback+0x9a>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
9000b0d2:	0798      	lsls	r0, r3, #30
9000b0d4:	d119      	bne.n	9000b10a <JPEG_MDMAInCpltCallback+0x9e>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
9000b0d6:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000b0d8:	04d2      	lsls	r2, r2, #19
9000b0da:	d4f2      	bmi.n	9000b0c2 <JPEG_MDMAInCpltCallback+0x56>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
9000b0dc:	6822      	ldr	r2, [r4, #0]
9000b0de:	2501      	movs	r5, #1
9000b0e0:	69a1      	ldr	r1, [r4, #24]
9000b0e2:	6b20      	ldr	r0, [r4, #48]	; 0x30
9000b0e4:	3240      	adds	r2, #64	; 0x40
9000b0e6:	9500      	str	r5, [sp, #0]
9000b0e8:	f001 f8b0 	bl	9000c24c <HAL_MDMA_Start_IT>
9000b0ec:	2800      	cmp	r0, #0
9000b0ee:	d0e8      	beq.n	9000b0c2 <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b0f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b0f2:	2206      	movs	r2, #6
        HAL_JPEG_ErrorCallback(hjpeg);
9000b0f4:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b0f6:	f043 0304 	orr.w	r3, r3, #4
9000b0fa:	6523      	str	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b0fc:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
9000b100:	f7f6 fbac 	bl	9000185c <HAL_JPEG_ErrorCallback>
        return;
9000b104:	e7c0      	b.n	9000b088 <JPEG_MDMAInCpltCallback+0x1c>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
9000b106:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b108:	e7db      	b.n	9000b0c2 <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
9000b10a:	f023 0303 	bic.w	r3, r3, #3
9000b10e:	3304      	adds	r3, #4
9000b110:	e7d2      	b.n	9000b0b8 <JPEG_MDMAInCpltCallback+0x4c>
9000b112:	bf00      	nop

9000b114 <JPEG_DMA_PollResidualData>:
{
9000b114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
9000b116:	6802      	ldr	r2, [r0, #0]
9000b118:	2610      	movs	r6, #16
{
9000b11a:	4604      	mov	r4, r0
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000b11c:	6d65      	ldr	r5, [r4, #84]	; 0x54
9000b11e:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
9000b122:	d11d      	bne.n	9000b160 <JPEG_DMA_PollResidualData+0x4c>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
9000b124:	6b53      	ldr	r3, [r2, #52]	; 0x34
9000b126:	06df      	lsls	r7, r3, #27
9000b128:	d51a      	bpl.n	9000b160 <JPEG_DMA_PollResidualData+0x4c>
        dataOut = hjpeg->Instance->DOR;
9000b12a:	6c53      	ldr	r3, [r2, #68]	; 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
9000b12c:	69e7      	ldr	r7, [r4, #28]
9000b12e:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
9000b130:	0a18      	lsrs	r0, r3, #8
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
9000b132:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
9000b134:	54bb      	strb	r3, [r7, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
9000b136:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
9000b138:	6a67      	ldr	r7, [r4, #36]	; 0x24
9000b13a:	69e2      	ldr	r2, [r4, #28]
9000b13c:	443a      	add	r2, r7
9000b13e:	7050      	strb	r0, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
9000b140:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000b142:	69e2      	ldr	r2, [r4, #28]
9000b144:	4402      	add	r2, r0
9000b146:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
9000b148:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b14a:	69e2      	ldr	r2, [r4, #28]
9000b14c:	440a      	add	r2, r1
9000b14e:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
9000b150:	6a63      	ldr	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
9000b152:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hjpeg->JpegOutCount += 4UL;
9000b154:	3304      	adds	r3, #4
9000b156:	6263      	str	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
9000b158:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b15a:	4293      	cmp	r3, r2
9000b15c:	d021      	beq.n	9000b1a2 <JPEG_DMA_PollResidualData+0x8e>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
9000b15e:	6822      	ldr	r2, [r4, #0]
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
9000b160:	3e01      	subs	r6, #1
9000b162:	d1db      	bne.n	9000b11c <JPEG_DMA_PollResidualData+0x8>
  tmpContext = hjpeg->Context;
9000b164:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
9000b166:	6b53      	ldr	r3, [r2, #52]	; 0x34
9000b168:	06d8      	lsls	r0, r3, #27
9000b16a:	d501      	bpl.n	9000b170 <JPEG_DMA_PollResidualData+0x5c>
9000b16c:	048b      	lsls	r3, r1, #18
9000b16e:	d417      	bmi.n	9000b1a0 <JPEG_DMA_PollResidualData+0x8c>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b170:	6813      	ldr	r3, [r2, #0]
9000b172:	f023 0301 	bic.w	r3, r3, #1
9000b176:	6013      	str	r3, [r2, #0]
    if (hjpeg->JpegOutCount > 0UL)
9000b178:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b17a:	b9eb      	cbnz	r3, 9000b1b8 <JPEG_DMA_PollResidualData+0xa4>
    tmpContext = hjpeg->Context;
9000b17c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
9000b17e:	2000      	movs	r0, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b180:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000b182:	2101      	movs	r1, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b184:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
9000b188:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b18c:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000b190:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b192:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b194:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000b196:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b19a:	d00a      	beq.n	9000b1b2 <JPEG_DMA_PollResidualData+0x9e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
9000b19c:	f7ff ff4e 	bl	9000b03c <HAL_JPEG_EncodeCpltCallback>
}
9000b1a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b1a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b1a4:	4620      	mov	r0, r4
9000b1a6:	69e1      	ldr	r1, [r4, #28]
9000b1a8:	f7f6 fb10 	bl	900017cc <HAL_JPEG_DataReadyCallback>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
9000b1ac:	6822      	ldr	r2, [r4, #0]
          hjpeg->JpegOutCount = 0;
9000b1ae:	6265      	str	r5, [r4, #36]	; 0x24
9000b1b0:	e7d6      	b.n	9000b160 <JPEG_DMA_PollResidualData+0x4c>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000b1b2:	f7f6 fb55 	bl	90001860 <HAL_JPEG_DecodeCpltCallback>
}
9000b1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b1b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b1ba:	4620      	mov	r0, r4
9000b1bc:	69e1      	ldr	r1, [r4, #28]
9000b1be:	f7f6 fb05 	bl	900017cc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000b1c2:	2300      	movs	r3, #0
9000b1c4:	6263      	str	r3, [r4, #36]	; 0x24
9000b1c6:	e7d9      	b.n	9000b17c <JPEG_DMA_PollResidualData+0x68>

9000b1c8 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
9000b1c8:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b1ca:	f413 5f40 	tst.w	r3, #12288	; 0x3000
9000b1ce:	d028      	beq.n	9000b222 <HAL_JPEG_Resume+0x5a>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000b1d0:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b1d2:	f003 030c 	and.w	r3, r3, #12
9000b1d6:	2b0c      	cmp	r3, #12
{
9000b1d8:	b570      	push	{r4, r5, r6, lr}
9000b1da:	4604      	mov	r4, r0
9000b1dc:	b082      	sub	sp, #8
9000b1de:	460d      	mov	r5, r1
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000b1e0:	d007      	beq.n	9000b1f2 <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000b1e2:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b1e4:	f003 030c 	and.w	r3, r3, #12
9000b1e8:	2b08      	cmp	r3, #8
9000b1ea:	d037      	beq.n	9000b25c <HAL_JPEG_Resume+0x94>
  return HAL_OK;
9000b1ec:	2000      	movs	r0, #0
}
9000b1ee:	b002      	add	sp, #8
9000b1f0:	bd70      	pop	{r4, r5, r6, pc}
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
9000b1f2:	07c8      	lsls	r0, r1, #31
9000b1f4:	d417      	bmi.n	9000b226 <HAL_JPEG_Resume+0x5e>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
9000b1f6:	07a9      	lsls	r1, r5, #30
9000b1f8:	d5f8      	bpl.n	9000b1ec <HAL_JPEG_Resume+0x24>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
9000b1fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b1fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
9000b200:	6563      	str	r3, [r4, #84]	; 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
9000b202:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b204:	041a      	lsls	r2, r3, #16
9000b206:	d453      	bmi.n	9000b2b0 <HAL_JPEG_Resume+0xe8>
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
9000b208:	6b60      	ldr	r0, [r4, #52]	; 0x34
9000b20a:	6a82      	ldr	r2, [r0, #40]	; 0x28
        if (xfrSize == 0UL)
9000b20c:	2a00      	cmp	r2, #0
9000b20e:	d13e      	bne.n	9000b28e <HAL_JPEG_Resume+0xc6>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b210:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b212:	2206      	movs	r2, #6
          return HAL_ERROR;
9000b214:	2001      	movs	r0, #1
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b216:	f043 0304 	orr.w	r3, r3, #4
9000b21a:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b21c:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
          return HAL_ERROR;
9000b220:	e7e5      	b.n	9000b1ee <HAL_JPEG_Resume+0x26>
    return HAL_ERROR;
9000b222:	2001      	movs	r0, #1
}
9000b224:	4770      	bx	lr
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000b226:	6d63      	ldr	r3, [r4, #84]	; 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000b228:	6b20      	ldr	r0, [r4, #48]	; 0x30
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000b22a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000b22e:	6a82      	ldr	r2, [r0, #40]	; 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000b230:	6563      	str	r3, [r4, #84]	; 0x54
      if (xfrSize == 0UL)
9000b232:	2a00      	cmp	r2, #0
9000b234:	d0ec      	beq.n	9000b210 <HAL_JPEG_Resume+0x48>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
9000b236:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b238:	fbb3 f1f2 	udiv	r1, r3, r2
9000b23c:	fb02 3211 	mls	r2, r2, r1, r3
9000b240:	1a9b      	subs	r3, r3, r2
9000b242:	62a3      	str	r3, [r4, #40]	; 0x28
      if (hjpeg->InDataLength > 0UL)
9000b244:	2b00      	cmp	r3, #0
9000b246:	d0d6      	beq.n	9000b1f6 <HAL_JPEG_Resume+0x2e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
9000b248:	6822      	ldr	r2, [r4, #0]
9000b24a:	2601      	movs	r6, #1
9000b24c:	3240      	adds	r2, #64	; 0x40
9000b24e:	9600      	str	r6, [sp, #0]
9000b250:	69a1      	ldr	r1, [r4, #24]
9000b252:	f000 fffb 	bl	9000c24c <HAL_MDMA_Start_IT>
9000b256:	2800      	cmp	r0, #0
9000b258:	d0cd      	beq.n	9000b1f6 <HAL_JPEG_Resume+0x2e>
9000b25a:	e7d9      	b.n	9000b210 <HAL_JPEG_Resume+0x48>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
9000b25c:	f011 0101 	ands.w	r1, r1, #1
9000b260:	d013      	beq.n	9000b28a <HAL_JPEG_Resume+0xc2>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000b262:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b264:	222e      	movs	r2, #46	; 0x2e
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
9000b266:	2106      	movs	r1, #6
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000b268:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000b26c:	6543      	str	r3, [r0, #84]	; 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
9000b26e:	07ab      	lsls	r3, r5, #30
9000b270:	d504      	bpl.n	9000b27c <HAL_JPEG_Resume+0xb4>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
9000b272:	6d63      	ldr	r3, [r4, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
9000b274:	4611      	mov	r1, r2
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
9000b276:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
9000b27a:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
9000b27c:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
9000b27e:	2000      	movs	r0, #0
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
9000b280:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000b282:	430b      	orrs	r3, r1
9000b284:	6313      	str	r3, [r2, #48]	; 0x30
}
9000b286:	b002      	add	sp, #8
9000b288:	bd70      	pop	{r4, r5, r6, pc}
9000b28a:	2228      	movs	r2, #40	; 0x28
9000b28c:	e7ef      	b.n	9000b26e <HAL_JPEG_Resume+0xa6>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
9000b28e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b290:	2501      	movs	r5, #1
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
9000b292:	fbb3 f1f2 	udiv	r1, r3, r2
9000b296:	fb02 3211 	mls	r2, r2, r1, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b29a:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
9000b29c:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b29e:	3144      	adds	r1, #68	; 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
9000b2a0:	62e3      	str	r3, [r4, #44]	; 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b2a2:	9500      	str	r5, [sp, #0]
9000b2a4:	69e2      	ldr	r2, [r4, #28]
9000b2a6:	f000 ffd1 	bl	9000c24c <HAL_MDMA_Start_IT>
9000b2aa:	2800      	cmp	r0, #0
9000b2ac:	d09e      	beq.n	9000b1ec <HAL_JPEG_Resume+0x24>
9000b2ae:	e7af      	b.n	9000b210 <HAL_JPEG_Resume+0x48>
        JPEG_DMA_PollResidualData(hjpeg);
9000b2b0:	4620      	mov	r0, r4
9000b2b2:	f7ff ff2f 	bl	9000b114 <JPEG_DMA_PollResidualData>
9000b2b6:	e799      	b.n	9000b1ec <HAL_JPEG_Resume+0x24>

9000b2b8 <JPEG_MDMAOutCpltCallback>:
{
9000b2b8:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
9000b2ba:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
9000b2bc:	f248 010c 	movw	r1, #32780	; 0x800c
{
9000b2c0:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000b2c2:	6823      	ldr	r3, [r4, #0]
9000b2c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b2c6:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000b2ca:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
9000b2cc:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000b2ce:	400a      	ands	r2, r1
9000b2d0:	2a0c      	cmp	r2, #12
9000b2d2:	d001      	beq.n	9000b2d8 <JPEG_MDMAOutCpltCallback+0x20>
}
9000b2d4:	b003      	add	sp, #12
9000b2d6:	bd30      	pop	{r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
9000b2d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000b2da:	0692      	lsls	r2, r2, #26
9000b2dc:	d505      	bpl.n	9000b2ea <JPEG_MDMAOutCpltCallback+0x32>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
9000b2de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b2e0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000b2e4:	631a      	str	r2, [r3, #48]	; 0x30
}
9000b2e6:	b003      	add	sp, #12
9000b2e8:	bd30      	pop	{r4, r5, pc}
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b2ea:	6802      	ldr	r2, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b2ec:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b2ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000b2f0:	6952      	ldr	r2, [r2, #20]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b2f2:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b2f4:	f3c2 0210 	ubfx	r2, r2, #0, #17
9000b2f8:	1a9b      	subs	r3, r3, r2
9000b2fa:	6263      	str	r3, [r4, #36]	; 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b2fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b2fe:	f7f6 fa65 	bl	900017cc <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000b302:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b304:	049b      	lsls	r3, r3, #18
9000b306:	d501      	bpl.n	9000b30c <JPEG_MDMAOutCpltCallback+0x54>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
9000b308:	6823      	ldr	r3, [r4, #0]
9000b30a:	e7e8      	b.n	9000b2de <JPEG_MDMAOutCpltCallback+0x26>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b30c:	6821      	ldr	r1, [r4, #0]
9000b30e:	2501      	movs	r5, #1
9000b310:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000b312:	69e2      	ldr	r2, [r4, #28]
9000b314:	3144      	adds	r1, #68	; 0x44
9000b316:	6b60      	ldr	r0, [r4, #52]	; 0x34
9000b318:	9500      	str	r5, [sp, #0]
9000b31a:	f000 ff97 	bl	9000c24c <HAL_MDMA_Start_IT>
9000b31e:	2800      	cmp	r0, #0
9000b320:	d0f2      	beq.n	9000b308 <JPEG_MDMAOutCpltCallback+0x50>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b322:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b324:	2206      	movs	r2, #6
          HAL_JPEG_ErrorCallback(hjpeg);
9000b326:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b328:	f043 0304 	orr.w	r3, r3, #4
9000b32c:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b32e:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
9000b332:	f7f6 fa93 	bl	9000185c <HAL_JPEG_ErrorCallback>
          return;
9000b336:	e7cd      	b.n	9000b2d4 <JPEG_MDMAOutCpltCallback+0x1c>

9000b338 <JPEG_MDMAOutAbortCallback>:
{
9000b338:	b538      	push	{r3, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
9000b33a:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
9000b33c:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b33e:	041a      	lsls	r2, r3, #16
9000b340:	d400      	bmi.n	9000b344 <JPEG_MDMAOutAbortCallback+0xc>
}
9000b342:	bd38      	pop	{r3, r4, r5, pc}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b344:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000b346:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000b348:	681b      	ldr	r3, [r3, #0]
9000b34a:	695b      	ldr	r3, [r3, #20]
9000b34c:	f3c3 0310 	ubfx	r3, r3, #0, #17
9000b350:	1ad3      	subs	r3, r2, r3
9000b352:	6263      	str	r3, [r4, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
9000b354:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b356:	429a      	cmp	r2, r3
9000b358:	d025      	beq.n	9000b3a6 <JPEG_MDMAOutAbortCallback+0x6e>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
9000b35a:	6822      	ldr	r2, [r4, #0]
9000b35c:	6b55      	ldr	r5, [r2, #52]	; 0x34
9000b35e:	f015 0510 	ands.w	r5, r5, #16
9000b362:	d118      	bne.n	9000b396 <JPEG_MDMAOutAbortCallback+0x5e>
    if (hjpeg->JpegOutCount > 0UL)
9000b364:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b366:	bb4b      	cbnz	r3, 9000b3bc <JPEG_MDMAOutAbortCallback+0x84>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b368:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
9000b36a:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
9000b36c:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b36e:	f023 0301 	bic.w	r3, r3, #1
9000b372:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
9000b374:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b376:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b378:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
9000b37c:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b380:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000b384:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b386:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b388:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000b38a:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b38e:	d012      	beq.n	9000b3b6 <JPEG_MDMAOutAbortCallback+0x7e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
9000b390:	f7ff fe54 	bl	9000b03c <HAL_JPEG_EncodeCpltCallback>
}
9000b394:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000b396:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b398:	049b      	lsls	r3, r3, #18
9000b39a:	d4d2      	bmi.n	9000b342 <JPEG_MDMAOutAbortCallback+0xa>
    JPEG_DMA_PollResidualData(hjpeg);
9000b39c:	4620      	mov	r0, r4
}
9000b39e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
9000b3a2:	f7ff beb7 	b.w	9000b114 <JPEG_DMA_PollResidualData>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b3a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b3a8:	4620      	mov	r0, r4
9000b3aa:	69e1      	ldr	r1, [r4, #28]
9000b3ac:	f7f6 fa0e 	bl	900017cc <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
9000b3b0:	2300      	movs	r3, #0
9000b3b2:	6263      	str	r3, [r4, #36]	; 0x24
9000b3b4:	e7d1      	b.n	9000b35a <JPEG_MDMAOutAbortCallback+0x22>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000b3b6:	f7f6 fa53 	bl	90001860 <HAL_JPEG_DecodeCpltCallback>
}
9000b3ba:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b3bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b3be:	4620      	mov	r0, r4
9000b3c0:	69e1      	ldr	r1, [r4, #28]
9000b3c2:	f7f6 fa03 	bl	900017cc <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b3c6:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000b3c8:	6265      	str	r5, [r4, #36]	; 0x24
9000b3ca:	e7cd      	b.n	9000b368 <JPEG_MDMAOutAbortCallback+0x30>

9000b3cc <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b3cc:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b3ce:	f003 0303 	and.w	r3, r3, #3
9000b3d2:	2b02      	cmp	r3, #2
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000b3d4:	6803      	ldr	r3, [r0, #0]
{
9000b3d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000b3da:	4604      	mov	r4, r0
9000b3dc:	b082      	sub	sp, #8
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b3de:	d01f      	beq.n	9000b420 <JPEG_Process+0x54>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
9000b3e0:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000b3e2:	04d7      	lsls	r7, r2, #19
9000b3e4:	d407      	bmi.n	9000b3f6 <JPEG_Process+0x2a>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
9000b3e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000b3e8:	0796      	lsls	r6, r2, #30
9000b3ea:	f100 811d 	bmi.w	9000b628 <JPEG_Process+0x25c>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
9000b3ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000b3f0:	0750      	lsls	r0, r2, #29
9000b3f2:	f100 81b1 	bmi.w	9000b758 <JPEG_Process+0x38c>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000b3f6:	6d65      	ldr	r5, [r4, #84]	; 0x54
9000b3f8:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
9000b3fc:	d107      	bne.n	9000b40e <JPEG_Process+0x42>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
9000b3fe:	6b5e      	ldr	r6, [r3, #52]	; 0x34
9000b400:	f016 0608 	ands.w	r6, r6, #8
9000b404:	d14c      	bne.n	9000b4a0 <JPEG_Process+0xd4>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
9000b406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000b408:	06d2      	lsls	r2, r2, #27
9000b40a:	f100 81e3 	bmi.w	9000b7d4 <JPEG_Process+0x408>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000b40e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000b410:	f002 0238 	and.w	r2, r2, #56	; 0x38
9000b414:	2a20      	cmp	r2, #32
9000b416:	d01a      	beq.n	9000b44e <JPEG_Process+0x82>
  return JPEG_PROCESS_ONGOING;
9000b418:	2000      	movs	r0, #0
}
9000b41a:	b002      	add	sp, #8
9000b41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000b420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000b422:	0652      	lsls	r2, r2, #25
9000b424:	d5dc      	bpl.n	9000b3e0 <JPEG_Process+0x14>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
9000b426:	1d01      	adds	r1, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
9000b428:	9101      	str	r1, [sp, #4]
9000b42a:	f7ff fb79 	bl	9000ab20 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
9000b42e:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000b430:	9901      	ldr	r1, [sp, #4]
9000b432:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
9000b434:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000b436:	f7f6 f957 	bl	900016e8 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
9000b43a:	6823      	ldr	r3, [r4, #0]
9000b43c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b43e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
9000b442:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
9000b444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000b446:	f042 0240 	orr.w	r2, r2, #64	; 0x40
9000b44a:	639a      	str	r2, [r3, #56]	; 0x38
9000b44c:	e7c8      	b.n	9000b3e0 <JPEG_Process+0x14>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b44e:	681a      	ldr	r2, [r3, #0]
9000b450:	f022 0201 	bic.w	r2, r2, #1
9000b454:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000b456:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000b458:	f002 020c 	and.w	r2, r2, #12
9000b45c:	2a08      	cmp	r2, #8
9000b45e:	f000 81e6 	beq.w	9000b82e <JPEG_Process+0x462>
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000b462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000b464:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000b468:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->JpegOutCount > 0UL)
9000b46a:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b46c:	2b00      	cmp	r3, #0
9000b46e:	f040 81e3 	bne.w	9000b838 <JPEG_Process+0x46c>
    tmpContext = hjpeg->Context;
9000b472:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
9000b474:	2100      	movs	r1, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b476:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000b478:	2501      	movs	r5, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b47a:	f003 0303 	and.w	r3, r3, #3
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000b47e:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b480:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    __HAL_UNLOCK(hjpeg);
9000b484:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b488:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b48a:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000b48c:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b490:	f000 81c9 	beq.w	9000b826 <JPEG_Process+0x45a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
9000b494:	f7ff fdd2 	bl	9000b03c <HAL_JPEG_EncodeCpltCallback>
    return JPEG_PROCESS_DONE;
9000b498:	4628      	mov	r0, r5
}
9000b49a:	b002      	add	sp, #8
9000b49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
9000b4a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b4a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9000b4a4:	3220      	adds	r2, #32
9000b4a6:	4296      	cmp	r6, r2
9000b4a8:	f0c0 81e4 	bcc.w	9000b874 <JPEG_Process+0x4a8>
      dataword = hjpeg->Instance->DOR;
9000b4ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b4ae:	69e1      	ldr	r1, [r4, #28]
9000b4b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b4b2:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000b4b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b4b6:	69e2      	ldr	r2, [r4, #28]
9000b4b8:	440a      	add	r2, r1
9000b4ba:	0a19      	lsrs	r1, r3, #8
9000b4bc:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b4be:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b4c0:	69e2      	ldr	r2, [r4, #28]
9000b4c2:	440a      	add	r2, r1
9000b4c4:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b4c6:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b4c8:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b4ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b4cc:	69e2      	ldr	r2, [r4, #28]
9000b4ce:	440a      	add	r2, r1
9000b4d0:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000b4d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000b4d4:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000b4d6:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b4d8:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
9000b4da:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000b4dc:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b4de:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b4e0:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000b4e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b4e4:	69e2      	ldr	r2, [r4, #28]
9000b4e6:	440a      	add	r2, r1
9000b4e8:	0a19      	lsrs	r1, r3, #8
9000b4ea:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b4ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b4ee:	69e2      	ldr	r2, [r4, #28]
9000b4f0:	440a      	add	r2, r1
9000b4f2:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b4f4:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b4f6:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b4f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b4fa:	69e2      	ldr	r2, [r4, #28]
9000b4fc:	440a      	add	r2, r1
9000b4fe:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000b500:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000b502:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000b504:	3304      	adds	r3, #4
9000b506:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000b508:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b50a:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b50c:	69e1      	ldr	r1, [r4, #28]
9000b50e:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000b510:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b512:	69e2      	ldr	r2, [r4, #28]
9000b514:	440a      	add	r2, r1
9000b516:	0a19      	lsrs	r1, r3, #8
9000b518:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b51a:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b51c:	69e2      	ldr	r2, [r4, #28]
9000b51e:	440a      	add	r2, r1
9000b520:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b522:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b524:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b526:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b528:	69e2      	ldr	r2, [r4, #28]
9000b52a:	440a      	add	r2, r1
9000b52c:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000b52e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000b530:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000b532:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b534:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
9000b536:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000b538:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b53a:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b53c:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000b53e:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b540:	69e2      	ldr	r2, [r4, #28]
9000b542:	440a      	add	r2, r1
9000b544:	0a19      	lsrs	r1, r3, #8
9000b546:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b548:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b54a:	69e2      	ldr	r2, [r4, #28]
9000b54c:	440a      	add	r2, r1
9000b54e:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b550:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b552:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b554:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b556:	69e2      	ldr	r2, [r4, #28]
9000b558:	440a      	add	r2, r1
9000b55a:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000b55c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000b55e:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000b560:	3304      	adds	r3, #4
9000b562:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000b564:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b566:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b568:	69e1      	ldr	r1, [r4, #28]
9000b56a:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000b56c:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b56e:	69e2      	ldr	r2, [r4, #28]
9000b570:	440a      	add	r2, r1
9000b572:	0a19      	lsrs	r1, r3, #8
9000b574:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b576:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b578:	69e2      	ldr	r2, [r4, #28]
9000b57a:	440a      	add	r2, r1
9000b57c:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b57e:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b580:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b582:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b584:	69e2      	ldr	r2, [r4, #28]
9000b586:	440a      	add	r2, r1
9000b588:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000b58a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000b58c:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000b58e:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b590:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
9000b592:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000b594:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b596:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b598:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000b59a:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b59c:	69e2      	ldr	r2, [r4, #28]
9000b59e:	440a      	add	r2, r1
9000b5a0:	0a19      	lsrs	r1, r3, #8
9000b5a2:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b5a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b5a6:	69e2      	ldr	r2, [r4, #28]
9000b5a8:	440a      	add	r2, r1
9000b5aa:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b5ac:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b5ae:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b5b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b5b2:	69e2      	ldr	r2, [r4, #28]
9000b5b4:	440a      	add	r2, r1
9000b5b6:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000b5b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000b5ba:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000b5bc:	3304      	adds	r3, #4
9000b5be:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000b5c0:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b5c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b5c4:	69e1      	ldr	r1, [r4, #28]
9000b5c6:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000b5c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b5ca:	69e2      	ldr	r2, [r4, #28]
9000b5cc:	440a      	add	r2, r1
9000b5ce:	0a19      	lsrs	r1, r3, #8
9000b5d0:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b5d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b5d4:	69e2      	ldr	r2, [r4, #28]
9000b5d6:	440a      	add	r2, r1
9000b5d8:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b5da:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b5dc:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b5de:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b5e0:	69e2      	ldr	r2, [r4, #28]
9000b5e2:	440a      	add	r2, r1
9000b5e4:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000b5e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000b5e8:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000b5ea:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b5ec:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
9000b5ee:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000b5f0:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b5f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b5f4:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000b5f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b5f8:	69e2      	ldr	r2, [r4, #28]
9000b5fa:	440a      	add	r2, r1
9000b5fc:	0a19      	lsrs	r1, r3, #8
9000b5fe:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b600:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b602:	69e2      	ldr	r2, [r4, #28]
9000b604:	440a      	add	r2, r1
9000b606:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b608:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b60a:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b60c:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b60e:	69e2      	ldr	r2, [r4, #28]
9000b610:	440a      	add	r2, r1
9000b612:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000b614:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b616:	3304      	adds	r3, #4
9000b618:	6263      	str	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000b61a:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b61c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000b61e:	429a      	cmp	r2, r3
9000b620:	f000 82ae 	beq.w	9000bb80 <JPEG_Process+0x7b4>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000b624:	6823      	ldr	r3, [r4, #0]
9000b626:	e6f2      	b.n	9000b40e <JPEG_Process+0x42>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
9000b628:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000b62a:	2a00      	cmp	r2, #0
9000b62c:	f000 810c 	beq.w	9000b848 <JPEG_Process+0x47c>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
9000b630:	6a21      	ldr	r1, [r4, #32]
9000b632:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
9000b634:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
9000b636:	f240 81a4 	bls.w	9000b982 <JPEG_Process+0x5b6>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
9000b63a:	1a52      	subs	r2, r2, r1
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000b63c:	6d61      	ldr	r1, [r4, #84]	; 0x54
9000b63e:	04cd      	lsls	r5, r1, #19
9000b640:	f53f aed9 	bmi.w	9000b3f6 <JPEG_Process+0x2a>
9000b644:	2a00      	cmp	r2, #0
9000b646:	f43f aed6 	beq.w	9000b3f6 <JPEG_Process+0x2a>
    if (nb_words >= nbRequestWords)
9000b64a:	2a1f      	cmp	r2, #31
    nb_words = nb_bytes / 4UL;
9000b64c:	ea4f 0192 	mov.w	r1, r2, lsr #2
    if (nb_words >= nbRequestWords)
9000b650:	f240 8203 	bls.w	9000ba5a <JPEG_Process+0x68e>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b654:	69a2      	ldr	r2, [r4, #24]
        input_count = hjpeg->JpegInCount;
9000b656:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b658:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b65a:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b65c:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b65e:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b660:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000b662:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b664:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000b668:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b66a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b66e:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000b670:	6a21      	ldr	r1, [r4, #32]
9000b672:	3104      	adds	r1, #4
9000b674:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000b676:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b678:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b67a:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b67c:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b67e:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b680:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000b682:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b684:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000b688:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b68a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b68e:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000b690:	6a21      	ldr	r1, [r4, #32]
9000b692:	3104      	adds	r1, #4
9000b694:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000b696:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b698:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b69a:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b69c:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b69e:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b6a0:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000b6a2:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b6a4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000b6a8:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b6aa:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b6ae:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000b6b0:	6a21      	ldr	r1, [r4, #32]
9000b6b2:	3104      	adds	r1, #4
9000b6b4:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000b6b6:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b6b8:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b6ba:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b6bc:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b6be:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b6c0:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000b6c2:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b6c4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000b6c8:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b6ca:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b6ce:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000b6d0:	6a21      	ldr	r1, [r4, #32]
9000b6d2:	3104      	adds	r1, #4
9000b6d4:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000b6d6:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b6d8:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b6da:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b6dc:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b6de:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b6e0:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000b6e2:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b6e4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000b6e8:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b6ea:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b6ee:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000b6f0:	6a21      	ldr	r1, [r4, #32]
9000b6f2:	3104      	adds	r1, #4
9000b6f4:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000b6f6:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b6f8:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b6fa:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b6fc:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b6fe:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b700:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000b702:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b704:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000b708:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b70a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b70e:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000b710:	6a21      	ldr	r1, [r4, #32]
9000b712:	3104      	adds	r1, #4
9000b714:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000b716:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b718:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b71a:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b71c:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b71e:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b720:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000b722:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b724:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000b728:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b72a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b72e:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000b730:	6a21      	ldr	r1, [r4, #32]
9000b732:	3104      	adds	r1, #4
9000b734:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000b736:	6a20      	ldr	r0, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b738:	1881      	adds	r1, r0, r2
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b73a:	5c85      	ldrb	r5, [r0, r2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b73c:	788a      	ldrb	r2, [r1, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000b73e:	78c8      	ldrb	r0, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b740:	0412      	lsls	r2, r2, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000b742:	7849      	ldrb	r1, [r1, #1]
9000b744:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
9000b748:	432a      	orrs	r2, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000b74a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b74e:	641a      	str	r2, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000b750:	6a22      	ldr	r2, [r4, #32]
9000b752:	3204      	adds	r2, #4
9000b754:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
9000b756:	e64e      	b.n	9000b3f6 <JPEG_Process+0x2a>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
9000b758:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000b75a:	2a00      	cmp	r2, #0
9000b75c:	d074      	beq.n	9000b848 <JPEG_Process+0x47c>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
9000b75e:	6a21      	ldr	r1, [r4, #32]
9000b760:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
9000b762:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
9000b764:	f200 8164 	bhi.w	9000ba30 <JPEG_Process+0x664>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
9000b768:	428a      	cmp	r2, r1
9000b76a:	f040 810c 	bne.w	9000b986 <JPEG_Process+0x5ba>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
9000b76e:	6a21      	ldr	r1, [r4, #32]
9000b770:	4620      	mov	r0, r4
9000b772:	f7f6 f80b 	bl	9000178c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
9000b776:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000b778:	2a04      	cmp	r2, #4
9000b77a:	d902      	bls.n	9000b782 <JPEG_Process+0x3b6>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
9000b77c:	f022 0203 	bic.w	r2, r2, #3
9000b780:	62a2      	str	r2, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
9000b782:	2100      	movs	r1, #0
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000b784:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
9000b786:	6221      	str	r1, [r4, #32]
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000b788:	6d61      	ldr	r1, [r4, #84]	; 0x54
9000b78a:	04c9      	lsls	r1, r1, #19
9000b78c:	f53f ae33 	bmi.w	9000b3f6 <JPEG_Process+0x2a>
9000b790:	2a00      	cmp	r2, #0
9000b792:	f43f ae30 	beq.w	9000b3f6 <JPEG_Process+0x2a>
    if (nb_words >= nbRequestWords)
9000b796:	0891      	lsrs	r1, r2, #2
9000b798:	f040 8203 	bne.w	9000bba2 <JPEG_Process+0x7d6>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000b79c:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000b79e:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
9000b7a0:	6a21      	ldr	r1, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000b7a2:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
9000b7a4:	f101 0101 	add.w	r1, r1, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000b7a8:	5c28      	ldrb	r0, [r5, r0]
          hjpeg->JpegInCount++;
9000b7aa:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000b7ac:	d010      	beq.n	9000b7d0 <JPEG_Process+0x404>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000b7ae:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000b7b0:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000b7b2:	5c69      	ldrb	r1, [r5, r1]
9000b7b4:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
          hjpeg->JpegInCount++;
9000b7b8:	6a21      	ldr	r1, [r4, #32]
9000b7ba:	f101 0101 	add.w	r1, r1, #1
9000b7be:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000b7c0:	d106      	bne.n	9000b7d0 <JPEG_Process+0x404>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000b7c2:	6a22      	ldr	r2, [r4, #32]
9000b7c4:	5ca9      	ldrb	r1, [r5, r2]
          hjpeg->JpegInCount++;
9000b7c6:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000b7c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
          hjpeg->JpegInCount++;
9000b7cc:	3201      	adds	r2, #1
9000b7ce:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
9000b7d0:	6418      	str	r0, [r3, #64]	; 0x40
9000b7d2:	e610      	b.n	9000b3f6 <JPEG_Process+0x2a>
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
9000b7d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b7d6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
9000b7d8:	3204      	adds	r2, #4
9000b7da:	4295      	cmp	r5, r2
9000b7dc:	f0c0 80d5 	bcc.w	9000b98a <JPEG_Process+0x5be>
      dataword = hjpeg->Instance->DOR;
9000b7e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b7e2:	69e1      	ldr	r1, [r4, #28]
9000b7e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b7e6:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000b7e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b7ea:	69e2      	ldr	r2, [r4, #28]
9000b7ec:	440a      	add	r2, r1
9000b7ee:	0a19      	lsrs	r1, r3, #8
9000b7f0:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b7f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b7f4:	69e2      	ldr	r2, [r4, #28]
9000b7f6:	440a      	add	r2, r1
9000b7f8:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b7fa:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b7fc:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b7fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b800:	69e2      	ldr	r2, [r4, #28]
9000b802:	440a      	add	r2, r1
9000b804:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000b806:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000b808:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      hjpeg->JpegOutCount += 4UL;
9000b80a:	3304      	adds	r3, #4
9000b80c:	6263      	str	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000b80e:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b810:	429a      	cmp	r2, r3
9000b812:	f47f af07 	bne.w	9000b624 <JPEG_Process+0x258>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b816:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b818:	4620      	mov	r0, r4
9000b81a:	69e1      	ldr	r1, [r4, #28]
9000b81c:	f7f5 ffd6 	bl	900017cc <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000b820:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000b822:	6266      	str	r6, [r4, #36]	; 0x24
9000b824:	e5f3      	b.n	9000b40e <JPEG_Process+0x42>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000b826:	f7f6 f81b 	bl	90001860 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
9000b82a:	4628      	mov	r0, r5
9000b82c:	e5f5      	b.n	9000b41a <JPEG_Process+0x4e>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000b82e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b830:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000b834:	631a      	str	r2, [r3, #48]	; 0x30
9000b836:	e614      	b.n	9000b462 <JPEG_Process+0x96>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b838:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b83a:	4620      	mov	r0, r4
9000b83c:	69e1      	ldr	r1, [r4, #28]
9000b83e:	f7f5 ffc5 	bl	900017cc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000b842:	2300      	movs	r3, #0
9000b844:	6263      	str	r3, [r4, #36]	; 0x24
9000b846:	e614      	b.n	9000b472 <JPEG_Process+0xa6>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000b848:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000b84a:	f002 020c 	and.w	r2, r2, #12
9000b84e:	2a0c      	cmp	r2, #12
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000b850:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000b852:	f000 80fd 	beq.w	9000ba50 <JPEG_Process+0x684>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000b856:	f002 020c 	and.w	r2, r2, #12
9000b85a:	2a08      	cmp	r2, #8
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000b85c:	6d62      	ldr	r2, [r4, #84]	; 0x54
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000b85e:	f47f adca 	bne.w	9000b3f6 <JPEG_Process+0x2a>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000b862:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
9000b866:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
9000b868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b86a:	f022 0206 	bic.w	r2, r2, #6
9000b86e:	631a      	str	r2, [r3, #48]	; 0x30
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000b870:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000b872:	e5c0      	b.n	9000b3f6 <JPEG_Process+0x2a>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
9000b874:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b876:	4296      	cmp	r6, r2
9000b878:	f67f adc9 	bls.w	9000b40e <JPEG_Process+0x42>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
9000b87c:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000b87e:	1a30      	subs	r0, r6, r0
    for (index = 0; index < nb_words; index++)
9000b880:	0880      	lsrs	r0, r0, #2
9000b882:	d020      	beq.n	9000b8c6 <JPEG_Process+0x4fa>
9000b884:	4629      	mov	r1, r5
9000b886:	e000      	b.n	9000b88a <JPEG_Process+0x4be>
      dataword = hjpeg->Instance->DOR;
9000b888:	6823      	ldr	r3, [r4, #0]
9000b88a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nb_words; index++)
9000b88c:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b88e:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b890:	69e6      	ldr	r6, [r4, #28]
    for (index = 0; index < nb_words; index++)
9000b892:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b894:	54b3      	strb	r3, [r6, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000b896:	6a66      	ldr	r6, [r4, #36]	; 0x24
9000b898:	69e2      	ldr	r2, [r4, #28]
9000b89a:	4432      	add	r2, r6
9000b89c:	ea4f 2613 	mov.w	r6, r3, lsr #8
9000b8a0:	7056      	strb	r6, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b8a2:	6a66      	ldr	r6, [r4, #36]	; 0x24
9000b8a4:	69e2      	ldr	r2, [r4, #28]
9000b8a6:	4432      	add	r2, r6
9000b8a8:	ea4f 4613 	mov.w	r6, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b8ac:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b8b0:	7096      	strb	r6, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b8b2:	6a66      	ldr	r6, [r4, #36]	; 0x24
9000b8b4:	69e2      	ldr	r2, [r4, #28]
9000b8b6:	4432      	add	r2, r6
9000b8b8:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000b8ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b8bc:	f103 0304 	add.w	r3, r3, #4
9000b8c0:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
9000b8c2:	d1e1      	bne.n	9000b888 <JPEG_Process+0x4bc>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000b8c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9000b8c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b8c8:	42b3      	cmp	r3, r6
9000b8ca:	f000 8161 	beq.w	9000bb90 <JPEG_Process+0x7c4>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
9000b8ce:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000b8d2:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
9000b8d4:	ebb6 0008 	subs.w	r0, r6, r8
      dataword = hjpeg->Instance->DOR;
9000b8d8:	6c5f      	ldr	r7, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
9000b8da:	d00e      	beq.n	9000b8fa <JPEG_Process+0x52e>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000b8dc:	f005 0303 	and.w	r3, r5, #3
9000b8e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b8e2:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
9000b8e4:	3501      	adds	r5, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000b8e6:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
9000b8e8:	42a8      	cmp	r0, r5
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000b8ea:	fa27 f303 	lsr.w	r3, r7, r3
9000b8ee:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
9000b8f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b8f2:	f103 0301 	add.w	r3, r3, #1
9000b8f6:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
9000b8f8:	d1f0      	bne.n	9000b8dc <JPEG_Process+0x510>
      nb_bytes = 4UL - nb_bytes;
9000b8fa:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b8fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b900:	69e1      	ldr	r1, [r4, #28]
9000b902:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
9000b904:	eba8 0806 	sub.w	r8, r8, r6
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b908:	f7f5 ff60 	bl	900017cc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000b90c:	2300      	movs	r3, #0
      for (index = nb_bytes; index < 4UL; index++)
9000b90e:	f1b8 0f03 	cmp.w	r8, #3
      hjpeg->JpegOutCount = 0;
9000b912:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000b914:	f63f ae86 	bhi.w	9000b624 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000b918:	ea4f 03c8 	mov.w	r3, r8, lsl #3
9000b91c:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b91e:	69e1      	ldr	r1, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
9000b920:	f1b8 0f03 	cmp.w	r8, #3
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000b924:	fa27 f003 	lsr.w	r0, r7, r3
9000b928:	5488      	strb	r0, [r1, r2]
        hjpeg->JpegOutCount++;
9000b92a:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b92c:	f102 0201 	add.w	r2, r2, #1
9000b930:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000b932:	f43f ae77 	beq.w	9000b624 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000b936:	f103 0208 	add.w	r2, r3, #8
9000b93a:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b93c:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
9000b93e:	f1b8 0f02 	cmp.w	r8, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000b942:	fa27 f202 	lsr.w	r2, r7, r2
9000b946:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
9000b948:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b94a:	f102 0201 	add.w	r2, r2, #1
9000b94e:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000b950:	f108 0202 	add.w	r2, r8, #2
9000b954:	f43f ae66 	beq.w	9000b624 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000b958:	3310      	adds	r3, #16
9000b95a:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b95c:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
9000b95e:	2a02      	cmp	r2, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000b960:	fa27 f303 	lsr.w	r3, r7, r3
9000b964:	5443      	strb	r3, [r0, r1]
        hjpeg->JpegOutCount++;
9000b966:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b968:	f103 0301 	add.w	r3, r3, #1
9000b96c:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000b96e:	f47f ae59 	bne.w	9000b624 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000b972:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b974:	0e3f      	lsrs	r7, r7, #24
9000b976:	69e2      	ldr	r2, [r4, #28]
9000b978:	54d7      	strb	r7, [r2, r3]
        hjpeg->JpegOutCount++;
9000b97a:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b97c:	3301      	adds	r3, #1
9000b97e:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000b980:	e650      	b.n	9000b624 <JPEG_Process+0x258>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
9000b982:	428a      	cmp	r2, r1
9000b984:	d056      	beq.n	9000ba34 <JPEG_Process+0x668>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000b986:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000b988:	e535      	b.n	9000b3f6 <JPEG_Process+0x2a>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
9000b98a:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b98c:	4295      	cmp	r5, r2
9000b98e:	f67f ad3e 	bls.w	9000b40e <JPEG_Process+0x42>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
9000b992:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000b994:	1a28      	subs	r0, r5, r0
    for (index = 0; index < nb_words; index++)
9000b996:	0880      	lsrs	r0, r0, #2
9000b998:	d020      	beq.n	9000b9dc <JPEG_Process+0x610>
9000b99a:	4631      	mov	r1, r6
9000b99c:	e000      	b.n	9000b9a0 <JPEG_Process+0x5d4>
      dataword = hjpeg->Instance->DOR;
9000b99e:	6823      	ldr	r3, [r4, #0]
9000b9a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nb_words; index++)
9000b9a2:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b9a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b9a6:	69e5      	ldr	r5, [r4, #28]
    for (index = 0; index < nb_words; index++)
9000b9a8:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000b9aa:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000b9ac:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000b9ae:	69e2      	ldr	r2, [r4, #28]
9000b9b0:	442a      	add	r2, r5
9000b9b2:	ea4f 2513 	mov.w	r5, r3, lsr #8
9000b9b6:	7055      	strb	r5, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b9b8:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000b9ba:	69e2      	ldr	r2, [r4, #28]
9000b9bc:	442a      	add	r2, r5
9000b9be:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b9c2:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000b9c6:	7095      	strb	r5, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000b9c8:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000b9ca:	69e2      	ldr	r2, [r4, #28]
9000b9cc:	442a      	add	r2, r5
9000b9ce:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000b9d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b9d2:	f103 0304 	add.w	r3, r3, #4
9000b9d6:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
9000b9d8:	d1e1      	bne.n	9000b99e <JPEG_Process+0x5d2>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000b9da:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
9000b9dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b9de:	429d      	cmp	r5, r3
9000b9e0:	f000 80d6 	beq.w	9000bb90 <JPEG_Process+0x7c4>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
9000b9e4:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000b9e8:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
9000b9ea:	ebb5 0008 	subs.w	r0, r5, r8
      dataword = hjpeg->Instance->DOR;
9000b9ee:	6c5f      	ldr	r7, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
9000b9f0:	d00e      	beq.n	9000ba10 <JPEG_Process+0x644>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000b9f2:	f006 0303 	and.w	r3, r6, #3
9000b9f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b9f8:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
9000b9fa:	3601      	adds	r6, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000b9fc:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
9000b9fe:	42b0      	cmp	r0, r6
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000ba00:	fa27 f303 	lsr.w	r3, r7, r3
9000ba04:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
9000ba06:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000ba08:	f103 0301 	add.w	r3, r3, #1
9000ba0c:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
9000ba0e:	d1f0      	bne.n	9000b9f2 <JPEG_Process+0x626>
      nb_bytes = 4UL - nb_bytes;
9000ba10:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000ba14:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000ba16:	69e1      	ldr	r1, [r4, #28]
9000ba18:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
9000ba1a:	eba8 0805 	sub.w	r8, r8, r5
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000ba1e:	f7f5 fed5 	bl	900017cc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000ba22:	2300      	movs	r3, #0
      for (index = nb_bytes; index < 4UL; index++)
9000ba24:	f1b8 0f03 	cmp.w	r8, #3
      hjpeg->JpegOutCount = 0;
9000ba28:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000ba2a:	f67f af75 	bls.w	9000b918 <JPEG_Process+0x54c>
9000ba2e:	e5f9      	b.n	9000b624 <JPEG_Process+0x258>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
9000ba30:	1a52      	subs	r2, r2, r1
9000ba32:	e6a9      	b.n	9000b788 <JPEG_Process+0x3bc>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
9000ba34:	6a21      	ldr	r1, [r4, #32]
9000ba36:	4620      	mov	r0, r4
9000ba38:	f7f5 fea8 	bl	9000178c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
9000ba3c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000ba3e:	2a04      	cmp	r2, #4
9000ba40:	d902      	bls.n	9000ba48 <JPEG_Process+0x67c>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
9000ba42:	f022 0203 	bic.w	r2, r2, #3
9000ba46:	62a2      	str	r2, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
9000ba48:	2100      	movs	r1, #0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000ba4a:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
9000ba4c:	6221      	str	r1, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
9000ba4e:	e5f5      	b.n	9000b63c <JPEG_Process+0x270>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000ba50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
9000ba54:	6562      	str	r2, [r4, #84]	; 0x54
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000ba56:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000ba58:	e4cd      	b.n	9000b3f6 <JPEG_Process+0x2a>
      if (nb_words > 0UL)
9000ba5a:	2a03      	cmp	r2, #3
9000ba5c:	f240 80a4 	bls.w	9000bba8 <JPEG_Process+0x7dc>
        for (index = 0; index < nb_words; index++)
9000ba60:	2900      	cmp	r1, #0
9000ba62:	f43f acc8 	beq.w	9000b3f6 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000ba66:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000ba68:	2901      	cmp	r1, #1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000ba6a:	69a2      	ldr	r2, [r4, #24]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000ba6c:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000ba70:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000ba72:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000ba74:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000ba76:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000ba7a:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000ba7c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000ba80:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000ba84:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000ba88:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000ba8a:	6a20      	ldr	r0, [r4, #32]
9000ba8c:	f100 0004 	add.w	r0, r0, #4
9000ba90:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000ba92:	f43f acb0 	beq.w	9000b3f6 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000ba96:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000ba98:	2902      	cmp	r1, #2
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000ba9a:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000ba9e:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000baa0:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000baa2:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000baa4:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000baa8:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000baaa:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000baae:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bab2:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bab6:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000bab8:	6a20      	ldr	r0, [r4, #32]
9000baba:	f100 0004 	add.w	r0, r0, #4
9000babe:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000bac0:	f43f ac99 	beq.w	9000b3f6 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000bac4:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000bac6:	2903      	cmp	r1, #3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bac8:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bacc:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bace:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bad0:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bad2:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000bad6:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bad8:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000badc:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bae0:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bae4:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000bae6:	6a20      	ldr	r0, [r4, #32]
9000bae8:	f100 0004 	add.w	r0, r0, #4
9000baec:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000baee:	f43f ac82 	beq.w	9000b3f6 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000baf2:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000baf4:	2904      	cmp	r1, #4
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000baf6:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bafa:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bafc:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bafe:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bb00:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000bb04:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bb06:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000bb0a:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bb0e:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bb12:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000bb14:	6a20      	ldr	r0, [r4, #32]
9000bb16:	f100 0004 	add.w	r0, r0, #4
9000bb1a:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000bb1c:	f43f ac6b 	beq.w	9000b3f6 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000bb20:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000bb22:	2905      	cmp	r1, #5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bb24:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bb28:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bb2a:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bb2c:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bb2e:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000bb32:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bb34:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000bb38:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bb3c:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bb40:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000bb42:	6a20      	ldr	r0, [r4, #32]
9000bb44:	f100 0004 	add.w	r0, r0, #4
9000bb48:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000bb4a:	f43f ac54 	beq.w	9000b3f6 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000bb4e:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000bb50:	2907      	cmp	r1, #7
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bb52:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bb56:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bb58:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bb5a:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bb5c:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000bb60:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bb62:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000bb66:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bb6a:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bb6e:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000bb70:	6a20      	ldr	r0, [r4, #32]
9000bb72:	f100 0004 	add.w	r0, r0, #4
9000bb76:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000bb78:	f47f ac3d 	bne.w	9000b3f6 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000bb7c:	6a20      	ldr	r0, [r4, #32]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bb7e:	e5db      	b.n	9000b738 <JPEG_Process+0x36c>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000bb80:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bb82:	4620      	mov	r0, r4
9000bb84:	69e1      	ldr	r1, [r4, #28]
9000bb86:	f7f5 fe21 	bl	900017cc <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000bb8a:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000bb8c:	6265      	str	r5, [r4, #36]	; 0x24
9000bb8e:	e43e      	b.n	9000b40e <JPEG_Process+0x42>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000bb90:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bb92:	4620      	mov	r0, r4
9000bb94:	69e1      	ldr	r1, [r4, #28]
9000bb96:	f7f5 fe19 	bl	900017cc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000bb9a:	2200      	movs	r2, #0
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000bb9c:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000bb9e:	6262      	str	r2, [r4, #36]	; 0x24
9000bba0:	e435      	b.n	9000b40e <JPEG_Process+0x42>
        input_count = hjpeg->JpegInCount;
9000bba2:	6a22      	ldr	r2, [r4, #32]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bba4:	69a0      	ldr	r0, [r4, #24]
9000bba6:	e5c7      	b.n	9000b738 <JPEG_Process+0x36c>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bba8:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000bbaa:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
9000bbac:	6a20      	ldr	r0, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bbae:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
9000bbb0:	f100 0001 	add.w	r0, r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bbb4:	5c69      	ldrb	r1, [r5, r1]
          hjpeg->JpegInCount++;
9000bbb6:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000bbb8:	d010      	beq.n	9000bbdc <JPEG_Process+0x810>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bbba:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000bbbc:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bbbe:	5c28      	ldrb	r0, [r5, r0]
9000bbc0:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
          hjpeg->JpegInCount++;
9000bbc4:	6a20      	ldr	r0, [r4, #32]
9000bbc6:	f100 0001 	add.w	r0, r0, #1
9000bbca:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000bbcc:	d106      	bne.n	9000bbdc <JPEG_Process+0x810>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bbce:	6a22      	ldr	r2, [r4, #32]
9000bbd0:	5ca8      	ldrb	r0, [r5, r2]
          hjpeg->JpegInCount++;
9000bbd2:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bbd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
          hjpeg->JpegInCount++;
9000bbd8:	3201      	adds	r2, #1
9000bbda:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
9000bbdc:	6419      	str	r1, [r3, #64]	; 0x40
9000bbde:	e40a      	b.n	9000b3f6 <JPEG_Process+0x2a>

9000bbe0 <HAL_JPEG_IRQHandler>:
  switch (hjpeg->State)
9000bbe0:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
9000bbe4:	3b03      	subs	r3, #3
9000bbe6:	2b01      	cmp	r3, #1
9000bbe8:	d900      	bls.n	9000bbec <HAL_JPEG_IRQHandler+0xc>
9000bbea:	4770      	bx	lr
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000bbec:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000bbee:	f003 030c 	and.w	r3, r3, #12
9000bbf2:	2b08      	cmp	r3, #8
{
9000bbf4:	b530      	push	{r4, r5, lr}
9000bbf6:	4604      	mov	r4, r0
9000bbf8:	b083      	sub	sp, #12
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000bbfa:	d006      	beq.n	9000bc0a <HAL_JPEG_IRQHandler+0x2a>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000bbfc:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000bbfe:	f003 030c 	and.w	r3, r3, #12
9000bc02:	2b0c      	cmp	r3, #12
9000bc04:	d006      	beq.n	9000bc14 <HAL_JPEG_IRQHandler+0x34>
}
9000bc06:	b003      	add	sp, #12
9000bc08:	bd30      	pop	{r4, r5, pc}
9000bc0a:	b003      	add	sp, #12
9000bc0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        (void) JPEG_Process(hjpeg);
9000bc10:	f7ff bbdc 	b.w	9000b3cc <JPEG_Process>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000bc14:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000bc16:	f003 0303 	and.w	r3, r3, #3
9000bc1a:	2b02      	cmp	r3, #2
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000bc1c:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000bc1e:	d045      	beq.n	9000bcac <HAL_JPEG_IRQHandler+0xcc>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
9000bc20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000bc22:	0692      	lsls	r2, r2, #26
9000bc24:	d5ef      	bpl.n	9000bc06 <HAL_JPEG_IRQHandler+0x26>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
9000bc26:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
9000bc28:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
9000bc2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
9000bc2e:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000bc30:	681a      	ldr	r2, [r3, #0]
9000bc32:	f022 0201 	bic.w	r2, r2, #1
9000bc36:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000bc38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000bc3a:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000bc3e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000bc40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000bc42:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000bc46:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
9000bc48:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000bc4c:	2b02      	cmp	r3, #2
9000bc4e:	d052      	beq.n	9000bcf6 <HAL_JPEG_IRQHandler+0x116>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
9000bc50:	6b60      	ldr	r0, [r4, #52]	; 0x34
9000bc52:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000bc56:	2b02      	cmp	r3, #2
9000bc58:	d03f      	beq.n	9000bcda <HAL_JPEG_IRQHandler+0xfa>
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000bc5a:	6803      	ldr	r3, [r0, #0]
9000bc5c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000bc5e:	695b      	ldr	r3, [r3, #20]
9000bc60:	f3c3 0310 	ubfx	r3, r3, #0, #17
9000bc64:	1ad3      	subs	r3, r2, r3
9000bc66:	6263      	str	r3, [r4, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
9000bc68:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bc6a:	429a      	cmp	r2, r3
9000bc6c:	d046      	beq.n	9000bcfc <HAL_JPEG_IRQHandler+0x11c>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
9000bc6e:	6822      	ldr	r2, [r4, #0]
9000bc70:	6b55      	ldr	r5, [r2, #52]	; 0x34
9000bc72:	f015 0510 	ands.w	r5, r5, #16
9000bc76:	d135      	bne.n	9000bce4 <HAL_JPEG_IRQHandler+0x104>
    if (hjpeg->JpegOutCount > 0UL)
9000bc78:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bc7a:	2b00      	cmp	r3, #0
9000bc7c:	d149      	bne.n	9000bd12 <HAL_JPEG_IRQHandler+0x132>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000bc7e:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
9000bc80:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
9000bc82:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000bc84:	f023 0301 	bic.w	r3, r3, #1
9000bc88:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
9000bc8a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000bc8c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000bc8e:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
9000bc92:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000bc96:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000bc9a:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000bc9c:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000bc9e:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000bca0:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000bca4:	d032      	beq.n	9000bd0c <HAL_JPEG_IRQHandler+0x12c>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
9000bca6:	f7ff f9c9 	bl	9000b03c <HAL_JPEG_EncodeCpltCallback>
9000bcaa:	e7ac      	b.n	9000bc06 <HAL_JPEG_IRQHandler+0x26>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000bcac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000bcae:	0651      	lsls	r1, r2, #25
9000bcb0:	d5b6      	bpl.n	9000bc20 <HAL_JPEG_IRQHandler+0x40>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
9000bcb2:	1d01      	adds	r1, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
9000bcb4:	9101      	str	r1, [sp, #4]
9000bcb6:	f7fe ff33 	bl	9000ab20 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
9000bcba:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000bcbc:	9901      	ldr	r1, [sp, #4]
9000bcbe:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
9000bcc0:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000bcc2:	f7f5 fd11 	bl	900016e8 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
9000bcc6:	6823      	ldr	r3, [r4, #0]
9000bcc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000bcca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
9000bcce:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
9000bcd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000bcd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
9000bcd6:	639a      	str	r2, [r3, #56]	; 0x38
9000bcd8:	e7a2      	b.n	9000bc20 <HAL_JPEG_IRQHandler+0x40>
}
9000bcda:	b003      	add	sp, #12
9000bcdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
9000bce0:	f000 bb30 	b.w	9000c344 <HAL_MDMA_Abort_IT>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000bce4:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000bce6:	049b      	lsls	r3, r3, #18
9000bce8:	d48d      	bmi.n	9000bc06 <HAL_JPEG_IRQHandler+0x26>
    JPEG_DMA_PollResidualData(hjpeg);
9000bcea:	4620      	mov	r0, r4
}
9000bcec:	b003      	add	sp, #12
9000bcee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
9000bcf2:	f7ff ba0f 	b.w	9000b114 <JPEG_DMA_PollResidualData>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
9000bcf6:	f000 fb25 	bl	9000c344 <HAL_MDMA_Abort_IT>
9000bcfa:	e7a9      	b.n	9000bc50 <HAL_JPEG_IRQHandler+0x70>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000bcfc:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bcfe:	4620      	mov	r0, r4
9000bd00:	69e1      	ldr	r1, [r4, #28]
9000bd02:	f7f5 fd63 	bl	900017cc <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
9000bd06:	2300      	movs	r3, #0
9000bd08:	6263      	str	r3, [r4, #36]	; 0x24
9000bd0a:	e7b0      	b.n	9000bc6e <HAL_JPEG_IRQHandler+0x8e>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000bd0c:	f7f5 fda8 	bl	90001860 <HAL_JPEG_DecodeCpltCallback>
9000bd10:	e779      	b.n	9000bc06 <HAL_JPEG_IRQHandler+0x26>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000bd12:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bd14:	4620      	mov	r0, r4
9000bd16:	69e1      	ldr	r1, [r4, #28]
9000bd18:	f7f5 fd58 	bl	900017cc <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000bd1c:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000bd1e:	6265      	str	r5, [r4, #36]	; 0x24
9000bd20:	e7ad      	b.n	9000bc7e <HAL_JPEG_IRQHandler+0x9e>
9000bd22:	bf00      	nop

9000bd24 <HAL_LTDC_Init>:
{
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
9000bd24:	2800      	cmp	r0, #0
9000bd26:	d067      	beq.n	9000bdf8 <HAL_LTDC_Init+0xd4>
{
9000bd28:	b538      	push	{r3, r4, r5, lr}
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
9000bd2a:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
9000bd2e:	4604      	mov	r4, r0
9000bd30:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000bd34:	2b00      	cmp	r3, #0
9000bd36:	d05a      	beq.n	9000bdee <HAL_LTDC_Init+0xca>
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000bd38:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000bd3a:	2102      	movs	r1, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000bd3c:	e9d4 3200 	ldrd	r3, r2, [r4]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000bd40:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000bd44:	4302      	orrs	r2, r0
9000bd46:	68e1      	ldr	r1, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000bd48:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000bd4a:	430a      	orrs	r2, r1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
9000bd4c:	6921      	ldr	r1, [r4, #16]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000bd4e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
9000bd52:	430a      	orrs	r2, r1

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
9000bd54:	4929      	ldr	r1, [pc, #164]	; (9000bdfc <HAL_LTDC_Init+0xd8>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000bd56:	6198      	str	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000bd58:	6998      	ldr	r0, [r3, #24]
9000bd5a:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
9000bd5c:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000bd5e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
9000bd60:	689a      	ldr	r2, [r3, #8]
9000bd62:	400a      	ands	r2, r1
9000bd64:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
9000bd66:	689a      	ldr	r2, [r3, #8]
9000bd68:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000bd6c:	69a0      	ldr	r0, [r4, #24]
9000bd6e:	4302      	orrs	r2, r0

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
9000bd70:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
9000bd72:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
9000bd74:	68da      	ldr	r2, [r3, #12]
9000bd76:	400a      	ands	r2, r1
9000bd78:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
9000bd7a:	68da      	ldr	r2, [r3, #12]
9000bd7c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000bd80:	6a20      	ldr	r0, [r4, #32]
9000bd82:	4302      	orrs	r2, r0

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
9000bd84:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
9000bd86:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
9000bd88:	691a      	ldr	r2, [r3, #16]
9000bd8a:	400a      	ands	r2, r1
9000bd8c:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
9000bd8e:	691a      	ldr	r2, [r3, #16]
9000bd90:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000bd94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
9000bd96:	4302      	orrs	r2, r0

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  tmp = (hltdc->Init.TotalWidth << 16U);
9000bd98:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
9000bd9a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
9000bd9c:	695a      	ldr	r2, [r3, #20]
9000bd9e:	400a      	ands	r2, r1
9000bda0:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
9000bda2:	695a      	ldr	r2, [r3, #20]
9000bda4:	6b21      	ldr	r1, [r4, #48]	; 0x30
9000bda6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000bdaa:	430a      	orrs	r2, r1
9000bdac:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000bdae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
9000bdb0:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000bdb4:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
9000bdb8:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000bdbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
9000bdbe:	6add      	ldr	r5, [r3, #44]	; 0x2c
9000bdc0:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
9000bdc4:	432a      	orrs	r2, r5
9000bdc6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
9000bdca:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
9000bdcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
9000bdd0:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
9000bdd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000bdd4:	f042 0206 	orr.w	r2, r2, #6
9000bdd8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
9000bdda:	699a      	ldr	r2, [r3, #24]
9000bddc:	f042 0201 	orr.w	r2, r2, #1
9000bde0:	619a      	str	r2, [r3, #24]

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
9000bde2:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
9000bde4:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
9000bde8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  return HAL_OK;
}
9000bdec:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
9000bdee:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
9000bdf2:	f7f8 fde5 	bl	900049c0 <HAL_LTDC_MspInit>
9000bdf6:	e79f      	b.n	9000bd38 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
9000bdf8:	2001      	movs	r0, #1
}
9000bdfa:	4770      	bx	lr
9000bdfc:	f000f800 	.word	0xf000f800

9000be00 <HAL_LTDC_ErrorCallback>:
9000be00:	4770      	bx	lr
9000be02:	bf00      	nop

9000be04 <HAL_LTDC_ReloadEventCallback>:
9000be04:	4770      	bx	lr
9000be06:	bf00      	nop

9000be08 <HAL_LTDC_IRQHandler>:
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
9000be08:	6803      	ldr	r3, [r0, #0]
{
9000be0a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
9000be0c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
{
9000be0e:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
9000be10:	6b5e      	ldr	r6, [r3, #52]	; 0x34

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
9000be12:	076a      	lsls	r2, r5, #29
9000be14:	d501      	bpl.n	9000be1a <HAL_LTDC_IRQHandler+0x12>
9000be16:	0771      	lsls	r1, r6, #29
9000be18:	d41d      	bmi.n	9000be56 <HAL_LTDC_IRQHandler+0x4e>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
9000be1a:	07aa      	lsls	r2, r5, #30
9000be1c:	d501      	bpl.n	9000be22 <HAL_LTDC_IRQHandler+0x1a>
9000be1e:	07b3      	lsls	r3, r6, #30
9000be20:	d42d      	bmi.n	9000be7e <HAL_LTDC_IRQHandler+0x76>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
9000be22:	07e8      	lsls	r0, r5, #31
9000be24:	d501      	bpl.n	9000be2a <HAL_LTDC_IRQHandler+0x22>
9000be26:	07f1      	lsls	r1, r6, #31
9000be28:	d440      	bmi.n	9000beac <HAL_LTDC_IRQHandler+0xa4>
    HAL_LTDC_LineEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
9000be2a:	072a      	lsls	r2, r5, #28
9000be2c:	d501      	bpl.n	9000be32 <HAL_LTDC_IRQHandler+0x2a>
9000be2e:	0733      	lsls	r3, r6, #28
9000be30:	d400      	bmi.n	9000be34 <HAL_LTDC_IRQHandler+0x2c>
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
9000be32:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
9000be34:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
9000be36:	2008      	movs	r0, #8
    hltdc->State = HAL_LTDC_STATE_READY;
9000be38:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
9000be3a:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
9000be3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000be3e:	f022 0208 	bic.w	r2, r2, #8
9000be42:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
9000be44:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ReloadEventCallback(hltdc);
9000be46:	4620      	mov	r0, r4
    hltdc->State = HAL_LTDC_STATE_READY;
9000be48:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000be4c:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
9000be50:	f7ff ffd8 	bl	9000be04 <HAL_LTDC_ReloadEventCallback>
}
9000be54:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
9000be56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000be58:	f022 0204 	bic.w	r2, r2, #4
9000be5c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
9000be5e:	2204      	movs	r2, #4
9000be60:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
9000be62:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
9000be66:	f043 0301 	orr.w	r3, r3, #1
9000be6a:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
9000be6e:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
9000be70:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000be74:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
9000be78:	f7ff ffc2 	bl	9000be00 <HAL_LTDC_ErrorCallback>
9000be7c:	e7cd      	b.n	9000be1a <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
9000be7e:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
9000be80:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
9000be82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000be84:	f022 0202 	bic.w	r2, r2, #2
9000be88:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
9000be8a:	2202      	movs	r2, #2
9000be8c:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_ERROR;
9000be8e:	2204      	movs	r2, #4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
9000be90:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
9000be94:	f043 0302 	orr.w	r3, r3, #2
9000be98:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
9000be9c:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
9000be9e:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000bea2:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
9000bea6:	f7ff ffab 	bl	9000be00 <HAL_LTDC_ErrorCallback>
9000beaa:	e7ba      	b.n	9000be22 <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000beac:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
9000beae:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000beb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000beb2:	f022 0201 	bic.w	r2, r2, #1
9000beb6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
9000beb8:	2201      	movs	r2, #1
9000beba:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
9000bebc:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
9000bebe:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000bec2:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
9000bec6:	f7f6 fcff 	bl	900028c8 <HAL_LTDC_LineEventCallback>
9000beca:	e7ae      	b.n	9000be2a <HAL_LTDC_IRQHandler+0x22>

9000becc <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
9000becc:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
9000bed0:	2b01      	cmp	r3, #1
9000bed2:	f000 80c0 	beq.w	9000c056 <HAL_LTDC_ConfigLayer+0x18a>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000bed6:	2302      	movs	r3, #2
{
9000bed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000bedc:	f04f 0e34 	mov.w	lr, #52	; 0x34
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000bee0:	f8d0 9000 	ldr.w	r9, [r0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000bee4:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
{
9000bee8:	b083      	sub	sp, #12
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000beea:	fb0e 0e02 	mla	lr, lr, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000beee:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000bef0:	f8d9 300c 	ldr.w	r3, [r9, #12]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000bef4:	460c      	mov	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000bef6:	f102 0684 	add.w	r6, r2, #132	; 0x84
9000befa:	460d      	mov	r5, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000befc:	f3c3 4b0b 	ubfx	fp, r3, #16, #12
9000bf00:	4680      	mov	r8, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000bf02:	eb09 0c06 	add.w	ip, r9, r6
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000bf06:	f10e 0e38 	add.w	lr, lr, #56	; 0x38
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000bf0a:	f8df a160 	ldr.w	sl, [pc, #352]	; 9000c06c <HAL_LTDC_ConfigLayer+0x1a0>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000bf0e:	f8dc 3004 	ldr.w	r3, [ip, #4]
9000bf12:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
9000bf16:	9301      	str	r3, [sp, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000bf18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
9000bf1a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000bf1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000bf20:	686f      	ldr	r7, [r5, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000bf22:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000bf26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
9000bf28:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000bf2c:	6823      	ldr	r3, [r4, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000bf2e:	44bb      	add	fp, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000bf30:	f8ce 3000 	str.w	r3, [lr]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000bf34:	9b01      	ldr	r3, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000bf36:	682a      	ldr	r2, [r5, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000bf38:	f8cc 3004 	str.w	r3, [ip, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000bf3c:	f8d9 300c 	ldr.w	r3, [r9, #12]
9000bf40:	1c51      	adds	r1, r2, #1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000bf42:	68e8      	ldr	r0, [r5, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000bf44:	f3c3 430b 	ubfx	r3, r3, #16, #12
  tmp2 = (pLayerCfg->Alpha0 << 24U);
9000bf48:	f8d5 e018 	ldr.w	lr, [r5, #24]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000bf4c:	440b      	add	r3, r1
9000bf4e:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000bf52:	f8cc 3004 	str.w	r3, [ip, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000bf56:	f8d9 100c 	ldr.w	r1, [r9, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000bf5a:	f8dc 3008 	ldr.w	r3, [ip, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000bf5e:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000bf62:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000bf66:	4401      	add	r1, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000bf68:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
9000bf6c:	68ab      	ldr	r3, [r5, #8]
9000bf6e:	f8d9 000c 	ldr.w	r0, [r9, #12]
9000bf72:	3301      	adds	r3, #1
9000bf74:	f3c0 000a 	ubfx	r0, r0, #0, #11
9000bf78:	4403      	add	r3, r0
9000bf7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
9000bf7e:	6929      	ldr	r1, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
9000bf80:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
9000bf84:	f8dc 3010 	ldr.w	r3, [ip, #16]
9000bf88:	f023 0307 	bic.w	r3, r3, #7
9000bf8c:	f8cc 3010 	str.w	r3, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
9000bf90:	f8cc 1010 	str.w	r1, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
9000bf94:	f8dc 3018 	ldr.w	r3, [ip, #24]
9000bf98:	2300      	movs	r3, #0
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
9000bf9a:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
9000bf9e:	f895 4031 	ldrb.w	r4, [r5, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
9000bfa2:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
9000bfa6:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
9000bfaa:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
9000bfae:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
9000bfb2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
9000bfb6:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
9000bfba:	f8dc 3014 	ldr.w	r3, [ip, #20]
9000bfbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
9000bfc2:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
9000bfc6:	696b      	ldr	r3, [r5, #20]
9000bfc8:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000bfcc:	f8dc 001c 	ldr.w	r0, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000bfd0:	69eb      	ldr	r3, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000bfd2:	ea00 0a0a 	and.w	sl, r0, sl
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000bfd6:	6a28      	ldr	r0, [r5, #32]
9000bfd8:	4303      	orrs	r3, r0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000bfda:	f8cc a01c 	str.w	sl, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000bfde:	f8cc 301c 	str.w	r3, [ip, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
9000bfe2:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
9000bfe6:	2300      	movs	r3, #0
9000bfe8:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
9000bfec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
9000bfee:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
9000bff2:	bb59      	cbnz	r1, 9000c04c <HAL_LTDC_ConfigLayer+0x180>
  {
    tmp = 4U;
9000bff4:	2304      	movs	r3, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000bff6:	1abf      	subs	r7, r7, r2
9000bff8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
9000bffa:	fb03 f707 	mul.w	r7, r3, r7
9000bffe:	fb02 f303 	mul.w	r3, r2, r3
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
9000c002:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000c004:	3707      	adds	r7, #7
9000c006:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
9000c00a:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
9000c00e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
9000c012:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000c016:	f8cc 702c 	str.w	r7, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
9000c01a:	4b12      	ldr	r3, [pc, #72]	; (9000c064 <HAL_LTDC_ConfigLayer+0x198>)
9000c01c:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
9000c020:	400b      	ands	r3, r1
9000c022:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
9000c026:	f8cc 2030 	str.w	r2, [ip, #48]	; 0x30
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000c02a:	2201      	movs	r2, #1

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
9000c02c:	f859 3006 	ldr.w	r3, [r9, r6]
9000c030:	4313      	orrs	r3, r2
9000c032:	f849 3006 	str.w	r3, [r9, r6]
  __HAL_UNLOCK(hltdc);
9000c036:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000c038:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
  return HAL_OK;
9000c03c:	4618      	mov	r0, r3
  hltdc->State  = HAL_LTDC_STATE_READY;
9000c03e:	f888 20a1 	strb.w	r2, [r8, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
9000c042:	f888 30a0 	strb.w	r3, [r8, #160]	; 0xa0
}
9000c046:	b003      	add	sp, #12
9000c048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
9000c04c:	3901      	subs	r1, #1
9000c04e:	2906      	cmp	r1, #6
9000c050:	d903      	bls.n	9000c05a <HAL_LTDC_ConfigLayer+0x18e>
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
9000c052:	2301      	movs	r3, #1
9000c054:	e7cf      	b.n	9000bff6 <HAL_LTDC_ConfigLayer+0x12a>
  __HAL_LOCK(hltdc);
9000c056:	2002      	movs	r0, #2
}
9000c058:	4770      	bx	lr
9000c05a:	4b03      	ldr	r3, [pc, #12]	; (9000c068 <HAL_LTDC_ConfigLayer+0x19c>)
9000c05c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
9000c060:	e7c9      	b.n	9000bff6 <HAL_LTDC_ConfigLayer+0x12a>
9000c062:	bf00      	nop
9000c064:	fffff800 	.word	0xfffff800
9000c068:	9002b498 	.word	0x9002b498
9000c06c:	fffff8f8 	.word	0xfffff8f8

9000c070 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
9000c070:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
9000c074:	2a01      	cmp	r2, #1
9000c076:	d019      	beq.n	9000c0ac <HAL_LTDC_ProgramLineEvent+0x3c>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000c078:	6802      	ldr	r2, [r0, #0]
9000c07a:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000c07c:	2002      	movs	r0, #2
  __HAL_UNLOCK(hltdc);
9000c07e:	f04f 0c00 	mov.w	ip, #0
{
9000c082:	b410      	push	{r4}
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000c084:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000c088:	6b50      	ldr	r0, [r2, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
9000c08a:	4c09      	ldr	r4, [pc, #36]	; (9000c0b0 <HAL_LTDC_ProgramLineEvent+0x40>)
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000c08c:	f020 0001 	bic.w	r0, r0, #1
9000c090:	6350      	str	r0, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
9000c092:	2001      	movs	r0, #1
  LTDC->LIPCR = (uint32_t)Line;
9000c094:	6421      	str	r1, [r4, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
9000c096:	6b51      	ldr	r1, [r2, #52]	; 0x34
9000c098:	4301      	orrs	r1, r0
9000c09a:	6351      	str	r1, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
9000c09c:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  return HAL_OK;
9000c0a0:	4660      	mov	r0, ip
  __HAL_UNLOCK(hltdc);
9000c0a2:	f883 c0a0 	strb.w	ip, [r3, #160]	; 0xa0
}
9000c0a6:	f85d 4b04 	ldr.w	r4, [sp], #4
9000c0aa:	4770      	bx	lr
  __HAL_LOCK(hltdc);
9000c0ac:	2002      	movs	r0, #2
}
9000c0ae:	4770      	bx	lr
9000c0b0:	50001000 	.word	0x50001000

9000c0b4 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
9000c0b4:	b538      	push	{r3, r4, r5, lr}
9000c0b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
9000c0b8:	f7fd f984 	bl	900093c4 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
9000c0bc:	2c00      	cmp	r4, #0
9000c0be:	d05a      	beq.n	9000c176 <HAL_MDMA_Init+0xc2>

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
9000c0c0:	6823      	ldr	r3, [r4, #0]
  hmdma->State = HAL_MDMA_STATE_BUSY;
9000c0c2:	2202      	movs	r2, #2
  __HAL_UNLOCK(hmdma);
9000c0c4:	2100      	movs	r1, #0
9000c0c6:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
9000c0c8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
9000c0cc:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
9000c0d0:	68da      	ldr	r2, [r3, #12]
9000c0d2:	f022 0201 	bic.w	r2, r2, #1
9000c0d6:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000c0d8:	e005      	b.n	9000c0e6 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
9000c0da:	f7fd f973 	bl	900093c4 <HAL_GetTick>
9000c0de:	1b43      	subs	r3, r0, r5
9000c0e0:	2b05      	cmp	r3, #5
9000c0e2:	d841      	bhi.n	9000c168 <HAL_MDMA_Init+0xb4>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000c0e4:	6823      	ldr	r3, [r4, #0]
9000c0e6:	68da      	ldr	r2, [r3, #12]
9000c0e8:	07d2      	lsls	r2, r2, #31
9000c0ea:	d4f6      	bmi.n	9000c0da <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
9000c0ec:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
9000c0f0:	69e0      	ldr	r0, [r4, #28]
9000c0f2:	432a      	orrs	r2, r5
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
9000c0f4:	68e1      	ldr	r1, [r4, #12]
9000c0f6:	6925      	ldr	r5, [r4, #16]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
9000c0f8:	4302      	orrs	r2, r0
9000c0fa:	6a20      	ldr	r0, [r4, #32]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
9000c0fc:	4329      	orrs	r1, r5
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
9000c0fe:	4302      	orrs	r2, r0
9000c100:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000c102:	4302      	orrs	r2, r0
9000c104:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
9000c106:	4302      	orrs	r2, r0
9000c108:	6b20      	ldr	r0, [r4, #48]	; 0x30
9000c10a:	4302      	orrs	r2, r0
9000c10c:	68a0      	ldr	r0, [r4, #8]
9000c10e:	4302      	orrs	r2, r0
9000c110:	6aa0      	ldr	r0, [r4, #40]	; 0x28
9000c112:	3801      	subs	r0, #1
9000c114:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000c118:	6860      	ldr	r0, [r4, #4]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
9000c11a:	60d9      	str	r1, [r3, #12]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000c11c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
9000c120:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000c122:	d103      	bne.n	9000c12c <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
9000c124:	691a      	ldr	r2, [r3, #16]
9000c126:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
9000c12a:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
9000c12c:	2100      	movs	r1, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
9000c12e:	6b62      	ldr	r2, [r4, #52]	; 0x34
9000c130:	428a      	cmp	r2, r1
  hmdma->Instance->CBNDTR = 0;
9000c132:	6159      	str	r1, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
9000c134:	db30      	blt.n	9000c198 <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
9000c136:	b292      	uxth	r2, r2
9000c138:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
9000c13a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000c13c:	2a00      	cmp	r2, #0
9000c13e:	db1c      	blt.n	9000c17a <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
9000c140:	6a19      	ldr	r1, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000c142:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
9000c146:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
9000c14a:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000c14c:	d021      	beq.n	9000c192 <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
9000c14e:	b2c0      	uxtb	r0, r0
9000c150:	6298      	str	r0, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
9000c152:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
9000c154:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
9000c156:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
9000c158:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000c15a:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
9000c15c:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
9000c15e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
9000c162:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
9000c166:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
9000c168:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000c16a:	2303      	movs	r3, #3
      return HAL_ERROR;
9000c16c:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
9000c16e:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000c170:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
9000c174:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
9000c176:	2001      	movs	r0, #1
}
9000c178:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
9000c17a:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
9000c17c:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000c17e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
9000c182:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
9000c186:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
9000c188:	6a19      	ldr	r1, [r3, #32]
9000c18a:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
9000c18e:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000c190:	d1dd      	bne.n	9000c14e <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
9000c192:	2200      	movs	r2, #0
9000c194:	629a      	str	r2, [r3, #40]	; 0x28
9000c196:	e7dc      	b.n	9000c152 <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
9000c198:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
9000c19a:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
9000c19c:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
9000c1a0:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
9000c1a2:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
9000c1a4:	621a      	str	r2, [r3, #32]
9000c1a6:	e7c8      	b.n	9000c13a <HAL_MDMA_Init+0x86>

9000c1a8 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
9000c1a8:	b1f8      	cbz	r0, 9000c1ea <HAL_MDMA_DeInit+0x42>
  __HAL_MDMA_DISABLE(hmdma);
9000c1aa:	6802      	ldr	r2, [r0, #0]
9000c1ac:	4601      	mov	r1, r0
  hmdma->Instance->CCR  = 0;
9000c1ae:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
9000c1b0:	68d0      	ldr	r0, [r2, #12]
{
9000c1b2:	b410      	push	{r4}
  __HAL_MDMA_DISABLE(hmdma);
9000c1b4:	f020 0001 	bic.w	r0, r0, #1
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
9000c1b8:	241f      	movs	r4, #31
  __HAL_MDMA_DISABLE(hmdma);
9000c1ba:	60d0      	str	r0, [r2, #12]
  return HAL_OK;
9000c1bc:	4618      	mov	r0, r3
  hmdma->Instance->CCR  = 0;
9000c1be:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
9000c1c0:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
9000c1c2:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
9000c1c4:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
9000c1c6:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
9000c1c8:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
9000c1ca:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
9000c1cc:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
9000c1ce:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
9000c1d0:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
9000c1d2:	6054      	str	r4, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000c1d4:	668b      	str	r3, [r1, #104]	; 0x68
  __HAL_UNLOCK(hmdma);
9000c1d6:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
9000c1da:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
}
9000c1de:	f85d 4b04 	ldr.w	r4, [sp], #4
  hmdma->LinkedListNodeCounter  = 0;
9000c1e2:	664b      	str	r3, [r1, #100]	; 0x64
  hmdma->LastLinkedListNodeAddress   = 0;
9000c1e4:	e9c1 3317 	strd	r3, r3, [r1, #92]	; 0x5c
}
9000c1e8:	4770      	bx	lr
    return HAL_ERROR;
9000c1ea:	2001      	movs	r0, #1
}
9000c1ec:	4770      	bx	lr
9000c1ee:	bf00      	nop

9000c1f0 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
9000c1f0:	b310      	cbz	r0, 9000c238 <HAL_MDMA_ConfigPostRequestMask+0x48>
9000c1f2:	4603      	mov	r3, r0
  __HAL_LOCK(hmdma);
9000c1f4:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
9000c1f8:	2801      	cmp	r0, #1
9000c1fa:	d01f      	beq.n	9000c23c <HAL_MDMA_ConfigPostRequestMask+0x4c>
{
9000c1fc:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hmdma);
9000c1fe:	f04f 0e01 	mov.w	lr, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
9000c202:	f893 c03d 	ldrb.w	ip, [r3, #61]	; 0x3d
9000c206:	45f4      	cmp	ip, lr
9000c208:	fa5f f08c 	uxtb.w	r0, ip
  __HAL_LOCK(hmdma);
9000c20c:	f883 e03c 	strb.w	lr, [r3, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
9000c210:	d004      	beq.n	9000c21c <HAL_MDMA_ConfigPostRequestMask+0x2c>
    status =  HAL_ERROR;
9000c212:	4670      	mov	r0, lr
  __HAL_UNLOCK(hmdma);
9000c214:	2200      	movs	r2, #0
9000c216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
9000c21a:	bd30      	pop	{r4, r5, pc}
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
9000c21c:	681d      	ldr	r5, [r3, #0]
9000c21e:	692c      	ldr	r4, [r5, #16]
9000c220:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
9000c224:	d1f6      	bne.n	9000c214 <HAL_MDMA_ConfigPostRequestMask+0x24>
      hmdma->Instance->CMAR = MaskAddress;
9000c226:	6329      	str	r1, [r5, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
9000c228:	636a      	str	r2, [r5, #52]	; 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
9000c22a:	692a      	ldr	r2, [r5, #16]
      if(MaskAddress == 0U)
9000c22c:	b941      	cbnz	r1, 9000c240 <HAL_MDMA_ConfigPostRequestMask+0x50>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
9000c22e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
9000c232:	4608      	mov	r0, r1
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
9000c234:	612a      	str	r2, [r5, #16]
9000c236:	e7ed      	b.n	9000c214 <HAL_MDMA_ConfigPostRequestMask+0x24>
    return HAL_ERROR;
9000c238:	2001      	movs	r0, #1
9000c23a:	4770      	bx	lr
  __HAL_LOCK(hmdma);
9000c23c:	2002      	movs	r0, #2
}
9000c23e:	4770      	bx	lr
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
9000c240:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
9000c244:	4620      	mov	r0, r4
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
9000c246:	612a      	str	r2, [r5, #16]
9000c248:	e7e4      	b.n	9000c214 <HAL_MDMA_ConfigPostRequestMask+0x24>
9000c24a:	bf00      	nop

9000c24c <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
9000c24c:	2800      	cmp	r0, #0
9000c24e:	d06f      	beq.n	9000c330 <HAL_MDMA_Start_IT+0xe4>
9000c250:	4684      	mov	ip, r0
  __HAL_LOCK(hmdma);
9000c252:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
9000c256:	2801      	cmp	r0, #1
9000c258:	d072      	beq.n	9000c340 <HAL_MDMA_Start_IT+0xf4>
9000c25a:	2001      	movs	r0, #1
9000c25c:	f88c 003c 	strb.w	r0, [ip, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
9000c260:	f89c 003d 	ldrb.w	r0, [ip, #61]	; 0x3d
9000c264:	2801      	cmp	r0, #1
9000c266:	d004      	beq.n	9000c272 <HAL_MDMA_Start_IT+0x26>
    __HAL_UNLOCK(hmdma);
9000c268:	2300      	movs	r3, #0
    return HAL_BUSY;
9000c26a:	2002      	movs	r0, #2
    __HAL_UNLOCK(hmdma);
9000c26c:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
    return HAL_BUSY;
9000c270:	4770      	bx	lr
    hmdma->State = HAL_MDMA_STATE_BUSY;
9000c272:	2002      	movs	r0, #2
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
9000c274:	f3c3 0310 	ubfx	r3, r3, #0, #17
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
9000c278:	f011 4f5f 	tst.w	r1, #3741319168	; 0xdf000000
{
9000c27c:	b530      	push	{r4, r5, lr}
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
9000c27e:	9d03      	ldr	r5, [sp, #12]
    hmdma->State = HAL_MDMA_STATE_BUSY;
9000c280:	f88c 003d 	strb.w	r0, [ip, #61]	; 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000c284:	f04f 0000 	mov.w	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
9000c288:	f8dc 4000 	ldr.w	r4, [ip]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
9000c28c:	f105 3eff 	add.w	lr, r5, #4294967295
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000c290:	f8cc 0068 	str.w	r0, [ip, #104]	; 0x68
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
9000c294:	f5a0 3000 	sub.w	r0, r0, #131072	; 0x20000
    __HAL_MDMA_DISABLE(hmdma);
9000c298:	68e5      	ldr	r5, [r4, #12]
9000c29a:	f025 0501 	bic.w	r5, r5, #1
9000c29e:	60e5      	str	r5, [r4, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
9000c2a0:	6965      	ldr	r5, [r4, #20]
9000c2a2:	ea00 0005 	and.w	r0, r0, r5
9000c2a6:	ea40 0003 	orr.w	r0, r0, r3
9000c2aa:	6160      	str	r0, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
9000c2ac:	6963      	ldr	r3, [r4, #20]
9000c2ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
9000c2b2:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
9000c2b6:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
9000c2b8:	f04f 031f 	mov.w	r3, #31
9000c2bc:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
9000c2be:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
9000c2c0:	61a1      	str	r1, [r4, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
9000c2c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000c2c4:	bf0c      	ite	eq
9000c2c6:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
9000c2ca:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
9000c2ce:	f012 4f5f 	tst.w	r2, #3741319168	; 0xdf000000
    if(hmdma->XferBlockCpltCallback != NULL)
9000c2d2:	f8dc 204c 	ldr.w	r2, [ip, #76]	; 0x4c
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
9000c2d6:	62a3      	str	r3, [r4, #40]	; 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
9000c2d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000c2da:	bf0c      	ite	eq
9000c2dc:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
9000c2e0:	f423 3300 	bicne.w	r3, r3, #131072	; 0x20000
9000c2e4:	62a3      	str	r3, [r4, #40]	; 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
9000c2e6:	f8dc 305c 	ldr.w	r3, [ip, #92]	; 0x5c
9000c2ea:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
9000c2ec:	68e3      	ldr	r3, [r4, #12]
9000c2ee:	f043 0306 	orr.w	r3, r3, #6
9000c2f2:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
9000c2f4:	b11a      	cbz	r2, 9000c2fe <HAL_MDMA_Start_IT+0xb2>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
9000c2f6:	68e3      	ldr	r3, [r4, #12]
9000c2f8:	f043 0310 	orr.w	r3, r3, #16
9000c2fc:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000c2fe:	f8dc 3050 	ldr.w	r3, [ip, #80]	; 0x50
9000c302:	b11b      	cbz	r3, 9000c30c <HAL_MDMA_Start_IT+0xc0>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
9000c304:	68e3      	ldr	r3, [r4, #12]
9000c306:	f043 0308 	orr.w	r3, r3, #8
9000c30a:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
9000c30c:	f8dc 3048 	ldr.w	r3, [ip, #72]	; 0x48
9000c310:	b11b      	cbz	r3, 9000c31a <HAL_MDMA_Start_IT+0xce>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
9000c312:	68e3      	ldr	r3, [r4, #12]
9000c314:	f043 0320 	orr.w	r3, r3, #32
9000c318:	60e3      	str	r3, [r4, #12]
    __HAL_MDMA_ENABLE(hmdma);
9000c31a:	68e3      	ldr	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000c31c:	f8dc 2004 	ldr.w	r2, [ip, #4]
    __HAL_MDMA_ENABLE(hmdma);
9000c320:	f043 0301 	orr.w	r3, r3, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000c324:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
9000c328:	60e3      	str	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000c32a:	d003      	beq.n	9000c334 <HAL_MDMA_Start_IT+0xe8>
  return HAL_OK;
9000c32c:	2000      	movs	r0, #0
}
9000c32e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
9000c330:	2001      	movs	r0, #1
9000c332:	4770      	bx	lr
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
9000c334:	68e3      	ldr	r3, [r4, #12]
  return HAL_OK;
9000c336:	2000      	movs	r0, #0
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
9000c338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000c33c:	60e3      	str	r3, [r4, #12]
}
9000c33e:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hmdma);
9000c340:	2002      	movs	r0, #2
}
9000c342:	4770      	bx	lr

9000c344 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
9000c344:	4603      	mov	r3, r0
9000c346:	b188      	cbz	r0, 9000c36c <HAL_MDMA_Abort_IT+0x28>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
9000c348:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
9000c34c:	2a02      	cmp	r2, #2
9000c34e:	d003      	beq.n	9000c358 <HAL_MDMA_Abort_IT+0x14>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
9000c350:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
9000c352:	2001      	movs	r0, #1
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
9000c354:	669a      	str	r2, [r3, #104]	; 0x68
    return HAL_ERROR;
9000c356:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
9000c358:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000c35a:	2104      	movs	r1, #4
  return HAL_OK;
9000c35c:	2000      	movs	r0, #0
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000c35e:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    __HAL_MDMA_DISABLE(hmdma);
9000c362:	68d3      	ldr	r3, [r2, #12]
9000c364:	f023 0301 	bic.w	r3, r3, #1
9000c368:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
9000c36a:	4770      	bx	lr
    return HAL_ERROR;
9000c36c:	2001      	movs	r0, #1
}
9000c36e:	4770      	bx	lr

9000c370 <HAL_MDMA_IRQHandler>:
{
9000c370:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = 0;
9000c372:	2300      	movs	r3, #0
{
9000c374:	b083      	sub	sp, #12
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000c376:	f04f 45a4 	mov.w	r5, #1375731712	; 0x52000000
{
9000c37a:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
9000c37c:	9301      	str	r3, [sp, #4]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000c37e:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
9000c380:	4b57      	ldr	r3, [pc, #348]	; (9000c4e0 <HAL_MDMA_IRQHandler+0x170>)
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000c382:	6828      	ldr	r0, [r5, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000c384:	4a57      	ldr	r2, [pc, #348]	; (9000c4e4 <HAL_MDMA_IRQHandler+0x174>)
  uint32_t timeout = SystemCoreClock / 9600U;
9000c386:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000c388:	6823      	ldr	r3, [r4, #0]
9000c38a:	441a      	add	r2, r3
9000c38c:	f3c2 1284 	ubfx	r2, r2, #6, #5
9000c390:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000c394:	4202      	tst	r2, r0
9000c396:	f000 80a0 	beq.w	9000c4da <HAL_MDMA_IRQHandler+0x16a>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
9000c39a:	681a      	ldr	r2, [r3, #0]
9000c39c:	07d1      	lsls	r1, r2, #31
9000c39e:	d529      	bpl.n	9000c3f4 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
9000c3a0:	68da      	ldr	r2, [r3, #12]
9000c3a2:	0792      	lsls	r2, r2, #30
9000c3a4:	d526      	bpl.n	9000c3f4 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
9000c3a6:	68da      	ldr	r2, [r3, #12]
9000c3a8:	f022 0202 	bic.w	r2, r2, #2
9000c3ac:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
9000c3ae:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
9000c3b0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
9000c3b2:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
9000c3b4:	bf54      	ite	pl
9000c3b6:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
9000c3ba:	f041 0102 	orrmi.w	r1, r1, #2
9000c3be:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
9000c3c0:	0591      	lsls	r1, r2, #22
9000c3c2:	d503      	bpl.n	9000c3cc <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
9000c3c4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000c3c6:	f041 0104 	orr.w	r1, r1, #4
9000c3ca:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
9000c3cc:	05d0      	lsls	r0, r2, #23
9000c3ce:	d503      	bpl.n	9000c3d8 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
9000c3d0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000c3d2:	f041 0108 	orr.w	r1, r1, #8
9000c3d6:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
9000c3d8:	0551      	lsls	r1, r2, #21
9000c3da:	d503      	bpl.n	9000c3e4 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
9000c3dc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000c3de:	f041 0110 	orr.w	r1, r1, #16
9000c3e2:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
9000c3e4:	0510      	lsls	r0, r2, #20
9000c3e6:	d503      	bpl.n	9000c3f0 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
9000c3e8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
9000c3ea:	f042 0220 	orr.w	r2, r2, #32
9000c3ee:	66a2      	str	r2, [r4, #104]	; 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
9000c3f0:	2201      	movs	r2, #1
9000c3f2:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
9000c3f4:	681a      	ldr	r2, [r3, #0]
9000c3f6:	06d1      	lsls	r1, r2, #27
9000c3f8:	d509      	bpl.n	9000c40e <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
9000c3fa:	68da      	ldr	r2, [r3, #12]
9000c3fc:	0692      	lsls	r2, r2, #26
9000c3fe:	d506      	bpl.n	9000c40e <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
9000c400:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
9000c402:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
9000c404:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
9000c406:	b112      	cbz	r2, 9000c40e <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
9000c408:	4620      	mov	r0, r4
9000c40a:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
9000c40c:	6823      	ldr	r3, [r4, #0]
9000c40e:	681a      	ldr	r2, [r3, #0]
9000c410:	0710      	lsls	r0, r2, #28
9000c412:	d509      	bpl.n	9000c428 <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
9000c414:	68da      	ldr	r2, [r3, #12]
9000c416:	06d1      	lsls	r1, r2, #27
9000c418:	d506      	bpl.n	9000c428 <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
9000c41a:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
9000c41c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
9000c41e:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
9000c420:	b112      	cbz	r2, 9000c428 <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
9000c422:	4620      	mov	r0, r4
9000c424:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
9000c426:	6823      	ldr	r3, [r4, #0]
9000c428:	681a      	ldr	r2, [r3, #0]
9000c42a:	0752      	lsls	r2, r2, #29
9000c42c:	d509      	bpl.n	9000c442 <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
9000c42e:	68da      	ldr	r2, [r3, #12]
9000c430:	0710      	lsls	r0, r2, #28
9000c432:	d506      	bpl.n	9000c442 <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
9000c434:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000c436:	6d22      	ldr	r2, [r4, #80]	; 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
9000c438:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000c43a:	b112      	cbz	r2, 9000c442 <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
9000c43c:	4620      	mov	r0, r4
9000c43e:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
9000c440:	6823      	ldr	r3, [r4, #0]
9000c442:	681a      	ldr	r2, [r3, #0]
9000c444:	0791      	lsls	r1, r2, #30
9000c446:	d516      	bpl.n	9000c476 <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
9000c448:	68da      	ldr	r2, [r3, #12]
9000c44a:	0752      	lsls	r2, r2, #29
9000c44c:	d513      	bpl.n	9000c476 <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
9000c44e:	68da      	ldr	r2, [r3, #12]
9000c450:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
9000c454:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
9000c456:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
9000c45a:	2a04      	cmp	r2, #4
9000c45c:	d034      	beq.n	9000c4c8 <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
9000c45e:	2202      	movs	r2, #2
      __HAL_UNLOCK(hmdma);
9000c460:	2100      	movs	r1, #0
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
9000c462:	605a      	str	r2, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
9000c464:	2201      	movs	r2, #1
      if(hmdma->XferCpltCallback != NULL)
9000c466:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hmdma);
9000c468:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
9000c46c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if(hmdma->XferCpltCallback != NULL)
9000c470:	b10b      	cbz	r3, 9000c476 <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
9000c472:	4620      	mov	r0, r4
9000c474:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
9000c476:	6ea3      	ldr	r3, [r4, #104]	; 0x68
9000c478:	2b00      	cmp	r3, #0
9000c47a:	d02e      	beq.n	9000c4da <HAL_MDMA_IRQHandler+0x16a>
    __HAL_MDMA_DISABLE(hmdma);
9000c47c:	6821      	ldr	r1, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000c47e:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
9000c480:	4b19      	ldr	r3, [pc, #100]	; (9000c4e8 <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000c482:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  uint32_t timeout = SystemCoreClock / 9600U;
9000c486:	fba3 3205 	umull	r3, r2, r3, r5
    __HAL_MDMA_DISABLE(hmdma);
9000c48a:	68cb      	ldr	r3, [r1, #12]
9000c48c:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
9000c490:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
9000c492:	60cb      	str	r3, [r1, #12]
9000c494:	e002      	b.n	9000c49c <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
9000c496:	68cb      	ldr	r3, [r1, #12]
9000c498:	07d8      	lsls	r0, r3, #31
9000c49a:	d504      	bpl.n	9000c4a6 <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
9000c49c:	9b01      	ldr	r3, [sp, #4]
9000c49e:	3301      	adds	r3, #1
9000c4a0:	4293      	cmp	r3, r2
9000c4a2:	9301      	str	r3, [sp, #4]
9000c4a4:	d9f7      	bls.n	9000c496 <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
9000c4a6:	2300      	movs	r3, #0
9000c4a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000c4ac:	68cb      	ldr	r3, [r1, #12]
9000c4ae:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000c4b0:	bf4c      	ite	mi
9000c4b2:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
9000c4b4:	2301      	movpl	r3, #1
9000c4b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hmdma->XferErrorCallback != NULL)
9000c4ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000c4bc:	b16b      	cbz	r3, 9000c4da <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
9000c4be:	4620      	mov	r0, r4
}
9000c4c0:	b003      	add	sp, #12
9000c4c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
9000c4c6:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
9000c4c8:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
9000c4ca:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
9000c4cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hmdma);
9000c4ce:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
9000c4d2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if(hmdma->XferAbortCallback != NULL)
9000c4d6:	2b00      	cmp	r3, #0
9000c4d8:	d1f1      	bne.n	9000c4be <HAL_MDMA_IRQHandler+0x14e>
}
9000c4da:	b003      	add	sp, #12
9000c4dc:	bd30      	pop	{r4, r5, pc}
9000c4de:	bf00      	nop
9000c4e0:	24000054 	.word	0x24000054
9000c4e4:	adffffc0 	.word	0xadffffc0
9000c4e8:	1b4e81b5 	.word	0x1b4e81b5

9000c4ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
9000c4ec:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
9000c4ee:	4c10      	ldr	r4, [pc, #64]	; (9000c530 <HAL_PWREx_ConfigSupply+0x44>)
9000c4f0:	68e3      	ldr	r3, [r4, #12]
9000c4f2:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
9000c4f6:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
9000c4f8:	d105      	bne.n	9000c506 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
9000c4fa:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
9000c4fe:	1a18      	subs	r0, r3, r0
9000c500:	bf18      	it	ne
9000c502:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
9000c504:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
9000c506:	f023 0307 	bic.w	r3, r3, #7
9000c50a:	4303      	orrs	r3, r0
9000c50c:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
9000c50e:	f7fc ff59 	bl	900093c4 <HAL_GetTick>
9000c512:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
9000c514:	e005      	b.n	9000c522 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
9000c516:	f7fc ff55 	bl	900093c4 <HAL_GetTick>
9000c51a:	1b40      	subs	r0, r0, r5
9000c51c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
9000c520:	d804      	bhi.n	9000c52c <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
9000c522:	6863      	ldr	r3, [r4, #4]
9000c524:	049b      	lsls	r3, r3, #18
9000c526:	d5f6      	bpl.n	9000c516 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
9000c528:	2000      	movs	r0, #0
}
9000c52a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
9000c52c:	2001      	movs	r0, #1
}
9000c52e:	bd38      	pop	{r3, r4, r5, pc}
9000c530:	58024800 	.word	0x58024800

9000c534 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c534:	4b3b      	ldr	r3, [pc, #236]	; (9000c624 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
9000c536:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000c53a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000c53c:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
9000c53e:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000c542:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000c544:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
9000c548:	d038      	beq.n	9000c5bc <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000c54a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000c54e:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c552:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000c556:	fb05 f101 	mul.w	r1, r5, r1
9000c55a:	2a01      	cmp	r2, #1
9000c55c:	ee07 1a90 	vmov	s15, r1
9000c560:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
9000c564:	d002      	beq.n	9000c56c <HAL_RCC_GetSysClockFreq.part.0+0x38>
9000c566:	2a02      	cmp	r2, #2
9000c568:	d04e      	beq.n	9000c608 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
9000c56a:	b34a      	cbz	r2, 9000c5c0 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c56c:	ee07 0a90 	vmov	s15, r0
9000c570:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 9000c628 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
9000c574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000c57a:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000c57e:	eddf 5a2b 	vldr	s11, [pc, #172]	; 9000c62c <HAL_RCC_GetSysClockFreq.part.0+0xf8>
9000c582:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000c586:	ee07 3a90 	vmov	s15, r3
9000c58a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000c58e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c592:	eee7 7a25 	vfma.f32	s15, s14, s11
9000c596:	ee77 7a86 	vadd.f32	s15, s15, s12
9000c59a:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
9000c59e:	4b21      	ldr	r3, [pc, #132]	; (9000c624 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
9000c5a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000c5a2:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000c5a6:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
9000c5a8:	ee07 3a90 	vmov	s15, r3
9000c5ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
9000c5b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000c5b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000c5b8:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
9000c5bc:	bc30      	pop	{r4, r5}
9000c5be:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000c5c0:	681a      	ldr	r2, [r3, #0]
9000c5c2:	0692      	lsls	r2, r2, #26
9000c5c4:	d527      	bpl.n	9000c616 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c5c6:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c5c8:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c5cc:	4a18      	ldr	r2, [pc, #96]	; (9000c630 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c5ce:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000c5d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c5d4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c5d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c5dc:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000c62c <HAL_RCC_GetSysClockFreq.part.0+0xf8>
9000c5e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c5e4:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c5e6:	ee06 3a90 	vmov	s13, r3
9000c5ea:	ee06 2a10 	vmov	s12, r2
9000c5ee:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000c5f2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000c5f6:	eee7 6a05 	vfma.f32	s13, s14, s10
9000c5fa:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000c5fe:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000c602:	ee66 6a87 	vmul.f32	s13, s13, s14
9000c606:	e7ca      	b.n	9000c59e <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c608:	ee07 0a90 	vmov	s15, r0
9000c60c:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000c634 <HAL_RCC_GetSysClockFreq.part.0+0x100>
9000c610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c614:	e7b0      	b.n	9000c578 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c616:	ee07 0a90 	vmov	s15, r0
9000c61a:	ed9f 5a07 	vldr	s10, [pc, #28]	; 9000c638 <HAL_RCC_GetSysClockFreq.part.0+0x104>
9000c61e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c622:	e7a9      	b.n	9000c578 <HAL_RCC_GetSysClockFreq.part.0+0x44>
9000c624:	58024400 	.word	0x58024400
9000c628:	4a742400 	.word	0x4a742400
9000c62c:	39000000 	.word	0x39000000
9000c630:	03d09000 	.word	0x03d09000
9000c634:	4bbebc20 	.word	0x4bbebc20
9000c638:	4c742400 	.word	0x4c742400

9000c63c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
9000c63c:	2800      	cmp	r0, #0
9000c63e:	f000 81e8 	beq.w	9000ca12 <HAL_RCC_OscConfig+0x3d6>
{
9000c642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
9000c644:	6803      	ldr	r3, [r0, #0]
9000c646:	4604      	mov	r4, r0
9000c648:	07d9      	lsls	r1, r3, #31
9000c64a:	d52e      	bpl.n	9000c6aa <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000c64c:	49a4      	ldr	r1, [pc, #656]	; (9000c8e0 <HAL_RCC_OscConfig+0x2a4>)
9000c64e:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000c650:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000c652:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
9000c656:	2a10      	cmp	r2, #16
9000c658:	f000 8107 	beq.w	9000c86a <HAL_RCC_OscConfig+0x22e>
9000c65c:	2a18      	cmp	r2, #24
9000c65e:	f000 80ff 	beq.w	9000c860 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000c662:	6863      	ldr	r3, [r4, #4]
9000c664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000c668:	f000 812a 	beq.w	9000c8c0 <HAL_RCC_OscConfig+0x284>
9000c66c:	2b00      	cmp	r3, #0
9000c66e:	f000 8168 	beq.w	9000c942 <HAL_RCC_OscConfig+0x306>
9000c672:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
9000c676:	4b9a      	ldr	r3, [pc, #616]	; (9000c8e0 <HAL_RCC_OscConfig+0x2a4>)
9000c678:	681a      	ldr	r2, [r3, #0]
9000c67a:	f000 8289 	beq.w	9000cb90 <HAL_RCC_OscConfig+0x554>
9000c67e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
9000c682:	601a      	str	r2, [r3, #0]
9000c684:	681a      	ldr	r2, [r3, #0]
9000c686:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
9000c68a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
9000c68c:	f7fc fe9a 	bl	900093c4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000c690:	4e93      	ldr	r6, [pc, #588]	; (9000c8e0 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
9000c692:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000c694:	e005      	b.n	9000c6a2 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000c696:	f7fc fe95 	bl	900093c4 <HAL_GetTick>
9000c69a:	1b40      	subs	r0, r0, r5
9000c69c:	2864      	cmp	r0, #100	; 0x64
9000c69e:	f200 814e 	bhi.w	9000c93e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000c6a2:	6833      	ldr	r3, [r6, #0]
9000c6a4:	039b      	lsls	r3, r3, #14
9000c6a6:	d5f6      	bpl.n	9000c696 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
9000c6a8:	6823      	ldr	r3, [r4, #0]
9000c6aa:	079d      	lsls	r5, r3, #30
9000c6ac:	f100 808a 	bmi.w	9000c7c4 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000c6b0:	06d9      	lsls	r1, r3, #27
9000c6b2:	d533      	bpl.n	9000c71c <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000c6b4:	4a8a      	ldr	r2, [pc, #552]	; (9000c8e0 <HAL_RCC_OscConfig+0x2a4>)
9000c6b6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000c6b8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000c6ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000c6be:	2b08      	cmp	r3, #8
9000c6c0:	f000 80e3 	beq.w	9000c88a <HAL_RCC_OscConfig+0x24e>
9000c6c4:	2b18      	cmp	r3, #24
9000c6c6:	f000 80db 	beq.w	9000c880 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
9000c6ca:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
9000c6cc:	4d84      	ldr	r5, [pc, #528]	; (9000c8e0 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
9000c6ce:	2b00      	cmp	r3, #0
9000c6d0:	f000 816f 	beq.w	9000c9b2 <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
9000c6d4:	682b      	ldr	r3, [r5, #0]
9000c6d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000c6da:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000c6dc:	f7fc fe72 	bl	900093c4 <HAL_GetTick>
9000c6e0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000c6e2:	e005      	b.n	9000c6f0 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000c6e4:	f7fc fe6e 	bl	900093c4 <HAL_GetTick>
9000c6e8:	1b80      	subs	r0, r0, r6
9000c6ea:	2802      	cmp	r0, #2
9000c6ec:	f200 8127 	bhi.w	9000c93e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000c6f0:	682b      	ldr	r3, [r5, #0]
9000c6f2:	05db      	lsls	r3, r3, #23
9000c6f4:	d5f6      	bpl.n	9000c6e4 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000c6f6:	f7fc fe6b 	bl	900093d0 <HAL_GetREVID>
9000c6fa:	f241 0303 	movw	r3, #4099	; 0x1003
9000c6fe:	4298      	cmp	r0, r3
9000c700:	f200 826d 	bhi.w	9000cbde <HAL_RCC_OscConfig+0x5a2>
9000c704:	6a22      	ldr	r2, [r4, #32]
9000c706:	686b      	ldr	r3, [r5, #4]
9000c708:	2a20      	cmp	r2, #32
9000c70a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000c70e:	bf0c      	ite	eq
9000c710:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
9000c714:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
9000c718:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000c71a:	6823      	ldr	r3, [r4, #0]
9000c71c:	071d      	lsls	r5, r3, #28
9000c71e:	d516      	bpl.n	9000c74e <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
9000c720:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
9000c722:	4d6f      	ldr	r5, [pc, #444]	; (9000c8e0 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
9000c724:	2b00      	cmp	r3, #0
9000c726:	f000 8122 	beq.w	9000c96e <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
9000c72a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000c72c:	f043 0301 	orr.w	r3, r3, #1
9000c730:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
9000c732:	f7fc fe47 	bl	900093c4 <HAL_GetTick>
9000c736:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000c738:	e005      	b.n	9000c746 <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000c73a:	f7fc fe43 	bl	900093c4 <HAL_GetTick>
9000c73e:	1b80      	subs	r0, r0, r6
9000c740:	2802      	cmp	r0, #2
9000c742:	f200 80fc 	bhi.w	9000c93e <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000c746:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000c748:	0798      	lsls	r0, r3, #30
9000c74a:	d5f6      	bpl.n	9000c73a <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
9000c74c:	6823      	ldr	r3, [r4, #0]
9000c74e:	069a      	lsls	r2, r3, #26
9000c750:	d516      	bpl.n	9000c780 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000c752:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
9000c754:	4d62      	ldr	r5, [pc, #392]	; (9000c8e0 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000c756:	2b00      	cmp	r3, #0
9000c758:	f000 811a 	beq.w	9000c990 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
9000c75c:	682b      	ldr	r3, [r5, #0]
9000c75e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
9000c762:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
9000c764:	f7fc fe2e 	bl	900093c4 <HAL_GetTick>
9000c768:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000c76a:	e005      	b.n	9000c778 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000c76c:	f7fc fe2a 	bl	900093c4 <HAL_GetTick>
9000c770:	1b80      	subs	r0, r0, r6
9000c772:	2802      	cmp	r0, #2
9000c774:	f200 80e3 	bhi.w	9000c93e <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000c778:	682b      	ldr	r3, [r5, #0]
9000c77a:	049f      	lsls	r7, r3, #18
9000c77c:	d5f6      	bpl.n	9000c76c <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
9000c77e:	6823      	ldr	r3, [r4, #0]
9000c780:	0759      	lsls	r1, r3, #29
9000c782:	f100 80a3 	bmi.w	9000c8cc <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
9000c786:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000c788:	b1d0      	cbz	r0, 9000c7c0 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
9000c78a:	4d55      	ldr	r5, [pc, #340]	; (9000c8e0 <HAL_RCC_OscConfig+0x2a4>)
9000c78c:	692b      	ldr	r3, [r5, #16]
9000c78e:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000c792:	2b18      	cmp	r3, #24
9000c794:	f000 81ae 	beq.w	9000caf4 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
9000c798:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000c79a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
9000c79c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
9000c7a0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000c7a2:	f000 8142 	beq.w	9000ca2a <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
9000c7a6:	f7fc fe0d 	bl	900093c4 <HAL_GetTick>
9000c7aa:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000c7ac:	e005      	b.n	9000c7ba <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000c7ae:	f7fc fe09 	bl	900093c4 <HAL_GetTick>
9000c7b2:	1b00      	subs	r0, r0, r4
9000c7b4:	2802      	cmp	r0, #2
9000c7b6:	f200 80c2 	bhi.w	9000c93e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000c7ba:	682b      	ldr	r3, [r5, #0]
9000c7bc:	019b      	lsls	r3, r3, #6
9000c7be:	d4f6      	bmi.n	9000c7ae <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
9000c7c0:	2000      	movs	r0, #0
}
9000c7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000c7c4:	4a46      	ldr	r2, [pc, #280]	; (9000c8e0 <HAL_RCC_OscConfig+0x2a4>)
9000c7c6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000c7c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000c7ca:	f013 0338 	ands.w	r3, r3, #56	; 0x38
9000c7ce:	d12d      	bne.n	9000c82c <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
9000c7d0:	4b43      	ldr	r3, [pc, #268]	; (9000c8e0 <HAL_RCC_OscConfig+0x2a4>)
9000c7d2:	68e2      	ldr	r2, [r4, #12]
9000c7d4:	681b      	ldr	r3, [r3, #0]
9000c7d6:	0759      	lsls	r1, r3, #29
9000c7d8:	d501      	bpl.n	9000c7de <HAL_RCC_OscConfig+0x1a2>
9000c7da:	2a00      	cmp	r2, #0
9000c7dc:	d04e      	beq.n	9000c87c <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000c7de:	4d40      	ldr	r5, [pc, #256]	; (9000c8e0 <HAL_RCC_OscConfig+0x2a4>)
9000c7e0:	682b      	ldr	r3, [r5, #0]
9000c7e2:	f023 0319 	bic.w	r3, r3, #25
9000c7e6:	4313      	orrs	r3, r2
9000c7e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000c7ea:	f7fc fdeb 	bl	900093c4 <HAL_GetTick>
9000c7ee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000c7f0:	e005      	b.n	9000c7fe <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000c7f2:	f7fc fde7 	bl	900093c4 <HAL_GetTick>
9000c7f6:	1b80      	subs	r0, r0, r6
9000c7f8:	2802      	cmp	r0, #2
9000c7fa:	f200 80a0 	bhi.w	9000c93e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000c7fe:	682b      	ldr	r3, [r5, #0]
9000c800:	075b      	lsls	r3, r3, #29
9000c802:	d5f6      	bpl.n	9000c7f2 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000c804:	f7fc fde4 	bl	900093d0 <HAL_GetREVID>
9000c808:	f241 0303 	movw	r3, #4099	; 0x1003
9000c80c:	4298      	cmp	r0, r3
9000c80e:	f200 80f7 	bhi.w	9000ca00 <HAL_RCC_OscConfig+0x3c4>
9000c812:	6922      	ldr	r2, [r4, #16]
9000c814:	686b      	ldr	r3, [r5, #4]
9000c816:	2a40      	cmp	r2, #64	; 0x40
9000c818:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
9000c81c:	bf0c      	ite	eq
9000c81e:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
9000c822:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
9000c826:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000c828:	6823      	ldr	r3, [r4, #0]
9000c82a:	e741      	b.n	9000c6b0 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000c82c:	2b18      	cmp	r3, #24
9000c82e:	f000 80e3 	beq.w	9000c9f8 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000c832:	4d2b      	ldr	r5, [pc, #172]	; (9000c8e0 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000c834:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000c836:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000c838:	2a00      	cmp	r2, #0
9000c83a:	f000 80cc 	beq.w	9000c9d6 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000c83e:	f023 0319 	bic.w	r3, r3, #25
9000c842:	4313      	orrs	r3, r2
9000c844:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000c846:	f7fc fdbd 	bl	900093c4 <HAL_GetTick>
9000c84a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000c84c:	e004      	b.n	9000c858 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000c84e:	f7fc fdb9 	bl	900093c4 <HAL_GetTick>
9000c852:	1b80      	subs	r0, r0, r6
9000c854:	2802      	cmp	r0, #2
9000c856:	d872      	bhi.n	9000c93e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000c858:	682b      	ldr	r3, [r5, #0]
9000c85a:	075f      	lsls	r7, r3, #29
9000c85c:	d5f7      	bpl.n	9000c84e <HAL_RCC_OscConfig+0x212>
9000c85e:	e7d1      	b.n	9000c804 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
9000c860:	f001 0103 	and.w	r1, r1, #3
9000c864:	2902      	cmp	r1, #2
9000c866:	f47f aefc 	bne.w	9000c662 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
9000c86a:	4a1d      	ldr	r2, [pc, #116]	; (9000c8e0 <HAL_RCC_OscConfig+0x2a4>)
9000c86c:	6812      	ldr	r2, [r2, #0]
9000c86e:	0392      	lsls	r2, r2, #14
9000c870:	f57f af1b 	bpl.w	9000c6aa <HAL_RCC_OscConfig+0x6e>
9000c874:	6862      	ldr	r2, [r4, #4]
9000c876:	2a00      	cmp	r2, #0
9000c878:	f47f af17 	bne.w	9000c6aa <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
9000c87c:	2001      	movs	r0, #1
}
9000c87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000c880:	f002 0203 	and.w	r2, r2, #3
9000c884:	2a01      	cmp	r2, #1
9000c886:	f47f af20 	bne.w	9000c6ca <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
9000c88a:	4b15      	ldr	r3, [pc, #84]	; (9000c8e0 <HAL_RCC_OscConfig+0x2a4>)
9000c88c:	681b      	ldr	r3, [r3, #0]
9000c88e:	05da      	lsls	r2, r3, #23
9000c890:	d502      	bpl.n	9000c898 <HAL_RCC_OscConfig+0x25c>
9000c892:	69e3      	ldr	r3, [r4, #28]
9000c894:	2b80      	cmp	r3, #128	; 0x80
9000c896:	d1f1      	bne.n	9000c87c <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000c898:	f7fc fd9a 	bl	900093d0 <HAL_GetREVID>
9000c89c:	f241 0303 	movw	r3, #4099	; 0x1003
9000c8a0:	4298      	cmp	r0, r3
9000c8a2:	f200 80b8 	bhi.w	9000ca16 <HAL_RCC_OscConfig+0x3da>
9000c8a6:	6a22      	ldr	r2, [r4, #32]
9000c8a8:	2a20      	cmp	r2, #32
9000c8aa:	f000 81a7 	beq.w	9000cbfc <HAL_RCC_OscConfig+0x5c0>
9000c8ae:	490c      	ldr	r1, [pc, #48]	; (9000c8e0 <HAL_RCC_OscConfig+0x2a4>)
9000c8b0:	684b      	ldr	r3, [r1, #4]
9000c8b2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000c8b6:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
9000c8ba:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000c8bc:	6823      	ldr	r3, [r4, #0]
9000c8be:	e72d      	b.n	9000c71c <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000c8c0:	4a07      	ldr	r2, [pc, #28]	; (9000c8e0 <HAL_RCC_OscConfig+0x2a4>)
9000c8c2:	6813      	ldr	r3, [r2, #0]
9000c8c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000c8c8:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
9000c8ca:	e6df      	b.n	9000c68c <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
9000c8cc:	4d05      	ldr	r5, [pc, #20]	; (9000c8e4 <HAL_RCC_OscConfig+0x2a8>)
9000c8ce:	682b      	ldr	r3, [r5, #0]
9000c8d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000c8d4:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
9000c8d6:	f7fc fd75 	bl	900093c4 <HAL_GetTick>
9000c8da:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000c8dc:	e009      	b.n	9000c8f2 <HAL_RCC_OscConfig+0x2b6>
9000c8de:	bf00      	nop
9000c8e0:	58024400 	.word	0x58024400
9000c8e4:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000c8e8:	f7fc fd6c 	bl	900093c4 <HAL_GetTick>
9000c8ec:	1b80      	subs	r0, r0, r6
9000c8ee:	2864      	cmp	r0, #100	; 0x64
9000c8f0:	d825      	bhi.n	9000c93e <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000c8f2:	682b      	ldr	r3, [r5, #0]
9000c8f4:	05da      	lsls	r2, r3, #23
9000c8f6:	d5f7      	bpl.n	9000c8e8 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000c8f8:	68a3      	ldr	r3, [r4, #8]
9000c8fa:	2b01      	cmp	r3, #1
9000c8fc:	f000 8178 	beq.w	9000cbf0 <HAL_RCC_OscConfig+0x5b4>
9000c900:	2b00      	cmp	r3, #0
9000c902:	f000 8153 	beq.w	9000cbac <HAL_RCC_OscConfig+0x570>
9000c906:	2b05      	cmp	r3, #5
9000c908:	4ba5      	ldr	r3, [pc, #660]	; (9000cba0 <HAL_RCC_OscConfig+0x564>)
9000c90a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000c90c:	f000 817f 	beq.w	9000cc0e <HAL_RCC_OscConfig+0x5d2>
9000c910:	f022 0201 	bic.w	r2, r2, #1
9000c914:	671a      	str	r2, [r3, #112]	; 0x70
9000c916:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000c918:	f022 0204 	bic.w	r2, r2, #4
9000c91c:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
9000c91e:	f7fc fd51 	bl	900093c4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000c922:	4e9f      	ldr	r6, [pc, #636]	; (9000cba0 <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000c924:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
9000c928:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000c92a:	e004      	b.n	9000c936 <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000c92c:	f7fc fd4a 	bl	900093c4 <HAL_GetTick>
9000c930:	1b40      	subs	r0, r0, r5
9000c932:	42b8      	cmp	r0, r7
9000c934:	d803      	bhi.n	9000c93e <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000c936:	6f33      	ldr	r3, [r6, #112]	; 0x70
9000c938:	079b      	lsls	r3, r3, #30
9000c93a:	d5f7      	bpl.n	9000c92c <HAL_RCC_OscConfig+0x2f0>
9000c93c:	e723      	b.n	9000c786 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
9000c93e:	2003      	movs	r0, #3
}
9000c940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000c942:	4d97      	ldr	r5, [pc, #604]	; (9000cba0 <HAL_RCC_OscConfig+0x564>)
9000c944:	682b      	ldr	r3, [r5, #0]
9000c946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
9000c94a:	602b      	str	r3, [r5, #0]
9000c94c:	682b      	ldr	r3, [r5, #0]
9000c94e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
9000c952:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000c954:	f7fc fd36 	bl	900093c4 <HAL_GetTick>
9000c958:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000c95a:	e004      	b.n	9000c966 <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000c95c:	f7fc fd32 	bl	900093c4 <HAL_GetTick>
9000c960:	1b80      	subs	r0, r0, r6
9000c962:	2864      	cmp	r0, #100	; 0x64
9000c964:	d8eb      	bhi.n	9000c93e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000c966:	682b      	ldr	r3, [r5, #0]
9000c968:	039f      	lsls	r7, r3, #14
9000c96a:	d4f7      	bmi.n	9000c95c <HAL_RCC_OscConfig+0x320>
9000c96c:	e69c      	b.n	9000c6a8 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
9000c96e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000c970:	f023 0301 	bic.w	r3, r3, #1
9000c974:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
9000c976:	f7fc fd25 	bl	900093c4 <HAL_GetTick>
9000c97a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000c97c:	e004      	b.n	9000c988 <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000c97e:	f7fc fd21 	bl	900093c4 <HAL_GetTick>
9000c982:	1b80      	subs	r0, r0, r6
9000c984:	2802      	cmp	r0, #2
9000c986:	d8da      	bhi.n	9000c93e <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000c988:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000c98a:	0799      	lsls	r1, r3, #30
9000c98c:	d4f7      	bmi.n	9000c97e <HAL_RCC_OscConfig+0x342>
9000c98e:	e6dd      	b.n	9000c74c <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
9000c990:	682b      	ldr	r3, [r5, #0]
9000c992:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000c996:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
9000c998:	f7fc fd14 	bl	900093c4 <HAL_GetTick>
9000c99c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000c99e:	e004      	b.n	9000c9aa <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000c9a0:	f7fc fd10 	bl	900093c4 <HAL_GetTick>
9000c9a4:	1b80      	subs	r0, r0, r6
9000c9a6:	2802      	cmp	r0, #2
9000c9a8:	d8c9      	bhi.n	9000c93e <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000c9aa:	682b      	ldr	r3, [r5, #0]
9000c9ac:	0498      	lsls	r0, r3, #18
9000c9ae:	d4f7      	bmi.n	9000c9a0 <HAL_RCC_OscConfig+0x364>
9000c9b0:	e6e5      	b.n	9000c77e <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
9000c9b2:	682b      	ldr	r3, [r5, #0]
9000c9b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000c9b8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000c9ba:	f7fc fd03 	bl	900093c4 <HAL_GetTick>
9000c9be:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000c9c0:	e004      	b.n	9000c9cc <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000c9c2:	f7fc fcff 	bl	900093c4 <HAL_GetTick>
9000c9c6:	1b80      	subs	r0, r0, r6
9000c9c8:	2802      	cmp	r0, #2
9000c9ca:	d8b8      	bhi.n	9000c93e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000c9cc:	682b      	ldr	r3, [r5, #0]
9000c9ce:	05df      	lsls	r7, r3, #23
9000c9d0:	d4f7      	bmi.n	9000c9c2 <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000c9d2:	6823      	ldr	r3, [r4, #0]
9000c9d4:	e6a2      	b.n	9000c71c <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
9000c9d6:	f023 0301 	bic.w	r3, r3, #1
9000c9da:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000c9dc:	f7fc fcf2 	bl	900093c4 <HAL_GetTick>
9000c9e0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000c9e2:	e004      	b.n	9000c9ee <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000c9e4:	f7fc fcee 	bl	900093c4 <HAL_GetTick>
9000c9e8:	1b80      	subs	r0, r0, r6
9000c9ea:	2802      	cmp	r0, #2
9000c9ec:	d8a7      	bhi.n	9000c93e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000c9ee:	682b      	ldr	r3, [r5, #0]
9000c9f0:	0758      	lsls	r0, r3, #29
9000c9f2:	d4f7      	bmi.n	9000c9e4 <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000c9f4:	6823      	ldr	r3, [r4, #0]
9000c9f6:	e65b      	b.n	9000c6b0 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000c9f8:	0790      	lsls	r0, r2, #30
9000c9fa:	f47f af1a 	bne.w	9000c832 <HAL_RCC_OscConfig+0x1f6>
9000c9fe:	e6e7      	b.n	9000c7d0 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000ca00:	686b      	ldr	r3, [r5, #4]
9000ca02:	6922      	ldr	r2, [r4, #16]
9000ca04:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
9000ca08:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
9000ca0c:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000ca0e:	6823      	ldr	r3, [r4, #0]
9000ca10:	e64e      	b.n	9000c6b0 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
9000ca12:	2001      	movs	r0, #1
}
9000ca14:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000ca16:	4a62      	ldr	r2, [pc, #392]	; (9000cba0 <HAL_RCC_OscConfig+0x564>)
9000ca18:	6a21      	ldr	r1, [r4, #32]
9000ca1a:	68d3      	ldr	r3, [r2, #12]
9000ca1c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
9000ca20:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
9000ca24:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000ca26:	6823      	ldr	r3, [r4, #0]
9000ca28:	e678      	b.n	9000c71c <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
9000ca2a:	f7fc fccb 	bl	900093c4 <HAL_GetTick>
9000ca2e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000ca30:	e004      	b.n	9000ca3c <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000ca32:	f7fc fcc7 	bl	900093c4 <HAL_GetTick>
9000ca36:	1b80      	subs	r0, r0, r6
9000ca38:	2802      	cmp	r0, #2
9000ca3a:	d880      	bhi.n	9000c93e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000ca3c:	682b      	ldr	r3, [r5, #0]
9000ca3e:	0199      	lsls	r1, r3, #6
9000ca40:	d4f7      	bmi.n	9000ca32 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000ca42:	6aa9      	ldr	r1, [r5, #40]	; 0x28
9000ca44:	4b57      	ldr	r3, [pc, #348]	; (9000cba4 <HAL_RCC_OscConfig+0x568>)
9000ca46:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000ca48:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000ca4a:	4957      	ldr	r1, [pc, #348]	; (9000cba8 <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000ca4c:	4e54      	ldr	r6, [pc, #336]	; (9000cba0 <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000ca4e:	4313      	orrs	r3, r2
9000ca50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000ca52:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
9000ca56:	62ab      	str	r3, [r5, #40]	; 0x28
9000ca58:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
9000ca5c:	3b01      	subs	r3, #1
9000ca5e:	3a01      	subs	r2, #1
9000ca60:	025b      	lsls	r3, r3, #9
9000ca62:	0412      	lsls	r2, r2, #16
9000ca64:	b29b      	uxth	r3, r3
9000ca66:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000ca6a:	4313      	orrs	r3, r2
9000ca6c:	6b22      	ldr	r2, [r4, #48]	; 0x30
9000ca6e:	3a01      	subs	r2, #1
9000ca70:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000ca74:	4313      	orrs	r3, r2
9000ca76:	6be2      	ldr	r2, [r4, #60]	; 0x3c
9000ca78:	3a01      	subs	r2, #1
9000ca7a:	0612      	lsls	r2, r2, #24
9000ca7c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000ca80:	4313      	orrs	r3, r2
9000ca82:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
9000ca84:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000ca86:	f023 0301 	bic.w	r3, r3, #1
9000ca8a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000ca8c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
9000ca8e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
9000ca90:	4011      	ands	r1, r2
9000ca92:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
9000ca96:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
9000ca98:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000ca9a:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000ca9c:	f023 030c 	bic.w	r3, r3, #12
9000caa0:	4313      	orrs	r3, r2
9000caa2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
9000caa4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000caa6:	6c62      	ldr	r2, [r4, #68]	; 0x44
9000caa8:	f023 0302 	bic.w	r3, r3, #2
9000caac:	4313      	orrs	r3, r2
9000caae:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
9000cab0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000cab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000cab6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000cab8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000caba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000cabe:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
9000cac0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000cac2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
9000cac6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
9000cac8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000caca:	f043 0301 	orr.w	r3, r3, #1
9000cace:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
9000cad0:	682b      	ldr	r3, [r5, #0]
9000cad2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
9000cad6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000cad8:	f7fc fc74 	bl	900093c4 <HAL_GetTick>
9000cadc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000cade:	e005      	b.n	9000caec <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000cae0:	f7fc fc70 	bl	900093c4 <HAL_GetTick>
9000cae4:	1b00      	subs	r0, r0, r4
9000cae6:	2802      	cmp	r0, #2
9000cae8:	f63f af29 	bhi.w	9000c93e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000caec:	6833      	ldr	r3, [r6, #0]
9000caee:	019a      	lsls	r2, r3, #6
9000caf0:	d5f6      	bpl.n	9000cae0 <HAL_RCC_OscConfig+0x4a4>
9000caf2:	e665      	b.n	9000c7c0 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000caf4:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
9000caf6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
9000caf8:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000cafa:	f43f ae62 	beq.w	9000c7c2 <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000cafe:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000cb02:	6aa1      	ldr	r1, [r4, #40]	; 0x28
9000cb04:	428b      	cmp	r3, r1
9000cb06:	f47f aeb9 	bne.w	9000c87c <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000cb0a:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000cb0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000cb10:	429a      	cmp	r2, r3
9000cb12:	f47f aeb3 	bne.w	9000c87c <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000cb16:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000cb18:	f3c6 0208 	ubfx	r2, r6, #0, #9
9000cb1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000cb1e:	429a      	cmp	r2, r3
9000cb20:	f47f aeac 	bne.w	9000c87c <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000cb24:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000cb26:	f3c6 2246 	ubfx	r2, r6, #9, #7
9000cb2a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000cb2c:	429a      	cmp	r2, r3
9000cb2e:	f47f aea5 	bne.w	9000c87c <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000cb32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000cb34:	f3c6 4206 	ubfx	r2, r6, #16, #7
9000cb38:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000cb3a:	429a      	cmp	r2, r3
9000cb3c:	f47f ae9e 	bne.w	9000c87c <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
9000cb40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000cb42:	f3c6 6606 	ubfx	r6, r6, #24, #7
9000cb46:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000cb48:	429e      	cmp	r6, r3
9000cb4a:	f47f ae97 	bne.w	9000c87c <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000cb4e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000cb50:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000cb52:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000cb56:	429a      	cmp	r2, r3
9000cb58:	f43f ae32 	beq.w	9000c7c0 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
9000cb5c:	4a10      	ldr	r2, [pc, #64]	; (9000cba0 <HAL_RCC_OscConfig+0x564>)
9000cb5e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
9000cb60:	f023 0301 	bic.w	r3, r3, #1
9000cb64:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
9000cb66:	f7fc fc2d 	bl	900093c4 <HAL_GetTick>
9000cb6a:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
9000cb6c:	f7fc fc2a 	bl	900093c4 <HAL_GetTick>
9000cb70:	42a8      	cmp	r0, r5
9000cb72:	d0fb      	beq.n	9000cb6c <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000cb74:	4a0a      	ldr	r2, [pc, #40]	; (9000cba0 <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
9000cb76:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000cb78:	6ca1      	ldr	r1, [r4, #72]	; 0x48
9000cb7a:	4b0b      	ldr	r3, [pc, #44]	; (9000cba8 <HAL_RCC_OscConfig+0x56c>)
9000cb7c:	6b54      	ldr	r4, [r2, #52]	; 0x34
9000cb7e:	4023      	ands	r3, r4
9000cb80:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
9000cb84:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
9000cb86:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
9000cb88:	f043 0301 	orr.w	r3, r3, #1
9000cb8c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
9000cb8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000cb90:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
9000cb94:	601a      	str	r2, [r3, #0]
9000cb96:	681a      	ldr	r2, [r3, #0]
9000cb98:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
9000cb9c:	601a      	str	r2, [r3, #0]
9000cb9e:	e575      	b.n	9000c68c <HAL_RCC_OscConfig+0x50>
9000cba0:	58024400 	.word	0x58024400
9000cba4:	fffffc0c 	.word	0xfffffc0c
9000cba8:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000cbac:	4d1c      	ldr	r5, [pc, #112]	; (9000cc20 <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000cbae:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000cbb2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000cbb4:	f023 0301 	bic.w	r3, r3, #1
9000cbb8:	672b      	str	r3, [r5, #112]	; 0x70
9000cbba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000cbbc:	f023 0304 	bic.w	r3, r3, #4
9000cbc0:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
9000cbc2:	f7fc fbff 	bl	900093c4 <HAL_GetTick>
9000cbc6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000cbc8:	e005      	b.n	9000cbd6 <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000cbca:	f7fc fbfb 	bl	900093c4 <HAL_GetTick>
9000cbce:	1b80      	subs	r0, r0, r6
9000cbd0:	42b8      	cmp	r0, r7
9000cbd2:	f63f aeb4 	bhi.w	9000c93e <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000cbd6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000cbd8:	0798      	lsls	r0, r3, #30
9000cbda:	d4f6      	bmi.n	9000cbca <HAL_RCC_OscConfig+0x58e>
9000cbdc:	e5d3      	b.n	9000c786 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000cbde:	68eb      	ldr	r3, [r5, #12]
9000cbe0:	6a22      	ldr	r2, [r4, #32]
9000cbe2:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
9000cbe6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
9000cbea:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000cbec:	6823      	ldr	r3, [r4, #0]
9000cbee:	e595      	b.n	9000c71c <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000cbf0:	4a0b      	ldr	r2, [pc, #44]	; (9000cc20 <HAL_RCC_OscConfig+0x5e4>)
9000cbf2:	6f13      	ldr	r3, [r2, #112]	; 0x70
9000cbf4:	f043 0301 	orr.w	r3, r3, #1
9000cbf8:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
9000cbfa:	e690      	b.n	9000c91e <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000cbfc:	4a08      	ldr	r2, [pc, #32]	; (9000cc20 <HAL_RCC_OscConfig+0x5e4>)
9000cbfe:	6853      	ldr	r3, [r2, #4]
9000cc00:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000cc04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
9000cc08:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000cc0a:	6823      	ldr	r3, [r4, #0]
9000cc0c:	e586      	b.n	9000c71c <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000cc0e:	f042 0204 	orr.w	r2, r2, #4
9000cc12:	671a      	str	r2, [r3, #112]	; 0x70
9000cc14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000cc16:	f042 0201 	orr.w	r2, r2, #1
9000cc1a:	671a      	str	r2, [r3, #112]	; 0x70
9000cc1c:	e67f      	b.n	9000c91e <HAL_RCC_OscConfig+0x2e2>
9000cc1e:	bf00      	nop
9000cc20:	58024400 	.word	0x58024400

9000cc24 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000cc24:	4a47      	ldr	r2, [pc, #284]	; (9000cd44 <HAL_RCC_GetSysClockFreq+0x120>)
9000cc26:	6913      	ldr	r3, [r2, #16]
9000cc28:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000cc2c:	2b10      	cmp	r3, #16
9000cc2e:	d004      	beq.n	9000cc3a <HAL_RCC_GetSysClockFreq+0x16>
9000cc30:	2b18      	cmp	r3, #24
9000cc32:	d00d      	beq.n	9000cc50 <HAL_RCC_GetSysClockFreq+0x2c>
9000cc34:	b11b      	cbz	r3, 9000cc3e <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
9000cc36:	4844      	ldr	r0, [pc, #272]	; (9000cd48 <HAL_RCC_GetSysClockFreq+0x124>)
9000cc38:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000cc3a:	4844      	ldr	r0, [pc, #272]	; (9000cd4c <HAL_RCC_GetSysClockFreq+0x128>)
9000cc3c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000cc3e:	6813      	ldr	r3, [r2, #0]
9000cc40:	0699      	lsls	r1, r3, #26
9000cc42:	d54a      	bpl.n	9000ccda <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000cc44:	6813      	ldr	r3, [r2, #0]
9000cc46:	4842      	ldr	r0, [pc, #264]	; (9000cd50 <HAL_RCC_GetSysClockFreq+0x12c>)
9000cc48:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000cc4c:	40d8      	lsrs	r0, r3
9000cc4e:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000cc50:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
9000cc52:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000cc54:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000cc56:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
9000cc58:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000cc5c:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000cc5e:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
9000cc62:	d038      	beq.n	9000ccd6 <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000cc64:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000cc68:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000cc6c:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000cc70:	fb05 f101 	mul.w	r1, r5, r1
9000cc74:	2b01      	cmp	r3, #1
9000cc76:	ee07 1a90 	vmov	s15, r1
9000cc7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
9000cc7e:	d002      	beq.n	9000cc86 <HAL_RCC_GetSysClockFreq+0x62>
9000cc80:	2b02      	cmp	r3, #2
9000cc82:	d02c      	beq.n	9000ccde <HAL_RCC_GetSysClockFreq+0xba>
9000cc84:	b393      	cbz	r3, 9000ccec <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000cc86:	ee07 0a90 	vmov	s15, r0
9000cc8a:	ed9f 5a32 	vldr	s10, [pc, #200]	; 9000cd54 <HAL_RCC_GetSysClockFreq+0x130>
9000cc8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000cc92:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000cc94:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000cc98:	eddf 5a2f 	vldr	s11, [pc, #188]	; 9000cd58 <HAL_RCC_GetSysClockFreq+0x134>
9000cc9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000cca0:	ee07 3a90 	vmov	s15, r3
9000cca4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000cca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000ccac:	eee7 7a25 	vfma.f32	s15, s14, s11
9000ccb0:	ee77 7a86 	vadd.f32	s15, s15, s12
9000ccb4:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
9000ccb8:	4b22      	ldr	r3, [pc, #136]	; (9000cd44 <HAL_RCC_GetSysClockFreq+0x120>)
9000ccba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000ccbc:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000ccc0:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
9000ccc2:	ee07 3a90 	vmov	s15, r3
9000ccc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
9000ccca:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000ccce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000ccd2:	ee17 0a90 	vmov	r0, s15
}
9000ccd6:	bc30      	pop	{r4, r5}
9000ccd8:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
9000ccda:	481d      	ldr	r0, [pc, #116]	; (9000cd50 <HAL_RCC_GetSysClockFreq+0x12c>)
}
9000ccdc:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000ccde:	ee07 0a90 	vmov	s15, r0
9000cce2:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 9000cd5c <HAL_RCC_GetSysClockFreq+0x138>
9000cce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000ccea:	e7d2      	b.n	9000cc92 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000ccec:	6813      	ldr	r3, [r2, #0]
9000ccee:	069b      	lsls	r3, r3, #26
9000ccf0:	d520      	bpl.n	9000cd34 <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000ccf2:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000ccf4:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000ccf8:	4915      	ldr	r1, [pc, #84]	; (9000cd50 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000ccfa:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000ccfe:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000cd00:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000cd04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000cd08:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000cd58 <HAL_RCC_GetSysClockFreq+0x134>
9000cd0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000cd10:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000cd12:	ee06 3a90 	vmov	s13, r3
9000cd16:	ee06 1a10 	vmov	s12, r1
9000cd1a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000cd1e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000cd22:	eee7 6a05 	vfma.f32	s13, s14, s10
9000cd26:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000cd2a:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000cd2e:	ee66 6a87 	vmul.f32	s13, s13, s14
9000cd32:	e7c1      	b.n	9000ccb8 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000cd34:	ee07 0a90 	vmov	s15, r0
9000cd38:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000cd60 <HAL_RCC_GetSysClockFreq+0x13c>
9000cd3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000cd40:	e7a7      	b.n	9000cc92 <HAL_RCC_GetSysClockFreq+0x6e>
9000cd42:	bf00      	nop
9000cd44:	58024400 	.word	0x58024400
9000cd48:	003d0900 	.word	0x003d0900
9000cd4c:	017d7840 	.word	0x017d7840
9000cd50:	03d09000 	.word	0x03d09000
9000cd54:	4a742400 	.word	0x4a742400
9000cd58:	39000000 	.word	0x39000000
9000cd5c:	4bbebc20 	.word	0x4bbebc20
9000cd60:	4c742400 	.word	0x4c742400

9000cd64 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
9000cd64:	2800      	cmp	r0, #0
9000cd66:	f000 810c 	beq.w	9000cf82 <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
9000cd6a:	4a8c      	ldr	r2, [pc, #560]	; (9000cf9c <HAL_RCC_ClockConfig+0x238>)
9000cd6c:	6813      	ldr	r3, [r2, #0]
9000cd6e:	f003 030f 	and.w	r3, r3, #15
9000cd72:	428b      	cmp	r3, r1
{
9000cd74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000cd78:	4604      	mov	r4, r0
9000cd7a:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
9000cd7c:	d20c      	bcs.n	9000cd98 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000cd7e:	6813      	ldr	r3, [r2, #0]
9000cd80:	f023 030f 	bic.w	r3, r3, #15
9000cd84:	430b      	orrs	r3, r1
9000cd86:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000cd88:	6813      	ldr	r3, [r2, #0]
9000cd8a:	f003 030f 	and.w	r3, r3, #15
9000cd8e:	428b      	cmp	r3, r1
9000cd90:	d002      	beq.n	9000cd98 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
9000cd92:	2001      	movs	r0, #1
}
9000cd94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000cd98:	6823      	ldr	r3, [r4, #0]
9000cd9a:	075f      	lsls	r7, r3, #29
9000cd9c:	d50b      	bpl.n	9000cdb6 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000cd9e:	4980      	ldr	r1, [pc, #512]	; (9000cfa0 <HAL_RCC_ClockConfig+0x23c>)
9000cda0:	6920      	ldr	r0, [r4, #16]
9000cda2:	698a      	ldr	r2, [r1, #24]
9000cda4:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000cda8:	4290      	cmp	r0, r2
9000cdaa:	d904      	bls.n	9000cdb6 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000cdac:	698a      	ldr	r2, [r1, #24]
9000cdae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000cdb2:	4302      	orrs	r2, r0
9000cdb4:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000cdb6:	071e      	lsls	r6, r3, #28
9000cdb8:	d50b      	bpl.n	9000cdd2 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000cdba:	4979      	ldr	r1, [pc, #484]	; (9000cfa0 <HAL_RCC_ClockConfig+0x23c>)
9000cdbc:	6960      	ldr	r0, [r4, #20]
9000cdbe:	69ca      	ldr	r2, [r1, #28]
9000cdc0:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000cdc4:	4290      	cmp	r0, r2
9000cdc6:	d904      	bls.n	9000cdd2 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000cdc8:	69ca      	ldr	r2, [r1, #28]
9000cdca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000cdce:	4302      	orrs	r2, r0
9000cdd0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000cdd2:	06d8      	lsls	r0, r3, #27
9000cdd4:	d50b      	bpl.n	9000cdee <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000cdd6:	4972      	ldr	r1, [pc, #456]	; (9000cfa0 <HAL_RCC_ClockConfig+0x23c>)
9000cdd8:	69a0      	ldr	r0, [r4, #24]
9000cdda:	69ca      	ldr	r2, [r1, #28]
9000cddc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000cde0:	4290      	cmp	r0, r2
9000cde2:	d904      	bls.n	9000cdee <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000cde4:	69ca      	ldr	r2, [r1, #28]
9000cde6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
9000cdea:	4302      	orrs	r2, r0
9000cdec:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000cdee:	0699      	lsls	r1, r3, #26
9000cdf0:	d50b      	bpl.n	9000ce0a <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000cdf2:	496b      	ldr	r1, [pc, #428]	; (9000cfa0 <HAL_RCC_ClockConfig+0x23c>)
9000cdf4:	69e0      	ldr	r0, [r4, #28]
9000cdf6:	6a0a      	ldr	r2, [r1, #32]
9000cdf8:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000cdfc:	4290      	cmp	r0, r2
9000cdfe:	d904      	bls.n	9000ce0a <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000ce00:	6a0a      	ldr	r2, [r1, #32]
9000ce02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000ce06:	4302      	orrs	r2, r0
9000ce08:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000ce0a:	079a      	lsls	r2, r3, #30
9000ce0c:	f140 80ab 	bpl.w	9000cf66 <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000ce10:	4863      	ldr	r0, [pc, #396]	; (9000cfa0 <HAL_RCC_ClockConfig+0x23c>)
9000ce12:	68e1      	ldr	r1, [r4, #12]
9000ce14:	6982      	ldr	r2, [r0, #24]
9000ce16:	f002 020f 	and.w	r2, r2, #15
9000ce1a:	4291      	cmp	r1, r2
9000ce1c:	d904      	bls.n	9000ce28 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000ce1e:	6982      	ldr	r2, [r0, #24]
9000ce20:	f022 020f 	bic.w	r2, r2, #15
9000ce24:	430a      	orrs	r2, r1
9000ce26:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000ce28:	07d8      	lsls	r0, r3, #31
9000ce2a:	d530      	bpl.n	9000ce8e <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
9000ce2c:	4a5c      	ldr	r2, [pc, #368]	; (9000cfa0 <HAL_RCC_ClockConfig+0x23c>)
9000ce2e:	68a1      	ldr	r1, [r4, #8]
9000ce30:	6993      	ldr	r3, [r2, #24]
9000ce32:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
9000ce36:	430b      	orrs	r3, r1
9000ce38:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000ce3a:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000ce3c:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000ce3e:	2902      	cmp	r1, #2
9000ce40:	f000 80a1 	beq.w	9000cf86 <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
9000ce44:	2903      	cmp	r1, #3
9000ce46:	f000 8098 	beq.w	9000cf7a <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
9000ce4a:	2901      	cmp	r1, #1
9000ce4c:	f000 80a1 	beq.w	9000cf92 <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000ce50:	0758      	lsls	r0, r3, #29
9000ce52:	d59e      	bpl.n	9000cd92 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000ce54:	4e52      	ldr	r6, [pc, #328]	; (9000cfa0 <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000ce56:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000ce5a:	6933      	ldr	r3, [r6, #16]
9000ce5c:	f023 0307 	bic.w	r3, r3, #7
9000ce60:	430b      	orrs	r3, r1
9000ce62:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
9000ce64:	f7fc faae 	bl	900093c4 <HAL_GetTick>
9000ce68:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000ce6a:	e005      	b.n	9000ce78 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000ce6c:	f7fc faaa 	bl	900093c4 <HAL_GetTick>
9000ce70:	1bc0      	subs	r0, r0, r7
9000ce72:	4540      	cmp	r0, r8
9000ce74:	f200 808b 	bhi.w	9000cf8e <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000ce78:	6933      	ldr	r3, [r6, #16]
9000ce7a:	6862      	ldr	r2, [r4, #4]
9000ce7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000ce80:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
9000ce84:	d1f2      	bne.n	9000ce6c <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000ce86:	6823      	ldr	r3, [r4, #0]
9000ce88:	0799      	lsls	r1, r3, #30
9000ce8a:	d506      	bpl.n	9000ce9a <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000ce8c:	68e1      	ldr	r1, [r4, #12]
9000ce8e:	4844      	ldr	r0, [pc, #272]	; (9000cfa0 <HAL_RCC_ClockConfig+0x23c>)
9000ce90:	6982      	ldr	r2, [r0, #24]
9000ce92:	f002 020f 	and.w	r2, r2, #15
9000ce96:	428a      	cmp	r2, r1
9000ce98:	d869      	bhi.n	9000cf6e <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
9000ce9a:	4940      	ldr	r1, [pc, #256]	; (9000cf9c <HAL_RCC_ClockConfig+0x238>)
9000ce9c:	680a      	ldr	r2, [r1, #0]
9000ce9e:	f002 020f 	and.w	r2, r2, #15
9000cea2:	42aa      	cmp	r2, r5
9000cea4:	d90a      	bls.n	9000cebc <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000cea6:	680a      	ldr	r2, [r1, #0]
9000cea8:	f022 020f 	bic.w	r2, r2, #15
9000ceac:	432a      	orrs	r2, r5
9000ceae:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000ceb0:	680a      	ldr	r2, [r1, #0]
9000ceb2:	f002 020f 	and.w	r2, r2, #15
9000ceb6:	42aa      	cmp	r2, r5
9000ceb8:	f47f af6b 	bne.w	9000cd92 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000cebc:	075a      	lsls	r2, r3, #29
9000cebe:	d50b      	bpl.n	9000ced8 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000cec0:	4937      	ldr	r1, [pc, #220]	; (9000cfa0 <HAL_RCC_ClockConfig+0x23c>)
9000cec2:	6920      	ldr	r0, [r4, #16]
9000cec4:	698a      	ldr	r2, [r1, #24]
9000cec6:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000ceca:	4290      	cmp	r0, r2
9000cecc:	d204      	bcs.n	9000ced8 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000cece:	698a      	ldr	r2, [r1, #24]
9000ced0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000ced4:	4302      	orrs	r2, r0
9000ced6:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000ced8:	071f      	lsls	r7, r3, #28
9000ceda:	d50b      	bpl.n	9000cef4 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000cedc:	4930      	ldr	r1, [pc, #192]	; (9000cfa0 <HAL_RCC_ClockConfig+0x23c>)
9000cede:	6960      	ldr	r0, [r4, #20]
9000cee0:	69ca      	ldr	r2, [r1, #28]
9000cee2:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000cee6:	4290      	cmp	r0, r2
9000cee8:	d204      	bcs.n	9000cef4 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000ceea:	69ca      	ldr	r2, [r1, #28]
9000ceec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000cef0:	4302      	orrs	r2, r0
9000cef2:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000cef4:	06de      	lsls	r6, r3, #27
9000cef6:	d50b      	bpl.n	9000cf10 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000cef8:	4929      	ldr	r1, [pc, #164]	; (9000cfa0 <HAL_RCC_ClockConfig+0x23c>)
9000cefa:	69a0      	ldr	r0, [r4, #24]
9000cefc:	69ca      	ldr	r2, [r1, #28]
9000cefe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000cf02:	4290      	cmp	r0, r2
9000cf04:	d204      	bcs.n	9000cf10 <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000cf06:	69ca      	ldr	r2, [r1, #28]
9000cf08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
9000cf0c:	4302      	orrs	r2, r0
9000cf0e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000cf10:	069d      	lsls	r5, r3, #26
9000cf12:	d50b      	bpl.n	9000cf2c <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000cf14:	4a22      	ldr	r2, [pc, #136]	; (9000cfa0 <HAL_RCC_ClockConfig+0x23c>)
9000cf16:	69e1      	ldr	r1, [r4, #28]
9000cf18:	6a13      	ldr	r3, [r2, #32]
9000cf1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
9000cf1e:	4299      	cmp	r1, r3
9000cf20:	d204      	bcs.n	9000cf2c <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000cf22:	6a13      	ldr	r3, [r2, #32]
9000cf24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
9000cf28:	430b      	orrs	r3, r1
9000cf2a:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000cf2c:	f7ff fe7a 	bl	9000cc24 <HAL_RCC_GetSysClockFreq>
9000cf30:	4a1b      	ldr	r2, [pc, #108]	; (9000cfa0 <HAL_RCC_ClockConfig+0x23c>)
9000cf32:	4603      	mov	r3, r0
9000cf34:	481b      	ldr	r0, [pc, #108]	; (9000cfa4 <HAL_RCC_ClockConfig+0x240>)
9000cf36:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000cf38:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000cf3a:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
9000cf3e:	4d1a      	ldr	r5, [pc, #104]	; (9000cfa8 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000cf40:	f002 020f 	and.w	r2, r2, #15
9000cf44:	4c19      	ldr	r4, [pc, #100]	; (9000cfac <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000cf46:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000cf48:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000cf4a:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
9000cf4e:	4818      	ldr	r0, [pc, #96]	; (9000cfb0 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000cf50:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000cf54:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
9000cf56:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
9000cf58:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000cf5a:	40d3      	lsrs	r3, r2
9000cf5c:	6023      	str	r3, [r4, #0]
}
9000cf5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
9000cf62:	f7f7 be8d 	b.w	90004c80 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000cf66:	07da      	lsls	r2, r3, #31
9000cf68:	f53f af60 	bmi.w	9000ce2c <HAL_RCC_ClockConfig+0xc8>
9000cf6c:	e795      	b.n	9000ce9a <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000cf6e:	6982      	ldr	r2, [r0, #24]
9000cf70:	f022 020f 	bic.w	r2, r2, #15
9000cf74:	430a      	orrs	r2, r1
9000cf76:	6182      	str	r2, [r0, #24]
9000cf78:	e78f      	b.n	9000ce9a <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000cf7a:	019f      	lsls	r7, r3, #6
9000cf7c:	f53f af6a 	bmi.w	9000ce54 <HAL_RCC_ClockConfig+0xf0>
9000cf80:	e707      	b.n	9000cd92 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
9000cf82:	2001      	movs	r0, #1
}
9000cf84:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000cf86:	039b      	lsls	r3, r3, #14
9000cf88:	f53f af64 	bmi.w	9000ce54 <HAL_RCC_ClockConfig+0xf0>
9000cf8c:	e701      	b.n	9000cd92 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
9000cf8e:	2003      	movs	r0, #3
9000cf90:	e700      	b.n	9000cd94 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000cf92:	05de      	lsls	r6, r3, #23
9000cf94:	f53f af5e 	bmi.w	9000ce54 <HAL_RCC_ClockConfig+0xf0>
9000cf98:	e6fb      	b.n	9000cd92 <HAL_RCC_ClockConfig+0x2e>
9000cf9a:	bf00      	nop
9000cf9c:	52002000 	.word	0x52002000
9000cfa0:	58024400 	.word	0x58024400
9000cfa4:	9002b228 	.word	0x9002b228
9000cfa8:	24000054 	.word	0x24000054
9000cfac:	24000058 	.word	0x24000058
9000cfb0:	24000060 	.word	0x24000060

9000cfb4 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000cfb4:	4a1c      	ldr	r2, [pc, #112]	; (9000d028 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
9000cfb6:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000cfb8:	6913      	ldr	r3, [r2, #16]
9000cfba:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000cfbe:	2b10      	cmp	r3, #16
9000cfc0:	d021      	beq.n	9000d006 <HAL_RCC_GetPCLK1Freq+0x52>
9000cfc2:	2b18      	cmp	r3, #24
9000cfc4:	d02a      	beq.n	9000d01c <HAL_RCC_GetPCLK1Freq+0x68>
9000cfc6:	b303      	cbz	r3, 9000d00a <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
9000cfc8:	4818      	ldr	r0, [pc, #96]	; (9000d02c <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000cfca:	4a17      	ldr	r2, [pc, #92]	; (9000d028 <HAL_RCC_GetPCLK1Freq+0x74>)
9000cfcc:	4918      	ldr	r1, [pc, #96]	; (9000d030 <HAL_RCC_GetPCLK1Freq+0x7c>)
9000cfce:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000cfd0:	4c18      	ldr	r4, [pc, #96]	; (9000d034 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000cfd2:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
9000cfd6:	4d18      	ldr	r5, [pc, #96]	; (9000d038 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000cfd8:	5ccb      	ldrb	r3, [r1, r3]
9000cfda:	f003 031f 	and.w	r3, r3, #31
9000cfde:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000cfe0:	6993      	ldr	r3, [r2, #24]
9000cfe2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
9000cfe6:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000cfe8:	5ccb      	ldrb	r3, [r1, r3]
9000cfea:	f003 031f 	and.w	r3, r3, #31
9000cfee:	fa20 f303 	lsr.w	r3, r0, r3
9000cff2:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
9000cff4:	69d2      	ldr	r2, [r2, #28]
9000cff6:	f3c2 1202 	ubfx	r2, r2, #4, #3
9000cffa:	5c88      	ldrb	r0, [r1, r2]
9000cffc:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
9000d000:	fa23 f000 	lsr.w	r0, r3, r0
9000d004:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d006:	480d      	ldr	r0, [pc, #52]	; (9000d03c <HAL_RCC_GetPCLK1Freq+0x88>)
9000d008:	e7df      	b.n	9000cfca <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000d00a:	6813      	ldr	r3, [r2, #0]
9000d00c:	069b      	lsls	r3, r3, #26
9000d00e:	d508      	bpl.n	9000d022 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000d010:	6813      	ldr	r3, [r2, #0]
9000d012:	480b      	ldr	r0, [pc, #44]	; (9000d040 <HAL_RCC_GetPCLK1Freq+0x8c>)
9000d014:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000d018:	40d8      	lsrs	r0, r3
9000d01a:	e7d6      	b.n	9000cfca <HAL_RCC_GetPCLK1Freq+0x16>
9000d01c:	f7ff fa8a 	bl	9000c534 <HAL_RCC_GetSysClockFreq.part.0>
9000d020:	e7d3      	b.n	9000cfca <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000d022:	4807      	ldr	r0, [pc, #28]	; (9000d040 <HAL_RCC_GetPCLK1Freq+0x8c>)
9000d024:	e7d1      	b.n	9000cfca <HAL_RCC_GetPCLK1Freq+0x16>
9000d026:	bf00      	nop
9000d028:	58024400 	.word	0x58024400
9000d02c:	003d0900 	.word	0x003d0900
9000d030:	9002b228 	.word	0x9002b228
9000d034:	24000058 	.word	0x24000058
9000d038:	24000054 	.word	0x24000054
9000d03c:	017d7840 	.word	0x017d7840
9000d040:	03d09000 	.word	0x03d09000

9000d044 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d044:	4a1c      	ldr	r2, [pc, #112]	; (9000d0b8 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
9000d046:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d048:	6913      	ldr	r3, [r2, #16]
9000d04a:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000d04e:	2b10      	cmp	r3, #16
9000d050:	d021      	beq.n	9000d096 <HAL_RCC_GetPCLK2Freq+0x52>
9000d052:	2b18      	cmp	r3, #24
9000d054:	d02a      	beq.n	9000d0ac <HAL_RCC_GetPCLK2Freq+0x68>
9000d056:	b303      	cbz	r3, 9000d09a <HAL_RCC_GetPCLK2Freq+0x56>
      sysclockfreq = CSI_VALUE;
9000d058:	4818      	ldr	r0, [pc, #96]	; (9000d0bc <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000d05a:	4a17      	ldr	r2, [pc, #92]	; (9000d0b8 <HAL_RCC_GetPCLK2Freq+0x74>)
9000d05c:	4918      	ldr	r1, [pc, #96]	; (9000d0c0 <HAL_RCC_GetPCLK2Freq+0x7c>)
9000d05e:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d060:	4c18      	ldr	r4, [pc, #96]	; (9000d0c4 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000d062:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
9000d066:	4d18      	ldr	r5, [pc, #96]	; (9000d0c8 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000d068:	5ccb      	ldrb	r3, [r1, r3]
9000d06a:	f003 031f 	and.w	r3, r3, #31
9000d06e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d070:	6993      	ldr	r3, [r2, #24]
9000d072:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
9000d076:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d078:	5ccb      	ldrb	r3, [r1, r3]
9000d07a:	f003 031f 	and.w	r3, r3, #31
9000d07e:	fa20 f303 	lsr.w	r3, r0, r3
9000d082:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
9000d084:	69d2      	ldr	r2, [r2, #28]
9000d086:	f3c2 2202 	ubfx	r2, r2, #8, #3
9000d08a:	5c88      	ldrb	r0, [r1, r2]
9000d08c:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
9000d090:	fa23 f000 	lsr.w	r0, r3, r0
9000d094:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d096:	480d      	ldr	r0, [pc, #52]	; (9000d0cc <HAL_RCC_GetPCLK2Freq+0x88>)
9000d098:	e7df      	b.n	9000d05a <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000d09a:	6813      	ldr	r3, [r2, #0]
9000d09c:	069b      	lsls	r3, r3, #26
9000d09e:	d508      	bpl.n	9000d0b2 <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000d0a0:	6813      	ldr	r3, [r2, #0]
9000d0a2:	480b      	ldr	r0, [pc, #44]	; (9000d0d0 <HAL_RCC_GetPCLK2Freq+0x8c>)
9000d0a4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000d0a8:	40d8      	lsrs	r0, r3
9000d0aa:	e7d6      	b.n	9000d05a <HAL_RCC_GetPCLK2Freq+0x16>
9000d0ac:	f7ff fa42 	bl	9000c534 <HAL_RCC_GetSysClockFreq.part.0>
9000d0b0:	e7d3      	b.n	9000d05a <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000d0b2:	4807      	ldr	r0, [pc, #28]	; (9000d0d0 <HAL_RCC_GetPCLK2Freq+0x8c>)
9000d0b4:	e7d1      	b.n	9000d05a <HAL_RCC_GetPCLK2Freq+0x16>
9000d0b6:	bf00      	nop
9000d0b8:	58024400 	.word	0x58024400
9000d0bc:	003d0900 	.word	0x003d0900
9000d0c0:	9002b228 	.word	0x9002b228
9000d0c4:	24000058 	.word	0x24000058
9000d0c8:	24000054 	.word	0x24000054
9000d0cc:	017d7840 	.word	0x017d7840
9000d0d0:	03d09000 	.word	0x03d09000

9000d0d4 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
9000d0d4:	4b13      	ldr	r3, [pc, #76]	; (9000d124 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
9000d0d6:	223f      	movs	r2, #63	; 0x3f
9000d0d8:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
9000d0da:	691a      	ldr	r2, [r3, #16]
9000d0dc:	f002 0207 	and.w	r2, r2, #7
9000d0e0:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
9000d0e2:	699a      	ldr	r2, [r3, #24]
9000d0e4:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
9000d0e8:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
9000d0ea:	699a      	ldr	r2, [r3, #24]
9000d0ec:	f002 020f 	and.w	r2, r2, #15
9000d0f0:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
9000d0f2:	699a      	ldr	r2, [r3, #24]
9000d0f4:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000d0f8:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
9000d0fa:	69da      	ldr	r2, [r3, #28]
9000d0fc:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000d100:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
9000d102:	69da      	ldr	r2, [r3, #28]
9000d104:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000d108:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000d10a:	6a1b      	ldr	r3, [r3, #32]
{
9000d10c:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000d10e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000d112:	4c05      	ldr	r4, [pc, #20]	; (9000d128 <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000d114:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000d116:	6823      	ldr	r3, [r4, #0]
}
9000d118:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000d11c:	f003 030f 	and.w	r3, r3, #15
9000d120:	600b      	str	r3, [r1, #0]
}
9000d122:	4770      	bx	lr
9000d124:	58024400 	.word	0x58024400
9000d128:	52002000 	.word	0x52002000

9000d12c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
9000d12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000d12e:	4c3a      	ldr	r4, [pc, #232]	; (9000d218 <RCCEx_PLL2_Config+0xec>)
9000d130:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000d132:	f003 0303 	and.w	r3, r3, #3
9000d136:	2b03      	cmp	r3, #3
9000d138:	d067      	beq.n	9000d20a <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
9000d13a:	6823      	ldr	r3, [r4, #0]
9000d13c:	4606      	mov	r6, r0
9000d13e:	460f      	mov	r7, r1
9000d140:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
9000d144:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000d146:	f7fc f93d 	bl	900093c4 <HAL_GetTick>
9000d14a:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000d14c:	e004      	b.n	9000d158 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000d14e:	f7fc f939 	bl	900093c4 <HAL_GetTick>
9000d152:	1b43      	subs	r3, r0, r5
9000d154:	2b02      	cmp	r3, #2
9000d156:	d856      	bhi.n	9000d206 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000d158:	6823      	ldr	r3, [r4, #0]
9000d15a:	011a      	lsls	r2, r3, #4
9000d15c:	d4f7      	bmi.n	9000d14e <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
9000d15e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000d160:	6832      	ldr	r2, [r6, #0]
9000d162:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
9000d166:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
9000d16a:	62a3      	str	r3, [r4, #40]	; 0x28
9000d16c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
9000d170:	3b01      	subs	r3, #1
9000d172:	3a01      	subs	r2, #1
9000d174:	025b      	lsls	r3, r3, #9
9000d176:	0412      	lsls	r2, r2, #16
9000d178:	b29b      	uxth	r3, r3
9000d17a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000d17e:	4313      	orrs	r3, r2
9000d180:	6872      	ldr	r2, [r6, #4]
9000d182:	3a01      	subs	r2, #1
9000d184:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000d188:	4313      	orrs	r3, r2
9000d18a:	6932      	ldr	r2, [r6, #16]
9000d18c:	3a01      	subs	r2, #1
9000d18e:	0612      	lsls	r2, r2, #24
9000d190:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000d194:	4313      	orrs	r3, r2
9000d196:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
9000d198:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000d19a:	6972      	ldr	r2, [r6, #20]
9000d19c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
9000d1a0:	4313      	orrs	r3, r2
9000d1a2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000d1a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000d1a6:	69b3      	ldr	r3, [r6, #24]
9000d1a8:	f022 0220 	bic.w	r2, r2, #32
9000d1ac:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000d1ae:	4b1b      	ldr	r3, [pc, #108]	; (9000d21c <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000d1b0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
9000d1b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000d1b4:	f022 0210 	bic.w	r2, r2, #16
9000d1b8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000d1ba:	6be1      	ldr	r1, [r4, #60]	; 0x3c
9000d1bc:	69f2      	ldr	r2, [r6, #28]
9000d1be:	400b      	ands	r3, r1
9000d1c0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000d1c4:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
9000d1c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000d1c8:	f043 0310 	orr.w	r3, r3, #16
9000d1cc:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000d1ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
9000d1d0:	b1ef      	cbz	r7, 9000d20e <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000d1d2:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
9000d1d4:	bf0c      	ite	eq
9000d1d6:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
9000d1da:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
9000d1de:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
9000d1e0:	4c0d      	ldr	r4, [pc, #52]	; (9000d218 <RCCEx_PLL2_Config+0xec>)
9000d1e2:	6823      	ldr	r3, [r4, #0]
9000d1e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
9000d1e8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000d1ea:	f7fc f8eb 	bl	900093c4 <HAL_GetTick>
9000d1ee:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000d1f0:	e004      	b.n	9000d1fc <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000d1f2:	f7fc f8e7 	bl	900093c4 <HAL_GetTick>
9000d1f6:	1b40      	subs	r0, r0, r5
9000d1f8:	2802      	cmp	r0, #2
9000d1fa:	d804      	bhi.n	9000d206 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000d1fc:	6823      	ldr	r3, [r4, #0]
9000d1fe:	011b      	lsls	r3, r3, #4
9000d200:	d5f7      	bpl.n	9000d1f2 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
9000d202:	2000      	movs	r0, #0
}
9000d204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
9000d206:	2003      	movs	r0, #3
}
9000d208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000d20a:	2001      	movs	r0, #1
}
9000d20c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000d20e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
9000d212:	62e3      	str	r3, [r4, #44]	; 0x2c
9000d214:	e7e4      	b.n	9000d1e0 <RCCEx_PLL2_Config+0xb4>
9000d216:	bf00      	nop
9000d218:	58024400 	.word	0x58024400
9000d21c:	ffff0007 	.word	0xffff0007

9000d220 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
9000d220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000d222:	4c3a      	ldr	r4, [pc, #232]	; (9000d30c <RCCEx_PLL3_Config+0xec>)
9000d224:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000d226:	f003 0303 	and.w	r3, r3, #3
9000d22a:	2b03      	cmp	r3, #3
9000d22c:	d067      	beq.n	9000d2fe <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
9000d22e:	6823      	ldr	r3, [r4, #0]
9000d230:	4606      	mov	r6, r0
9000d232:	460f      	mov	r7, r1
9000d234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
9000d238:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000d23a:	f7fc f8c3 	bl	900093c4 <HAL_GetTick>
9000d23e:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000d240:	e004      	b.n	9000d24c <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000d242:	f7fc f8bf 	bl	900093c4 <HAL_GetTick>
9000d246:	1b43      	subs	r3, r0, r5
9000d248:	2b02      	cmp	r3, #2
9000d24a:	d856      	bhi.n	9000d2fa <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000d24c:	6823      	ldr	r3, [r4, #0]
9000d24e:	009a      	lsls	r2, r3, #2
9000d250:	d4f7      	bmi.n	9000d242 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
9000d252:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000d254:	6832      	ldr	r2, [r6, #0]
9000d256:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
9000d25a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
9000d25e:	62a3      	str	r3, [r4, #40]	; 0x28
9000d260:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
9000d264:	3b01      	subs	r3, #1
9000d266:	3a01      	subs	r2, #1
9000d268:	025b      	lsls	r3, r3, #9
9000d26a:	0412      	lsls	r2, r2, #16
9000d26c:	b29b      	uxth	r3, r3
9000d26e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000d272:	4313      	orrs	r3, r2
9000d274:	6872      	ldr	r2, [r6, #4]
9000d276:	3a01      	subs	r2, #1
9000d278:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000d27c:	4313      	orrs	r3, r2
9000d27e:	6932      	ldr	r2, [r6, #16]
9000d280:	3a01      	subs	r2, #1
9000d282:	0612      	lsls	r2, r2, #24
9000d284:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000d288:	4313      	orrs	r3, r2
9000d28a:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
9000d28c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000d28e:	6972      	ldr	r2, [r6, #20]
9000d290:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
9000d294:	4313      	orrs	r3, r2
9000d296:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000d298:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000d29a:	69b3      	ldr	r3, [r6, #24]
9000d29c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
9000d2a0:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000d2a2:	4b1b      	ldr	r3, [pc, #108]	; (9000d310 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000d2a4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
9000d2a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000d2a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
9000d2ac:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000d2ae:	6c61      	ldr	r1, [r4, #68]	; 0x44
9000d2b0:	69f2      	ldr	r2, [r6, #28]
9000d2b2:	400b      	ands	r3, r1
9000d2b4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000d2b8:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
9000d2ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000d2bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000d2c0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000d2c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
9000d2c4:	b1ef      	cbz	r7, 9000d302 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000d2c6:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
9000d2c8:	bf0c      	ite	eq
9000d2ca:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
9000d2ce:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
9000d2d2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
9000d2d4:	4c0d      	ldr	r4, [pc, #52]	; (9000d30c <RCCEx_PLL3_Config+0xec>)
9000d2d6:	6823      	ldr	r3, [r4, #0]
9000d2d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
9000d2dc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000d2de:	f7fc f871 	bl	900093c4 <HAL_GetTick>
9000d2e2:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000d2e4:	e004      	b.n	9000d2f0 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000d2e6:	f7fc f86d 	bl	900093c4 <HAL_GetTick>
9000d2ea:	1b40      	subs	r0, r0, r5
9000d2ec:	2802      	cmp	r0, #2
9000d2ee:	d804      	bhi.n	9000d2fa <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000d2f0:	6823      	ldr	r3, [r4, #0]
9000d2f2:	009b      	lsls	r3, r3, #2
9000d2f4:	d5f7      	bpl.n	9000d2e6 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
9000d2f6:	2000      	movs	r0, #0
}
9000d2f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
9000d2fa:	2003      	movs	r0, #3
}
9000d2fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000d2fe:	2001      	movs	r0, #1
}
9000d300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000d302:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
9000d306:	62e3      	str	r3, [r4, #44]	; 0x2c
9000d308:	e7e4      	b.n	9000d2d4 <RCCEx_PLL3_Config+0xb4>
9000d30a:	bf00      	nop
9000d30c:	58024400 	.word	0x58024400
9000d310:	ffff0007 	.word	0xffff0007

9000d314 <HAL_RCCEx_PeriphCLKConfig>:
{
9000d314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000d318:	e9d0 3200 	ldrd	r3, r2, [r0]
{
9000d31c:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000d31e:	011d      	lsls	r5, r3, #4
9000d320:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
9000d324:	d523      	bpl.n	9000d36e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000d326:	6e81      	ldr	r1, [r0, #104]	; 0x68
9000d328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000d32c:	f000 8553 	beq.w	9000ddd6 <HAL_RCCEx_PeriphCLKConfig+0xac2>
9000d330:	d812      	bhi.n	9000d358 <HAL_RCCEx_PeriphCLKConfig+0x44>
9000d332:	2900      	cmp	r1, #0
9000d334:	f000 85a9 	beq.w	9000de8a <HAL_RCCEx_PeriphCLKConfig+0xb76>
9000d338:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
9000d33c:	f040 85a2 	bne.w	9000de84 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000d340:	2102      	movs	r1, #2
9000d342:	3008      	adds	r0, #8
9000d344:	f7ff fef2 	bl	9000d12c <RCCEx_PLL2_Config>
9000d348:	4606      	mov	r6, r0
    if (ret == HAL_OK)
9000d34a:	2e00      	cmp	r6, #0
9000d34c:	f040 8522 	bne.w	9000dd94 <HAL_RCCEx_PeriphCLKConfig+0xa80>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000d350:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000d352:	e9d4 3200 	ldrd	r3, r2, [r4]
9000d356:	e003      	b.n	9000d360 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000d358:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
9000d35c:	f040 8592 	bne.w	9000de84 <HAL_RCCEx_PeriphCLKConfig+0xb70>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000d360:	4dae      	ldr	r5, [pc, #696]	; (9000d61c <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000d362:	2600      	movs	r6, #0
9000d364:	6d28      	ldr	r0, [r5, #80]	; 0x50
9000d366:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
9000d36a:	4301      	orrs	r1, r0
9000d36c:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000d36e:	05d8      	lsls	r0, r3, #23
9000d370:	d50a      	bpl.n	9000d388 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
9000d372:	6da1      	ldr	r1, [r4, #88]	; 0x58
9000d374:	2904      	cmp	r1, #4
9000d376:	d806      	bhi.n	9000d386 <HAL_RCCEx_PeriphCLKConfig+0x72>
9000d378:	e8df f011 	tbh	[pc, r1, lsl #1]
9000d37c:	053d0536 	.word	0x053d0536
9000d380:	0323051a 	.word	0x0323051a
9000d384:	0323      	.short	0x0323
9000d386:	2601      	movs	r6, #1
9000d388:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000d38a:	0599      	lsls	r1, r3, #22
9000d38c:	d51d      	bpl.n	9000d3ca <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai23ClockSelection)
9000d38e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
9000d390:	2980      	cmp	r1, #128	; 0x80
9000d392:	f000 8516 	beq.w	9000ddc2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
9000d396:	f200 80f9 	bhi.w	9000d58c <HAL_RCCEx_PeriphCLKConfig+0x278>
9000d39a:	2900      	cmp	r1, #0
9000d39c:	f000 8433 	beq.w	9000dc06 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
9000d3a0:	2940      	cmp	r1, #64	; 0x40
9000d3a2:	f040 80fa 	bne.w	9000d59a <HAL_RCCEx_PeriphCLKConfig+0x286>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000d3a6:	2100      	movs	r1, #0
9000d3a8:	f104 0008 	add.w	r0, r4, #8
9000d3ac:	f7ff febe 	bl	9000d12c <RCCEx_PLL2_Config>
9000d3b0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000d3b2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000d3b6:	2d00      	cmp	r5, #0
9000d3b8:	f040 83fe 	bne.w	9000dbb8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
9000d3bc:	4f97      	ldr	r7, [pc, #604]	; (9000d61c <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000d3be:	6de0      	ldr	r0, [r4, #92]	; 0x5c
9000d3c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000d3c2:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
9000d3c6:	4301      	orrs	r1, r0
9000d3c8:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000d3ca:	055f      	lsls	r7, r3, #21
9000d3cc:	d521      	bpl.n	9000d412 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4AClockSelection)
9000d3ce:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
9000d3d2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
9000d3d6:	f000 8521 	beq.w	9000de1c <HAL_RCCEx_PeriphCLKConfig+0xb08>
9000d3da:	f200 80e1 	bhi.w	9000d5a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
9000d3de:	2900      	cmp	r1, #0
9000d3e0:	f000 8418 	beq.w	9000dc14 <HAL_RCCEx_PeriphCLKConfig+0x900>
9000d3e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000d3e8:	f040 80e2 	bne.w	9000d5b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000d3ec:	2100      	movs	r1, #0
9000d3ee:	f104 0008 	add.w	r0, r4, #8
9000d3f2:	f7ff fe9b 	bl	9000d12c <RCCEx_PLL2_Config>
9000d3f6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000d3f8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000d3fc:	2d00      	cmp	r5, #0
9000d3fe:	f040 83e2 	bne.w	9000dbc6 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
9000d402:	4f86      	ldr	r7, [pc, #536]	; (9000d61c <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000d404:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
9000d408:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000d40a:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
9000d40e:	4301      	orrs	r1, r0
9000d410:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000d412:	0518      	lsls	r0, r3, #20
9000d414:	d521      	bpl.n	9000d45a <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Sai4BClockSelection)
9000d416:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
9000d41a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
9000d41e:	f000 84bd 	beq.w	9000dd9c <HAL_RCCEx_PeriphCLKConfig+0xa88>
9000d422:	f200 80c8 	bhi.w	9000d5b6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
9000d426:	2900      	cmp	r1, #0
9000d428:	f000 83e7 	beq.w	9000dbfa <HAL_RCCEx_PeriphCLKConfig+0x8e6>
9000d42c:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
9000d430:	f040 80c9 	bne.w	9000d5c6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000d434:	2100      	movs	r1, #0
9000d436:	f104 0008 	add.w	r0, r4, #8
9000d43a:	f7ff fe77 	bl	9000d12c <RCCEx_PLL2_Config>
9000d43e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000d440:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000d444:	2d00      	cmp	r5, #0
9000d446:	f040 83b5 	bne.w	9000dbb4 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
9000d44a:	4f74      	ldr	r7, [pc, #464]	; (9000d61c <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000d44c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
9000d450:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000d452:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
9000d456:	4301      	orrs	r1, r0
9000d458:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000d45a:	0199      	lsls	r1, r3, #6
9000d45c:	d518      	bpl.n	9000d490 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->QspiClockSelection)
9000d45e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
9000d460:	2920      	cmp	r1, #32
9000d462:	f000 841f 	beq.w	9000dca4 <HAL_RCCEx_PeriphCLKConfig+0x990>
9000d466:	f200 80b1 	bhi.w	9000d5cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
9000d46a:	b139      	cbz	r1, 9000d47c <HAL_RCCEx_PeriphCLKConfig+0x168>
9000d46c:	2910      	cmp	r1, #16
9000d46e:	f040 80b0 	bne.w	9000d5d2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000d472:	486a      	ldr	r0, [pc, #424]	; (9000d61c <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000d474:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000d476:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000d47a:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000d47c:	2d00      	cmp	r5, #0
9000d47e:	f040 83d8 	bne.w	9000dc32 <HAL_RCCEx_PeriphCLKConfig+0x91e>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
9000d482:	4f66      	ldr	r7, [pc, #408]	; (9000d61c <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000d484:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
9000d486:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000d488:	f021 0130 	bic.w	r1, r1, #48	; 0x30
9000d48c:	4301      	orrs	r1, r0
9000d48e:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000d490:	04df      	lsls	r7, r3, #19
9000d492:	d51f      	bpl.n	9000d4d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi123ClockSelection)
9000d494:	6e21      	ldr	r1, [r4, #96]	; 0x60
9000d496:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
9000d49a:	f000 84b5 	beq.w	9000de08 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
9000d49e:	f200 809b 	bhi.w	9000d5d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
9000d4a2:	2900      	cmp	r1, #0
9000d4a4:	f000 83a3 	beq.w	9000dbee <HAL_RCCEx_PeriphCLKConfig+0x8da>
9000d4a8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
9000d4ac:	f040 809c 	bne.w	9000d5e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000d4b0:	2100      	movs	r1, #0
9000d4b2:	f104 0008 	add.w	r0, r4, #8
9000d4b6:	f7ff fe39 	bl	9000d12c <RCCEx_PLL2_Config>
9000d4ba:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000d4bc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000d4c0:	2d00      	cmp	r5, #0
9000d4c2:	f040 837b 	bne.w	9000dbbc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
9000d4c6:	4f55      	ldr	r7, [pc, #340]	; (9000d61c <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000d4c8:	6e20      	ldr	r0, [r4, #96]	; 0x60
9000d4ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000d4cc:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
9000d4d0:	4301      	orrs	r1, r0
9000d4d2:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000d4d4:	0498      	lsls	r0, r3, #18
9000d4d6:	d51d      	bpl.n	9000d514 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi45ClockSelection)
9000d4d8:	6e61      	ldr	r1, [r4, #100]	; 0x64
9000d4da:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
9000d4de:	f000 8410 	beq.w	9000dd02 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
9000d4e2:	f200 8084 	bhi.w	9000d5ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
9000d4e6:	b159      	cbz	r1, 9000d500 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000d4e8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000d4ec:	f040 8087 	bne.w	9000d5fe <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000d4f0:	2101      	movs	r1, #1
9000d4f2:	f104 0008 	add.w	r0, r4, #8
9000d4f6:	f7ff fe19 	bl	9000d12c <RCCEx_PLL2_Config>
9000d4fa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000d4fc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000d500:	2d00      	cmp	r5, #0
9000d502:	f040 839a 	bne.w	9000dc3a <HAL_RCCEx_PeriphCLKConfig+0x926>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
9000d506:	4f45      	ldr	r7, [pc, #276]	; (9000d61c <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000d508:	6e60      	ldr	r0, [r4, #100]	; 0x64
9000d50a:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000d50c:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
9000d510:	4301      	orrs	r1, r0
9000d512:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000d514:	0459      	lsls	r1, r3, #17
9000d516:	d51d      	bpl.n	9000d554 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi6ClockSelection)
9000d518:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
9000d51c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000d520:	f000 83fb 	beq.w	9000dd1a <HAL_RCCEx_PeriphCLKConfig+0xa06>
9000d524:	d86e      	bhi.n	9000d604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
9000d526:	b151      	cbz	r1, 9000d53e <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000d528:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000d52c:	d172      	bne.n	9000d614 <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000d52e:	2101      	movs	r1, #1
9000d530:	f104 0008 	add.w	r0, r4, #8
9000d534:	f7ff fdfa 	bl	9000d12c <RCCEx_PLL2_Config>
9000d538:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000d53a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000d53e:	2d00      	cmp	r5, #0
9000d540:	f040 837f 	bne.w	9000dc42 <HAL_RCCEx_PeriphCLKConfig+0x92e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
9000d544:	4f35      	ldr	r7, [pc, #212]	; (9000d61c <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000d546:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
9000d54a:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000d54c:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
9000d550:	4301      	orrs	r1, r0
9000d552:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000d554:	041f      	lsls	r7, r3, #16
9000d556:	d50d      	bpl.n	9000d574 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch (PeriphClkInit->FdcanClockSelection)
9000d558:	6f21      	ldr	r1, [r4, #112]	; 0x70
9000d55a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000d55e:	f000 83c8 	beq.w	9000dcf2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
9000d562:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000d566:	f000 823b 	beq.w	9000d9e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
9000d56a:	2900      	cmp	r1, #0
9000d56c:	f000 8240 	beq.w	9000d9f0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
9000d570:	2601      	movs	r6, #1
9000d572:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000d574:	01d8      	lsls	r0, r3, #7
9000d576:	d562      	bpl.n	9000d63e <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->FmcClockSelection)
9000d578:	6ca1      	ldr	r1, [r4, #72]	; 0x48
9000d57a:	2903      	cmp	r1, #3
9000d57c:	f200 84bf 	bhi.w	9000defe <HAL_RCCEx_PeriphCLKConfig+0xbea>
9000d580:	e8df f011 	tbh	[pc, r1, lsl #1]
9000d584:	004e0053 	.word	0x004e0053
9000d588:	005303e2 	.word	0x005303e2
    switch (PeriphClkInit->Sai23ClockSelection)
9000d58c:	29c0      	cmp	r1, #192	; 0xc0
9000d58e:	f43f af12 	beq.w	9000d3b6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
9000d592:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
9000d596:	f43f af0e 	beq.w	9000d3b6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
9000d59a:	2601      	movs	r6, #1
9000d59c:	4635      	mov	r5, r6
9000d59e:	e714      	b.n	9000d3ca <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai4AClockSelection)
9000d5a0:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
9000d5a4:	f43f af2a 	beq.w	9000d3fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000d5a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
9000d5ac:	f43f af26 	beq.w	9000d3fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000d5b0:	2601      	movs	r6, #1
9000d5b2:	4635      	mov	r5, r6
9000d5b4:	e72d      	b.n	9000d412 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4BClockSelection)
9000d5b6:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
9000d5ba:	f43f af43 	beq.w	9000d444 <HAL_RCCEx_PeriphCLKConfig+0x130>
9000d5be:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
9000d5c2:	f43f af3f 	beq.w	9000d444 <HAL_RCCEx_PeriphCLKConfig+0x130>
9000d5c6:	2601      	movs	r6, #1
9000d5c8:	4635      	mov	r5, r6
9000d5ca:	e746      	b.n	9000d45a <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
9000d5cc:	2930      	cmp	r1, #48	; 0x30
9000d5ce:	f43f af55 	beq.w	9000d47c <HAL_RCCEx_PeriphCLKConfig+0x168>
9000d5d2:	2601      	movs	r6, #1
9000d5d4:	4635      	mov	r5, r6
9000d5d6:	e75b      	b.n	9000d490 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->Spi123ClockSelection)
9000d5d8:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
9000d5dc:	f43f af70 	beq.w	9000d4c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
9000d5e0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
9000d5e4:	f43f af6c 	beq.w	9000d4c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
9000d5e8:	2601      	movs	r6, #1
9000d5ea:	4635      	mov	r5, r6
9000d5ec:	e772      	b.n	9000d4d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi45ClockSelection)
9000d5ee:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
9000d5f2:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
9000d5f6:	d083      	beq.n	9000d500 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000d5f8:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
9000d5fc:	d080      	beq.n	9000d500 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000d5fe:	2601      	movs	r6, #1
9000d600:	4635      	mov	r5, r6
9000d602:	e787      	b.n	9000d514 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi6ClockSelection)
9000d604:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
9000d608:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
9000d60c:	d097      	beq.n	9000d53e <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000d60e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
9000d612:	d094      	beq.n	9000d53e <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000d614:	2601      	movs	r6, #1
9000d616:	4635      	mov	r5, r6
9000d618:	e79c      	b.n	9000d554 <HAL_RCCEx_PeriphCLKConfig+0x240>
9000d61a:	bf00      	nop
9000d61c:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000d620:	4839      	ldr	r0, [pc, #228]	; (9000d708 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
9000d622:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000d624:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000d628:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000d62a:	2d00      	cmp	r5, #0
9000d62c:	f040 8303 	bne.w	9000dc36 <HAL_RCCEx_PeriphCLKConfig+0x922>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
9000d630:	4f35      	ldr	r7, [pc, #212]	; (9000d708 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
9000d632:	6ca0      	ldr	r0, [r4, #72]	; 0x48
9000d634:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000d636:	f021 0103 	bic.w	r1, r1, #3
9000d63a:	4301      	orrs	r1, r0
9000d63c:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000d63e:	0259      	lsls	r1, r3, #9
9000d640:	f100 826a 	bmi.w	9000db18 <HAL_RCCEx_PeriphCLKConfig+0x804>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000d644:	07d8      	lsls	r0, r3, #31
9000d646:	d52f      	bpl.n	9000d6a8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    switch (PeriphClkInit->Usart16ClockSelection)
9000d648:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
9000d64a:	2928      	cmp	r1, #40	; 0x28
9000d64c:	d82a      	bhi.n	9000d6a4 <HAL_RCCEx_PeriphCLKConfig+0x390>
9000d64e:	e8df f011 	tbh	[pc, r1, lsl #1]
9000d652:	020a      	.short	0x020a
9000d654:	00290029 	.word	0x00290029
9000d658:	00290029 	.word	0x00290029
9000d65c:	00290029 	.word	0x00290029
9000d660:	02020029 	.word	0x02020029
9000d664:	00290029 	.word	0x00290029
9000d668:	00290029 	.word	0x00290029
9000d66c:	00290029 	.word	0x00290029
9000d670:	04070029 	.word	0x04070029
9000d674:	00290029 	.word	0x00290029
9000d678:	00290029 	.word	0x00290029
9000d67c:	00290029 	.word	0x00290029
9000d680:	020a0029 	.word	0x020a0029
9000d684:	00290029 	.word	0x00290029
9000d688:	00290029 	.word	0x00290029
9000d68c:	00290029 	.word	0x00290029
9000d690:	020a0029 	.word	0x020a0029
9000d694:	00290029 	.word	0x00290029
9000d698:	00290029 	.word	0x00290029
9000d69c:	00290029 	.word	0x00290029
9000d6a0:	020a0029 	.word	0x020a0029
9000d6a4:	2601      	movs	r6, #1
9000d6a6:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000d6a8:	0799      	lsls	r1, r3, #30
9000d6aa:	d51d      	bpl.n	9000d6e8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->Usart234578ClockSelection)
9000d6ac:	6fa1      	ldr	r1, [r4, #120]	; 0x78
9000d6ae:	2905      	cmp	r1, #5
9000d6b0:	f200 8421 	bhi.w	9000def6 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
9000d6b4:	e8df f011 	tbh	[pc, r1, lsl #1]
9000d6b8:	0006000e 	.word	0x0006000e
9000d6bc:	000e03c8 	.word	0x000e03c8
9000d6c0:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000d6c4:	2101      	movs	r1, #1
9000d6c6:	f104 0008 	add.w	r0, r4, #8
9000d6ca:	f7ff fd2f 	bl	9000d12c <RCCEx_PLL2_Config>
9000d6ce:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000d6d0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000d6d4:	2d00      	cmp	r5, #0
9000d6d6:	f040 82b8 	bne.w	9000dc4a <HAL_RCCEx_PeriphCLKConfig+0x936>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
9000d6da:	4f0b      	ldr	r7, [pc, #44]	; (9000d708 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
9000d6dc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
9000d6de:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000d6e0:	f021 0107 	bic.w	r1, r1, #7
9000d6e4:	4301      	orrs	r1, r0
9000d6e6:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000d6e8:	075f      	lsls	r7, r3, #29
9000d6ea:	d522      	bpl.n	9000d732 <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
9000d6ec:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
9000d6f0:	2905      	cmp	r1, #5
9000d6f2:	f200 8408 	bhi.w	9000df06 <HAL_RCCEx_PeriphCLKConfig+0xbf2>
9000d6f6:	e8df f011 	tbh	[pc, r1, lsl #1]
9000d6fa:	0011      	.short	0x0011
9000d6fc:	039b0009 	.word	0x039b0009
9000d700:	00110011 	.word	0x00110011
9000d704:	0011      	.short	0x0011
9000d706:	bf00      	nop
9000d708:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000d70c:	2101      	movs	r1, #1
9000d70e:	f104 0008 	add.w	r0, r4, #8
9000d712:	f7ff fd0b 	bl	9000d12c <RCCEx_PLL2_Config>
9000d716:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000d718:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000d71c:	2d00      	cmp	r5, #0
9000d71e:	f040 8286 	bne.w	9000dc2e <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
9000d722:	4fae      	ldr	r7, [pc, #696]	; (9000d9dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000d724:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
9000d728:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000d72a:	f021 0107 	bic.w	r1, r1, #7
9000d72e:	4301      	orrs	r1, r0
9000d730:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000d732:	0698      	lsls	r0, r3, #26
9000d734:	d51f      	bpl.n	9000d776 <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim1ClockSelection)
9000d736:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
9000d73a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000d73e:	f000 82f7 	beq.w	9000dd30 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
9000d742:	f200 810b 	bhi.w	9000d95c <HAL_RCCEx_PeriphCLKConfig+0x648>
9000d746:	b159      	cbz	r1, 9000d760 <HAL_RCCEx_PeriphCLKConfig+0x44c>
9000d748:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000d74c:	f040 8110 	bne.w	9000d970 <HAL_RCCEx_PeriphCLKConfig+0x65c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000d750:	2100      	movs	r1, #0
9000d752:	f104 0008 	add.w	r0, r4, #8
9000d756:	f7ff fce9 	bl	9000d12c <RCCEx_PLL2_Config>
9000d75a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000d75c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000d760:	2d00      	cmp	r5, #0
9000d762:	f040 8260 	bne.w	9000dc26 <HAL_RCCEx_PeriphCLKConfig+0x912>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
9000d766:	4f9d      	ldr	r7, [pc, #628]	; (9000d9dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000d768:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
9000d76c:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000d76e:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
9000d772:	4301      	orrs	r1, r0
9000d774:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000d776:	0659      	lsls	r1, r3, #25
9000d778:	d51f      	bpl.n	9000d7ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim2ClockSelection)
9000d77a:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
9000d77e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
9000d782:	f000 829b 	beq.w	9000dcbc <HAL_RCCEx_PeriphCLKConfig+0x9a8>
9000d786:	f200 80f6 	bhi.w	9000d976 <HAL_RCCEx_PeriphCLKConfig+0x662>
9000d78a:	b159      	cbz	r1, 9000d7a4 <HAL_RCCEx_PeriphCLKConfig+0x490>
9000d78c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
9000d790:	f040 80fb 	bne.w	9000d98a <HAL_RCCEx_PeriphCLKConfig+0x676>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000d794:	2100      	movs	r1, #0
9000d796:	f104 0008 	add.w	r0, r4, #8
9000d79a:	f7ff fcc7 	bl	9000d12c <RCCEx_PLL2_Config>
9000d79e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000d7a0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000d7a4:	2d00      	cmp	r5, #0
9000d7a6:	f040 824e 	bne.w	9000dc46 <HAL_RCCEx_PeriphCLKConfig+0x932>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
9000d7aa:	4f8c      	ldr	r7, [pc, #560]	; (9000d9dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000d7ac:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
9000d7b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000d7b2:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
9000d7b6:	4301      	orrs	r1, r0
9000d7b8:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000d7ba:	061f      	lsls	r7, r3, #24
9000d7bc:	d51f      	bpl.n	9000d7fe <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->Lptim345ClockSelection)
9000d7be:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
9000d7c2:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
9000d7c6:	f000 8289 	beq.w	9000dcdc <HAL_RCCEx_PeriphCLKConfig+0x9c8>
9000d7ca:	f200 80e1 	bhi.w	9000d990 <HAL_RCCEx_PeriphCLKConfig+0x67c>
9000d7ce:	b159      	cbz	r1, 9000d7e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
9000d7d0:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
9000d7d4:	f040 80e6 	bne.w	9000d9a4 <HAL_RCCEx_PeriphCLKConfig+0x690>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000d7d8:	2100      	movs	r1, #0
9000d7da:	f104 0008 	add.w	r0, r4, #8
9000d7de:	f7ff fca5 	bl	9000d12c <RCCEx_PLL2_Config>
9000d7e2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000d7e4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000d7e8:	2d00      	cmp	r5, #0
9000d7ea:	f040 8228 	bne.w	9000dc3e <HAL_RCCEx_PeriphCLKConfig+0x92a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
9000d7ee:	4f7b      	ldr	r7, [pc, #492]	; (9000d9dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000d7f0:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
9000d7f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000d7f6:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
9000d7fa:	4301      	orrs	r1, r0
9000d7fc:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000d7fe:	0718      	lsls	r0, r3, #28
9000d800:	d50b      	bpl.n	9000d81a <HAL_RCCEx_PeriphCLKConfig+0x506>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
9000d802:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
9000d806:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
9000d80a:	f000 82a9 	beq.w	9000dd60 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000d80e:	4f73      	ldr	r7, [pc, #460]	; (9000d9dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000d810:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000d812:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
9000d816:	4301      	orrs	r1, r0
9000d818:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000d81a:	06d9      	lsls	r1, r3, #27
9000d81c:	d50b      	bpl.n	9000d836 <HAL_RCCEx_PeriphCLKConfig+0x522>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
9000d81e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
9000d822:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
9000d826:	f000 82a8 	beq.w	9000dd7a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000d82a:	4f6c      	ldr	r7, [pc, #432]	; (9000d9dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000d82c:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000d82e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
9000d832:	4301      	orrs	r1, r0
9000d834:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000d836:	031f      	lsls	r7, r3, #12
9000d838:	d50e      	bpl.n	9000d858 <HAL_RCCEx_PeriphCLKConfig+0x544>
    switch (PeriphClkInit->AdcClockSelection)
9000d83a:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
9000d83e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000d842:	f000 80f4 	beq.w	9000da2e <HAL_RCCEx_PeriphCLKConfig+0x71a>
9000d846:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
9000d84a:	f000 80f8 	beq.w	9000da3e <HAL_RCCEx_PeriphCLKConfig+0x72a>
9000d84e:	2900      	cmp	r1, #0
9000d850:	f000 821c 	beq.w	9000dc8c <HAL_RCCEx_PeriphCLKConfig+0x978>
9000d854:	2601      	movs	r6, #1
9000d856:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000d858:	0358      	lsls	r0, r3, #13
9000d85a:	d50f      	bpl.n	9000d87c <HAL_RCCEx_PeriphCLKConfig+0x568>
    switch (PeriphClkInit->UsbClockSelection)
9000d85c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
9000d860:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000d864:	f000 80cf 	beq.w	9000da06 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
9000d868:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
9000d86c:	f000 80d3 	beq.w	9000da16 <HAL_RCCEx_PeriphCLKConfig+0x702>
9000d870:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
9000d874:	f000 8202 	beq.w	9000dc7c <HAL_RCCEx_PeriphCLKConfig+0x968>
9000d878:	2601      	movs	r6, #1
9000d87a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000d87c:	03d9      	lsls	r1, r3, #15
9000d87e:	d509      	bpl.n	9000d894 <HAL_RCCEx_PeriphCLKConfig+0x580>
    switch (PeriphClkInit->SdmmcClockSelection)
9000d880:	6d21      	ldr	r1, [r4, #80]	; 0x50
9000d882:	2900      	cmp	r1, #0
9000d884:	f000 81f1 	beq.w	9000dc6a <HAL_RCCEx_PeriphCLKConfig+0x956>
9000d888:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000d88c:	f000 819d 	beq.w	9000dbca <HAL_RCCEx_PeriphCLKConfig+0x8b6>
9000d890:	2601      	movs	r6, #1
9000d892:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000d894:	009f      	lsls	r7, r3, #2
9000d896:	f100 80f1 	bmi.w	9000da7c <HAL_RCCEx_PeriphCLKConfig+0x768>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000d89a:	0398      	lsls	r0, r3, #14
9000d89c:	d50c      	bpl.n	9000d8b8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->RngClockSelection)
9000d89e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
9000d8a2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
9000d8a6:	f000 81d8 	beq.w	9000dc5a <HAL_RCCEx_PeriphCLKConfig+0x946>
9000d8aa:	d97e      	bls.n	9000d9aa <HAL_RCCEx_PeriphCLKConfig+0x696>
9000d8ac:	f421 7080 	bic.w	r0, r1, #256	; 0x100
9000d8b0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
9000d8b4:	d07b      	beq.n	9000d9ae <HAL_RCCEx_PeriphCLKConfig+0x69a>
9000d8b6:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
9000d8b8:	02d9      	lsls	r1, r3, #11
9000d8ba:	d506      	bpl.n	9000d8ca <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
9000d8bc:	4847      	ldr	r0, [pc, #284]	; (9000d9dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000d8be:	6f65      	ldr	r5, [r4, #116]	; 0x74
9000d8c0:	6d01      	ldr	r1, [r0, #80]	; 0x50
9000d8c2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
9000d8c6:	4329      	orrs	r1, r5
9000d8c8:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
9000d8ca:	00df      	lsls	r7, r3, #3
9000d8cc:	d507      	bpl.n	9000d8de <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
9000d8ce:	4843      	ldr	r0, [pc, #268]	; (9000d9dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000d8d0:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
9000d8d4:	6901      	ldr	r1, [r0, #16]
9000d8d6:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
9000d8da:	4329      	orrs	r1, r5
9000d8dc:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
9000d8de:	029d      	lsls	r5, r3, #10
9000d8e0:	d506      	bpl.n	9000d8f0 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
9000d8e2:	483e      	ldr	r0, [pc, #248]	; (9000d9dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000d8e4:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
9000d8e6:	6d01      	ldr	r1, [r0, #80]	; 0x50
9000d8e8:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
9000d8ec:	4329      	orrs	r1, r5
9000d8ee:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
9000d8f0:	0058      	lsls	r0, r3, #1
9000d8f2:	d509      	bpl.n	9000d908 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
9000d8f4:	4939      	ldr	r1, [pc, #228]	; (9000d9dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000d8f6:	6908      	ldr	r0, [r1, #16]
9000d8f8:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
9000d8fc:	6108      	str	r0, [r1, #16]
9000d8fe:	6908      	ldr	r0, [r1, #16]
9000d900:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
9000d904:	4328      	orrs	r0, r5
9000d906:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
9000d908:	2b00      	cmp	r3, #0
9000d90a:	da06      	bge.n	9000d91a <HAL_RCCEx_PeriphCLKConfig+0x606>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
9000d90c:	4833      	ldr	r0, [pc, #204]	; (9000d9dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000d90e:	6d65      	ldr	r5, [r4, #84]	; 0x54
9000d910:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
9000d912:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
9000d916:	4329      	orrs	r1, r5
9000d918:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
9000d91a:	0219      	lsls	r1, r3, #8
9000d91c:	d507      	bpl.n	9000d92e <HAL_RCCEx_PeriphCLKConfig+0x61a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
9000d91e:	492f      	ldr	r1, [pc, #188]	; (9000d9dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000d920:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
9000d924:	6d4b      	ldr	r3, [r1, #84]	; 0x54
9000d926:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
9000d92a:	4303      	orrs	r3, r0
9000d92c:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
9000d92e:	07d3      	lsls	r3, r2, #31
9000d930:	f100 80b0 	bmi.w	9000da94 <HAL_RCCEx_PeriphCLKConfig+0x780>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000d934:	0797      	lsls	r7, r2, #30
9000d936:	f100 80ba 	bmi.w	9000daae <HAL_RCCEx_PeriphCLKConfig+0x79a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000d93a:	0755      	lsls	r5, r2, #29
9000d93c:	f100 80c4 	bmi.w	9000dac8 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000d940:	0710      	lsls	r0, r2, #28
9000d942:	f100 80ce 	bmi.w	9000dae2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000d946:	06d1      	lsls	r1, r2, #27
9000d948:	f100 80d8 	bmi.w	9000dafc <HAL_RCCEx_PeriphCLKConfig+0x7e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000d94c:	0692      	lsls	r2, r2, #26
9000d94e:	f100 8125 	bmi.w	9000db9c <HAL_RCCEx_PeriphCLKConfig+0x888>
    return HAL_OK;
9000d952:	1e30      	subs	r0, r6, #0
9000d954:	bf18      	it	ne
9000d956:	2001      	movne	r0, #1
}
9000d958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
9000d95c:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
9000d960:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
9000d964:	f43f aefc 	beq.w	9000d760 <HAL_RCCEx_PeriphCLKConfig+0x44c>
9000d968:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
9000d96c:	f43f aef8 	beq.w	9000d760 <HAL_RCCEx_PeriphCLKConfig+0x44c>
9000d970:	2601      	movs	r6, #1
9000d972:	4635      	mov	r5, r6
9000d974:	e6ff      	b.n	9000d776 <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim2ClockSelection)
9000d976:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
9000d97a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
9000d97e:	f43f af11 	beq.w	9000d7a4 <HAL_RCCEx_PeriphCLKConfig+0x490>
9000d982:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
9000d986:	f43f af0d 	beq.w	9000d7a4 <HAL_RCCEx_PeriphCLKConfig+0x490>
9000d98a:	2601      	movs	r6, #1
9000d98c:	4635      	mov	r5, r6
9000d98e:	e714      	b.n	9000d7ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim345ClockSelection)
9000d990:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
9000d994:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
9000d998:	f43f af26 	beq.w	9000d7e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
9000d99c:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
9000d9a0:	f43f af22 	beq.w	9000d7e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
9000d9a4:	2601      	movs	r6, #1
9000d9a6:	4635      	mov	r5, r6
9000d9a8:	e729      	b.n	9000d7fe <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->RngClockSelection)
9000d9aa:	2900      	cmp	r1, #0
9000d9ac:	d183      	bne.n	9000d8b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    if (ret == HAL_OK)
9000d9ae:	2d00      	cmp	r5, #0
9000d9b0:	f040 8151 	bne.w	9000dc56 <HAL_RCCEx_PeriphCLKConfig+0x942>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
9000d9b4:	4d09      	ldr	r5, [pc, #36]	; (9000d9dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000d9b6:	6d68      	ldr	r0, [r5, #84]	; 0x54
9000d9b8:	f420 7040 	bic.w	r0, r0, #768	; 0x300
9000d9bc:	4301      	orrs	r1, r0
9000d9be:	6569      	str	r1, [r5, #84]	; 0x54
9000d9c0:	e77a      	b.n	9000d8b8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->Sai1ClockSelection)
9000d9c2:	4635      	mov	r5, r6
    if (ret == HAL_OK)
9000d9c4:	2d00      	cmp	r5, #0
9000d9c6:	f040 80fb 	bne.w	9000dbc0 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
9000d9ca:	4f04      	ldr	r7, [pc, #16]	; (9000d9dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000d9cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000d9ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000d9d0:	f021 0107 	bic.w	r1, r1, #7
9000d9d4:	4301      	orrs	r1, r0
9000d9d6:	6539      	str	r1, [r7, #80]	; 0x50
9000d9d8:	e4d7      	b.n	9000d38a <HAL_RCCEx_PeriphCLKConfig+0x76>
9000d9da:	bf00      	nop
9000d9dc:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000d9e0:	2101      	movs	r1, #1
9000d9e2:	f104 0008 	add.w	r0, r4, #8
9000d9e6:	f7ff fba1 	bl	9000d12c <RCCEx_PLL2_Config>
9000d9ea:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000d9ec:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000d9f0:	2d00      	cmp	r5, #0
9000d9f2:	f040 811a 	bne.w	9000dc2a <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
9000d9f6:	4fb7      	ldr	r7, [pc, #732]	; (9000dcd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000d9f8:	6f20      	ldr	r0, [r4, #112]	; 0x70
9000d9fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000d9fc:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
9000da00:	4301      	orrs	r1, r0
9000da02:	6539      	str	r1, [r7, #80]	; 0x50
9000da04:	e5b6      	b.n	9000d574 <HAL_RCCEx_PeriphCLKConfig+0x260>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000da06:	2101      	movs	r1, #1
9000da08:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000da0c:	f7ff fc08 	bl	9000d220 <RCCEx_PLL3_Config>
9000da10:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000da12:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000da16:	2d00      	cmp	r5, #0
9000da18:	f040 811b 	bne.w	9000dc52 <HAL_RCCEx_PeriphCLKConfig+0x93e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
9000da1c:	4fad      	ldr	r7, [pc, #692]	; (9000dcd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000da1e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
9000da22:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000da24:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
9000da28:	4301      	orrs	r1, r0
9000da2a:	6579      	str	r1, [r7, #84]	; 0x54
9000da2c:	e726      	b.n	9000d87c <HAL_RCCEx_PeriphCLKConfig+0x568>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000da2e:	2102      	movs	r1, #2
9000da30:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000da34:	f7ff fbf4 	bl	9000d220 <RCCEx_PLL3_Config>
9000da38:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000da3a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000da3e:	2d00      	cmp	r5, #0
9000da40:	f040 8105 	bne.w	9000dc4e <HAL_RCCEx_PeriphCLKConfig+0x93a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
9000da44:	4fa3      	ldr	r7, [pc, #652]	; (9000dcd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000da46:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
9000da4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000da4c:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
9000da50:	4301      	orrs	r1, r0
9000da52:	65b9      	str	r1, [r7, #88]	; 0x58
9000da54:	e700      	b.n	9000d858 <HAL_RCCEx_PeriphCLKConfig+0x544>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000da56:	2101      	movs	r1, #1
9000da58:	f104 0008 	add.w	r0, r4, #8
9000da5c:	f7ff fb66 	bl	9000d12c <RCCEx_PLL2_Config>
9000da60:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000da62:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000da66:	2d00      	cmp	r5, #0
9000da68:	f040 80db 	bne.w	9000dc22 <HAL_RCCEx_PeriphCLKConfig+0x90e>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
9000da6c:	4f99      	ldr	r7, [pc, #612]	; (9000dcd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000da6e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
9000da70:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000da72:	f021 0138 	bic.w	r1, r1, #56	; 0x38
9000da76:	4301      	orrs	r1, r0
9000da78:	6579      	str	r1, [r7, #84]	; 0x54
9000da7a:	e615      	b.n	9000d6a8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000da7c:	2102      	movs	r1, #2
9000da7e:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000da82:	f7ff fbcd 	bl	9000d220 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000da86:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000da8a:	2800      	cmp	r0, #0
9000da8c:	f43f af05 	beq.w	9000d89a <HAL_RCCEx_PeriphCLKConfig+0x586>
      status = HAL_ERROR;
9000da90:	2601      	movs	r6, #1
9000da92:	e702      	b.n	9000d89a <HAL_RCCEx_PeriphCLKConfig+0x586>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000da94:	2100      	movs	r1, #0
9000da96:	f104 0008 	add.w	r0, r4, #8
9000da9a:	f7ff fb47 	bl	9000d12c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000da9e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000daa0:	2800      	cmp	r0, #0
9000daa2:	f43f af47 	beq.w	9000d934 <HAL_RCCEx_PeriphCLKConfig+0x620>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000daa6:	0797      	lsls	r7, r2, #30
9000daa8:	4606      	mov	r6, r0
9000daaa:	f57f af46 	bpl.w	9000d93a <HAL_RCCEx_PeriphCLKConfig+0x626>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000daae:	2101      	movs	r1, #1
9000dab0:	f104 0008 	add.w	r0, r4, #8
9000dab4:	f7ff fb3a 	bl	9000d12c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000dab8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000daba:	2800      	cmp	r0, #0
9000dabc:	f43f af3d 	beq.w	9000d93a <HAL_RCCEx_PeriphCLKConfig+0x626>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000dac0:	0755      	lsls	r5, r2, #29
9000dac2:	4606      	mov	r6, r0
9000dac4:	f57f af3c 	bpl.w	9000d940 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000dac8:	2102      	movs	r1, #2
9000daca:	f104 0008 	add.w	r0, r4, #8
9000dace:	f7ff fb2d 	bl	9000d12c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000dad2:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000dad4:	2800      	cmp	r0, #0
9000dad6:	f43f af33 	beq.w	9000d940 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000dada:	4606      	mov	r6, r0
9000dadc:	0710      	lsls	r0, r2, #28
9000dade:	f57f af32 	bpl.w	9000d946 <HAL_RCCEx_PeriphCLKConfig+0x632>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000dae2:	2100      	movs	r1, #0
9000dae4:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000dae8:	f7ff fb9a 	bl	9000d220 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000daec:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000daee:	2800      	cmp	r0, #0
9000daf0:	f43f af29 	beq.w	9000d946 <HAL_RCCEx_PeriphCLKConfig+0x632>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000daf4:	06d1      	lsls	r1, r2, #27
9000daf6:	4606      	mov	r6, r0
9000daf8:	f57f af28 	bpl.w	9000d94c <HAL_RCCEx_PeriphCLKConfig+0x638>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000dafc:	f104 0528 	add.w	r5, r4, #40	; 0x28
9000db00:	2101      	movs	r1, #1
9000db02:	4628      	mov	r0, r5
9000db04:	f7ff fb8c 	bl	9000d220 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
9000db08:	2800      	cmp	r0, #0
9000db0a:	f000 80c9 	beq.w	9000dca0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000db0e:	6863      	ldr	r3, [r4, #4]
9000db10:	069b      	lsls	r3, r3, #26
9000db12:	d54c      	bpl.n	9000dbae <HAL_RCCEx_PeriphCLKConfig+0x89a>
9000db14:	4606      	mov	r6, r0
9000db16:	e043      	b.n	9000dba0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
9000db18:	4f6f      	ldr	r7, [pc, #444]	; (9000dcd8 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
9000db1a:	683b      	ldr	r3, [r7, #0]
9000db1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000db20:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
9000db22:	f7fb fc4f 	bl	900093c4 <HAL_GetTick>
9000db26:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000db28:	e006      	b.n	9000db38 <HAL_RCCEx_PeriphCLKConfig+0x824>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000db2a:	f7fb fc4b 	bl	900093c4 <HAL_GetTick>
9000db2e:	eba0 0008 	sub.w	r0, r0, r8
9000db32:	2864      	cmp	r0, #100	; 0x64
9000db34:	f200 81a0 	bhi.w	9000de78 <HAL_RCCEx_PeriphCLKConfig+0xb64>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000db38:	683b      	ldr	r3, [r7, #0]
9000db3a:	05da      	lsls	r2, r3, #23
9000db3c:	d5f5      	bpl.n	9000db2a <HAL_RCCEx_PeriphCLKConfig+0x816>
    if (ret == HAL_OK)
9000db3e:	2d00      	cmp	r5, #0
9000db40:	f040 81d4 	bne.w	9000deec <HAL_RCCEx_PeriphCLKConfig+0xbd8>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
9000db44:	4a63      	ldr	r2, [pc, #396]	; (9000dcd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000db46:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
9000db4a:	6f11      	ldr	r1, [r2, #112]	; 0x70
9000db4c:	4059      	eors	r1, r3
9000db4e:	f411 7f40 	tst.w	r1, #768	; 0x300
9000db52:	d00b      	beq.n	9000db6c <HAL_RCCEx_PeriphCLKConfig+0x858>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000db54:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
9000db56:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000db58:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
9000db5c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
9000db60:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
9000db62:	6f10      	ldr	r0, [r2, #112]	; 0x70
9000db64:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
9000db68:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
9000db6a:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
9000db6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000db70:	f000 819e 	beq.w	9000deb0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000db74:	f403 7240 	and.w	r2, r3, #768	; 0x300
9000db78:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
9000db7c:	f000 81ac 	beq.w	9000ded8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>
9000db80:	4954      	ldr	r1, [pc, #336]	; (9000dcd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000db82:	690a      	ldr	r2, [r1, #16]
9000db84:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
9000db88:	610a      	str	r2, [r1, #16]
9000db8a:	4852      	ldr	r0, [pc, #328]	; (9000dcd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000db8c:	f3c3 010b 	ubfx	r1, r3, #0, #12
9000db90:	6f07      	ldr	r7, [r0, #112]	; 0x70
9000db92:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000db94:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000db98:	6701      	str	r1, [r0, #112]	; 0x70
9000db9a:	e553      	b.n	9000d644 <HAL_RCCEx_PeriphCLKConfig+0x330>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000db9c:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000dba0:	2102      	movs	r1, #2
9000dba2:	4628      	mov	r0, r5
9000dba4:	f7ff fb3c 	bl	9000d220 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
9000dba8:	2800      	cmp	r0, #0
9000dbaa:	f43f aed2 	beq.w	9000d952 <HAL_RCCEx_PeriphCLKConfig+0x63e>
  return HAL_ERROR;
9000dbae:	2001      	movs	r0, #1
}
9000dbb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000dbb4:	462e      	mov	r6, r5
9000dbb6:	e450      	b.n	9000d45a <HAL_RCCEx_PeriphCLKConfig+0x146>
9000dbb8:	462e      	mov	r6, r5
9000dbba:	e406      	b.n	9000d3ca <HAL_RCCEx_PeriphCLKConfig+0xb6>
9000dbbc:	462e      	mov	r6, r5
9000dbbe:	e489      	b.n	9000d4d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
9000dbc0:	462e      	mov	r6, r5
9000dbc2:	f7ff bbe2 	b.w	9000d38a <HAL_RCCEx_PeriphCLKConfig+0x76>
9000dbc6:	462e      	mov	r6, r5
9000dbc8:	e423      	b.n	9000d412 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000dbca:	2102      	movs	r1, #2
9000dbcc:	f104 0008 	add.w	r0, r4, #8
9000dbd0:	f7ff faac 	bl	9000d12c <RCCEx_PLL2_Config>
9000dbd4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000dbd6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dbda:	2d00      	cmp	r5, #0
9000dbdc:	d14c      	bne.n	9000dc78 <HAL_RCCEx_PeriphCLKConfig+0x964>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
9000dbde:	4f3d      	ldr	r7, [pc, #244]	; (9000dcd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000dbe0:	6d20      	ldr	r0, [r4, #80]	; 0x50
9000dbe2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000dbe4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
9000dbe8:	4301      	orrs	r1, r0
9000dbea:	64f9      	str	r1, [r7, #76]	; 0x4c
9000dbec:	e652      	b.n	9000d894 <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000dbee:	4839      	ldr	r0, [pc, #228]	; (9000dcd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000dbf0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000dbf2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000dbf6:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000dbf8:	e462      	b.n	9000d4c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000dbfa:	4836      	ldr	r0, [pc, #216]	; (9000dcd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000dbfc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000dbfe:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000dc02:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000dc04:	e41e      	b.n	9000d444 <HAL_RCCEx_PeriphCLKConfig+0x130>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000dc06:	4833      	ldr	r0, [pc, #204]	; (9000dcd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000dc08:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000dc0a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000dc0e:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000dc10:	f7ff bbd1 	b.w	9000d3b6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000dc14:	482f      	ldr	r0, [pc, #188]	; (9000dcd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000dc16:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000dc18:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000dc1c:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000dc1e:	f7ff bbed 	b.w	9000d3fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000dc22:	462e      	mov	r6, r5
9000dc24:	e540      	b.n	9000d6a8 <HAL_RCCEx_PeriphCLKConfig+0x394>
9000dc26:	462e      	mov	r6, r5
9000dc28:	e5a5      	b.n	9000d776 <HAL_RCCEx_PeriphCLKConfig+0x462>
9000dc2a:	462e      	mov	r6, r5
9000dc2c:	e4a2      	b.n	9000d574 <HAL_RCCEx_PeriphCLKConfig+0x260>
9000dc2e:	462e      	mov	r6, r5
9000dc30:	e57f      	b.n	9000d732 <HAL_RCCEx_PeriphCLKConfig+0x41e>
9000dc32:	462e      	mov	r6, r5
9000dc34:	e42c      	b.n	9000d490 <HAL_RCCEx_PeriphCLKConfig+0x17c>
9000dc36:	462e      	mov	r6, r5
9000dc38:	e501      	b.n	9000d63e <HAL_RCCEx_PeriphCLKConfig+0x32a>
9000dc3a:	462e      	mov	r6, r5
9000dc3c:	e46a      	b.n	9000d514 <HAL_RCCEx_PeriphCLKConfig+0x200>
9000dc3e:	462e      	mov	r6, r5
9000dc40:	e5dd      	b.n	9000d7fe <HAL_RCCEx_PeriphCLKConfig+0x4ea>
9000dc42:	462e      	mov	r6, r5
9000dc44:	e486      	b.n	9000d554 <HAL_RCCEx_PeriphCLKConfig+0x240>
9000dc46:	462e      	mov	r6, r5
9000dc48:	e5b7      	b.n	9000d7ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
9000dc4a:	462e      	mov	r6, r5
9000dc4c:	e54c      	b.n	9000d6e8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
9000dc4e:	462e      	mov	r6, r5
9000dc50:	e602      	b.n	9000d858 <HAL_RCCEx_PeriphCLKConfig+0x544>
9000dc52:	462e      	mov	r6, r5
9000dc54:	e612      	b.n	9000d87c <HAL_RCCEx_PeriphCLKConfig+0x568>
9000dc56:	462e      	mov	r6, r5
9000dc58:	e62e      	b.n	9000d8b8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000dc5a:	4f1e      	ldr	r7, [pc, #120]	; (9000dcd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000dc5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000dc5e:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
9000dc62:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
9000dc64:	2d00      	cmp	r5, #0
9000dc66:	d1f6      	bne.n	9000dc56 <HAL_RCCEx_PeriphCLKConfig+0x942>
9000dc68:	e6a4      	b.n	9000d9b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000dc6a:	481a      	ldr	r0, [pc, #104]	; (9000dcd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000dc6c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000dc6e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000dc72:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000dc74:	2d00      	cmp	r5, #0
9000dc76:	d0b2      	beq.n	9000dbde <HAL_RCCEx_PeriphCLKConfig+0x8ca>
9000dc78:	462e      	mov	r6, r5
9000dc7a:	e60b      	b.n	9000d894 <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000dc7c:	4815      	ldr	r0, [pc, #84]	; (9000dcd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000dc7e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000dc80:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000dc84:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000dc86:	2d00      	cmp	r5, #0
9000dc88:	d1e3      	bne.n	9000dc52 <HAL_RCCEx_PeriphCLKConfig+0x93e>
9000dc8a:	e6c7      	b.n	9000da1c <HAL_RCCEx_PeriphCLKConfig+0x708>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000dc8c:	f104 0008 	add.w	r0, r4, #8
9000dc90:	f7ff fa4c 	bl	9000d12c <RCCEx_PLL2_Config>
9000dc94:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000dc96:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dc9a:	2d00      	cmp	r5, #0
9000dc9c:	d1d7      	bne.n	9000dc4e <HAL_RCCEx_PeriphCLKConfig+0x93a>
9000dc9e:	e6d1      	b.n	9000da44 <HAL_RCCEx_PeriphCLKConfig+0x730>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000dca0:	6862      	ldr	r2, [r4, #4]
9000dca2:	e653      	b.n	9000d94c <HAL_RCCEx_PeriphCLKConfig+0x638>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000dca4:	2102      	movs	r1, #2
9000dca6:	f104 0008 	add.w	r0, r4, #8
9000dcaa:	f7ff fa3f 	bl	9000d12c <RCCEx_PLL2_Config>
9000dcae:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000dcb0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dcb4:	2d00      	cmp	r5, #0
9000dcb6:	d1bc      	bne.n	9000dc32 <HAL_RCCEx_PeriphCLKConfig+0x91e>
9000dcb8:	f7ff bbe3 	b.w	9000d482 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000dcbc:	2102      	movs	r1, #2
9000dcbe:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000dcc2:	f7ff faad 	bl	9000d220 <RCCEx_PLL3_Config>
9000dcc6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000dcc8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dccc:	2d00      	cmp	r5, #0
9000dcce:	d1ba      	bne.n	9000dc46 <HAL_RCCEx_PeriphCLKConfig+0x932>
9000dcd0:	e56b      	b.n	9000d7aa <HAL_RCCEx_PeriphCLKConfig+0x496>
9000dcd2:	bf00      	nop
9000dcd4:	58024400 	.word	0x58024400
9000dcd8:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000dcdc:	2102      	movs	r1, #2
9000dcde:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000dce2:	f7ff fa9d 	bl	9000d220 <RCCEx_PLL3_Config>
9000dce6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000dce8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dcec:	2d00      	cmp	r5, #0
9000dcee:	d1a6      	bne.n	9000dc3e <HAL_RCCEx_PeriphCLKConfig+0x92a>
9000dcf0:	e57d      	b.n	9000d7ee <HAL_RCCEx_PeriphCLKConfig+0x4da>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000dcf2:	4886      	ldr	r0, [pc, #536]	; (9000df0c <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
9000dcf4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000dcf6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000dcfa:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000dcfc:	2d00      	cmp	r5, #0
9000dcfe:	d194      	bne.n	9000dc2a <HAL_RCCEx_PeriphCLKConfig+0x916>
9000dd00:	e679      	b.n	9000d9f6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000dd02:	2101      	movs	r1, #1
9000dd04:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000dd08:	f7ff fa8a 	bl	9000d220 <RCCEx_PLL3_Config>
9000dd0c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000dd0e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dd12:	2d00      	cmp	r5, #0
9000dd14:	d191      	bne.n	9000dc3a <HAL_RCCEx_PeriphCLKConfig+0x926>
9000dd16:	f7ff bbf6 	b.w	9000d506 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000dd1a:	2101      	movs	r1, #1
9000dd1c:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000dd20:	f7ff fa7e 	bl	9000d220 <RCCEx_PLL3_Config>
9000dd24:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000dd26:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dd2a:	2d00      	cmp	r5, #0
9000dd2c:	d189      	bne.n	9000dc42 <HAL_RCCEx_PeriphCLKConfig+0x92e>
9000dd2e:	e409      	b.n	9000d544 <HAL_RCCEx_PeriphCLKConfig+0x230>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000dd30:	2102      	movs	r1, #2
9000dd32:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000dd36:	f7ff fa73 	bl	9000d220 <RCCEx_PLL3_Config>
9000dd3a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000dd3c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dd40:	2d00      	cmp	r5, #0
9000dd42:	f47f af70 	bne.w	9000dc26 <HAL_RCCEx_PeriphCLKConfig+0x912>
9000dd46:	e50e      	b.n	9000d766 <HAL_RCCEx_PeriphCLKConfig+0x452>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000dd48:	2102      	movs	r1, #2
9000dd4a:	f104 0008 	add.w	r0, r4, #8
9000dd4e:	f7ff f9ed 	bl	9000d12c <RCCEx_PLL2_Config>
9000dd52:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000dd54:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dd58:	2d00      	cmp	r5, #0
9000dd5a:	f47f af6c 	bne.w	9000dc36 <HAL_RCCEx_PeriphCLKConfig+0x922>
9000dd5e:	e467      	b.n	9000d630 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000dd60:	2102      	movs	r1, #2
9000dd62:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000dd66:	f7ff fa5b 	bl	9000d220 <RCCEx_PLL3_Config>
9000dd6a:	2800      	cmp	r0, #0
9000dd6c:	f040 8094 	bne.w	9000de98 <HAL_RCCEx_PeriphCLKConfig+0xb84>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000dd70:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000dd74:	e9d4 3200 	ldrd	r3, r2, [r4]
9000dd78:	e549      	b.n	9000d80e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000dd7a:	2102      	movs	r1, #2
9000dd7c:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000dd80:	f7ff fa4e 	bl	9000d220 <RCCEx_PLL3_Config>
9000dd84:	2800      	cmp	r0, #0
9000dd86:	f040 808d 	bne.w	9000dea4 <HAL_RCCEx_PeriphCLKConfig+0xb90>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000dd8a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000dd8e:	e9d4 3200 	ldrd	r3, r2, [r4]
9000dd92:	e54a      	b.n	9000d82a <HAL_RCCEx_PeriphCLKConfig+0x516>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000dd94:	e9d4 3200 	ldrd	r3, r2, [r4]
9000dd98:	f7ff bae9 	b.w	9000d36e <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000dd9c:	2100      	movs	r1, #0
9000dd9e:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000dda2:	f7ff fa3d 	bl	9000d220 <RCCEx_PLL3_Config>
9000dda6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000dda8:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000ddac:	f7ff bb4a 	b.w	9000d444 <HAL_RCCEx_PeriphCLKConfig+0x130>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000ddb0:	2100      	movs	r1, #0
9000ddb2:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000ddb6:	f7ff fa33 	bl	9000d220 <RCCEx_PLL3_Config>
9000ddba:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000ddbc:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000ddc0:	e600      	b.n	9000d9c4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000ddc2:	2100      	movs	r1, #0
9000ddc4:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000ddc8:	f7ff fa2a 	bl	9000d220 <RCCEx_PLL3_Config>
9000ddcc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000ddce:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000ddd2:	f7ff baf0 	b.w	9000d3b6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000ddd6:	2102      	movs	r1, #2
9000ddd8:	3028      	adds	r0, #40	; 0x28
9000ddda:	f7ff fa21 	bl	9000d220 <RCCEx_PLL3_Config>
9000ddde:	4606      	mov	r6, r0
    if (ret == HAL_OK)
9000dde0:	2e00      	cmp	r6, #0
9000dde2:	f43f aab5 	beq.w	9000d350 <HAL_RCCEx_PeriphCLKConfig+0x3c>
9000dde6:	e7d5      	b.n	9000dd94 <HAL_RCCEx_PeriphCLKConfig+0xa80>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000dde8:	4848      	ldr	r0, [pc, #288]	; (9000df0c <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
        break;
9000ddea:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000ddec:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000ddee:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000ddf2:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000ddf4:	e5e6      	b.n	9000d9c4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000ddf6:	2100      	movs	r1, #0
9000ddf8:	f104 0008 	add.w	r0, r4, #8
9000ddfc:	f7ff f996 	bl	9000d12c <RCCEx_PLL2_Config>
9000de00:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000de02:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000de06:	e5dd      	b.n	9000d9c4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000de08:	2100      	movs	r1, #0
9000de0a:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000de0e:	f7ff fa07 	bl	9000d220 <RCCEx_PLL3_Config>
9000de12:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000de14:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000de18:	f7ff bb52 	b.w	9000d4c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000de1c:	2100      	movs	r1, #0
9000de1e:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000de22:	f7ff f9fd 	bl	9000d220 <RCCEx_PLL3_Config>
9000de26:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000de28:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000de2c:	f7ff bae6 	b.w	9000d3fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000de30:	2101      	movs	r1, #1
9000de32:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000de36:	f7ff f9f3 	bl	9000d220 <RCCEx_PLL3_Config>
9000de3a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000de3c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000de40:	2d00      	cmp	r5, #0
9000de42:	f47f aef4 	bne.w	9000dc2e <HAL_RCCEx_PeriphCLKConfig+0x91a>
9000de46:	e46c      	b.n	9000d722 <HAL_RCCEx_PeriphCLKConfig+0x40e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000de48:	2101      	movs	r1, #1
9000de4a:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000de4e:	f7ff f9e7 	bl	9000d220 <RCCEx_PLL3_Config>
9000de52:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000de54:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000de58:	2d00      	cmp	r5, #0
9000de5a:	f47f aef6 	bne.w	9000dc4a <HAL_RCCEx_PeriphCLKConfig+0x936>
9000de5e:	e43c      	b.n	9000d6da <HAL_RCCEx_PeriphCLKConfig+0x3c6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000de60:	2101      	movs	r1, #1
9000de62:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000de66:	f7ff f9db 	bl	9000d220 <RCCEx_PLL3_Config>
9000de6a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000de6c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000de70:	2d00      	cmp	r5, #0
9000de72:	f47f aed6 	bne.w	9000dc22 <HAL_RCCEx_PeriphCLKConfig+0x90e>
9000de76:	e5f9      	b.n	9000da6c <HAL_RCCEx_PeriphCLKConfig+0x758>
        status = ret;
9000de78:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000de7a:	e9d4 3200 	ldrd	r3, r2, [r4]
9000de7e:	4635      	mov	r5, r6
9000de80:	f7ff bbe0 	b.w	9000d644 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000de84:	2601      	movs	r6, #1
9000de86:	f7ff ba72 	b.w	9000d36e <HAL_RCCEx_PeriphCLKConfig+0x5a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000de8a:	4d20      	ldr	r5, [pc, #128]	; (9000df0c <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
9000de8c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000de8e:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
9000de92:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
9000de94:	f7ff ba64 	b.w	9000d360 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000de98:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status = HAL_ERROR;
9000de9c:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000de9e:	e9d4 3200 	ldrd	r3, r2, [r4]
9000dea2:	e4b4      	b.n	9000d80e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000dea4:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        status = HAL_ERROR;
9000dea8:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000deaa:	e9d4 3200 	ldrd	r3, r2, [r4]
9000deae:	e4bc      	b.n	9000d82a <HAL_RCCEx_PeriphCLKConfig+0x516>
        tickstart = HAL_GetTick();
9000deb0:	f7fb fa88 	bl	900093c4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000deb4:	f8df 8054 	ldr.w	r8, [pc, #84]	; 9000df0c <HAL_RCCEx_PeriphCLKConfig+0xbf8>
        tickstart = HAL_GetTick();
9000deb8:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000deba:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000debe:	e004      	b.n	9000deca <HAL_RCCEx_PeriphCLKConfig+0xbb6>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000dec0:	f7fb fa80 	bl	900093c4 <HAL_GetTick>
9000dec4:	1bc0      	subs	r0, r0, r7
9000dec6:	4548      	cmp	r0, r9
9000dec8:	d8d6      	bhi.n	9000de78 <HAL_RCCEx_PeriphCLKConfig+0xb64>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000deca:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
9000dece:	079b      	lsls	r3, r3, #30
9000ded0:	d5f6      	bpl.n	9000dec0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000ded2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
9000ded6:	e64d      	b.n	9000db74 <HAL_RCCEx_PeriphCLKConfig+0x860>
9000ded8:	480c      	ldr	r0, [pc, #48]	; (9000df0c <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
9000deda:	4a0d      	ldr	r2, [pc, #52]	; (9000df10 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
9000dedc:	6901      	ldr	r1, [r0, #16]
9000dede:	ea02 1213 	and.w	r2, r2, r3, lsr #4
9000dee2:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
9000dee6:	430a      	orrs	r2, r1
9000dee8:	6102      	str	r2, [r0, #16]
9000deea:	e64e      	b.n	9000db8a <HAL_RCCEx_PeriphCLKConfig+0x876>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000deec:	e9d4 3200 	ldrd	r3, r2, [r4]
9000def0:	462e      	mov	r6, r5
9000def2:	f7ff bba7 	b.w	9000d644 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->Usart234578ClockSelection)
9000def6:	2601      	movs	r6, #1
9000def8:	4635      	mov	r5, r6
9000defa:	f7ff bbf5 	b.w	9000d6e8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->FmcClockSelection)
9000defe:	2601      	movs	r6, #1
9000df00:	4635      	mov	r5, r6
9000df02:	f7ff bb9c 	b.w	9000d63e <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
9000df06:	2601      	movs	r6, #1
9000df08:	4635      	mov	r5, r6
9000df0a:	e412      	b.n	9000d732 <HAL_RCCEx_PeriphCLKConfig+0x41e>
9000df0c:	58024400 	.word	0x58024400
9000df10:	00ffffcf 	.word	0x00ffffcf

9000df14 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
9000df14:	b318      	cbz	r0, 9000df5e <HAL_SDRAM_Init+0x4a>
{
9000df16:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
9000df18:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
9000df1c:	4604      	mov	r4, r0
9000df1e:	460d      	mov	r5, r1
9000df20:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000df24:	b1b3      	cbz	r3, 9000df54 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000df26:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
9000df28:	2302      	movs	r3, #2
9000df2a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000df2e:	f851 0b04 	ldr.w	r0, [r1], #4
9000df32:	f000 fa39 	bl	9000e3a8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
9000df36:	6862      	ldr	r2, [r4, #4]
9000df38:	4629      	mov	r1, r5
9000df3a:	6820      	ldr	r0, [r4, #0]
9000df3c:	f000 fa72 	bl	9000e424 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
9000df40:	4a08      	ldr	r2, [pc, #32]	; (9000df64 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
9000df42:	2101      	movs	r1, #1

  return HAL_OK;
9000df44:	2000      	movs	r0, #0
  __FMC_ENABLE();
9000df46:	6813      	ldr	r3, [r2, #0]
9000df48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
9000df4c:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
9000df4e:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
9000df52:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
9000df54:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
9000df58:	f7f6 fde0 	bl	90004b1c <HAL_SDRAM_MspInit>
9000df5c:	e7e3      	b.n	9000df26 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
9000df5e:	2001      	movs	r0, #1
}
9000df60:	4770      	bx	lr
9000df62:	bf00      	nop
9000df64:	52004000 	.word	0x52004000

9000df68 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
9000df68:	b510      	push	{r4, lr}
9000df6a:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
9000df6c:	f7f6 fe52 	bl	90004c14 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
9000df70:	e9d4 0100 	ldrd	r0, r1, [r4]
9000df74:	f000 faa4 	bl	9000e4c0 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
9000df78:	2000      	movs	r0, #0
9000df7a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
9000df7e:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d

  return HAL_OK;
}
9000df82:	bd10      	pop	{r4, pc}

9000df84 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
9000df84:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000df86:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000df8a:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
9000df8c:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000df8e:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
9000df90:	d004      	beq.n	9000df9c <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
9000df92:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
9000df96:	2e01      	cmp	r6, #1
9000df98:	d001      	beq.n	9000df9e <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
9000df9a:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
9000df9c:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000df9e:	2302      	movs	r3, #2
9000dfa0:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000dfa2:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000dfa4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000dfa8:	f000 fa9e 	bl	9000e4e8 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000dfac:	682b      	ldr	r3, [r5, #0]
9000dfae:	2b02      	cmp	r3, #2
9000dfb0:	d003      	beq.n	9000dfba <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
9000dfb2:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
9000dfb4:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
9000dfb8:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000dfba:	2305      	movs	r3, #5
  return HAL_OK;
9000dfbc:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000dfbe:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
9000dfc2:	bd70      	pop	{r4, r5, r6, pc}

9000dfc4 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
9000dfc4:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000dfc6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000dfca:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000dfcc:	2b02      	cmp	r3, #2
9000dfce:	b2d8      	uxtb	r0, r3
9000dfd0:	d005      	beq.n	9000dfde <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
9000dfd2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
9000dfd6:	2b01      	cmp	r3, #1
9000dfd8:	b2dd      	uxtb	r5, r3
9000dfda:	d001      	beq.n	9000dfe0 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
9000dfdc:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
9000dfde:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000dfe0:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000dfe2:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000dfe4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000dfe8:	f000 fa96 	bl	9000e518 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
9000dfec:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
9000dfee:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
9000dff2:	bd38      	pop	{r3, r4, r5, pc}

9000dff4 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
9000dff4:	4770      	bx	lr
9000dff6:	bf00      	nop

9000dff8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
9000dff8:	2800      	cmp	r0, #0
9000dffa:	f000 80a5 	beq.w	9000e148 <HAL_TIM_Base_Init+0x150>
{
9000dffe:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
9000e000:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000e004:	4604      	mov	r4, r0
9000e006:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000e00a:	2b00      	cmp	r3, #0
9000e00c:	d076      	beq.n	9000e0fc <HAL_TIM_Base_Init+0x104>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
9000e00e:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
9000e010:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e012:	494e      	ldr	r1, [pc, #312]	; (9000e14c <HAL_TIM_Base_Init+0x154>)
9000e014:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
9000e018:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e01c:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
9000e020:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e022:	fab1 f181 	clz	r1, r1
9000e026:	ea4f 1151 	mov.w	r1, r1, lsr #5
9000e02a:	d027      	beq.n	9000e07c <HAL_TIM_Base_Init+0x84>
9000e02c:	bb31      	cbnz	r1, 9000e07c <HAL_TIM_Base_Init+0x84>
9000e02e:	4848      	ldr	r0, [pc, #288]	; (9000e150 <HAL_TIM_Base_Init+0x158>)
9000e030:	4d48      	ldr	r5, [pc, #288]	; (9000e154 <HAL_TIM_Base_Init+0x15c>)
9000e032:	4282      	cmp	r2, r0
9000e034:	d067      	beq.n	9000e106 <HAL_TIM_Base_Init+0x10e>
9000e036:	f500 6080 	add.w	r0, r0, #1024	; 0x400
9000e03a:	4282      	cmp	r2, r0
9000e03c:	d063      	beq.n	9000e106 <HAL_TIM_Base_Init+0x10e>
9000e03e:	1b55      	subs	r5, r2, r5
9000e040:	f500 6080 	add.w	r0, r0, #1024	; 0x400
9000e044:	fab5 f585 	clz	r5, r5
9000e048:	4282      	cmp	r2, r0
9000e04a:	ea4f 1555 	mov.w	r5, r5, lsr #5
9000e04e:	d063      	beq.n	9000e118 <HAL_TIM_Base_Init+0x120>
9000e050:	2d00      	cmp	r5, #0
9000e052:	d161      	bne.n	9000e118 <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000e054:	4840      	ldr	r0, [pc, #256]	; (9000e158 <HAL_TIM_Base_Init+0x160>)
9000e056:	4941      	ldr	r1, [pc, #260]	; (9000e15c <HAL_TIM_Base_Init+0x164>)
9000e058:	428a      	cmp	r2, r1
9000e05a:	bf18      	it	ne
9000e05c:	4282      	cmpne	r2, r0
9000e05e:	d065      	beq.n	9000e12c <HAL_TIM_Base_Init+0x134>
9000e060:	f501 6180 	add.w	r1, r1, #1024	; 0x400
9000e064:	428a      	cmp	r2, r1
9000e066:	d061      	beq.n	9000e12c <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000e068:	69a0      	ldr	r0, [r4, #24]
9000e06a:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
9000e06e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000e070:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
9000e072:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
9000e074:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000e076:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000e078:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000e07a:	e023      	b.n	9000e0c4 <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e07c:	4d35      	ldr	r5, [pc, #212]	; (9000e154 <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000e07e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000e082:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e084:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
9000e086:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e088:	fab5 f585 	clz	r5, r5
9000e08c:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000e08e:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000e090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000e094:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000e096:	69a0      	ldr	r0, [r4, #24]
9000e098:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000e09c:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
9000e09e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000e0a0:	68e3      	ldr	r3, [r4, #12]
9000e0a2:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000e0a4:	6863      	ldr	r3, [r4, #4]
9000e0a6:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000e0a8:	b951      	cbnz	r1, 9000e0c0 <HAL_TIM_Base_Init+0xc8>
9000e0aa:	b94d      	cbnz	r5, 9000e0c0 <HAL_TIM_Base_Init+0xc8>
9000e0ac:	492a      	ldr	r1, [pc, #168]	; (9000e158 <HAL_TIM_Base_Init+0x160>)
9000e0ae:	4b2b      	ldr	r3, [pc, #172]	; (9000e15c <HAL_TIM_Base_Init+0x164>)
9000e0b0:	429a      	cmp	r2, r3
9000e0b2:	bf18      	it	ne
9000e0b4:	428a      	cmpne	r2, r1
9000e0b6:	d003      	beq.n	9000e0c0 <HAL_TIM_Base_Init+0xc8>
9000e0b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
9000e0bc:	429a      	cmp	r2, r3
9000e0be:	d101      	bne.n	9000e0c4 <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
9000e0c0:	6963      	ldr	r3, [r4, #20]
9000e0c2:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
9000e0c4:	2301      	movs	r3, #1
  return HAL_OK;
9000e0c6:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
9000e0c8:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
9000e0ca:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000e0ce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
9000e0d2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
9000e0d6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
9000e0da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
9000e0de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
9000e0e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000e0e6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000e0ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000e0ee:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
9000e0f2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
9000e0f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
9000e0fa:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
9000e0fc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
9000e100:	f7ff ff78 	bl	9000dff4 <HAL_TIM_Base_MspInit>
9000e104:	e783      	b.n	9000e00e <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e106:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000e108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000e10c:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e10e:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
9000e112:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e114:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000e116:	e7ba      	b.n	9000e08e <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
9000e118:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000e11a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000e11e:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e120:	480f      	ldr	r0, [pc, #60]	; (9000e160 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000e122:	4282      	cmp	r2, r0
9000e124:	d0b3      	beq.n	9000e08e <HAL_TIM_Base_Init+0x96>
9000e126:	2d00      	cmp	r5, #0
9000e128:	d1b1      	bne.n	9000e08e <HAL_TIM_Base_Init+0x96>
9000e12a:	e793      	b.n	9000e054 <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000e12c:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000e12e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000e132:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000e134:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
9000e136:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000e138:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000e13c:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
9000e13e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
9000e140:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000e142:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000e144:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000e146:	e7b1      	b.n	9000e0ac <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
9000e148:	2001      	movs	r0, #1
}
9000e14a:	4770      	bx	lr
9000e14c:	40010000 	.word	0x40010000
9000e150:	40000400 	.word	0x40000400
9000e154:	40010400 	.word	0x40010400
9000e158:	40014000 	.word	0x40014000
9000e15c:	40014400 	.word	0x40014400
9000e160:	40000c00 	.word	0x40000c00

9000e164 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
9000e164:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000e168:	2b01      	cmp	r3, #1
9000e16a:	d141      	bne.n	9000e1f0 <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000e16c:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
9000e16e:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000e170:	4b24      	ldr	r3, [pc, #144]	; (9000e204 <HAL_TIM_Base_Start_IT+0xa0>)
9000e172:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
9000e176:	bf18      	it	ne
9000e178:	429a      	cmpne	r2, r3
{
9000e17a:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000e17c:	bf0c      	ite	eq
9000e17e:	2301      	moveq	r3, #1
9000e180:	2300      	movne	r3, #0
9000e182:	4d21      	ldr	r5, [pc, #132]	; (9000e208 <HAL_TIM_Base_Start_IT+0xa4>)
9000e184:	4c21      	ldr	r4, [pc, #132]	; (9000e20c <HAL_TIM_Base_Start_IT+0xa8>)
9000e186:	42aa      	cmp	r2, r5
9000e188:	bf08      	it	eq
9000e18a:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
9000e18e:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000e192:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000e194:	42a2      	cmp	r2, r4
9000e196:	bf08      	it	eq
9000e198:	f043 0301 	orreq.w	r3, r3, #1
9000e19c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000e1a0:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000e1a4:	481a      	ldr	r0, [pc, #104]	; (9000e210 <HAL_TIM_Base_Start_IT+0xac>)
9000e1a6:	42a2      	cmp	r2, r4
9000e1a8:	bf08      	it	eq
9000e1aa:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000e1ae:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000e1b0:	4282      	cmp	r2, r0
9000e1b2:	bf08      	it	eq
9000e1b4:	f043 0301 	orreq.w	r3, r3, #1
9000e1b8:	4916      	ldr	r1, [pc, #88]	; (9000e214 <HAL_TIM_Base_Start_IT+0xb0>)
9000e1ba:	428a      	cmp	r2, r1
9000e1bc:	bf08      	it	eq
9000e1be:	f043 0301 	orreq.w	r3, r3, #1
9000e1c2:	b933      	cbnz	r3, 9000e1d2 <HAL_TIM_Base_Start_IT+0x6e>
9000e1c4:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
9000e1c8:	1a10      	subs	r0, r2, r0
9000e1ca:	fab0 f080 	clz	r0, r0
9000e1ce:	0940      	lsrs	r0, r0, #5
9000e1d0:	b198      	cbz	r0, 9000e1fa <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
9000e1d2:	6891      	ldr	r1, [r2, #8]
9000e1d4:	4b10      	ldr	r3, [pc, #64]	; (9000e218 <HAL_TIM_Base_Start_IT+0xb4>)
9000e1d6:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
9000e1d8:	2b06      	cmp	r3, #6
9000e1da:	d00b      	beq.n	9000e1f4 <HAL_TIM_Base_Start_IT+0x90>
9000e1dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000e1e0:	d008      	beq.n	9000e1f4 <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
9000e1e2:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
9000e1e4:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
9000e1e6:	f043 0301 	orr.w	r3, r3, #1
9000e1ea:	6013      	str	r3, [r2, #0]
}
9000e1ec:	bc30      	pop	{r4, r5}
9000e1ee:	4770      	bx	lr
    return HAL_ERROR;
9000e1f0:	2001      	movs	r0, #1
}
9000e1f2:	4770      	bx	lr
  return HAL_OK;
9000e1f4:	2000      	movs	r0, #0
}
9000e1f6:	bc30      	pop	{r4, r5}
9000e1f8:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
9000e1fa:	6813      	ldr	r3, [r2, #0]
9000e1fc:	f043 0301 	orr.w	r3, r3, #1
9000e200:	6013      	str	r3, [r2, #0]
9000e202:	e7f3      	b.n	9000e1ec <HAL_TIM_Base_Start_IT+0x88>
9000e204:	40010000 	.word	0x40010000
9000e208:	40000400 	.word	0x40000400
9000e20c:	40000800 	.word	0x40000800
9000e210:	40010400 	.word	0x40010400
9000e214:	40001800 	.word	0x40001800
9000e218:	00010007 	.word	0x00010007

9000e21c <HAL_TIM_OC_DelayElapsedCallback>:
9000e21c:	4770      	bx	lr
9000e21e:	bf00      	nop

9000e220 <HAL_TIM_IC_CaptureCallback>:
9000e220:	4770      	bx	lr
9000e222:	bf00      	nop

9000e224 <HAL_TIM_PWM_PulseFinishedCallback>:
9000e224:	4770      	bx	lr
9000e226:	bf00      	nop

9000e228 <HAL_TIM_TriggerCallback>:
9000e228:	4770      	bx	lr
9000e22a:	bf00      	nop

9000e22c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
9000e22c:	6803      	ldr	r3, [r0, #0]
9000e22e:	691a      	ldr	r2, [r3, #16]
9000e230:	0791      	lsls	r1, r2, #30
{
9000e232:	b510      	push	{r4, lr}
9000e234:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
9000e236:	d502      	bpl.n	9000e23e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
9000e238:	68da      	ldr	r2, [r3, #12]
9000e23a:	0792      	lsls	r2, r2, #30
9000e23c:	d468      	bmi.n	9000e310 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000e23e:	691a      	ldr	r2, [r3, #16]
9000e240:	0752      	lsls	r2, r2, #29
9000e242:	d502      	bpl.n	9000e24a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
9000e244:	68da      	ldr	r2, [r3, #12]
9000e246:	0750      	lsls	r0, r2, #29
9000e248:	d44f      	bmi.n	9000e2ea <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000e24a:	691a      	ldr	r2, [r3, #16]
9000e24c:	0711      	lsls	r1, r2, #28
9000e24e:	d502      	bpl.n	9000e256 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
9000e250:	68da      	ldr	r2, [r3, #12]
9000e252:	0712      	lsls	r2, r2, #28
9000e254:	d437      	bmi.n	9000e2c6 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000e256:	691a      	ldr	r2, [r3, #16]
9000e258:	06d0      	lsls	r0, r2, #27
9000e25a:	d502      	bpl.n	9000e262 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
9000e25c:	68da      	ldr	r2, [r3, #12]
9000e25e:	06d1      	lsls	r1, r2, #27
9000e260:	d41e      	bmi.n	9000e2a0 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
9000e262:	691a      	ldr	r2, [r3, #16]
9000e264:	07d2      	lsls	r2, r2, #31
9000e266:	d502      	bpl.n	9000e26e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
9000e268:	68da      	ldr	r2, [r3, #12]
9000e26a:	07d0      	lsls	r0, r2, #31
9000e26c:	d469      	bmi.n	9000e342 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000e26e:	691a      	ldr	r2, [r3, #16]
9000e270:	0611      	lsls	r1, r2, #24
9000e272:	d502      	bpl.n	9000e27a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000e274:	68da      	ldr	r2, [r3, #12]
9000e276:	0612      	lsls	r2, r2, #24
9000e278:	d46b      	bmi.n	9000e352 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
9000e27a:	691a      	ldr	r2, [r3, #16]
9000e27c:	05d0      	lsls	r0, r2, #23
9000e27e:	d502      	bpl.n	9000e286 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000e280:	68da      	ldr	r2, [r3, #12]
9000e282:	0611      	lsls	r1, r2, #24
9000e284:	d46d      	bmi.n	9000e362 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
9000e286:	691a      	ldr	r2, [r3, #16]
9000e288:	0652      	lsls	r2, r2, #25
9000e28a:	d502      	bpl.n	9000e292 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
9000e28c:	68da      	ldr	r2, [r3, #12]
9000e28e:	0650      	lsls	r0, r2, #25
9000e290:	d46f      	bmi.n	9000e372 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
9000e292:	691a      	ldr	r2, [r3, #16]
9000e294:	0691      	lsls	r1, r2, #26
9000e296:	d502      	bpl.n	9000e29e <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
9000e298:	68da      	ldr	r2, [r3, #12]
9000e29a:	0692      	lsls	r2, r2, #26
9000e29c:	d449      	bmi.n	9000e332 <HAL_TIM_IRQHandler+0x106>
}
9000e29e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000e2a0:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000e2a4:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
9000e2a6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000e2a8:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000e2aa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
9000e2ac:	69db      	ldr	r3, [r3, #28]
9000e2ae:	f413 7f40 	tst.w	r3, #768	; 0x300
9000e2b2:	d16f      	bne.n	9000e394 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000e2b4:	f7ff ffb2 	bl	9000e21c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000e2b8:	4620      	mov	r0, r4
9000e2ba:	f7ff ffb3 	bl	9000e224 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e2be:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
9000e2c0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e2c2:	7722      	strb	r2, [r4, #28]
9000e2c4:	e7cd      	b.n	9000e262 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000e2c6:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000e2ca:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
9000e2cc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000e2ce:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000e2d0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
9000e2d2:	69db      	ldr	r3, [r3, #28]
9000e2d4:	079b      	lsls	r3, r3, #30
9000e2d6:	d15a      	bne.n	9000e38e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000e2d8:	f7ff ffa0 	bl	9000e21c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000e2dc:	4620      	mov	r0, r4
9000e2de:	f7ff ffa1 	bl	9000e224 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e2e2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000e2e4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e2e6:	7722      	strb	r2, [r4, #28]
9000e2e8:	e7b5      	b.n	9000e256 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
9000e2ea:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000e2ee:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
9000e2f0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
9000e2f2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000e2f4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
9000e2f6:	699b      	ldr	r3, [r3, #24]
9000e2f8:	f413 7f40 	tst.w	r3, #768	; 0x300
9000e2fc:	d144      	bne.n	9000e388 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000e2fe:	f7ff ff8d 	bl	9000e21c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000e302:	4620      	mov	r0, r4
9000e304:	f7ff ff8e 	bl	9000e224 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e308:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000e30a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e30c:	7722      	strb	r2, [r4, #28]
9000e30e:	e79c      	b.n	9000e24a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000e310:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000e314:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000e316:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000e318:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
9000e31a:	699b      	ldr	r3, [r3, #24]
9000e31c:	0799      	lsls	r1, r3, #30
9000e31e:	d130      	bne.n	9000e382 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
9000e320:	f7ff ff7c 	bl	9000e21c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
9000e324:	4620      	mov	r0, r4
9000e326:	f7ff ff7d 	bl	9000e224 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e32a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000e32c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e32e:	7722      	strb	r2, [r4, #28]
9000e330:	e785      	b.n	9000e23e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000e332:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
9000e336:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000e338:	611a      	str	r2, [r3, #16]
}
9000e33a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
9000e33e:	f000 b82d 	b.w	9000e39c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000e342:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
9000e346:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000e348:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
9000e34a:	f7f6 fa4b 	bl	900047e4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000e34e:	6823      	ldr	r3, [r4, #0]
9000e350:	e78d      	b.n	9000e26e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000e352:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
9000e356:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000e358:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
9000e35a:	f000 f821 	bl	9000e3a0 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
9000e35e:	6823      	ldr	r3, [r4, #0]
9000e360:	e78b      	b.n	9000e27a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
9000e362:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
9000e366:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
9000e368:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
9000e36a:	f000 f81b 	bl	9000e3a4 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
9000e36e:	6823      	ldr	r3, [r4, #0]
9000e370:	e789      	b.n	9000e286 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
9000e372:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
9000e376:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
9000e378:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
9000e37a:	f7ff ff55 	bl	9000e228 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
9000e37e:	6823      	ldr	r3, [r4, #0]
9000e380:	e787      	b.n	9000e292 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
9000e382:	f7ff ff4d 	bl	9000e220 <HAL_TIM_IC_CaptureCallback>
9000e386:	e7d0      	b.n	9000e32a <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
9000e388:	f7ff ff4a 	bl	9000e220 <HAL_TIM_IC_CaptureCallback>
9000e38c:	e7bc      	b.n	9000e308 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
9000e38e:	f7ff ff47 	bl	9000e220 <HAL_TIM_IC_CaptureCallback>
9000e392:	e7a6      	b.n	9000e2e2 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
9000e394:	f7ff ff44 	bl	9000e220 <HAL_TIM_IC_CaptureCallback>
9000e398:	e791      	b.n	9000e2be <HAL_TIM_IRQHandler+0x92>
9000e39a:	bf00      	nop

9000e39c <HAL_TIMEx_CommutCallback>:
9000e39c:	4770      	bx	lr
9000e39e:	bf00      	nop

9000e3a0 <HAL_TIMEx_BreakCallback>:
9000e3a0:	4770      	bx	lr
9000e3a2:	bf00      	nop

9000e3a4 <HAL_TIMEx_Break2Callback>:
9000e3a4:	4770      	bx	lr
9000e3a6:	bf00      	nop

9000e3a8 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000e3a8:	680b      	ldr	r3, [r1, #0]
{
9000e3aa:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000e3ac:	b9d3      	cbnz	r3, 9000e3e4 <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000e3ae:	6804      	ldr	r4, [r0, #0]
9000e3b0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
9000e3b4:	684a      	ldr	r2, [r1, #4]
9000e3b6:	4023      	ands	r3, r4
9000e3b8:	4313      	orrs	r3, r2
9000e3ba:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
9000e3be:	4323      	orrs	r3, r4
9000e3c0:	4313      	orrs	r3, r2
9000e3c2:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
9000e3c6:	4323      	orrs	r3, r4
9000e3c8:	4313      	orrs	r3, r2
9000e3ca:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
9000e3ce:	4323      	orrs	r3, r4
9000e3d0:	4313      	orrs	r3, r2
9000e3d2:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
9000e3d6:	4323      	orrs	r3, r4
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
9000e3d8:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000e3dc:	4313      	orrs	r3, r2
9000e3de:	6003      	str	r3, [r0, #0]
}
9000e3e0:	2000      	movs	r0, #0
9000e3e2:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000e3e4:	6802      	ldr	r2, [r0, #0]
9000e3e6:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
9000e3ea:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
9000e3ee:	4322      	orrs	r2, r4
9000e3f0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
9000e3f2:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000e3f4:	4b0a      	ldr	r3, [pc, #40]	; (9000e420 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000e3f6:	4322      	orrs	r2, r4
9000e3f8:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000e3fa:	6842      	ldr	r2, [r0, #4]
9000e3fc:	4013      	ands	r3, r2
9000e3fe:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
9000e402:	4323      	orrs	r3, r4
9000e404:	4313      	orrs	r3, r2
9000e406:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
9000e40a:	4323      	orrs	r3, r4
9000e40c:	4313      	orrs	r3, r2
9000e40e:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
9000e412:	4323      	orrs	r3, r4
}
9000e414:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000e418:	4313      	orrs	r3, r2
9000e41a:	6043      	str	r3, [r0, #4]
}
9000e41c:	2000      	movs	r0, #0
9000e41e:	4770      	bx	lr
9000e420:	ffff8000 	.word	0xffff8000

9000e424 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
9000e424:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000e426:	bb0a      	cbnz	r2, 9000e46c <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000e428:	6883      	ldr	r3, [r0, #8]
9000e42a:	e9d1 2400 	ldrd	r2, r4, [r1]
9000e42e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
9000e432:	3c01      	subs	r4, #1
9000e434:	3a01      	subs	r2, #1
9000e436:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
9000e43a:	4313      	orrs	r3, r2
9000e43c:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
9000e440:	3c01      	subs	r4, #1
9000e442:	3a01      	subs	r2, #1
9000e444:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
9000e448:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
9000e44c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
9000e450:	698a      	ldr	r2, [r1, #24]
9000e452:	3d01      	subs	r5, #1
9000e454:	1e61      	subs	r1, r4, #1
9000e456:	3a01      	subs	r2, #1
9000e458:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
9000e45c:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
9000e460:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
9000e464:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000e466:	6083      	str	r3, [r0, #8]
}
9000e468:	2000      	movs	r0, #0
9000e46a:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000e46c:	6885      	ldr	r5, [r0, #8]
9000e46e:	68ca      	ldr	r2, [r1, #12]
9000e470:	4b12      	ldr	r3, [pc, #72]	; (9000e4bc <FMC_SDRAM_Timing_Init+0x98>)
9000e472:	1e54      	subs	r4, r2, #1
9000e474:	694a      	ldr	r2, [r1, #20]
9000e476:	402b      	ands	r3, r5
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000e478:	688d      	ldr	r5, [r1, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000e47a:	3a01      	subs	r2, #1
9000e47c:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000e480:	f105 3cff 	add.w	ip, r5, #4294967295
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000e484:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000e488:	e9d1 2400 	ldrd	r2, r4, [r1]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000e48c:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000e48e:	68c3      	ldr	r3, [r0, #12]
9000e490:	3c01      	subs	r4, #1
9000e492:	3a01      	subs	r2, #1
9000e494:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
9000e498:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
9000e49c:	690c      	ldr	r4, [r1, #16]
9000e49e:	4313      	orrs	r3, r2
9000e4a0:	698a      	ldr	r2, [r1, #24]
9000e4a2:	1e61      	subs	r1, r4, #1
9000e4a4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
9000e4a8:	3a01      	subs	r2, #1
9000e4aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000e4ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
}
9000e4b2:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000e4b4:	60c3      	str	r3, [r0, #12]
}
9000e4b6:	2000      	movs	r0, #0
9000e4b8:	4770      	bx	lr
9000e4ba:	bf00      	nop
9000e4bc:	ff0f0fff 	.word	0xff0f0fff

9000e4c0 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
9000e4c0:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
9000e4c2:	2200      	movs	r2, #0
{
9000e4c4:	4603      	mov	r3, r0
  Device->SDCR[Bank] = 0x000002D0U;
9000e4c6:	f44f 7534 	mov.w	r5, #720	; 0x2d0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
9000e4ca:	f06f 4470 	mvn.w	r4, #4026531840	; 0xf0000000
9000e4ce:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
  Device->SDCR[Bank] = 0x000002D0U;
9000e4d2:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
  Device->SDRTR      = 0x00000000U;
  Device->SDSR       = 0x00000000U;

  return HAL_OK;
}
9000e4d6:	4610      	mov	r0, r2
  Device->SDTR[Bank] = 0x0FFFFFFFU;
9000e4d8:	f8cc 4008 	str.w	r4, [ip, #8]
  Device->SDCMR      = 0x00000000U;
9000e4dc:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
9000e4de:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
9000e4e0:	619a      	str	r2, [r3, #24]
}
9000e4e2:	bc30      	pop	{r4, r5}
9000e4e4:	4770      	bx	lr
9000e4e6:	bf00      	nop

9000e4e8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
9000e4e8:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000e4ea:	e9d1 3400 	ldrd	r3, r4, [r1]
{
9000e4ee:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000e4f0:	6900      	ldr	r0, [r0, #16]
9000e4f2:	4323      	orrs	r3, r4
9000e4f4:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
9000e4f8:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
9000e4fc:	4c05      	ldr	r4, [pc, #20]	; (9000e514 <FMC_SDRAM_SendCommand+0x2c>)
9000e4fe:	3901      	subs	r1, #1
9000e500:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
9000e502:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000e504:	4323      	orrs	r3, r4
}
9000e506:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000e50a:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
9000e50e:	6113      	str	r3, [r2, #16]
}
9000e510:	4770      	bx	lr
9000e512:	bf00      	nop
9000e514:	ffc00000 	.word	0xffc00000

9000e518 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000e518:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000e51a:	4b05      	ldr	r3, [pc, #20]	; (9000e530 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
9000e51c:	2000      	movs	r0, #0
{
9000e51e:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000e520:	6954      	ldr	r4, [r2, #20]
9000e522:	4023      	ands	r3, r4
}
9000e524:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000e528:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
9000e52c:	6151      	str	r1, [r2, #20]
}
9000e52e:	4770      	bx	lr
9000e530:	ffffc001 	.word	0xffffc001

9000e534 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
9000e534:	b510      	push	{r4, lr}
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
9000e536:	f003 f94d 	bl	900117d4 <pvTimerGetTimerID>

  if (callb != NULL) {
9000e53a:	b120      	cbz	r0, 9000e546 <TimerCallback+0x12>
    callb->func (callb->arg);
9000e53c:	e9d0 3000 	ldrd	r3, r0, [r0]
  }
}
9000e540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    callb->func (callb->arg);
9000e544:	4718      	bx	r3
}
9000e546:	bd10      	pop	{r4, pc}

9000e548 <SysTick_Handler>:
void SysTick_Handler (void) {
9000e548:	b508      	push	{r3, lr}
  SysTick->CTRL;
9000e54a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000e54e:	691b      	ldr	r3, [r3, #16]
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
9000e550:	f002 fd32 	bl	90010fb8 <xTaskGetSchedulerState>
9000e554:	2801      	cmp	r0, #1
9000e556:	d100      	bne.n	9000e55a <SysTick_Handler+0x12>
}
9000e558:	bd08      	pop	{r3, pc}
9000e55a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
9000e55e:	f000 bd31 	b.w	9000efc4 <xPortSysTickHandler>
9000e562:	bf00      	nop

9000e564 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
9000e564:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
9000e568:	b92b      	cbnz	r3, 9000e576 <osKernelInitialize+0x12>
    if (KernelState == osKernelInactive) {
9000e56a:	4b06      	ldr	r3, [pc, #24]	; (9000e584 <osKernelInitialize+0x20>)
9000e56c:	6818      	ldr	r0, [r3, #0]
9000e56e:	b928      	cbnz	r0, 9000e57c <osKernelInitialize+0x18>
      KernelState = osKernelReady;
9000e570:	2201      	movs	r2, #1
9000e572:	601a      	str	r2, [r3, #0]
      stat = osOK;
9000e574:	4770      	bx	lr
    stat = osErrorISR;
9000e576:	f06f 0005 	mvn.w	r0, #5
9000e57a:	4770      	bx	lr
      stat = osError;
9000e57c:	f04f 30ff 	mov.w	r0, #4294967295
}
9000e580:	4770      	bx	lr
9000e582:	bf00      	nop
9000e584:	2400dfb4 	.word	0x2400dfb4

9000e588 <osKernelStart>:
osStatus_t osKernelStart (void) {
9000e588:	b510      	push	{r4, lr}
9000e58a:	f3ef 8405 	mrs	r4, IPSR
  if (IS_IRQ()) {
9000e58e:	b974      	cbnz	r4, 9000e5ae <osKernelStart+0x26>
    if (KernelState == osKernelReady) {
9000e590:	4b08      	ldr	r3, [pc, #32]	; (9000e5b4 <osKernelStart+0x2c>)
9000e592:	681a      	ldr	r2, [r3, #0]
9000e594:	2a01      	cmp	r2, #1
9000e596:	d107      	bne.n	9000e5a8 <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000e598:	4907      	ldr	r1, [pc, #28]	; (9000e5b8 <osKernelStart+0x30>)
      KernelState = osKernelRunning;
9000e59a:	2202      	movs	r2, #2
9000e59c:	77cc      	strb	r4, [r1, #31]
9000e59e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
9000e5a0:	f002 fa98 	bl	90010ad4 <vTaskStartScheduler>
      stat = osOK;
9000e5a4:	4620      	mov	r0, r4
}
9000e5a6:	bd10      	pop	{r4, pc}
      stat = osError;
9000e5a8:	f04f 30ff 	mov.w	r0, #4294967295
}
9000e5ac:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000e5ae:	f06f 0005 	mvn.w	r0, #5
}
9000e5b2:	bd10      	pop	{r4, pc}
9000e5b4:	2400dfb4 	.word	0x2400dfb4
9000e5b8:	e000ed00 	.word	0xe000ed00

9000e5bc <osThreadNew>:
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
9000e5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  hTask = NULL;
9000e5be:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
9000e5c0:	b087      	sub	sp, #28
9000e5c2:	4614      	mov	r4, r2
  hTask = NULL;
9000e5c4:	9505      	str	r5, [sp, #20]
9000e5c6:	f3ef 8205 	mrs	r2, IPSR
  if (!IS_IRQ() && (func != NULL)) {
9000e5ca:	bb5a      	cbnz	r2, 9000e624 <osThreadNew+0x68>
9000e5cc:	4606      	mov	r6, r0
9000e5ce:	b348      	cbz	r0, 9000e624 <osThreadNew+0x68>
    if (attr != NULL) {
9000e5d0:	b1e4      	cbz	r4, 9000e60c <osThreadNew+0x50>
      if (attr->priority != osPriorityNone) {
9000e5d2:	69a7      	ldr	r7, [r4, #24]
9000e5d4:	bb4f      	cbnz	r7, 9000e62a <osThreadNew+0x6e>
9000e5d6:	2718      	movs	r7, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
9000e5d8:	6863      	ldr	r3, [r4, #4]
9000e5da:	07db      	lsls	r3, r3, #31
9000e5dc:	d422      	bmi.n	9000e624 <osThreadNew+0x68>
      if (attr->stack_size > 0U) {
9000e5de:	6963      	ldr	r3, [r4, #20]
9000e5e0:	b33b      	cbz	r3, 9000e632 <osThreadNew+0x76>
        stack = attr->stack_size / sizeof(StackType_t);
9000e5e2:	ea4f 0c93 	mov.w	ip, r3, lsr #2
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
9000e5e6:	68a0      	ldr	r0, [r4, #8]
      if (attr->name != NULL) {
9000e5e8:	6825      	ldr	r5, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
9000e5ea:	b338      	cbz	r0, 9000e63c <osThreadNew+0x80>
9000e5ec:	68e2      	ldr	r2, [r4, #12]
9000e5ee:	2a5f      	cmp	r2, #95	; 0x5f
9000e5f0:	d918      	bls.n	9000e624 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
9000e5f2:	6924      	ldr	r4, [r4, #16]
9000e5f4:	b1b3      	cbz	r3, 9000e624 <osThreadNew+0x68>
9000e5f6:	b1ac      	cbz	r4, 9000e624 <osThreadNew+0x68>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
9000e5f8:	460b      	mov	r3, r1
9000e5fa:	4662      	mov	r2, ip
9000e5fc:	4629      	mov	r1, r5
9000e5fe:	9700      	str	r7, [sp, #0]
9000e600:	e9cd 4001 	strd	r4, r0, [sp, #4]
9000e604:	4630      	mov	r0, r6
9000e606:	f002 f8c9 	bl	9001079c <xTaskCreateStatic>
9000e60a:	e00c      	b.n	9000e626 <osThreadNew+0x6a>
9000e60c:	2280      	movs	r2, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;
9000e60e:	2718      	movs	r7, #24
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
9000e610:	460b      	mov	r3, r1
9000e612:	4621      	mov	r1, r4
9000e614:	ac05      	add	r4, sp, #20
9000e616:	4630      	mov	r0, r6
9000e618:	9700      	str	r7, [sp, #0]
9000e61a:	9401      	str	r4, [sp, #4]
9000e61c:	f002 f968 	bl	900108f0 <xTaskCreate>
9000e620:	2801      	cmp	r0, #1
9000e622:	d009      	beq.n	9000e638 <osThreadNew+0x7c>
        return (NULL);
9000e624:	2000      	movs	r0, #0
}
9000e626:	b007      	add	sp, #28
9000e628:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
9000e62a:	1e7a      	subs	r2, r7, #1
9000e62c:	2a37      	cmp	r2, #55	; 0x37
9000e62e:	d9d3      	bls.n	9000e5d8 <osThreadNew+0x1c>
9000e630:	e7f8      	b.n	9000e624 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
9000e632:	f04f 0c80 	mov.w	ip, #128	; 0x80
9000e636:	e7d6      	b.n	9000e5e6 <osThreadNew+0x2a>
  return ((osThreadId_t)hTask);
9000e638:	9805      	ldr	r0, [sp, #20]
9000e63a:	e7f4      	b.n	9000e626 <osThreadNew+0x6a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
9000e63c:	68e3      	ldr	r3, [r4, #12]
9000e63e:	2b00      	cmp	r3, #0
9000e640:	d1f1      	bne.n	9000e626 <osThreadNew+0x6a>
9000e642:	6923      	ldr	r3, [r4, #16]
9000e644:	2b00      	cmp	r3, #0
9000e646:	d1ee      	bne.n	9000e626 <osThreadNew+0x6a>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
9000e648:	fa1f f28c 	uxth.w	r2, ip
9000e64c:	462c      	mov	r4, r5
9000e64e:	e7df      	b.n	9000e610 <osThreadNew+0x54>

9000e650 <osDelay>:
osStatus_t osDelay (uint32_t ticks) {
9000e650:	b510      	push	{r4, lr}
9000e652:	f3ef 8405 	mrs	r4, IPSR
  if (IS_IRQ()) {
9000e656:	b92c      	cbnz	r4, 9000e664 <osDelay+0x14>
    if (ticks != 0U) {
9000e658:	b900      	cbnz	r0, 9000e65c <osDelay+0xc>
}
9000e65a:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
9000e65c:	f002 f9e4 	bl	90010a28 <vTaskDelay>
    stat = osOK;
9000e660:	4620      	mov	r0, r4
}
9000e662:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000e664:	f06f 0005 	mvn.w	r0, #5
}
9000e668:	bd10      	pop	{r4, pc}
9000e66a:	bf00      	nop

9000e66c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
9000e66c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000e670:	461c      	mov	r4, r3
9000e672:	b082      	sub	sp, #8
9000e674:	f3ef 8305 	mrs	r3, IPSR
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;

  if (!IS_IRQ() && (func != NULL)) {
9000e678:	b9bb      	cbnz	r3, 9000e6aa <osTimerNew+0x3e>
9000e67a:	4605      	mov	r5, r0
9000e67c:	b1a8      	cbz	r0, 9000e6aa <osTimerNew+0x3e>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
9000e67e:	2008      	movs	r0, #8
9000e680:	460e      	mov	r6, r1
9000e682:	4617      	mov	r7, r2
9000e684:	f000 fa5e 	bl	9000eb44 <pvPortMalloc>

    if (callb != NULL) {
9000e688:	4680      	mov	r8, r0
9000e68a:	b170      	cbz	r0, 9000e6aa <osTimerNew+0x3e>
      callb->func = func;
      callb->arg  = argument;

      if (type == osTimerOnce) {
9000e68c:	3e00      	subs	r6, #0
      callb->arg  = argument;
9000e68e:	e9c0 5700 	strd	r5, r7, [r0]
      if (type == osTimerOnce) {
9000e692:	bf18      	it	ne
9000e694:	2601      	movne	r6, #1
      }

      mem  = -1;
      name = NULL;

      if (attr != NULL) {
9000e696:	b1ec      	cbz	r4, 9000e6d4 <osTimerNew+0x68>
        if (attr->name != NULL) {
          name = attr->name;
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
9000e698:	68a3      	ldr	r3, [r4, #8]
        if (attr->name != NULL) {
9000e69a:	6820      	ldr	r0, [r4, #0]
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
9000e69c:	b1b3      	cbz	r3, 9000e6cc <osTimerNew+0x60>
9000e69e:	68e2      	ldr	r2, [r4, #12]
9000e6a0:	2a2b      	cmp	r2, #43	; 0x2b
9000e6a2:	d806      	bhi.n	9000e6b2 <osTimerNew+0x46>
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
        vPortFree (callb);
9000e6a4:	4640      	mov	r0, r8
9000e6a6:	f000 fb0b 	bl	9000ecc0 <vPortFree>
9000e6aa:	2000      	movs	r0, #0
      }
    }
  }

  return ((osTimerId_t)hTimer);
}
9000e6ac:	b002      	add	sp, #8
9000e6ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
9000e6b2:	4c0e      	ldr	r4, [pc, #56]	; (9000e6ec <osTimerNew+0x80>)
9000e6b4:	4632      	mov	r2, r6
9000e6b6:	2101      	movs	r1, #1
9000e6b8:	e9cd 4300 	strd	r4, r3, [sp]
9000e6bc:	4643      	mov	r3, r8
9000e6be:	f002 ffd5 	bl	9001166c <xTimerCreateStatic>
      if ((hTimer == NULL) && (callb != NULL)) {
9000e6c2:	2800      	cmp	r0, #0
9000e6c4:	d0ee      	beq.n	9000e6a4 <osTimerNew+0x38>
}
9000e6c6:	b002      	add	sp, #8
9000e6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000e6cc:	68e3      	ldr	r3, [r4, #12]
9000e6ce:	2b00      	cmp	r3, #0
9000e6d0:	d1e8      	bne.n	9000e6a4 <osTimerNew+0x38>
9000e6d2:	4604      	mov	r4, r0
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
9000e6d4:	4d05      	ldr	r5, [pc, #20]	; (9000e6ec <osTimerNew+0x80>)
9000e6d6:	4643      	mov	r3, r8
9000e6d8:	4632      	mov	r2, r6
9000e6da:	4620      	mov	r0, r4
9000e6dc:	2101      	movs	r1, #1
9000e6de:	9500      	str	r5, [sp, #0]
9000e6e0:	f002 ff5c 	bl	9001159c <xTimerCreate>
      if ((hTimer == NULL) && (callb != NULL)) {
9000e6e4:	2800      	cmp	r0, #0
9000e6e6:	d1ee      	bne.n	9000e6c6 <osTimerNew+0x5a>
9000e6e8:	e7dc      	b.n	9000e6a4 <osTimerNew+0x38>
9000e6ea:	bf00      	nop
9000e6ec:	9000e535 	.word	0x9000e535

9000e6f0 <osTimerStart>:
9000e6f0:	f3ef 8305 	mrs	r3, IPSR

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
  osStatus_t stat;

  if (IS_IRQ()) {
9000e6f4:	b973      	cbnz	r3, 9000e714 <osTimerStart+0x24>
osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
9000e6f6:	b510      	push	{r4, lr}
9000e6f8:	b082      	sub	sp, #8
    stat = osErrorISR;
  }
  else if (hTimer == NULL) {
9000e6fa:	b170      	cbz	r0, 9000e71a <osTimerStart+0x2a>
    stat = osErrorParameter;
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
9000e6fc:	460a      	mov	r2, r1
9000e6fe:	9300      	str	r3, [sp, #0]
9000e700:	2104      	movs	r1, #4
9000e702:	f003 f833 	bl	9001176c <xTimerGenericCommand>
      stat = osOK;
    } else {
      stat = osErrorResource;
9000e706:	2801      	cmp	r0, #1
9000e708:	bf0c      	ite	eq
9000e70a:	2000      	moveq	r0, #0
9000e70c:	f06f 0002 	mvnne.w	r0, #2
    }
  }

  return (stat);
}
9000e710:	b002      	add	sp, #8
9000e712:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000e714:	f06f 0005 	mvn.w	r0, #5
}
9000e718:	4770      	bx	lr
    stat = osErrorParameter;
9000e71a:	f06f 0003 	mvn.w	r0, #3
9000e71e:	e7f7      	b.n	9000e710 <osTimerStart+0x20>

9000e720 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
9000e720:	b570      	push	{r4, r5, r6, lr}
9000e722:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
9000e726:	b9db      	cbnz	r3, 9000e760 <osMutexNew+0x40>
    if (attr != NULL) {
9000e728:	4604      	mov	r4, r0
9000e72a:	b1e0      	cbz	r0, 9000e766 <osMutexNew+0x46>
      type = attr->attr_bits;
9000e72c:	6846      	ldr	r6, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
9000e72e:	0733      	lsls	r3, r6, #28
9000e730:	d416      	bmi.n	9000e760 <osMutexNew+0x40>
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000e732:	6881      	ldr	r1, [r0, #8]
    if ((type & osMutexRecursive) == osMutexRecursive) {
9000e734:	f006 0601 	and.w	r6, r6, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000e738:	68c3      	ldr	r3, [r0, #12]
9000e73a:	b181      	cbz	r1, 9000e75e <osMutexNew+0x3e>
9000e73c:	2b4f      	cmp	r3, #79	; 0x4f
9000e73e:	d90f      	bls.n	9000e760 <osMutexNew+0x40>
        mem = 0;
      }

      if (mem == 1) {
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
9000e740:	b31e      	cbz	r6, 9000e78a <osMutexNew+0x6a>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
9000e742:	2004      	movs	r0, #4
9000e744:	f001 f850 	bl	9000f7e8 <xQueueCreateMutexStatic>
9000e748:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
9000e74a:	b14d      	cbz	r5, 9000e760 <osMutexNew+0x40>
        if (attr != NULL) {
          name = attr->name;
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
9000e74c:	6821      	ldr	r1, [r4, #0]
9000e74e:	4628      	mov	r0, r5
9000e750:	f001 fd80 	bl	90010254 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
9000e754:	b12e      	cbz	r6, 9000e762 <osMutexNew+0x42>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
9000e756:	f045 0501 	orr.w	r5, r5, #1
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
9000e75a:	4628      	mov	r0, r5
9000e75c:	bd70      	pop	{r4, r5, r6, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000e75e:	b163      	cbz	r3, 9000e77a <osMutexNew+0x5a>
  hMutex = NULL;
9000e760:	2500      	movs	r5, #0
}
9000e762:	4628      	mov	r0, r5
9000e764:	bd70      	pop	{r4, r5, r6, pc}
              hMutex = xSemaphoreCreateMutex ();
9000e766:	2001      	movs	r0, #1
9000e768:	f001 f8ae 	bl	9000f8c8 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000e76c:	4605      	mov	r5, r0
9000e76e:	2800      	cmp	r0, #0
9000e770:	d0f6      	beq.n	9000e760 <osMutexNew+0x40>
        vQueueAddToRegistry (hMutex, name);
9000e772:	4621      	mov	r1, r4
9000e774:	f001 fd6e 	bl	90010254 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
9000e778:	e7f3      	b.n	9000e762 <osMutexNew+0x42>
            if (rmtx != 0U) {
9000e77a:	b15e      	cbz	r6, 9000e794 <osMutexNew+0x74>
              hMutex = xSemaphoreCreateRecursiveMutex ();
9000e77c:	2004      	movs	r0, #4
9000e77e:	f001 f8a3 	bl	9000f8c8 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000e782:	4605      	mov	r5, r0
9000e784:	2800      	cmp	r0, #0
9000e786:	d1e1      	bne.n	9000e74c <osMutexNew+0x2c>
9000e788:	e7ea      	b.n	9000e760 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
9000e78a:	2001      	movs	r0, #1
9000e78c:	f001 f82c 	bl	9000f7e8 <xQueueCreateMutexStatic>
9000e790:	4605      	mov	r5, r0
9000e792:	e7da      	b.n	9000e74a <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateMutex ();
9000e794:	2001      	movs	r0, #1
9000e796:	f001 f897 	bl	9000f8c8 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000e79a:	4605      	mov	r5, r0
9000e79c:	e7d5      	b.n	9000e74a <osMutexNew+0x2a>
9000e79e:	bf00      	nop

9000e7a0 <osMutexAcquire>:
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
9000e7a0:	f020 0201 	bic.w	r2, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
9000e7a4:	f000 0301 	and.w	r3, r0, #1
9000e7a8:	f3ef 8005 	mrs	r0, IPSR

  stat = osOK;

  if (IS_IRQ()) {
9000e7ac:	b9a8      	cbnz	r0, 9000e7da <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
9000e7ae:	b1ba      	cbz	r2, 9000e7e0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
9000e7b0:	4610      	mov	r0, r2
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
9000e7b2:	b510      	push	{r4, lr}
9000e7b4:	460c      	mov	r4, r1
    if (rmtx != 0U) {
9000e7b6:	b953      	cbnz	r3, 9000e7ce <osMutexAcquire+0x2e>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
9000e7b8:	f001 fafe 	bl	9000fdb8 <xQueueSemaphoreTake>
9000e7bc:	2801      	cmp	r0, #1
9000e7be:	d00a      	beq.n	9000e7d6 <osMutexAcquire+0x36>
          stat = osErrorResource;
9000e7c0:	2c00      	cmp	r4, #0
9000e7c2:	bf14      	ite	ne
9000e7c4:	f06f 0001 	mvnne.w	r0, #1
9000e7c8:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
9000e7cc:	bd10      	pop	{r4, pc}
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
9000e7ce:	f001 fc7b 	bl	900100c8 <xQueueTakeMutexRecursive>
9000e7d2:	2801      	cmp	r0, #1
9000e7d4:	d1f4      	bne.n	9000e7c0 <osMutexAcquire+0x20>
  stat = osOK;
9000e7d6:	2000      	movs	r0, #0
}
9000e7d8:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000e7da:	f06f 0005 	mvn.w	r0, #5
9000e7de:	4770      	bx	lr
    stat = osErrorParameter;
9000e7e0:	f06f 0003 	mvn.w	r0, #3
}
9000e7e4:	4770      	bx	lr
9000e7e6:	bf00      	nop

9000e7e8 <osMutexRelease>:
9000e7e8:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
9000e7ec:	b9ba      	cbnz	r2, 9000e81e <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
9000e7ee:	b510      	push	{r4, lr}
9000e7f0:	f020 0401 	bic.w	r4, r0, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
9000e7f4:	b1b4      	cbz	r4, 9000e824 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
9000e7f6:	f000 0301 	and.w	r3, r0, #1
9000e7fa:	b943      	cbnz	r3, 9000e80e <osMutexRelease+0x26>
        stat = osErrorResource;
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
9000e7fc:	461a      	mov	r2, r3
9000e7fe:	4619      	mov	r1, r3
9000e800:	4620      	mov	r0, r4
9000e802:	f000 fe6f 	bl	9000f4e4 <xQueueGenericSend>
9000e806:	2801      	cmp	r0, #1
9000e808:	d106      	bne.n	9000e818 <osMutexRelease+0x30>
  stat = osOK;
9000e80a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
9000e80c:	bd10      	pop	{r4, pc}
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
9000e80e:	4620      	mov	r0, r4
9000e810:	f001 f83a 	bl	9000f888 <xQueueGiveMutexRecursive>
9000e814:	2801      	cmp	r0, #1
9000e816:	d0f8      	beq.n	9000e80a <osMutexRelease+0x22>
        stat = osErrorResource;
9000e818:	f06f 0002 	mvn.w	r0, #2
}
9000e81c:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000e81e:	f06f 0005 	mvn.w	r0, #5
}
9000e822:	4770      	bx	lr
    stat = osErrorParameter;
9000e824:	f06f 0003 	mvn.w	r0, #3
}
9000e828:	bd10      	pop	{r4, pc}
9000e82a:	bf00      	nop

9000e82c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
9000e82c:	b5f0      	push	{r4, r5, r6, r7, lr}
9000e82e:	b083      	sub	sp, #12
9000e830:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
9000e834:	b98e      	cbnz	r6, 9000e85a <osSemaphoreNew+0x2e>
9000e836:	4605      	mov	r5, r0
9000e838:	b178      	cbz	r0, 9000e85a <osSemaphoreNew+0x2e>
9000e83a:	4288      	cmp	r0, r1
9000e83c:	460f      	mov	r7, r1
9000e83e:	d30c      	bcc.n	9000e85a <osSemaphoreNew+0x2e>
    mem = -1;

    if (attr != NULL) {
9000e840:	4614      	mov	r4, r2
9000e842:	b182      	cbz	r2, 9000e866 <osSemaphoreNew+0x3a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000e844:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
9000e848:	b15a      	cbz	r2, 9000e862 <osSemaphoreNew+0x36>
9000e84a:	2b4f      	cmp	r3, #79	; 0x4f
9000e84c:	d905      	bls.n	9000e85a <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
9000e84e:	2801      	cmp	r0, #1
9000e850:	d032      	beq.n	9000e8b8 <osSemaphoreNew+0x8c>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
9000e852:	f000 fd9f 	bl	9000f394 <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
9000e856:	4605      	mov	r5, r0
9000e858:	b978      	cbnz	r0, 9000e87a <osSemaphoreNew+0x4e>
  hSemaphore = NULL;
9000e85a:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
9000e85c:	4628      	mov	r0, r5
9000e85e:	b003      	add	sp, #12
9000e860:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000e862:	2b00      	cmp	r3, #0
9000e864:	d1f9      	bne.n	9000e85a <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
9000e866:	2d01      	cmp	r5, #1
9000e868:	d00f      	beq.n	9000e88a <osSemaphoreNew+0x5e>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
9000e86a:	4628      	mov	r0, r5
9000e86c:	4639      	mov	r1, r7
9000e86e:	f000 fdf3 	bl	9000f458 <xQueueCreateCountingSemaphore>
9000e872:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
9000e874:	2d00      	cmp	r5, #0
9000e876:	d0f0      	beq.n	9000e85a <osSemaphoreNew+0x2e>
        if (attr != NULL) {
9000e878:	b104      	cbz	r4, 9000e87c <osSemaphoreNew+0x50>
          name = attr->name;
9000e87a:	6824      	ldr	r4, [r4, #0]
        vQueueAddToRegistry (hSemaphore, name);
9000e87c:	4628      	mov	r0, r5
9000e87e:	4621      	mov	r1, r4
9000e880:	f001 fce8 	bl	90010254 <vQueueAddToRegistry>
}
9000e884:	4628      	mov	r0, r5
9000e886:	b003      	add	sp, #12
9000e888:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateBinary();
9000e88a:	4628      	mov	r0, r5
9000e88c:	2203      	movs	r2, #3
9000e88e:	2100      	movs	r1, #0
9000e890:	f000 fd3e 	bl	9000f310 <xQueueGenericCreate>
9000e894:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
9000e896:	2d00      	cmp	r5, #0
9000e898:	d0df      	beq.n	9000e85a <osSemaphoreNew+0x2e>
9000e89a:	2f00      	cmp	r7, #0
9000e89c:	d0ea      	beq.n	9000e874 <osSemaphoreNew+0x48>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
9000e89e:	2300      	movs	r3, #0
9000e8a0:	4628      	mov	r0, r5
9000e8a2:	461a      	mov	r2, r3
9000e8a4:	4619      	mov	r1, r3
9000e8a6:	f000 fe1d 	bl	9000f4e4 <xQueueGenericSend>
9000e8aa:	2801      	cmp	r0, #1
9000e8ac:	d0e4      	beq.n	9000e878 <osSemaphoreNew+0x4c>
            vSemaphoreDelete (hSemaphore);
9000e8ae:	4628      	mov	r0, r5
            hSemaphore = NULL;
9000e8b0:	2500      	movs	r5, #0
            vSemaphoreDelete (hSemaphore);
9000e8b2:	f001 fc89 	bl	900101c8 <vQueueDelete>
      if (hSemaphore != NULL) {
9000e8b6:	e7d1      	b.n	9000e85c <osSemaphoreNew+0x30>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
9000e8b8:	4613      	mov	r3, r2
9000e8ba:	2203      	movs	r2, #3
9000e8bc:	4631      	mov	r1, r6
9000e8be:	9200      	str	r2, [sp, #0]
9000e8c0:	4632      	mov	r2, r6
9000e8c2:	f000 fcb9 	bl	9000f238 <xQueueGenericCreateStatic>
9000e8c6:	4605      	mov	r5, r0
9000e8c8:	e7e5      	b.n	9000e896 <osSemaphoreNew+0x6a>
9000e8ca:	bf00      	nop

9000e8cc <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
9000e8cc:	b370      	cbz	r0, 9000e92c <osSemaphoreAcquire+0x60>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
9000e8ce:	b510      	push	{r4, lr}
9000e8d0:	460c      	mov	r4, r1
9000e8d2:	b082      	sub	sp, #8
9000e8d4:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
9000e8d8:	b1c3      	cbz	r3, 9000e90c <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
9000e8da:	bb21      	cbnz	r1, 9000e926 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
9000e8dc:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000e8de:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
9000e8e0:	f001 fc12 	bl	90010108 <xQueueReceiveFromISR>
9000e8e4:	2801      	cmp	r0, #1
9000e8e6:	d11a      	bne.n	9000e91e <osSemaphoreAcquire+0x52>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000e8e8:	9b01      	ldr	r3, [sp, #4]
9000e8ea:	b913      	cbnz	r3, 9000e8f2 <osSemaphoreAcquire+0x26>
  stat = osOK;
9000e8ec:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
9000e8ee:	b002      	add	sp, #8
9000e8f0:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
9000e8f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000e8f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000e8fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000e8fe:	f3bf 8f4f 	dsb	sy
9000e902:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000e906:	4620      	mov	r0, r4
}
9000e908:	b002      	add	sp, #8
9000e90a:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
9000e90c:	f001 fa54 	bl	9000fdb8 <xQueueSemaphoreTake>
9000e910:	2801      	cmp	r0, #1
9000e912:	d0eb      	beq.n	9000e8ec <osSemaphoreAcquire+0x20>
      if (timeout != 0U) {
9000e914:	b11c      	cbz	r4, 9000e91e <osSemaphoreAcquire+0x52>
        stat = osErrorTimeout;
9000e916:	f06f 0001 	mvn.w	r0, #1
}
9000e91a:	b002      	add	sp, #8
9000e91c:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
9000e91e:	f06f 0002 	mvn.w	r0, #2
}
9000e922:	b002      	add	sp, #8
9000e924:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
9000e926:	f06f 0003 	mvn.w	r0, #3
9000e92a:	e7e0      	b.n	9000e8ee <osSemaphoreAcquire+0x22>
9000e92c:	f06f 0003 	mvn.w	r0, #3
}
9000e930:	4770      	bx	lr
9000e932:	bf00      	nop

9000e934 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
9000e934:	b330      	cbz	r0, 9000e984 <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
9000e936:	b510      	push	{r4, lr}
9000e938:	b082      	sub	sp, #8
9000e93a:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
9000e93e:	b1ab      	cbz	r3, 9000e96c <osSemaphoreRelease+0x38>
    yield = pdFALSE;
9000e940:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
9000e942:	a901      	add	r1, sp, #4
    yield = pdFALSE;
9000e944:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
9000e946:	f001 f861 	bl	9000fa0c <xQueueGiveFromISR>
9000e94a:	2801      	cmp	r0, #1
9000e94c:	d117      	bne.n	9000e97e <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
9000e94e:	9b01      	ldr	r3, [sp, #4]
9000e950:	b193      	cbz	r3, 9000e978 <osSemaphoreRelease+0x44>
9000e952:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000e956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000e95a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000e95e:	f3bf 8f4f 	dsb	sy
9000e962:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000e966:	4620      	mov	r0, r4
      stat = osErrorResource;
    }
  }

  return (stat);
}
9000e968:	b002      	add	sp, #8
9000e96a:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
9000e96c:	461a      	mov	r2, r3
9000e96e:	4619      	mov	r1, r3
9000e970:	f000 fdb8 	bl	9000f4e4 <xQueueGenericSend>
9000e974:	2801      	cmp	r0, #1
9000e976:	d102      	bne.n	9000e97e <osSemaphoreRelease+0x4a>
  stat = osOK;
9000e978:	2000      	movs	r0, #0
}
9000e97a:	b002      	add	sp, #8
9000e97c:	bd10      	pop	{r4, pc}
      stat = osErrorResource;
9000e97e:	f06f 0002 	mvn.w	r0, #2
9000e982:	e7fa      	b.n	9000e97a <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
9000e984:	f06f 0003 	mvn.w	r0, #3
}
9000e988:	4770      	bx	lr
9000e98a:	bf00      	nop

9000e98c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
9000e98c:	b5f0      	push	{r4, r5, r6, r7, lr}
9000e98e:	b083      	sub	sp, #12
9000e990:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
9000e994:	b987      	cbnz	r7, 9000e9b8 <osMessageQueueNew+0x2c>
9000e996:	4605      	mov	r5, r0
9000e998:	b170      	cbz	r0, 9000e9b8 <osMessageQueueNew+0x2c>
9000e99a:	b169      	cbz	r1, 9000e9b8 <osMessageQueueNew+0x2c>
    mem = -1;

    if (attr != NULL) {
9000e99c:	4614      	mov	r4, r2
9000e99e:	b17a      	cbz	r2, 9000e9c0 <osMessageQueueNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
9000e9a0:	6893      	ldr	r3, [r2, #8]
9000e9a2:	b1cb      	cbz	r3, 9000e9d8 <osMessageQueueNew+0x4c>
9000e9a4:	68d2      	ldr	r2, [r2, #12]
9000e9a6:	2a4f      	cmp	r2, #79	; 0x4f
9000e9a8:	d906      	bls.n	9000e9b8 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
9000e9aa:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
9000e9ac:	b122      	cbz	r2, 9000e9b8 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
9000e9ae:	fb01 f505 	mul.w	r5, r1, r5
9000e9b2:	6966      	ldr	r6, [r4, #20]
9000e9b4:	42ae      	cmp	r6, r5
9000e9b6:	d21f      	bcs.n	9000e9f8 <osMessageQueueNew+0x6c>
  hQueue = NULL;
9000e9b8:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
9000e9ba:	4628      	mov	r0, r5
9000e9bc:	b003      	add	sp, #12
9000e9be:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
9000e9c0:	f000 fca6 	bl	9000f310 <xQueueGenericCreate>
    if (hQueue != NULL) {
9000e9c4:	4605      	mov	r5, r0
9000e9c6:	2800      	cmp	r0, #0
9000e9c8:	d0f6      	beq.n	9000e9b8 <osMessageQueueNew+0x2c>
      vQueueAddToRegistry (hQueue, name);
9000e9ca:	4628      	mov	r0, r5
9000e9cc:	4621      	mov	r1, r4
9000e9ce:	f001 fc41 	bl	90010254 <vQueueAddToRegistry>
}
9000e9d2:	4628      	mov	r0, r5
9000e9d4:	b003      	add	sp, #12
9000e9d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
9000e9d8:	68d3      	ldr	r3, [r2, #12]
9000e9da:	2b00      	cmp	r3, #0
9000e9dc:	d1ec      	bne.n	9000e9b8 <osMessageQueueNew+0x2c>
9000e9de:	6913      	ldr	r3, [r2, #16]
9000e9e0:	2b00      	cmp	r3, #0
9000e9e2:	d1e9      	bne.n	9000e9b8 <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
9000e9e4:	6952      	ldr	r2, [r2, #20]
9000e9e6:	2a00      	cmp	r2, #0
9000e9e8:	d1e6      	bne.n	9000e9b8 <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
9000e9ea:	f000 fc91 	bl	9000f310 <xQueueGenericCreate>
    if (hQueue != NULL) {
9000e9ee:	4605      	mov	r5, r0
9000e9f0:	2800      	cmp	r0, #0
9000e9f2:	d0e1      	beq.n	9000e9b8 <osMessageQueueNew+0x2c>
        name = attr->name;
9000e9f4:	6824      	ldr	r4, [r4, #0]
9000e9f6:	e7e8      	b.n	9000e9ca <osMessageQueueNew+0x3e>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
9000e9f8:	9700      	str	r7, [sp, #0]
9000e9fa:	f000 fc1d 	bl	9000f238 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
9000e9fe:	4605      	mov	r5, r0
9000ea00:	2800      	cmp	r0, #0
9000ea02:	d1f7      	bne.n	9000e9f4 <osMessageQueueNew+0x68>
9000ea04:	e7d8      	b.n	9000e9b8 <osMessageQueueNew+0x2c>
9000ea06:	bf00      	nop

9000ea08 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
9000ea08:	b530      	push	{r4, r5, lr}
9000ea0a:	461c      	mov	r4, r3
9000ea0c:	b083      	sub	sp, #12
9000ea0e:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
9000ea12:	b30b      	cbz	r3, 9000ea58 <osMessageQueuePut+0x50>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000ea14:	3c00      	subs	r4, #0
9000ea16:	bf18      	it	ne
9000ea18:	2401      	movne	r4, #1
9000ea1a:	2900      	cmp	r1, #0
9000ea1c:	bf08      	it	eq
9000ea1e:	f044 0401 	orreq.w	r4, r4, #1
9000ea22:	bb7c      	cbnz	r4, 9000ea84 <osMessageQueuePut+0x7c>
9000ea24:	fab0 f480 	clz	r4, r0
9000ea28:	0964      	lsrs	r4, r4, #5
9000ea2a:	b358      	cbz	r0, 9000ea84 <osMessageQueuePut+0x7c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
9000ea2c:	4623      	mov	r3, r4
9000ea2e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000ea30:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
9000ea32:	f000 ff81 	bl	9000f938 <xQueueGenericSendFromISR>
9000ea36:	2801      	cmp	r0, #1
9000ea38:	d120      	bne.n	9000ea7c <osMessageQueuePut+0x74>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000ea3a:	9b01      	ldr	r3, [sp, #4]
9000ea3c:	b1db      	cbz	r3, 9000ea76 <osMessageQueuePut+0x6e>
9000ea3e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000ea42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000ea46:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000ea4a:	f3bf 8f4f 	dsb	sy
9000ea4e:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000ea52:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
9000ea54:	b003      	add	sp, #12
9000ea56:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
9000ea58:	b1a0      	cbz	r0, 9000ea84 <osMessageQueuePut+0x7c>
9000ea5a:	fab1 f381 	clz	r3, r1
9000ea5e:	095b      	lsrs	r3, r3, #5
9000ea60:	b181      	cbz	r1, 9000ea84 <osMessageQueuePut+0x7c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
9000ea62:	4622      	mov	r2, r4
9000ea64:	f000 fd3e 	bl	9000f4e4 <xQueueGenericSend>
9000ea68:	2801      	cmp	r0, #1
9000ea6a:	d004      	beq.n	9000ea76 <osMessageQueuePut+0x6e>
        if (timeout != 0U) {
9000ea6c:	b134      	cbz	r4, 9000ea7c <osMessageQueuePut+0x74>
          stat = osErrorTimeout;
9000ea6e:	f06f 0001 	mvn.w	r0, #1
}
9000ea72:	b003      	add	sp, #12
9000ea74:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
9000ea76:	2000      	movs	r0, #0
}
9000ea78:	b003      	add	sp, #12
9000ea7a:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
9000ea7c:	f06f 0002 	mvn.w	r0, #2
}
9000ea80:	b003      	add	sp, #12
9000ea82:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
9000ea84:	f06f 0003 	mvn.w	r0, #3
9000ea88:	e7e4      	b.n	9000ea54 <osMessageQueuePut+0x4c>
9000ea8a:	bf00      	nop

9000ea8c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
9000ea8c:	b530      	push	{r4, r5, lr}
9000ea8e:	461c      	mov	r4, r3
9000ea90:	b083      	sub	sp, #12
9000ea92:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
9000ea96:	b303      	cbz	r3, 9000eada <osMessageQueueGet+0x4e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000ea98:	3c00      	subs	r4, #0
9000ea9a:	bf18      	it	ne
9000ea9c:	2401      	movne	r4, #1
9000ea9e:	2900      	cmp	r1, #0
9000eaa0:	bf08      	it	eq
9000eaa2:	f044 0401 	orreq.w	r4, r4, #1
9000eaa6:	bb5c      	cbnz	r4, 9000eb00 <osMessageQueueGet+0x74>
9000eaa8:	fab0 f480 	clz	r4, r0
9000eaac:	0964      	lsrs	r4, r4, #5
9000eaae:	b338      	cbz	r0, 9000eb00 <osMessageQueueGet+0x74>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
9000eab0:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000eab2:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
9000eab4:	f001 fb28 	bl	90010108 <xQueueReceiveFromISR>
9000eab8:	2801      	cmp	r0, #1
9000eaba:	d11d      	bne.n	9000eaf8 <osMessageQueueGet+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000eabc:	9b01      	ldr	r3, [sp, #4]
9000eabe:	b1c3      	cbz	r3, 9000eaf2 <osMessageQueueGet+0x66>
9000eac0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000eac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000eac8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000eacc:	f3bf 8f4f 	dsb	sy
9000ead0:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000ead4:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
9000ead6:	b003      	add	sp, #12
9000ead8:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
9000eada:	b188      	cbz	r0, 9000eb00 <osMessageQueueGet+0x74>
9000eadc:	b181      	cbz	r1, 9000eb00 <osMessageQueueGet+0x74>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
9000eade:	4622      	mov	r2, r4
9000eae0:	f000 ffec 	bl	9000fabc <xQueueReceive>
9000eae4:	2801      	cmp	r0, #1
9000eae6:	d004      	beq.n	9000eaf2 <osMessageQueueGet+0x66>
        if (timeout != 0U) {
9000eae8:	b134      	cbz	r4, 9000eaf8 <osMessageQueueGet+0x6c>
          stat = osErrorTimeout;
9000eaea:	f06f 0001 	mvn.w	r0, #1
}
9000eaee:	b003      	add	sp, #12
9000eaf0:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
9000eaf2:	2000      	movs	r0, #0
}
9000eaf4:	b003      	add	sp, #12
9000eaf6:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
9000eaf8:	f06f 0002 	mvn.w	r0, #2
}
9000eafc:	b003      	add	sp, #12
9000eafe:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
9000eb00:	f06f 0003 	mvn.w	r0, #3
9000eb04:	e7e7      	b.n	9000ead6 <osMessageQueueGet+0x4a>
9000eb06:	bf00      	nop

9000eb08 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
9000eb08:	4b04      	ldr	r3, [pc, #16]	; (9000eb1c <vApplicationGetIdleTaskMemory+0x14>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
9000eb0a:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
9000eb0c:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
9000eb0e:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
9000eb10:	4c03      	ldr	r4, [pc, #12]	; (9000eb20 <vApplicationGetIdleTaskMemory+0x18>)
9000eb12:	600c      	str	r4, [r1, #0]
}
9000eb14:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
9000eb18:	6013      	str	r3, [r2, #0]
}
9000eb1a:	4770      	bx	lr
9000eb1c:	2400df54 	.word	0x2400df54
9000eb20:	2400dd54 	.word	0x2400dd54

9000eb24 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
9000eb24:	4b05      	ldr	r3, [pc, #20]	; (9000eb3c <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
9000eb26:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
9000eb28:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
9000eb2a:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
9000eb2e:	4c04      	ldr	r4, [pc, #16]	; (9000eb40 <vApplicationGetTimerTaskMemory+0x1c>)
9000eb30:	600c      	str	r4, [r1, #0]
}
9000eb32:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
9000eb36:	6013      	str	r3, [r2, #0]
}
9000eb38:	4770      	bx	lr
9000eb3a:	bf00      	nop
9000eb3c:	2400e3b8 	.word	0x2400e3b8
9000eb40:	2400dfb8 	.word	0x2400dfb8

9000eb44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
9000eb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000eb48:	4605      	mov	r5, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
9000eb4a:	f002 f85f 	bl	90010c0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
9000eb4e:	4a54      	ldr	r2, [pc, #336]	; (9000eca0 <pvPortMalloc+0x15c>)
9000eb50:	6816      	ldr	r6, [r2, #0]
9000eb52:	2e00      	cmp	r6, #0
9000eb54:	d06f      	beq.n	9000ec36 <pvPortMalloc+0xf2>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
9000eb56:	4b53      	ldr	r3, [pc, #332]	; (9000eca4 <pvPortMalloc+0x160>)
9000eb58:	681f      	ldr	r7, [r3, #0]
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
9000eb5a:	423d      	tst	r5, r7
9000eb5c:	d12e      	bne.n	9000ebbc <pvPortMalloc+0x78>
9000eb5e:	b36d      	cbz	r5, 9000ebbc <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
9000eb60:	f105 0408 	add.w	r4, r5, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
9000eb64:	076d      	lsls	r5, r5, #29
9000eb66:	d002      	beq.n	9000eb6e <pvPortMalloc+0x2a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
9000eb68:	f024 0407 	bic.w	r4, r4, #7
9000eb6c:	3408      	adds	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
9000eb6e:	b32c      	cbz	r4, 9000ebbc <pvPortMalloc+0x78>
9000eb70:	f8df c148 	ldr.w	ip, [pc, #328]	; 9000ecbc <pvPortMalloc+0x178>
9000eb74:	f8dc 5000 	ldr.w	r5, [ip]
9000eb78:	42a5      	cmp	r5, r4
9000eb7a:	d31f      	bcc.n	9000ebbc <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
9000eb7c:	484a      	ldr	r0, [pc, #296]	; (9000eca8 <pvPortMalloc+0x164>)
9000eb7e:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
9000eb80:	e003      	b.n	9000eb8a <pvPortMalloc+0x46>
9000eb82:	681a      	ldr	r2, [r3, #0]
9000eb84:	b122      	cbz	r2, 9000eb90 <pvPortMalloc+0x4c>
9000eb86:	4618      	mov	r0, r3
9000eb88:	4613      	mov	r3, r2
9000eb8a:	6859      	ldr	r1, [r3, #4]
9000eb8c:	42a1      	cmp	r1, r4
9000eb8e:	d3f8      	bcc.n	9000eb82 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
9000eb90:	42b3      	cmp	r3, r6
9000eb92:	d013      	beq.n	9000ebbc <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
9000eb94:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000eb96:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
9000eb98:	f858 eb08 	ldr.w	lr, [r8], #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000eb9c:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
9000eb9e:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000eba2:	d929      	bls.n	9000ebf8 <pvPortMalloc+0xb4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
9000eba4:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
9000eba6:	0748      	lsls	r0, r1, #29
9000eba8:	d00f      	beq.n	9000ebca <pvPortMalloc+0x86>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
9000ebaa:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ebae:	f383 8811 	msr	BASEPRI, r3
9000ebb2:	f3bf 8f6f 	isb	sy
9000ebb6:	f3bf 8f4f 	dsb	sy
9000ebba:	e7fe      	b.n	9000ebba <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
9000ebbc:	f04f 0800 	mov.w	r8, #0
9000ebc0:	f002 f82c 	bl	90010c1c <xTaskResumeAll>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
9000ebc4:	4640      	mov	r0, r8
9000ebc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
9000ebca:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000ebcc:	4a36      	ldr	r2, [pc, #216]	; (9000eca8 <pvPortMalloc+0x164>)
						pxBlock->xBlockSize = xWantedSize;
9000ebce:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000ebd0:	4614      	mov	r4, r2
9000ebd2:	6812      	ldr	r2, [r2, #0]
9000ebd4:	4291      	cmp	r1, r2
9000ebd6:	d8fb      	bhi.n	9000ebd0 <pvPortMalloc+0x8c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000ebd8:	6860      	ldr	r0, [r4, #4]
9000ebda:	eb04 0e00 	add.w	lr, r4, r0
9000ebde:	4571      	cmp	r1, lr
9000ebe0:	d04a      	beq.n	9000ec78 <pvPortMalloc+0x134>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000ebe2:	f8d1 e004 	ldr.w	lr, [r1, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000ebe6:	eb01 000e 	add.w	r0, r1, lr
9000ebea:	4282      	cmp	r2, r0
9000ebec:	d050      	beq.n	9000ec90 <pvPortMalloc+0x14c>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
9000ebee:	428c      	cmp	r4, r1
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000ebf0:	600a      	str	r2, [r1, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
9000ebf2:	bf18      	it	ne
9000ebf4:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000ebf6:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000ebf8:	4a2c      	ldr	r2, [pc, #176]	; (9000ecac <pvPortMalloc+0x168>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000ebfa:	1a6d      	subs	r5, r5, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
9000ebfc:	4339      	orrs	r1, r7
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000ebfe:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000ec00:	f8cc 5000 	str.w	r5, [ip]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000ec04:	4285      	cmp	r5, r0
					pxBlock->pxNextFreeBlock = NULL;
9000ec06:	f04f 0000 	mov.w	r0, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
9000ec0a:	bf38      	it	cc
9000ec0c:	6015      	strcc	r5, [r2, #0]
					xNumberOfSuccessfulAllocations++;
9000ec0e:	4a28      	ldr	r2, [pc, #160]	; (9000ecb0 <pvPortMalloc+0x16c>)
					pxBlock->pxNextFreeBlock = NULL;
9000ec10:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
9000ec14:	6813      	ldr	r3, [r2, #0]
9000ec16:	3301      	adds	r3, #1
9000ec18:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
9000ec1a:	f001 ffff 	bl	90010c1c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
9000ec1e:	f018 0f07 	tst.w	r8, #7
9000ec22:	d0cf      	beq.n	9000ebc4 <pvPortMalloc+0x80>
9000ec24:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ec28:	f383 8811 	msr	BASEPRI, r3
9000ec2c:	f3bf 8f6f 	isb	sy
9000ec30:	f3bf 8f4f 	dsb	sy
9000ec34:	e7fe      	b.n	9000ec34 <pvPortMalloc+0xf0>
	uxAddress = ( size_t ) ucHeap;
9000ec36:	4b1f      	ldr	r3, [pc, #124]	; (9000ecb4 <pvPortMalloc+0x170>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
9000ec38:	075e      	lsls	r6, r3, #29
9000ec3a:	d117      	bne.n	9000ec6c <pvPortMalloc+0x128>
9000ec3c:	4e1e      	ldr	r6, [pc, #120]	; (9000ecb8 <pvPortMalloc+0x174>)
9000ec3e:	4619      	mov	r1, r3
	uxAddress -= xHeapStructSize;
9000ec40:	3e08      	subs	r6, #8
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9000ec42:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9000ec46:	4818      	ldr	r0, [pc, #96]	; (9000eca8 <pvPortMalloc+0x164>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
9000ec48:	f026 0607 	bic.w	r6, r6, #7
	pxEnd = ( void * ) uxAddress;
9000ec4c:	6016      	str	r6, [r2, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
9000ec4e:	1af3      	subs	r3, r6, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000ec50:	4a16      	ldr	r2, [pc, #88]	; (9000ecac <pvPortMalloc+0x168>)
9000ec52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000ec54:	4a19      	ldr	r2, [pc, #100]	; (9000ecbc <pvPortMalloc+0x178>)
9000ec56:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9000ec58:	4a12      	ldr	r2, [pc, #72]	; (9000eca4 <pvPortMalloc+0x160>)
9000ec5a:	6017      	str	r7, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
9000ec5c:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9000ec5e:	e9c0 1200 	strd	r1, r2, [r0]
	pxEnd->pxNextFreeBlock = NULL;
9000ec62:	e9c6 2200 	strd	r2, r2, [r6]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
9000ec66:	e9c1 6300 	strd	r6, r3, [r1]
}
9000ec6a:	e776      	b.n	9000eb5a <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
9000ec6c:	3307      	adds	r3, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
9000ec6e:	4e12      	ldr	r6, [pc, #72]	; (9000ecb8 <pvPortMalloc+0x174>)
	pucAlignedHeap = ( uint8_t * ) uxAddress;
9000ec70:	f023 0107 	bic.w	r1, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
9000ec74:	460b      	mov	r3, r1
9000ec76:	e7e3      	b.n	9000ec40 <pvPortMalloc+0xfc>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000ec78:	6849      	ldr	r1, [r1, #4]
9000ec7a:	eb00 0e01 	add.w	lr, r0, r1
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000ec7e:	eb04 010e 	add.w	r1, r4, lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000ec82:	f8c4 e004 	str.w	lr, [r4, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000ec86:	428a      	cmp	r2, r1
9000ec88:	d001      	beq.n	9000ec8e <pvPortMalloc+0x14a>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000ec8a:	6022      	str	r2, [r4, #0]
	if( pxIterator != pxBlockToInsert )
9000ec8c:	e7b3      	b.n	9000ebf6 <pvPortMalloc+0xb2>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000ec8e:	4621      	mov	r1, r4
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000ec90:	42b2      	cmp	r2, r6
9000ec92:	d0ac      	beq.n	9000ebee <pvPortMalloc+0xaa>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000ec94:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000ec96:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000ec98:	4470      	add	r0, lr
9000ec9a:	6048      	str	r0, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000ec9c:	e7a7      	b.n	9000ebee <pvPortMalloc+0xaa>
9000ec9e:	bf00      	nop
9000eca0:	2400e418 	.word	0x2400e418
9000eca4:	24026abc 	.word	0x24026abc
9000eca8:	24026ad0 	.word	0x24026ad0
9000ecac:	24026ac4 	.word	0x24026ac4
9000ecb0:	24026ac8 	.word	0x24026ac8
9000ecb4:	2400e41c 	.word	0x2400e41c
9000ecb8:	24026abc 	.word	0x24026abc
9000ecbc:	24026ac0 	.word	0x24026ac0

9000ecc0 <vPortFree>:
	if( pv != NULL )
9000ecc0:	b1d0      	cbz	r0, 9000ecf8 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
9000ecc2:	4a2c      	ldr	r2, [pc, #176]	; (9000ed74 <vPortFree+0xb4>)
9000ecc4:	f850 3c04 	ldr.w	r3, [r0, #-4]
9000ecc8:	6812      	ldr	r2, [r2, #0]
9000ecca:	4213      	tst	r3, r2
9000eccc:	d00b      	beq.n	9000ece6 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
9000ecce:	f850 1c08 	ldr.w	r1, [r0, #-8]
9000ecd2:	b191      	cbz	r1, 9000ecfa <vPortFree+0x3a>
9000ecd4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ecd8:	f383 8811 	msr	BASEPRI, r3
9000ecdc:	f3bf 8f6f 	isb	sy
9000ece0:	f3bf 8f4f 	dsb	sy
9000ece4:	e7fe      	b.n	9000ece4 <vPortFree+0x24>
9000ece6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ecea:	f383 8811 	msr	BASEPRI, r3
9000ecee:	f3bf 8f6f 	isb	sy
9000ecf2:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
9000ecf6:	e7fe      	b.n	9000ecf6 <vPortFree+0x36>
9000ecf8:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000ecfa:	ea23 0302 	bic.w	r3, r3, r2
{
9000ecfe:	b530      	push	{r4, r5, lr}
9000ed00:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000ed02:	f840 3c04 	str.w	r3, [r0, #-4]
		puc -= xHeapStructSize;
9000ed06:	f1a0 0408 	sub.w	r4, r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
9000ed0a:	4d1b      	ldr	r5, [pc, #108]	; (9000ed78 <vPortFree+0xb8>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000ed0c:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
9000ed0e:	f001 ff7d 	bl	90010c0c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
9000ed12:	9801      	ldr	r0, [sp, #4]
9000ed14:	682a      	ldr	r2, [r5, #0]
9000ed16:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000ed1a:	4b18      	ldr	r3, [pc, #96]	; (9000ed7c <vPortFree+0xbc>)
					xFreeBytesRemaining += pxLink->xBlockSize;
9000ed1c:	440a      	add	r2, r1
9000ed1e:	602a      	str	r2, [r5, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000ed20:	461a      	mov	r2, r3
9000ed22:	681b      	ldr	r3, [r3, #0]
9000ed24:	429c      	cmp	r4, r3
9000ed26:	d8fb      	bhi.n	9000ed20 <vPortFree+0x60>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000ed28:	6850      	ldr	r0, [r2, #4]
9000ed2a:	eb02 0c00 	add.w	ip, r2, r0
9000ed2e:	4564      	cmp	r4, ip
9000ed30:	d00f      	beq.n	9000ed52 <vPortFree+0x92>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000ed32:	1860      	adds	r0, r4, r1
9000ed34:	4283      	cmp	r3, r0
9000ed36:	d014      	beq.n	9000ed62 <vPortFree+0xa2>
	if( pxIterator != pxBlockToInsert )
9000ed38:	42a2      	cmp	r2, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000ed3a:	6023      	str	r3, [r4, #0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
9000ed3c:	bf18      	it	ne
9000ed3e:	6014      	strne	r4, [r2, #0]
					xNumberOfSuccessfulFrees++;
9000ed40:	4a0f      	ldr	r2, [pc, #60]	; (9000ed80 <vPortFree+0xc0>)
9000ed42:	6813      	ldr	r3, [r2, #0]
9000ed44:	3301      	adds	r3, #1
9000ed46:	6013      	str	r3, [r2, #0]
}
9000ed48:	b003      	add	sp, #12
9000ed4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				( void ) xTaskResumeAll();
9000ed4e:	f001 bf65 	b.w	90010c1c <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000ed52:	4401      	add	r1, r0
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000ed54:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000ed56:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000ed58:	4283      	cmp	r3, r0
9000ed5a:	d001      	beq.n	9000ed60 <vPortFree+0xa0>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000ed5c:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
9000ed5e:	e7ef      	b.n	9000ed40 <vPortFree+0x80>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000ed60:	4614      	mov	r4, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000ed62:	4808      	ldr	r0, [pc, #32]	; (9000ed84 <vPortFree+0xc4>)
9000ed64:	6800      	ldr	r0, [r0, #0]
9000ed66:	4283      	cmp	r3, r0
9000ed68:	d0e6      	beq.n	9000ed38 <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000ed6a:	e9d3 3000 	ldrd	r3, r0, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000ed6e:	4401      	add	r1, r0
9000ed70:	6061      	str	r1, [r4, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000ed72:	e7e1      	b.n	9000ed38 <vPortFree+0x78>
9000ed74:	24026abc 	.word	0x24026abc
9000ed78:	24026ac0 	.word	0x24026ac0
9000ed7c:	24026ad0 	.word	0x24026ad0
9000ed80:	24026acc 	.word	0x24026acc
9000ed84:	2400e418 	.word	0x2400e418

9000ed88 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000ed88:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
9000ed8c:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
9000ed90:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
9000ed92:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
9000ed94:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000ed96:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000ed98:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
9000ed9c:	4770      	bx	lr
9000ed9e:	bf00      	nop

9000eda0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
9000eda0:	2300      	movs	r3, #0
9000eda2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
9000eda4:	4770      	bx	lr
9000eda6:	bf00      	nop

9000eda8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
9000eda8:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
9000edaa:	6802      	ldr	r2, [r0, #0]
{
9000edac:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
9000edae:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
9000edb0:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
9000edb2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
9000edb4:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
9000edb6:	689c      	ldr	r4, [r3, #8]
9000edb8:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
9000edba:	6099      	str	r1, [r3, #8]
}
9000edbc:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
9000edc0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
9000edc2:	6002      	str	r2, [r0, #0]
}
9000edc4:	4770      	bx	lr
9000edc6:	bf00      	nop

9000edc8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
9000edc8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
9000edca:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
9000edcc:	1c6b      	adds	r3, r5, #1
9000edce:	d010      	beq.n	9000edf2 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
9000edd0:	f100 0308 	add.w	r3, r0, #8
9000edd4:	461c      	mov	r4, r3
9000edd6:	685b      	ldr	r3, [r3, #4]
9000edd8:	681a      	ldr	r2, [r3, #0]
9000edda:	42aa      	cmp	r2, r5
9000eddc:	d9fa      	bls.n	9000edd4 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
9000edde:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
9000ede0:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
9000ede2:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
9000ede4:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
9000ede6:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
9000ede8:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
9000edea:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
9000edec:	6002      	str	r2, [r0, #0]
}
9000edee:	bc30      	pop	{r4, r5}
9000edf0:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
9000edf2:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
9000edf4:	6863      	ldr	r3, [r4, #4]
9000edf6:	e7f2      	b.n	9000edde <vListInsert+0x16>

9000edf8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
9000edf8:	6903      	ldr	r3, [r0, #16]
{
9000edfa:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
9000edfc:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
9000edfe:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
9000ee02:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
9000ee04:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
9000ee08:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
9000ee0a:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
9000ee0c:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
9000ee10:	bf08      	it	eq
9000ee12:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
9000ee14:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
9000ee16:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
9000ee18:	3a01      	subs	r2, #1
9000ee1a:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
9000ee1c:	6818      	ldr	r0, [r3, #0]
}
9000ee1e:	4770      	bx	lr

9000ee20 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
9000ee20:	4808      	ldr	r0, [pc, #32]	; (9000ee44 <prvPortStartFirstTask+0x24>)
9000ee22:	6800      	ldr	r0, [r0, #0]
9000ee24:	6800      	ldr	r0, [r0, #0]
9000ee26:	f380 8808 	msr	MSP, r0
9000ee2a:	f04f 0000 	mov.w	r0, #0
9000ee2e:	f380 8814 	msr	CONTROL, r0
9000ee32:	b662      	cpsie	i
9000ee34:	b661      	cpsie	f
9000ee36:	f3bf 8f4f 	dsb	sy
9000ee3a:	f3bf 8f6f 	isb	sy
9000ee3e:	df00      	svc	0
9000ee40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
9000ee42:	0000      	.short	0x0000
9000ee44:	e000ed08 	.word	0xe000ed08

9000ee48 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
9000ee48:	f8df 000c 	ldr.w	r0, [pc, #12]	; 9000ee58 <vPortEnableVFP+0x10>
9000ee4c:	6801      	ldr	r1, [r0, #0]
9000ee4e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
9000ee52:	6001      	str	r1, [r0, #0]
9000ee54:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
9000ee56:	0000      	.short	0x0000
9000ee58:	e000ed88 	.word	0xe000ed88

9000ee5c <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
9000ee5c:	4b0e      	ldr	r3, [pc, #56]	; (9000ee98 <prvTaskExitError+0x3c>)
{
9000ee5e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
9000ee60:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
9000ee62:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
9000ee64:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
9000ee66:	3301      	adds	r3, #1
9000ee68:	d008      	beq.n	9000ee7c <prvTaskExitError+0x20>
9000ee6a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ee6e:	f383 8811 	msr	BASEPRI, r3
9000ee72:	f3bf 8f6f 	isb	sy
9000ee76:	f3bf 8f4f 	dsb	sy
9000ee7a:	e7fe      	b.n	9000ee7a <prvTaskExitError+0x1e>
9000ee7c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ee80:	f383 8811 	msr	BASEPRI, r3
9000ee84:	f3bf 8f6f 	isb	sy
9000ee88:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
9000ee8c:	9b01      	ldr	r3, [sp, #4]
9000ee8e:	2b00      	cmp	r3, #0
9000ee90:	d0fc      	beq.n	9000ee8c <prvTaskExitError+0x30>
}
9000ee92:	b002      	add	sp, #8
9000ee94:	4770      	bx	lr
9000ee96:	bf00      	nop
9000ee98:	24000064 	.word	0x24000064

9000ee9c <pxPortInitialiseStack>:
{
9000ee9c:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
9000ee9e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
9000eea2:	4809      	ldr	r0, [pc, #36]	; (9000eec8 <pxPortInitialiseStack+0x2c>)
{
9000eea4:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
9000eea6:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
9000eeaa:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
9000eeae:	f843 2c20 	str.w	r2, [r3, #-32]
}
9000eeb2:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
9000eeb6:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
9000eeba:	f06f 0102 	mvn.w	r1, #2
}
9000eebe:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
9000eec2:	f843 1c24 	str.w	r1, [r3, #-36]
}
9000eec6:	4770      	bx	lr
9000eec8:	9000ee5d 	.word	0x9000ee5d
9000eecc:	00000000 	.word	0x00000000

9000eed0 <SVC_Handler>:
	__asm volatile (
9000eed0:	4b07      	ldr	r3, [pc, #28]	; (9000eef0 <pxCurrentTCBConst2>)
9000eed2:	6819      	ldr	r1, [r3, #0]
9000eed4:	6808      	ldr	r0, [r1, #0]
9000eed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000eeda:	f380 8809 	msr	PSP, r0
9000eede:	f3bf 8f6f 	isb	sy
9000eee2:	f04f 0000 	mov.w	r0, #0
9000eee6:	f380 8811 	msr	BASEPRI, r0
9000eeea:	4770      	bx	lr
9000eeec:	f3af 8000 	nop.w

9000eef0 <pxCurrentTCBConst2>:
9000eef0:	24026b20 	.word	0x24026b20

9000eef4 <vPortEnterCritical>:
9000eef4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000eef8:	f383 8811 	msr	BASEPRI, r3
9000eefc:	f3bf 8f6f 	isb	sy
9000ef00:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
9000ef04:	4a0b      	ldr	r2, [pc, #44]	; (9000ef34 <vPortEnterCritical+0x40>)
9000ef06:	6813      	ldr	r3, [r2, #0]
9000ef08:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
9000ef0a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
9000ef0c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
9000ef0e:	d000      	beq.n	9000ef12 <vPortEnterCritical+0x1e>
}
9000ef10:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
9000ef12:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000ef16:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
9000ef1a:	b2db      	uxtb	r3, r3
9000ef1c:	2b00      	cmp	r3, #0
9000ef1e:	d0f7      	beq.n	9000ef10 <vPortEnterCritical+0x1c>
9000ef20:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ef24:	f383 8811 	msr	BASEPRI, r3
9000ef28:	f3bf 8f6f 	isb	sy
9000ef2c:	f3bf 8f4f 	dsb	sy
9000ef30:	e7fe      	b.n	9000ef30 <vPortEnterCritical+0x3c>
9000ef32:	bf00      	nop
9000ef34:	24000064 	.word	0x24000064

9000ef38 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
9000ef38:	4a08      	ldr	r2, [pc, #32]	; (9000ef5c <vPortExitCritical+0x24>)
9000ef3a:	6813      	ldr	r3, [r2, #0]
9000ef3c:	b943      	cbnz	r3, 9000ef50 <vPortExitCritical+0x18>
9000ef3e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ef42:	f383 8811 	msr	BASEPRI, r3
9000ef46:	f3bf 8f6f 	isb	sy
9000ef4a:	f3bf 8f4f 	dsb	sy
9000ef4e:	e7fe      	b.n	9000ef4e <vPortExitCritical+0x16>
	uxCriticalNesting--;
9000ef50:	3b01      	subs	r3, #1
9000ef52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
9000ef54:	b90b      	cbnz	r3, 9000ef5a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
9000ef56:	f383 8811 	msr	BASEPRI, r3
}
9000ef5a:	4770      	bx	lr
9000ef5c:	24000064 	.word	0x24000064

9000ef60 <PendSV_Handler>:
	__asm volatile
9000ef60:	f3ef 8009 	mrs	r0, PSP
9000ef64:	f3bf 8f6f 	isb	sy
9000ef68:	4b15      	ldr	r3, [pc, #84]	; (9000efc0 <pxCurrentTCBConst>)
9000ef6a:	681a      	ldr	r2, [r3, #0]
9000ef6c:	f01e 0f10 	tst.w	lr, #16
9000ef70:	bf08      	it	eq
9000ef72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
9000ef76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000ef7a:	6010      	str	r0, [r2, #0]
9000ef7c:	e92d 0009 	stmdb	sp!, {r0, r3}
9000ef80:	f04f 0050 	mov.w	r0, #80	; 0x50
9000ef84:	f380 8811 	msr	BASEPRI, r0
9000ef88:	f3bf 8f4f 	dsb	sy
9000ef8c:	f3bf 8f6f 	isb	sy
9000ef90:	f001 fe80 	bl	90010c94 <vTaskSwitchContext>
9000ef94:	f04f 0000 	mov.w	r0, #0
9000ef98:	f380 8811 	msr	BASEPRI, r0
9000ef9c:	bc09      	pop	{r0, r3}
9000ef9e:	6819      	ldr	r1, [r3, #0]
9000efa0:	6808      	ldr	r0, [r1, #0]
9000efa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000efa6:	f01e 0f10 	tst.w	lr, #16
9000efaa:	bf08      	it	eq
9000efac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
9000efb0:	f380 8809 	msr	PSP, r0
9000efb4:	f3bf 8f6f 	isb	sy
9000efb8:	4770      	bx	lr
9000efba:	bf00      	nop
9000efbc:	f3af 8000 	nop.w

9000efc0 <pxCurrentTCBConst>:
9000efc0:	24026b20 	.word	0x24026b20

9000efc4 <xPortSysTickHandler>:
{
9000efc4:	b508      	push	{r3, lr}
	__asm volatile
9000efc6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000efca:	f383 8811 	msr	BASEPRI, r3
9000efce:	f3bf 8f6f 	isb	sy
9000efd2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
9000efd6:	f001 fe37 	bl	90010c48 <xTaskIncrementTick>
9000efda:	b128      	cbz	r0, 9000efe8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
9000efdc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000efe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000efe4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
9000efe8:	2300      	movs	r3, #0
9000efea:	f383 8811 	msr	BASEPRI, r3
}
9000efee:	bd08      	pop	{r3, pc}

9000eff0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
9000eff0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
9000eff4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000eff6:	4806      	ldr	r0, [pc, #24]	; (9000f010 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
9000eff8:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000effa:	4906      	ldr	r1, [pc, #24]	; (9000f014 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
9000effc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000effe:	6803      	ldr	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9000f000:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000f002:	fba1 1303 	umull	r1, r3, r1, r3
9000f006:	099b      	lsrs	r3, r3, #6
9000f008:	3b01      	subs	r3, #1
9000f00a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9000f00c:	6110      	str	r0, [r2, #16]
}
9000f00e:	4770      	bx	lr
9000f010:	24000054 	.word	0x24000054
9000f014:	10624dd3 	.word	0x10624dd3

9000f018 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
9000f018:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f01c:	4a48      	ldr	r2, [pc, #288]	; (9000f140 <xPortStartScheduler+0x128>)
9000f01e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
9000f022:	4291      	cmp	r1, r2
9000f024:	d041      	beq.n	9000f0aa <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
9000f026:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
9000f02a:	4b46      	ldr	r3, [pc, #280]	; (9000f144 <xPortStartScheduler+0x12c>)
9000f02c:	429a      	cmp	r2, r3
9000f02e:	d033      	beq.n	9000f098 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000f030:	4b45      	ldr	r3, [pc, #276]	; (9000f148 <xPortStartScheduler+0x130>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
9000f032:	20ff      	movs	r0, #255	; 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000f034:	4945      	ldr	r1, [pc, #276]	; (9000f14c <xPortStartScheduler+0x134>)
{
9000f036:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000f038:	781a      	ldrb	r2, [r3, #0]
{
9000f03a:	b084      	sub	sp, #16
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000f03c:	4c44      	ldr	r4, [pc, #272]	; (9000f150 <xPortStartScheduler+0x138>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000f03e:	b2d2      	uxtb	r2, r2
9000f040:	9202      	str	r2, [sp, #8]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000f042:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
9000f044:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
9000f046:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000f048:	6022      	str	r2, [r4, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
9000f04a:	b2db      	uxtb	r3, r3
9000f04c:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000f050:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000f054:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000f058:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000f05c:	0610      	lsls	r0, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000f05e:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000f060:	d511      	bpl.n	9000f086 <xPortStartScheduler+0x6e>
9000f062:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
9000f064:	f89d 3007 	ldrb.w	r3, [sp, #7]
9000f068:	4610      	mov	r0, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000f06a:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
9000f06c:	005b      	lsls	r3, r3, #1
9000f06e:	b2db      	uxtb	r3, r3
9000f070:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000f074:	f89d 1007 	ldrb.w	r1, [sp, #7]
9000f078:	0609      	lsls	r1, r1, #24
9000f07a:	d4f3      	bmi.n	9000f064 <xPortStartScheduler+0x4c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
9000f07c:	2803      	cmp	r0, #3
9000f07e:	6020      	str	r0, [r4, #0]
9000f080:	f88d 3007 	strb.w	r3, [sp, #7]
9000f084:	d01a      	beq.n	9000f0bc <xPortStartScheduler+0xa4>
	__asm volatile
9000f086:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f08a:	f383 8811 	msr	BASEPRI, r3
9000f08e:	f3bf 8f6f 	isb	sy
9000f092:	f3bf 8f4f 	dsb	sy
9000f096:	e7fe      	b.n	9000f096 <xPortStartScheduler+0x7e>
9000f098:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f09c:	f383 8811 	msr	BASEPRI, r3
9000f0a0:	f3bf 8f6f 	isb	sy
9000f0a4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
9000f0a8:	e7fe      	b.n	9000f0a8 <xPortStartScheduler+0x90>
9000f0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f0ae:	f383 8811 	msr	BASEPRI, r3
9000f0b2:	f3bf 8f6f 	isb	sy
9000f0b6:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
9000f0ba:	e7fe      	b.n	9000f0ba <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000f0bc:	9b02      	ldr	r3, [sp, #8]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
9000f0be:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
9000f0c2:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000f0c6:	4a20      	ldr	r2, [pc, #128]	; (9000f148 <xPortStartScheduler+0x130>)
9000f0c8:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
9000f0ca:	4e22      	ldr	r6, [pc, #136]	; (9000f154 <xPortStartScheduler+0x13c>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
9000f0cc:	6021      	str	r1, [r4, #0]
	uxCriticalNesting = 0;
9000f0ce:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000f0d0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
9000f0d2:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
9000f0d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
9000f0da:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
9000f0de:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
9000f0e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
9000f0e6:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
9000f0ea:	f7ff ff81 	bl	9000eff0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
9000f0ee:	6034      	str	r4, [r6, #0]
	vPortEnableVFP();
9000f0f0:	f7ff feaa 	bl	9000ee48 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
9000f0f4:	f8d5 3f34 	ldr.w	r3, [r5, #3892]	; 0xf34
9000f0f8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
9000f0fc:	f8c5 3f34 	str.w	r3, [r5, #3892]	; 0xf34
	prvPortStartFirstTask();
9000f100:	f7ff fe8e 	bl	9000ee20 <prvPortStartFirstTask>
	vTaskSwitchContext();
9000f104:	f001 fdc6 	bl	90010c94 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
9000f108:	6833      	ldr	r3, [r6, #0]
volatile uint32_t ulDummy = 0;
9000f10a:	9403      	str	r4, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
9000f10c:	3301      	adds	r3, #1
9000f10e:	d008      	beq.n	9000f122 <xPortStartScheduler+0x10a>
9000f110:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f114:	f383 8811 	msr	BASEPRI, r3
9000f118:	f3bf 8f6f 	isb	sy
9000f11c:	f3bf 8f4f 	dsb	sy
9000f120:	e7fe      	b.n	9000f120 <xPortStartScheduler+0x108>
9000f122:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f126:	f383 8811 	msr	BASEPRI, r3
9000f12a:	f3bf 8f6f 	isb	sy
9000f12e:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
9000f132:	9b03      	ldr	r3, [sp, #12]
9000f134:	2b00      	cmp	r3, #0
9000f136:	d0fc      	beq.n	9000f132 <xPortStartScheduler+0x11a>
}
9000f138:	2000      	movs	r0, #0
9000f13a:	b004      	add	sp, #16
9000f13c:	bd70      	pop	{r4, r5, r6, pc}
9000f13e:	bf00      	nop
9000f140:	410fc271 	.word	0x410fc271
9000f144:	410fc270 	.word	0x410fc270
9000f148:	e000e400 	.word	0xe000e400
9000f14c:	24026ad8 	.word	0x24026ad8
9000f150:	24026adc 	.word	0x24026adc
9000f154:	24000064 	.word	0x24000064

9000f158 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
9000f158:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
9000f15c:	2b0f      	cmp	r3, #15
9000f15e:	d90e      	bls.n	9000f17e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
9000f160:	4911      	ldr	r1, [pc, #68]	; (9000f1a8 <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
9000f162:	4a12      	ldr	r2, [pc, #72]	; (9000f1ac <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
9000f164:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
9000f166:	7812      	ldrb	r2, [r2, #0]
9000f168:	429a      	cmp	r2, r3
9000f16a:	d908      	bls.n	9000f17e <vPortValidateInterruptPriority+0x26>
9000f16c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f170:	f383 8811 	msr	BASEPRI, r3
9000f174:	f3bf 8f6f 	isb	sy
9000f178:	f3bf 8f4f 	dsb	sy
9000f17c:	e7fe      	b.n	9000f17c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
9000f17e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f182:	4a0b      	ldr	r2, [pc, #44]	; (9000f1b0 <vPortValidateInterruptPriority+0x58>)
9000f184:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
9000f188:	6812      	ldr	r2, [r2, #0]
9000f18a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
9000f18e:	4293      	cmp	r3, r2
9000f190:	d908      	bls.n	9000f1a4 <vPortValidateInterruptPriority+0x4c>
9000f192:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f196:	f383 8811 	msr	BASEPRI, r3
9000f19a:	f3bf 8f6f 	isb	sy
9000f19e:	f3bf 8f4f 	dsb	sy
9000f1a2:	e7fe      	b.n	9000f1a2 <vPortValidateInterruptPriority+0x4a>
	}
9000f1a4:	4770      	bx	lr
9000f1a6:	bf00      	nop
9000f1a8:	e000e3f0 	.word	0xe000e3f0
9000f1ac:	24026ad8 	.word	0x24026ad8
9000f1b0:	24026adc 	.word	0x24026adc

9000f1b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
9000f1b4:	b570      	push	{r4, r5, r6, lr}
9000f1b6:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
9000f1b8:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
9000f1ba:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000f1bc:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
9000f1be:	b92a      	cbnz	r2, 9000f1cc <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000f1c0:	6805      	ldr	r5, [r0, #0]
9000f1c2:	b365      	cbz	r5, 9000f21e <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f1c4:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000f1c6:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f1c8:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
9000f1ca:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
9000f1cc:	b97d      	cbnz	r5, 9000f1ee <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000f1ce:	6840      	ldr	r0, [r0, #4]
9000f1d0:	f018 fb15 	bl	900277fe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000f1d4:	6863      	ldr	r3, [r4, #4]
9000f1d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000f1d8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000f1da:	68a2      	ldr	r2, [r4, #8]
9000f1dc:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000f1de:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000f1e0:	d319      	bcc.n	9000f216 <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
9000f1e2:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f1e4:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000f1e6:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
9000f1e8:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f1ea:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000f1ec:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
9000f1ee:	68c0      	ldr	r0, [r0, #12]
9000f1f0:	f018 fb05 	bl	900277fe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
9000f1f4:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000f1f6:	68e3      	ldr	r3, [r4, #12]
9000f1f8:	4251      	negs	r1, r2
9000f1fa:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000f1fc:	6822      	ldr	r2, [r4, #0]
9000f1fe:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
9000f200:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000f202:	d202      	bcs.n	9000f20a <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
9000f204:	68a3      	ldr	r3, [r4, #8]
9000f206:	440b      	add	r3, r1
9000f208:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
9000f20a:	2d02      	cmp	r5, #2
9000f20c:	d00d      	beq.n	9000f22a <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f20e:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000f210:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f212:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000f214:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f216:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000f218:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f21a:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000f21c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
9000f21e:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f220:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
9000f222:	f001 ff1f 	bl	90011064 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
9000f226:	60a5      	str	r5, [r4, #8]
9000f228:	e7ce      	b.n	9000f1c8 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000f22a:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
9000f22c:	f04f 0000 	mov.w	r0, #0
9000f230:	bf38      	it	cc
9000f232:	2601      	movcc	r6, #1
9000f234:	e7c8      	b.n	9000f1c8 <prvCopyDataToQueue+0x14>
9000f236:	bf00      	nop

9000f238 <xQueueGenericCreateStatic>:
	{
9000f238:	b530      	push	{r4, r5, lr}
9000f23a:	b083      	sub	sp, #12
9000f23c:	f89d 4018 	ldrb.w	r4, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
9000f240:	b940      	cbnz	r0, 9000f254 <xQueueGenericCreateStatic+0x1c>
9000f242:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f246:	f383 8811 	msr	BASEPRI, r3
9000f24a:	f3bf 8f6f 	isb	sy
9000f24e:	f3bf 8f4f 	dsb	sy
9000f252:	e7fe      	b.n	9000f252 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
9000f254:	461d      	mov	r5, r3
9000f256:	b153      	cbz	r3, 9000f26e <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
9000f258:	b30a      	cbz	r2, 9000f29e <xQueueGenericCreateStatic+0x66>
9000f25a:	b989      	cbnz	r1, 9000f280 <xQueueGenericCreateStatic+0x48>
9000f25c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f260:	f383 8811 	msr	BASEPRI, r3
9000f264:	f3bf 8f6f 	isb	sy
9000f268:	f3bf 8f4f 	dsb	sy
9000f26c:	e7fe      	b.n	9000f26c <xQueueGenericCreateStatic+0x34>
9000f26e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f272:	f383 8811 	msr	BASEPRI, r3
9000f276:	f3bf 8f6f 	isb	sy
9000f27a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000f27e:	e7fe      	b.n	9000f27e <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
9000f280:	b16a      	cbz	r2, 9000f29e <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000f282:	2350      	movs	r3, #80	; 0x50
9000f284:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
9000f286:	9b01      	ldr	r3, [sp, #4]
9000f288:	2b50      	cmp	r3, #80	; 0x50
9000f28a:	d013      	beq.n	9000f2b4 <xQueueGenericCreateStatic+0x7c>
9000f28c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f290:	f383 8811 	msr	BASEPRI, r3
9000f294:	f3bf 8f6f 	isb	sy
9000f298:	f3bf 8f4f 	dsb	sy
9000f29c:	e7fe      	b.n	9000f29c <xQueueGenericCreateStatic+0x64>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
9000f29e:	2900      	cmp	r1, #0
9000f2a0:	d0ef      	beq.n	9000f282 <xQueueGenericCreateStatic+0x4a>
9000f2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f2a6:	f383 8811 	msr	BASEPRI, r3
9000f2aa:	f3bf 8f6f 	isb	sy
9000f2ae:	f3bf 8f4f 	dsb	sy
9000f2b2:	e7fe      	b.n	9000f2b2 <xQueueGenericCreateStatic+0x7a>
	if( uxItemSize == ( UBaseType_t ) 0 )
9000f2b4:	2900      	cmp	r1, #0
9000f2b6:	bf08      	it	eq
9000f2b8:	462a      	moveq	r2, r5
	pxNewQueue->uxLength = uxQueueLength;
9000f2ba:	63e8      	str	r0, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
9000f2bc:	6429      	str	r1, [r5, #64]	; 0x40
9000f2be:	602a      	str	r2, [r5, #0]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000f2c0:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000f2c2:	2201      	movs	r2, #1
9000f2c4:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
	taskENTER_CRITICAL();
9000f2c8:	f7ff fe14 	bl	9000eef4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f2cc:	6829      	ldr	r1, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000f2ce:	2300      	movs	r3, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000f2d0:	6069      	str	r1, [r5, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000f2d2:	63ab      	str	r3, [r5, #56]	; 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f2d4:	e9d5 200f 	ldrd	r2, r0, [r5, #60]	; 0x3c
9000f2d8:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f2dc:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f2de:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f2e0:	4401      	add	r1, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f2e2:	60aa      	str	r2, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000f2e4:	22ff      	movs	r2, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f2e6:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f2ea:	60e9      	str	r1, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000f2ec:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000f2f0:	f885 2045 	strb.w	r2, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f2f4:	f7ff fd48 	bl	9000ed88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000f2f8:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000f2fc:	f7ff fd44 	bl	9000ed88 <vListInitialise>
	taskEXIT_CRITICAL();
9000f300:	f7ff fe1a 	bl	9000ef38 <vPortExitCritical>
	}
9000f304:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
9000f306:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
	}
9000f30a:	b003      	add	sp, #12
9000f30c:	bd30      	pop	{r4, r5, pc}
9000f30e:	bf00      	nop

9000f310 <xQueueGenericCreate>:
	{
9000f310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
9000f312:	b940      	cbnz	r0, 9000f326 <xQueueGenericCreate+0x16>
9000f314:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f318:	f383 8811 	msr	BASEPRI, r3
9000f31c:	f3bf 8f6f 	isb	sy
9000f320:	f3bf 8f4f 	dsb	sy
9000f324:	e7fe      	b.n	9000f324 <xQueueGenericCreate+0x14>
9000f326:	4605      	mov	r5, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f328:	fb01 f000 	mul.w	r0, r1, r0
9000f32c:	460e      	mov	r6, r1
9000f32e:	4617      	mov	r7, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000f330:	3050      	adds	r0, #80	; 0x50
9000f332:	f7ff fc07 	bl	9000eb44 <pvPortMalloc>
		if( pxNewQueue != NULL )
9000f336:	4604      	mov	r4, r0
9000f338:	b340      	cbz	r0, 9000f38c <xQueueGenericCreate+0x7c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000f33a:	2300      	movs	r3, #0
9000f33c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
9000f340:	b336      	cbz	r6, 9000f390 <xQueueGenericCreate+0x80>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f342:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
9000f346:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
9000f348:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
9000f34c:	f7ff fdd2 	bl	9000eef4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f350:	6822      	ldr	r2, [r4, #0]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f352:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000f356:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f358:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
9000f35c:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f360:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f362:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f364:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f366:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000f368:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
9000f36a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f36c:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000f36e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
9000f370:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000f374:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f378:	f7ff fd06 	bl	9000ed88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000f37c:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000f380:	f7ff fd02 	bl	9000ed88 <vListInitialise>
	taskEXIT_CRITICAL();
9000f384:	f7ff fdd8 	bl	9000ef38 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000f388:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
9000f38c:	4620      	mov	r0, r4
9000f38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000f390:	4603      	mov	r3, r0
9000f392:	e7d8      	b.n	9000f346 <xQueueGenericCreate+0x36>

9000f394 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
9000f394:	b940      	cbnz	r0, 9000f3a8 <xQueueCreateCountingSemaphoreStatic+0x14>
9000f396:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f39a:	f383 8811 	msr	BASEPRI, r3
9000f39e:	f3bf 8f6f 	isb	sy
9000f3a2:	f3bf 8f4f 	dsb	sy
9000f3a6:	e7fe      	b.n	9000f3a6 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
9000f3a8:	4288      	cmp	r0, r1
9000f3aa:	d208      	bcs.n	9000f3be <xQueueCreateCountingSemaphoreStatic+0x2a>
9000f3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f3b0:	f383 8811 	msr	BASEPRI, r3
9000f3b4:	f3bf 8f6f 	isb	sy
9000f3b8:	f3bf 8f4f 	dsb	sy
9000f3bc:	e7fe      	b.n	9000f3bc <xQueueCreateCountingSemaphoreStatic+0x28>
	{
9000f3be:	b530      	push	{r4, r5, lr}
9000f3c0:	4615      	mov	r5, r2
9000f3c2:	b085      	sub	sp, #20
		configASSERT( pxStaticQueue != NULL );
9000f3c4:	2a00      	cmp	r2, #0
9000f3c6:	d03d      	beq.n	9000f444 <xQueueCreateCountingSemaphoreStatic+0xb0>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000f3c8:	2350      	movs	r3, #80	; 0x50
9000f3ca:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
9000f3cc:	9b03      	ldr	r3, [sp, #12]
9000f3ce:	2b50      	cmp	r3, #80	; 0x50
9000f3d0:	d008      	beq.n	9000f3e4 <xQueueCreateCountingSemaphoreStatic+0x50>
9000f3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f3d6:	f383 8811 	msr	BASEPRI, r3
9000f3da:	f3bf 8f6f 	isb	sy
9000f3de:	f3bf 8f4f 	dsb	sy
9000f3e2:	e7fe      	b.n	9000f3e2 <xQueueCreateCountingSemaphoreStatic+0x4e>
	pxNewQueue->uxItemSize = uxItemSize;
9000f3e4:	2400      	movs	r4, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000f3e6:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000f3e8:	602a      	str	r2, [r5, #0]
	pxNewQueue->uxLength = uxQueueLength;
9000f3ea:	63d0      	str	r0, [r2, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000f3ec:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000f3f0:	6414      	str	r4, [r2, #64]	; 0x40
9000f3f2:	9101      	str	r1, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000f3f4:	9b03      	ldr	r3, [sp, #12]
	taskENTER_CRITICAL();
9000f3f6:	f7ff fd7d 	bl	9000eef4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f3fa:	6828      	ldr	r0, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000f3fc:	63ac      	str	r4, [r5, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000f3fe:	6068      	str	r0, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f400:	e9d5 3c0f 	ldrd	r3, ip, [r5, #60]	; 0x3c
9000f404:	fb03 f30c 	mul.w	r3, r3, ip
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f408:	eba3 0c0c 	sub.w	ip, r3, ip
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f40c:	4403      	add	r3, r0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f40e:	4484      	add	ip, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f410:	60ab      	str	r3, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000f412:	23ff      	movs	r3, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f414:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f418:	f8c5 c00c 	str.w	ip, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000f41c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000f420:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f424:	f7ff fcb0 	bl	9000ed88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000f428:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000f42c:	f7ff fcac 	bl	9000ed88 <vListInitialise>
	taskEXIT_CRITICAL();
9000f430:	f7ff fd82 	bl	9000ef38 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000f434:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000f436:	9901      	ldr	r1, [sp, #4]
	}
9000f438:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
9000f43a:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000f43e:	63a9      	str	r1, [r5, #56]	; 0x38
	}
9000f440:	b005      	add	sp, #20
9000f442:	bd30      	pop	{r4, r5, pc}
9000f444:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f448:	f383 8811 	msr	BASEPRI, r3
9000f44c:	f3bf 8f6f 	isb	sy
9000f450:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000f454:	e7fe      	b.n	9000f454 <xQueueCreateCountingSemaphoreStatic+0xc0>
9000f456:	bf00      	nop

9000f458 <xQueueCreateCountingSemaphore>:
	{
9000f458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxMaxCount != 0 );
9000f45a:	b940      	cbnz	r0, 9000f46e <xQueueCreateCountingSemaphore+0x16>
9000f45c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f460:	f383 8811 	msr	BASEPRI, r3
9000f464:	f3bf 8f6f 	isb	sy
9000f468:	f3bf 8f4f 	dsb	sy
9000f46c:	e7fe      	b.n	9000f46c <xQueueCreateCountingSemaphore+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
9000f46e:	4288      	cmp	r0, r1
9000f470:	4604      	mov	r4, r0
9000f472:	460e      	mov	r6, r1
9000f474:	d208      	bcs.n	9000f488 <xQueueCreateCountingSemaphore+0x30>
9000f476:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f47a:	f383 8811 	msr	BASEPRI, r3
9000f47e:	f3bf 8f6f 	isb	sy
9000f482:	f3bf 8f4f 	dsb	sy
9000f486:	e7fe      	b.n	9000f486 <xQueueCreateCountingSemaphore+0x2e>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000f488:	2050      	movs	r0, #80	; 0x50
9000f48a:	f7ff fb5b 	bl	9000eb44 <pvPortMalloc>
		if( pxNewQueue != NULL )
9000f48e:	4605      	mov	r5, r0
9000f490:	b330      	cbz	r0, 9000f4e0 <xQueueCreateCountingSemaphore+0x88>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000f492:	2700      	movs	r7, #0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000f494:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
9000f496:	63c4      	str	r4, [r0, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000f498:	f880 7046 	strb.w	r7, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000f49c:	6407      	str	r7, [r0, #64]	; 0x40
	taskENTER_CRITICAL();
9000f49e:	f7ff fd29 	bl	9000eef4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f4a2:	682a      	ldr	r2, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000f4a4:	63af      	str	r7, [r5, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f4a6:	f105 0010 	add.w	r0, r5, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000f4aa:	606a      	str	r2, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f4ac:	e9d5 310f 	ldrd	r3, r1, [r5, #60]	; 0x3c
9000f4b0:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f4b4:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f4b6:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f4b8:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f4ba:	60ab      	str	r3, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000f4bc:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f4be:	60ea      	str	r2, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000f4c0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000f4c4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f4c8:	f7ff fc5e 	bl	9000ed88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000f4cc:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000f4d0:	f7ff fc5a 	bl	9000ed88 <vListInitialise>
	taskEXIT_CRITICAL();
9000f4d4:	f7ff fd30 	bl	9000ef38 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000f4d8:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000f4da:	63ae      	str	r6, [r5, #56]	; 0x38
		pxNewQueue->ucQueueType = ucQueueType;
9000f4dc:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
	}
9000f4e0:	4628      	mov	r0, r5
9000f4e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

9000f4e4 <xQueueGenericSend>:
{
9000f4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000f4e8:	b084      	sub	sp, #16
9000f4ea:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
9000f4ec:	2800      	cmp	r0, #0
9000f4ee:	f000 8103 	beq.w	9000f6f8 <xQueueGenericSend+0x214>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000f4f2:	4688      	mov	r8, r1
9000f4f4:	4604      	mov	r4, r0
9000f4f6:	461f      	mov	r7, r3
9000f4f8:	2900      	cmp	r1, #0
9000f4fa:	f000 8097 	beq.w	9000f62c <xQueueGenericSend+0x148>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
9000f4fe:	2f02      	cmp	r7, #2
9000f500:	d10b      	bne.n	9000f51a <xQueueGenericSend+0x36>
9000f502:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000f504:	2b01      	cmp	r3, #1
9000f506:	d008      	beq.n	9000f51a <xQueueGenericSend+0x36>
9000f508:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f50c:	f383 8811 	msr	BASEPRI, r3
9000f510:	f3bf 8f6f 	isb	sy
9000f514:	f3bf 8f4f 	dsb	sy
9000f518:	e7fe      	b.n	9000f518 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000f51a:	f001 fd4d 	bl	90010fb8 <xTaskGetSchedulerState>
9000f51e:	2800      	cmp	r0, #0
9000f520:	f000 80f3 	beq.w	9000f70a <xQueueGenericSend+0x226>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000f524:	f1a7 0902 	sub.w	r9, r7, #2
9000f528:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f52a:	f104 0624 	add.w	r6, r4, #36	; 0x24
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000f52e:	fab9 f989 	clz	r9, r9
9000f532:	ea4f 1959 	mov.w	r9, r9, lsr #5
		taskENTER_CRITICAL();
9000f536:	f7ff fcdd 	bl	9000eef4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000f53a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000f53c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000f53e:	429a      	cmp	r2, r3
9000f540:	f0c0 80f0 	bcc.w	9000f724 <xQueueGenericSend+0x240>
9000f544:	f1b9 0f00 	cmp.w	r9, #0
9000f548:	f040 80ec 	bne.w	9000f724 <xQueueGenericSend+0x240>
				if( xTicksToWait == ( TickType_t ) 0 )
9000f54c:	9b01      	ldr	r3, [sp, #4]
9000f54e:	2b00      	cmp	r3, #0
9000f550:	f000 8101 	beq.w	9000f756 <xQueueGenericSend+0x272>
				else if( xEntryTimeSet == pdFALSE )
9000f554:	2d00      	cmp	r5, #0
9000f556:	f000 80cb 	beq.w	9000f6f0 <xQueueGenericSend+0x20c>
		taskEXIT_CRITICAL();
9000f55a:	f7ff fced 	bl	9000ef38 <vPortExitCritical>
		vTaskSuspendAll();
9000f55e:	f001 fb55 	bl	90010c0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000f562:	f7ff fcc7 	bl	9000eef4 <vPortEnterCritical>
9000f566:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000f56a:	2bff      	cmp	r3, #255	; 0xff
9000f56c:	d102      	bne.n	9000f574 <xQueueGenericSend+0x90>
9000f56e:	2300      	movs	r3, #0
9000f570:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000f574:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000f578:	2bff      	cmp	r3, #255	; 0xff
9000f57a:	d102      	bne.n	9000f582 <xQueueGenericSend+0x9e>
9000f57c:	2300      	movs	r3, #0
9000f57e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000f582:	f7ff fcd9 	bl	9000ef38 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000f586:	a901      	add	r1, sp, #4
9000f588:	a802      	add	r0, sp, #8
9000f58a:	f001 fcc1 	bl	90010f10 <xTaskCheckForTimeOut>
9000f58e:	2800      	cmp	r0, #0
9000f590:	f040 80e5 	bne.w	9000f75e <xQueueGenericSend+0x27a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
9000f594:	f7ff fcae 	bl	9000eef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
9000f598:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000f59a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000f59c:	429a      	cmp	r2, r3
9000f59e:	d052      	beq.n	9000f646 <xQueueGenericSend+0x162>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
9000f5a0:	f7ff fcca 	bl	9000ef38 <vPortExitCritical>
	taskENTER_CRITICAL();
9000f5a4:	f7ff fca6 	bl	9000eef4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000f5a8:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
9000f5ac:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f5ae:	2d00      	cmp	r5, #0
9000f5b0:	dc04      	bgt.n	9000f5bc <xQueueGenericSend+0xd8>
9000f5b2:	e011      	b.n	9000f5d8 <xQueueGenericSend+0xf4>
			--cTxLock;
9000f5b4:	1e6a      	subs	r2, r5, #1
9000f5b6:	b2d3      	uxtb	r3, r2
9000f5b8:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f5ba:	b16b      	cbz	r3, 9000f5d8 <xQueueGenericSend+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f5bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f5be:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f5c0:	b153      	cbz	r3, 9000f5d8 <xQueueGenericSend+0xf4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f5c2:	f001 fc4f 	bl	90010e64 <xTaskRemoveFromEventList>
9000f5c6:	2800      	cmp	r0, #0
9000f5c8:	d0f4      	beq.n	9000f5b4 <xQueueGenericSend+0xd0>
						vTaskMissedYield();
9000f5ca:	f001 fce9 	bl	90010fa0 <vTaskMissedYield>
			--cTxLock;
9000f5ce:	1e6a      	subs	r2, r5, #1
9000f5d0:	b2d3      	uxtb	r3, r2
9000f5d2:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f5d4:	2b00      	cmp	r3, #0
9000f5d6:	d1f1      	bne.n	9000f5bc <xQueueGenericSend+0xd8>
		pxQueue->cTxLock = queueUNLOCKED;
9000f5d8:	23ff      	movs	r3, #255	; 0xff
9000f5da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000f5de:	f7ff fcab 	bl	9000ef38 <vPortExitCritical>
	taskENTER_CRITICAL();
9000f5e2:	f7ff fc87 	bl	9000eef4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000f5e6:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
9000f5ea:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f5ec:	2d00      	cmp	r5, #0
9000f5ee:	dd14      	ble.n	9000f61a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f5f0:	f104 0a10 	add.w	sl, r4, #16
9000f5f4:	e003      	b.n	9000f5fe <xQueueGenericSend+0x11a>
				--cRxLock;
9000f5f6:	1e6a      	subs	r2, r5, #1
9000f5f8:	b2d3      	uxtb	r3, r2
9000f5fa:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f5fc:	b16b      	cbz	r3, 9000f61a <xQueueGenericSend+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f5fe:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f600:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f602:	b153      	cbz	r3, 9000f61a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f604:	f001 fc2e 	bl	90010e64 <xTaskRemoveFromEventList>
9000f608:	2800      	cmp	r0, #0
9000f60a:	d0f4      	beq.n	9000f5f6 <xQueueGenericSend+0x112>
					vTaskMissedYield();
9000f60c:	f001 fcc8 	bl	90010fa0 <vTaskMissedYield>
				--cRxLock;
9000f610:	1e6a      	subs	r2, r5, #1
9000f612:	b2d3      	uxtb	r3, r2
9000f614:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f616:	2b00      	cmp	r3, #0
9000f618:	d1f1      	bne.n	9000f5fe <xQueueGenericSend+0x11a>
		pxQueue->cRxLock = queueUNLOCKED;
9000f61a:	23ff      	movs	r3, #255	; 0xff
9000f61c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000f620:	f7ff fc8a 	bl	9000ef38 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000f624:	f001 fafa 	bl	90010c1c <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000f628:	2501      	movs	r5, #1
9000f62a:	e784      	b.n	9000f536 <xQueueGenericSend+0x52>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000f62c:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000f62e:	2b00      	cmp	r3, #0
9000f630:	f43f af65 	beq.w	9000f4fe <xQueueGenericSend+0x1a>
9000f634:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f638:	f383 8811 	msr	BASEPRI, r3
9000f63c:	f3bf 8f6f 	isb	sy
9000f640:	f3bf 8f4f 	dsb	sy
9000f644:	e7fe      	b.n	9000f644 <xQueueGenericSend+0x160>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
9000f646:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
9000f64a:	f7ff fc75 	bl	9000ef38 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
9000f64e:	9901      	ldr	r1, [sp, #4]
9000f650:	4650      	mov	r0, sl
9000f652:	f001 fb79 	bl	90010d48 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000f656:	f7ff fc4d 	bl	9000eef4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000f65a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000f65e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f660:	2d00      	cmp	r5, #0
9000f662:	dc04      	bgt.n	9000f66e <xQueueGenericSend+0x18a>
9000f664:	e011      	b.n	9000f68a <xQueueGenericSend+0x1a6>
			--cTxLock;
9000f666:	1e6b      	subs	r3, r5, #1
9000f668:	b2da      	uxtb	r2, r3
9000f66a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f66c:	b16a      	cbz	r2, 9000f68a <xQueueGenericSend+0x1a6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f66e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f670:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f672:	b153      	cbz	r3, 9000f68a <xQueueGenericSend+0x1a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f674:	f001 fbf6 	bl	90010e64 <xTaskRemoveFromEventList>
9000f678:	2800      	cmp	r0, #0
9000f67a:	d0f4      	beq.n	9000f666 <xQueueGenericSend+0x182>
						vTaskMissedYield();
9000f67c:	f001 fc90 	bl	90010fa0 <vTaskMissedYield>
			--cTxLock;
9000f680:	1e6b      	subs	r3, r5, #1
9000f682:	b2da      	uxtb	r2, r3
9000f684:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f686:	2a00      	cmp	r2, #0
9000f688:	d1f1      	bne.n	9000f66e <xQueueGenericSend+0x18a>
		pxQueue->cTxLock = queueUNLOCKED;
9000f68a:	23ff      	movs	r3, #255	; 0xff
9000f68c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000f690:	f7ff fc52 	bl	9000ef38 <vPortExitCritical>
	taskENTER_CRITICAL();
9000f694:	f7ff fc2e 	bl	9000eef4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000f698:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000f69c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f69e:	2d00      	cmp	r5, #0
9000f6a0:	dc04      	bgt.n	9000f6ac <xQueueGenericSend+0x1c8>
9000f6a2:	e011      	b.n	9000f6c8 <xQueueGenericSend+0x1e4>
				--cRxLock;
9000f6a4:	1e6b      	subs	r3, r5, #1
9000f6a6:	b2da      	uxtb	r2, r3
9000f6a8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f6aa:	b16a      	cbz	r2, 9000f6c8 <xQueueGenericSend+0x1e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f6ac:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f6ae:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f6b0:	b153      	cbz	r3, 9000f6c8 <xQueueGenericSend+0x1e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f6b2:	f001 fbd7 	bl	90010e64 <xTaskRemoveFromEventList>
9000f6b6:	2800      	cmp	r0, #0
9000f6b8:	d0f4      	beq.n	9000f6a4 <xQueueGenericSend+0x1c0>
					vTaskMissedYield();
9000f6ba:	f001 fc71 	bl	90010fa0 <vTaskMissedYield>
				--cRxLock;
9000f6be:	1e6b      	subs	r3, r5, #1
9000f6c0:	b2da      	uxtb	r2, r3
9000f6c2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f6c4:	2a00      	cmp	r2, #0
9000f6c6:	d1f1      	bne.n	9000f6ac <xQueueGenericSend+0x1c8>
		pxQueue->cRxLock = queueUNLOCKED;
9000f6c8:	23ff      	movs	r3, #255	; 0xff
9000f6ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000f6ce:	f7ff fc33 	bl	9000ef38 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000f6d2:	f001 faa3 	bl	90010c1c <xTaskResumeAll>
9000f6d6:	2800      	cmp	r0, #0
9000f6d8:	d1a6      	bne.n	9000f628 <xQueueGenericSend+0x144>
					portYIELD_WITHIN_API();
9000f6da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f6de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000f6e2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000f6e6:	f3bf 8f4f 	dsb	sy
9000f6ea:	f3bf 8f6f 	isb	sy
9000f6ee:	e79b      	b.n	9000f628 <xQueueGenericSend+0x144>
					vTaskInternalSetTimeOutState( &xTimeOut );
9000f6f0:	a802      	add	r0, sp, #8
9000f6f2:	f001 fc01 	bl	90010ef8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
9000f6f6:	e730      	b.n	9000f55a <xQueueGenericSend+0x76>
9000f6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f6fc:	f383 8811 	msr	BASEPRI, r3
9000f700:	f3bf 8f6f 	isb	sy
9000f704:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000f708:	e7fe      	b.n	9000f708 <xQueueGenericSend+0x224>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000f70a:	9b01      	ldr	r3, [sp, #4]
9000f70c:	2b00      	cmp	r3, #0
9000f70e:	f43f af09 	beq.w	9000f524 <xQueueGenericSend+0x40>
9000f712:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f716:	f383 8811 	msr	BASEPRI, r3
9000f71a:	f3bf 8f6f 	isb	sy
9000f71e:	f3bf 8f4f 	dsb	sy
9000f722:	e7fe      	b.n	9000f722 <xQueueGenericSend+0x23e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000f724:	463a      	mov	r2, r7
9000f726:	4641      	mov	r1, r8
9000f728:	4620      	mov	r0, r4
9000f72a:	f7ff fd43 	bl	9000f1b4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f72e:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000f730:	2b00      	cmp	r3, #0
9000f732:	d152      	bne.n	9000f7da <xQueueGenericSend+0x2f6>
					else if( xYieldRequired != pdFALSE )
9000f734:	b148      	cbz	r0, 9000f74a <xQueueGenericSend+0x266>
						queueYIELD_IF_USING_PREEMPTION();
9000f736:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f73a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000f73e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000f742:	f3bf 8f4f 	dsb	sy
9000f746:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
9000f74a:	f7ff fbf5 	bl	9000ef38 <vPortExitCritical>
				return pdPASS;
9000f74e:	2001      	movs	r0, #1
}
9000f750:	b004      	add	sp, #16
9000f752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
9000f756:	f7ff fbef 	bl	9000ef38 <vPortExitCritical>
					return errQUEUE_FULL;
9000f75a:	4648      	mov	r0, r9
9000f75c:	e7f8      	b.n	9000f750 <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
9000f75e:	f7ff fbc9 	bl	9000eef4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000f762:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000f766:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f768:	2d00      	cmp	r5, #0
9000f76a:	dd10      	ble.n	9000f78e <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f76c:	f104 0624 	add.w	r6, r4, #36	; 0x24
9000f770:	e003      	b.n	9000f77a <xQueueGenericSend+0x296>
			--cTxLock;
9000f772:	1e6b      	subs	r3, r5, #1
9000f774:	b2da      	uxtb	r2, r3
9000f776:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f778:	b14a      	cbz	r2, 9000f78e <xQueueGenericSend+0x2aa>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f77a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f77c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f77e:	b133      	cbz	r3, 9000f78e <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f780:	f001 fb70 	bl	90010e64 <xTaskRemoveFromEventList>
9000f784:	2800      	cmp	r0, #0
9000f786:	d0f4      	beq.n	9000f772 <xQueueGenericSend+0x28e>
						vTaskMissedYield();
9000f788:	f001 fc0a 	bl	90010fa0 <vTaskMissedYield>
9000f78c:	e7f1      	b.n	9000f772 <xQueueGenericSend+0x28e>
		pxQueue->cTxLock = queueUNLOCKED;
9000f78e:	23ff      	movs	r3, #255	; 0xff
9000f790:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000f794:	f7ff fbd0 	bl	9000ef38 <vPortExitCritical>
	taskENTER_CRITICAL();
9000f798:	f7ff fbac 	bl	9000eef4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000f79c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000f7a0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f7a2:	2d00      	cmp	r5, #0
9000f7a4:	dd10      	ble.n	9000f7c8 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f7a6:	f104 0610 	add.w	r6, r4, #16
9000f7aa:	e003      	b.n	9000f7b4 <xQueueGenericSend+0x2d0>
				--cRxLock;
9000f7ac:	1e6b      	subs	r3, r5, #1
9000f7ae:	b2da      	uxtb	r2, r3
9000f7b0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f7b2:	b14a      	cbz	r2, 9000f7c8 <xQueueGenericSend+0x2e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f7b4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f7b6:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f7b8:	b133      	cbz	r3, 9000f7c8 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f7ba:	f001 fb53 	bl	90010e64 <xTaskRemoveFromEventList>
9000f7be:	2800      	cmp	r0, #0
9000f7c0:	d0f4      	beq.n	9000f7ac <xQueueGenericSend+0x2c8>
					vTaskMissedYield();
9000f7c2:	f001 fbed 	bl	90010fa0 <vTaskMissedYield>
9000f7c6:	e7f1      	b.n	9000f7ac <xQueueGenericSend+0x2c8>
		pxQueue->cRxLock = queueUNLOCKED;
9000f7c8:	23ff      	movs	r3, #255	; 0xff
9000f7ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000f7ce:	f7ff fbb3 	bl	9000ef38 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000f7d2:	f001 fa23 	bl	90010c1c <xTaskResumeAll>
			return errQUEUE_FULL;
9000f7d6:	2000      	movs	r0, #0
9000f7d8:	e7ba      	b.n	9000f750 <xQueueGenericSend+0x26c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f7da:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000f7de:	f001 fb41 	bl	90010e64 <xTaskRemoveFromEventList>
9000f7e2:	2800      	cmp	r0, #0
9000f7e4:	d0b1      	beq.n	9000f74a <xQueueGenericSend+0x266>
9000f7e6:	e7a6      	b.n	9000f736 <xQueueGenericSend+0x252>

9000f7e8 <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
9000f7e8:	b179      	cbz	r1, 9000f80a <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000f7ea:	2350      	movs	r3, #80	; 0x50
	{
9000f7ec:	b570      	push	{r4, r5, r6, lr}
9000f7ee:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticQueue_t );
9000f7f0:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
9000f7f2:	9b01      	ldr	r3, [sp, #4]
9000f7f4:	2b50      	cmp	r3, #80	; 0x50
9000f7f6:	d011      	beq.n	9000f81c <xQueueCreateMutexStatic+0x34>
9000f7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f7fc:	f383 8811 	msr	BASEPRI, r3
9000f800:	f3bf 8f6f 	isb	sy
9000f804:	f3bf 8f4f 	dsb	sy
9000f808:	e7fe      	b.n	9000f808 <xQueueCreateMutexStatic+0x20>
9000f80a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f80e:	f383 8811 	msr	BASEPRI, r3
9000f812:	f3bf 8f6f 	isb	sy
9000f816:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000f81a:	e7fe      	b.n	9000f81a <xQueueCreateMutexStatic+0x32>
	pxNewQueue->uxItemSize = uxItemSize;
9000f81c:	2600      	movs	r6, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000f81e:	2301      	movs	r3, #1
9000f820:	460c      	mov	r4, r1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000f822:	6009      	str	r1, [r1, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000f824:	f881 3046 	strb.w	r3, [r1, #70]	; 0x46
9000f828:	4605      	mov	r5, r0
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000f82a:	9a01      	ldr	r2, [sp, #4]
	pxNewQueue->uxItemSize = uxItemSize;
9000f82c:	e9c1 360f 	strd	r3, r6, [r1, #60]	; 0x3c
	taskENTER_CRITICAL();
9000f830:	f7ff fb60 	bl	9000eef4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f834:	6821      	ldr	r1, [r4, #0]
		pxQueue->cRxLock = queueUNLOCKED;
9000f836:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000f838:	63a6      	str	r6, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000f83a:	6061      	str	r1, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
9000f83c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000f840:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f844:	e9d4 200f 	ldrd	r2, r0, [r4, #60]	; 0x3c
9000f848:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f84c:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f84e:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f850:	4401      	add	r1, r0
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f852:	f104 0010 	add.w	r0, r4, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f856:	e9c4 2102 	strd	r2, r1, [r4, #8]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f85a:	f7ff fa95 	bl	9000ed88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000f85e:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000f862:	f7ff fa91 	bl	9000ed88 <vListInitialise>
	taskEXIT_CRITICAL();
9000f866:	f7ff fb67 	bl	9000ef38 <vPortExitCritical>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000f86a:	4633      	mov	r3, r6
9000f86c:	4632      	mov	r2, r6
9000f86e:	4631      	mov	r1, r6
9000f870:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000f872:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
9000f876:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
9000f878:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
9000f87a:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000f87c:	f7ff fe32 	bl	9000f4e4 <xQueueGenericSend>
	}
9000f880:	4620      	mov	r0, r4
9000f882:	b002      	add	sp, #8
9000f884:	bd70      	pop	{r4, r5, r6, pc}
9000f886:	bf00      	nop

9000f888 <xQueueGiveMutexRecursive>:
	{
9000f888:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
9000f88a:	b138      	cbz	r0, 9000f89c <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
9000f88c:	6885      	ldr	r5, [r0, #8]
9000f88e:	4604      	mov	r4, r0
9000f890:	f001 fb8c 	bl	90010fac <xTaskGetCurrentTaskHandle>
9000f894:	4285      	cmp	r5, r0
9000f896:	d00a      	beq.n	9000f8ae <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
9000f898:	2000      	movs	r0, #0
	}
9000f89a:	bd38      	pop	{r3, r4, r5, pc}
9000f89c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f8a0:	f383 8811 	msr	BASEPRI, r3
9000f8a4:	f3bf 8f6f 	isb	sy
9000f8a8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
9000f8ac:	e7fe      	b.n	9000f8ac <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
9000f8ae:	68e3      	ldr	r3, [r4, #12]
9000f8b0:	3b01      	subs	r3, #1
9000f8b2:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
9000f8b4:	b10b      	cbz	r3, 9000f8ba <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
9000f8b6:	2001      	movs	r0, #1
	}
9000f8b8:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
9000f8ba:	461a      	mov	r2, r3
9000f8bc:	4619      	mov	r1, r3
9000f8be:	4620      	mov	r0, r4
9000f8c0:	f7ff fe10 	bl	9000f4e4 <xQueueGenericSend>
			xReturn = pdPASS;
9000f8c4:	2001      	movs	r0, #1
	}
9000f8c6:	bd38      	pop	{r3, r4, r5, pc}

9000f8c8 <xQueueCreateMutex>:
	{
9000f8c8:	b570      	push	{r4, r5, r6, lr}
9000f8ca:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000f8cc:	2050      	movs	r0, #80	; 0x50
9000f8ce:	f7ff f939 	bl	9000eb44 <pvPortMalloc>
		if( pxNewQueue != NULL )
9000f8d2:	4604      	mov	r4, r0
9000f8d4:	b370      	cbz	r0, 9000f934 <xQueueCreateMutex+0x6c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000f8d6:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
9000f8d8:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000f8da:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000f8dc:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000f8e0:	e9c0 360f 	strd	r3, r6, [r0, #60]	; 0x3c
	taskENTER_CRITICAL();
9000f8e4:	f7ff fb06 	bl	9000eef4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f8e8:	6821      	ldr	r1, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000f8ea:	63a6      	str	r6, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f8ec:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000f8f0:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f8f2:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
9000f8f6:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f8fa:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f8fc:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f8fe:	4419      	add	r1, r3
		pxQueue->cRxLock = queueUNLOCKED;
9000f900:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f902:	e9c4 2102 	strd	r2, r1, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000f906:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000f90a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f90e:	f7ff fa3b 	bl	9000ed88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000f912:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000f916:	f7ff fa37 	bl	9000ed88 <vListInitialise>
	taskEXIT_CRITICAL();
9000f91a:	f7ff fb0d 	bl	9000ef38 <vPortExitCritical>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000f91e:	4633      	mov	r3, r6
9000f920:	4632      	mov	r2, r6
9000f922:	4631      	mov	r1, r6
9000f924:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000f926:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
9000f92a:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
9000f92c:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
9000f92e:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000f930:	f7ff fdd8 	bl	9000f4e4 <xQueueGenericSend>
	}
9000f934:	4620      	mov	r0, r4
9000f936:	bd70      	pop	{r4, r5, r6, pc}

9000f938 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
9000f938:	2800      	cmp	r0, #0
9000f93a:	d04e      	beq.n	9000f9da <xQueueGenericSendFromISR+0xa2>
{
9000f93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000f940:	460e      	mov	r6, r1
9000f942:	4604      	mov	r4, r0
9000f944:	4617      	mov	r7, r2
9000f946:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000f948:	b339      	cbz	r1, 9000f99a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
9000f94a:	2d02      	cmp	r5, #2
9000f94c:	d10b      	bne.n	9000f966 <xQueueGenericSendFromISR+0x2e>
9000f94e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000f950:	2b01      	cmp	r3, #1
9000f952:	d008      	beq.n	9000f966 <xQueueGenericSendFromISR+0x2e>
9000f954:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f958:	f383 8811 	msr	BASEPRI, r3
9000f95c:	f3bf 8f6f 	isb	sy
9000f960:	f3bf 8f4f 	dsb	sy
9000f964:	e7fe      	b.n	9000f964 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000f966:	f7ff fbf7 	bl	9000f158 <vPortValidateInterruptPriority>
	__asm volatile
9000f96a:	f3ef 8811 	mrs	r8, BASEPRI
9000f96e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f972:	f383 8811 	msr	BASEPRI, r3
9000f976:	f3bf 8f6f 	isb	sy
9000f97a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000f97e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000f980:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000f982:	429a      	cmp	r2, r3
9000f984:	d315      	bcc.n	9000f9b2 <xQueueGenericSendFromISR+0x7a>
9000f986:	f1a5 0002 	sub.w	r0, r5, #2
9000f98a:	fab0 f080 	clz	r0, r0
9000f98e:	0940      	lsrs	r0, r0, #5
9000f990:	b978      	cbnz	r0, 9000f9b2 <xQueueGenericSendFromISR+0x7a>
	__asm volatile
9000f992:	f388 8811 	msr	BASEPRI, r8
}
9000f996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000f99a:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000f99c:	2b00      	cmp	r3, #0
9000f99e:	d0d4      	beq.n	9000f94a <xQueueGenericSendFromISR+0x12>
	__asm volatile
9000f9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f9a4:	f383 8811 	msr	BASEPRI, r3
9000f9a8:	f3bf 8f6f 	isb	sy
9000f9ac:	f3bf 8f4f 	dsb	sy
9000f9b0:	e7fe      	b.n	9000f9b0 <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000f9b2:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
9000f9b4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000f9b8:	4631      	mov	r1, r6
9000f9ba:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
9000f9bc:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
9000f9be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000f9c0:	f7ff fbf8 	bl	9000f1b4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
9000f9c4:	1c6b      	adds	r3, r5, #1
9000f9c6:	d011      	beq.n	9000f9ec <xQueueGenericSendFromISR+0xb4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000f9c8:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
9000f9ca:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000f9cc:	b25b      	sxtb	r3, r3
9000f9ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
9000f9d2:	f388 8811 	msr	BASEPRI, r8
}
9000f9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
9000f9da:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f9de:	f383 8811 	msr	BASEPRI, r3
9000f9e2:	f3bf 8f6f 	isb	sy
9000f9e6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000f9ea:	e7fe      	b.n	9000f9ea <xQueueGenericSendFromISR+0xb2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f9ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000f9ee:	b90b      	cbnz	r3, 9000f9f4 <xQueueGenericSendFromISR+0xbc>
			xReturn = pdPASS;
9000f9f0:	2001      	movs	r0, #1
9000f9f2:	e7ce      	b.n	9000f992 <xQueueGenericSendFromISR+0x5a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f9f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000f9f8:	f001 fa34 	bl	90010e64 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
9000f9fc:	2800      	cmp	r0, #0
9000f9fe:	d0f7      	beq.n	9000f9f0 <xQueueGenericSendFromISR+0xb8>
9000fa00:	2f00      	cmp	r7, #0
9000fa02:	d0f5      	beq.n	9000f9f0 <xQueueGenericSendFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
9000fa04:	2301      	movs	r3, #1
			xReturn = pdPASS;
9000fa06:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
9000fa08:	603b      	str	r3, [r7, #0]
9000fa0a:	e7c2      	b.n	9000f992 <xQueueGenericSendFromISR+0x5a>

9000fa0c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
9000fa0c:	b360      	cbz	r0, 9000fa68 <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
9000fa0e:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
9000fa10:	b570      	push	{r4, r5, r6, lr}
9000fa12:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
9000fa14:	b143      	cbz	r3, 9000fa28 <xQueueGiveFromISR+0x1c>
9000fa16:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fa1a:	f383 8811 	msr	BASEPRI, r3
9000fa1e:	f3bf 8f6f 	isb	sy
9000fa22:	f3bf 8f4f 	dsb	sy
9000fa26:	e7fe      	b.n	9000fa26 <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
9000fa28:	6803      	ldr	r3, [r0, #0]
9000fa2a:	460d      	mov	r5, r1
9000fa2c:	b32b      	cbz	r3, 9000fa7a <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000fa2e:	f7ff fb93 	bl	9000f158 <vPortValidateInterruptPriority>
	__asm volatile
9000fa32:	f3ef 8611 	mrs	r6, BASEPRI
9000fa36:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fa3a:	f383 8811 	msr	BASEPRI, r3
9000fa3e:	f3bf 8f6f 	isb	sy
9000fa42:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000fa46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
9000fa48:	6be2      	ldr	r2, [r4, #60]	; 0x3c
9000fa4a:	429a      	cmp	r2, r3
9000fa4c:	d921      	bls.n	9000fa92 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
9000fa4e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000fa52:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
9000fa54:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000fa56:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
9000fa58:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
9000fa5a:	d01e      	beq.n	9000fa9a <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000fa5c:	3301      	adds	r3, #1
			xReturn = pdPASS;
9000fa5e:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000fa60:	b25b      	sxtb	r3, r3
9000fa62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000fa66:	e015      	b.n	9000fa94 <xQueueGiveFromISR+0x88>
	__asm volatile
9000fa68:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fa6c:	f383 8811 	msr	BASEPRI, r3
9000fa70:	f3bf 8f6f 	isb	sy
9000fa74:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000fa78:	e7fe      	b.n	9000fa78 <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
9000fa7a:	6883      	ldr	r3, [r0, #8]
9000fa7c:	2b00      	cmp	r3, #0
9000fa7e:	d0d6      	beq.n	9000fa2e <xQueueGiveFromISR+0x22>
9000fa80:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fa84:	f383 8811 	msr	BASEPRI, r3
9000fa88:	f3bf 8f6f 	isb	sy
9000fa8c:	f3bf 8f4f 	dsb	sy
9000fa90:	e7fe      	b.n	9000fa90 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
9000fa92:	2000      	movs	r0, #0
	__asm volatile
9000fa94:	f386 8811 	msr	BASEPRI, r6
}
9000fa98:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fa9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000fa9c:	b90b      	cbnz	r3, 9000faa2 <xQueueGiveFromISR+0x96>
			xReturn = pdPASS;
9000fa9e:	2001      	movs	r0, #1
9000faa0:	e7f8      	b.n	9000fa94 <xQueueGiveFromISR+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000faa2:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000faa6:	f001 f9dd 	bl	90010e64 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
9000faaa:	2d00      	cmp	r5, #0
9000faac:	d0f7      	beq.n	9000fa9e <xQueueGiveFromISR+0x92>
9000faae:	2800      	cmp	r0, #0
9000fab0:	d0f5      	beq.n	9000fa9e <xQueueGiveFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
9000fab2:	2301      	movs	r3, #1
			xReturn = pdPASS;
9000fab4:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
9000fab6:	602b      	str	r3, [r5, #0]
9000fab8:	e7ec      	b.n	9000fa94 <xQueueGiveFromISR+0x88>
9000faba:	bf00      	nop

9000fabc <xQueueReceive>:
{
9000fabc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000fac0:	b085      	sub	sp, #20
9000fac2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
9000fac4:	2800      	cmp	r0, #0
9000fac6:	f000 815c 	beq.w	9000fd82 <xQueueReceive+0x2c6>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000faca:	460f      	mov	r7, r1
9000facc:	4604      	mov	r4, r0
9000face:	2900      	cmp	r1, #0
9000fad0:	d079      	beq.n	9000fbc6 <xQueueReceive+0x10a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000fad2:	f001 fa71 	bl	90010fb8 <xTaskGetSchedulerState>
9000fad6:	2800      	cmp	r0, #0
9000fad8:	f000 8081 	beq.w	9000fbde <xQueueReceive+0x122>
		taskENTER_CRITICAL();
9000fadc:	f7ff fa0a 	bl	9000eef4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000fae0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000fae2:	2d00      	cmp	r5, #0
9000fae4:	f040 8138 	bne.w	9000fd58 <xQueueReceive+0x29c>
				if( xTicksToWait == ( TickType_t ) 0 )
9000fae8:	9b01      	ldr	r3, [sp, #4]
9000faea:	2b00      	cmp	r3, #0
9000faec:	f000 80d5 	beq.w	9000fc9a <xQueueReceive+0x1de>
		prvLockQueue( pxQueue );
9000faf0:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000faf2:	f104 0624 	add.w	r6, r4, #36	; 0x24
					vTaskInternalSetTimeOutState( &xTimeOut );
9000faf6:	a802      	add	r0, sp, #8
9000faf8:	f001 f9fe 	bl	90010ef8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
9000fafc:	f7ff fa1c 	bl	9000ef38 <vPortExitCritical>
		vTaskSuspendAll();
9000fb00:	f001 f884 	bl	90010c0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000fb04:	f7ff f9f6 	bl	9000eef4 <vPortEnterCritical>
9000fb08:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000fb0c:	2bff      	cmp	r3, #255	; 0xff
9000fb0e:	d101      	bne.n	9000fb14 <xQueueReceive+0x58>
9000fb10:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
9000fb14:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000fb18:	2bff      	cmp	r3, #255	; 0xff
9000fb1a:	d101      	bne.n	9000fb20 <xQueueReceive+0x64>
9000fb1c:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
9000fb20:	f7ff fa0a 	bl	9000ef38 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000fb24:	a901      	add	r1, sp, #4
9000fb26:	a802      	add	r0, sp, #8
9000fb28:	f001 f9f2 	bl	90010f10 <xTaskCheckForTimeOut>
9000fb2c:	2800      	cmp	r0, #0
9000fb2e:	d163      	bne.n	9000fbf8 <xQueueReceive+0x13c>
	taskENTER_CRITICAL();
9000fb30:	f7ff f9e0 	bl	9000eef4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000fb34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000fb36:	2b00      	cmp	r3, #0
9000fb38:	f000 80b5 	beq.w	9000fca6 <xQueueReceive+0x1ea>
	taskEXIT_CRITICAL();
9000fb3c:	f7ff f9fc 	bl	9000ef38 <vPortExitCritical>
	taskENTER_CRITICAL();
9000fb40:	f7ff f9d8 	bl	9000eef4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000fb44:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000fb48:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fb4a:	2d00      	cmp	r5, #0
9000fb4c:	dc04      	bgt.n	9000fb58 <xQueueReceive+0x9c>
9000fb4e:	e011      	b.n	9000fb74 <xQueueReceive+0xb8>
			--cTxLock;
9000fb50:	1e6b      	subs	r3, r5, #1
9000fb52:	b2da      	uxtb	r2, r3
9000fb54:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fb56:	b16a      	cbz	r2, 9000fb74 <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fb58:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fb5a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fb5c:	b153      	cbz	r3, 9000fb74 <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fb5e:	f001 f981 	bl	90010e64 <xTaskRemoveFromEventList>
9000fb62:	2800      	cmp	r0, #0
9000fb64:	d0f4      	beq.n	9000fb50 <xQueueReceive+0x94>
						vTaskMissedYield();
9000fb66:	f001 fa1b 	bl	90010fa0 <vTaskMissedYield>
			--cTxLock;
9000fb6a:	1e6b      	subs	r3, r5, #1
9000fb6c:	b2da      	uxtb	r2, r3
9000fb6e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fb70:	2a00      	cmp	r2, #0
9000fb72:	d1f1      	bne.n	9000fb58 <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
9000fb74:	23ff      	movs	r3, #255	; 0xff
9000fb76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000fb7a:	f7ff f9dd 	bl	9000ef38 <vPortExitCritical>
	taskENTER_CRITICAL();
9000fb7e:	f7ff f9b9 	bl	9000eef4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000fb82:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000fb86:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fb88:	2d00      	cmp	r5, #0
9000fb8a:	dd14      	ble.n	9000fbb6 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fb8c:	f104 0910 	add.w	r9, r4, #16
9000fb90:	e003      	b.n	9000fb9a <xQueueReceive+0xde>
				--cRxLock;
9000fb92:	1e6b      	subs	r3, r5, #1
9000fb94:	b2da      	uxtb	r2, r3
9000fb96:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fb98:	b16a      	cbz	r2, 9000fbb6 <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fb9a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fb9c:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fb9e:	b153      	cbz	r3, 9000fbb6 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fba0:	f001 f960 	bl	90010e64 <xTaskRemoveFromEventList>
9000fba4:	2800      	cmp	r0, #0
9000fba6:	d0f4      	beq.n	9000fb92 <xQueueReceive+0xd6>
					vTaskMissedYield();
9000fba8:	f001 f9fa 	bl	90010fa0 <vTaskMissedYield>
				--cRxLock;
9000fbac:	1e6b      	subs	r3, r5, #1
9000fbae:	b2da      	uxtb	r2, r3
9000fbb0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fbb2:	2a00      	cmp	r2, #0
9000fbb4:	d1f1      	bne.n	9000fb9a <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
9000fbb6:	23ff      	movs	r3, #255	; 0xff
9000fbb8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000fbbc:	f7ff f9bc 	bl	9000ef38 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000fbc0:	f001 f82c 	bl	90010c1c <xTaskResumeAll>
		taskENTER_CRITICAL();
9000fbc4:	e060      	b.n	9000fc88 <xQueueReceive+0x1cc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000fbc6:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000fbc8:	2b00      	cmp	r3, #0
9000fbca:	d082      	beq.n	9000fad2 <xQueueReceive+0x16>
	__asm volatile
9000fbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fbd0:	f383 8811 	msr	BASEPRI, r3
9000fbd4:	f3bf 8f6f 	isb	sy
9000fbd8:	f3bf 8f4f 	dsb	sy
9000fbdc:	e7fe      	b.n	9000fbdc <xQueueReceive+0x120>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000fbde:	9b01      	ldr	r3, [sp, #4]
9000fbe0:	2b00      	cmp	r3, #0
9000fbe2:	f43f af7b 	beq.w	9000fadc <xQueueReceive+0x20>
9000fbe6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fbea:	f383 8811 	msr	BASEPRI, r3
9000fbee:	f3bf 8f6f 	isb	sy
9000fbf2:	f3bf 8f4f 	dsb	sy
9000fbf6:	e7fe      	b.n	9000fbf6 <xQueueReceive+0x13a>
	taskENTER_CRITICAL();
9000fbf8:	f7ff f97c 	bl	9000eef4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000fbfc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000fc00:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fc02:	2d00      	cmp	r5, #0
9000fc04:	dc04      	bgt.n	9000fc10 <xQueueReceive+0x154>
9000fc06:	e011      	b.n	9000fc2c <xQueueReceive+0x170>
			--cTxLock;
9000fc08:	1e6b      	subs	r3, r5, #1
9000fc0a:	b2da      	uxtb	r2, r3
9000fc0c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fc0e:	b16a      	cbz	r2, 9000fc2c <xQueueReceive+0x170>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fc10:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fc12:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fc14:	b153      	cbz	r3, 9000fc2c <xQueueReceive+0x170>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fc16:	f001 f925 	bl	90010e64 <xTaskRemoveFromEventList>
9000fc1a:	2800      	cmp	r0, #0
9000fc1c:	d0f4      	beq.n	9000fc08 <xQueueReceive+0x14c>
						vTaskMissedYield();
9000fc1e:	f001 f9bf 	bl	90010fa0 <vTaskMissedYield>
			--cTxLock;
9000fc22:	1e6b      	subs	r3, r5, #1
9000fc24:	b2da      	uxtb	r2, r3
9000fc26:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fc28:	2a00      	cmp	r2, #0
9000fc2a:	d1f1      	bne.n	9000fc10 <xQueueReceive+0x154>
		pxQueue->cTxLock = queueUNLOCKED;
9000fc2c:	23ff      	movs	r3, #255	; 0xff
9000fc2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000fc32:	f7ff f981 	bl	9000ef38 <vPortExitCritical>
	taskENTER_CRITICAL();
9000fc36:	f7ff f95d 	bl	9000eef4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000fc3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000fc3e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fc40:	2d00      	cmp	r5, #0
9000fc42:	dd14      	ble.n	9000fc6e <xQueueReceive+0x1b2>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fc44:	f104 0910 	add.w	r9, r4, #16
9000fc48:	e003      	b.n	9000fc52 <xQueueReceive+0x196>
				--cRxLock;
9000fc4a:	1e6b      	subs	r3, r5, #1
9000fc4c:	b2da      	uxtb	r2, r3
9000fc4e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fc50:	b16a      	cbz	r2, 9000fc6e <xQueueReceive+0x1b2>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fc52:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fc54:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fc56:	b153      	cbz	r3, 9000fc6e <xQueueReceive+0x1b2>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fc58:	f001 f904 	bl	90010e64 <xTaskRemoveFromEventList>
9000fc5c:	2800      	cmp	r0, #0
9000fc5e:	d0f4      	beq.n	9000fc4a <xQueueReceive+0x18e>
					vTaskMissedYield();
9000fc60:	f001 f99e 	bl	90010fa0 <vTaskMissedYield>
				--cRxLock;
9000fc64:	1e6b      	subs	r3, r5, #1
9000fc66:	b2da      	uxtb	r2, r3
9000fc68:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fc6a:	2a00      	cmp	r2, #0
9000fc6c:	d1f1      	bne.n	9000fc52 <xQueueReceive+0x196>
		pxQueue->cRxLock = queueUNLOCKED;
9000fc6e:	23ff      	movs	r3, #255	; 0xff
9000fc70:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000fc74:	f7ff f960 	bl	9000ef38 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000fc78:	f000 ffd0 	bl	90010c1c <xTaskResumeAll>
	taskENTER_CRITICAL();
9000fc7c:	f7ff f93a 	bl	9000eef4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000fc80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000fc82:	b153      	cbz	r3, 9000fc9a <xQueueReceive+0x1de>
	taskEXIT_CRITICAL();
9000fc84:	f7ff f958 	bl	9000ef38 <vPortExitCritical>
		taskENTER_CRITICAL();
9000fc88:	f7ff f934 	bl	9000eef4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000fc8c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000fc8e:	2d00      	cmp	r5, #0
9000fc90:	d162      	bne.n	9000fd58 <xQueueReceive+0x29c>
				if( xTicksToWait == ( TickType_t ) 0 )
9000fc92:	9b01      	ldr	r3, [sp, #4]
9000fc94:	2b00      	cmp	r3, #0
9000fc96:	f47f af31 	bne.w	9000fafc <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
9000fc9a:	f7ff f94d 	bl	9000ef38 <vPortExitCritical>
					return errQUEUE_EMPTY;
9000fc9e:	2000      	movs	r0, #0
}
9000fca0:	b005      	add	sp, #20
9000fca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
9000fca6:	f7ff f947 	bl	9000ef38 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
9000fcaa:	9901      	ldr	r1, [sp, #4]
9000fcac:	4630      	mov	r0, r6
9000fcae:	f001 f84b 	bl	90010d48 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000fcb2:	f7ff f91f 	bl	9000eef4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000fcb6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000fcba:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fcbc:	2d00      	cmp	r5, #0
9000fcbe:	dc04      	bgt.n	9000fcca <xQueueReceive+0x20e>
9000fcc0:	e011      	b.n	9000fce6 <xQueueReceive+0x22a>
			--cTxLock;
9000fcc2:	1e6b      	subs	r3, r5, #1
9000fcc4:	b2da      	uxtb	r2, r3
9000fcc6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fcc8:	b16a      	cbz	r2, 9000fce6 <xQueueReceive+0x22a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fcca:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fccc:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fcce:	b153      	cbz	r3, 9000fce6 <xQueueReceive+0x22a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fcd0:	f001 f8c8 	bl	90010e64 <xTaskRemoveFromEventList>
9000fcd4:	2800      	cmp	r0, #0
9000fcd6:	d0f4      	beq.n	9000fcc2 <xQueueReceive+0x206>
						vTaskMissedYield();
9000fcd8:	f001 f962 	bl	90010fa0 <vTaskMissedYield>
			--cTxLock;
9000fcdc:	1e6b      	subs	r3, r5, #1
9000fcde:	b2da      	uxtb	r2, r3
9000fce0:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fce2:	2a00      	cmp	r2, #0
9000fce4:	d1f1      	bne.n	9000fcca <xQueueReceive+0x20e>
		pxQueue->cTxLock = queueUNLOCKED;
9000fce6:	23ff      	movs	r3, #255	; 0xff
9000fce8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000fcec:	f7ff f924 	bl	9000ef38 <vPortExitCritical>
	taskENTER_CRITICAL();
9000fcf0:	f7ff f900 	bl	9000eef4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000fcf4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000fcf8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fcfa:	2d00      	cmp	r5, #0
9000fcfc:	dd14      	ble.n	9000fd28 <xQueueReceive+0x26c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fcfe:	f104 0910 	add.w	r9, r4, #16
9000fd02:	e003      	b.n	9000fd0c <xQueueReceive+0x250>
				--cRxLock;
9000fd04:	1e6b      	subs	r3, r5, #1
9000fd06:	b2da      	uxtb	r2, r3
9000fd08:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fd0a:	b16a      	cbz	r2, 9000fd28 <xQueueReceive+0x26c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fd0c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fd0e:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fd10:	b153      	cbz	r3, 9000fd28 <xQueueReceive+0x26c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fd12:	f001 f8a7 	bl	90010e64 <xTaskRemoveFromEventList>
9000fd16:	2800      	cmp	r0, #0
9000fd18:	d0f4      	beq.n	9000fd04 <xQueueReceive+0x248>
					vTaskMissedYield();
9000fd1a:	f001 f941 	bl	90010fa0 <vTaskMissedYield>
				--cRxLock;
9000fd1e:	1e6b      	subs	r3, r5, #1
9000fd20:	b2da      	uxtb	r2, r3
9000fd22:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fd24:	2a00      	cmp	r2, #0
9000fd26:	d1f1      	bne.n	9000fd0c <xQueueReceive+0x250>
		pxQueue->cRxLock = queueUNLOCKED;
9000fd28:	23ff      	movs	r3, #255	; 0xff
9000fd2a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000fd2e:	f7ff f903 	bl	9000ef38 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000fd32:	f000 ff73 	bl	90010c1c <xTaskResumeAll>
9000fd36:	2800      	cmp	r0, #0
9000fd38:	d1a6      	bne.n	9000fc88 <xQueueReceive+0x1cc>
					portYIELD_WITHIN_API();
9000fd3a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000fd3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000fd42:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000fd46:	f3bf 8f4f 	dsb	sy
9000fd4a:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
9000fd4e:	f7ff f8d1 	bl	9000eef4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000fd52:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000fd54:	2d00      	cmp	r5, #0
9000fd56:	d09c      	beq.n	9000fc92 <xQueueReceive+0x1d6>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000fd58:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000fd5a:	b152      	cbz	r2, 9000fd72 <xQueueReceive+0x2b6>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000fd5c:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000fd5e:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000fd60:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000fd62:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000fd64:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000fd66:	d301      	bcc.n	9000fd6c <xQueueReceive+0x2b0>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
9000fd68:	6821      	ldr	r1, [r4, #0]
9000fd6a:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000fd6c:	4638      	mov	r0, r7
9000fd6e:	f017 fd46 	bl	900277fe <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000fd72:	3d01      	subs	r5, #1
9000fd74:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fd76:	6923      	ldr	r3, [r4, #16]
9000fd78:	b963      	cbnz	r3, 9000fd94 <xQueueReceive+0x2d8>
				taskEXIT_CRITICAL();
9000fd7a:	f7ff f8dd 	bl	9000ef38 <vPortExitCritical>
				return pdPASS;
9000fd7e:	2001      	movs	r0, #1
9000fd80:	e78e      	b.n	9000fca0 <xQueueReceive+0x1e4>
9000fd82:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fd86:	f383 8811 	msr	BASEPRI, r3
9000fd8a:	f3bf 8f6f 	isb	sy
9000fd8e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
9000fd92:	e7fe      	b.n	9000fd92 <xQueueReceive+0x2d6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fd94:	f104 0010 	add.w	r0, r4, #16
9000fd98:	f001 f864 	bl	90010e64 <xTaskRemoveFromEventList>
9000fd9c:	2800      	cmp	r0, #0
9000fd9e:	d0ec      	beq.n	9000fd7a <xQueueReceive+0x2be>
						queueYIELD_IF_USING_PREEMPTION();
9000fda0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000fda4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000fda8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000fdac:	f3bf 8f4f 	dsb	sy
9000fdb0:	f3bf 8f6f 	isb	sy
9000fdb4:	e7e1      	b.n	9000fd7a <xQueueReceive+0x2be>
9000fdb6:	bf00      	nop

9000fdb8 <xQueueSemaphoreTake>:
{
9000fdb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000fdbc:	b084      	sub	sp, #16
9000fdbe:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
9000fdc0:	2800      	cmp	r0, #0
9000fdc2:	d05c      	beq.n	9000fe7e <xQueueSemaphoreTake+0xc6>
	configASSERT( pxQueue->uxItemSize == 0 );
9000fdc4:	6c07      	ldr	r7, [r0, #64]	; 0x40
9000fdc6:	4604      	mov	r4, r0
9000fdc8:	b147      	cbz	r7, 9000fddc <xQueueSemaphoreTake+0x24>
9000fdca:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fdce:	f383 8811 	msr	BASEPRI, r3
9000fdd2:	f3bf 8f6f 	isb	sy
9000fdd6:	f3bf 8f4f 	dsb	sy
9000fdda:	e7fe      	b.n	9000fdda <xQueueSemaphoreTake+0x22>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000fddc:	f001 f8ec 	bl	90010fb8 <xTaskGetSchedulerState>
9000fde0:	4605      	mov	r5, r0
9000fde2:	2800      	cmp	r0, #0
9000fde4:	d054      	beq.n	9000fe90 <xQueueSemaphoreTake+0xd8>
9000fde6:	463d      	mov	r5, r7
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fde8:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
9000fdec:	f7ff f882 	bl	9000eef4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
9000fdf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
9000fdf2:	2b00      	cmp	r3, #0
9000fdf4:	f040 8149 	bne.w	9001008a <xQueueSemaphoreTake+0x2d2>
				if( xTicksToWait == ( TickType_t ) 0 )
9000fdf8:	9b01      	ldr	r3, [sp, #4]
9000fdfa:	2b00      	cmp	r3, #0
9000fdfc:	f000 813a 	beq.w	90010074 <xQueueSemaphoreTake+0x2bc>
				else if( xEntryTimeSet == pdFALSE )
9000fe00:	2d00      	cmp	r5, #0
9000fe02:	f000 809d 	beq.w	9000ff40 <xQueueSemaphoreTake+0x188>
		taskEXIT_CRITICAL();
9000fe06:	f7ff f897 	bl	9000ef38 <vPortExitCritical>
		vTaskSuspendAll();
9000fe0a:	f000 feff 	bl	90010c0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000fe0e:	f7ff f871 	bl	9000eef4 <vPortEnterCritical>
9000fe12:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000fe16:	2bff      	cmp	r3, #255	; 0xff
9000fe18:	d102      	bne.n	9000fe20 <xQueueSemaphoreTake+0x68>
9000fe1a:	2300      	movs	r3, #0
9000fe1c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000fe20:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000fe24:	2bff      	cmp	r3, #255	; 0xff
9000fe26:	d102      	bne.n	9000fe2e <xQueueSemaphoreTake+0x76>
9000fe28:	2300      	movs	r3, #0
9000fe2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000fe2e:	f7ff f883 	bl	9000ef38 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000fe32:	a901      	add	r1, sp, #4
9000fe34:	a802      	add	r0, sp, #8
9000fe36:	f001 f86b 	bl	90010f10 <xTaskCheckForTimeOut>
9000fe3a:	2800      	cmp	r0, #0
9000fe3c:	d135      	bne.n	9000feaa <xQueueSemaphoreTake+0xf2>
	taskENTER_CRITICAL();
9000fe3e:	f7ff f859 	bl	9000eef4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000fe42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000fe44:	2b00      	cmp	r3, #0
9000fe46:	f000 80a4 	beq.w	9000ff92 <xQueueSemaphoreTake+0x1da>
	taskEXIT_CRITICAL();
9000fe4a:	f7ff f875 	bl	9000ef38 <vPortExitCritical>
	taskENTER_CRITICAL();
9000fe4e:	f7ff f851 	bl	9000eef4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000fe52:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000fe56:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fe58:	2d00      	cmp	r5, #0
9000fe5a:	dc05      	bgt.n	9000fe68 <xQueueSemaphoreTake+0xb0>
9000fe5c:	e074      	b.n	9000ff48 <xQueueSemaphoreTake+0x190>
			--cTxLock;
9000fe5e:	1e6b      	subs	r3, r5, #1
9000fe60:	b2da      	uxtb	r2, r3
9000fe62:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fe64:	2a00      	cmp	r2, #0
9000fe66:	d06f      	beq.n	9000ff48 <xQueueSemaphoreTake+0x190>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fe68:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fe6a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fe6c:	2b00      	cmp	r3, #0
9000fe6e:	d06b      	beq.n	9000ff48 <xQueueSemaphoreTake+0x190>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fe70:	f000 fff8 	bl	90010e64 <xTaskRemoveFromEventList>
9000fe74:	2800      	cmp	r0, #0
9000fe76:	d0f2      	beq.n	9000fe5e <xQueueSemaphoreTake+0xa6>
						vTaskMissedYield();
9000fe78:	f001 f892 	bl	90010fa0 <vTaskMissedYield>
9000fe7c:	e7ef      	b.n	9000fe5e <xQueueSemaphoreTake+0xa6>
9000fe7e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fe82:	f383 8811 	msr	BASEPRI, r3
9000fe86:	f3bf 8f6f 	isb	sy
9000fe8a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
9000fe8e:	e7fe      	b.n	9000fe8e <xQueueSemaphoreTake+0xd6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000fe90:	9b01      	ldr	r3, [sp, #4]
9000fe92:	2b00      	cmp	r3, #0
9000fe94:	f000 80d4 	beq.w	90010040 <xQueueSemaphoreTake+0x288>
9000fe98:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fe9c:	f383 8811 	msr	BASEPRI, r3
9000fea0:	f3bf 8f6f 	isb	sy
9000fea4:	f3bf 8f4f 	dsb	sy
9000fea8:	e7fe      	b.n	9000fea8 <xQueueSemaphoreTake+0xf0>
	taskENTER_CRITICAL();
9000feaa:	f7ff f823 	bl	9000eef4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000feae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000feb2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000feb4:	2d00      	cmp	r5, #0
9000feb6:	dc04      	bgt.n	9000fec2 <xQueueSemaphoreTake+0x10a>
9000feb8:	e011      	b.n	9000fede <xQueueSemaphoreTake+0x126>
			--cTxLock;
9000feba:	1e6b      	subs	r3, r5, #1
9000febc:	b2da      	uxtb	r2, r3
9000febe:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fec0:	b16a      	cbz	r2, 9000fede <xQueueSemaphoreTake+0x126>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fec4:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fec6:	b153      	cbz	r3, 9000fede <xQueueSemaphoreTake+0x126>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fec8:	f000 ffcc 	bl	90010e64 <xTaskRemoveFromEventList>
9000fecc:	2800      	cmp	r0, #0
9000fece:	d0f4      	beq.n	9000feba <xQueueSemaphoreTake+0x102>
						vTaskMissedYield();
9000fed0:	f001 f866 	bl	90010fa0 <vTaskMissedYield>
			--cTxLock;
9000fed4:	1e6b      	subs	r3, r5, #1
9000fed6:	b2da      	uxtb	r2, r3
9000fed8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000feda:	2a00      	cmp	r2, #0
9000fedc:	d1f1      	bne.n	9000fec2 <xQueueSemaphoreTake+0x10a>
		pxQueue->cTxLock = queueUNLOCKED;
9000fede:	23ff      	movs	r3, #255	; 0xff
9000fee0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000fee4:	f7ff f828 	bl	9000ef38 <vPortExitCritical>
	taskENTER_CRITICAL();
9000fee8:	f7ff f804 	bl	9000eef4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000feec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000fef0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fef2:	2d00      	cmp	r5, #0
9000fef4:	dd14      	ble.n	9000ff20 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fef6:	f104 0810 	add.w	r8, r4, #16
9000fefa:	e003      	b.n	9000ff04 <xQueueSemaphoreTake+0x14c>
				--cRxLock;
9000fefc:	1e6b      	subs	r3, r5, #1
9000fefe:	b2da      	uxtb	r2, r3
9000ff00:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ff02:	b16a      	cbz	r2, 9000ff20 <xQueueSemaphoreTake+0x168>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ff04:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ff06:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ff08:	b153      	cbz	r3, 9000ff20 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ff0a:	f000 ffab 	bl	90010e64 <xTaskRemoveFromEventList>
9000ff0e:	2800      	cmp	r0, #0
9000ff10:	d0f4      	beq.n	9000fefc <xQueueSemaphoreTake+0x144>
					vTaskMissedYield();
9000ff12:	f001 f845 	bl	90010fa0 <vTaskMissedYield>
				--cRxLock;
9000ff16:	1e6b      	subs	r3, r5, #1
9000ff18:	b2da      	uxtb	r2, r3
9000ff1a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ff1c:	2a00      	cmp	r2, #0
9000ff1e:	d1f1      	bne.n	9000ff04 <xQueueSemaphoreTake+0x14c>
		pxQueue->cRxLock = queueUNLOCKED;
9000ff20:	23ff      	movs	r3, #255	; 0xff
9000ff22:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000ff26:	f7ff f807 	bl	9000ef38 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000ff2a:	f000 fe77 	bl	90010c1c <xTaskResumeAll>
	taskENTER_CRITICAL();
9000ff2e:	f7fe ffe1 	bl	9000eef4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000ff32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000ff34:	2b00      	cmp	r3, #0
9000ff36:	d07c      	beq.n	90010032 <xQueueSemaphoreTake+0x27a>
	taskEXIT_CRITICAL();
9000ff38:	f7fe fffe 	bl	9000ef38 <vPortExitCritical>
	return xReturn;
9000ff3c:	2501      	movs	r5, #1
9000ff3e:	e755      	b.n	9000fdec <xQueueSemaphoreTake+0x34>
					vTaskInternalSetTimeOutState( &xTimeOut );
9000ff40:	a802      	add	r0, sp, #8
9000ff42:	f000 ffd9 	bl	90010ef8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
9000ff46:	e75e      	b.n	9000fe06 <xQueueSemaphoreTake+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
9000ff48:	23ff      	movs	r3, #255	; 0xff
9000ff4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000ff4e:	f7fe fff3 	bl	9000ef38 <vPortExitCritical>
	taskENTER_CRITICAL();
9000ff52:	f7fe ffcf 	bl	9000eef4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000ff56:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000ff5a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ff5c:	2d00      	cmp	r5, #0
9000ff5e:	dd10      	ble.n	9000ff82 <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ff60:	f104 0810 	add.w	r8, r4, #16
9000ff64:	e003      	b.n	9000ff6e <xQueueSemaphoreTake+0x1b6>
				--cRxLock;
9000ff66:	1e6b      	subs	r3, r5, #1
9000ff68:	b2da      	uxtb	r2, r3
9000ff6a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ff6c:	b14a      	cbz	r2, 9000ff82 <xQueueSemaphoreTake+0x1ca>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ff6e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ff70:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ff72:	b133      	cbz	r3, 9000ff82 <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ff74:	f000 ff76 	bl	90010e64 <xTaskRemoveFromEventList>
9000ff78:	2800      	cmp	r0, #0
9000ff7a:	d0f4      	beq.n	9000ff66 <xQueueSemaphoreTake+0x1ae>
					vTaskMissedYield();
9000ff7c:	f001 f810 	bl	90010fa0 <vTaskMissedYield>
9000ff80:	e7f1      	b.n	9000ff66 <xQueueSemaphoreTake+0x1ae>
		pxQueue->cRxLock = queueUNLOCKED;
9000ff82:	23ff      	movs	r3, #255	; 0xff
9000ff84:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000ff88:	f7fe ffd6 	bl	9000ef38 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000ff8c:	f000 fe46 	bl	90010c1c <xTaskResumeAll>
9000ff90:	e7d4      	b.n	9000ff3c <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
9000ff92:	f7fe ffd1 	bl	9000ef38 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000ff96:	6823      	ldr	r3, [r4, #0]
9000ff98:	2b00      	cmp	r3, #0
9000ff9a:	d062      	beq.n	90010062 <xQueueSemaphoreTake+0x2aa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
9000ff9c:	9901      	ldr	r1, [sp, #4]
9000ff9e:	4630      	mov	r0, r6
9000ffa0:	f000 fed2 	bl	90010d48 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000ffa4:	f7fe ffa6 	bl	9000eef4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000ffa8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000ffac:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ffae:	2d00      	cmp	r5, #0
9000ffb0:	dc04      	bgt.n	9000ffbc <xQueueSemaphoreTake+0x204>
9000ffb2:	e00d      	b.n	9000ffd0 <xQueueSemaphoreTake+0x218>
			--cTxLock;
9000ffb4:	1e6b      	subs	r3, r5, #1
9000ffb6:	b2da      	uxtb	r2, r3
9000ffb8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ffba:	b14a      	cbz	r2, 9000ffd0 <xQueueSemaphoreTake+0x218>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ffbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ffbe:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ffc0:	b133      	cbz	r3, 9000ffd0 <xQueueSemaphoreTake+0x218>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ffc2:	f000 ff4f 	bl	90010e64 <xTaskRemoveFromEventList>
9000ffc6:	2800      	cmp	r0, #0
9000ffc8:	d0f4      	beq.n	9000ffb4 <xQueueSemaphoreTake+0x1fc>
						vTaskMissedYield();
9000ffca:	f000 ffe9 	bl	90010fa0 <vTaskMissedYield>
9000ffce:	e7f1      	b.n	9000ffb4 <xQueueSemaphoreTake+0x1fc>
		pxQueue->cTxLock = queueUNLOCKED;
9000ffd0:	23ff      	movs	r3, #255	; 0xff
9000ffd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000ffd6:	f7fe ffaf 	bl	9000ef38 <vPortExitCritical>
	taskENTER_CRITICAL();
9000ffda:	f7fe ff8b 	bl	9000eef4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000ffde:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000ffe2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ffe4:	2d00      	cmp	r5, #0
9000ffe6:	dd10      	ble.n	9001000a <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ffe8:	f104 0810 	add.w	r8, r4, #16
9000ffec:	e003      	b.n	9000fff6 <xQueueSemaphoreTake+0x23e>
				--cRxLock;
9000ffee:	1e6b      	subs	r3, r5, #1
9000fff0:	b2da      	uxtb	r2, r3
9000fff2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fff4:	b14a      	cbz	r2, 9001000a <xQueueSemaphoreTake+0x252>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fff6:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fff8:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fffa:	b133      	cbz	r3, 9001000a <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fffc:	f000 ff32 	bl	90010e64 <xTaskRemoveFromEventList>
90010000:	2800      	cmp	r0, #0
90010002:	d0f4      	beq.n	9000ffee <xQueueSemaphoreTake+0x236>
					vTaskMissedYield();
90010004:	f000 ffcc 	bl	90010fa0 <vTaskMissedYield>
90010008:	e7f1      	b.n	9000ffee <xQueueSemaphoreTake+0x236>
		pxQueue->cRxLock = queueUNLOCKED;
9001000a:	23ff      	movs	r3, #255	; 0xff
9001000c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
90010010:	f7fe ff92 	bl	9000ef38 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
90010014:	f000 fe02 	bl	90010c1c <xTaskResumeAll>
90010018:	2800      	cmp	r0, #0
9001001a:	d18f      	bne.n	9000ff3c <xQueueSemaphoreTake+0x184>
					portYIELD_WITHIN_API();
9001001c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90010020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90010024:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
90010028:	f3bf 8f4f 	dsb	sy
9001002c:	f3bf 8f6f 	isb	sy
90010030:	e784      	b.n	9000ff3c <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
90010032:	f7fe ff81 	bl	9000ef38 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
90010036:	b92f      	cbnz	r7, 90010044 <xQueueSemaphoreTake+0x28c>
}
90010038:	4638      	mov	r0, r7
9001003a:	b004      	add	sp, #16
9001003c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90010040:	4607      	mov	r7, r0
90010042:	e6d1      	b.n	9000fde8 <xQueueSemaphoreTake+0x30>
						taskENTER_CRITICAL();
90010044:	f7fe ff56 	bl	9000eef4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
90010048:	6a61      	ldr	r1, [r4, #36]	; 0x24
9001004a:	b119      	cbz	r1, 90010054 <xQueueSemaphoreTake+0x29c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
9001004c:	6b23      	ldr	r3, [r4, #48]	; 0x30
9001004e:	6819      	ldr	r1, [r3, #0]
90010050:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
90010054:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
90010056:	2700      	movs	r7, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
90010058:	f001 f84a 	bl	900110f0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
9001005c:	f7fe ff6c 	bl	9000ef38 <vPortExitCritical>
90010060:	e7ea      	b.n	90010038 <xQueueSemaphoreTake+0x280>
						taskENTER_CRITICAL();
90010062:	f7fe ff47 	bl	9000eef4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
90010066:	68a0      	ldr	r0, [r4, #8]
90010068:	f000 ffb6 	bl	90010fd8 <xTaskPriorityInherit>
9001006c:	4607      	mov	r7, r0
						taskEXIT_CRITICAL();
9001006e:	f7fe ff63 	bl	9000ef38 <vPortExitCritical>
90010072:	e793      	b.n	9000ff9c <xQueueSemaphoreTake+0x1e4>
						configASSERT( xInheritanceOccurred == pdFALSE );
90010074:	2f00      	cmp	r7, #0
90010076:	d0f1      	beq.n	9001005c <xQueueSemaphoreTake+0x2a4>
90010078:	f04f 0350 	mov.w	r3, #80	; 0x50
9001007c:	f383 8811 	msr	BASEPRI, r3
90010080:	f3bf 8f6f 	isb	sy
90010084:	f3bf 8f4f 	dsb	sy
90010088:	e7fe      	b.n	90010088 <xQueueSemaphoreTake+0x2d0>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
9001008a:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9001008c:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
9001008e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
90010090:	b12a      	cbz	r2, 9001009e <xQueueSemaphoreTake+0x2e6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90010092:	6923      	ldr	r3, [r4, #16]
90010094:	b93b      	cbnz	r3, 900100a6 <xQueueSemaphoreTake+0x2ee>
				return pdPASS;
90010096:	2701      	movs	r7, #1
				taskEXIT_CRITICAL();
90010098:	f7fe ff4e 	bl	9000ef38 <vPortExitCritical>
				return pdPASS;
9001009c:	e7cc      	b.n	90010038 <xQueueSemaphoreTake+0x280>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
9001009e:	f001 f87b 	bl	90011198 <pvTaskIncrementMutexHeldCount>
900100a2:	60a0      	str	r0, [r4, #8]
900100a4:	e7f5      	b.n	90010092 <xQueueSemaphoreTake+0x2da>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900100a6:	f104 0010 	add.w	r0, r4, #16
900100aa:	f000 fedb 	bl	90010e64 <xTaskRemoveFromEventList>
900100ae:	2800      	cmp	r0, #0
900100b0:	d0f1      	beq.n	90010096 <xQueueSemaphoreTake+0x2de>
						queueYIELD_IF_USING_PREEMPTION();
900100b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
900100b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900100ba:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
900100be:	f3bf 8f4f 	dsb	sy
900100c2:	f3bf 8f6f 	isb	sy
900100c6:	e7e6      	b.n	90010096 <xQueueSemaphoreTake+0x2de>

900100c8 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
900100c8:	b1a8      	cbz	r0, 900100f6 <xQueueTakeMutexRecursive+0x2e>
	{
900100ca:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
900100cc:	6886      	ldr	r6, [r0, #8]
900100ce:	4604      	mov	r4, r0
900100d0:	460d      	mov	r5, r1
900100d2:	f000 ff6b 	bl	90010fac <xTaskGetCurrentTaskHandle>
900100d6:	4286      	cmp	r6, r0
900100d8:	d008      	beq.n	900100ec <xQueueTakeMutexRecursive+0x24>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
900100da:	4629      	mov	r1, r5
900100dc:	4620      	mov	r0, r4
900100de:	f7ff fe6b 	bl	9000fdb8 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
900100e2:	b110      	cbz	r0, 900100ea <xQueueTakeMutexRecursive+0x22>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
900100e4:	68e3      	ldr	r3, [r4, #12]
900100e6:	3301      	adds	r3, #1
900100e8:	60e3      	str	r3, [r4, #12]
	}
900100ea:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
900100ec:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
900100ee:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
900100f0:	4403      	add	r3, r0
900100f2:	60e3      	str	r3, [r4, #12]
	}
900100f4:	bd70      	pop	{r4, r5, r6, pc}
900100f6:	f04f 0350 	mov.w	r3, #80	; 0x50
900100fa:	f383 8811 	msr	BASEPRI, r3
900100fe:	f3bf 8f6f 	isb	sy
90010102:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
90010106:	e7fe      	b.n	90010106 <xQueueTakeMutexRecursive+0x3e>

90010108 <xQueueReceiveFromISR>:
{
90010108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
9001010c:	b310      	cbz	r0, 90010154 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9001010e:	460e      	mov	r6, r1
90010110:	4604      	mov	r4, r0
90010112:	4617      	mov	r7, r2
90010114:	b191      	cbz	r1, 9001013c <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
90010116:	f7ff f81f 	bl	9000f158 <vPortValidateInterruptPriority>
	__asm volatile
9001011a:	f3ef 8911 	mrs	r9, BASEPRI
9001011e:	f04f 0350 	mov.w	r3, #80	; 0x50
90010122:	f383 8811 	msr	BASEPRI, r3
90010126:	f3bf 8f6f 	isb	sy
9001012a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9001012e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
90010130:	b9cd      	cbnz	r5, 90010166 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
90010132:	4628      	mov	r0, r5
	__asm volatile
90010134:	f389 8811 	msr	BASEPRI, r9
}
90010138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9001013c:	6c03      	ldr	r3, [r0, #64]	; 0x40
9001013e:	2b00      	cmp	r3, #0
90010140:	d0e9      	beq.n	90010116 <xQueueReceiveFromISR+0xe>
	__asm volatile
90010142:	f04f 0350 	mov.w	r3, #80	; 0x50
90010146:	f383 8811 	msr	BASEPRI, r3
9001014a:	f3bf 8f6f 	isb	sy
9001014e:	f3bf 8f4f 	dsb	sy
90010152:	e7fe      	b.n	90010152 <xQueueReceiveFromISR+0x4a>
90010154:	f04f 0350 	mov.w	r3, #80	; 0x50
90010158:	f383 8811 	msr	BASEPRI, r3
9001015c:	f3bf 8f6f 	isb	sy
90010160:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
90010164:	e7fe      	b.n	90010164 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
90010166:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9001016a:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
9001016c:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
90010170:	b142      	cbz	r2, 90010184 <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
90010172:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
90010174:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
90010176:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
90010178:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9001017a:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9001017c:	d215      	bcs.n	900101aa <xQueueReceiveFromISR+0xa2>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9001017e:	4630      	mov	r0, r6
90010180:	f017 fb3d 	bl	900277fe <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
90010184:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
90010186:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9001018a:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
9001018c:	d009      	beq.n	900101a2 <xQueueReceiveFromISR+0x9a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
9001018e:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
90010192:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
90010194:	b25b      	sxtb	r3, r3
90010196:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
9001019a:	f389 8811 	msr	BASEPRI, r9
}
9001019e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
900101a2:	6923      	ldr	r3, [r4, #16]
900101a4:	b923      	cbnz	r3, 900101b0 <xQueueReceiveFromISR+0xa8>
			xReturn = pdPASS;
900101a6:	2001      	movs	r0, #1
900101a8:	e7c4      	b.n	90010134 <xQueueReceiveFromISR+0x2c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
900101aa:	6821      	ldr	r1, [r4, #0]
900101ac:	60e1      	str	r1, [r4, #12]
900101ae:	e7e6      	b.n	9001017e <xQueueReceiveFromISR+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900101b0:	f104 0010 	add.w	r0, r4, #16
900101b4:	f000 fe56 	bl	90010e64 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
900101b8:	2f00      	cmp	r7, #0
900101ba:	d0f4      	beq.n	900101a6 <xQueueReceiveFromISR+0x9e>
900101bc:	2800      	cmp	r0, #0
900101be:	d0f2      	beq.n	900101a6 <xQueueReceiveFromISR+0x9e>
							*pxHigherPriorityTaskWoken = pdTRUE;
900101c0:	2301      	movs	r3, #1
			xReturn = pdPASS;
900101c2:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
900101c4:	603b      	str	r3, [r7, #0]
900101c6:	e7b5      	b.n	90010134 <xQueueReceiveFromISR+0x2c>

900101c8 <vQueueDelete>:
	configASSERT( pxQueue );
900101c8:	b1e0      	cbz	r0, 90010204 <vQueueDelete+0x3c>

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
900101ca:	4b21      	ldr	r3, [pc, #132]	; (90010250 <vQueueDelete+0x88>)
900101cc:	685a      	ldr	r2, [r3, #4]
900101ce:	4290      	cmp	r0, r2
900101d0:	d02b      	beq.n	9001022a <vQueueDelete+0x62>
900101d2:	68da      	ldr	r2, [r3, #12]
900101d4:	4290      	cmp	r0, r2
900101d6:	d02a      	beq.n	9001022e <vQueueDelete+0x66>
900101d8:	695a      	ldr	r2, [r3, #20]
900101da:	4290      	cmp	r0, r2
900101dc:	d029      	beq.n	90010232 <vQueueDelete+0x6a>
900101de:	69da      	ldr	r2, [r3, #28]
900101e0:	4290      	cmp	r0, r2
900101e2:	d028      	beq.n	90010236 <vQueueDelete+0x6e>
900101e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
900101e6:	4290      	cmp	r0, r2
900101e8:	d027      	beq.n	9001023a <vQueueDelete+0x72>
900101ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
900101ec:	4290      	cmp	r0, r2
900101ee:	d014      	beq.n	9001021a <vQueueDelete+0x52>
900101f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900101f2:	4290      	cmp	r0, r2
900101f4:	d023      	beq.n	9001023e <vQueueDelete+0x76>
900101f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
900101f8:	4290      	cmp	r0, r2
900101fa:	d022      	beq.n	90010242 <vQueueDelete+0x7a>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
900101fc:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
90010200:	b14b      	cbz	r3, 90010216 <vQueueDelete+0x4e>
}
90010202:	4770      	bx	lr
	__asm volatile
90010204:	f04f 0350 	mov.w	r3, #80	; 0x50
90010208:	f383 8811 	msr	BASEPRI, r3
9001020c:	f3bf 8f6f 	isb	sy
90010210:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
90010214:	e7fe      	b.n	90010214 <vQueueDelete+0x4c>
			vPortFree( pxQueue );
90010216:	f7fe bd53 	b.w	9000ecc0 <vPortFree>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9001021a:	2205      	movs	r2, #5
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
9001021c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
90010220:	ed9f 7b09 	vldr	d7, [pc, #36]	; 90010248 <vQueueDelete+0x80>
90010224:	ed83 7b00 	vstr	d7, [r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
				break;
90010228:	e7e8      	b.n	900101fc <vQueueDelete+0x34>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9001022a:	2200      	movs	r2, #0
9001022c:	e7f6      	b.n	9001021c <vQueueDelete+0x54>
9001022e:	2201      	movs	r2, #1
90010230:	e7f4      	b.n	9001021c <vQueueDelete+0x54>
90010232:	2202      	movs	r2, #2
90010234:	e7f2      	b.n	9001021c <vQueueDelete+0x54>
90010236:	2203      	movs	r2, #3
90010238:	e7f0      	b.n	9001021c <vQueueDelete+0x54>
9001023a:	2204      	movs	r2, #4
9001023c:	e7ee      	b.n	9001021c <vQueueDelete+0x54>
9001023e:	2206      	movs	r2, #6
90010240:	e7ec      	b.n	9001021c <vQueueDelete+0x54>
90010242:	2207      	movs	r2, #7
90010244:	e7ea      	b.n	9001021c <vQueueDelete+0x54>
90010246:	bf00      	nop
	...
90010250:	24026ae0 	.word	0x24026ae0

90010254 <vQueueAddToRegistry>:
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
90010254:	4b12      	ldr	r3, [pc, #72]	; (900102a0 <vQueueAddToRegistry+0x4c>)
90010256:	681a      	ldr	r2, [r3, #0]
90010258:	b17a      	cbz	r2, 9001027a <vQueueAddToRegistry+0x26>
9001025a:	689a      	ldr	r2, [r3, #8]
9001025c:	b162      	cbz	r2, 90010278 <vQueueAddToRegistry+0x24>
9001025e:	691a      	ldr	r2, [r3, #16]
90010260:	b192      	cbz	r2, 90010288 <vQueueAddToRegistry+0x34>
90010262:	699a      	ldr	r2, [r3, #24]
90010264:	b192      	cbz	r2, 9001028c <vQueueAddToRegistry+0x38>
90010266:	6a1a      	ldr	r2, [r3, #32]
90010268:	b192      	cbz	r2, 90010290 <vQueueAddToRegistry+0x3c>
9001026a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
9001026c:	b192      	cbz	r2, 90010294 <vQueueAddToRegistry+0x40>
9001026e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90010270:	b192      	cbz	r2, 90010298 <vQueueAddToRegistry+0x44>
90010272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90010274:	b192      	cbz	r2, 9001029c <vQueueAddToRegistry+0x48>
	}
90010276:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
90010278:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
9001027a:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
9001027e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
90010282:	f8cc 0004 	str.w	r0, [ip, #4]
	}
90010286:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
90010288:	2202      	movs	r2, #2
9001028a:	e7f6      	b.n	9001027a <vQueueAddToRegistry+0x26>
9001028c:	2203      	movs	r2, #3
9001028e:	e7f4      	b.n	9001027a <vQueueAddToRegistry+0x26>
90010290:	2204      	movs	r2, #4
90010292:	e7f2      	b.n	9001027a <vQueueAddToRegistry+0x26>
90010294:	2205      	movs	r2, #5
90010296:	e7f0      	b.n	9001027a <vQueueAddToRegistry+0x26>
90010298:	2206      	movs	r2, #6
9001029a:	e7ee      	b.n	9001027a <vQueueAddToRegistry+0x26>
9001029c:	2207      	movs	r2, #7
9001029e:	e7ec      	b.n	9001027a <vQueueAddToRegistry+0x26>
900102a0:	24026ae0 	.word	0x24026ae0

900102a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
900102a4:	b570      	push	{r4, r5, r6, lr}
900102a6:	4605      	mov	r5, r0
900102a8:	460e      	mov	r6, r1
900102aa:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
900102ac:	f7fe fe22 	bl	9000eef4 <vPortEnterCritical>
900102b0:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
900102b4:	2bff      	cmp	r3, #255	; 0xff
900102b6:	d102      	bne.n	900102be <vQueueWaitForMessageRestricted+0x1a>
900102b8:	2300      	movs	r3, #0
900102ba:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
900102be:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
900102c2:	2bff      	cmp	r3, #255	; 0xff
900102c4:	d102      	bne.n	900102cc <vQueueWaitForMessageRestricted+0x28>
900102c6:	2300      	movs	r3, #0
900102c8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
900102cc:	f7fe fe34 	bl	9000ef38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
900102d0:	6bab      	ldr	r3, [r5, #56]	; 0x38
900102d2:	2b00      	cmp	r3, #0
900102d4:	d043      	beq.n	9001035e <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
900102d6:	f7fe fe0d 	bl	9000eef4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
900102da:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
900102de:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
900102e0:	2c00      	cmp	r4, #0
900102e2:	dd14      	ble.n	9001030e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
900102e4:	f105 0624 	add.w	r6, r5, #36	; 0x24
900102e8:	e003      	b.n	900102f2 <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
900102ea:	1e63      	subs	r3, r4, #1
900102ec:	b2da      	uxtb	r2, r3
900102ee:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
900102f0:	b16a      	cbz	r2, 9001030e <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
900102f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
900102f4:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
900102f6:	b153      	cbz	r3, 9001030e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
900102f8:	f000 fdb4 	bl	90010e64 <xTaskRemoveFromEventList>
900102fc:	2800      	cmp	r0, #0
900102fe:	d0f4      	beq.n	900102ea <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
90010300:	f000 fe4e 	bl	90010fa0 <vTaskMissedYield>
			--cTxLock;
90010304:	1e63      	subs	r3, r4, #1
90010306:	b2da      	uxtb	r2, r3
90010308:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9001030a:	2a00      	cmp	r2, #0
9001030c:	d1f1      	bne.n	900102f2 <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
9001030e:	23ff      	movs	r3, #255	; 0xff
90010310:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
90010314:	f7fe fe10 	bl	9000ef38 <vPortExitCritical>
	taskENTER_CRITICAL();
90010318:	f7fe fdec 	bl	9000eef4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9001031c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
90010320:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90010322:	2c00      	cmp	r4, #0
90010324:	dd14      	ble.n	90010350 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010326:	f105 0610 	add.w	r6, r5, #16
9001032a:	e003      	b.n	90010334 <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
9001032c:	1e63      	subs	r3, r4, #1
9001032e:	b2da      	uxtb	r2, r3
90010330:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90010332:	b16a      	cbz	r2, 90010350 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90010334:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010336:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90010338:	b153      	cbz	r3, 90010350 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9001033a:	f000 fd93 	bl	90010e64 <xTaskRemoveFromEventList>
9001033e:	2800      	cmp	r0, #0
90010340:	d0f4      	beq.n	9001032c <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
90010342:	f000 fe2d 	bl	90010fa0 <vTaskMissedYield>
				--cRxLock;
90010346:	1e63      	subs	r3, r4, #1
90010348:	b2da      	uxtb	r2, r3
9001034a:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9001034c:	2a00      	cmp	r2, #0
9001034e:	d1f1      	bne.n	90010334 <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
90010350:	23ff      	movs	r3, #255	; 0xff
90010352:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
90010356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
9001035a:	f7fe bded 	b.w	9000ef38 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
9001035e:	4622      	mov	r2, r4
90010360:	4631      	mov	r1, r6
90010362:	f105 0024 	add.w	r0, r5, #36	; 0x24
90010366:	f000 fd33 	bl	90010dd0 <vTaskPlaceOnEventListRestricted>
9001036a:	e7b4      	b.n	900102d6 <vQueueWaitForMessageRestricted+0x32>

9001036c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
9001036c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90010370:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
90010372:	f7fe fdbf 	bl	9000eef4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
90010376:	4a34      	ldr	r2, [pc, #208]	; (90010448 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
90010378:	4e34      	ldr	r6, [pc, #208]	; (9001044c <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
9001037a:	6813      	ldr	r3, [r2, #0]
9001037c:	3301      	adds	r3, #1
9001037e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
90010380:	6833      	ldr	r3, [r6, #0]
90010382:	2b00      	cmp	r3, #0
90010384:	d032      	beq.n	900103ec <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
90010386:	4c32      	ldr	r4, [pc, #200]	; (90010450 <prvAddNewTaskToReadyList+0xe4>)
90010388:	6823      	ldr	r3, [r4, #0]
9001038a:	b33b      	cbz	r3, 900103dc <prvAddNewTaskToReadyList+0x70>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9001038c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9001038e:	4f31      	ldr	r7, [pc, #196]	; (90010454 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
90010390:	4a31      	ldr	r2, [pc, #196]	; (90010458 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
90010392:	4932      	ldr	r1, [pc, #200]	; (9001045c <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
90010394:	6813      	ldr	r3, [r2, #0]
90010396:	3301      	adds	r3, #1
90010398:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
9001039a:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
9001039c:	680b      	ldr	r3, [r1, #0]
9001039e:	4283      	cmp	r3, r0
900103a0:	d200      	bcs.n	900103a4 <prvAddNewTaskToReadyList+0x38>
900103a2:	6008      	str	r0, [r1, #0]
900103a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
900103a8:	1d29      	adds	r1, r5, #4
900103aa:	eb07 0080 	add.w	r0, r7, r0, lsl #2
900103ae:	f7fe fcfb 	bl	9000eda8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
900103b2:	f7fe fdc1 	bl	9000ef38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
900103b6:	6823      	ldr	r3, [r4, #0]
900103b8:	b173      	cbz	r3, 900103d8 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
900103ba:	6832      	ldr	r2, [r6, #0]
900103bc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
900103be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
900103c0:	429a      	cmp	r2, r3
900103c2:	d209      	bcs.n	900103d8 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
900103c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
900103c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900103cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
900103d0:	f3bf 8f4f 	dsb	sy
900103d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
900103d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
900103dc:	6833      	ldr	r3, [r6, #0]
900103de:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
900103e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900103e2:	4f1c      	ldr	r7, [pc, #112]	; (90010454 <prvAddNewTaskToReadyList+0xe8>)
900103e4:	4283      	cmp	r3, r0
900103e6:	d8d3      	bhi.n	90010390 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
900103e8:	6035      	str	r5, [r6, #0]
900103ea:	e7d1      	b.n	90010390 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
900103ec:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
900103ee:	6813      	ldr	r3, [r2, #0]
900103f0:	2b01      	cmp	r3, #1
900103f2:	d003      	beq.n	900103fc <prvAddNewTaskToReadyList+0x90>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
900103f4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
900103f6:	4f17      	ldr	r7, [pc, #92]	; (90010454 <prvAddNewTaskToReadyList+0xe8>)
900103f8:	4c15      	ldr	r4, [pc, #84]	; (90010450 <prvAddNewTaskToReadyList+0xe4>)
900103fa:	e7c9      	b.n	90010390 <prvAddNewTaskToReadyList+0x24>
900103fc:	4f15      	ldr	r7, [pc, #84]	; (90010454 <prvAddNewTaskToReadyList+0xe8>)
900103fe:	463c      	mov	r4, r7
90010400:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
90010404:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
90010406:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
90010408:	f7fe fcbe 	bl	9000ed88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
9001040c:	45a0      	cmp	r8, r4
9001040e:	d1f9      	bne.n	90010404 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
90010410:	f8df 9060 	ldr.w	r9, [pc, #96]	; 90010474 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
90010414:	f8df 8060 	ldr.w	r8, [pc, #96]	; 90010478 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
90010418:	4648      	mov	r0, r9
9001041a:	4c0d      	ldr	r4, [pc, #52]	; (90010450 <prvAddNewTaskToReadyList+0xe4>)
9001041c:	f7fe fcb4 	bl	9000ed88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
90010420:	4640      	mov	r0, r8
90010422:	f7fe fcb1 	bl	9000ed88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
90010426:	480e      	ldr	r0, [pc, #56]	; (90010460 <prvAddNewTaskToReadyList+0xf4>)
90010428:	f7fe fcae 	bl	9000ed88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
9001042c:	480d      	ldr	r0, [pc, #52]	; (90010464 <prvAddNewTaskToReadyList+0xf8>)
9001042e:	f7fe fcab 	bl	9000ed88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
90010432:	480d      	ldr	r0, [pc, #52]	; (90010468 <prvAddNewTaskToReadyList+0xfc>)
90010434:	f7fe fca8 	bl	9000ed88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
90010438:	4b0c      	ldr	r3, [pc, #48]	; (9001046c <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
9001043a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
9001043c:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
90010440:	4b0b      	ldr	r3, [pc, #44]	; (90010470 <prvAddNewTaskToReadyList+0x104>)
90010442:	f8c3 8000 	str.w	r8, [r3]
}
90010446:	e7a3      	b.n	90010390 <prvAddNewTaskToReadyList+0x24>
90010448:	24026f8c 	.word	0x24026f8c
9001044c:	24026b20 	.word	0x24026b20
90010450:	24026fe8 	.word	0x24026fe8
90010454:	24026b2c 	.word	0x24026b2c
90010458:	24026f98 	.word	0x24026f98
9001045c:	24026f9c 	.word	0x24026f9c
90010460:	24026fd4 	.word	0x24026fd4
90010464:	24027000 	.word	0x24027000
90010468:	24026fec 	.word	0x24026fec
9001046c:	24026b24 	.word	0x24026b24
90010470:	24026b28 	.word	0x24026b28
90010474:	24026fa0 	.word	0x24026fa0
90010478:	24026fb4 	.word	0x24026fb4

9001047c <prvIdleTask>:
{
9001047c:	b580      	push	{r7, lr}
9001047e:	4c22      	ldr	r4, [pc, #136]	; (90010508 <prvIdleTask+0x8c>)
				taskYIELD();
90010480:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
90010484:	4e21      	ldr	r6, [pc, #132]	; (9001050c <prvIdleTask+0x90>)
90010486:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
9001048a:	4d21      	ldr	r5, [pc, #132]	; (90010510 <prvIdleTask+0x94>)
9001048c:	4f21      	ldr	r7, [pc, #132]	; (90010514 <prvIdleTask+0x98>)
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
9001048e:	6823      	ldr	r3, [r4, #0]
90010490:	b353      	cbz	r3, 900104e8 <prvIdleTask+0x6c>
		{
			taskENTER_CRITICAL();
90010492:	f7fe fd2f 	bl	9000eef4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010496:	68f3      	ldr	r3, [r6, #12]
90010498:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9001049c:	f10a 0004 	add.w	r0, sl, #4
900104a0:	f7fe fcaa 	bl	9000edf8 <uxListRemove>
				--uxCurrentNumberOfTasks;
900104a4:	682b      	ldr	r3, [r5, #0]
900104a6:	3b01      	subs	r3, #1
900104a8:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
900104aa:	6823      	ldr	r3, [r4, #0]
900104ac:	3b01      	subs	r3, #1
900104ae:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
900104b0:	f7fe fd42 	bl	9000ef38 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
900104b4:	f89a 305d 	ldrb.w	r3, [sl, #93]	; 0x5d
900104b8:	b163      	cbz	r3, 900104d4 <prvIdleTask+0x58>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
900104ba:	2b01      	cmp	r3, #1
900104bc:	d020      	beq.n	90010500 <prvIdleTask+0x84>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
900104be:	2b02      	cmp	r3, #2
900104c0:	d0e5      	beq.n	9001048e <prvIdleTask+0x12>
900104c2:	f04f 0350 	mov.w	r3, #80	; 0x50
900104c6:	f383 8811 	msr	BASEPRI, r3
900104ca:	f3bf 8f6f 	isb	sy
900104ce:	f3bf 8f4f 	dsb	sy
900104d2:	e7fe      	b.n	900104d2 <prvIdleTask+0x56>
				vPortFree( pxTCB->pxStack );
900104d4:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
900104d8:	f7fe fbf2 	bl	9000ecc0 <vPortFree>
				vPortFree( pxTCB );
900104dc:	4650      	mov	r0, sl
900104de:	f7fe fbef 	bl	9000ecc0 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
900104e2:	6823      	ldr	r3, [r4, #0]
900104e4:	2b00      	cmp	r3, #0
900104e6:	d1d4      	bne.n	90010492 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
900104e8:	683b      	ldr	r3, [r7, #0]
900104ea:	2b01      	cmp	r3, #1
900104ec:	d905      	bls.n	900104fa <prvIdleTask+0x7e>
				taskYIELD();
900104ee:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
900104f2:	f3bf 8f4f 	dsb	sy
900104f6:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
900104fa:	f7f3 fdc1 	bl	90004080 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
900104fe:	e7c6      	b.n	9001048e <prvIdleTask+0x12>
				vPortFree( pxTCB );
90010500:	4650      	mov	r0, sl
90010502:	f7fe fbdd 	bl	9000ecc0 <vPortFree>
90010506:	e7c2      	b.n	9001048e <prvIdleTask+0x12>
90010508:	24026f90 	.word	0x24026f90
9001050c:	24027000 	.word	0x24027000
90010510:	24026f8c 	.word	0x24026f8c
90010514:	24026b2c 	.word	0x24026b2c

90010518 <xTaskIncrementTick.part.0>:
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
90010518:	4b4a      	ldr	r3, [pc, #296]	; (90010644 <xTaskIncrementTick.part.0+0x12c>)
BaseType_t xTaskIncrementTick( void )
9001051a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9001051e:	681e      	ldr	r6, [r3, #0]
BaseType_t xTaskIncrementTick( void )
90010520:	b083      	sub	sp, #12
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
90010522:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
90010524:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
90010526:	2e00      	cmp	r6, #0
90010528:	d040      	beq.n	900105ac <xTaskIncrementTick.part.0+0x94>
9001052a:	f8df b12c 	ldr.w	fp, [pc, #300]	; 90010658 <xTaskIncrementTick.part.0+0x140>
		if( xConstTickCount >= xNextTaskUnblockTime )
9001052e:	f8db 3000 	ldr.w	r3, [fp]
90010532:	429e      	cmp	r6, r3
90010534:	d347      	bcc.n	900105c6 <xTaskIncrementTick.part.0+0xae>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90010536:	4f44      	ldr	r7, [pc, #272]	; (90010648 <xTaskIncrementTick.part.0+0x130>)
90010538:	683b      	ldr	r3, [r7, #0]
9001053a:	681d      	ldr	r5, [r3, #0]
9001053c:	2d00      	cmp	r5, #0
9001053e:	d077      	beq.n	90010630 <xTaskIncrementTick.part.0+0x118>
BaseType_t xSwitchRequired = pdFALSE;
90010540:	2500      	movs	r5, #0
90010542:	f8df 9118 	ldr.w	r9, [pc, #280]	; 9001065c <xTaskIncrementTick.part.0+0x144>
90010546:	f8df a118 	ldr.w	sl, [pc, #280]	; 90010660 <xTaskIncrementTick.part.0+0x148>
					prvAddTaskToReadyList( pxTCB );
9001054a:	f8df 8118 	ldr.w	r8, [pc, #280]	; 90010664 <xTaskIncrementTick.part.0+0x14c>
9001054e:	e022      	b.n	90010596 <xTaskIncrementTick.part.0+0x7e>
90010550:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90010552:	f7fe fc51 	bl	9000edf8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
90010556:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
90010558:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
9001055c:	9901      	ldr	r1, [sp, #4]
9001055e:	b113      	cbz	r3, 90010566 <xTaskIncrementTick.part.0+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
90010560:	f7fe fc4a 	bl	9000edf8 <uxListRemove>
90010564:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
90010566:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90010568:	f8d8 2000 	ldr.w	r2, [r8]
9001056c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
90010570:	4293      	cmp	r3, r2
90010572:	eb09 0080 	add.w	r0, r9, r0, lsl #2
90010576:	d901      	bls.n	9001057c <xTaskIncrementTick.part.0+0x64>
90010578:	f8c8 3000 	str.w	r3, [r8]
9001057c:	f7fe fc14 	bl	9000eda8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
90010580:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90010584:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
90010586:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
90010588:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9001058a:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
9001058c:	4291      	cmp	r1, r2
9001058e:	bf28      	it	cs
90010590:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90010592:	2b00      	cmp	r3, #0
90010594:	d050      	beq.n	90010638 <xTaskIncrementTick.part.0+0x120>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010596:	683b      	ldr	r3, [r7, #0]
90010598:	68db      	ldr	r3, [r3, #12]
9001059a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
9001059c:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9001059e:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
900105a0:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
900105a2:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
900105a4:	d2d4      	bcs.n	90010550 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
900105a6:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
900105aa:	e011      	b.n	900105d0 <xTaskIncrementTick.part.0+0xb8>
			taskSWITCH_DELAYED_LISTS();
900105ac:	4b26      	ldr	r3, [pc, #152]	; (90010648 <xTaskIncrementTick.part.0+0x130>)
900105ae:	681a      	ldr	r2, [r3, #0]
900105b0:	6812      	ldr	r2, [r2, #0]
900105b2:	b30a      	cbz	r2, 900105f8 <xTaskIncrementTick.part.0+0xe0>
900105b4:	f04f 0350 	mov.w	r3, #80	; 0x50
900105b8:	f383 8811 	msr	BASEPRI, r3
900105bc:	f3bf 8f6f 	isb	sy
900105c0:	f3bf 8f4f 	dsb	sy
900105c4:	e7fe      	b.n	900105c4 <xTaskIncrementTick.part.0+0xac>
BaseType_t xSwitchRequired = pdFALSE;
900105c6:	2500      	movs	r5, #0
900105c8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 9001065c <xTaskIncrementTick.part.0+0x144>
900105cc:	f8df a090 	ldr.w	sl, [pc, #144]	; 90010660 <xTaskIncrementTick.part.0+0x148>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
900105d0:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
900105d4:	491d      	ldr	r1, [pc, #116]	; (9001064c <xTaskIncrementTick.part.0+0x134>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
900105d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900105d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
900105dc:	009b      	lsls	r3, r3, #2
900105de:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
900105e2:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
900105e4:	2a02      	cmp	r2, #2
900105e6:	bf28      	it	cs
900105e8:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
900105ea:	2b00      	cmp	r3, #0
}
900105ec:	bf0c      	ite	eq
900105ee:	4628      	moveq	r0, r5
900105f0:	2001      	movne	r0, #1
900105f2:	b003      	add	sp, #12
900105f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
900105f8:	4a15      	ldr	r2, [pc, #84]	; (90010650 <xTaskIncrementTick.part.0+0x138>)
900105fa:	6818      	ldr	r0, [r3, #0]
900105fc:	6811      	ldr	r1, [r2, #0]
900105fe:	6019      	str	r1, [r3, #0]
90010600:	4914      	ldr	r1, [pc, #80]	; (90010654 <xTaskIncrementTick.part.0+0x13c>)
90010602:	6010      	str	r0, [r2, #0]
90010604:	680a      	ldr	r2, [r1, #0]
90010606:	3201      	adds	r2, #1
90010608:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9001060a:	681a      	ldr	r2, [r3, #0]
9001060c:	6812      	ldr	r2, [r2, #0]
9001060e:	b932      	cbnz	r2, 9001061e <xTaskIncrementTick.part.0+0x106>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
90010610:	f8df b044 	ldr.w	fp, [pc, #68]	; 90010658 <xTaskIncrementTick.part.0+0x140>
90010614:	f04f 33ff 	mov.w	r3, #4294967295
90010618:	f8cb 3000 	str.w	r3, [fp]
9001061c:	e787      	b.n	9001052e <xTaskIncrementTick.part.0+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9001061e:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
90010620:	f8df b034 	ldr.w	fp, [pc, #52]	; 90010658 <xTaskIncrementTick.part.0+0x140>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010624:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
90010626:	68db      	ldr	r3, [r3, #12]
90010628:	685b      	ldr	r3, [r3, #4]
9001062a:	f8cb 3000 	str.w	r3, [fp]
	}
}
9001062e:	e77e      	b.n	9001052e <xTaskIncrementTick.part.0+0x16>
90010630:	f8df 9028 	ldr.w	r9, [pc, #40]	; 9001065c <xTaskIncrementTick.part.0+0x144>
90010634:	f8df a028 	ldr.w	sl, [pc, #40]	; 90010660 <xTaskIncrementTick.part.0+0x148>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90010638:	f04f 33ff 	mov.w	r3, #4294967295
9001063c:	f8cb 3000 	str.w	r3, [fp]
					break;
90010640:	e7c6      	b.n	900105d0 <xTaskIncrementTick.part.0+0xb8>
90010642:	bf00      	nop
90010644:	24027014 	.word	0x24027014
90010648:	24026b24 	.word	0x24026b24
9001064c:	24027018 	.word	0x24027018
90010650:	24026b28 	.word	0x24026b28
90010654:	24026fcc 	.word	0x24026fcc
90010658:	24026fc8 	.word	0x24026fc8
9001065c:	24026b2c 	.word	0x24026b2c
90010660:	24026b20 	.word	0x24026b20
90010664:	24026f9c 	.word	0x24026f9c

90010668 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
90010668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
9001066c:	4d41      	ldr	r5, [pc, #260]	; (90010774 <xTaskResumeAll.part.0+0x10c>)
BaseType_t xTaskResumeAll( void )
9001066e:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
90010670:	f7fe fc40 	bl	9000eef4 <vPortEnterCritical>
		--uxSchedulerSuspended;
90010674:	682b      	ldr	r3, [r5, #0]
90010676:	3b01      	subs	r3, #1
90010678:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9001067a:	682b      	ldr	r3, [r5, #0]
9001067c:	2b00      	cmp	r3, #0
9001067e:	d161      	bne.n	90010744 <xTaskResumeAll.part.0+0xdc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
90010680:	4b3d      	ldr	r3, [pc, #244]	; (90010778 <xTaskResumeAll.part.0+0x110>)
90010682:	681b      	ldr	r3, [r3, #0]
90010684:	2b00      	cmp	r3, #0
90010686:	d05d      	beq.n	90010744 <xTaskResumeAll.part.0+0xdc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
90010688:	4e3c      	ldr	r6, [pc, #240]	; (9001077c <xTaskResumeAll.part.0+0x114>)
9001068a:	6833      	ldr	r3, [r6, #0]
9001068c:	2b00      	cmp	r3, #0
9001068e:	d06e      	beq.n	9001076e <xTaskResumeAll.part.0+0x106>
90010690:	4f3b      	ldr	r7, [pc, #236]	; (90010780 <xTaskResumeAll.part.0+0x118>)
90010692:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 90010790 <xTaskResumeAll.part.0+0x128>
90010696:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 90010794 <xTaskResumeAll.part.0+0x12c>
9001069a:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 90010798 <xTaskResumeAll.part.0+0x130>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9001069e:	68f3      	ldr	r3, [r6, #12]
900106a0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
900106a2:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
900106a6:	f104 0018 	add.w	r0, r4, #24
900106aa:	f7fe fba5 	bl	9000edf8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
900106ae:	4658      	mov	r0, fp
900106b0:	f7fe fba2 	bl	9000edf8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
900106b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
900106b6:	683a      	ldr	r2, [r7, #0]
900106b8:	4659      	mov	r1, fp
900106ba:	eb03 0083 	add.w	r0, r3, r3, lsl #2
900106be:	4293      	cmp	r3, r2
900106c0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
900106c4:	d900      	bls.n	900106c8 <xTaskResumeAll.part.0+0x60>
900106c6:	603b      	str	r3, [r7, #0]
900106c8:	f7fe fb6e 	bl	9000eda8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
900106cc:	f8d8 3000 	ldr.w	r3, [r8]
900106d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
900106d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900106d4:	429a      	cmp	r2, r3
900106d6:	d33d      	bcc.n	90010754 <xTaskResumeAll.part.0+0xec>
						xYieldPending = pdTRUE;
900106d8:	2301      	movs	r3, #1
900106da:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
900106de:	6833      	ldr	r3, [r6, #0]
900106e0:	2b00      	cmp	r3, #0
900106e2:	d1dc      	bne.n	9001069e <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
900106e4:	4b27      	ldr	r3, [pc, #156]	; (90010784 <xTaskResumeAll.part.0+0x11c>)
900106e6:	681a      	ldr	r2, [r3, #0]
900106e8:	6812      	ldr	r2, [r2, #0]
900106ea:	2a00      	cmp	r2, #0
900106ec:	d03a      	beq.n	90010764 <xTaskResumeAll.part.0+0xfc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900106ee:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
900106f0:	4b25      	ldr	r3, [pc, #148]	; (90010788 <xTaskResumeAll.part.0+0x120>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900106f2:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
900106f4:	68d2      	ldr	r2, [r2, #12]
900106f6:	6852      	ldr	r2, [r2, #4]
900106f8:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
900106fa:	4e24      	ldr	r6, [pc, #144]	; (9001078c <xTaskResumeAll.part.0+0x124>)
900106fc:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
900106fe:	b194      	cbz	r4, 90010726 <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
90010700:	2701      	movs	r7, #1
90010702:	e006      	b.n	90010712 <xTaskResumeAll.part.0+0xaa>
90010704:	f7ff ff08 	bl	90010518 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
90010708:	b108      	cbz	r0, 9001070e <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
9001070a:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
9001070e:	3c01      	subs	r4, #1
90010710:	d008      	beq.n	90010724 <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90010712:	682b      	ldr	r3, [r5, #0]
90010714:	2b00      	cmp	r3, #0
90010716:	d0f5      	beq.n	90010704 <xTaskResumeAll.part.0+0x9c>
		++xPendedTicks;
90010718:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
9001071a:	3c01      	subs	r4, #1
		++xPendedTicks;
9001071c:	f103 0301 	add.w	r3, r3, #1
90010720:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
90010722:	d1f6      	bne.n	90010712 <xTaskResumeAll.part.0+0xaa>
						xPendedTicks = 0;
90010724:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
90010726:	f8da 3000 	ldr.w	r3, [sl]
9001072a:	b15b      	cbz	r3, 90010744 <xTaskResumeAll.part.0+0xdc>
					taskYIELD_IF_USING_PREEMPTION();
9001072c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90010730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90010734:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
90010738:	f3bf 8f4f 	dsb	sy
9001073c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
90010740:	2001      	movs	r0, #1
90010742:	e000      	b.n	90010746 <xTaskResumeAll.part.0+0xde>
BaseType_t xAlreadyYielded = pdFALSE;
90010744:	2000      	movs	r0, #0
90010746:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
90010748:	f7fe fbf6 	bl	9000ef38 <vPortExitCritical>
}
9001074c:	9801      	ldr	r0, [sp, #4]
9001074e:	b003      	add	sp, #12
90010750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
90010754:	6833      	ldr	r3, [r6, #0]
90010756:	2b00      	cmp	r3, #0
90010758:	d1a1      	bne.n	9001069e <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9001075a:	4b0a      	ldr	r3, [pc, #40]	; (90010784 <xTaskResumeAll.part.0+0x11c>)
9001075c:	681a      	ldr	r2, [r3, #0]
9001075e:	6812      	ldr	r2, [r2, #0]
90010760:	2a00      	cmp	r2, #0
90010762:	d1c4      	bne.n	900106ee <xTaskResumeAll.part.0+0x86>
		xNextTaskUnblockTime = portMAX_DELAY;
90010764:	4b08      	ldr	r3, [pc, #32]	; (90010788 <xTaskResumeAll.part.0+0x120>)
90010766:	f04f 32ff 	mov.w	r2, #4294967295
9001076a:	601a      	str	r2, [r3, #0]
9001076c:	e7c5      	b.n	900106fa <xTaskResumeAll.part.0+0x92>
9001076e:	f8df a028 	ldr.w	sl, [pc, #40]	; 90010798 <xTaskResumeAll.part.0+0x130>
90010772:	e7c2      	b.n	900106fa <xTaskResumeAll.part.0+0x92>
90010774:	24026f94 	.word	0x24026f94
90010778:	24026f8c 	.word	0x24026f8c
9001077c:	24026fd4 	.word	0x24026fd4
90010780:	24026f9c 	.word	0x24026f9c
90010784:	24026b24 	.word	0x24026b24
90010788:	24026fc8 	.word	0x24026fc8
9001078c:	24026fd0 	.word	0x24026fd0
90010790:	24026b2c 	.word	0x24026b2c
90010794:	24026b20 	.word	0x24026b20
90010798:	24027018 	.word	0x24027018

9001079c <xTaskCreateStatic>:
	{
9001079c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900107a0:	b083      	sub	sp, #12
900107a2:	4698      	mov	r8, r3
		configASSERT( puxStackBuffer != NULL );
900107a4:	e9dd 340b 	ldrd	r3, r4, [sp, #44]	; 0x2c
900107a8:	b1bb      	cbz	r3, 900107da <xTaskCreateStatic+0x3e>
		configASSERT( pxTaskBuffer != NULL );
900107aa:	b16c      	cbz	r4, 900107c8 <xTaskCreateStatic+0x2c>
			volatile size_t xSize = sizeof( StaticTask_t );
900107ac:	2360      	movs	r3, #96	; 0x60
900107ae:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( TCB_t ) );
900107b0:	9b01      	ldr	r3, [sp, #4]
900107b2:	2b60      	cmp	r3, #96	; 0x60
900107b4:	d01a      	beq.n	900107ec <xTaskCreateStatic+0x50>
900107b6:	f04f 0350 	mov.w	r3, #80	; 0x50
900107ba:	f383 8811 	msr	BASEPRI, r3
900107be:	f3bf 8f6f 	isb	sy
900107c2:	f3bf 8f4f 	dsb	sy
900107c6:	e7fe      	b.n	900107c6 <xTaskCreateStatic+0x2a>
900107c8:	f04f 0350 	mov.w	r3, #80	; 0x50
900107cc:	f383 8811 	msr	BASEPRI, r3
900107d0:	f3bf 8f6f 	isb	sy
900107d4:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
900107d8:	e7fe      	b.n	900107d8 <xTaskCreateStatic+0x3c>
900107da:	f04f 0350 	mov.w	r3, #80	; 0x50
900107de:	f383 8811 	msr	BASEPRI, r3
900107e2:	f3bf 8f6f 	isb	sy
900107e6:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
900107ea:	e7fe      	b.n	900107ea <xTaskCreateStatic+0x4e>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
900107ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
900107ee:	0096      	lsls	r6, r2, #2
900107f0:	4607      	mov	r7, r0
900107f2:	460d      	mov	r5, r1
900107f4:	4618      	mov	r0, r3
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
900107f6:	6323      	str	r3, [r4, #48]	; 0x30
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
900107f8:	9b01      	ldr	r3, [sp, #4]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
900107fa:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
900107fc:	4632      	mov	r2, r6
900107fe:	21a5      	movs	r1, #165	; 0xa5
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
90010800:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90010804:	f016 ff1a 	bl	9002763c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90010808:	1f32      	subs	r2, r6, #4
9001080a:	6b23      	ldr	r3, [r4, #48]	; 0x30
9001080c:	4413      	add	r3, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
9001080e:	f023 0907 	bic.w	r9, r3, #7
	if( pcName != NULL )
90010812:	2d00      	cmp	r5, #0
90010814:	d069      	beq.n	900108ea <xTaskCreateStatic+0x14e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010816:	782b      	ldrb	r3, [r5, #0]
90010818:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
9001081c:	2b00      	cmp	r3, #0
9001081e:	d03b      	beq.n	90010898 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010820:	786b      	ldrb	r3, [r5, #1]
90010822:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
90010826:	2b00      	cmp	r3, #0
90010828:	d036      	beq.n	90010898 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001082a:	78ab      	ldrb	r3, [r5, #2]
9001082c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
90010830:	b393      	cbz	r3, 90010898 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010832:	78eb      	ldrb	r3, [r5, #3]
90010834:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
90010838:	b373      	cbz	r3, 90010898 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001083a:	792b      	ldrb	r3, [r5, #4]
9001083c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
90010840:	b353      	cbz	r3, 90010898 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010842:	796b      	ldrb	r3, [r5, #5]
90010844:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
90010848:	b333      	cbz	r3, 90010898 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001084a:	79ab      	ldrb	r3, [r5, #6]
9001084c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
90010850:	b313      	cbz	r3, 90010898 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010852:	79eb      	ldrb	r3, [r5, #7]
90010854:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
90010858:	b1f3      	cbz	r3, 90010898 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001085a:	7a2b      	ldrb	r3, [r5, #8]
9001085c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
90010860:	b1d3      	cbz	r3, 90010898 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010862:	7a6b      	ldrb	r3, [r5, #9]
90010864:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
90010868:	b1b3      	cbz	r3, 90010898 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001086a:	7aab      	ldrb	r3, [r5, #10]
9001086c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
90010870:	b193      	cbz	r3, 90010898 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010872:	7aeb      	ldrb	r3, [r5, #11]
90010874:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
90010878:	b173      	cbz	r3, 90010898 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001087a:	7b2b      	ldrb	r3, [r5, #12]
9001087c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
90010880:	b153      	cbz	r3, 90010898 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010882:	7b6b      	ldrb	r3, [r5, #13]
90010884:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
90010888:	b133      	cbz	r3, 90010898 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001088a:	7bab      	ldrb	r3, [r5, #14]
9001088c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
90010890:	b113      	cbz	r3, 90010898 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010892:	7beb      	ldrb	r3, [r5, #15]
90010894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
90010898:	2300      	movs	r3, #0
9001089a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
9001089e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		pxNewTCB->uxMutexesHeld = 0;
900108a0:	2600      	movs	r6, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
900108a2:	1d20      	adds	r0, r4, #4
900108a4:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
900108a6:	6526      	str	r6, [r4, #80]	; 0x50
900108a8:	bf28      	it	cs
900108aa:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
900108ac:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
900108ae:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900108b0:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
900108b4:	f7fe fa74 	bl	9000eda0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
900108b8:	f104 0018 	add.w	r0, r4, #24
900108bc:	f7fe fa70 	bl	9000eda0 <vListInitialiseItem>
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
900108c0:	4642      	mov	r2, r8
900108c2:	4639      	mov	r1, r7
		pxNewTCB->ulNotifiedValue = 0;
900108c4:	65a6      	str	r6, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
900108c6:	4648      	mov	r0, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900108c8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
900108ca:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
900108cc:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
900108ce:	6566      	str	r6, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
900108d0:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
900108d4:	f7fe fae2 	bl	9000ee9c <pxPortInitialiseStack>
900108d8:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
900108da:	4620      	mov	r0, r4
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
900108dc:	6023      	str	r3, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
900108de:	f7ff fd45 	bl	9001036c <prvAddNewTaskToReadyList>
	}
900108e2:	4620      	mov	r0, r4
900108e4:	b003      	add	sp, #12
900108e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
900108ea:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
900108ee:	e7d6      	b.n	9001089e <xTaskCreateStatic+0x102>

900108f0 <xTaskCreate>:
	{
900108f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
900108f4:	0096      	lsls	r6, r2, #2
	{
900108f6:	4680      	mov	r8, r0
900108f8:	460d      	mov	r5, r1
900108fa:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
900108fc:	4630      	mov	r0, r6
900108fe:	f7fe f921 	bl	9000eb44 <pvPortMalloc>
			if( pxStack != NULL )
90010902:	2800      	cmp	r0, #0
90010904:	f000 8083 	beq.w	90010a0e <xTaskCreate+0x11e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
90010908:	4607      	mov	r7, r0
9001090a:	2060      	movs	r0, #96	; 0x60
9001090c:	f7fe f91a 	bl	9000eb44 <pvPortMalloc>
				if( pxNewTCB != NULL )
90010910:	4604      	mov	r4, r0
90010912:	2800      	cmp	r0, #0
90010914:	d07f      	beq.n	90010a16 <xTaskCreate+0x126>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
90010916:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
90010918:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9001091a:	4632      	mov	r2, r6
9001091c:	4638      	mov	r0, r7
9001091e:	21a5      	movs	r1, #165	; 0xa5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
90010920:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90010924:	f016 fe8a 	bl	9002763c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90010928:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
	if( pcName != NULL )
9001092c:	2d00      	cmp	r5, #0
9001092e:	d078      	beq.n	90010a22 <xTaskCreate+0x132>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010930:	782b      	ldrb	r3, [r5, #0]
90010932:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
90010936:	2b00      	cmp	r3, #0
90010938:	d03b      	beq.n	900109b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001093a:	786b      	ldrb	r3, [r5, #1]
9001093c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
90010940:	2b00      	cmp	r3, #0
90010942:	d036      	beq.n	900109b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010944:	78ab      	ldrb	r3, [r5, #2]
90010946:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
9001094a:	b393      	cbz	r3, 900109b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001094c:	78eb      	ldrb	r3, [r5, #3]
9001094e:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
90010952:	b373      	cbz	r3, 900109b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010954:	792b      	ldrb	r3, [r5, #4]
90010956:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
9001095a:	b353      	cbz	r3, 900109b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001095c:	796b      	ldrb	r3, [r5, #5]
9001095e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
90010962:	b333      	cbz	r3, 900109b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010964:	79ab      	ldrb	r3, [r5, #6]
90010966:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
9001096a:	b313      	cbz	r3, 900109b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001096c:	79eb      	ldrb	r3, [r5, #7]
9001096e:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
90010972:	b1f3      	cbz	r3, 900109b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010974:	7a2b      	ldrb	r3, [r5, #8]
90010976:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
9001097a:	b1d3      	cbz	r3, 900109b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001097c:	7a6b      	ldrb	r3, [r5, #9]
9001097e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
90010982:	b1b3      	cbz	r3, 900109b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010984:	7aab      	ldrb	r3, [r5, #10]
90010986:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
9001098a:	b193      	cbz	r3, 900109b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001098c:	7aeb      	ldrb	r3, [r5, #11]
9001098e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
90010992:	b173      	cbz	r3, 900109b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010994:	7b2b      	ldrb	r3, [r5, #12]
90010996:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
9001099a:	b153      	cbz	r3, 900109b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001099c:	7b6b      	ldrb	r3, [r5, #13]
9001099e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
900109a2:	b133      	cbz	r3, 900109b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900109a4:	7bab      	ldrb	r3, [r5, #14]
900109a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
900109aa:	b113      	cbz	r3, 900109b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900109ac:	7beb      	ldrb	r3, [r5, #15]
900109ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
900109b2:	2300      	movs	r3, #0
900109b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
900109b8:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
900109ba:	2700      	movs	r7, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
900109bc:	1d20      	adds	r0, r4, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
900109be:	3e04      	subs	r6, #4
900109c0:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
900109c2:	6527      	str	r7, [r4, #80]	; 0x50
900109c4:	bf28      	it	cs
900109c6:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
900109c8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
900109ca:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900109cc:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
900109d0:	f7fe f9e6 	bl	9000eda0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
900109d4:	f104 0018 	add.w	r0, r4, #24
900109d8:	f7fe f9e2 	bl	9000eda0 <vListInitialiseItem>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
900109dc:	eb0a 0006 	add.w	r0, sl, r6
		pxNewTCB->ulNotifiedValue = 0;
900109e0:	65a7      	str	r7, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
900109e2:	464a      	mov	r2, r9
900109e4:	4641      	mov	r1, r8
900109e6:	f020 0007 	bic.w	r0, r0, #7
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900109ea:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
900109ec:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
900109ee:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
900109f0:	6567      	str	r7, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
900109f2:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
900109f6:	f7fe fa51 	bl	9000ee9c <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
900109fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
900109fc:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
900109fe:	b103      	cbz	r3, 90010a02 <xTaskCreate+0x112>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
90010a00:	601c      	str	r4, [r3, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
90010a02:	4620      	mov	r0, r4
90010a04:	f7ff fcb2 	bl	9001036c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
90010a08:	2001      	movs	r0, #1
	}
90010a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
90010a0e:	f04f 30ff 	mov.w	r0, #4294967295
	}
90010a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					vPortFree( pxStack );
90010a16:	4638      	mov	r0, r7
90010a18:	f7fe f952 	bl	9000ecc0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
90010a1c:	f04f 30ff 	mov.w	r0, #4294967295
90010a20:	e7f3      	b.n	90010a0a <xTaskCreate+0x11a>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
90010a22:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
90010a26:	e7c7      	b.n	900109b8 <xTaskCreate+0xc8>

90010a28 <vTaskDelay>:
	{
90010a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
90010a2a:	b950      	cbnz	r0, 90010a42 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
90010a2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90010a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90010a34:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
90010a38:	f3bf 8f4f 	dsb	sy
90010a3c:	f3bf 8f6f 	isb	sy
	}
90010a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
90010a42:	4d1e      	ldr	r5, [pc, #120]	; (90010abc <vTaskDelay+0x94>)
90010a44:	682b      	ldr	r3, [r5, #0]
90010a46:	b143      	cbz	r3, 90010a5a <vTaskDelay+0x32>
90010a48:	f04f 0350 	mov.w	r3, #80	; 0x50
90010a4c:	f383 8811 	msr	BASEPRI, r3
90010a50:	f3bf 8f6f 	isb	sy
90010a54:	f3bf 8f4f 	dsb	sy
90010a58:	e7fe      	b.n	90010a58 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
90010a5a:	682b      	ldr	r3, [r5, #0]
90010a5c:	4604      	mov	r4, r0
90010a5e:	3301      	adds	r3, #1
90010a60:	602b      	str	r3, [r5, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
90010a62:	4b17      	ldr	r3, [pc, #92]	; (90010ac0 <vTaskDelay+0x98>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90010a64:	4e17      	ldr	r6, [pc, #92]	; (90010ac4 <vTaskDelay+0x9c>)
const TickType_t xConstTickCount = xTickCount;
90010a66:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90010a68:	6830      	ldr	r0, [r6, #0]
90010a6a:	3004      	adds	r0, #4
90010a6c:	f7fe f9c4 	bl	9000edf8 <uxListRemove>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
90010a70:	19e4      	adds	r4, r4, r7

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
90010a72:	6833      	ldr	r3, [r6, #0]
90010a74:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
90010a76:	d315      	bcc.n	90010aa4 <vTaskDelay+0x7c>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010a78:	4b13      	ldr	r3, [pc, #76]	; (90010ac8 <vTaskDelay+0xa0>)
90010a7a:	6818      	ldr	r0, [r3, #0]
90010a7c:	6831      	ldr	r1, [r6, #0]
90010a7e:	3104      	adds	r1, #4
90010a80:	f7fe f9a2 	bl	9000edc8 <vListInsert>
	configASSERT( uxSchedulerSuspended );
90010a84:	682b      	ldr	r3, [r5, #0]
90010a86:	b943      	cbnz	r3, 90010a9a <vTaskDelay+0x72>
90010a88:	f04f 0350 	mov.w	r3, #80	; 0x50
90010a8c:	f383 8811 	msr	BASEPRI, r3
90010a90:	f3bf 8f6f 	isb	sy
90010a94:	f3bf 8f4f 	dsb	sy
90010a98:	e7fe      	b.n	90010a98 <vTaskDelay+0x70>
90010a9a:	f7ff fde5 	bl	90010668 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
90010a9e:	2800      	cmp	r0, #0
90010aa0:	d0c4      	beq.n	90010a2c <vTaskDelay+0x4>
	}
90010aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010aa4:	4b09      	ldr	r3, [pc, #36]	; (90010acc <vTaskDelay+0xa4>)
90010aa6:	6818      	ldr	r0, [r3, #0]
90010aa8:	6831      	ldr	r1, [r6, #0]
90010aaa:	3104      	adds	r1, #4
90010aac:	f7fe f98c 	bl	9000edc8 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
90010ab0:	4b07      	ldr	r3, [pc, #28]	; (90010ad0 <vTaskDelay+0xa8>)
90010ab2:	681a      	ldr	r2, [r3, #0]
90010ab4:	4294      	cmp	r4, r2
90010ab6:	d2e5      	bcs.n	90010a84 <vTaskDelay+0x5c>
				{
					xNextTaskUnblockTime = xTimeToWake;
90010ab8:	601c      	str	r4, [r3, #0]
90010aba:	e7e3      	b.n	90010a84 <vTaskDelay+0x5c>
90010abc:	24026f94 	.word	0x24026f94
90010ac0:	24027014 	.word	0x24027014
90010ac4:	24026b20 	.word	0x24026b20
90010ac8:	24026b28 	.word	0x24026b28
90010acc:	24026b24 	.word	0x24026b24
90010ad0:	24026fc8 	.word	0x24026fc8

90010ad4 <vTaskStartScheduler>:
{
90010ad4:	b570      	push	{r4, r5, r6, lr}
90010ad6:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
90010ad8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
90010ada:	4668      	mov	r0, sp
90010adc:	aa02      	add	r2, sp, #8
90010ade:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
90010ae0:	e9cd 4400 	strd	r4, r4, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
90010ae4:	f7fe f810 	bl	9000eb08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
90010ae8:	9d00      	ldr	r5, [sp, #0]
90010aea:	e9dd 0601 	ldrd	r0, r6, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
90010aee:	b1b8      	cbz	r0, 90010b20 <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
90010af0:	b16d      	cbz	r5, 90010b0e <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
90010af2:	2260      	movs	r2, #96	; 0x60
90010af4:	9203      	str	r2, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
90010af6:	9a03      	ldr	r2, [sp, #12]
90010af8:	2a60      	cmp	r2, #96	; 0x60
90010afa:	d01a      	beq.n	90010b32 <vTaskStartScheduler+0x5e>
90010afc:	f04f 0350 	mov.w	r3, #80	; 0x50
90010b00:	f383 8811 	msr	BASEPRI, r3
90010b04:	f3bf 8f6f 	isb	sy
90010b08:	f3bf 8f4f 	dsb	sy
90010b0c:	e7fe      	b.n	90010b0c <vTaskStartScheduler+0x38>
90010b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
90010b12:	f383 8811 	msr	BASEPRI, r3
90010b16:	f3bf 8f6f 	isb	sy
90010b1a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
90010b1e:	e7fe      	b.n	90010b1e <vTaskStartScheduler+0x4a>
90010b20:	f04f 0350 	mov.w	r3, #80	; 0x50
90010b24:	f383 8811 	msr	BASEPRI, r3
90010b28:	f3bf 8f6f 	isb	sy
90010b2c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
90010b30:	e7fe      	b.n	90010b30 <vTaskStartScheduler+0x5c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90010b32:	00b6      	lsls	r6, r6, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
90010b34:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90010b36:	21a5      	movs	r1, #165	; 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
90010b38:	6328      	str	r0, [r5, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90010b3a:	4632      	mov	r2, r6
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
90010b3c:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
90010b40:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90010b42:	f016 fd7b 	bl	9002763c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90010b46:	1f33      	subs	r3, r6, #4
90010b48:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010b4a:	492a      	ldr	r1, [pc, #168]	; (90010bf4 <vTaskStartScheduler+0x120>)
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
90010b4c:	1d28      	adds	r0, r5, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90010b4e:	441a      	add	r2, r3
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010b50:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
90010b54:	6369      	str	r1, [r5, #52]	; 0x34
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
90010b56:	f885 4043 	strb.w	r4, [r5, #67]	; 0x43
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
90010b5a:	f022 0607 	bic.w	r6, r2, #7
	pxNewTCB->uxPriority = uxPriority;
90010b5e:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
90010b60:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
90010b64:	f7fe f91c 	bl	9000eda0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
90010b68:	f105 0018 	add.w	r0, r5, #24
90010b6c:	f7fe f918 	bl	9000eda0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90010b70:	2338      	movs	r3, #56	; 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010b72:	4622      	mov	r2, r4
90010b74:	4920      	ldr	r1, [pc, #128]	; (90010bf8 <vTaskStartScheduler+0x124>)
		pxNewTCB->ulNotifiedValue = 0;
90010b76:	65ac      	str	r4, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010b78:	4630      	mov	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90010b7a:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
90010b7c:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
90010b7e:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
90010b80:	656c      	str	r4, [r5, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
90010b82:	f885 405c 	strb.w	r4, [r5, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010b86:	f7fe f989 	bl	9000ee9c <pxPortInitialiseStack>
90010b8a:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
90010b8c:	4628      	mov	r0, r5
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010b8e:	602b      	str	r3, [r5, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
90010b90:	f7ff fbec 	bl	9001036c <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
90010b94:	f000 fca4 	bl	900114e0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
90010b98:	2801      	cmp	r0, #1
90010b9a:	d00c      	beq.n	90010bb6 <vTaskStartScheduler+0xe2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
90010b9c:	3001      	adds	r0, #1
90010b9e:	d001      	beq.n	90010ba4 <vTaskStartScheduler+0xd0>
}
90010ba0:	b004      	add	sp, #16
90010ba2:	bd70      	pop	{r4, r5, r6, pc}
90010ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
90010ba8:	f383 8811 	msr	BASEPRI, r3
90010bac:	f3bf 8f6f 	isb	sy
90010bb0:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
90010bb4:	e7fe      	b.n	90010bb4 <vTaskStartScheduler+0xe0>
90010bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
90010bba:	f383 8811 	msr	BASEPRI, r3
90010bbe:	f3bf 8f6f 	isb	sy
90010bc2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
90010bc6:	4b0d      	ldr	r3, [pc, #52]	; (90010bfc <vTaskStartScheduler+0x128>)
90010bc8:	f04f 32ff 	mov.w	r2, #4294967295
		xSchedulerRunning = pdTRUE;
90010bcc:	490c      	ldr	r1, [pc, #48]	; (90010c00 <vTaskStartScheduler+0x12c>)
		xNextTaskUnblockTime = portMAX_DELAY;
90010bce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
90010bd0:	4b0c      	ldr	r3, [pc, #48]	; (90010c04 <vTaskStartScheduler+0x130>)
		traceTASK_SWITCHED_IN();
90010bd2:	4a0d      	ldr	r2, [pc, #52]	; (90010c08 <vTaskStartScheduler+0x134>)
		xSchedulerRunning = pdTRUE;
90010bd4:	6008      	str	r0, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
90010bd6:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
90010bd8:	6813      	ldr	r3, [r2, #0]
		if( xTask == NULL )
90010bda:	b143      	cbz	r3, 90010bee <vTaskStartScheduler+0x11a>
		if( xTCB->pxTaskTag != NULL )
90010bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90010bde:	b10b      	cbz	r3, 90010be4 <vTaskStartScheduler+0x110>
			xReturn = xTCB->pxTaskTag( pvParameter );
90010be0:	2000      	movs	r0, #0
90010be2:	4798      	blx	r3
}
90010be4:	b004      	add	sp, #16
90010be6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
90010bea:	f7fe ba15 	b.w	9000f018 <xPortStartScheduler>
			xTCB = pxCurrentTCB;
90010bee:	6813      	ldr	r3, [r2, #0]
90010bf0:	e7f4      	b.n	90010bdc <vTaskStartScheduler+0x108>
90010bf2:	bf00      	nop
90010bf4:	454c4449 	.word	0x454c4449
90010bf8:	9001047d 	.word	0x9001047d
90010bfc:	24026fc8 	.word	0x24026fc8
90010c00:	24026fe8 	.word	0x24026fe8
90010c04:	24027014 	.word	0x24027014
90010c08:	24026b20 	.word	0x24026b20

90010c0c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
90010c0c:	4a02      	ldr	r2, [pc, #8]	; (90010c18 <vTaskSuspendAll+0xc>)
90010c0e:	6813      	ldr	r3, [r2, #0]
90010c10:	3301      	adds	r3, #1
90010c12:	6013      	str	r3, [r2, #0]
}
90010c14:	4770      	bx	lr
90010c16:	bf00      	nop
90010c18:	24026f94 	.word	0x24026f94

90010c1c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
90010c1c:	4b06      	ldr	r3, [pc, #24]	; (90010c38 <xTaskResumeAll+0x1c>)
90010c1e:	681b      	ldr	r3, [r3, #0]
90010c20:	b943      	cbnz	r3, 90010c34 <xTaskResumeAll+0x18>
90010c22:	f04f 0350 	mov.w	r3, #80	; 0x50
90010c26:	f383 8811 	msr	BASEPRI, r3
90010c2a:	f3bf 8f6f 	isb	sy
90010c2e:	f3bf 8f4f 	dsb	sy
90010c32:	e7fe      	b.n	90010c32 <xTaskResumeAll+0x16>
90010c34:	f7ff bd18 	b.w	90010668 <xTaskResumeAll.part.0>
90010c38:	24026f94 	.word	0x24026f94

90010c3c <xTaskGetTickCount>:
		xTicks = xTickCount;
90010c3c:	4b01      	ldr	r3, [pc, #4]	; (90010c44 <xTaskGetTickCount+0x8>)
90010c3e:	6818      	ldr	r0, [r3, #0]
}
90010c40:	4770      	bx	lr
90010c42:	bf00      	nop
90010c44:	24027014 	.word	0x24027014

90010c48 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90010c48:	4b05      	ldr	r3, [pc, #20]	; (90010c60 <xTaskIncrementTick+0x18>)
90010c4a:	681b      	ldr	r3, [r3, #0]
90010c4c:	b90b      	cbnz	r3, 90010c52 <xTaskIncrementTick+0xa>
90010c4e:	f7ff bc63 	b.w	90010518 <xTaskIncrementTick.part.0>
		++xPendedTicks;
90010c52:	4a04      	ldr	r2, [pc, #16]	; (90010c64 <xTaskIncrementTick+0x1c>)
}
90010c54:	2000      	movs	r0, #0
		++xPendedTicks;
90010c56:	6813      	ldr	r3, [r2, #0]
90010c58:	3301      	adds	r3, #1
90010c5a:	6013      	str	r3, [r2, #0]
}
90010c5c:	4770      	bx	lr
90010c5e:	bf00      	nop
90010c60:	24026f94 	.word	0x24026f94
90010c64:	24026fd0 	.word	0x24026fd0

90010c68 <vTaskSetApplicationTaskTag>:
	{
90010c68:	b538      	push	{r3, r4, r5, lr}
90010c6a:	460d      	mov	r5, r1
		if( xTask == NULL )
90010c6c:	b138      	cbz	r0, 90010c7e <vTaskSetApplicationTaskTag+0x16>
90010c6e:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
90010c70:	f7fe f940 	bl	9000eef4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
90010c74:	6565      	str	r5, [r4, #84]	; 0x54
	}
90010c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
90010c7a:	f7fe b95d 	b.w	9000ef38 <vPortExitCritical>
			xTCB = ( TCB_t * ) pxCurrentTCB;
90010c7e:	4b04      	ldr	r3, [pc, #16]	; (90010c90 <vTaskSetApplicationTaskTag+0x28>)
90010c80:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
90010c82:	f7fe f937 	bl	9000eef4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
90010c86:	6565      	str	r5, [r4, #84]	; 0x54
	}
90010c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
90010c8c:	f7fe b954 	b.w	9000ef38 <vPortExitCritical>
90010c90:	24026b20 	.word	0x24026b20

90010c94 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
90010c94:	4b27      	ldr	r3, [pc, #156]	; (90010d34 <vTaskSwitchContext+0xa0>)
90010c96:	681b      	ldr	r3, [r3, #0]
90010c98:	b11b      	cbz	r3, 90010ca2 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
90010c9a:	4b27      	ldr	r3, [pc, #156]	; (90010d38 <vTaskSwitchContext+0xa4>)
90010c9c:	2201      	movs	r2, #1
90010c9e:	601a      	str	r2, [r3, #0]
90010ca0:	4770      	bx	lr
{
90010ca2:	b570      	push	{r4, r5, r6, lr}
		xYieldPending = pdFALSE;
90010ca4:	4a24      	ldr	r2, [pc, #144]	; (90010d38 <vTaskSwitchContext+0xa4>)
		traceTASK_SWITCHED_OUT();
90010ca6:	4c25      	ldr	r4, [pc, #148]	; (90010d3c <vTaskSwitchContext+0xa8>)
		xYieldPending = pdFALSE;
90010ca8:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_OUT();
90010caa:	6823      	ldr	r3, [r4, #0]
		if( xTask == NULL )
90010cac:	2b00      	cmp	r3, #0
90010cae:	d036      	beq.n	90010d1e <vTaskSwitchContext+0x8a>
		if( xTCB->pxTaskTag != NULL )
90010cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90010cb2:	b10b      	cbz	r3, 90010cb8 <vTaskSwitchContext+0x24>
			xReturn = xTCB->pxTaskTag( pvParameter );
90010cb4:	2001      	movs	r0, #1
90010cb6:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010cb8:	4d21      	ldr	r5, [pc, #132]	; (90010d40 <vTaskSwitchContext+0xac>)
90010cba:	4922      	ldr	r1, [pc, #136]	; (90010d44 <vTaskSwitchContext+0xb0>)
90010cbc:	682b      	ldr	r3, [r5, #0]
90010cbe:	eb03 0283 	add.w	r2, r3, r3, lsl #2
90010cc2:	0098      	lsls	r0, r3, #2
90010cc4:	0092      	lsls	r2, r2, #2
90010cc6:	588a      	ldr	r2, [r1, r2]
90010cc8:	b942      	cbnz	r2, 90010cdc <vTaskSwitchContext+0x48>
90010cca:	b1fb      	cbz	r3, 90010d0c <vTaskSwitchContext+0x78>
90010ccc:	3b01      	subs	r3, #1
90010cce:	eb03 0283 	add.w	r2, r3, r3, lsl #2
90010cd2:	0098      	lsls	r0, r3, #2
90010cd4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
90010cd8:	2a00      	cmp	r2, #0
90010cda:	d0f6      	beq.n	90010cca <vTaskSwitchContext+0x36>
90010cdc:	4418      	add	r0, r3
90010cde:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
90010ce2:	f8dc 1004 	ldr.w	r1, [ip, #4]
90010ce6:	4662      	mov	r2, ip
90010ce8:	6849      	ldr	r1, [r1, #4]
90010cea:	3208      	adds	r2, #8
90010cec:	4291      	cmp	r1, r2
90010cee:	f8cc 1004 	str.w	r1, [ip, #4]
90010cf2:	d01b      	beq.n	90010d2c <vTaskSwitchContext+0x98>
90010cf4:	68ca      	ldr	r2, [r1, #12]
90010cf6:	6022      	str	r2, [r4, #0]
90010cf8:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
90010cfa:	6823      	ldr	r3, [r4, #0]
		if( xTask == NULL )
90010cfc:	b1a3      	cbz	r3, 90010d28 <vTaskSwitchContext+0x94>
		if( xTCB->pxTaskTag != NULL )
90010cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90010d00:	b11b      	cbz	r3, 90010d0a <vTaskSwitchContext+0x76>
			xReturn = xTCB->pxTaskTag( pvParameter );
90010d02:	2000      	movs	r0, #0
}
90010d04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			xReturn = xTCB->pxTaskTag( pvParameter );
90010d08:	4718      	bx	r3
}
90010d0a:	bd70      	pop	{r4, r5, r6, pc}
90010d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
90010d10:	f383 8811 	msr	BASEPRI, r3
90010d14:	f3bf 8f6f 	isb	sy
90010d18:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010d1c:	e7fe      	b.n	90010d1c <vTaskSwitchContext+0x88>
			xTCB = pxCurrentTCB;
90010d1e:	6823      	ldr	r3, [r4, #0]
		if( xTCB->pxTaskTag != NULL )
90010d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90010d22:	2b00      	cmp	r3, #0
90010d24:	d1c6      	bne.n	90010cb4 <vTaskSwitchContext+0x20>
90010d26:	e7c7      	b.n	90010cb8 <vTaskSwitchContext+0x24>
			xTCB = pxCurrentTCB;
90010d28:	6823      	ldr	r3, [r4, #0]
90010d2a:	e7e8      	b.n	90010cfe <vTaskSwitchContext+0x6a>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010d2c:	6849      	ldr	r1, [r1, #4]
90010d2e:	f8cc 1004 	str.w	r1, [ip, #4]
90010d32:	e7df      	b.n	90010cf4 <vTaskSwitchContext+0x60>
90010d34:	24026f94 	.word	0x24026f94
90010d38:	24027018 	.word	0x24027018
90010d3c:	24026b20 	.word	0x24026b20
90010d40:	24026f9c 	.word	0x24026f9c
90010d44:	24026b2c 	.word	0x24026b2c

90010d48 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
90010d48:	b1f0      	cbz	r0, 90010d88 <vTaskPlaceOnEventList+0x40>
{
90010d4a:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
90010d4c:	4d1a      	ldr	r5, [pc, #104]	; (90010db8 <vTaskPlaceOnEventList+0x70>)
90010d4e:	460c      	mov	r4, r1
90010d50:	6829      	ldr	r1, [r5, #0]
90010d52:	3118      	adds	r1, #24
90010d54:	f7fe f838 	bl	9000edc8 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
90010d58:	4b18      	ldr	r3, [pc, #96]	; (90010dbc <vTaskPlaceOnEventList+0x74>)
90010d5a:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90010d5c:	6828      	ldr	r0, [r5, #0]
90010d5e:	3004      	adds	r0, #4
90010d60:	f7fe f84a 	bl	9000edf8 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
90010d64:	1c63      	adds	r3, r4, #1
90010d66:	d020      	beq.n	90010daa <vTaskPlaceOnEventList+0x62>
			xTimeToWake = xConstTickCount + xTicksToWait;
90010d68:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
90010d6a:	682b      	ldr	r3, [r5, #0]
90010d6c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
90010d6e:	d214      	bcs.n	90010d9a <vTaskPlaceOnEventList+0x52>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010d70:	4b13      	ldr	r3, [pc, #76]	; (90010dc0 <vTaskPlaceOnEventList+0x78>)
90010d72:	6818      	ldr	r0, [r3, #0]
90010d74:	6829      	ldr	r1, [r5, #0]
90010d76:	3104      	adds	r1, #4
90010d78:	f7fe f826 	bl	9000edc8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
90010d7c:	4b11      	ldr	r3, [pc, #68]	; (90010dc4 <vTaskPlaceOnEventList+0x7c>)
90010d7e:	681a      	ldr	r2, [r3, #0]
90010d80:	4294      	cmp	r4, r2
90010d82:	d200      	bcs.n	90010d86 <vTaskPlaceOnEventList+0x3e>
					xNextTaskUnblockTime = xTimeToWake;
90010d84:	601c      	str	r4, [r3, #0]
}
90010d86:	bd70      	pop	{r4, r5, r6, pc}
90010d88:	f04f 0350 	mov.w	r3, #80	; 0x50
90010d8c:	f383 8811 	msr	BASEPRI, r3
90010d90:	f3bf 8f6f 	isb	sy
90010d94:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
90010d98:	e7fe      	b.n	90010d98 <vTaskPlaceOnEventList+0x50>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010d9a:	4b0b      	ldr	r3, [pc, #44]	; (90010dc8 <vTaskPlaceOnEventList+0x80>)
90010d9c:	6818      	ldr	r0, [r3, #0]
90010d9e:	6829      	ldr	r1, [r5, #0]
}
90010da0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010da4:	3104      	adds	r1, #4
90010da6:	f7fe b80f 	b.w	9000edc8 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010daa:	6829      	ldr	r1, [r5, #0]
90010dac:	4807      	ldr	r0, [pc, #28]	; (90010dcc <vTaskPlaceOnEventList+0x84>)
90010dae:	3104      	adds	r1, #4
}
90010db0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010db4:	f7fd bff8 	b.w	9000eda8 <vListInsertEnd>
90010db8:	24026b20 	.word	0x24026b20
90010dbc:	24027014 	.word	0x24027014
90010dc0:	24026b24 	.word	0x24026b24
90010dc4:	24026fc8 	.word	0x24026fc8
90010dc8:	24026b28 	.word	0x24026b28
90010dcc:	24026fec 	.word	0x24026fec

90010dd0 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
90010dd0:	b358      	cbz	r0, 90010e2a <vTaskPlaceOnEventListRestricted+0x5a>
	{
90010dd2:	b570      	push	{r4, r5, r6, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
90010dd4:	4e1d      	ldr	r6, [pc, #116]	; (90010e4c <vTaskPlaceOnEventListRestricted+0x7c>)
90010dd6:	460c      	mov	r4, r1
90010dd8:	4615      	mov	r5, r2
90010dda:	6831      	ldr	r1, [r6, #0]
90010ddc:	3118      	adds	r1, #24
90010dde:	f7fd ffe3 	bl	9000eda8 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
90010de2:	b165      	cbz	r5, 90010dfe <vTaskPlaceOnEventListRestricted+0x2e>
const TickType_t xConstTickCount = xTickCount;
90010de4:	4b1a      	ldr	r3, [pc, #104]	; (90010e50 <vTaskPlaceOnEventListRestricted+0x80>)
90010de6:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90010de8:	6830      	ldr	r0, [r6, #0]
90010dea:	3004      	adds	r0, #4
90010dec:	f7fe f804 	bl	9000edf8 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010df0:	6831      	ldr	r1, [r6, #0]
90010df2:	4818      	ldr	r0, [pc, #96]	; (90010e54 <vTaskPlaceOnEventListRestricted+0x84>)
90010df4:	3104      	adds	r1, #4
	}
90010df6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010dfa:	f7fd bfd5 	b.w	9000eda8 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
90010dfe:	4b14      	ldr	r3, [pc, #80]	; (90010e50 <vTaskPlaceOnEventListRestricted+0x80>)
90010e00:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90010e02:	6830      	ldr	r0, [r6, #0]
90010e04:	3004      	adds	r0, #4
90010e06:	f7fd fff7 	bl	9000edf8 <uxListRemove>
			xTimeToWake = xConstTickCount + xTicksToWait;
90010e0a:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
90010e0c:	6833      	ldr	r3, [r6, #0]
90010e0e:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
90010e10:	d214      	bcs.n	90010e3c <vTaskPlaceOnEventListRestricted+0x6c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010e12:	4b11      	ldr	r3, [pc, #68]	; (90010e58 <vTaskPlaceOnEventListRestricted+0x88>)
90010e14:	6818      	ldr	r0, [r3, #0]
90010e16:	6831      	ldr	r1, [r6, #0]
90010e18:	3104      	adds	r1, #4
90010e1a:	f7fd ffd5 	bl	9000edc8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
90010e1e:	4b0f      	ldr	r3, [pc, #60]	; (90010e5c <vTaskPlaceOnEventListRestricted+0x8c>)
90010e20:	681a      	ldr	r2, [r3, #0]
90010e22:	4294      	cmp	r4, r2
90010e24:	d200      	bcs.n	90010e28 <vTaskPlaceOnEventListRestricted+0x58>
					xNextTaskUnblockTime = xTimeToWake;
90010e26:	601c      	str	r4, [r3, #0]
	}
90010e28:	bd70      	pop	{r4, r5, r6, pc}
90010e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
90010e2e:	f383 8811 	msr	BASEPRI, r3
90010e32:	f3bf 8f6f 	isb	sy
90010e36:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
90010e3a:	e7fe      	b.n	90010e3a <vTaskPlaceOnEventListRestricted+0x6a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010e3c:	4b08      	ldr	r3, [pc, #32]	; (90010e60 <vTaskPlaceOnEventListRestricted+0x90>)
90010e3e:	6818      	ldr	r0, [r3, #0]
90010e40:	6831      	ldr	r1, [r6, #0]
	}
90010e42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010e46:	3104      	adds	r1, #4
90010e48:	f7fd bfbe 	b.w	9000edc8 <vListInsert>
90010e4c:	24026b20 	.word	0x24026b20
90010e50:	24027014 	.word	0x24027014
90010e54:	24026fec 	.word	0x24026fec
90010e58:	24026b24 	.word	0x24026b24
90010e5c:	24026fc8 	.word	0x24026fc8
90010e60:	24026b28 	.word	0x24026b28

90010e64 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010e64:	68c3      	ldr	r3, [r0, #12]
{
90010e66:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010e68:	68dc      	ldr	r4, [r3, #12]
{
90010e6a:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
90010e6c:	b35c      	cbz	r4, 90010ec6 <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
90010e6e:	f104 0518 	add.w	r5, r4, #24
90010e72:	4628      	mov	r0, r5
90010e74:	f7fd ffc0 	bl	9000edf8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90010e78:	4b19      	ldr	r3, [pc, #100]	; (90010ee0 <xTaskRemoveFromEventList+0x7c>)
90010e7a:	681b      	ldr	r3, [r3, #0]
90010e7c:	b17b      	cbz	r3, 90010e9e <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
90010e7e:	4629      	mov	r1, r5
90010e80:	4818      	ldr	r0, [pc, #96]	; (90010ee4 <xTaskRemoveFromEventList+0x80>)
90010e82:	f7fd ff91 	bl	9000eda8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
90010e86:	4b18      	ldr	r3, [pc, #96]	; (90010ee8 <xTaskRemoveFromEventList+0x84>)
90010e88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90010e8a:	681b      	ldr	r3, [r3, #0]
90010e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90010e8e:	429a      	cmp	r2, r3
90010e90:	d922      	bls.n	90010ed8 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
90010e92:	2301      	movs	r3, #1
90010e94:	4a15      	ldr	r2, [pc, #84]	; (90010eec <xTaskRemoveFromEventList+0x88>)
		xReturn = pdTRUE;
90010e96:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
90010e98:	6013      	str	r3, [r2, #0]
}
90010e9a:	b003      	add	sp, #12
90010e9c:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
90010e9e:	1d21      	adds	r1, r4, #4
90010ea0:	4608      	mov	r0, r1
90010ea2:	9101      	str	r1, [sp, #4]
90010ea4:	f7fd ffa8 	bl	9000edf8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
90010ea8:	4a11      	ldr	r2, [pc, #68]	; (90010ef0 <xTaskRemoveFromEventList+0x8c>)
90010eaa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90010eac:	6810      	ldr	r0, [r2, #0]
90010eae:	9901      	ldr	r1, [sp, #4]
90010eb0:	4283      	cmp	r3, r0
90010eb2:	d900      	bls.n	90010eb6 <xTaskRemoveFromEventList+0x52>
90010eb4:	6013      	str	r3, [r2, #0]
90010eb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
90010eba:	480e      	ldr	r0, [pc, #56]	; (90010ef4 <xTaskRemoveFromEventList+0x90>)
90010ebc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
90010ec0:	f7fd ff72 	bl	9000eda8 <vListInsertEnd>
90010ec4:	e7df      	b.n	90010e86 <xTaskRemoveFromEventList+0x22>
90010ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
90010eca:	f383 8811 	msr	BASEPRI, r3
90010ece:	f3bf 8f6f 	isb	sy
90010ed2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
90010ed6:	e7fe      	b.n	90010ed6 <xTaskRemoveFromEventList+0x72>
		xReturn = pdFALSE;
90010ed8:	2000      	movs	r0, #0
}
90010eda:	b003      	add	sp, #12
90010edc:	bd30      	pop	{r4, r5, pc}
90010ede:	bf00      	nop
90010ee0:	24026f94 	.word	0x24026f94
90010ee4:	24026fd4 	.word	0x24026fd4
90010ee8:	24026b20 	.word	0x24026b20
90010eec:	24027018 	.word	0x24027018
90010ef0:	24026f9c 	.word	0x24026f9c
90010ef4:	24026b2c 	.word	0x24026b2c

90010ef8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
90010ef8:	4a03      	ldr	r2, [pc, #12]	; (90010f08 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
90010efa:	4b04      	ldr	r3, [pc, #16]	; (90010f0c <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
90010efc:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
90010efe:	681b      	ldr	r3, [r3, #0]
90010f00:	e9c0 2300 	strd	r2, r3, [r0]
}
90010f04:	4770      	bx	lr
90010f06:	bf00      	nop
90010f08:	24026fcc 	.word	0x24026fcc
90010f0c:	24027014 	.word	0x24027014

90010f10 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
90010f10:	b328      	cbz	r0, 90010f5e <xTaskCheckForTimeOut+0x4e>
{
90010f12:	b5f0      	push	{r4, r5, r6, r7, lr}
90010f14:	460d      	mov	r5, r1
90010f16:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
90010f18:	b1c1      	cbz	r1, 90010f4c <xTaskCheckForTimeOut+0x3c>
90010f1a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
90010f1c:	f7fd ffea 	bl	9000eef4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
90010f20:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
90010f22:	4a1d      	ldr	r2, [pc, #116]	; (90010f98 <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
90010f24:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
90010f26:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
90010f28:	d030      	beq.n	90010f8c <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
90010f2a:	f8df c070 	ldr.w	ip, [pc, #112]	; 90010f9c <xTaskCheckForTimeOut+0x8c>
90010f2e:	6826      	ldr	r6, [r4, #0]
90010f30:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
90010f34:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
90010f36:	42be      	cmp	r6, r7
90010f38:	d01a      	beq.n	90010f70 <xTaskCheckForTimeOut+0x60>
90010f3a:	4288      	cmp	r0, r1
90010f3c:	d818      	bhi.n	90010f70 <xTaskCheckForTimeOut+0x60>
			xReturn = pdTRUE;
90010f3e:	2001      	movs	r0, #1
90010f40:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
90010f42:	f7fd fff9 	bl	9000ef38 <vPortExitCritical>
}
90010f46:	9801      	ldr	r0, [sp, #4]
90010f48:	b003      	add	sp, #12
90010f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
90010f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
90010f50:	f383 8811 	msr	BASEPRI, r3
90010f54:	f3bf 8f6f 	isb	sy
90010f58:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
90010f5c:	e7fe      	b.n	90010f5c <xTaskCheckForTimeOut+0x4c>
90010f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
90010f62:	f383 8811 	msr	BASEPRI, r3
90010f66:	f3bf 8f6f 	isb	sy
90010f6a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
90010f6e:	e7fe      	b.n	90010f6e <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
90010f70:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
90010f74:	4573      	cmp	r3, lr
90010f76:	d90b      	bls.n	90010f90 <xTaskCheckForTimeOut+0x80>
			*pxTicksToWait -= xElapsedTime;
90010f78:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
90010f7a:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
90010f7e:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
90010f80:	4403      	add	r3, r0
			xReturn = pdFALSE;
90010f82:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
90010f84:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
90010f86:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
90010f8a:	e7d9      	b.n	90010f40 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
90010f8c:	2000      	movs	r0, #0
90010f8e:	e7d7      	b.n	90010f40 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
90010f90:	2300      	movs	r3, #0
			xReturn = pdTRUE;
90010f92:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
90010f94:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
90010f96:	e7d3      	b.n	90010f40 <xTaskCheckForTimeOut+0x30>
90010f98:	24027014 	.word	0x24027014
90010f9c:	24026fcc 	.word	0x24026fcc

90010fa0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
90010fa0:	4b01      	ldr	r3, [pc, #4]	; (90010fa8 <vTaskMissedYield+0x8>)
90010fa2:	2201      	movs	r2, #1
90010fa4:	601a      	str	r2, [r3, #0]
}
90010fa6:	4770      	bx	lr
90010fa8:	24027018 	.word	0x24027018

90010fac <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
90010fac:	4b01      	ldr	r3, [pc, #4]	; (90010fb4 <xTaskGetCurrentTaskHandle+0x8>)
90010fae:	6818      	ldr	r0, [r3, #0]
	}
90010fb0:	4770      	bx	lr
90010fb2:	bf00      	nop
90010fb4:	24026b20 	.word	0x24026b20

90010fb8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
90010fb8:	4b05      	ldr	r3, [pc, #20]	; (90010fd0 <xTaskGetSchedulerState+0x18>)
90010fba:	681b      	ldr	r3, [r3, #0]
90010fbc:	b133      	cbz	r3, 90010fcc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90010fbe:	4b05      	ldr	r3, [pc, #20]	; (90010fd4 <xTaskGetSchedulerState+0x1c>)
90010fc0:	6818      	ldr	r0, [r3, #0]
90010fc2:	fab0 f080 	clz	r0, r0
90010fc6:	0940      	lsrs	r0, r0, #5
90010fc8:	0040      	lsls	r0, r0, #1
90010fca:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
90010fcc:	2001      	movs	r0, #1
	}
90010fce:	4770      	bx	lr
90010fd0:	24026fe8 	.word	0x24026fe8
90010fd4:	24026f94 	.word	0x24026f94

90010fd8 <xTaskPriorityInherit>:
	{
90010fd8:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
90010fda:	4604      	mov	r4, r0
	{
90010fdc:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
90010fde:	b1c8      	cbz	r0, 90011014 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
90010fe0:	4d1d      	ldr	r5, [pc, #116]	; (90011058 <xTaskPriorityInherit+0x80>)
90010fe2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
90010fe4:	682a      	ldr	r2, [r5, #0]
90010fe6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
90010fe8:	4293      	cmp	r3, r2
90010fea:	d215      	bcs.n	90011018 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
90010fec:	6982      	ldr	r2, [r0, #24]
90010fee:	2a00      	cmp	r2, #0
90010ff0:	db04      	blt.n	90010ffc <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90010ff2:	682a      	ldr	r2, [r5, #0]
90010ff4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
90010ff6:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
90010ffa:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
90010ffc:	4e17      	ldr	r6, [pc, #92]	; (9001105c <xTaskPriorityInherit+0x84>)
90010ffe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
90011002:	6962      	ldr	r2, [r4, #20]
90011004:	eb06 0383 	add.w	r3, r6, r3, lsl #2
90011008:	429a      	cmp	r2, r3
9001100a:	d00e      	beq.n	9001102a <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9001100c:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
9001100e:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
90011010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011012:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
90011014:	b002      	add	sp, #8
90011016:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
90011018:	682b      	ldr	r3, [r5, #0]
9001101a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
9001101c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001101e:	4298      	cmp	r0, r3
90011020:	bf2c      	ite	cs
90011022:	2000      	movcs	r0, #0
90011024:	2001      	movcc	r0, #1
	}
90011026:	b002      	add	sp, #8
90011028:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9001102a:	1d21      	adds	r1, r4, #4
9001102c:	4608      	mov	r0, r1
9001102e:	9101      	str	r1, [sp, #4]
90011030:	f7fd fee2 	bl	9000edf8 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
90011034:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
90011036:	4b0a      	ldr	r3, [pc, #40]	; (90011060 <xTaskPriorityInherit+0x88>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
90011038:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
9001103a:	681a      	ldr	r2, [r3, #0]
9001103c:	9901      	ldr	r1, [sp, #4]
9001103e:	4290      	cmp	r0, r2
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
90011040:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
90011042:	d900      	bls.n	90011046 <xTaskPriorityInherit+0x6e>
90011044:	6018      	str	r0, [r3, #0]
90011046:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9001104a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
9001104e:	f7fd feab 	bl	9000eda8 <vListInsertEnd>
				xReturn = pdTRUE;
90011052:	2001      	movs	r0, #1
90011054:	e7de      	b.n	90011014 <xTaskPriorityInherit+0x3c>
90011056:	bf00      	nop
90011058:	24026b20 	.word	0x24026b20
9001105c:	24026b2c 	.word	0x24026b2c
90011060:	24026f9c 	.word	0x24026f9c

90011064 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
90011064:	b318      	cbz	r0, 900110ae <xTaskPriorityDisinherit+0x4a>
			configASSERT( pxTCB == pxCurrentTCB );
90011066:	4b1f      	ldr	r3, [pc, #124]	; (900110e4 <xTaskPriorityDisinherit+0x80>)
	{
90011068:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
9001106a:	681c      	ldr	r4, [r3, #0]
	{
9001106c:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
9001106e:	4284      	cmp	r4, r0
90011070:	d008      	beq.n	90011084 <xTaskPriorityDisinherit+0x20>
90011072:	f04f 0350 	mov.w	r3, #80	; 0x50
90011076:	f383 8811 	msr	BASEPRI, r3
9001107a:	f3bf 8f6f 	isb	sy
9001107e:	f3bf 8f4f 	dsb	sy
90011082:	e7fe      	b.n	90011082 <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
90011084:	6d23      	ldr	r3, [r4, #80]	; 0x50
90011086:	b14b      	cbz	r3, 9001109c <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
90011088:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
9001108a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
9001108c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
9001108e:	6523      	str	r3, [r4, #80]	; 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
90011090:	4291      	cmp	r1, r2
90011092:	d000      	beq.n	90011096 <xTaskPriorityDisinherit+0x32>
90011094:	b16b      	cbz	r3, 900110b2 <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
90011096:	2000      	movs	r0, #0
	}
90011098:	b002      	add	sp, #8
9001109a:	bd10      	pop	{r4, pc}
9001109c:	f04f 0350 	mov.w	r3, #80	; 0x50
900110a0:	f383 8811 	msr	BASEPRI, r3
900110a4:	f3bf 8f6f 	isb	sy
900110a8:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
900110ac:	e7fe      	b.n	900110ac <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
900110ae:	2000      	movs	r0, #0
	}
900110b0:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
900110b2:	1d21      	adds	r1, r4, #4
900110b4:	4608      	mov	r0, r1
900110b6:	9101      	str	r1, [sp, #4]
900110b8:	f7fd fe9e 	bl	9000edf8 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
900110bc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
900110be:	4b0a      	ldr	r3, [pc, #40]	; (900110e8 <xTaskPriorityDisinherit+0x84>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900110c0:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
900110c4:	9901      	ldr	r1, [sp, #4]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
900110c6:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900110c8:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
900110ca:	681a      	ldr	r2, [r3, #0]
900110cc:	4290      	cmp	r0, r2
900110ce:	d900      	bls.n	900110d2 <xTaskPriorityDisinherit+0x6e>
900110d0:	6018      	str	r0, [r3, #0]
900110d2:	4b06      	ldr	r3, [pc, #24]	; (900110ec <xTaskPriorityDisinherit+0x88>)
900110d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
900110d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
900110dc:	f7fd fe64 	bl	9000eda8 <vListInsertEnd>
					xReturn = pdTRUE;
900110e0:	2001      	movs	r0, #1
		return xReturn;
900110e2:	e7d9      	b.n	90011098 <xTaskPriorityDisinherit+0x34>
900110e4:	24026b20 	.word	0x24026b20
900110e8:	24026f9c 	.word	0x24026f9c
900110ec:	24026b2c 	.word	0x24026b2c

900110f0 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
900110f0:	2800      	cmp	r0, #0
900110f2:	d040      	beq.n	90011176 <vTaskPriorityDisinheritAfterTimeout+0x86>
			configASSERT( pxTCB->uxMutexesHeld );
900110f4:	6d03      	ldr	r3, [r0, #80]	; 0x50
	{
900110f6:	b530      	push	{r4, r5, lr}
900110f8:	4604      	mov	r4, r0
900110fa:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
900110fc:	b153      	cbz	r3, 90011114 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
900110fe:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
90011100:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90011102:	4281      	cmp	r1, r0
90011104:	bf38      	it	cc
90011106:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
90011108:	2b01      	cmp	r3, #1
9001110a:	d101      	bne.n	90011110 <vTaskPriorityDisinheritAfterTimeout+0x20>
9001110c:	428a      	cmp	r2, r1
9001110e:	d10a      	bne.n	90011126 <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
90011110:	b003      	add	sp, #12
90011112:	bd30      	pop	{r4, r5, pc}
90011114:	f04f 0350 	mov.w	r3, #80	; 0x50
90011118:	f383 8811 	msr	BASEPRI, r3
9001111c:	f3bf 8f6f 	isb	sy
90011120:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
90011124:	e7fe      	b.n	90011124 <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
90011126:	4b19      	ldr	r3, [pc, #100]	; (9001118c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
90011128:	681b      	ldr	r3, [r3, #0]
9001112a:	42a3      	cmp	r3, r4
9001112c:	d024      	beq.n	90011178 <vTaskPriorityDisinheritAfterTimeout+0x88>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9001112e:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
90011130:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
90011132:	2b00      	cmp	r3, #0
90011134:	db02      	blt.n	9001113c <vTaskPriorityDisinheritAfterTimeout+0x4c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90011136:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
9001113a:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
9001113c:	4d14      	ldr	r5, [pc, #80]	; (90011190 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
9001113e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
90011142:	6961      	ldr	r1, [r4, #20]
90011144:	eb05 0382 	add.w	r3, r5, r2, lsl #2
90011148:	4299      	cmp	r1, r3
9001114a:	d1e1      	bne.n	90011110 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9001114c:	1d21      	adds	r1, r4, #4
9001114e:	4608      	mov	r0, r1
90011150:	9101      	str	r1, [sp, #4]
90011152:	f7fd fe51 	bl	9000edf8 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
90011156:	4b0f      	ldr	r3, [pc, #60]	; (90011194 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
90011158:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
9001115a:	681a      	ldr	r2, [r3, #0]
9001115c:	9901      	ldr	r1, [sp, #4]
9001115e:	4290      	cmp	r0, r2
90011160:	d900      	bls.n	90011164 <vTaskPriorityDisinheritAfterTimeout+0x74>
90011162:	6018      	str	r0, [r3, #0]
90011164:	eb00 0080 	add.w	r0, r0, r0, lsl #2
90011168:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
9001116c:	b003      	add	sp, #12
9001116e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
90011172:	f7fd be19 	b.w	9000eda8 <vListInsertEnd>
90011176:	4770      	bx	lr
90011178:	f04f 0350 	mov.w	r3, #80	; 0x50
9001117c:	f383 8811 	msr	BASEPRI, r3
90011180:	f3bf 8f6f 	isb	sy
90011184:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
90011188:	e7fe      	b.n	90011188 <vTaskPriorityDisinheritAfterTimeout+0x98>
9001118a:	bf00      	nop
9001118c:	24026b20 	.word	0x24026b20
90011190:	24026b2c 	.word	0x24026b2c
90011194:	24026f9c 	.word	0x24026f9c

90011198 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
90011198:	4b04      	ldr	r3, [pc, #16]	; (900111ac <pvTaskIncrementMutexHeldCount+0x14>)
9001119a:	681a      	ldr	r2, [r3, #0]
9001119c:	b11a      	cbz	r2, 900111a6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
9001119e:	6819      	ldr	r1, [r3, #0]
900111a0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
900111a2:	3201      	adds	r2, #1
900111a4:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
900111a6:	6818      	ldr	r0, [r3, #0]
	}
900111a8:	4770      	bx	lr
900111aa:	bf00      	nop
900111ac:	24026b20 	.word	0x24026b20

900111b0 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
900111b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900111b4:	4e22      	ldr	r6, [pc, #136]	; (90011240 <prvSwitchTimerLists+0x90>)
900111b6:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
900111b8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 90011248 <prvSwitchTimerLists+0x98>
		xMessage.xMessageID = xCommandID;
900111bc:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
900111c0:	e00d      	b.n	900111de <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
900111c2:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900111c4:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
900111c6:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
900111c8:	1d25      	adds	r5, r4, #4
900111ca:	4628      	mov	r0, r5
900111cc:	f7fd fe14 	bl	9000edf8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
900111d0:	6a23      	ldr	r3, [r4, #32]
900111d2:	4620      	mov	r0, r4
900111d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
900111d6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
900111da:	075b      	lsls	r3, r3, #29
900111dc:	d40a      	bmi.n	900111f4 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
900111de:	6833      	ldr	r3, [r6, #0]
900111e0:	681a      	ldr	r2, [r3, #0]
900111e2:	2a00      	cmp	r2, #0
900111e4:	d1ed      	bne.n	900111c2 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
900111e6:	4a17      	ldr	r2, [pc, #92]	; (90011244 <prvSwitchTimerLists+0x94>)
900111e8:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
900111ea:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
900111ec:	6031      	str	r1, [r6, #0]
}
900111ee:	b005      	add	sp, #20
900111f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
900111f4:	69a3      	ldr	r3, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
900111f6:	4629      	mov	r1, r5
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
900111f8:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
900111fa:	429f      	cmp	r7, r3
900111fc:	d205      	bcs.n	9001120a <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
900111fe:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
90011200:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90011202:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90011204:	f7fd fde0 	bl	9000edc8 <vListInsert>
90011208:	e7e9      	b.n	900111de <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
9001120a:	f8d9 3000 	ldr.w	r3, [r9]
9001120e:	b16b      	cbz	r3, 9001122c <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.pxTimer = xTimer;
90011210:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
90011212:	e9cd 8700 	strd	r8, r7, [sp]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
90011216:	f7ff fecf 	bl	90010fb8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9001121a:	2300      	movs	r3, #0
9001121c:	4669      	mov	r1, sp
9001121e:	f8d9 0000 	ldr.w	r0, [r9]
90011222:	461a      	mov	r2, r3
90011224:	f7fe f95e 	bl	9000f4e4 <xQueueGenericSend>
				configASSERT( xResult );
90011228:	2800      	cmp	r0, #0
9001122a:	d1d8      	bne.n	900111de <prvSwitchTimerLists+0x2e>
9001122c:	f04f 0350 	mov.w	r3, #80	; 0x50
90011230:	f383 8811 	msr	BASEPRI, r3
90011234:	f3bf 8f6f 	isb	sy
90011238:	f3bf 8f4f 	dsb	sy
9001123c:	e7fe      	b.n	9001123c <prvSwitchTimerLists+0x8c>
9001123e:	bf00      	nop
90011240:	2402701c 	.word	0x2402701c
90011244:	24027020 	.word	0x24027020
90011248:	24027140 	.word	0x24027140

9001124c <prvTimerTask>:
{
9001124c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90011250:	4e9f      	ldr	r6, [pc, #636]	; (900114d0 <prvTimerTask+0x284>)
90011252:	b089      	sub	sp, #36	; 0x24
90011254:	4d9f      	ldr	r5, [pc, #636]	; (900114d4 <prvTimerTask+0x288>)
					portYIELD_WITHIN_API();
90011256:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
9001125a:	4c9f      	ldr	r4, [pc, #636]	; (900114d8 <prvTimerTask+0x28c>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
9001125c:	6833      	ldr	r3, [r6, #0]
9001125e:	681f      	ldr	r7, [r3, #0]
90011260:	2f00      	cmp	r7, #0
90011262:	f000 80b2 	beq.w	900113ca <prvTimerTask+0x17e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
90011266:	68db      	ldr	r3, [r3, #12]
90011268:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
9001126a:	f7ff fccf 	bl	90010c0c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
9001126e:	f7ff fce5 	bl	90010c3c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
90011272:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
90011274:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
90011276:	4290      	cmp	r0, r2
90011278:	f0c0 80af 	bcc.w	900113da <prvTimerTask+0x18e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
9001127c:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
9001127e:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
90011280:	f200 80d0 	bhi.w	90011424 <prvTimerTask+0x1d8>
				( void ) xTaskResumeAll();
90011284:	f7ff fcca 	bl	90010c1c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90011288:	6832      	ldr	r2, [r6, #0]
9001128a:	68d2      	ldr	r2, [r2, #12]
9001128c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
90011290:	f10b 0804 	add.w	r8, fp, #4
90011294:	4640      	mov	r0, r8
90011296:	f7fd fdaf 	bl	9000edf8 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9001129a:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
9001129e:	0741      	lsls	r1, r0, #29
900112a0:	f100 80d0 	bmi.w	90011444 <prvTimerTask+0x1f8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
900112a4:	f020 0001 	bic.w	r0, r0, #1
900112a8:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
900112ac:	f8db 3020 	ldr.w	r3, [fp, #32]
900112b0:	4658      	mov	r0, fp
900112b2:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
900112b4:	2200      	movs	r2, #0
900112b6:	4669      	mov	r1, sp
900112b8:	6820      	ldr	r0, [r4, #0]
900112ba:	f7fe fbff 	bl	9000fabc <xQueueReceive>
900112be:	2800      	cmp	r0, #0
900112c0:	d0cc      	beq.n	9001125c <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
900112c2:	9b00      	ldr	r3, [sp, #0]
900112c4:	2b00      	cmp	r3, #0
900112c6:	db77      	blt.n	900113b8 <prvTimerTask+0x16c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
900112c8:	9f02      	ldr	r7, [sp, #8]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
900112ca:	697b      	ldr	r3, [r7, #20]
900112cc:	b113      	cbz	r3, 900112d4 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
900112ce:	1d38      	adds	r0, r7, #4
900112d0:	f7fd fd92 	bl	9000edf8 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
900112d4:	f7ff fcb2 	bl	90010c3c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
900112d8:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
900112da:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
900112dc:	4298      	cmp	r0, r3
900112de:	f0c0 8083 	bcc.w	900113e8 <prvTimerTask+0x19c>
			switch( xMessage.xMessageID )
900112e2:	9b00      	ldr	r3, [sp, #0]
	xLastTime = xTimeNow;
900112e4:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
900112e8:	2b09      	cmp	r3, #9
900112ea:	d8e3      	bhi.n	900112b4 <prvTimerTask+0x68>
900112ec:	e8df f003 	tbb	[pc, r3]
900112f0:	54050505 	.word	0x54050505
900112f4:	05055b3e 	.word	0x05055b3e
900112f8:	3e54      	.short	0x3e54
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
900112fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
900112fe:	69ba      	ldr	r2, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
90011300:	f043 0301 	orr.w	r3, r3, #1
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90011304:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
90011306:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
9001130a:	9b01      	ldr	r3, [sp, #4]
9001130c:	1899      	adds	r1, r3, r2
9001130e:	bf2c      	ite	cs
90011310:	2001      	movcs	r0, #1
90011312:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
90011314:	4541      	cmp	r1, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
90011316:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
90011318:	f200 8086 	bhi.w	90011428 <prvTimerTask+0x1dc>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9001131c:	eba8 0303 	sub.w	r3, r8, r3
90011320:	429a      	cmp	r2, r3
90011322:	f200 80c0 	bhi.w	900114a6 <prvTimerTask+0x25a>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
90011326:	6a3b      	ldr	r3, [r7, #32]
90011328:	4638      	mov	r0, r7
9001132a:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9001132c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
90011330:	075b      	lsls	r3, r3, #29
90011332:	d5bf      	bpl.n	900112b4 <prvTimerTask+0x68>
	if( xTimerQueue != NULL )
90011334:	6822      	ldr	r2, [r4, #0]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
90011336:	9901      	ldr	r1, [sp, #4]
90011338:	69bb      	ldr	r3, [r7, #24]
	if( xTimerQueue != NULL )
9001133a:	b172      	cbz	r2, 9001135a <prvTimerTask+0x10e>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
9001133c:	440b      	add	r3, r1
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
9001133e:	e9cd 3705 	strd	r3, r7, [sp, #20]
		xMessage.xMessageID = xCommandID;
90011342:	2300      	movs	r3, #0
90011344:	9304      	str	r3, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
90011346:	f7ff fe37 	bl	90010fb8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9001134a:	2300      	movs	r3, #0
9001134c:	a904      	add	r1, sp, #16
9001134e:	6820      	ldr	r0, [r4, #0]
90011350:	461a      	mov	r2, r3
90011352:	f7fe f8c7 	bl	9000f4e4 <xQueueGenericSend>
							configASSERT( xResult );
90011356:	2800      	cmp	r0, #0
90011358:	d1ac      	bne.n	900112b4 <prvTimerTask+0x68>
9001135a:	f04f 0350 	mov.w	r3, #80	; 0x50
9001135e:	f383 8811 	msr	BASEPRI, r3
90011362:	f3bf 8f6f 	isb	sy
90011366:	f3bf 8f4f 	dsb	sy
9001136a:	e7fe      	b.n	9001136a <prvTimerTask+0x11e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9001136c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
90011370:	f043 0301 	orr.w	r3, r3, #1
90011374:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
90011378:	9b01      	ldr	r3, [sp, #4]
9001137a:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
9001137c:	2b00      	cmp	r3, #0
9001137e:	f000 809e 	beq.w	900114be <prvTimerTask+0x272>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
90011382:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
90011384:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90011386:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
90011388:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
9001138a:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
9001138c:	d856      	bhi.n	9001143c <prvTimerTask+0x1f0>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
9001138e:	4b53      	ldr	r3, [pc, #332]	; (900114dc <prvTimerTask+0x290>)
90011390:	6818      	ldr	r0, [r3, #0]
90011392:	f7fd fd19 	bl	9000edc8 <vListInsert>
	return xProcessTimerNow;
90011396:	e78d      	b.n	900112b4 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
90011398:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9001139c:	f023 0301 	bic.w	r3, r3, #1
900113a0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
900113a4:	e786      	b.n	900112b4 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
900113a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
900113aa:	079a      	lsls	r2, r3, #30
900113ac:	d572      	bpl.n	90011494 <prvTimerTask+0x248>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
900113ae:	f023 0301 	bic.w	r3, r3, #1
900113b2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
900113b6:	e77d      	b.n	900112b4 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
900113b8:	9b01      	ldr	r3, [sp, #4]
900113ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
900113be:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
900113c0:	9b00      	ldr	r3, [sp, #0]
900113c2:	2b00      	cmp	r3, #0
900113c4:	f6ff af76 	blt.w	900112b4 <prvTimerTask+0x68>
900113c8:	e77e      	b.n	900112c8 <prvTimerTask+0x7c>
	vTaskSuspendAll();
900113ca:	f7ff fc1f 	bl	90010c0c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
900113ce:	f7ff fc35 	bl	90010c3c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
900113d2:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
900113d4:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
900113d6:	4282      	cmp	r2, r0
900113d8:	d909      	bls.n	900113ee <prvTimerTask+0x1a2>
		prvSwitchTimerLists();
900113da:	f7ff fee9 	bl	900111b0 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
900113de:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
900113e2:	f7ff fc1b 	bl	90010c1c <xTaskResumeAll>
900113e6:	e765      	b.n	900112b4 <prvTimerTask+0x68>
		prvSwitchTimerLists();
900113e8:	f7ff fee2 	bl	900111b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
900113ec:	e779      	b.n	900112e2 <prvTimerTask+0x96>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
900113ee:	4b3b      	ldr	r3, [pc, #236]	; (900114dc <prvTimerTask+0x290>)
	xLastTime = xTimeNow;
900113f0:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
900113f4:	681a      	ldr	r2, [r3, #0]
900113f6:	6812      	ldr	r2, [r2, #0]
900113f8:	fab2 f282 	clz	r2, r2
900113fc:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
900113fe:	eba7 010a 	sub.w	r1, r7, sl
90011402:	6820      	ldr	r0, [r4, #0]
90011404:	f7fe ff4e 	bl	900102a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
90011408:	f7ff fc08 	bl	90010c1c <xTaskResumeAll>
9001140c:	2800      	cmp	r0, #0
9001140e:	f47f af51 	bne.w	900112b4 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
90011412:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
90011416:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
9001141a:	f3bf 8f4f 	dsb	sy
9001141e:	f3bf 8f6f 	isb	sy
90011422:	e747      	b.n	900112b4 <prvTimerTask+0x68>
90011424:	2200      	movs	r2, #0
90011426:	e7ea      	b.n	900113fe <prvTimerTask+0x1b2>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
90011428:	4543      	cmp	r3, r8
9001142a:	d902      	bls.n	90011432 <prvTimerTask+0x1e6>
9001142c:	2800      	cmp	r0, #0
9001142e:	f43f af7a 	beq.w	90011326 <prvTimerTask+0xda>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90011432:	1d39      	adds	r1, r7, #4
90011434:	6830      	ldr	r0, [r6, #0]
90011436:	f7fd fcc7 	bl	9000edc8 <vListInsert>
	return xProcessTimerNow;
9001143a:	e73b      	b.n	900112b4 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9001143c:	6830      	ldr	r0, [r6, #0]
9001143e:	f7fd fcc3 	bl	9000edc8 <vListInsert>
90011442:	e737      	b.n	900112b4 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
90011444:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90011448:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
9001144c:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
9001144e:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
90011450:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
90011454:	d322      	bcc.n	9001149c <prvTimerTask+0x250>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90011456:	ebaa 0307 	sub.w	r3, sl, r7
9001145a:	429a      	cmp	r2, r3
9001145c:	d829      	bhi.n	900114b2 <prvTimerTask+0x266>
	if( xTimerQueue != NULL )
9001145e:	6823      	ldr	r3, [r4, #0]
90011460:	b17b      	cbz	r3, 90011482 <prvTimerTask+0x236>
		xMessage.xMessageID = xCommandID;
90011462:	2300      	movs	r3, #0
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
90011464:	9705      	str	r7, [sp, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
90011466:	f8cd b018 	str.w	fp, [sp, #24]
		xMessage.xMessageID = xCommandID;
9001146a:	9304      	str	r3, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
9001146c:	f7ff fda4 	bl	90010fb8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
90011470:	2300      	movs	r3, #0
90011472:	a904      	add	r1, sp, #16
90011474:	6820      	ldr	r0, [r4, #0]
90011476:	461a      	mov	r2, r3
90011478:	f7fe f834 	bl	9000f4e4 <xQueueGenericSend>
			configASSERT( xResult );
9001147c:	2800      	cmp	r0, #0
9001147e:	f47f af15 	bne.w	900112ac <prvTimerTask+0x60>
90011482:	f04f 0350 	mov.w	r3, #80	; 0x50
90011486:	f383 8811 	msr	BASEPRI, r3
9001148a:	f3bf 8f6f 	isb	sy
9001148e:	f3bf 8f4f 	dsb	sy
90011492:	e7fe      	b.n	90011492 <prvTimerTask+0x246>
							vPortFree( pxTimer );
90011494:	4638      	mov	r0, r7
90011496:	f7fd fc13 	bl	9000ecc0 <vPortFree>
9001149a:	e70b      	b.n	900112b4 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9001149c:	4641      	mov	r1, r8
9001149e:	6830      	ldr	r0, [r6, #0]
900114a0:	f7fd fc92 	bl	9000edc8 <vListInsert>
	return xProcessTimerNow;
900114a4:	e702      	b.n	900112ac <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
900114a6:	4b0d      	ldr	r3, [pc, #52]	; (900114dc <prvTimerTask+0x290>)
900114a8:	1d39      	adds	r1, r7, #4
900114aa:	6818      	ldr	r0, [r3, #0]
900114ac:	f7fd fc8c 	bl	9000edc8 <vListInsert>
	return xProcessTimerNow;
900114b0:	e700      	b.n	900112b4 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
900114b2:	4b0a      	ldr	r3, [pc, #40]	; (900114dc <prvTimerTask+0x290>)
900114b4:	4641      	mov	r1, r8
900114b6:	6818      	ldr	r0, [r3, #0]
900114b8:	f7fd fc86 	bl	9000edc8 <vListInsert>
	return xProcessTimerNow;
900114bc:	e6f6      	b.n	900112ac <prvTimerTask+0x60>
900114be:	f04f 0350 	mov.w	r3, #80	; 0x50
900114c2:	f383 8811 	msr	BASEPRI, r3
900114c6:	f3bf 8f6f 	isb	sy
900114ca:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
900114ce:	e7fe      	b.n	900114ce <prvTimerTask+0x282>
900114d0:	2402701c 	.word	0x2402701c
900114d4:	240270ec 	.word	0x240270ec
900114d8:	24027140 	.word	0x24027140
900114dc:	24027020 	.word	0x24027020

900114e0 <xTimerCreateTimerTask>:
{
900114e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
900114e2:	4c23      	ldr	r4, [pc, #140]	; (90011570 <xTimerCreateTimerTask+0x90>)
{
900114e4:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
900114e6:	f7fd fd05 	bl	9000eef4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
900114ea:	6825      	ldr	r5, [r4, #0]
900114ec:	b335      	cbz	r5, 9001153c <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
900114ee:	f7fd fd23 	bl	9000ef38 <vPortExitCritical>
	if( xTimerQueue != NULL )
900114f2:	6823      	ldr	r3, [r4, #0]
900114f4:	b1cb      	cbz	r3, 9001152a <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
900114f6:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
900114f8:	aa07      	add	r2, sp, #28
900114fa:	a906      	add	r1, sp, #24
900114fc:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
900114fe:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
90011500:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
90011504:	f7fd fb0e 	bl	9000eb24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
90011508:	4623      	mov	r3, r4
9001150a:	9a07      	ldr	r2, [sp, #28]
9001150c:	9500      	str	r5, [sp, #0]
9001150e:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
90011512:	e9cd 1001 	strd	r1, r0, [sp, #4]
90011516:	4917      	ldr	r1, [pc, #92]	; (90011574 <xTimerCreateTimerTask+0x94>)
90011518:	4817      	ldr	r0, [pc, #92]	; (90011578 <xTimerCreateTimerTask+0x98>)
9001151a:	f7ff f93f 	bl	9001079c <xTaskCreateStatic>
9001151e:	4b17      	ldr	r3, [pc, #92]	; (9001157c <xTimerCreateTimerTask+0x9c>)
90011520:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
90011522:	b110      	cbz	r0, 9001152a <xTimerCreateTimerTask+0x4a>
}
90011524:	2001      	movs	r0, #1
90011526:	b009      	add	sp, #36	; 0x24
90011528:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001152a:	f04f 0350 	mov.w	r3, #80	; 0x50
9001152e:	f383 8811 	msr	BASEPRI, r3
90011532:	f3bf 8f6f 	isb	sy
90011536:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
9001153a:	e7fe      	b.n	9001153a <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
9001153c:	4f10      	ldr	r7, [pc, #64]	; (90011580 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
9001153e:	4e11      	ldr	r6, [pc, #68]	; (90011584 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
90011540:	4638      	mov	r0, r7
90011542:	f7fd fc21 	bl	9000ed88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
90011546:	4630      	mov	r0, r6
90011548:	f7fd fc1e 	bl	9000ed88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
9001154c:	4a0e      	ldr	r2, [pc, #56]	; (90011588 <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
9001154e:	9500      	str	r5, [sp, #0]
90011550:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
90011552:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90011554:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
90011556:	4a0d      	ldr	r2, [pc, #52]	; (9001158c <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90011558:	4b0d      	ldr	r3, [pc, #52]	; (90011590 <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
9001155a:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
9001155c:	4a0d      	ldr	r2, [pc, #52]	; (90011594 <xTimerCreateTimerTask+0xb4>)
9001155e:	f7fd fe6b 	bl	9000f238 <xQueueGenericCreateStatic>
90011562:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
90011564:	2800      	cmp	r0, #0
90011566:	d0c2      	beq.n	900114ee <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
90011568:	490b      	ldr	r1, [pc, #44]	; (90011598 <xTimerCreateTimerTask+0xb8>)
9001156a:	f7fe fe73 	bl	90010254 <vQueueAddToRegistry>
9001156e:	e7be      	b.n	900114ee <xTimerCreateTimerTask+0xe>
90011570:	24027140 	.word	0x24027140
90011574:	9002b4bc 	.word	0x9002b4bc
90011578:	9001124d 	.word	0x9001124d
9001157c:	24027144 	.word	0x24027144
90011580:	240270c4 	.word	0x240270c4
90011584:	240270d8 	.word	0x240270d8
90011588:	2402701c 	.word	0x2402701c
9001158c:	24027020 	.word	0x24027020
90011590:	240270f0 	.word	0x240270f0
90011594:	24027024 	.word	0x24027024
90011598:	9002b4b4 	.word	0x9002b4b4

9001159c <xTimerCreate>:
	{
9001159c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900115a0:	4607      	mov	r7, r0
900115a2:	b085      	sub	sp, #20
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
900115a4:	202c      	movs	r0, #44	; 0x2c
	{
900115a6:	4688      	mov	r8, r1
900115a8:	4616      	mov	r6, r2
900115aa:	461d      	mov	r5, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
900115ac:	f7fd faca 	bl	9000eb44 <pvPortMalloc>
		if( pxNewTimer != NULL )
900115b0:	4604      	mov	r4, r0
900115b2:	b1e8      	cbz	r0, 900115f0 <xTimerCreate+0x54>
			pxNewTimer->ucStatus = 0x00;
900115b4:	2300      	movs	r3, #0
900115b6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
900115ba:	f1b8 0f00 	cmp.w	r8, #0
900115be:	d01b      	beq.n	900115f8 <xTimerCreate+0x5c>
		if( xTimerQueue == NULL )
900115c0:	f8df 909c 	ldr.w	r9, [pc, #156]	; 90011660 <xTimerCreate+0xc4>
	taskENTER_CRITICAL();
900115c4:	f7fd fc96 	bl	9000eef4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
900115c8:	f8d9 3000 	ldr.w	r3, [r9]
900115cc:	b1eb      	cbz	r3, 9001160a <xTimerCreate+0x6e>
	taskEXIT_CRITICAL();
900115ce:	f7fd fcb3 	bl	9000ef38 <vPortExitCritical>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
900115d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
900115d4:	1d20      	adds	r0, r4, #4
		pxNewTimer->pcTimerName = pcTimerName;
900115d6:	6027      	str	r7, [r4, #0]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
900115d8:	6223      	str	r3, [r4, #32]
		pxNewTimer->pvTimerID = pvTimerID;
900115da:	e9c4 8506 	strd	r8, r5, [r4, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
900115de:	f7fd fbdf 	bl	9000eda0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
900115e2:	b12e      	cbz	r6, 900115f0 <xTimerCreate+0x54>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
900115e4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
900115e8:	f043 0304 	orr.w	r3, r3, #4
900115ec:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
900115f0:	4620      	mov	r0, r4
900115f2:	b005      	add	sp, #20
900115f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900115f8:	f04f 0350 	mov.w	r3, #80	; 0x50
900115fc:	f383 8811 	msr	BASEPRI, r3
90011600:	f3bf 8f6f 	isb	sy
90011604:	f3bf 8f4f 	dsb	sy
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
90011608:	e7fe      	b.n	90011608 <xTimerCreate+0x6c>
			vListInitialise( &xActiveTimerList1 );
9001160a:	f8df b058 	ldr.w	fp, [pc, #88]	; 90011664 <xTimerCreate+0xc8>
			vListInitialise( &xActiveTimerList2 );
9001160e:	f8df a058 	ldr.w	sl, [pc, #88]	; 90011668 <xTimerCreate+0xcc>
			vListInitialise( &xActiveTimerList1 );
90011612:	4658      	mov	r0, fp
90011614:	9303      	str	r3, [sp, #12]
90011616:	f7fd fbb7 	bl	9000ed88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
9001161a:	4650      	mov	r0, sl
9001161c:	f7fd fbb4 	bl	9000ed88 <vListInitialise>
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90011620:	9b03      	ldr	r3, [sp, #12]
90011622:	4a0a      	ldr	r2, [pc, #40]	; (9001164c <xTimerCreate+0xb0>)
90011624:	2110      	movs	r1, #16
90011626:	9300      	str	r3, [sp, #0]
90011628:	200a      	movs	r0, #10
			pxCurrentTimerList = &xActiveTimerList1;
9001162a:	4b09      	ldr	r3, [pc, #36]	; (90011650 <xTimerCreate+0xb4>)
9001162c:	f8c3 b000 	str.w	fp, [r3]
			pxOverflowTimerList = &xActiveTimerList2;
90011630:	4b08      	ldr	r3, [pc, #32]	; (90011654 <xTimerCreate+0xb8>)
90011632:	f8c3 a000 	str.w	sl, [r3]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90011636:	4b08      	ldr	r3, [pc, #32]	; (90011658 <xTimerCreate+0xbc>)
90011638:	f7fd fdfe 	bl	9000f238 <xQueueGenericCreateStatic>
9001163c:	f8c9 0000 	str.w	r0, [r9]
				if( xTimerQueue != NULL )
90011640:	2800      	cmp	r0, #0
90011642:	d0c4      	beq.n	900115ce <xTimerCreate+0x32>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
90011644:	4905      	ldr	r1, [pc, #20]	; (9001165c <xTimerCreate+0xc0>)
90011646:	f7fe fe05 	bl	90010254 <vQueueAddToRegistry>
9001164a:	e7c0      	b.n	900115ce <xTimerCreate+0x32>
9001164c:	24027024 	.word	0x24027024
90011650:	2402701c 	.word	0x2402701c
90011654:	24027020 	.word	0x24027020
90011658:	240270f0 	.word	0x240270f0
9001165c:	9002b4b4 	.word	0x9002b4b4
90011660:	24027140 	.word	0x24027140
90011664:	240270c4 	.word	0x240270c4
90011668:	240270d8 	.word	0x240270d8

9001166c <xTimerCreateStatic>:
	{
9001166c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			volatile size_t xSize = sizeof( StaticTimer_t );
90011670:	242c      	movs	r4, #44	; 0x2c
	{
90011672:	b085      	sub	sp, #20
			volatile size_t xSize = sizeof( StaticTimer_t );
90011674:	9403      	str	r4, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
90011676:	9c03      	ldr	r4, [sp, #12]
90011678:	2c2c      	cmp	r4, #44	; 0x2c
9001167a:	d008      	beq.n	9001168e <xTimerCreateStatic+0x22>
9001167c:	f04f 0350 	mov.w	r3, #80	; 0x50
90011680:	f383 8811 	msr	BASEPRI, r3
90011684:	f3bf 8f6f 	isb	sy
90011688:	f3bf 8f4f 	dsb	sy
9001168c:	e7fe      	b.n	9001168c <xTimerCreateStatic+0x20>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9001168e:	461d      	mov	r5, r3
90011690:	9b03      	ldr	r3, [sp, #12]
		configASSERT( pxTimerBuffer );
90011692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90011694:	b343      	cbz	r3, 900116e8 <xTimerCreateStatic+0x7c>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
90011696:	4616      	mov	r6, r2
90011698:	461a      	mov	r2, r3
9001169a:	2302      	movs	r3, #2
9001169c:	460f      	mov	r7, r1
9001169e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
900116a2:	b351      	cbz	r1, 900116fa <xTimerCreateStatic+0x8e>
		if( xTimerQueue == NULL )
900116a4:	4c29      	ldr	r4, [pc, #164]	; (9001174c <xTimerCreateStatic+0xe0>)
900116a6:	4680      	mov	r8, r0
	taskENTER_CRITICAL();
900116a8:	f7fd fc24 	bl	9000eef4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
900116ac:	f8d4 b000 	ldr.w	fp, [r4]
900116b0:	f1bb 0f00 	cmp.w	fp, #0
900116b4:	d02a      	beq.n	9001170c <xTimerCreateStatic+0xa0>
	taskEXIT_CRITICAL();
900116b6:	f7fd fc3f 	bl	9000ef38 <vPortExitCritical>
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
900116ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
900116bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
900116be:	1d18      	adds	r0, r3, #4
		pxNewTimer->pcTimerName = pcTimerName;
900116c0:	f8c3 8000 	str.w	r8, [r3]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
900116c4:	621a      	str	r2, [r3, #32]
		pxNewTimer->pvTimerID = pvTimerID;
900116c6:	e9c3 7506 	strd	r7, r5, [r3, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
900116ca:	f7fd fb69 	bl	9000eda0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
900116ce:	b13e      	cbz	r6, 900116e0 <xTimerCreateStatic+0x74>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
900116d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
900116d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900116d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
900116d8:	f043 0304 	orr.w	r3, r3, #4
900116dc:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	}
900116e0:	980f      	ldr	r0, [sp, #60]	; 0x3c
900116e2:	b005      	add	sp, #20
900116e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900116e8:	f04f 0350 	mov.w	r3, #80	; 0x50
900116ec:	f383 8811 	msr	BASEPRI, r3
900116f0:	f3bf 8f6f 	isb	sy
900116f4:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTimerBuffer );
900116f8:	e7fe      	b.n	900116f8 <xTimerCreateStatic+0x8c>
900116fa:	f04f 0350 	mov.w	r3, #80	; 0x50
900116fe:	f383 8811 	msr	BASEPRI, r3
90011702:	f3bf 8f6f 	isb	sy
90011706:	f3bf 8f4f 	dsb	sy
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
9001170a:	e7fe      	b.n	9001170a <xTimerCreateStatic+0x9e>
			vListInitialise( &xActiveTimerList1 );
9001170c:	f8df a054 	ldr.w	sl, [pc, #84]	; 90011764 <xTimerCreateStatic+0xf8>
			vListInitialise( &xActiveTimerList2 );
90011710:	f8df 9054 	ldr.w	r9, [pc, #84]	; 90011768 <xTimerCreateStatic+0xfc>
			vListInitialise( &xActiveTimerList1 );
90011714:	4650      	mov	r0, sl
90011716:	f7fd fb37 	bl	9000ed88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
9001171a:	4648      	mov	r0, r9
9001171c:	f7fd fb34 	bl	9000ed88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
90011720:	4a0b      	ldr	r2, [pc, #44]	; (90011750 <xTimerCreateStatic+0xe4>)
			pxOverflowTimerList = &xActiveTimerList2;
90011722:	4b0c      	ldr	r3, [pc, #48]	; (90011754 <xTimerCreateStatic+0xe8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90011724:	2110      	movs	r1, #16
90011726:	f8cd b000 	str.w	fp, [sp]
9001172a:	200a      	movs	r0, #10
			pxCurrentTimerList = &xActiveTimerList1;
9001172c:	f8c2 a000 	str.w	sl, [r2]
			pxOverflowTimerList = &xActiveTimerList2;
90011730:	f8c3 9000 	str.w	r9, [r3]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90011734:	4a08      	ldr	r2, [pc, #32]	; (90011758 <xTimerCreateStatic+0xec>)
90011736:	4b09      	ldr	r3, [pc, #36]	; (9001175c <xTimerCreateStatic+0xf0>)
90011738:	f7fd fd7e 	bl	9000f238 <xQueueGenericCreateStatic>
9001173c:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
9001173e:	2800      	cmp	r0, #0
90011740:	d0b9      	beq.n	900116b6 <xTimerCreateStatic+0x4a>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
90011742:	4907      	ldr	r1, [pc, #28]	; (90011760 <xTimerCreateStatic+0xf4>)
90011744:	f7fe fd86 	bl	90010254 <vQueueAddToRegistry>
90011748:	e7b5      	b.n	900116b6 <xTimerCreateStatic+0x4a>
9001174a:	bf00      	nop
9001174c:	24027140 	.word	0x24027140
90011750:	2402701c 	.word	0x2402701c
90011754:	24027020 	.word	0x24027020
90011758:	24027024 	.word	0x24027024
9001175c:	240270f0 	.word	0x240270f0
90011760:	9002b4b4 	.word	0x9002b4b4
90011764:	240270c4 	.word	0x240270c4
90011768:	240270d8 	.word	0x240270d8

9001176c <xTimerGenericCommand>:
	configASSERT( xTimer );
9001176c:	b1c8      	cbz	r0, 900117a2 <xTimerGenericCommand+0x36>
{
9001176e:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
90011770:	4e17      	ldr	r6, [pc, #92]	; (900117d0 <xTimerGenericCommand+0x64>)
{
90011772:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
90011774:	6834      	ldr	r4, [r6, #0]
90011776:	b18c      	cbz	r4, 9001179c <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
90011778:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
9001177a:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
9001177c:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
90011780:	dc18      	bgt.n	900117b4 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
90011782:	f7ff fc19 	bl	90010fb8 <xTaskGetSchedulerState>
90011786:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
90011788:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
9001178c:	d01a      	beq.n	900117c4 <xTimerGenericCommand+0x58>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
9001178e:	4669      	mov	r1, sp
90011790:	461a      	mov	r2, r3
90011792:	6830      	ldr	r0, [r6, #0]
90011794:	f7fd fea6 	bl	9000f4e4 <xQueueGenericSend>
}
90011798:	b004      	add	sp, #16
9001179a:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xReturn = pdFAIL;
9001179c:	4620      	mov	r0, r4
}
9001179e:	b004      	add	sp, #16
900117a0:	bd70      	pop	{r4, r5, r6, pc}
900117a2:	f04f 0350 	mov.w	r3, #80	; 0x50
900117a6:	f383 8811 	msr	BASEPRI, r3
900117aa:	f3bf 8f6f 	isb	sy
900117ae:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
900117b2:	e7fe      	b.n	900117b2 <xTimerGenericCommand+0x46>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
900117b4:	461a      	mov	r2, r3
900117b6:	4669      	mov	r1, sp
900117b8:	2300      	movs	r3, #0
900117ba:	4620      	mov	r0, r4
900117bc:	f7fe f8bc 	bl	9000f938 <xQueueGenericSendFromISR>
}
900117c0:	b004      	add	sp, #16
900117c2:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
900117c4:	9a08      	ldr	r2, [sp, #32]
900117c6:	4669      	mov	r1, sp
900117c8:	6830      	ldr	r0, [r6, #0]
900117ca:	f7fd fe8b 	bl	9000f4e4 <xQueueGenericSend>
900117ce:	e7e6      	b.n	9001179e <xTimerGenericCommand+0x32>
900117d0:	24027140 	.word	0x24027140

900117d4 <pvTimerGetTimerID>:
void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
Timer_t * const pxTimer = xTimer;
void *pvReturn;

	configASSERT( xTimer );
900117d4:	b158      	cbz	r0, 900117ee <pvTimerGetTimerID+0x1a>
{
900117d6:	b510      	push	{r4, lr}
900117d8:	4604      	mov	r4, r0
900117da:	b082      	sub	sp, #8

	taskENTER_CRITICAL();
900117dc:	f7fd fb8a 	bl	9000eef4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
900117e0:	69e0      	ldr	r0, [r4, #28]
900117e2:	9001      	str	r0, [sp, #4]
	}
	taskEXIT_CRITICAL();
900117e4:	f7fd fba8 	bl	9000ef38 <vPortExitCritical>

	return pvReturn;
}
900117e8:	9801      	ldr	r0, [sp, #4]
900117ea:	b002      	add	sp, #8
900117ec:	bd10      	pop	{r4, pc}
900117ee:	f04f 0350 	mov.w	r3, #80	; 0x50
900117f2:	f383 8811 	msr	BASEPRI, r3
900117f6:	f3bf 8f6f 	isb	sy
900117fa:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
900117fe:	e7fe      	b.n	900117fe <pvTimerGetTimerID+0x2a>

90011800 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
90011800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90011804:	4c82      	ldr	r4, [pc, #520]	; (90011a10 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x210>)
{  
90011806:	b091      	sub	sp, #68	; 0x44
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90011808:	fba4 4303 	umull	r4, r3, r4, r3
{  
9001180c:	910d      	str	r1, [sp, #52]	; 0x34
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
9001180e:	0a19      	lsrs	r1, r3, #8
{  
90011810:	920b      	str	r2, [sp, #44]	; 0x2c
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
90011812:	eb02 2313 	add.w	r3, r2, r3, lsr #8
{  
90011816:	9008      	str	r0, [sp, #32]
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90011818:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
9001181c:	4293      	cmp	r3, r2
9001181e:	930f      	str	r3, [sp, #60]	; 0x3c
90011820:	f240 80f1 	bls.w	90011a06 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x206>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90011824:	4b7b      	ldr	r3, [pc, #492]	; (90011a14 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x214>)
90011826:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 90011a24 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x224>
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9001182a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9001182c:	6a59      	ldr	r1, [r3, #36]	; 0x24
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9001182e:	691b      	ldr	r3, [r3, #16]
90011830:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 90011a28 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x228>
90011834:	9305      	str	r3, [sp, #20]
          pLum += 64;                      
        }

        pLum = pLum - 128 + 16;
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
90011836:	0053      	lsls	r3, r2, #1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011838:	920a      	str	r2, [sp, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9001183a:	910e      	str	r1, [sp, #56]	; 0x38
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
9001183c:	930c      	str	r3, [sp, #48]	; 0x30
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9001183e:	9a08      	ldr	r2, [sp, #32]
    currentMCU++;
90011840:	f04f 0e02 	mov.w	lr, #2
90011844:	990b      	ldr	r1, [sp, #44]	; 0x2c
90011846:	f502 7080 	add.w	r0, r2, #256	; 0x100
9001184a:	9204      	str	r2, [sp, #16]
9001184c:	010b      	lsls	r3, r1, #4
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9001184e:	3101      	adds	r1, #1
90011850:	9006      	str	r0, [sp, #24]
90011852:	980e      	ldr	r0, [sp, #56]	; 0x38
90011854:	910b      	str	r1, [sp, #44]	; 0x2c
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011856:	990a      	ldr	r1, [sp, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90011858:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
9001185c:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011860:	fb01 f202 	mul.w	r2, r1, r2
90011864:	005b      	lsls	r3, r3, #1
90011866:	eb03 1302 	add.w	r3, r3, r2, lsl #4
9001186a:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
9001186c:	e009      	b.n	90011882 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x82>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9001186e:	9b05      	ldr	r3, [sp, #20]
90011870:	9a01      	ldr	r2, [sp, #4]
90011872:	4293      	cmp	r3, r2
90011874:	d80f      	bhi.n	90011896 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x96>
    for(i= 0; i <  16; i+=2)
90011876:	f1be 0f10 	cmp.w	lr, #16
9001187a:	f000 80bb 	beq.w	900119f4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f4>
9001187e:	f10e 0e02 	add.w	lr, lr, #2
      if(i == 8)
90011882:	f1be 0f0a 	cmp.w	lr, #10
90011886:	d1f2      	bne.n	9001186e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6e>
        pLum = pInBuffer + 128;
90011888:	9b08      	ldr	r3, [sp, #32]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9001188a:	9a01      	ldr	r2, [sp, #4]
9001188c:	3380      	adds	r3, #128	; 0x80
9001188e:	9304      	str	r3, [sp, #16]
90011890:	9b05      	ldr	r3, [sp, #20]
90011892:	4293      	cmp	r3, r2
90011894:	d9f3      	bls.n	9001187e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
        pOutAddr = pOutBuffer + refline;
90011896:	9a01      	ldr	r2, [sp, #4]
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
90011898:	9906      	ldr	r1, [sp, #24]
        pOutAddr = pOutBuffer + refline;
9001189a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
9001189c:	9103      	str	r1, [sp, #12]
        pOutAddr = pOutBuffer + refline;
9001189e:	4413      	add	r3, r2
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
900118a0:	990a      	ldr	r1, [sp, #40]	; 0x28
900118a2:	9a04      	ldr	r2, [sp, #16]
900118a4:	1859      	adds	r1, r3, r1
900118a6:	f103 0c10 	add.w	ip, r3, #16
900118aa:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
900118ae:	3330      	adds	r3, #48	; 0x30
900118b0:	4696      	mov	lr, r2
900118b2:	9102      	str	r1, [sp, #8]
        for(k= 0; k<2; k++)
900118b4:	9307      	str	r3, [sp, #28]
900118b6:	9b03      	ldr	r3, [sp, #12]
900118b8:	f1ac 0510 	sub.w	r5, ip, #16
          for(j=0; j < 8; j+=2)
900118bc:	4674      	mov	r4, lr
    currentMCU++;
900118be:	9e02      	ldr	r6, [sp, #8]
900118c0:	1e5f      	subs	r7, r3, #1
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900118c2:	f817 3f01 	ldrb.w	r3, [r7, #1]!
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
900118c6:	3504      	adds	r5, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900118c8:	4953      	ldr	r1, [pc, #332]	; (90011a18 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x218>)
          for(j=0; j < 8; j+=2)
900118ca:	3402      	adds	r4, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900118cc:	f897 0040 	ldrb.w	r0, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
900118d0:	3604      	adds	r6, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900118d2:	f851 a023 	ldr.w	sl, [r1, r3, lsl #2]
          for(j=0; j < 8; j+=2)
900118d6:	4565      	cmp	r5, ip
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900118d8:	4950      	ldr	r1, [pc, #320]	; (90011a1c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x21c>)
            ycomp = (int32_t)(*(pLum +j));
900118da:	f814 2c02 	ldrb.w	r2, [r4, #-2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900118de:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900118e2:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900118e6:	4449      	add	r1, r9
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900118e8:	449a      	add	sl, r3
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900118ea:	4b4d      	ldr	r3, [pc, #308]	; (90011a20 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x220>)
900118ec:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900118f0:	eb09 432a 	add.w	r3, r9, sl, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900118f4:	eb01 0a02 	add.w	sl, r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900118f8:	4448      	add	r0, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900118fa:	eb03 0b02 	add.w	fp, r3, r2
900118fe:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011902:	4402      	add	r2, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011904:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011908:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001190c:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011910:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011914:	ea4f 1b4b 	mov.w	fp, fp, lsl #5
90011918:	ea4b 22c2 	orr.w	r2, fp, r2, lsl #11
9001191c:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr = 
90011920:	f825 2c04 	strh.w	r2, [r5, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90011924:	f814 ac01 	ldrb.w	sl, [r4, #-1]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011928:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001192c:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011930:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011932:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011936:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001193a:	ea4f 0292 	mov.w	r2, r2, lsr #2
9001193e:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011942:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011946:	ea4f 1242 	mov.w	r2, r2, lsl #5
9001194a:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
9001194e:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
90011952:	f825 2c02 	strh.w	r2, [r5, #-2]
            ycomp = (int32_t)(*(pLum +j +8));
90011956:	f894 a006 	ldrb.w	sl, [r4, #6]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001195a:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001195e:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011962:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011964:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011968:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001196c:	ea4f 0292 	mov.w	r2, r2, lsr #2
90011970:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011974:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011978:	ea4f 1242 	mov.w	r2, r2, lsl #5
9001197c:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90011980:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 = 
90011984:	f826 2c04 	strh.w	r2, [r6, #-4]
            ycomp = (int32_t)(*(pLum +j +8 +1));
90011988:	79e2      	ldrb	r2, [r4, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001198a:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001198c:	4410      	add	r0, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9001198e:	4411      	add	r1, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011990:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011994:	f890 2100 	ldrb.w	r2, [r0, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011998:	ea4f 0393 	mov.w	r3, r3, lsr #2
9001199c:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900119a0:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900119a4:	ea4f 1343 	mov.w	r3, r3, lsl #5
900119a8:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
900119ac:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
900119b0:	f826 3c02 	strh.w	r3, [r6, #-2]
          for(j=0; j < 8; j+=2)
900119b4:	d185      	bne.n	900118c2 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xc2>
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
900119b6:	9b02      	ldr	r3, [sp, #8]
        for(k= 0; k<2; k++)
900119b8:	f105 0c10 	add.w	ip, r5, #16
          pLum += 64;                      
900119bc:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
900119c0:	3310      	adds	r3, #16
900119c2:	9302      	str	r3, [sp, #8]
            pChrom++;
900119c4:	9b03      	ldr	r3, [sp, #12]
900119c6:	3304      	adds	r3, #4
900119c8:	9303      	str	r3, [sp, #12]
        for(k= 0; k<2; k++)
900119ca:	9b07      	ldr	r3, [sp, #28]
900119cc:	4563      	cmp	r3, ip
900119ce:	f47f af72 	bne.w	900118b6 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb6>
            pChrom++;
900119d2:	9b06      	ldr	r3, [sp, #24]
900119d4:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
900119d8:	3308      	adds	r3, #8
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
900119da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    for(i= 0; i <  16; i+=2)
900119dc:	f1be 0f10 	cmp.w	lr, #16
            pChrom++;
900119e0:	9306      	str	r3, [sp, #24]
        pLum = pLum - 128 + 16;
900119e2:	9b04      	ldr	r3, [sp, #16]
900119e4:	f103 0310 	add.w	r3, r3, #16
900119e8:	9304      	str	r3, [sp, #16]
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
900119ea:	9b01      	ldr	r3, [sp, #4]
900119ec:	4413      	add	r3, r2
900119ee:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
900119f0:	f47f af45 	bne.w	9001187e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
900119f4:	9b08      	ldr	r3, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
900119f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
900119f8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
900119fc:	9308      	str	r3, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
900119fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90011a00:	4293      	cmp	r3, r2
90011a02:	f47f af1c 	bne.w	9001183e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3e>
  }
  return numberMCU;
}
90011a06:	ee17 0a90 	vmov	r0, s15
90011a0a:	b011      	add	sp, #68	; 0x44
90011a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011a10:	aaaaaaab 	.word	0xaaaaaaab
90011a14:	24028148 	.word	0x24028148
90011a18:	24027548 	.word	0x24027548
90011a1c:	24027148 	.word	0x24027148
90011a20:	24027d48 	.word	0x24027d48
90011a24:	24027948 	.word	0x24027948
90011a28:	9002b4c4 	.word	0x9002b4c4

90011a2c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
90011a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90011a30:	0a1c      	lsrs	r4, r3, #8
{  
90011a32:	b08d      	sub	sp, #52	; 0x34
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
90011a34:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90011a38:	ee07 4a90 	vmov	s15, r4
{  
90011a3c:	9208      	str	r2, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
90011a3e:	429a      	cmp	r2, r3
{  
90011a40:	9007      	str	r0, [sp, #28]
90011a42:	9109      	str	r1, [sp, #36]	; 0x24
  while(currentMCU < (numberMCU + BlockIndex))
90011a44:	930b      	str	r3, [sp, #44]	; 0x2c
90011a46:	f080 814a 	bcs.w	90011cde <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90011a4a:	4ba7      	ldr	r3, [pc, #668]	; (90011ce8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2bc>)
90011a4c:	4da7      	ldr	r5, [pc, #668]	; (90011cec <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c0>)
90011a4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90011a50:	f8df 929c 	ldr.w	r9, [pc, #668]	; 90011cf0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c4>
90011a54:	920a      	str	r2, [sp, #40]	; 0x28
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011a56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90011a58:	691b      	ldr	r3, [r3, #16]
90011a5a:	f8df a298 	ldr.w	sl, [pc, #664]	; 90011cf4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c8>
90011a5e:	f8df b298 	ldr.w	fp, [pc, #664]	; 90011cf8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2cc>
90011a62:	f8df 8298 	ldr.w	r8, [pc, #664]	; 90011cfc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d0>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011a66:	9206      	str	r2, [sp, #24]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90011a68:	9301      	str	r3, [sp, #4]
90011a6a:	e008      	b.n	90011a7e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x52>
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90011a6c:	9b07      	ldr	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90011a6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90011a70:	f503 7380 	add.w	r3, r3, #256	; 0x100
90011a74:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90011a76:	9b08      	ldr	r3, [sp, #32]
90011a78:	4293      	cmp	r3, r2
90011a7a:	f000 8130 	beq.w	90011cde <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90011a7e:	9a07      	ldr	r2, [sp, #28]
90011a80:	9908      	ldr	r1, [sp, #32]
90011a82:	f102 0080 	add.w	r0, r2, #128	; 0x80
90011a86:	010b      	lsls	r3, r1, #4
90011a88:	3101      	adds	r1, #1
    currentMCU++;
90011a8a:	e9cd 0202 	strd	r0, r2, [sp, #8]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90011a8e:	980a      	ldr	r0, [sp, #40]	; 0x28
90011a90:	9108      	str	r1, [sp, #32]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011a92:	9906      	ldr	r1, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90011a94:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
90011a98:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011a9c:	fb01 f202 	mul.w	r2, r1, r2
90011aa0:	005b      	lsls	r3, r3, #1
90011aa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
90011aa6:	9300      	str	r3, [sp, #0]
    currentMCU++;
90011aa8:	2308      	movs	r3, #8
90011aaa:	9305      	str	r3, [sp, #20]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90011aac:	e9dd 2300 	ldrd	r2, r3, [sp]
90011ab0:	4293      	cmp	r3, r2
90011ab2:	d9db      	bls.n	90011a6c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
        pOutAddr = pOutBuffer + refline;
90011ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
90011ab6:	4413      	add	r3, r2
        for(k= 0; k<2; k++)
90011ab8:	9a03      	ldr	r2, [sp, #12]
90011aba:	f102 0140 	add.w	r1, r2, #64	; 0x40
90011abe:	9a02      	ldr	r2, [sp, #8]
90011ac0:	f103 0020 	add.w	r0, r3, #32
90011ac4:	3204      	adds	r2, #4
90011ac6:	9004      	str	r0, [sp, #16]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011ac8:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
90011acc:	3310      	adds	r3, #16
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011ace:	f812 4c04 	ldrb.w	r4, [r2, #-4]
        for(k= 0; k<2; k++)
90011ad2:	3140      	adds	r1, #64	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011ad4:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
        for(k= 0; k<2; k++)
90011ad8:	3204      	adds	r2, #4
            ycomp = (int32_t)(*(pLum +j));
90011ada:	f811 cc80 	ldrb.w	ip, [r1, #-128]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011ade:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011ae2:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011ae4:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90011ae8:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011aec:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011aee:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011af0:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011af4:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011af8:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011afc:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011b00:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011b02:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011b06:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90011b0a:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90011b0e:	08e4      	lsrs	r4, r4, #3
90011b10:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90011b14:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90011b18:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90011b1c:	f823 4c10 	strh.w	r4, [r3, #-16]
            ycomp = (int32_t)(*(pLum +j +1));
90011b20:	f811 4c7f 	ldrb.w	r4, [r1, #-127]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
90011b24:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011b26:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011b28:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011b2a:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011b2e:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90011b32:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011b36:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011b38:	08c0      	lsrs	r0, r0, #3
90011b3a:	08a4      	lsrs	r4, r4, #2
90011b3c:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90011b40:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
90011b44:	f823 0c0e 	strh.w	r0, [r3, #-14]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011b48:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011b4c:	f812 4c07 	ldrb.w	r4, [r2, #-7]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011b50:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90011b54:	f811 cc7e 	ldrb.w	ip, [r1, #-126]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011b58:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011b5c:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011b5e:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90011b62:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011b66:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011b68:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011b6a:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011b6e:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011b72:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011b76:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011b7a:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011b7c:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011b80:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90011b84:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90011b88:	08e4      	lsrs	r4, r4, #3
90011b8a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90011b8e:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90011b92:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90011b96:	f823 4c0c 	strh.w	r4, [r3, #-12]
            ycomp = (int32_t)(*(pLum +j +1));
90011b9a:	f811 4c7d 	ldrb.w	r4, [r1, #-125]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
90011b9e:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011ba0:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011ba2:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011ba4:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011ba8:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90011bac:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011bb0:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011bb2:	08c0      	lsrs	r0, r0, #3
90011bb4:	08a4      	lsrs	r4, r4, #2
90011bb6:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90011bba:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
90011bbe:	f823 0c0a 	strh.w	r0, [r3, #-10]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011bc2:	f812 4c06 	ldrb.w	r4, [r2, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011bc6:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90011bca:	f811 cc7c 	ldrb.w	ip, [r1, #-124]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011bce:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011bd2:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011bd6:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011bda:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011bdc:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011be0:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011be2:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011be4:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011be8:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011bec:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011bf0:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011bf4:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011bf6:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011bfa:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90011bfe:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90011c02:	08e4      	lsrs	r4, r4, #3
90011c04:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90011c08:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90011c0c:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90011c10:	f823 4c08 	strh.w	r4, [r3, #-8]
            ycomp = (int32_t)(*(pLum +j +1));
90011c14:	f811 4c7b 	ldrb.w	r4, [r1, #-123]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
90011c18:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011c1a:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011c1c:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011c1e:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011c22:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90011c26:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011c2a:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011c2c:	08c0      	lsrs	r0, r0, #3
90011c2e:	08a4      	lsrs	r4, r4, #2
90011c30:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90011c34:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
90011c38:	f823 0c06 	strh.w	r0, [r3, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011c3c:	f892 003b 	ldrb.w	r0, [r2, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011c40:	f812 4c05 	ldrb.w	r4, [r2, #-5]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011c44:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90011c48:	f811 cc7a 	ldrb.w	ip, [r1, #-122]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011c4c:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011c50:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011c52:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90011c56:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011c5a:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011c5c:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011c5e:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011c62:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011c66:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011c6a:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011c6e:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011c70:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011c74:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90011c78:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90011c7c:	08e4      	lsrs	r4, r4, #3
90011c7e:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90011c82:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90011c86:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90011c8a:	f823 4c04 	strh.w	r4, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90011c8e:	f811 4c79 	ldrb.w	r4, [r1, #-121]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
90011c92:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011c94:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011c96:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011c98:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011c9c:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90011ca0:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011ca4:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011ca6:	08c0      	lsrs	r0, r0, #3
90011ca8:	08a4      	lsrs	r4, r4, #2
90011caa:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90011cae:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
90011cb2:	f823 0c02 	strh.w	r0, [r3, #-2]
        for(k= 0; k<2; k++)
90011cb6:	9804      	ldr	r0, [sp, #16]
90011cb8:	4283      	cmp	r3, r0
90011cba:	f47f af05 	bne.w	90011ac8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9c>
            pChrom++;
90011cbe:	9b02      	ldr	r3, [sp, #8]
        refline += JPEG_ConvertorParams.ScaledWidth;          
90011cc0:	9a06      	ldr	r2, [sp, #24]
            pChrom++;
90011cc2:	3308      	adds	r3, #8
90011cc4:	9302      	str	r3, [sp, #8]
        pLum = pLum - 128 + 8;
90011cc6:	9b03      	ldr	r3, [sp, #12]
90011cc8:	3308      	adds	r3, #8
90011cca:	9303      	str	r3, [sp, #12]
        refline += JPEG_ConvertorParams.ScaledWidth;          
90011ccc:	9b00      	ldr	r3, [sp, #0]
90011cce:	4413      	add	r3, r2
90011cd0:	9300      	str	r3, [sp, #0]
    for(i= 0; i <  8; i++)
90011cd2:	9b05      	ldr	r3, [sp, #20]
90011cd4:	3b01      	subs	r3, #1
90011cd6:	9305      	str	r3, [sp, #20]
90011cd8:	f47f aee8 	bne.w	90011aac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
90011cdc:	e6c6      	b.n	90011a6c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
  }
  return numberMCU;
}
90011cde:	ee17 0a90 	vmov	r0, s15
90011ce2:	b00d      	add	sp, #52	; 0x34
90011ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011ce8:	24028148 	.word	0x24028148
90011cec:	24027148 	.word	0x24027148
90011cf0:	24027d48 	.word	0x24027d48
90011cf4:	24027948 	.word	0x24027948
90011cf8:	24027548 	.word	0x24027548
90011cfc:	9002b4c4 	.word	0x9002b4c4

90011d00 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
90011d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90011d04:	4cb6      	ldr	r4, [pc, #728]	; (90011fe0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e0>)
{  
90011d06:	b089      	sub	sp, #36	; 0x24
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90011d08:	fba4 4303 	umull	r4, r3, r4, r3
{  
90011d0c:	9102      	str	r1, [sp, #8]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90011d0e:	09d9      	lsrs	r1, r3, #7
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
90011d10:	eb02 13d3 	add.w	r3, r2, r3, lsr #7
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90011d14:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
90011d18:	429a      	cmp	r2, r3
90011d1a:	9306      	str	r3, [sp, #24]
{  
90011d1c:	e9cd 0204 	strd	r0, r2, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
90011d20:	f080 8158 	bcs.w	90011fd4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90011d24:	4baf      	ldr	r3, [pc, #700]	; (90011fe4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e4>)
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)  
            
            ycomp = (int32_t)(*(pLum +j));
          
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011d26:	4cb0      	ldr	r4, [pc, #704]	; (90011fe8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e8>)
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90011d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011d2a:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 90011ff0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f0>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90011d2e:	9207      	str	r2, [sp, #28]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011d30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90011d32:	691b      	ldr	r3, [r3, #16]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011d34:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 90011ff4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f4>
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011d38:	48ac      	ldr	r0, [pc, #688]	; (90011fec <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2ec>)
90011d3a:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 90011ff8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f8>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011d3e:	9203      	str	r2, [sp, #12]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90011d40:	9300      	str	r3, [sp, #0]
90011d42:	e007      	b.n	90011d54 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x54>

        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
90011d44:	9b04      	ldr	r3, [sp, #16]
90011d46:	33c0      	adds	r3, #192	; 0xc0
90011d48:	9304      	str	r3, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
90011d4a:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
90011d4e:	4293      	cmp	r3, r2
90011d50:	f000 8140 	beq.w	90011fd4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90011d54:	9e05      	ldr	r6, [sp, #20]
90011d56:	9f07      	ldr	r7, [sp, #28]
90011d58:	00f2      	lsls	r2, r6, #3
90011d5a:	3601      	adds	r6, #1
90011d5c:	9904      	ldr	r1, [sp, #16]
90011d5e:	9605      	str	r6, [sp, #20]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011d60:	9e03      	ldr	r6, [sp, #12]
90011d62:	f101 0340 	add.w	r3, r1, #64	; 0x40
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90011d66:	fbb2 f5f7 	udiv	r5, r2, r7
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90011d6a:	fb07 2215 	mls	r2, r7, r5, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011d6e:	fb06 f505 	mul.w	r5, r6, r5
90011d72:	0052      	lsls	r2, r2, #1
90011d74:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
    currentMCU++;   
90011d78:	2508      	movs	r5, #8
90011d7a:	9501      	str	r5, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90011d7c:	9d00      	ldr	r5, [sp, #0]
90011d7e:	4295      	cmp	r5, r2
90011d80:	d9e0      	bls.n	90011d44 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011d82:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
          pLum += 8;
90011d86:	3108      	adds	r1, #8
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011d88:	f893 9000 	ldrb.w	r9, [r3]
            pChrom++;
90011d8c:	3308      	adds	r3, #8
            ycomp = (int32_t)(*(pLum +j));
90011d8e:	f811 5c08 	ldrb.w	r5, [r1, #-8]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011d92:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011d96:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
90011d9a:	4425      	add	r5, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011d9c:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011da0:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011da4:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011da6:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011da8:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011daa:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011dae:	eb05 4929 	add.w	r9, r5, r9, asr #16
90011db2:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011db6:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011db8:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
90011dbc:	08ed      	lsrs	r5, r5, #3
90011dbe:	08bf      	lsrs	r7, r7, #2
90011dc0:	ea45 25c6 	orr.w	r5, r5, r6, lsl #11
            *(__IO uint16_t *)pOutAddr = 
90011dc4:	9e02      	ldr	r6, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011dc6:	ea45 1547 	orr.w	r5, r5, r7, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90011dca:	52b5      	strh	r5, [r6, r2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011dcc:	f893 7039 	ldrb.w	r7, [r3, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011dd0:	f813 9c07 	ldrb.w	r9, [r3, #-7]
            ycomp = (int32_t)(*(pLum +j));
90011dd4:	f811 5c07 	ldrb.w	r5, [r1, #-7]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011dd8:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011ddc:	4425      	add	r5, r4
90011dde:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011de2:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011de6:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011dea:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011dec:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011dee:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011df0:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011df4:	eb05 4929 	add.w	r9, r5, r9, asr #16
90011df8:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011dfc:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011dfe:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
90011e02:	08ed      	lsrs	r5, r5, #3
90011e04:	08bf      	lsrs	r7, r7, #2
90011e06:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
        pOutAddr = pOutBuffer+ refline;
90011e0a:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011e0c:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
        pOutAddr = pOutBuffer+ refline;
90011e10:	4415      	add	r5, r2
            *(__IO uint16_t *)pOutAddr = 
90011e12:	806e      	strh	r6, [r5, #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011e14:	f893 a03a 	ldrb.w	sl, [r3, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90011e18:	f811 7c06 	ldrb.w	r7, [r1, #-6]
        refline += JPEG_ConvertorParams.ScaledWidth;          
90011e1c:	9e03      	ldr	r6, [sp, #12]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011e1e:	4427      	add	r7, r4
90011e20:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
        refline += JPEG_ConvertorParams.ScaledWidth;          
90011e24:	4432      	add	r2, r6
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011e26:	f813 6c06 	ldrb.w	r6, [r3, #-6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011e2a:	44b9      	add	r9, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011e2c:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011e30:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011e34:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011e38:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011e3c:	44ba      	add	sl, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011e3e:	ea4f 09d9 	mov.w	r9, r9, lsr #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011e42:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011e44:	eb07 4626 	add.w	r6, r7, r6, asr #16
90011e48:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
90011e4c:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90011e50:	08fe      	lsrs	r6, r7, #3
90011e52:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90011e56:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90011e5a:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90011e5e:	80ae      	strh	r6, [r5, #4]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011e60:	f893 a03b 	ldrb.w	sl, [r3, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011e64:	f813 6c05 	ldrb.w	r6, [r3, #-5]
            ycomp = (int32_t)(*(pLum +j));
90011e68:	f811 7c05 	ldrb.w	r7, [r1, #-5]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011e6c:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011e70:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90011e74:	4427      	add	r7, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011e76:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011e7a:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011e7e:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011e80:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011e82:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011e84:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011e88:	eb07 4626 	add.w	r6, r7, r6, asr #16
90011e8c:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011e90:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011e94:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90011e98:	08fe      	lsrs	r6, r7, #3
90011e9a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90011e9e:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90011ea2:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90011ea6:	80ee      	strh	r6, [r5, #6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011ea8:	f893 a03c 	ldrb.w	sl, [r3, #60]	; 0x3c
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011eac:	f813 6c04 	ldrb.w	r6, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j));
90011eb0:	f811 7c04 	ldrb.w	r7, [r1, #-4]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011eb4:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011eb8:	4427      	add	r7, r4
90011eba:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011ebe:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011ec2:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011ec6:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011ec8:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011eca:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011ecc:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011ed0:	eb07 4626 	add.w	r6, r7, r6, asr #16
90011ed4:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011ed8:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011edc:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90011ee0:	08fe      	lsrs	r6, r7, #3
90011ee2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90011ee6:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90011eea:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90011eee:	812e      	strh	r6, [r5, #8]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011ef0:	f893 a03d 	ldrb.w	sl, [r3, #61]	; 0x3d
            ycomp = (int32_t)(*(pLum +j));
90011ef4:	f811 7c03 	ldrb.w	r7, [r1, #-3]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011ef8:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90011efc:	4427      	add	r7, r4
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011efe:	f813 6c03 	ldrb.w	r6, [r3, #-3]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011f02:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f06:	44b9      	add	r9, r7
90011f08:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011f0c:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011f10:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f14:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011f18:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011f1a:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011f1c:	eb07 4626 	add.w	r6, r7, r6, asr #16
90011f20:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
90011f24:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90011f28:	08fe      	lsrs	r6, r7, #3
90011f2a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90011f2e:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90011f32:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90011f36:	816e      	strh	r6, [r5, #10]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011f38:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011f3c:	f813 6c02 	ldrb.w	r6, [r3, #-2]
            ycomp = (int32_t)(*(pLum +j));
90011f40:	f811 7c02 	ldrb.w	r7, [r1, #-2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011f44:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f48:	4427      	add	r7, r4
90011f4a:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011f4e:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011f52:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f56:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011f58:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011f5a:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f5c:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011f60:	eb07 4626 	add.w	r6, r7, r6, asr #16
90011f64:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f68:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011f6c:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90011f70:	08fe      	lsrs	r6, r7, #3
90011f72:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90011f76:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90011f7a:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90011f7e:	81ae      	strh	r6, [r5, #12]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011f80:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011f84:	f813 6c01 	ldrb.w	r6, [r3, #-1]
            ycomp = (int32_t)(*(pLum +j));
90011f88:	f811 7c01 	ldrb.w	r7, [r1, #-1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f8c:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90011f90:	4427      	add	r7, r4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011f92:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011f96:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011f9a:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f9e:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90011fa0:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011fa2:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011fa4:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011fa8:	eb07 4626 	add.w	r6, r7, r6, asr #16
90011fac:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011fb0:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011fb4:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90011fb8:	08fe      	lsrs	r6, r7, #3
90011fba:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90011fbe:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90011fc2:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90011fc6:	81ee      	strh	r6, [r5, #14]
    for(i= 0; i <  8; i++)
90011fc8:	9d01      	ldr	r5, [sp, #4]
90011fca:	3d01      	subs	r5, #1
90011fcc:	9501      	str	r5, [sp, #4]
90011fce:	f47f aed5 	bne.w	90011d7c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x7c>
90011fd2:	e6b7      	b.n	90011d44 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
  }
  return numberMCU;
}
90011fd4:	ee17 0a90 	vmov	r0, s15
90011fd8:	b009      	add	sp, #36	; 0x24
90011fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011fde:	bf00      	nop
90011fe0:	aaaaaaab 	.word	0xaaaaaaab
90011fe4:	24028148 	.word	0x24028148
90011fe8:	9002b4c4 	.word	0x9002b4c4
90011fec:	24027948 	.word	0x24027948
90011ff0:	24027d48 	.word	0x24027d48
90011ff4:	24027148 	.word	0x24027148
90011ff8:	24027548 	.word	0x24027548

90011ffc <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90011ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
  currentMCU = BlockIndex;
  
  while(currentMCU < (numberMCU + BlockIndex))
90012000:	eb02 1a93 	add.w	sl, r2, r3, lsr #6
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90012004:	099c      	lsrs	r4, r3, #6
  while(currentMCU < (numberMCU + BlockIndex))
90012006:	4552      	cmp	r2, sl
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90012008:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
9001200c:	f080 8088 	bcs.w	90012120 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90012010:	4b45      	ldr	r3, [pc, #276]	; (90012128 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x12c>)
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90012012:	e9d3 9809 	ldrd	r9, r8, [r3, #36]	; 0x24
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    { 
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90012016:	691e      	ldr	r6, [r3, #16]
90012018:	e003      	b.n	90012022 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x26>
  while(currentMCU < (numberMCU + BlockIndex))
9001201a:	4552      	cmp	r2, sl

        refline += JPEG_ConvertorParams.ScaledWidth;        
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
9001201c:	f100 0040 	add.w	r0, r0, #64	; 0x40
  while(currentMCU < (numberMCU + BlockIndex))
90012020:	d07e      	beq.n	90012120 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90012022:	00d3      	lsls	r3, r2, #3
    currentMCU++;
90012024:	4604      	mov	r4, r0
90012026:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9001202a:	3201      	adds	r2, #1
9001202c:	fbb3 f5f9 	udiv	r5, r3, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90012030:	fb09 3315 	mls	r3, r9, r5, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90012034:	fb08 f505 	mul.w	r5, r8, r5
90012038:	005b      	lsls	r3, r3, #1
9001203a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9001203e:	429e      	cmp	r6, r3
90012040:	d9eb      	bls.n	9001201a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
          ySample =   (uint32_t)(*pLum);
90012042:	f894 c000 	ldrb.w	ip, [r4]
      pOutAddr = pOutBuffer + refline;
90012046:	18cd      	adds	r5, r1, r3
          pLum++;
90012048:	3408      	adds	r4, #8
    for(i= 0; i <  8; i++)
9001204a:	f1be 0e01 	subs.w	lr, lr, #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9001204e:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90012052:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90012056:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9001205a:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9001205e:	ea47 070c 	orr.w	r7, r7, ip
90012062:	52cf      	strh	r7, [r1, r3]
        refline += JPEG_ConvertorParams.ScaledWidth;        
90012064:	4443      	add	r3, r8
          ySample =   (uint32_t)(*pLum);
90012066:	f814 cc07 	ldrb.w	ip, [r4, #-7]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9001206a:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9001206e:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90012072:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90012076:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9001207a:	ea47 070c 	orr.w	r7, r7, ip
9001207e:	806f      	strh	r7, [r5, #2]
          ySample =   (uint32_t)(*pLum);
90012080:	f814 cc06 	ldrb.w	ip, [r4, #-6]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90012084:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90012088:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9001208c:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90012090:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90012094:	ea47 070c 	orr.w	r7, r7, ip
90012098:	80af      	strh	r7, [r5, #4]
          ySample =   (uint32_t)(*pLum);
9001209a:	f814 cc05 	ldrb.w	ip, [r4, #-5]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9001209e:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900120a2:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900120a6:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900120aa:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900120ae:	ea47 070c 	orr.w	r7, r7, ip
900120b2:	80ef      	strh	r7, [r5, #6]
          ySample =   (uint32_t)(*pLum);
900120b4:	f814 cc04 	ldrb.w	ip, [r4, #-4]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
900120b8:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900120bc:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900120c0:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900120c4:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900120c8:	ea47 070c 	orr.w	r7, r7, ip
900120cc:	812f      	strh	r7, [r5, #8]
          ySample =   (uint32_t)(*pLum);
900120ce:	f814 cc03 	ldrb.w	ip, [r4, #-3]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
900120d2:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900120d6:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900120da:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900120de:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900120e2:	ea47 070c 	orr.w	r7, r7, ip
900120e6:	816f      	strh	r7, [r5, #10]
          ySample =   (uint32_t)(*pLum);
900120e8:	f814 cc02 	ldrb.w	ip, [r4, #-2]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
900120ec:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900120f0:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900120f4:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900120f8:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900120fc:	ea47 070c 	orr.w	r7, r7, ip
90012100:	81af      	strh	r7, [r5, #12]
          ySample =   (uint32_t)(*pLum);
90012102:	f814 cc01 	ldrb.w	ip, [r4, #-1]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90012106:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9001210a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9001210e:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90012112:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90012116:	ea47 070c 	orr.w	r7, r7, ip
9001211a:	81ef      	strh	r7, [r5, #14]
    for(i= 0; i <  8; i++)
9001211c:	d18f      	bne.n	9001203e <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
9001211e:	e77c      	b.n	9001201a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
  }
  return numberMCU;
}
90012120:	ee17 0a90 	vmov	r0, s15
90012124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90012128:	24028148 	.word	0x24028148

9001212c <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
9001212c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
90012130:	0a1c      	lsrs	r4, r3, #8
{  
90012132:	b083      	sub	sp, #12
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
90012134:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
90012138:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
9001213c:	429a      	cmp	r2, r3
9001213e:	9300      	str	r3, [sp, #0]
90012140:	f080 8129 	bcs.w	90012396 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90012144:	4b96      	ldr	r3, [pc, #600]	; (900123a0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x274>)
        pOutAddr = pOutBuffer+ refline;        

          for(j=0; j < 8; j++)
          {           
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90012146:	f8df c25c 	ldr.w	ip, [pc, #604]	; 900123a4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x278>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9001214a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9001214c:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90012150:	691e      	ldr	r6, [r3, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90012152:	9401      	str	r4, [sp, #4]
90012154:	e005      	b.n	90012162 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x36>
  while(currentMCU < (numberMCU + BlockIndex))
90012156:	9b00      	ldr	r3, [sp, #0]

        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
90012158:	f500 7080 	add.w	r0, r0, #256	; 0x100
  while(currentMCU < (numberMCU + BlockIndex))
9001215c:	429a      	cmp	r2, r3
9001215e:	f000 811a 	beq.w	90012396 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90012162:	00d3      	lsls	r3, r2, #3
90012164:	9c01      	ldr	r4, [sp, #4]
90012166:	3201      	adds	r2, #1
    currentMCU++;
90012168:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9001216c:	fbb3 f5f4 	udiv	r5, r3, r4
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90012170:	fb04 3415 	mls	r4, r4, r5, r3
    currentMCU++;
90012174:	4603      	mov	r3, r0
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90012176:	fb08 f505 	mul.w	r5, r8, r5
9001217a:	0064      	lsls	r4, r4, #1
9001217c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90012180:	42a6      	cmp	r6, r4
90012182:	d9e8      	bls.n	90012156 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
            color_k = (int32_t)(*(pChrom + 192));
90012184:	f893 a0c0 	ldrb.w	sl, [r3, #192]	; 0xc0
        pOutAddr = pOutBuffer+ refline;        
90012188:	190f      	adds	r7, r1, r4
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9001218a:	f893 9040 	ldrb.w	r9, [r3, #64]	; 0x40
    for(i= 0; i <  8; i++)
9001218e:	f1be 0e01 	subs.w	lr, lr, #1
            pChrom++;
90012192:	f103 0308 	add.w	r3, r3, #8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90012196:	fb19 f90a 	smulbb	r9, r9, sl
9001219a:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001219e:	f813 5c08 	ldrb.w	r5, [r3, #-8]
900121a2:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900121a6:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900121aa:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900121ae:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900121b2:	ea4f 2595 	mov.w	r5, r5, lsr #10
900121b6:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900121ba:	f893 9078 	ldrb.w	r9, [r3, #120]	; 0x78
900121be:	fb19 f90a 	smulbb	r9, r9, sl
900121c2:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900121c6:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900121ca:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
900121cc:	530d      	strh	r5, [r1, r4]
        refline += JPEG_ConvertorParams.ScaledWidth;          
900121ce:	4444      	add	r4, r8
            color_k = (int32_t)(*(pChrom + 192));
900121d0:	f893 a0b9 	ldrb.w	sl, [r3, #185]	; 0xb9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900121d4:	f893 9039 	ldrb.w	r9, [r3, #57]	; 0x39
900121d8:	fb19 f90a 	smulbb	r9, r9, sl
900121dc:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900121e0:	f813 5c07 	ldrb.w	r5, [r3, #-7]
900121e4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900121e8:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900121ec:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900121f0:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900121f4:	ea4f 2595 	mov.w	r5, r5, lsr #10
900121f8:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900121fc:	f893 9079 	ldrb.w	r9, [r3, #121]	; 0x79
90012200:	fb19 f90a 	smulbb	r9, r9, sl
90012204:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012208:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9001220c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9001220e:	807d      	strh	r5, [r7, #2]
            color_k = (int32_t)(*(pChrom + 192));
90012210:	f893 a0ba 	ldrb.w	sl, [r3, #186]	; 0xba
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90012214:	f893 903a 	ldrb.w	r9, [r3, #58]	; 0x3a
90012218:	fb19 f90a 	smulbb	r9, r9, sl
9001221c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90012220:	f813 5c06 	ldrb.w	r5, [r3, #-6]
90012224:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012228:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001222c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012230:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90012234:	ea4f 2595 	mov.w	r5, r5, lsr #10
90012238:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9001223c:	f893 907a 	ldrb.w	r9, [r3, #122]	; 0x7a
90012240:	fb19 f90a 	smulbb	r9, r9, sl
90012244:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012248:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9001224c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9001224e:	80bd      	strh	r5, [r7, #4]
            color_k = (int32_t)(*(pChrom + 192));
90012250:	f893 a0bb 	ldrb.w	sl, [r3, #187]	; 0xbb
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90012254:	f893 903b 	ldrb.w	r9, [r3, #59]	; 0x3b
90012258:	fb19 f90a 	smulbb	r9, r9, sl
9001225c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90012260:	f813 5c05 	ldrb.w	r5, [r3, #-5]
90012264:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012268:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001226c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012270:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90012274:	ea4f 2595 	mov.w	r5, r5, lsr #10
90012278:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9001227c:	f893 907b 	ldrb.w	r9, [r3, #123]	; 0x7b
90012280:	fb19 f90a 	smulbb	r9, r9, sl
90012284:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012288:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9001228c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9001228e:	80fd      	strh	r5, [r7, #6]
            color_k = (int32_t)(*(pChrom + 192));
90012290:	f893 a0bc 	ldrb.w	sl, [r3, #188]	; 0xbc
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90012294:	f893 903c 	ldrb.w	r9, [r3, #60]	; 0x3c
90012298:	fb19 f90a 	smulbb	r9, r9, sl
9001229c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900122a0:	f813 5c04 	ldrb.w	r5, [r3, #-4]
900122a4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900122a8:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900122ac:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900122b0:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900122b4:	ea4f 2595 	mov.w	r5, r5, lsr #10
900122b8:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900122bc:	f893 907c 	ldrb.w	r9, [r3, #124]	; 0x7c
900122c0:	fb19 f90a 	smulbb	r9, r9, sl
900122c4:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900122c8:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900122cc:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
900122ce:	813d      	strh	r5, [r7, #8]
            color_k = (int32_t)(*(pChrom + 192));
900122d0:	f893 a0bd 	ldrb.w	sl, [r3, #189]	; 0xbd
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900122d4:	f893 903d 	ldrb.w	r9, [r3, #61]	; 0x3d
900122d8:	fb19 f90a 	smulbb	r9, r9, sl
900122dc:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900122e0:	f813 5c03 	ldrb.w	r5, [r3, #-3]
900122e4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900122e8:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900122ec:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900122f0:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900122f4:	ea4f 2595 	mov.w	r5, r5, lsr #10
900122f8:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900122fc:	f893 907d 	ldrb.w	r9, [r3, #125]	; 0x7d
90012300:	fb19 f90a 	smulbb	r9, r9, sl
90012304:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012308:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9001230c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9001230e:	817d      	strh	r5, [r7, #10]
            color_k = (int32_t)(*(pChrom + 192));
90012310:	f893 a0be 	ldrb.w	sl, [r3, #190]	; 0xbe
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90012314:	f813 9c02 	ldrb.w	r9, [r3, #-2]
90012318:	fb19 f90a 	smulbb	r9, r9, sl
9001231c:	fbac 5909 	umull	r5, r9, ip, r9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90012320:	f893 503e 	ldrb.w	r5, [r3, #62]	; 0x3e
90012324:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90012328:	ea4f 2999 	mov.w	r9, r9, lsr #10
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9001232c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012330:	ea4f 2555 	mov.w	r5, r5, lsr #9
90012334:	ea4f 1545 	mov.w	r5, r5, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90012338:	ea45 25c9 	orr.w	r5, r5, r9, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9001233c:	f893 907e 	ldrb.w	r9, [r3, #126]	; 0x7e
90012340:	fb19 f90a 	smulbb	r9, r9, sl
90012344:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012348:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9001234c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9001234e:	81bd      	strh	r5, [r7, #12]
            color_k = (int32_t)(*(pChrom + 192));
90012350:	f893 a0bf 	ldrb.w	sl, [r3, #191]	; 0xbf
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90012354:	f893 903f 	ldrb.w	r9, [r3, #63]	; 0x3f
90012358:	fb19 f90a 	smulbb	r9, r9, sl
9001235c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90012360:	f813 5c01 	ldrb.w	r5, [r3, #-1]
90012364:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012368:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001236c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012370:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90012374:	ea4f 2595 	mov.w	r5, r5, lsr #10
90012378:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9001237c:	f893 907f 	ldrb.w	r9, [r3, #127]	; 0x7f
90012380:	fb19 f90a 	smulbb	r9, r9, sl
90012384:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012388:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9001238c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9001238e:	81fd      	strh	r5, [r7, #14]
    for(i= 0; i <  8; i++)
90012390:	f47f aef6 	bne.w	90012180 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x54>
90012394:	e6df      	b.n	90012156 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
  }
  return numberMCU;
}
90012396:	ee17 0a90 	vmov	r0, s15
9001239a:	b003      	add	sp, #12
9001239c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900123a0:	24028148 	.word	0x24028148
900123a4:	80808081 	.word	0x80808081

900123a8 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
900123a8:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
900123aa:	68c3      	ldr	r3, [r0, #12]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
900123ac:	6805      	ldr	r5, [r0, #0]
900123ae:	4c3e      	ldr	r4, [pc, #248]	; (900124a8 <JPEG_GetDecodeColorConvertFunc+0x100>)
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
900123b0:	2d10      	cmp	r5, #16
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
900123b2:	60a3      	str	r3, [r4, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
900123b4:	6025      	str	r5, [r4, #0]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
900123b6:	e9d0 7601 	ldrd	r7, r6, [r0, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
900123ba:	fb06 f003 	mul.w	r0, r6, r3
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
900123be:	60e6      	str	r6, [r4, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
900123c0:	ea4f 0040 	mov.w	r0, r0, lsl #1
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
900123c4:	6067      	str	r7, [r4, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
900123c6:	6120      	str	r0, [r4, #16]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
900123c8:	d027      	beq.n	9001241a <JPEG_GetDecodeColorConvertFunc+0x72>
      }
      JPEG_ConvertorParams.H_factor = 8;
      JPEG_ConvertorParams.V_factor  = 8;
    }   
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
900123ca:	b9ed      	cbnz	r5, 90012408 <JPEG_GetDecodeColorConvertFunc+0x60>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
900123cc:	4837      	ldr	r0, [pc, #220]	; (900124ac <JPEG_GetDecodeColorConvertFunc+0x104>)
900123ce:	6008      	str	r0, [r1, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
      
    if(JPEG_ConvertorParams.LineOffset != 0)
900123d0:	f013 0107 	ands.w	r1, r3, #7
900123d4:	d02b      	beq.n	9001242e <JPEG_GetDecodeColorConvertFunc+0x86>

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
      
    if(JPEG_ConvertorParams.LineOffset != 0)
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
900123d6:	f1c1 0108 	rsb	r1, r1, #8
      JPEG_ConvertorParams.H_factor = 16;
900123da:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
900123dc:	6161      	str	r1, [r4, #20]
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900123de:	4419      	add	r1, r3
900123e0:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
900123e2:	0059      	lsls	r1, r3, #1
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900123e4:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
900123e6:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
900123e8:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
900123ec:	3301      	adds	r3, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
900123ee:	fbb6 f1f5 	udiv	r1, r6, r5
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
900123f2:	fb05 6611 	mls	r6, r5, r1, r6
900123f6:	b106      	cbz	r6, 900123fa <JPEG_GetDecodeColorConvertFunc+0x52>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
900123f8:	3101      	adds	r1, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
900123fa:	fb01 f303 	mul.w	r3, r1, r3
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
900123fe:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
90012400:	62e3      	str	r3, [r4, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
90012402:	6013      	str	r3, [r2, #0]
}
90012404:	bcf0      	pop	{r4, r5, r6, r7}
90012406:	4770      	bx	lr
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
90012408:	2d30      	cmp	r5, #48	; 0x30
9001240a:	d119      	bne.n	90012440 <JPEG_GetDecodeColorConvertFunc+0x98>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
9001240c:	4828      	ldr	r0, [pc, #160]	; (900124b0 <JPEG_GetDecodeColorConvertFunc+0x108>)
9001240e:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
90012410:	f013 0107 	ands.w	r1, r3, #7
90012414:	d1df      	bne.n	900123d6 <JPEG_GetDecodeColorConvertFunc+0x2e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
90012416:	6161      	str	r1, [r4, #20]
90012418:	e00a      	b.n	90012430 <JPEG_GetDecodeColorConvertFunc+0x88>
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
9001241a:	2f01      	cmp	r7, #1
9001241c:	d024      	beq.n	90012468 <JPEG_GetDecodeColorConvertFunc+0xc0>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
9001241e:	2f02      	cmp	r7, #2
90012420:	d011      	beq.n	90012446 <JPEG_GetDecodeColorConvertFunc+0x9e>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
90012422:	4824      	ldr	r0, [pc, #144]	; (900124b4 <JPEG_GetDecodeColorConvertFunc+0x10c>)
90012424:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
90012426:	f013 0107 	ands.w	r1, r3, #7
9001242a:	d1d4      	bne.n	900123d6 <JPEG_GetDecodeColorConvertFunc+0x2e>
9001242c:	e7f3      	b.n	90012416 <JPEG_GetDecodeColorConvertFunc+0x6e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
9001242e:	6165      	str	r5, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012430:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.H_factor = 16;
90012432:	2508      	movs	r5, #8
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90012434:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90012436:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012438:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
9001243a:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
9001243e:	e7d6      	b.n	900123ee <JPEG_GetDecodeColorConvertFunc+0x46>
    return HAL_ERROR; /* Color space Not supported*/
90012440:	2001      	movs	r0, #1
}
90012442:	bcf0      	pop	{r4, r5, r6, r7}
90012444:	4770      	bx	lr
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
90012446:	481c      	ldr	r0, [pc, #112]	; (900124b8 <JPEG_GetDecodeColorConvertFunc+0x110>)
      JPEG_ConvertorParams.H_factor = 16;
90012448:	61e5      	str	r5, [r4, #28]
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
9001244a:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
9001244c:	f013 010f 	ands.w	r1, r3, #15
90012450:	d022      	beq.n	90012498 <JPEG_GetDecodeColorConvertFunc+0xf0>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
90012452:	f1c1 0110 	rsb	r1, r1, #16
      JPEG_ConvertorParams.V_factor  = 8;
90012456:	2508      	movs	r5, #8
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
90012458:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
9001245a:	4419      	add	r1, r3
      JPEG_ConvertorParams.V_factor  = 8;
9001245c:	6225      	str	r5, [r4, #32]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
9001245e:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012460:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90012462:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012464:	62a1      	str	r1, [r4, #40]	; 0x28
90012466:	e7c1      	b.n	900123ec <JPEG_GetDecodeColorConvertFunc+0x44>
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
90012468:	4814      	ldr	r0, [pc, #80]	; (900124bc <JPEG_GetDecodeColorConvertFunc+0x114>)
9001246a:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
9001246c:	f013 010f 	ands.w	r1, r3, #15
90012470:	d107      	bne.n	90012482 <JPEG_GetDecodeColorConvertFunc+0xda>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
90012472:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012474:	0059      	lsls	r1, r3, #1
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90012476:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90012478:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9001247a:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
9001247c:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
90012480:	e7b5      	b.n	900123ee <JPEG_GetDecodeColorConvertFunc+0x46>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
90012482:	f1c1 0110 	rsb	r1, r1, #16
90012486:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90012488:	4419      	add	r1, r3
9001248a:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9001248c:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9001248e:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012490:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
90012492:	e9c4 5507 	strd	r5, r5, [r4, #28]
90012496:	e7a9      	b.n	900123ec <JPEG_GetDecodeColorConvertFunc+0x44>
90012498:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
9001249a:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9001249c:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.V_factor  = 8;
9001249e:	e9c4 5308 	strd	r5, r3, [r4, #32]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
900124a2:	62a1      	str	r1, [r4, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900124a4:	091b      	lsrs	r3, r3, #4
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
900124a6:	e7a2      	b.n	900123ee <JPEG_GetDecodeColorConvertFunc+0x46>
900124a8:	24028148 	.word	0x24028148
900124ac:	90011ffd 	.word	0x90011ffd
900124b0:	9001212d 	.word	0x9001212d
900124b4:	90011d01 	.word	0x90011d01
900124b8:	90011a2d 	.word	0x90011a2d
900124bc:	90011801 	.word	0x90011801

900124c0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
900124c0:	8880      	ldrh	r0, [r0, #4]
900124c2:	4770      	bx	lr

900124c4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
900124c4:	b570      	push	{r4, r5, r6, lr}
900124c6:	6803      	ldr	r3, [r0, #0]
900124c8:	460c      	mov	r4, r1
900124ca:	2100      	movs	r1, #0
900124cc:	4605      	mov	r5, r0
900124ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900124d0:	4798      	blx	r3
900124d2:	4606      	mov	r6, r0
900124d4:	682b      	ldr	r3, [r5, #0]
900124d6:	4628      	mov	r0, r5
900124d8:	1ba4      	subs	r4, r4, r6
900124da:	6a1b      	ldr	r3, [r3, #32]
900124dc:	b2a4      	uxth	r4, r4
900124de:	4798      	blx	r3
900124e0:	fbb4 f0f0 	udiv	r0, r4, r0
900124e4:	bd70      	pop	{r4, r5, r6, pc}

900124e6 <_ZN8touchgfx17AbstractPartition5clearEv>:
900124e6:	2300      	movs	r3, #0
900124e8:	8083      	strh	r3, [r0, #4]
900124ea:	4770      	bx	lr

900124ec <_ZN8touchgfx17AbstractPartition8allocateEt>:
900124ec:	b510      	push	{r4, lr}
900124ee:	6803      	ldr	r3, [r0, #0]
900124f0:	4604      	mov	r4, r0
900124f2:	8881      	ldrh	r1, [r0, #4]
900124f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900124f6:	4798      	blx	r3
900124f8:	88a3      	ldrh	r3, [r4, #4]
900124fa:	3301      	adds	r3, #1
900124fc:	80a3      	strh	r3, [r4, #4]
900124fe:	bd10      	pop	{r4, pc}

90012500 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
90012500:	6803      	ldr	r3, [r0, #0]
90012502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90012504:	4718      	bx	r3

90012506 <_ZN8touchgfx17AbstractPartitionD1Ev>:
90012506:	4770      	bx	lr

90012508 <_ZN8touchgfx17AbstractPartitionC1Ev>:
90012508:	4a02      	ldr	r2, [pc, #8]	; (90012514 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
9001250a:	6002      	str	r2, [r0, #0]
9001250c:	2200      	movs	r2, #0
9001250e:	8082      	strh	r2, [r0, #4]
90012510:	4770      	bx	lr
90012512:	bf00      	nop
90012514:	9002b7cc 	.word	0x9002b7cc

90012518 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
90012518:	6a83      	ldr	r3, [r0, #40]	; 0x28
9001251a:	2000      	movs	r0, #0
9001251c:	b12b      	cbz	r3, 9001252a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
9001251e:	b920      	cbnz	r0, 9001252a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
90012520:	1a5a      	subs	r2, r3, r1
90012522:	699b      	ldr	r3, [r3, #24]
90012524:	4250      	negs	r0, r2
90012526:	4150      	adcs	r0, r2
90012528:	e7f8      	b.n	9001251c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
9001252a:	4770      	bx	lr

9001252c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
9001252c:	2300      	movs	r3, #0
9001252e:	6148      	str	r0, [r1, #20]
90012530:	618b      	str	r3, [r1, #24]
90012532:	6a83      	ldr	r3, [r0, #40]	; 0x28
90012534:	b913      	cbnz	r3, 9001253c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
90012536:	6281      	str	r1, [r0, #40]	; 0x28
90012538:	4770      	bx	lr
9001253a:	4613      	mov	r3, r2
9001253c:	699a      	ldr	r2, [r3, #24]
9001253e:	2a00      	cmp	r2, #0
90012540:	d1fb      	bne.n	9001253a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
90012542:	6199      	str	r1, [r3, #24]
90012544:	4770      	bx	lr

90012546 <_ZN8touchgfx9Container9removeAllEv>:
90012546:	2200      	movs	r2, #0
90012548:	6a83      	ldr	r3, [r0, #40]	; 0x28
9001254a:	b123      	cbz	r3, 90012556 <_ZN8touchgfx9Container9removeAllEv+0x10>
9001254c:	6999      	ldr	r1, [r3, #24]
9001254e:	6281      	str	r1, [r0, #40]	; 0x28
90012550:	e9c3 2205 	strd	r2, r2, [r3, #20]
90012554:	e7f8      	b.n	90012548 <_ZN8touchgfx9Container9removeAllEv+0x2>
90012556:	4770      	bx	lr

90012558 <_ZN8touchgfx9Container6unlinkEv>:
90012558:	2300      	movs	r3, #0
9001255a:	6283      	str	r3, [r0, #40]	; 0x28
9001255c:	4770      	bx	lr

9001255e <_ZNK8touchgfx9Container12getSolidRectEv>:
9001255e:	2200      	movs	r2, #0
90012560:	8002      	strh	r2, [r0, #0]
90012562:	8042      	strh	r2, [r0, #2]
90012564:	8082      	strh	r2, [r0, #4]
90012566:	80c2      	strh	r2, [r0, #6]
90012568:	4770      	bx	lr

9001256a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
9001256a:	b570      	push	{r4, r5, r6, lr}
9001256c:	460d      	mov	r5, r1
9001256e:	4616      	mov	r6, r2
90012570:	6a84      	ldr	r4, [r0, #40]	; 0x28
90012572:	b13c      	cbz	r4, 90012584 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
90012574:	6823      	ldr	r3, [r4, #0]
90012576:	4620      	mov	r0, r4
90012578:	4632      	mov	r2, r6
9001257a:	4629      	mov	r1, r5
9001257c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9001257e:	4798      	blx	r3
90012580:	69a4      	ldr	r4, [r4, #24]
90012582:	e7f6      	b.n	90012572 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
90012584:	bd70      	pop	{r4, r5, r6, pc}

90012586 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
90012586:	b538      	push	{r3, r4, r5, lr}
90012588:	460d      	mov	r5, r1
9001258a:	6a84      	ldr	r4, [r0, #40]	; 0x28
9001258c:	b134      	cbz	r4, 9001259c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
9001258e:	682b      	ldr	r3, [r5, #0]
90012590:	4621      	mov	r1, r4
90012592:	4628      	mov	r0, r5
90012594:	689b      	ldr	r3, [r3, #8]
90012596:	4798      	blx	r3
90012598:	69a4      	ldr	r4, [r4, #24]
9001259a:	e7f7      	b.n	9001258c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
9001259c:	bd38      	pop	{r3, r4, r5, pc}

9001259e <_ZN8touchgfx9ContainerD1Ev>:
9001259e:	4770      	bx	lr

900125a0 <_ZN8touchgfx9ContainerD0Ev>:
900125a0:	b510      	push	{r4, lr}
900125a2:	4604      	mov	r4, r0
900125a4:	212c      	movs	r1, #44	; 0x2c
900125a6:	f014 fd66 	bl	90027076 <_ZdlPvj>
900125aa:	4620      	mov	r0, r4
900125ac:	bd10      	pop	{r4, pc}

900125ae <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
900125ae:	6a83      	ldr	r3, [r0, #40]	; 0x28
900125b0:	b19b      	cbz	r3, 900125da <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
900125b2:	428b      	cmp	r3, r1
900125b4:	d109      	bne.n	900125ca <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
900125b6:	699a      	ldr	r2, [r3, #24]
900125b8:	2100      	movs	r1, #0
900125ba:	6159      	str	r1, [r3, #20]
900125bc:	6282      	str	r2, [r0, #40]	; 0x28
900125be:	b902      	cbnz	r2, 900125c2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
900125c0:	4770      	bx	lr
900125c2:	6199      	str	r1, [r3, #24]
900125c4:	4770      	bx	lr
900125c6:	4613      	mov	r3, r2
900125c8:	b13a      	cbz	r2, 900125da <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
900125ca:	699a      	ldr	r2, [r3, #24]
900125cc:	428a      	cmp	r2, r1
900125ce:	d1fa      	bne.n	900125c6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
900125d0:	698a      	ldr	r2, [r1, #24]
900125d2:	619a      	str	r2, [r3, #24]
900125d4:	2300      	movs	r3, #0
900125d6:	e9c1 3305 	strd	r3, r3, [r1, #20]
900125da:	4770      	bx	lr

900125dc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
900125dc:	b410      	push	{r4}
900125de:	6a83      	ldr	r3, [r0, #40]	; 0x28
900125e0:	4604      	mov	r4, r0
900125e2:	b92b      	cbnz	r3, 900125f0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
900125e4:	6803      	ldr	r3, [r0, #0]
900125e6:	4611      	mov	r1, r2
900125e8:	f85d 4b04 	ldr.w	r4, [sp], #4
900125ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
900125ee:	4718      	bx	r3
900125f0:	b941      	cbnz	r1, 90012604 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
900125f2:	6193      	str	r3, [r2, #24]
900125f4:	6282      	str	r2, [r0, #40]	; 0x28
900125f6:	6154      	str	r4, [r2, #20]
900125f8:	f85d 4b04 	ldr.w	r4, [sp], #4
900125fc:	4770      	bx	lr
900125fe:	4603      	mov	r3, r0
90012600:	2800      	cmp	r0, #0
90012602:	d0f9      	beq.n	900125f8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
90012604:	4299      	cmp	r1, r3
90012606:	6998      	ldr	r0, [r3, #24]
90012608:	d1f9      	bne.n	900125fe <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
9001260a:	6190      	str	r0, [r2, #24]
9001260c:	618a      	str	r2, [r1, #24]
9001260e:	e7f2      	b.n	900125f6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

90012610 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
90012610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90012614:	461f      	mov	r7, r3
90012616:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
9001261a:	460d      	mov	r5, r1
9001261c:	4616      	mov	r6, r2
9001261e:	b103      	cbz	r3, 90012622 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
90012620:	6038      	str	r0, [r7, #0]
90012622:	6a84      	ldr	r4, [r0, #40]	; 0x28
90012624:	b314      	cbz	r4, 9001266c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
90012626:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
9001262a:	b1eb      	cbz	r3, 90012668 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
9001262c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90012630:	428d      	cmp	r5, r1
90012632:	db19      	blt.n	90012668 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90012634:	b289      	uxth	r1, r1
90012636:	8923      	ldrh	r3, [r4, #8]
90012638:	440b      	add	r3, r1
9001263a:	b21b      	sxth	r3, r3
9001263c:	429d      	cmp	r5, r3
9001263e:	da13      	bge.n	90012668 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90012640:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
90012644:	4296      	cmp	r6, r2
90012646:	db0f      	blt.n	90012668 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90012648:	b292      	uxth	r2, r2
9001264a:	8963      	ldrh	r3, [r4, #10]
9001264c:	4413      	add	r3, r2
9001264e:	b21b      	sxth	r3, r3
90012650:	429e      	cmp	r6, r3
90012652:	da09      	bge.n	90012668 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90012654:	6823      	ldr	r3, [r4, #0]
90012656:	1ab2      	subs	r2, r6, r2
90012658:	1a69      	subs	r1, r5, r1
9001265a:	4620      	mov	r0, r4
9001265c:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
90012660:	b212      	sxth	r2, r2
90012662:	463b      	mov	r3, r7
90012664:	b209      	sxth	r1, r1
90012666:	47c0      	blx	r8
90012668:	69a4      	ldr	r4, [r4, #24]
9001266a:	e7db      	b.n	90012624 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
9001266c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90012670 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
90012670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90012674:	4c6d      	ldr	r4, [pc, #436]	; (9001282c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
90012676:	b0a1      	sub	sp, #132	; 0x84
90012678:	4606      	mov	r6, r0
9001267a:	6824      	ldr	r4, [r4, #0]
9001267c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
9001267e:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
90012682:	2400      	movs	r4, #0
90012684:	9303      	str	r3, [sp, #12]
90012686:	802c      	strh	r4, [r5, #0]
90012688:	9d2b      	ldr	r5, [sp, #172]	; 0xac
9001268a:	802c      	strh	r4, [r5, #0]
9001268c:	601c      	str	r4, [r3, #0]
9001268e:	e9cd 1201 	strd	r1, r2, [sp, #4]
90012692:	f7ff ffbd 	bl	90012610 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
90012696:	f1b9 0f03 	cmp.w	r9, #3
9001269a:	f340 80c1 	ble.w	90012820 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
9001269e:	4631      	mov	r1, r6
900126a0:	a80c      	add	r0, sp, #48	; 0x30
900126a2:	f006 fb95 	bl	90018dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900126a6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
900126aa:	9306      	str	r3, [sp, #24]
900126ac:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
900126b0:	9307      	str	r3, [sp, #28]
900126b2:	9b03      	ldr	r3, [sp, #12]
900126b4:	f8d3 a000 	ldr.w	sl, [r3]
900126b8:	f1ba 0f00 	cmp.w	sl, #0
900126bc:	f000 80b3 	beq.w	90012826 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
900126c0:	4651      	mov	r1, sl
900126c2:	a810      	add	r0, sp, #64	; 0x40
900126c4:	f006 fb84 	bl	90018dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900126c8:	2002      	movs	r0, #2
900126ca:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
900126ce:	9b01      	ldr	r3, [sp, #4]
900126d0:	9a06      	ldr	r2, [sp, #24]
900126d2:	fb91 f1f0 	sdiv	r1, r1, r0
900126d6:	189d      	adds	r5, r3, r2
900126d8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
900126dc:	9a07      	ldr	r2, [sp, #28]
900126de:	4419      	add	r1, r3
900126e0:	9b02      	ldr	r3, [sp, #8]
900126e2:	4413      	add	r3, r2
900126e4:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
900126e8:	1a6d      	subs	r5, r5, r1
900126ea:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
900126ee:	fb92 f2f0 	sdiv	r2, r2, r0
900126f2:	440a      	add	r2, r1
900126f4:	1a9b      	subs	r3, r3, r2
900126f6:	435b      	muls	r3, r3
900126f8:	fb05 3505 	mla	r5, r5, r5, r3
900126fc:	4f4c      	ldr	r7, [pc, #304]	; (90012830 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
900126fe:	ac10      	add	r4, sp, #64	; 0x40
90012700:	f1b9 0f0c 	cmp.w	r9, #12
90012704:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
90012706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90012708:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
9001270a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
9001270c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
9001270e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90012710:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
90012714:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
90012718:	f04f 0303 	mov.w	r3, #3
9001271c:	bfd8      	it	le
9001271e:	f109 32ff 	addle.w	r2, r9, #4294967295
90012722:	f04f 0400 	mov.w	r4, #0
90012726:	f8cd 9000 	str.w	r9, [sp]
9001272a:	bfcc      	ite	gt
9001272c:	4698      	movgt	r8, r3
9001272e:	fb92 f8f3 	sdivle	r8, r2, r3
90012732:	1c63      	adds	r3, r4, #1
90012734:	aa10      	add	r2, sp, #64	; 0x40
90012736:	f004 0401 	and.w	r4, r4, #1
9001273a:	f04f 0b00 	mov.w	fp, #0
9001273e:	9308      	str	r3, [sp, #32]
90012740:	9b00      	ldr	r3, [sp, #0]
90012742:	eb02 1444 	add.w	r4, r2, r4, lsl #5
90012746:	fb93 f3f8 	sdiv	r3, r3, r8
9001274a:	3404      	adds	r4, #4
9001274c:	b29b      	uxth	r3, r3
9001274e:	9304      	str	r3, [sp, #16]
90012750:	9a04      	ldr	r2, [sp, #16]
90012752:	f854 3c04 	ldr.w	r3, [r4, #-4]
90012756:	fb13 f302 	smulbb	r3, r3, r2
9001275a:	9a01      	ldr	r2, [sp, #4]
9001275c:	b29b      	uxth	r3, r3
9001275e:	1899      	adds	r1, r3, r2
90012760:	9305      	str	r3, [sp, #20]
90012762:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
90012766:	b209      	sxth	r1, r1
90012768:	4299      	cmp	r1, r3
9001276a:	db4d      	blt.n	90012808 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9001276c:	8932      	ldrh	r2, [r6, #8]
9001276e:	4413      	add	r3, r2
90012770:	b21b      	sxth	r3, r3
90012772:	4299      	cmp	r1, r3
90012774:	da48      	bge.n	90012808 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90012776:	9b04      	ldr	r3, [sp, #16]
90012778:	6827      	ldr	r7, [r4, #0]
9001277a:	fb17 f703 	smulbb	r7, r7, r3
9001277e:	9b02      	ldr	r3, [sp, #8]
90012780:	b2bf      	uxth	r7, r7
90012782:	18fa      	adds	r2, r7, r3
90012784:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
90012788:	b212      	sxth	r2, r2
9001278a:	429a      	cmp	r2, r3
9001278c:	db3c      	blt.n	90012808 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9001278e:	8970      	ldrh	r0, [r6, #10]
90012790:	4403      	add	r3, r0
90012792:	b21b      	sxth	r3, r3
90012794:	429a      	cmp	r2, r3
90012796:	da37      	bge.n	90012808 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90012798:	2300      	movs	r3, #0
9001279a:	4630      	mov	r0, r6
9001279c:	930b      	str	r3, [sp, #44]	; 0x2c
9001279e:	ab0b      	add	r3, sp, #44	; 0x2c
900127a0:	f7ff ff36 	bl	90012610 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
900127a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
900127a6:	b37a      	cbz	r2, 90012808 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
900127a8:	4552      	cmp	r2, sl
900127aa:	d02d      	beq.n	90012808 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
900127ac:	4611      	mov	r1, r2
900127ae:	a80e      	add	r0, sp, #56	; 0x38
900127b0:	9209      	str	r2, [sp, #36]	; 0x24
900127b2:	f006 fb0d 	bl	90018dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900127b6:	f04f 0e02 	mov.w	lr, #2
900127ba:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
900127be:	9a06      	ldr	r2, [sp, #24]
900127c0:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
900127c4:	9b01      	ldr	r3, [sp, #4]
900127c6:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
900127ca:	4413      	add	r3, r2
900127cc:	9a07      	ldr	r2, [sp, #28]
900127ce:	fb91 f1fe 	sdiv	r1, r1, lr
900127d2:	fb9c fcfe 	sdiv	ip, ip, lr
900127d6:	4401      	add	r1, r0
900127d8:	1a58      	subs	r0, r3, r1
900127da:	9b02      	ldr	r3, [sp, #8]
900127dc:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
900127e0:	4413      	add	r3, r2
900127e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
900127e4:	448c      	add	ip, r1
900127e6:	eba3 030c 	sub.w	r3, r3, ip
900127ea:	435b      	muls	r3, r3
900127ec:	fb00 3300 	mla	r3, r0, r0, r3
900127f0:	42ab      	cmp	r3, r5
900127f2:	d208      	bcs.n	90012806 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
900127f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
900127f6:	461d      	mov	r5, r3
900127f8:	9803      	ldr	r0, [sp, #12]
900127fa:	6001      	str	r1, [r0, #0]
900127fc:	992a      	ldr	r1, [sp, #168]	; 0xa8
900127fe:	9805      	ldr	r0, [sp, #20]
90012800:	8008      	strh	r0, [r1, #0]
90012802:	992b      	ldr	r1, [sp, #172]	; 0xac
90012804:	800f      	strh	r7, [r1, #0]
90012806:	4692      	mov	sl, r2
90012808:	f10b 0b01 	add.w	fp, fp, #1
9001280c:	3408      	adds	r4, #8
9001280e:	f1bb 0f04 	cmp.w	fp, #4
90012812:	d19d      	bne.n	90012750 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
90012814:	9b00      	ldr	r3, [sp, #0]
90012816:	9c08      	ldr	r4, [sp, #32]
90012818:	444b      	add	r3, r9
9001281a:	4544      	cmp	r4, r8
9001281c:	9300      	str	r3, [sp, #0]
9001281e:	d188      	bne.n	90012732 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
90012820:	b021      	add	sp, #132	; 0x84
90012822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90012826:	f04f 35ff 	mov.w	r5, #4294967295
9001282a:	e767      	b.n	900126fc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
9001282c:	24028194 	.word	0x24028194
90012830:	90028194 	.word	0x90028194

90012834 <_ZN8touchgfx4RectaNERKS0_>:
90012834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90012838:	f9b1 7000 	ldrsh.w	r7, [r1]
9001283c:	888c      	ldrh	r4, [r1, #4]
9001283e:	f9b0 9000 	ldrsh.w	r9, [r0]
90012842:	443c      	add	r4, r7
90012844:	b2a4      	uxth	r4, r4
90012846:	fa0f f884 	sxth.w	r8, r4
9001284a:	45c1      	cmp	r9, r8
9001284c:	da2f      	bge.n	900128ae <_ZN8touchgfx4RectaNERKS0_+0x7a>
9001284e:	8882      	ldrh	r2, [r0, #4]
90012850:	444a      	add	r2, r9
90012852:	b292      	uxth	r2, r2
90012854:	fa0f fe82 	sxth.w	lr, r2
90012858:	4577      	cmp	r7, lr
9001285a:	da28      	bge.n	900128ae <_ZN8touchgfx4RectaNERKS0_+0x7a>
9001285c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
90012860:	88cb      	ldrh	r3, [r1, #6]
90012862:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
90012866:	442b      	add	r3, r5
90012868:	b21b      	sxth	r3, r3
9001286a:	429e      	cmp	r6, r3
9001286c:	da1f      	bge.n	900128ae <_ZN8touchgfx4RectaNERKS0_+0x7a>
9001286e:	88c3      	ldrh	r3, [r0, #6]
90012870:	4433      	add	r3, r6
90012872:	b29b      	uxth	r3, r3
90012874:	fa0f fc83 	sxth.w	ip, r3
90012878:	4565      	cmp	r5, ip
9001287a:	da18      	bge.n	900128ae <_ZN8touchgfx4RectaNERKS0_+0x7a>
9001287c:	454f      	cmp	r7, r9
9001287e:	bfb8      	it	lt
90012880:	464f      	movlt	r7, r9
90012882:	42b5      	cmp	r5, r6
90012884:	bfb8      	it	lt
90012886:	4635      	movlt	r5, r6
90012888:	45f0      	cmp	r8, lr
9001288a:	bfd8      	it	le
9001288c:	4622      	movle	r2, r4
9001288e:	1bd2      	subs	r2, r2, r7
90012890:	8082      	strh	r2, [r0, #4]
90012892:	884a      	ldrh	r2, [r1, #2]
90012894:	88c9      	ldrh	r1, [r1, #6]
90012896:	8007      	strh	r7, [r0, #0]
90012898:	440a      	add	r2, r1
9001289a:	8045      	strh	r5, [r0, #2]
9001289c:	b292      	uxth	r2, r2
9001289e:	b211      	sxth	r1, r2
900128a0:	458c      	cmp	ip, r1
900128a2:	bfa8      	it	ge
900128a4:	4613      	movge	r3, r2
900128a6:	1b5b      	subs	r3, r3, r5
900128a8:	80c3      	strh	r3, [r0, #6]
900128aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900128ae:	2300      	movs	r3, #0
900128b0:	8003      	strh	r3, [r0, #0]
900128b2:	8043      	strh	r3, [r0, #2]
900128b4:	8083      	strh	r3, [r0, #4]
900128b6:	80c3      	strh	r3, [r0, #6]
900128b8:	e7f7      	b.n	900128aa <_ZN8touchgfx4RectaNERKS0_+0x76>

900128ba <_ZNK8touchgfx4Rect7isEmptyEv>:
900128ba:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
900128be:	2b00      	cmp	r3, #0
900128c0:	dd06      	ble.n	900128d0 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
900128c2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
900128c6:	2800      	cmp	r0, #0
900128c8:	bfcc      	ite	gt
900128ca:	2000      	movgt	r0, #0
900128cc:	2001      	movle	r0, #1
900128ce:	4770      	bx	lr
900128d0:	2001      	movs	r0, #1
900128d2:	4770      	bx	lr

900128d4 <_ZNK8touchgfx9Container16getContainedAreaEv>:
900128d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900128d8:	2300      	movs	r3, #0
900128da:	4604      	mov	r4, r0
900128dc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
900128de:	8003      	strh	r3, [r0, #0]
900128e0:	8043      	strh	r3, [r0, #2]
900128e2:	8083      	strh	r3, [r0, #4]
900128e4:	80c3      	strh	r3, [r0, #6]
900128e6:	2d00      	cmp	r5, #0
900128e8:	d040      	beq.n	9001296c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
900128ea:	1d28      	adds	r0, r5, #4
900128ec:	f7ff ffe5 	bl	900128ba <_ZNK8touchgfx4Rect7isEmptyEv>
900128f0:	b988      	cbnz	r0, 90012916 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
900128f2:	4620      	mov	r0, r4
900128f4:	f7ff ffe1 	bl	900128ba <_ZNK8touchgfx4Rect7isEmptyEv>
900128f8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
900128fc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
90012900:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
90012904:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
90012908:	b138      	cbz	r0, 9001291a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
9001290a:	8022      	strh	r2, [r4, #0]
9001290c:	8063      	strh	r3, [r4, #2]
9001290e:	f8a4 e004 	strh.w	lr, [r4, #4]
90012912:	f8a4 c006 	strh.w	ip, [r4, #6]
90012916:	69ad      	ldr	r5, [r5, #24]
90012918:	e7e5      	b.n	900128e6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
9001291a:	f9b4 0000 	ldrsh.w	r0, [r4]
9001291e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
90012922:	4290      	cmp	r0, r2
90012924:	4607      	mov	r7, r0
90012926:	f8b4 8004 	ldrh.w	r8, [r4, #4]
9001292a:	460e      	mov	r6, r1
9001292c:	bfa8      	it	ge
9001292e:	4617      	movge	r7, r2
90012930:	4299      	cmp	r1, r3
90012932:	4472      	add	r2, lr
90012934:	f8b4 e006 	ldrh.w	lr, [r4, #6]
90012938:	bfa8      	it	ge
9001293a:	461e      	movge	r6, r3
9001293c:	4440      	add	r0, r8
9001293e:	4471      	add	r1, lr
90012940:	4463      	add	r3, ip
90012942:	b200      	sxth	r0, r0
90012944:	8027      	strh	r7, [r4, #0]
90012946:	b212      	sxth	r2, r2
90012948:	8066      	strh	r6, [r4, #2]
9001294a:	b209      	sxth	r1, r1
9001294c:	b21b      	sxth	r3, r3
9001294e:	4290      	cmp	r0, r2
90012950:	bfac      	ite	ge
90012952:	ebc7 0200 	rsbge	r2, r7, r0
90012956:	ebc7 0202 	rsblt	r2, r7, r2
9001295a:	4299      	cmp	r1, r3
9001295c:	bfac      	ite	ge
9001295e:	ebc6 0301 	rsbge	r3, r6, r1
90012962:	ebc6 0303 	rsblt	r3, r6, r3
90012966:	80a2      	strh	r2, [r4, #4]
90012968:	80e3      	strh	r3, [r4, #6]
9001296a:	e7d4      	b.n	90012916 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
9001296c:	4620      	mov	r0, r4
9001296e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90012972 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
90012972:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90012976:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
9001297a:	b383      	cbz	r3, 900129de <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
9001297c:	6a84      	ldr	r4, [r0, #40]	; 0x28
9001297e:	b374      	cbz	r4, 900129de <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
90012980:	f9b1 5000 	ldrsh.w	r5, [r1]
90012984:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
90012988:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
9001298c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
90012990:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
90012994:	b303      	cbz	r3, 900129d8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
90012996:	4668      	mov	r0, sp
90012998:	1d21      	adds	r1, r4, #4
9001299a:	f8ad 5000 	strh.w	r5, [sp]
9001299e:	f8ad 6002 	strh.w	r6, [sp, #2]
900129a2:	f8ad 7004 	strh.w	r7, [sp, #4]
900129a6:	f8ad 8006 	strh.w	r8, [sp, #6]
900129aa:	f7ff ff43 	bl	90012834 <_ZN8touchgfx4RectaNERKS0_>
900129ae:	4668      	mov	r0, sp
900129b0:	f7ff ff83 	bl	900128ba <_ZNK8touchgfx4Rect7isEmptyEv>
900129b4:	b980      	cbnz	r0, 900129d8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
900129b6:	f8bd 3000 	ldrh.w	r3, [sp]
900129ba:	4669      	mov	r1, sp
900129bc:	88a2      	ldrh	r2, [r4, #4]
900129be:	4620      	mov	r0, r4
900129c0:	1a9b      	subs	r3, r3, r2
900129c2:	88e2      	ldrh	r2, [r4, #6]
900129c4:	f8ad 3000 	strh.w	r3, [sp]
900129c8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
900129cc:	1a9b      	subs	r3, r3, r2
900129ce:	f8ad 3002 	strh.w	r3, [sp, #2]
900129d2:	6823      	ldr	r3, [r4, #0]
900129d4:	689b      	ldr	r3, [r3, #8]
900129d6:	4798      	blx	r3
900129d8:	69a4      	ldr	r4, [r4, #24]
900129da:	2c00      	cmp	r4, #0
900129dc:	d1d8      	bne.n	90012990 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
900129de:	b002      	add	sp, #8
900129e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

900129e4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
900129e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
900129e6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
900129ea:	460d      	mov	r5, r1
900129ec:	4616      	mov	r6, r2
900129ee:	b323      	cbz	r3, 90012a3a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
900129f0:	6a84      	ldr	r4, [r0, #40]	; 0x28
900129f2:	b314      	cbz	r4, 90012a3a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
900129f4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
900129f8:	b1eb      	cbz	r3, 90012a36 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
900129fa:	6828      	ldr	r0, [r5, #0]
900129fc:	466b      	mov	r3, sp
900129fe:	6869      	ldr	r1, [r5, #4]
90012a00:	c303      	stmia	r3!, {r0, r1}
90012a02:	4668      	mov	r0, sp
90012a04:	1d21      	adds	r1, r4, #4
90012a06:	f7ff ff15 	bl	90012834 <_ZN8touchgfx4RectaNERKS0_>
90012a0a:	4668      	mov	r0, sp
90012a0c:	f7ff ff55 	bl	900128ba <_ZNK8touchgfx4Rect7isEmptyEv>
90012a10:	b988      	cbnz	r0, 90012a36 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
90012a12:	f8bd 3000 	ldrh.w	r3, [sp]
90012a16:	4669      	mov	r1, sp
90012a18:	88a2      	ldrh	r2, [r4, #4]
90012a1a:	4620      	mov	r0, r4
90012a1c:	1a9b      	subs	r3, r3, r2
90012a1e:	88e2      	ldrh	r2, [r4, #6]
90012a20:	f8ad 3000 	strh.w	r3, [sp]
90012a24:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90012a28:	1a9b      	subs	r3, r3, r2
90012a2a:	4632      	mov	r2, r6
90012a2c:	f8ad 3002 	strh.w	r3, [sp, #2]
90012a30:	6823      	ldr	r3, [r4, #0]
90012a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90012a34:	4798      	blx	r3
90012a36:	69a4      	ldr	r4, [r4, #24]
90012a38:	e7db      	b.n	900129f2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
90012a3a:	b002      	add	sp, #8
90012a3c:	bd70      	pop	{r4, r5, r6, pc}

90012a3e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
90012a3e:	6803      	ldr	r3, [r0, #0]
90012a40:	b513      	push	{r0, r1, r4, lr}
90012a42:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
90012a46:	2300      	movs	r3, #0
90012a48:	e9cd 3300 	strd	r3, r3, [sp]
90012a4c:	466b      	mov	r3, sp
90012a4e:	47a0      	blx	r4
90012a50:	b002      	add	sp, #8
90012a52:	bd10      	pop	{r4, pc}

90012a54 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
90012a54:	2301      	movs	r3, #1
90012a56:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
90012a5a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
90012a5e:	4770      	bx	lr

90012a60 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
90012a60:	2301      	movs	r3, #1
90012a62:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
90012a66:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
90012a6a:	4770      	bx	lr

90012a6c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
90012a6c:	6843      	ldr	r3, [r0, #4]
90012a6e:	2201      	movs	r2, #1
90012a70:	725a      	strb	r2, [r3, #9]
90012a72:	6840      	ldr	r0, [r0, #4]
90012a74:	6803      	ldr	r3, [r0, #0]
90012a76:	691b      	ldr	r3, [r3, #16]
90012a78:	4718      	bx	r3

90012a7a <_ZN8touchgfx3HAL8flushDMAEv>:
90012a7a:	6840      	ldr	r0, [r0, #4]
90012a7c:	6803      	ldr	r3, [r0, #0]
90012a7e:	689b      	ldr	r3, [r3, #8]
90012a80:	4718      	bx	r3

90012a82 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
90012a82:	b530      	push	{r4, r5, lr}
90012a84:	b08b      	sub	sp, #44	; 0x2c
90012a86:	6804      	ldr	r4, [r0, #0]
90012a88:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
90012a8c:	9509      	str	r5, [sp, #36]	; 0x24
90012a8e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
90012a92:	9508      	str	r5, [sp, #32]
90012a94:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
90012a98:	9507      	str	r5, [sp, #28]
90012a9a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
90012a9e:	9506      	str	r5, [sp, #24]
90012aa0:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
90012aa4:	9505      	str	r5, [sp, #20]
90012aa6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
90012aaa:	9504      	str	r5, [sp, #16]
90012aac:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
90012ab0:	9503      	str	r5, [sp, #12]
90012ab2:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
90012ab6:	9502      	str	r5, [sp, #8]
90012ab8:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
90012abc:	e9cd 3500 	strd	r3, r5, [sp]
90012ac0:	4613      	mov	r3, r2
90012ac2:	6be4      	ldr	r4, [r4, #60]	; 0x3c
90012ac4:	2200      	movs	r2, #0
90012ac6:	47a0      	blx	r4
90012ac8:	b00b      	add	sp, #44	; 0x2c
90012aca:	bd30      	pop	{r4, r5, pc}

90012acc <_ZN8touchgfx3HAL10beginFrameEv>:
90012acc:	4b04      	ldr	r3, [pc, #16]	; (90012ae0 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
90012ace:	781b      	ldrb	r3, [r3, #0]
90012ad0:	b123      	cbz	r3, 90012adc <_ZN8touchgfx3HAL10beginFrameEv+0x10>
90012ad2:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
90012ad6:	f080 0001 	eor.w	r0, r0, #1
90012ada:	4770      	bx	lr
90012adc:	2001      	movs	r0, #1
90012ade:	4770      	bx	lr
90012ae0:	24028192 	.word	0x24028192

90012ae4 <_ZN8touchgfx3HAL8endFrameEv>:
90012ae4:	b510      	push	{r4, lr}
90012ae6:	4604      	mov	r4, r0
90012ae8:	6840      	ldr	r0, [r0, #4]
90012aea:	6803      	ldr	r3, [r0, #0]
90012aec:	689b      	ldr	r3, [r3, #8]
90012aee:	4798      	blx	r3
90012af0:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
90012af4:	b113      	cbz	r3, 90012afc <_ZN8touchgfx3HAL8endFrameEv+0x18>
90012af6:	2301      	movs	r3, #1
90012af8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
90012afc:	bd10      	pop	{r4, pc}

90012afe <_ZN8touchgfx3HAL10initializeEv>:
90012afe:	b510      	push	{r4, lr}
90012b00:	4604      	mov	r4, r0
90012b02:	f7ee ff27 	bl	90001954 <_ZN8touchgfx10OSWrappers10initializeEv>
90012b06:	f7ed fd0b 	bl	90000520 <_ZN8touchgfx4GPIO4initEv>
90012b0a:	6860      	ldr	r0, [r4, #4]
90012b0c:	6803      	ldr	r3, [r0, #0]
90012b0e:	68db      	ldr	r3, [r3, #12]
90012b10:	4798      	blx	r3
90012b12:	68e0      	ldr	r0, [r4, #12]
90012b14:	6803      	ldr	r3, [r0, #0]
90012b16:	689b      	ldr	r3, [r3, #8]
90012b18:	4798      	blx	r3
90012b1a:	6823      	ldr	r3, [r4, #0]
90012b1c:	4620      	mov	r0, r4
90012b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90012b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90012b24:	4718      	bx	r3
	...

90012b28 <_ZN8touchgfx3HAL4tickEv>:
90012b28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
90012b2a:	6803      	ldr	r3, [r0, #0]
90012b2c:	4604      	mov	r4, r0
90012b2e:	4d5b      	ldr	r5, [pc, #364]	; (90012c9c <_ZN8touchgfx3HAL4tickEv+0x174>)
90012b30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90012b34:	4798      	blx	r3
90012b36:	2800      	cmp	r0, #0
90012b38:	f000 8095 	beq.w	90012c66 <_ZN8touchgfx3HAL4tickEv+0x13e>
90012b3c:	2001      	movs	r0, #1
90012b3e:	2600      	movs	r6, #0
90012b40:	f7ed fd18 	bl	90000574 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
90012b44:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
90012b48:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
90012b4c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
90012b50:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
90012b54:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
90012b58:	b133      	cbz	r3, 90012b68 <_ZN8touchgfx3HAL4tickEv+0x40>
90012b5a:	6823      	ldr	r3, [r4, #0]
90012b5c:	4620      	mov	r0, r4
90012b5e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
90012b62:	4798      	blx	r3
90012b64:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
90012b68:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
90012b6c:	2601      	movs	r6, #1
90012b6e:	6862      	ldr	r2, [r4, #4]
90012b70:	f083 0301 	eor.w	r3, r3, #1
90012b74:	702e      	strb	r6, [r5, #0]
90012b76:	7253      	strb	r3, [r2, #9]
90012b78:	f005 f800 	bl	90017b7c <_ZN8touchgfx11Application11getInstanceEv>
90012b7c:	6803      	ldr	r3, [r0, #0]
90012b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90012b80:	4798      	blx	r3
90012b82:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
90012b86:	b90b      	cbnz	r3, 90012b8c <_ZN8touchgfx3HAL4tickEv+0x64>
90012b88:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
90012b8c:	f004 fff6 	bl	90017b7c <_ZN8touchgfx11Application11getInstanceEv>
90012b90:	6803      	ldr	r3, [r0, #0]
90012b92:	695b      	ldr	r3, [r3, #20]
90012b94:	4798      	blx	r3
90012b96:	6da0      	ldr	r0, [r4, #88]	; 0x58
90012b98:	6803      	ldr	r3, [r0, #0]
90012b9a:	691b      	ldr	r3, [r3, #16]
90012b9c:	4798      	blx	r3
90012b9e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
90012ba2:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
90012ba6:	3b01      	subs	r3, #1
90012ba8:	b2db      	uxtb	r3, r3
90012baa:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
90012bae:	b10a      	cbz	r2, 90012bb4 <_ZN8touchgfx3HAL4tickEv+0x8c>
90012bb0:	2b00      	cmp	r3, #0
90012bb2:	d1eb      	bne.n	90012b8c <_ZN8touchgfx3HAL4tickEv+0x64>
90012bb4:	4a3a      	ldr	r2, [pc, #232]	; (90012ca0 <_ZN8touchgfx3HAL4tickEv+0x178>)
90012bb6:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
90012bba:	7813      	ldrb	r3, [r2, #0]
90012bbc:	3301      	adds	r3, #1
90012bbe:	b25b      	sxtb	r3, r3
90012bc0:	4299      	cmp	r1, r3
90012bc2:	7013      	strb	r3, [r2, #0]
90012bc4:	dc10      	bgt.n	90012be8 <_ZN8touchgfx3HAL4tickEv+0xc0>
90012bc6:	2300      	movs	r3, #0
90012bc8:	68e0      	ldr	r0, [r4, #12]
90012bca:	a902      	add	r1, sp, #8
90012bcc:	7013      	strb	r3, [r2, #0]
90012bce:	aa03      	add	r2, sp, #12
90012bd0:	6803      	ldr	r3, [r0, #0]
90012bd2:	68db      	ldr	r3, [r3, #12]
90012bd4:	4798      	blx	r3
90012bd6:	6823      	ldr	r3, [r4, #0]
90012bd8:	2800      	cmp	r0, #0
90012bda:	d050      	beq.n	90012c7e <_ZN8touchgfx3HAL4tickEv+0x156>
90012bdc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
90012be0:	4620      	mov	r0, r4
90012be2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
90012be6:	4798      	blx	r3
90012be8:	2300      	movs	r3, #0
90012bea:	6960      	ldr	r0, [r4, #20]
90012bec:	f88d 3007 	strb.w	r3, [sp, #7]
90012bf0:	b158      	cbz	r0, 90012c0a <_ZN8touchgfx3HAL4tickEv+0xe2>
90012bf2:	6803      	ldr	r3, [r0, #0]
90012bf4:	f10d 0107 	add.w	r1, sp, #7
90012bf8:	68db      	ldr	r3, [r3, #12]
90012bfa:	4798      	blx	r3
90012bfc:	b128      	cbz	r0, 90012c0a <_ZN8touchgfx3HAL4tickEv+0xe2>
90012bfe:	6da0      	ldr	r0, [r4, #88]	; 0x58
90012c00:	f89d 1007 	ldrb.w	r1, [sp, #7]
90012c04:	6803      	ldr	r3, [r0, #0]
90012c06:	68db      	ldr	r3, [r3, #12]
90012c08:	4798      	blx	r3
90012c0a:	f104 001c 	add.w	r0, r4, #28
90012c0e:	f013 fe5b 	bl	900268c8 <_ZN8touchgfx8Gestures4tickEv>
90012c12:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
90012c16:	b30b      	cbz	r3, 90012c5c <_ZN8touchgfx3HAL4tickEv+0x134>
90012c18:	6920      	ldr	r0, [r4, #16]
90012c1a:	6803      	ldr	r3, [r0, #0]
90012c1c:	691b      	ldr	r3, [r3, #16]
90012c1e:	4798      	blx	r3
90012c20:	6f23      	ldr	r3, [r4, #112]	; 0x70
90012c22:	4606      	mov	r6, r0
90012c24:	b903      	cbnz	r3, 90012c28 <_ZN8touchgfx3HAL4tickEv+0x100>
90012c26:	6720      	str	r0, [r4, #112]	; 0x70
90012c28:	6f23      	ldr	r3, [r4, #112]	; 0x70
90012c2a:	4a1e      	ldr	r2, [pc, #120]	; (90012ca4 <_ZN8touchgfx3HAL4tickEv+0x17c>)
90012c2c:	1af3      	subs	r3, r6, r3
90012c2e:	4293      	cmp	r3, r2
90012c30:	d914      	bls.n	90012c5c <_ZN8touchgfx3HAL4tickEv+0x134>
90012c32:	6920      	ldr	r0, [r4, #16]
90012c34:	6803      	ldr	r3, [r0, #0]
90012c36:	699b      	ldr	r3, [r3, #24]
90012c38:	4798      	blx	r3
90012c3a:	6f23      	ldr	r3, [r4, #112]	; 0x70
90012c3c:	2264      	movs	r2, #100	; 0x64
90012c3e:	1af3      	subs	r3, r6, r3
90012c40:	fbb3 f3f2 	udiv	r3, r3, r2
90012c44:	fbb0 f0f3 	udiv	r0, r0, r3
90012c48:	2800      	cmp	r0, #0
90012c4a:	dc1d      	bgt.n	90012c88 <_ZN8touchgfx3HAL4tickEv+0x160>
90012c4c:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
90012c50:	6920      	ldr	r0, [r4, #16]
90012c52:	2100      	movs	r1, #0
90012c54:	6803      	ldr	r3, [r0, #0]
90012c56:	69db      	ldr	r3, [r3, #28]
90012c58:	4798      	blx	r3
90012c5a:	6726      	str	r6, [r4, #112]	; 0x70
90012c5c:	f004 ff8e 	bl	90017b7c <_ZN8touchgfx11Application11getInstanceEv>
90012c60:	6803      	ldr	r3, [r0, #0]
90012c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90012c64:	4798      	blx	r3
90012c66:	6823      	ldr	r3, [r4, #0]
90012c68:	4620      	mov	r0, r4
90012c6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
90012c6e:	4798      	blx	r3
90012c70:	2001      	movs	r0, #1
90012c72:	f7ed fcb3 	bl	900005dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
90012c76:	2300      	movs	r3, #0
90012c78:	702b      	strb	r3, [r5, #0]
90012c7a:	b004      	add	sp, #16
90012c7c:	bd70      	pop	{r4, r5, r6, pc}
90012c7e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
90012c82:	4620      	mov	r0, r4
90012c84:	4798      	blx	r3
90012c86:	e7af      	b.n	90012be8 <_ZN8touchgfx3HAL4tickEv+0xc0>
90012c88:	2863      	cmp	r0, #99	; 0x63
90012c8a:	bfcb      	itete	gt
90012c8c:	2300      	movgt	r3, #0
90012c8e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
90012c92:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
90012c96:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
90012c9a:	e7d9      	b.n	90012c50 <_ZN8touchgfx3HAL4tickEv+0x128>
90012c9c:	24028198 	.word	0x24028198
90012ca0:	24028199 	.word	0x24028199
90012ca4:	05f5e100 	.word	0x05f5e100

90012ca8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
90012ca8:	f7ee be86 	b.w	900019b8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

90012cac <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
90012cac:	6581      	str	r1, [r0, #88]	; 0x58
90012cae:	301c      	adds	r0, #28
90012cb0:	f013 be08 	b.w	900268c4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

90012cb4 <_ZN8touchgfx3HAL5touchEll>:
90012cb4:	b530      	push	{r4, r5, lr}
90012cb6:	b087      	sub	sp, #28
90012cb8:	4604      	mov	r4, r0
90012cba:	a804      	add	r0, sp, #16
90012cbc:	e9cd 1204 	strd	r1, r2, [sp, #16]
90012cc0:	f004 fda0 	bl	90017804 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
90012cc4:	9b04      	ldr	r3, [sp, #16]
90012cc6:	a906      	add	r1, sp, #24
90012cc8:	a803      	add	r0, sp, #12
90012cca:	f8ad 300c 	strh.w	r3, [sp, #12]
90012cce:	9b05      	ldr	r3, [sp, #20]
90012cd0:	f821 3d0a 	strh.w	r3, [r1, #-10]!
90012cd4:	f004 fde8 	bl	900178a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
90012cd8:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
90012cdc:	f104 001c 	add.w	r0, r4, #28
90012ce0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
90012ce4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
90012ce8:	b189      	cbz	r1, 90012d0e <_ZN8touchgfx3HAL5touchEll+0x5a>
90012cea:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
90012cee:	9300      	str	r3, [sp, #0]
90012cf0:	4613      	mov	r3, r2
90012cf2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
90012cf6:	462a      	mov	r2, r5
90012cf8:	f013 fdf4 	bl	900268e4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
90012cfc:	b128      	cbz	r0, 90012d0a <_ZN8touchgfx3HAL5touchEll+0x56>
90012cfe:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
90012d02:	65e3      	str	r3, [r4, #92]	; 0x5c
90012d04:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
90012d08:	6623      	str	r3, [r4, #96]	; 0x60
90012d0a:	b007      	add	sp, #28
90012d0c:	bd30      	pop	{r4, r5, pc}
90012d0e:	f013 fe29 	bl	90026964 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
90012d12:	2301      	movs	r3, #1
90012d14:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
90012d18:	e7f1      	b.n	90012cfe <_ZN8touchgfx3HAL5touchEll+0x4a>

90012d1a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
90012d1a:	b510      	push	{r4, lr}
90012d1c:	2b00      	cmp	r3, #0
90012d1e:	d046      	beq.n	90012dae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
90012d20:	ea81 0002 	eor.w	r0, r1, r2
90012d24:	07c4      	lsls	r4, r0, #31
90012d26:	d508      	bpl.n	90012d3a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
90012d28:	440b      	add	r3, r1
90012d2a:	3a01      	subs	r2, #1
90012d2c:	428b      	cmp	r3, r1
90012d2e:	d93e      	bls.n	90012dae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
90012d30:	f812 0f01 	ldrb.w	r0, [r2, #1]!
90012d34:	f801 0b01 	strb.w	r0, [r1], #1
90012d38:	e7f8      	b.n	90012d2c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
90012d3a:	07d0      	lsls	r0, r2, #31
90012d3c:	bf42      	ittt	mi
90012d3e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
90012d42:	f103 33ff 	addmi.w	r3, r3, #4294967295
90012d46:	f801 0b01 	strbmi.w	r0, [r1], #1
90012d4a:	2b01      	cmp	r3, #1
90012d4c:	d911      	bls.n	90012d72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
90012d4e:	ea81 0402 	eor.w	r4, r1, r2
90012d52:	4610      	mov	r0, r2
90012d54:	07a4      	lsls	r4, r4, #30
90012d56:	d022      	beq.n	90012d9e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
90012d58:	f023 0401 	bic.w	r4, r3, #1
90012d5c:	440c      	add	r4, r1
90012d5e:	428c      	cmp	r4, r1
90012d60:	4602      	mov	r2, r0
90012d62:	d904      	bls.n	90012d6e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
90012d64:	8812      	ldrh	r2, [r2, #0]
90012d66:	3002      	adds	r0, #2
90012d68:	f821 2b02 	strh.w	r2, [r1], #2
90012d6c:	e7f7      	b.n	90012d5e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
90012d6e:	f003 0301 	and.w	r3, r3, #1
90012d72:	f023 0003 	bic.w	r0, r3, #3
90012d76:	4408      	add	r0, r1
90012d78:	4288      	cmp	r0, r1
90012d7a:	4614      	mov	r4, r2
90012d7c:	d904      	bls.n	90012d88 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
90012d7e:	6824      	ldr	r4, [r4, #0]
90012d80:	3204      	adds	r2, #4
90012d82:	f841 4b04 	str.w	r4, [r1], #4
90012d86:	e7f7      	b.n	90012d78 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
90012d88:	f003 0303 	and.w	r3, r3, #3
90012d8c:	3a01      	subs	r2, #1
90012d8e:	440b      	add	r3, r1
90012d90:	428b      	cmp	r3, r1
90012d92:	d90c      	bls.n	90012dae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
90012d94:	f812 0f01 	ldrb.w	r0, [r2, #1]!
90012d98:	f801 0b01 	strb.w	r0, [r1], #1
90012d9c:	e7f8      	b.n	90012d90 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
90012d9e:	0790      	lsls	r0, r2, #30
90012da0:	d0e7      	beq.n	90012d72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
90012da2:	f832 0b02 	ldrh.w	r0, [r2], #2
90012da6:	3b02      	subs	r3, #2
90012da8:	f821 0b02 	strh.w	r0, [r1], #2
90012dac:	e7e1      	b.n	90012d72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
90012dae:	2001      	movs	r0, #1
90012db0:	bd10      	pop	{r4, pc}

90012db2 <_ZN8touchgfx3HAL7noTouchEv>:
90012db2:	b510      	push	{r4, lr}
90012db4:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
90012db8:	4604      	mov	r4, r0
90012dba:	b153      	cbz	r3, 90012dd2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
90012dbc:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
90012dc0:	2101      	movs	r1, #1
90012dc2:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
90012dc6:	301c      	adds	r0, #28
90012dc8:	f013 fdcc 	bl	90026964 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
90012dcc:	2300      	movs	r3, #0
90012dce:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
90012dd2:	bd10      	pop	{r4, pc}

90012dd4 <_ZN8touchgfx8Drawable5setXYEss>:
90012dd4:	b570      	push	{r4, r5, r6, lr}
90012dd6:	6803      	ldr	r3, [r0, #0]
90012dd8:	4604      	mov	r4, r0
90012dda:	4615      	mov	r5, r2
90012ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90012dde:	4798      	blx	r3
90012de0:	6823      	ldr	r3, [r4, #0]
90012de2:	4629      	mov	r1, r5
90012de4:	4620      	mov	r0, r4
90012de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90012de8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90012dec:	4718      	bx	r3
	...

90012df0 <_ZN8touchgfx3HAL3lcdEv>:
90012df0:	4b04      	ldr	r3, [pc, #16]	; (90012e04 <_ZN8touchgfx3HAL3lcdEv+0x14>)
90012df2:	681b      	ldr	r3, [r3, #0]
90012df4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90012df8:	b10a      	cbz	r2, 90012dfe <_ZN8touchgfx3HAL3lcdEv+0xe>
90012dfa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90012dfc:	b900      	cbnz	r0, 90012e00 <_ZN8touchgfx3HAL3lcdEv+0x10>
90012dfe:	6898      	ldr	r0, [r3, #8]
90012e00:	4770      	bx	lr
90012e02:	bf00      	nop
90012e04:	24028194 	.word	0x24028194

90012e08 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
90012e08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90012e0c:	b085      	sub	sp, #20
90012e0e:	4604      	mov	r4, r0
90012e10:	2000      	movs	r0, #0
90012e12:	4699      	mov	r9, r3
90012e14:	ad04      	add	r5, sp, #16
90012e16:	460f      	mov	r7, r1
90012e18:	4690      	mov	r8, r2
90012e1a:	f845 0d04 	str.w	r0, [r5, #-4]!
90012e1e:	69a0      	ldr	r0, [r4, #24]
90012e20:	6806      	ldr	r6, [r0, #0]
90012e22:	9501      	str	r5, [sp, #4]
90012e24:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
90012e28:	9500      	str	r5, [sp, #0]
90012e2a:	6835      	ldr	r5, [r6, #0]
90012e2c:	47a8      	blx	r5
90012e2e:	4d10      	ldr	r5, [pc, #64]	; (90012e70 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
90012e30:	4606      	mov	r6, r0
90012e32:	f8a5 9000 	strh.w	r9, [r5]
90012e36:	f7ff ffdb 	bl	90012df0 <_ZN8touchgfx3HAL3lcdEv>
90012e3a:	6803      	ldr	r3, [r0, #0]
90012e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90012e3e:	4798      	blx	r3
90012e40:	b128      	cbz	r0, 90012e4e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
90012e42:	2801      	cmp	r0, #1
90012e44:	d00b      	beq.n	90012e5e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
90012e46:	4630      	mov	r0, r6
90012e48:	b005      	add	sp, #20
90012e4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90012e4e:	882b      	ldrh	r3, [r5, #0]
90012e50:	fb08 7203 	mla	r2, r8, r3, r7
90012e54:	9b03      	ldr	r3, [sp, #12]
90012e56:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
90012e5a:	63e3      	str	r3, [r4, #60]	; 0x3c
90012e5c:	e7f3      	b.n	90012e46 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
90012e5e:	882a      	ldrh	r2, [r5, #0]
90012e60:	9b03      	ldr	r3, [sp, #12]
90012e62:	fb08 7202 	mla	r2, r8, r2, r7
90012e66:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90012e6a:	1a9a      	subs	r2, r3, r2
90012e6c:	63e2      	str	r2, [r4, #60]	; 0x3c
90012e6e:	e7ea      	b.n	90012e46 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
90012e70:	2402818e 	.word	0x2402818e

90012e74 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
90012e74:	b5f0      	push	{r4, r5, r6, r7, lr}
90012e76:	b08b      	sub	sp, #44	; 0x2c
90012e78:	4617      	mov	r7, r2
90012e7a:	4604      	mov	r4, r0
90012e7c:	460e      	mov	r6, r1
90012e7e:	461d      	mov	r5, r3
90012e80:	f7ff ffb6 	bl	90012df0 <_ZN8touchgfx3HAL3lcdEv>
90012e84:	6803      	ldr	r3, [r0, #0]
90012e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90012e88:	4798      	blx	r3
90012e8a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
90012e8e:	9007      	str	r0, [sp, #28]
90012e90:	4631      	mov	r1, r6
90012e92:	6822      	ldr	r2, [r4, #0]
90012e94:	e9cd 0308 	strd	r0, r3, [sp, #32]
90012e98:	4b0c      	ldr	r3, [pc, #48]	; (90012ecc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
90012e9a:	4620      	mov	r0, r4
90012e9c:	881b      	ldrh	r3, [r3, #0]
90012e9e:	9306      	str	r3, [sp, #24]
90012ea0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
90012ea4:	9305      	str	r3, [sp, #20]
90012ea6:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
90012eaa:	9304      	str	r3, [sp, #16]
90012eac:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90012eb0:	9303      	str	r3, [sp, #12]
90012eb2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90012eb6:	9302      	str	r3, [sp, #8]
90012eb8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90012ebc:	e9cd 5300 	strd	r5, r3, [sp]
90012ec0:	463b      	mov	r3, r7
90012ec2:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
90012ec4:	2200      	movs	r2, #0
90012ec6:	47a8      	blx	r5
90012ec8:	b00b      	add	sp, #44	; 0x2c
90012eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
90012ecc:	2402818e 	.word	0x2402818e

90012ed0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
90012ed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90012ed4:	4698      	mov	r8, r3
90012ed6:	6803      	ldr	r3, [r0, #0]
90012ed8:	b08b      	sub	sp, #44	; 0x2c
90012eda:	4617      	mov	r7, r2
90012edc:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
90012ede:	460e      	mov	r6, r1
90012ee0:	4b13      	ldr	r3, [pc, #76]	; (90012f30 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
90012ee2:	4604      	mov	r4, r0
90012ee4:	f8b3 9000 	ldrh.w	r9, [r3]
90012ee8:	f7ff ff82 	bl	90012df0 <_ZN8touchgfx3HAL3lcdEv>
90012eec:	6803      	ldr	r3, [r0, #0]
90012eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90012ef0:	4798      	blx	r3
90012ef2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
90012ef6:	2200      	movs	r2, #0
90012ef8:	4631      	mov	r1, r6
90012efa:	e9cd 0308 	strd	r0, r3, [sp, #32]
90012efe:	2302      	movs	r3, #2
90012f00:	4620      	mov	r0, r4
90012f02:	e9cd 9306 	strd	r9, r3, [sp, #24]
90012f06:	2301      	movs	r3, #1
90012f08:	9305      	str	r3, [sp, #20]
90012f0a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
90012f0e:	9304      	str	r3, [sp, #16]
90012f10:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
90012f14:	9303      	str	r3, [sp, #12]
90012f16:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
90012f1a:	9302      	str	r3, [sp, #8]
90012f1c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90012f20:	e9cd 8300 	strd	r8, r3, [sp]
90012f24:	463b      	mov	r3, r7
90012f26:	47a8      	blx	r5
90012f28:	b00b      	add	sp, #44	; 0x2c
90012f2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90012f2e:	bf00      	nop
90012f30:	2402818e 	.word	0x2402818e

90012f34 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
90012f34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90012f38:	4698      	mov	r8, r3
90012f3a:	6803      	ldr	r3, [r0, #0]
90012f3c:	b087      	sub	sp, #28
90012f3e:	460e      	mov	r6, r1
90012f40:	6d9d      	ldr	r5, [r3, #88]	; 0x58
90012f42:	4617      	mov	r7, r2
90012f44:	4b0f      	ldr	r3, [pc, #60]	; (90012f84 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
90012f46:	4604      	mov	r4, r0
90012f48:	f8b3 9000 	ldrh.w	r9, [r3]
90012f4c:	f7ff ff50 	bl	90012df0 <_ZN8touchgfx3HAL3lcdEv>
90012f50:	6803      	ldr	r3, [r0, #0]
90012f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90012f54:	4798      	blx	r3
90012f56:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
90012f5a:	463a      	mov	r2, r7
90012f5c:	4631      	mov	r1, r6
90012f5e:	f8cd 900c 	str.w	r9, [sp, #12]
90012f62:	e9cd 0304 	strd	r0, r3, [sp, #16]
90012f66:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
90012f6a:	4620      	mov	r0, r4
90012f6c:	9302      	str	r3, [sp, #8]
90012f6e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
90012f72:	9301      	str	r3, [sp, #4]
90012f74:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
90012f78:	9300      	str	r3, [sp, #0]
90012f7a:	4643      	mov	r3, r8
90012f7c:	47a8      	blx	r5
90012f7e:	b007      	add	sp, #28
90012f80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90012f84:	2402818e 	.word	0x2402818e

90012f88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
90012f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90012f8c:	4604      	mov	r4, r0
90012f8e:	b08f      	sub	sp, #60	; 0x3c
90012f90:	4610      	mov	r0, r2
90012f92:	460d      	mov	r5, r1
90012f94:	4691      	mov	r9, r2
90012f96:	461e      	mov	r6, r3
90012f98:	f007 fed6 	bl	9001ad48 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
90012f9c:	2800      	cmp	r0, #0
90012f9e:	f000 809d 	beq.w	900130dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
90012fa2:	6823      	ldr	r3, [r4, #0]
90012fa4:	4620      	mov	r0, r4
90012fa6:	f8df b198 	ldr.w	fp, [pc, #408]	; 90013140 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
90012faa:	f10d 0838 	add.w	r8, sp, #56	; 0x38
90012fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90012fb0:	4798      	blx	r3
90012fb2:	6823      	ldr	r3, [r4, #0]
90012fb4:	4620      	mov	r0, r4
90012fb6:	f8df a18c 	ldr.w	sl, [pc, #396]	; 90013144 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
90012fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90012fbc:	4798      	blx	r3
90012fbe:	f8bb 3000 	ldrh.w	r3, [fp]
90012fc2:	4f5c      	ldr	r7, [pc, #368]	; (90013134 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90012fc4:	9301      	str	r3, [sp, #4]
90012fc6:	f8ba 3000 	ldrh.w	r3, [sl]
90012fca:	f828 9d1c 	strh.w	r9, [r8, #-28]!
90012fce:	4640      	mov	r0, r8
90012fd0:	9302      	str	r3, [sp, #8]
90012fd2:	883b      	ldrh	r3, [r7, #0]
90012fd4:	9303      	str	r3, [sp, #12]
90012fd6:	4b58      	ldr	r3, [pc, #352]	; (90013138 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
90012fd8:	881a      	ldrh	r2, [r3, #0]
90012fda:	9305      	str	r3, [sp, #20]
90012fdc:	9204      	str	r2, [sp, #16]
90012fde:	f007 ff47 	bl	9001ae70 <_ZNK8touchgfx6Bitmap8getWidthEv>
90012fe2:	8038      	strh	r0, [r7, #0]
90012fe4:	4640      	mov	r0, r8
90012fe6:	f007 ff77 	bl	9001aed8 <_ZNK8touchgfx6Bitmap9getHeightEv>
90012fea:	9b05      	ldr	r3, [sp, #20]
90012fec:	b280      	uxth	r0, r0
90012fee:	8018      	strh	r0, [r3, #0]
90012ff0:	4b52      	ldr	r3, [pc, #328]	; (9001313c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
90012ff2:	781b      	ldrb	r3, [r3, #0]
90012ff4:	2b00      	cmp	r3, #0
90012ff6:	d174      	bne.n	900130e2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
90012ff8:	883b      	ldrh	r3, [r7, #0]
90012ffa:	f8aa 0000 	strh.w	r0, [sl]
90012ffe:	f8ab 3000 	strh.w	r3, [fp]
90013002:	4648      	mov	r0, r9
90013004:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
90013008:	f007 fe9e 	bl	9001ad48 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
9001300c:	2200      	movs	r2, #0
9001300e:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
90013012:	4611      	mov	r1, r2
90013014:	4628      	mov	r0, r5
90013016:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
9001301a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
9001301e:	f7ff fed9 	bl	90012dd4 <_ZN8touchgfx8Drawable5setXYEss>
90013022:	2301      	movs	r3, #1
90013024:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
90013028:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
9001302c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
90013030:	2b00      	cmp	r3, #0
90013032:	dd5c      	ble.n	900130ee <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
90013034:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
90013038:	2b00      	cmp	r3, #0
9001303a:	dd58      	ble.n	900130ee <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
9001303c:	462a      	mov	r2, r5
9001303e:	ab0a      	add	r3, sp, #40	; 0x28
90013040:	f852 0f04 	ldr.w	r0, [r2, #4]!
90013044:	6851      	ldr	r1, [r2, #4]
90013046:	c303      	stmia	r3!, {r0, r1}
90013048:	4631      	mov	r1, r6
9001304a:	a80a      	add	r0, sp, #40	; 0x28
9001304c:	f7ff fbf2 	bl	90012834 <_ZN8touchgfx4RectaNERKS0_>
90013050:	4b38      	ldr	r3, [pc, #224]	; (90013134 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90013052:	2100      	movs	r1, #0
90013054:	f9b3 2000 	ldrsh.w	r2, [r3]
90013058:	4b37      	ldr	r3, [pc, #220]	; (90013138 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
9001305a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
9001305e:	aa0a      	add	r2, sp, #40	; 0x28
90013060:	f9b3 3000 	ldrsh.w	r3, [r3]
90013064:	910c      	str	r1, [sp, #48]	; 0x30
90013066:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
9001306a:	ab08      	add	r3, sp, #32
9001306c:	e892 0003 	ldmia.w	r2, {r0, r1}
90013070:	e883 0003 	stmia.w	r3, {r0, r1}
90013074:	4618      	mov	r0, r3
90013076:	a90c      	add	r1, sp, #48	; 0x30
90013078:	f7ff fbdc 	bl	90012834 <_ZN8touchgfx4RectaNERKS0_>
9001307c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
9001307e:	2b00      	cmp	r3, #0
90013080:	d13c      	bne.n	900130fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
90013082:	2000      	movs	r0, #0
90013084:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
90013088:	2600      	movs	r6, #0
9001308a:	696b      	ldr	r3, [r5, #20]
9001308c:	a908      	add	r1, sp, #32
9001308e:	682a      	ldr	r2, [r5, #0]
90013090:	4628      	mov	r0, r5
90013092:	9305      	str	r3, [sp, #20]
90013094:	616e      	str	r6, [r5, #20]
90013096:	6892      	ldr	r2, [r2, #8]
90013098:	4790      	blx	r2
9001309a:	9b05      	ldr	r3, [sp, #20]
9001309c:	4652      	mov	r2, sl
9001309e:	4649      	mov	r1, r9
900130a0:	616b      	str	r3, [r5, #20]
900130a2:	4628      	mov	r0, r5
900130a4:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
900130a8:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
900130ac:	f7ff fe92 	bl	90012dd4 <_ZN8touchgfx8Drawable5setXYEss>
900130b0:	9a01      	ldr	r2, [sp, #4]
900130b2:	4b23      	ldr	r3, [pc, #140]	; (90013140 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
900130b4:	4620      	mov	r0, r4
900130b6:	801a      	strh	r2, [r3, #0]
900130b8:	9a02      	ldr	r2, [sp, #8]
900130ba:	4b22      	ldr	r3, [pc, #136]	; (90013144 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
900130bc:	801a      	strh	r2, [r3, #0]
900130be:	9a03      	ldr	r2, [sp, #12]
900130c0:	4b1c      	ldr	r3, [pc, #112]	; (90013134 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
900130c2:	801a      	strh	r2, [r3, #0]
900130c4:	4b1c      	ldr	r3, [pc, #112]	; (90013138 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
900130c6:	9a04      	ldr	r2, [sp, #16]
900130c8:	801a      	strh	r2, [r3, #0]
900130ca:	6823      	ldr	r3, [r4, #0]
900130cc:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
900130d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900130d2:	4798      	blx	r3
900130d4:	6823      	ldr	r3, [r4, #0]
900130d6:	4620      	mov	r0, r4
900130d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900130da:	4798      	blx	r3
900130dc:	b00f      	add	sp, #60	; 0x3c
900130de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900130e2:	883b      	ldrh	r3, [r7, #0]
900130e4:	f8ab 0000 	strh.w	r0, [fp]
900130e8:	f8aa 3000 	strh.w	r3, [sl]
900130ec:	e789      	b.n	90013002 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
900130ee:	462a      	mov	r2, r5
900130f0:	ab0a      	add	r3, sp, #40	; 0x28
900130f2:	f852 0f04 	ldr.w	r0, [r2, #4]!
900130f6:	6851      	ldr	r1, [r2, #4]
900130f8:	c303      	stmia	r3!, {r0, r1}
900130fa:	e7a9      	b.n	90013050 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
900130fc:	a807      	add	r0, sp, #28
900130fe:	f008 f827 	bl	9001b150 <_ZNK8touchgfx6Bitmap9getFormatEv>
90013102:	4606      	mov	r6, r0
90013104:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
90013106:	6803      	ldr	r3, [r0, #0]
90013108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001310a:	4798      	blx	r3
9001310c:	4286      	cmp	r6, r0
9001310e:	d1b8      	bne.n	90013082 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
90013110:	f7ff fe6e 	bl	90012df0 <_ZN8touchgfx3HAL3lcdEv>
90013114:	6803      	ldr	r3, [r0, #0]
90013116:	4606      	mov	r6, r0
90013118:	a807      	add	r0, sp, #28
9001311a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9001311c:	9305      	str	r3, [sp, #20]
9001311e:	f008 f817 	bl	9001b150 <_ZNK8touchgfx6Bitmap9getFormatEv>
90013122:	9b05      	ldr	r3, [sp, #20]
90013124:	4601      	mov	r1, r0
90013126:	4630      	mov	r0, r6
90013128:	4798      	blx	r3
9001312a:	f080 0001 	eor.w	r0, r0, #1
9001312e:	b2c0      	uxtb	r0, r0
90013130:	e7a8      	b.n	90013084 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
90013132:	bf00      	nop
90013134:	24028188 	.word	0x24028188
90013138:	2402818a 	.word	0x2402818a
9001313c:	2402818c 	.word	0x2402818c
90013140:	2402818e 	.word	0x2402818e
90013144:	24028190 	.word	0x24028190

90013148 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
90013148:	4b07      	ldr	r3, [pc, #28]	; (90013168 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
9001314a:	b510      	push	{r4, lr}
9001314c:	781b      	ldrb	r3, [r3, #0]
9001314e:	4604      	mov	r4, r0
90013150:	b13b      	cbz	r3, 90013162 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
90013152:	6803      	ldr	r3, [r0, #0]
90013154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90013156:	4798      	blx	r3
90013158:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9001315a:	4283      	cmp	r3, r0
9001315c:	d101      	bne.n	90013162 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
9001315e:	6c20      	ldr	r0, [r4, #64]	; 0x40
90013160:	bd10      	pop	{r4, pc}
90013162:	6be0      	ldr	r0, [r4, #60]	; 0x3c
90013164:	e7fc      	b.n	90013160 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
90013166:	bf00      	nop
90013168:	24028192 	.word	0x24028192

9001316c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
9001316c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90013170:	461d      	mov	r5, r3
90013172:	b08a      	sub	sp, #40	; 0x28
90013174:	f44f 6380 	mov.w	r3, #1024	; 0x400
90013178:	4690      	mov	r8, r2
9001317a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
9001317e:	2400      	movs	r4, #0
90013180:	4607      	mov	r7, r0
90013182:	fb06 8505 	mla	r5, r6, r5, r8
90013186:	9404      	str	r4, [sp, #16]
90013188:	f88d 4020 	strb.w	r4, [sp, #32]
9001318c:	e9cd 3101 	strd	r3, r1, [sp, #4]
90013190:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90013194:	f8ad 3018 	strh.w	r3, [sp, #24]
90013198:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
9001319c:	f8ad 301a 	strh.w	r3, [sp, #26]
900131a0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
900131a4:	f8ad 301c 	strh.w	r3, [sp, #28]
900131a8:	f7ff ffce 	bl	90013148 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
900131ac:	eb00 0545 	add.w	r5, r0, r5, lsl #1
900131b0:	6878      	ldr	r0, [r7, #4]
900131b2:	f8ad 601e 	strh.w	r6, [sp, #30]
900131b6:	a901      	add	r1, sp, #4
900131b8:	9505      	str	r5, [sp, #20]
900131ba:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
900131be:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
900131c2:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
900131c6:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
900131ca:	6803      	ldr	r3, [r0, #0]
900131cc:	685b      	ldr	r3, [r3, #4]
900131ce:	4798      	blx	r3
900131d0:	b00a      	add	sp, #40	; 0x28
900131d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

900131d6 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
900131d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900131da:	b08b      	sub	sp, #44	; 0x2c
900131dc:	2400      	movs	r4, #0
900131de:	4691      	mov	r9, r2
900131e0:	461d      	mov	r5, r3
900131e2:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
900131e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
900131ea:	4688      	mov	r8, r1
900131ec:	4607      	mov	r7, r0
900131ee:	9404      	str	r4, [sp, #16]
900131f0:	fb06 9505 	mla	r5, r6, r5, r9
900131f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
900131f8:	f7ff ffa6 	bl	90013148 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
900131fc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90013200:	eb00 0545 	add.w	r5, r0, r5, lsl #1
90013204:	6878      	ldr	r0, [r7, #4]
90013206:	f8ad 3018 	strh.w	r3, [sp, #24]
9001320a:	a901      	add	r1, sp, #4
9001320c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
90013210:	9505      	str	r5, [sp, #20]
90013212:	f8ad 301a 	strh.w	r3, [sp, #26]
90013216:	f8ad 401c 	strh.w	r4, [sp, #28]
9001321a:	f8ad 601e 	strh.w	r6, [sp, #30]
9001321e:	f8cd 8010 	str.w	r8, [sp, #16]
90013222:	f8ad 4020 	strh.w	r4, [sp, #32]
90013226:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
9001322a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
9001322e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
90013232:	6803      	ldr	r3, [r0, #0]
90013234:	685b      	ldr	r3, [r3, #4]
90013236:	4798      	blx	r3
90013238:	b00b      	add	sp, #44	; 0x2c
9001323a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

90013240 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
90013240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90013244:	b08a      	sub	sp, #40	; 0x28
90013246:	4698      	mov	r8, r3
90013248:	2300      	movs	r3, #0
9001324a:	4606      	mov	r6, r0
9001324c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
90013250:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
90013254:	2d0b      	cmp	r5, #11
90013256:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
9001325a:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
9001325e:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
90013262:	9304      	str	r3, [sp, #16]
90013264:	d137      	bne.n	900132d6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
90013266:	2380      	movs	r3, #128	; 0x80
90013268:	f88d 0020 	strb.w	r0, [sp, #32]
9001326c:	4630      	mov	r0, r6
9001326e:	9203      	str	r2, [sp, #12]
90013270:	e9cd 3101 	strd	r3, r1, [sp, #4]
90013274:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90013278:	f8ad 3018 	strh.w	r3, [sp, #24]
9001327c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90013280:	f8ad 301a 	strh.w	r3, [sp, #26]
90013284:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
90013288:	f8ad 301c 	strh.w	r3, [sp, #28]
9001328c:	f7ff ff5c 	bl	90013148 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90013290:	2c0b      	cmp	r4, #11
90013292:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
90013296:	f8ad 701e 	strh.w	r7, [sp, #30]
9001329a:	bf94      	ite	ls
9001329c:	4b19      	ldrls	r3, [pc, #100]	; (90013304 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
9001329e:	2100      	movhi	r1, #0
900132a0:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
900132a4:	bf98      	it	ls
900132a6:	5d19      	ldrbls	r1, [r3, r4]
900132a8:	fb02 8307 	mla	r3, r2, r7, r8
900132ac:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
900132b0:	10c9      	asrs	r1, r1, #3
900132b2:	fb01 0003 	mla	r0, r1, r3, r0
900132b6:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
900132ba:	a901      	add	r1, sp, #4
900132bc:	9005      	str	r0, [sp, #20]
900132be:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
900132c2:	2300      	movs	r3, #0
900132c4:	6870      	ldr	r0, [r6, #4]
900132c6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
900132ca:	6803      	ldr	r3, [r0, #0]
900132cc:	685b      	ldr	r3, [r3, #4]
900132ce:	4798      	blx	r3
900132d0:	b00a      	add	sp, #40	; 0x28
900132d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900132d6:	2d02      	cmp	r5, #2
900132d8:	d109      	bne.n	900132ee <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
900132da:	28ff      	cmp	r0, #255	; 0xff
900132dc:	d105      	bne.n	900132ea <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
900132de:	f1bc 0f00 	cmp.w	ip, #0
900132e2:	bf14      	ite	ne
900132e4:	2340      	movne	r3, #64	; 0x40
900132e6:	2320      	moveq	r3, #32
900132e8:	e7be      	b.n	90013268 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
900132ea:	2340      	movs	r3, #64	; 0x40
900132ec:	e7bc      	b.n	90013268 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
900132ee:	28ff      	cmp	r0, #255	; 0xff
900132f0:	d105      	bne.n	900132fe <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
900132f2:	f1bc 0f00 	cmp.w	ip, #0
900132f6:	bf14      	ite	ne
900132f8:	2304      	movne	r3, #4
900132fa:	2301      	moveq	r3, #1
900132fc:	e7b4      	b.n	90013268 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
900132fe:	2304      	movs	r3, #4
90013300:	e7b2      	b.n	90013268 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90013302:	bf00      	nop
90013304:	9002b888 	.word	0x9002b888

90013308 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
90013308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001330c:	b08b      	sub	sp, #44	; 0x2c
9001330e:	461d      	mov	r5, r3
90013310:	2400      	movs	r4, #0
90013312:	4688      	mov	r8, r1
90013314:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
90013318:	4693      	mov	fp, r2
9001331a:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
9001331e:	4607      	mov	r7, r0
90013320:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90013324:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
90013328:	9404      	str	r4, [sp, #16]
9001332a:	bf14      	ite	ne
9001332c:	2308      	movne	r3, #8
9001332e:	2302      	moveq	r3, #2
90013330:	fb05 b50a 	mla	r5, r5, sl, fp
90013334:	e9cd 3401 	strd	r3, r4, [sp, #4]
90013338:	f7ff ff06 	bl	90013148 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
9001333c:	2e0b      	cmp	r6, #11
9001333e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90013342:	a901      	add	r1, sp, #4
90013344:	bf98      	it	ls
90013346:	4b13      	ldrls	r3, [pc, #76]	; (90013394 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
90013348:	f8ad a01e 	strh.w	sl, [sp, #30]
9001334c:	bf98      	it	ls
9001334e:	5d9c      	ldrbls	r4, [r3, r6]
90013350:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
90013354:	10e4      	asrs	r4, r4, #3
90013356:	f8cd 8010 	str.w	r8, [sp, #16]
9001335a:	f8ad 3018 	strh.w	r3, [sp, #24]
9001335e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
90013362:	fb04 0405 	mla	r4, r4, r5, r0
90013366:	6878      	ldr	r0, [r7, #4]
90013368:	f8ad 301a 	strh.w	r3, [sp, #26]
9001336c:	2300      	movs	r3, #0
9001336e:	9405      	str	r4, [sp, #20]
90013370:	f8ad 301c 	strh.w	r3, [sp, #28]
90013374:	f88d 9020 	strb.w	r9, [sp, #32]
90013378:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
9001337c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
90013380:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
90013384:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
90013388:	6803      	ldr	r3, [r0, #0]
9001338a:	685b      	ldr	r3, [r3, #4]
9001338c:	4798      	blx	r3
9001338e:	b00b      	add	sp, #44	; 0x2c
90013390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013394:	9002b888 	.word	0x9002b888

90013398 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
90013398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001339c:	461e      	mov	r6, r3
9001339e:	4b0a      	ldr	r3, [pc, #40]	; (900133c8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
900133a0:	460f      	mov	r7, r1
900133a2:	4690      	mov	r8, r2
900133a4:	881d      	ldrh	r5, [r3, #0]
900133a6:	f7ff fd23 	bl	90012df0 <_ZN8touchgfx3HAL3lcdEv>
900133aa:	6803      	ldr	r3, [r0, #0]
900133ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900133ae:	4798      	blx	r3
900133b0:	280b      	cmp	r0, #11
900133b2:	bf96      	itet	ls
900133b4:	4b05      	ldrls	r3, [pc, #20]	; (900133cc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
900133b6:	2400      	movhi	r4, #0
900133b8:	5c1c      	ldrbls	r4, [r3, r0]
900133ba:	fb08 7005 	mla	r0, r8, r5, r7
900133be:	10e4      	asrs	r4, r4, #3
900133c0:	fb04 6000 	mla	r0, r4, r0, r6
900133c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900133c8:	2402818e 	.word	0x2402818e
900133cc:	9002b888 	.word	0x9002b888

900133d0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
900133d0:	b5f0      	push	{r4, r5, r6, r7, lr}
900133d2:	b08b      	sub	sp, #44	; 0x2c
900133d4:	461f      	mov	r7, r3
900133d6:	4604      	mov	r4, r0
900133d8:	4616      	mov	r6, r2
900133da:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
900133de:	2500      	movs	r5, #0
900133e0:	e9cd 3101 	strd	r3, r1, [sp, #4]
900133e4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
900133e8:	9504      	str	r5, [sp, #16]
900133ea:	f8ad 3018 	strh.w	r3, [sp, #24]
900133ee:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
900133f2:	f8ad 301a 	strh.w	r3, [sp, #26]
900133f6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
900133fa:	f8ad 301c 	strh.w	r3, [sp, #28]
900133fe:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
90013402:	f88d 3020 	strb.w	r3, [sp, #32]
90013406:	f7ff fe9f 	bl	90013148 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
9001340a:	463a      	mov	r2, r7
9001340c:	4631      	mov	r1, r6
9001340e:	4603      	mov	r3, r0
90013410:	4620      	mov	r0, r4
90013412:	f7ff ffc1 	bl	90013398 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90013416:	4b0e      	ldr	r3, [pc, #56]	; (90013450 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
90013418:	9005      	str	r0, [sp, #20]
9001341a:	881b      	ldrh	r3, [r3, #0]
9001341c:	f8ad 301e 	strh.w	r3, [sp, #30]
90013420:	f7ff fce6 	bl	90012df0 <_ZN8touchgfx3HAL3lcdEv>
90013424:	6803      	ldr	r3, [r0, #0]
90013426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90013428:	4798      	blx	r3
9001342a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001342c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
90013430:	a901      	add	r1, sp, #4
90013432:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
90013436:	9304      	str	r3, [sp, #16]
90013438:	6860      	ldr	r0, [r4, #4]
9001343a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
9001343e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
90013442:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
90013446:	6803      	ldr	r3, [r0, #0]
90013448:	685b      	ldr	r3, [r3, #4]
9001344a:	4798      	blx	r3
9001344c:	b00b      	add	sp, #44	; 0x2c
9001344e:	bdf0      	pop	{r4, r5, r6, r7, pc}
90013450:	2402818e 	.word	0x2402818e

90013454 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
90013454:	b5f0      	push	{r4, r5, r6, r7, lr}
90013456:	b08d      	sub	sp, #52	; 0x34
90013458:	2501      	movs	r5, #1
9001345a:	4604      	mov	r4, r0
9001345c:	466b      	mov	r3, sp
9001345e:	9503      	str	r5, [sp, #12]
90013460:	e883 0006 	stmia.w	r3, {r1, r2}
90013464:	2300      	movs	r3, #0
90013466:	f8bd 6000 	ldrh.w	r6, [sp]
9001346a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
9001346e:	9306      	str	r3, [sp, #24]
90013470:	6803      	ldr	r3, [r0, #0]
90013472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90013474:	4798      	blx	r3
90013476:	463a      	mov	r2, r7
90013478:	4631      	mov	r1, r6
9001347a:	4603      	mov	r3, r0
9001347c:	4620      	mov	r0, r4
9001347e:	f7ff ff8b 	bl	90013398 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90013482:	6c63      	ldr	r3, [r4, #68]	; 0x44
90013484:	9004      	str	r0, [sp, #16]
90013486:	9307      	str	r3, [sp, #28]
90013488:	f8bd 3004 	ldrh.w	r3, [sp, #4]
9001348c:	f8ad 3020 	strh.w	r3, [sp, #32]
90013490:	f8bd 3006 	ldrh.w	r3, [sp, #6]
90013494:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90013498:	4b0e      	ldr	r3, [pc, #56]	; (900134d4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
9001349a:	881b      	ldrh	r3, [r3, #0]
9001349c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
900134a0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
900134a4:	f7ff fca4 	bl	90012df0 <_ZN8touchgfx3HAL3lcdEv>
900134a8:	6803      	ldr	r3, [r0, #0]
900134aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900134ac:	4798      	blx	r3
900134ae:	23ff      	movs	r3, #255	; 0xff
900134b0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
900134b4:	a903      	add	r1, sp, #12
900134b6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
900134ba:	6860      	ldr	r0, [r4, #4]
900134bc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
900134c0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
900134c4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
900134c8:	6803      	ldr	r3, [r0, #0]
900134ca:	685b      	ldr	r3, [r3, #4]
900134cc:	4798      	blx	r3
900134ce:	6c60      	ldr	r0, [r4, #68]	; 0x44
900134d0:	b00d      	add	sp, #52	; 0x34
900134d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
900134d4:	2402818e 	.word	0x2402818e

900134d8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
900134d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900134dc:	b08c      	sub	sp, #48	; 0x30
900134de:	461e      	mov	r6, r3
900134e0:	2300      	movs	r3, #0
900134e2:	4604      	mov	r4, r0
900134e4:	466d      	mov	r5, sp
900134e6:	9306      	str	r3, [sp, #24]
900134e8:	6803      	ldr	r3, [r0, #0]
900134ea:	e885 0006 	stmia.w	r5, {r1, r2}
900134ee:	2501      	movs	r5, #1
900134f0:	f8bd 7000 	ldrh.w	r7, [sp]
900134f4:	f8bd 8002 	ldrh.w	r8, [sp, #2]
900134f8:	9503      	str	r5, [sp, #12]
900134fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900134fc:	4798      	blx	r3
900134fe:	4642      	mov	r2, r8
90013500:	4639      	mov	r1, r7
90013502:	4603      	mov	r3, r0
90013504:	4620      	mov	r0, r4
90013506:	f7ff ff47 	bl	90013398 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
9001350a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
9001350e:	9004      	str	r0, [sp, #16]
90013510:	f8ad 3020 	strh.w	r3, [sp, #32]
90013514:	f8bd 3006 	ldrh.w	r3, [sp, #6]
90013518:	9607      	str	r6, [sp, #28]
9001351a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
9001351e:	4b10      	ldr	r3, [pc, #64]	; (90013560 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
90013520:	881b      	ldrh	r3, [r3, #0]
90013522:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
90013526:	9b12      	ldr	r3, [sp, #72]	; 0x48
90013528:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
9001352c:	f7ff fc60 	bl	90012df0 <_ZN8touchgfx3HAL3lcdEv>
90013530:	6803      	ldr	r3, [r0, #0]
90013532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90013534:	4798      	blx	r3
90013536:	23ff      	movs	r3, #255	; 0xff
90013538:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
9001353c:	a903      	add	r1, sp, #12
9001353e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
90013542:	6860      	ldr	r0, [r4, #4]
90013544:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
90013548:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
9001354c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
90013550:	6803      	ldr	r3, [r0, #0]
90013552:	685b      	ldr	r3, [r3, #4]
90013554:	4798      	blx	r3
90013556:	4630      	mov	r0, r6
90013558:	b00c      	add	sp, #48	; 0x30
9001355a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9001355e:	bf00      	nop
90013560:	2402818e 	.word	0x2402818e

90013564 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
90013564:	b5f0      	push	{r4, r5, r6, r7, lr}
90013566:	b085      	sub	sp, #20
90013568:	4605      	mov	r5, r0
9001356a:	ac02      	add	r4, sp, #8
9001356c:	e884 0006 	stmia.w	r4, {r1, r2}
90013570:	f8bd 6008 	ldrh.w	r6, [sp, #8]
90013574:	f8bd 700a 	ldrh.w	r7, [sp, #10]
90013578:	f7ff fde6 	bl	90013148 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
9001357c:	4631      	mov	r1, r6
9001357e:	4603      	mov	r3, r0
90013580:	463a      	mov	r2, r7
90013582:	4628      	mov	r0, r5
90013584:	f7ff ff08 	bl	90013398 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90013588:	4a05      	ldr	r2, [pc, #20]	; (900135a0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
9001358a:	682b      	ldr	r3, [r5, #0]
9001358c:	8812      	ldrh	r2, [r2, #0]
9001358e:	9200      	str	r2, [sp, #0]
90013590:	6ede      	ldr	r6, [r3, #108]	; 0x6c
90013592:	4603      	mov	r3, r0
90013594:	4628      	mov	r0, r5
90013596:	e894 0006 	ldmia.w	r4, {r1, r2}
9001359a:	47b0      	blx	r6
9001359c:	b005      	add	sp, #20
9001359e:	bdf0      	pop	{r4, r5, r6, r7, pc}
900135a0:	2402818e 	.word	0x2402818e

900135a4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
900135a4:	b570      	push	{r4, r5, r6, lr}
900135a6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
900135aa:	4604      	mov	r4, r0
900135ac:	b19b      	cbz	r3, 900135d6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
900135ae:	2002      	movs	r0, #2
900135b0:	f7ed f848 	bl	90000644 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
900135b4:	2300      	movs	r3, #0
900135b6:	4620      	mov	r0, r4
900135b8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
900135bc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
900135c0:	6823      	ldr	r3, [r4, #0]
900135c2:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
900135c6:	f7ff fdbf 	bl	90013148 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
900135ca:	4601      	mov	r1, r0
900135cc:	4620      	mov	r0, r4
900135ce:	462b      	mov	r3, r5
900135d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900135d4:	4718      	bx	r3
900135d6:	bd70      	pop	{r4, r5, r6, pc}

900135d8 <_ZN8touchgfx3HAL12setMCUActiveEb>:
900135d8:	b570      	push	{r4, r5, r6, lr}
900135da:	4605      	mov	r5, r0
900135dc:	460c      	mov	r4, r1
900135de:	2003      	movs	r0, #3
900135e0:	b149      	cbz	r1, 900135f6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
900135e2:	f7ec ffc7 	bl	90000574 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
900135e6:	6928      	ldr	r0, [r5, #16]
900135e8:	b168      	cbz	r0, 90013606 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
900135ea:	6803      	ldr	r3, [r0, #0]
900135ec:	2101      	movs	r1, #1
900135ee:	695b      	ldr	r3, [r3, #20]
900135f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900135f4:	4718      	bx	r3
900135f6:	f7ec fff1 	bl	900005dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
900135fa:	6928      	ldr	r0, [r5, #16]
900135fc:	b118      	cbz	r0, 90013606 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
900135fe:	6803      	ldr	r3, [r0, #0]
90013600:	4621      	mov	r1, r4
90013602:	695b      	ldr	r3, [r3, #20]
90013604:	e7f4      	b.n	900135f0 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
90013606:	bd70      	pop	{r4, r5, r6, pc}

90013608 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
90013608:	b538      	push	{r3, r4, r5, lr}
9001360a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
9001360e:	4604      	mov	r4, r0
90013610:	460d      	mov	r5, r1
90013612:	428b      	cmp	r3, r1
90013614:	d006      	beq.n	90013624 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
90013616:	6803      	ldr	r3, [r0, #0]
90013618:	b929      	cbnz	r1, 90013626 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
9001361a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
9001361e:	4798      	blx	r3
90013620:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
90013624:	bd38      	pop	{r3, r4, r5, pc}
90013626:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
9001362a:	e7f8      	b.n	9001361e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

9001362c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
9001362c:	4b0d      	ldr	r3, [pc, #52]	; (90013664 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
9001362e:	b510      	push	{r4, lr}
90013630:	781b      	ldrb	r3, [r3, #0]
90013632:	4604      	mov	r4, r0
90013634:	b95b      	cbnz	r3, 9001364e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
90013636:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
9001363a:	2b02      	cmp	r3, #2
9001363c:	d007      	beq.n	9001364e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
9001363e:	6840      	ldr	r0, [r0, #4]
90013640:	f000 f918 	bl	90013874 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
90013644:	b118      	cbz	r0, 9001364e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
90013646:	6862      	ldr	r2, [r4, #4]
90013648:	7a53      	ldrb	r3, [r2, #9]
9001364a:	2b00      	cmp	r3, #0
9001364c:	d0fc      	beq.n	90013648 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
9001364e:	f7ee f9ab 	bl	900019a8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
90013652:	4620      	mov	r0, r4
90013654:	2100      	movs	r1, #0
90013656:	f7ff ffd7 	bl	90013608 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
9001365a:	4620      	mov	r0, r4
9001365c:	f7ff fd74 	bl	90013148 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90013660:	bd10      	pop	{r4, pc}
90013662:	bf00      	nop
90013664:	24028192 	.word	0x24028192

90013668 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
90013668:	b570      	push	{r4, r5, r6, lr}
9001366a:	4604      	mov	r4, r0
9001366c:	6803      	ldr	r3, [r0, #0]
9001366e:	b919      	cbnz	r1, 90013678 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
90013670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90013672:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013676:	4718      	bx	r3
90013678:	2200      	movs	r2, #0
9001367a:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
9001367e:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
90013682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90013684:	4798      	blx	r3
90013686:	4605      	mov	r5, r0
90013688:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
9001368c:	4620      	mov	r0, r4
9001368e:	2101      	movs	r1, #1
90013690:	f7ff ffba 	bl	90013608 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
90013694:	4628      	mov	r0, r5
90013696:	bd70      	pop	{r4, r5, r6, pc}

90013698 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
90013698:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
9001369c:	1a13      	subs	r3, r2, r0
9001369e:	4258      	negs	r0, r3
900136a0:	4158      	adcs	r0, r3
900136a2:	4770      	bx	lr

900136a4 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
900136a4:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
900136a8:	1a9b      	subs	r3, r3, r2
900136aa:	2b00      	cmp	r3, #0
900136ac:	bfdc      	itt	le
900136ae:	6882      	ldrle	r2, [r0, #8]
900136b0:	189b      	addle	r3, r3, r2
900136b2:	2b01      	cmp	r3, #1
900136b4:	bfcc      	ite	gt
900136b6:	2000      	movgt	r0, #0
900136b8:	2001      	movle	r0, #1
900136ba:	4770      	bx	lr

900136bc <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
900136bc:	6902      	ldr	r2, [r0, #16]
900136be:	6843      	ldr	r3, [r0, #4]
900136c0:	2024      	movs	r0, #36	; 0x24
900136c2:	fb00 3002 	mla	r0, r0, r2, r3
900136c6:	4770      	bx	lr

900136c8 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
900136c8:	6803      	ldr	r3, [r0, #0]
900136ca:	691b      	ldr	r3, [r3, #16]
900136cc:	4718      	bx	r3

900136ce <_ZN8touchgfx13DMA_Interface7executeEv>:
900136ce:	2301      	movs	r3, #1
900136d0:	b570      	push	{r4, r5, r6, lr}
900136d2:	7203      	strb	r3, [r0, #8]
900136d4:	4604      	mov	r4, r0
900136d6:	6840      	ldr	r0, [r0, #4]
900136d8:	6803      	ldr	r3, [r0, #0]
900136da:	699b      	ldr	r3, [r3, #24]
900136dc:	4798      	blx	r3
900136de:	6803      	ldr	r3, [r0, #0]
900136e0:	4605      	mov	r5, r0
900136e2:	2b40      	cmp	r3, #64	; 0x40
900136e4:	d00c      	beq.n	90013700 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
900136e6:	d810      	bhi.n	9001370a <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
900136e8:	2b04      	cmp	r3, #4
900136ea:	d01d      	beq.n	90013728 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
900136ec:	d804      	bhi.n	900136f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
900136ee:	2b01      	cmp	r3, #1
900136f0:	d006      	beq.n	90013700 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
900136f2:	2b02      	cmp	r3, #2
900136f4:	d02c      	beq.n	90013750 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
900136f6:	bd70      	pop	{r4, r5, r6, pc}
900136f8:	2b08      	cmp	r3, #8
900136fa:	d01d      	beq.n	90013738 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
900136fc:	2b20      	cmp	r3, #32
900136fe:	d1fa      	bne.n	900136f6 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
90013700:	6823      	ldr	r3, [r4, #0]
90013702:	4620      	mov	r0, r4
90013704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90013706:	4798      	blx	r3
90013708:	e013      	b.n	90013732 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
9001370a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
9001370e:	d0f7      	beq.n	90013700 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90013710:	d804      	bhi.n	9001371c <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
90013712:	2b80      	cmp	r3, #128	; 0x80
90013714:	d0f4      	beq.n	90013700 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90013716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9001371a:	e7f0      	b.n	900136fe <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
9001371c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
90013720:	d0ee      	beq.n	90013700 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90013722:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90013726:	e7e5      	b.n	900136f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
90013728:	6823      	ldr	r3, [r4, #0]
9001372a:	7f01      	ldrb	r1, [r0, #28]
9001372c:	4620      	mov	r0, r4
9001372e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90013730:	4798      	blx	r3
90013732:	6823      	ldr	r3, [r4, #0]
90013734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90013736:	e006      	b.n	90013746 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
90013738:	6823      	ldr	r3, [r4, #0]
9001373a:	7f01      	ldrb	r1, [r0, #28]
9001373c:	4620      	mov	r0, r4
9001373e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90013740:	4798      	blx	r3
90013742:	6823      	ldr	r3, [r4, #0]
90013744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90013746:	4629      	mov	r1, r5
90013748:	4620      	mov	r0, r4
9001374a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001374e:	4718      	bx	r3
90013750:	6823      	ldr	r3, [r4, #0]
90013752:	4620      	mov	r0, r4
90013754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90013756:	4798      	blx	r3
90013758:	e7f3      	b.n	90013742 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

9001375a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
9001375a:	4770      	bx	lr

9001375c <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
9001375c:	4770      	bx	lr

9001375e <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
9001375e:	4770      	bx	lr

90013760 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
90013760:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
90013764:	b510      	push	{r4, lr}
90013766:	1ad2      	subs	r2, r2, r3
90013768:	2a00      	cmp	r2, #0
9001376a:	bfdc      	itt	le
9001376c:	6884      	ldrle	r4, [r0, #8]
9001376e:	1912      	addle	r2, r2, r4
90013770:	2a01      	cmp	r2, #1
90013772:	dd16      	ble.n	900137a2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
90013774:	6842      	ldr	r2, [r0, #4]
90013776:	2424      	movs	r4, #36	; 0x24
90013778:	fb04 2303 	mla	r3, r4, r3, r2
9001377c:	f101 0220 	add.w	r2, r1, #32
90013780:	f851 4b04 	ldr.w	r4, [r1], #4
90013784:	4291      	cmp	r1, r2
90013786:	f843 4b04 	str.w	r4, [r3], #4
9001378a:	d1f9      	bne.n	90013780 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
9001378c:	780a      	ldrb	r2, [r1, #0]
9001378e:	701a      	strb	r2, [r3, #0]
90013790:	68c3      	ldr	r3, [r0, #12]
90013792:	6882      	ldr	r2, [r0, #8]
90013794:	f3bf 8f5b 	dmb	ish
90013798:	3301      	adds	r3, #1
9001379a:	429a      	cmp	r2, r3
9001379c:	bfd8      	it	le
9001379e:	1a9b      	suble	r3, r3, r2
900137a0:	60c3      	str	r3, [r0, #12]
900137a2:	bd10      	pop	{r4, pc}

900137a4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
900137a4:	6903      	ldr	r3, [r0, #16]
900137a6:	6882      	ldr	r2, [r0, #8]
900137a8:	f3bf 8f5b 	dmb	ish
900137ac:	3301      	adds	r3, #1
900137ae:	429a      	cmp	r2, r3
900137b0:	bfd8      	it	le
900137b2:	1a9b      	suble	r3, r3, r2
900137b4:	6103      	str	r3, [r0, #16]
900137b6:	4770      	bx	lr

900137b8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
900137b8:	b570      	push	{r4, r5, r6, lr}
900137ba:	4604      	mov	r4, r0
900137bc:	460e      	mov	r6, r1
900137be:	6860      	ldr	r0, [r4, #4]
900137c0:	6803      	ldr	r3, [r0, #0]
900137c2:	685b      	ldr	r3, [r3, #4]
900137c4:	4798      	blx	r3
900137c6:	2800      	cmp	r0, #0
900137c8:	d1f9      	bne.n	900137be <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
900137ca:	4d0d      	ldr	r5, [pc, #52]	; (90013800 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
900137cc:	6828      	ldr	r0, [r5, #0]
900137ce:	6803      	ldr	r3, [r0, #0]
900137d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
900137d2:	4798      	blx	r3
900137d4:	f7ee f8f6 	bl	900019c4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
900137d8:	6828      	ldr	r0, [r5, #0]
900137da:	2101      	movs	r1, #1
900137dc:	f7ff ff14 	bl	90013608 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
900137e0:	6860      	ldr	r0, [r4, #4]
900137e2:	4631      	mov	r1, r6
900137e4:	6803      	ldr	r3, [r0, #0]
900137e6:	689b      	ldr	r3, [r3, #8]
900137e8:	4798      	blx	r3
900137ea:	6823      	ldr	r3, [r4, #0]
900137ec:	4620      	mov	r0, r4
900137ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900137f0:	4798      	blx	r3
900137f2:	6828      	ldr	r0, [r5, #0]
900137f4:	6803      	ldr	r3, [r0, #0]
900137f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900137fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
900137fc:	4718      	bx	r3
900137fe:	bf00      	nop
90013800:	24028194 	.word	0x24028194

90013804 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
90013804:	b508      	push	{r3, lr}
90013806:	f7ee f8cf 	bl	900019a8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
9001380a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
9001380e:	f7ee b8d3 	b.w	900019b8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

90013812 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
90013812:	b510      	push	{r4, lr}
90013814:	4604      	mov	r4, r0
90013816:	2114      	movs	r1, #20
90013818:	f013 fc2d 	bl	90027076 <_ZdlPvj>
9001381c:	4620      	mov	r0, r4
9001381e:	bd10      	pop	{r4, pc}

90013820 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
90013820:	b570      	push	{r4, r5, r6, lr}
90013822:	4604      	mov	r4, r0
90013824:	6840      	ldr	r0, [r0, #4]
90013826:	6803      	ldr	r3, [r0, #0]
90013828:	681b      	ldr	r3, [r3, #0]
9001382a:	4798      	blx	r3
9001382c:	4605      	mov	r5, r0
9001382e:	b930      	cbnz	r0, 9001383e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
90013830:	7a23      	ldrb	r3, [r4, #8]
90013832:	b123      	cbz	r3, 9001383e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
90013834:	6860      	ldr	r0, [r4, #4]
90013836:	6803      	ldr	r3, [r0, #0]
90013838:	695b      	ldr	r3, [r3, #20]
9001383a:	4798      	blx	r3
9001383c:	7225      	strb	r5, [r4, #8]
9001383e:	6860      	ldr	r0, [r4, #4]
90013840:	6803      	ldr	r3, [r0, #0]
90013842:	681b      	ldr	r3, [r3, #0]
90013844:	4798      	blx	r3
90013846:	b928      	cbnz	r0, 90013854 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
90013848:	6823      	ldr	r3, [r4, #0]
9001384a:	4620      	mov	r0, r4
9001384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9001384e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013852:	4718      	bx	r3
90013854:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013858:	f7ee b8bc 	b.w	900019d4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

9001385c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
9001385c:	b510      	push	{r4, lr}
9001385e:	6082      	str	r2, [r0, #8]
90013860:	2200      	movs	r2, #0
90013862:	4c03      	ldr	r4, [pc, #12]	; (90013870 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
90013864:	e9c0 2203 	strd	r2, r2, [r0, #12]
90013868:	e9c0 4100 	strd	r4, r1, [r0]
9001386c:	bd10      	pop	{r4, pc}
9001386e:	bf00      	nop
90013870:	9002b89c 	.word	0x9002b89c

90013874 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
90013874:	6840      	ldr	r0, [r0, #4]
90013876:	6803      	ldr	r3, [r0, #0]
90013878:	681b      	ldr	r3, [r3, #0]
9001387a:	4718      	bx	r3

9001387c <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
9001387c:	094a      	lsrs	r2, r1, #5
9001387e:	4b06      	ldr	r3, [pc, #24]	; (90013898 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE+0x1c>)
90013880:	60c1      	str	r1, [r0, #12]
90013882:	ea03 2311 	and.w	r3, r3, r1, lsr #8
90013886:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001388a:	f3c1 01c4 	ubfx	r1, r1, #3, #5
9001388e:	4313      	orrs	r3, r2
90013890:	4319      	orrs	r1, r3
90013892:	8201      	strh	r1, [r0, #16]
90013894:	4770      	bx	lr
90013896:	bf00      	nop
90013898:	fffff800 	.word	0xfffff800

9001389c <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
9001389c:	f1a0 0008 	sub.w	r0, r0, #8
900138a0:	e7ec      	b.n	9001387c <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
900138a2:	bf00      	nop

900138a4 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
900138a4:	b508      	push	{r3, lr}
900138a6:	4b05      	ldr	r3, [pc, #20]	; (900138bc <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
900138a8:	6818      	ldr	r0, [r3, #0]
900138aa:	6803      	ldr	r3, [r0, #0]
900138ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
900138b0:	4798      	blx	r3
900138b2:	1e43      	subs	r3, r0, #1
900138b4:	4258      	negs	r0, r3
900138b6:	4158      	adcs	r0, r3
900138b8:	bd08      	pop	{r3, pc}
900138ba:	bf00      	nop
900138bc:	24028194 	.word	0x24028194

900138c0 <_ZN8touchgfx13PainterRGB565D1Ev>:
900138c0:	4770      	bx	lr

900138c2 <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
900138c2:	3808      	subs	r0, #8
900138c4:	4770      	bx	lr

900138c6 <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
900138c6:	b430      	push	{r4, r5}
900138c8:	eb01 0442 	add.w	r4, r1, r2, lsl #1
900138cc:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
900138d0:	8a02      	ldrh	r2, [r0, #16]
900138d2:	f89d 3010 	ldrb.w	r3, [sp, #16]
900138d6:	4629      	mov	r1, r5
900138d8:	9202      	str	r2, [sp, #8]
900138da:	68c2      	ldr	r2, [r0, #12]
900138dc:	4620      	mov	r0, r4
900138de:	bc30      	pop	{r4, r5}
900138e0:	f7ee bb24 	b.w	90001f2c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

900138e4 <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
900138e4:	f7ee bb18 	b.w	90001f18 <_ZN8touchgfx5paint8tearDownEv>

900138e8 <_ZN8touchgfx13PainterRGB565D0Ev>:
900138e8:	b510      	push	{r4, lr}
900138ea:	4604      	mov	r4, r0
900138ec:	2114      	movs	r1, #20
900138ee:	f013 fbc2 	bl	90027076 <_ZdlPvj>
900138f2:	4620      	mov	r0, r4
900138f4:	bd10      	pop	{r4, pc}

900138f6 <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
900138f6:	f1a0 0008 	sub.w	r0, r0, #8
900138fa:	e7f5      	b.n	900138e8 <_ZN8touchgfx13PainterRGB565D0Ev>

900138fc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
900138fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
900138fe:	6803      	ldr	r3, [r0, #0]
90013900:	460d      	mov	r5, r1
90013902:	4604      	mov	r4, r0
90013904:	4601      	mov	r1, r0
90013906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90013908:	a802      	add	r0, sp, #8
9001390a:	4798      	blx	r3
9001390c:	6828      	ldr	r0, [r5, #0]
9001390e:	6869      	ldr	r1, [r5, #4]
90013910:	466b      	mov	r3, sp
90013912:	c303      	stmia	r3!, {r0, r1}
90013914:	4668      	mov	r0, sp
90013916:	4619      	mov	r1, r3
90013918:	f7fe ff8c 	bl	90012834 <_ZN8touchgfx4RectaNERKS0_>
9001391c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
9001391e:	b1a8      	cbz	r0, 9001394c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
90013920:	6803      	ldr	r3, [r0, #0]
90013922:	1d21      	adds	r1, r4, #4
90013924:	68db      	ldr	r3, [r3, #12]
90013926:	4798      	blx	r3
90013928:	b180      	cbz	r0, 9001394c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
9001392a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
9001392e:	2b00      	cmp	r3, #0
90013930:	dd0c      	ble.n	9001394c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
90013932:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
90013936:	2d00      	cmp	r5, #0
90013938:	dd08      	ble.n	9001394c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
9001393a:	4a2d      	ldr	r2, [pc, #180]	; (900139f0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
9001393c:	7812      	ldrb	r2, [r2, #0]
9001393e:	b13a      	cbz	r2, 90013950 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
90013940:	2a01      	cmp	r2, #1
90013942:	d02d      	beq.n	900139a0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
90013944:	6aa0      	ldr	r0, [r4, #40]	; 0x28
90013946:	6803      	ldr	r3, [r0, #0]
90013948:	691b      	ldr	r3, [r3, #16]
9001394a:	4798      	blx	r3
9001394c:	b004      	add	sp, #16
9001394e:	bd70      	pop	{r4, r5, r6, pc}
90013950:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90013954:	441d      	add	r5, r3
90013956:	b2ad      	uxth	r5, r5
90013958:	b22e      	sxth	r6, r5
9001395a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
9001395e:	42b3      	cmp	r3, r6
90013960:	daf0      	bge.n	90013944 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
90013962:	6823      	ldr	r3, [r4, #0]
90013964:	4669      	mov	r1, sp
90013966:	4620      	mov	r0, r4
90013968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9001396a:	4798      	blx	r3
9001396c:	b940      	cbnz	r0, 90013980 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
9001396e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
90013972:	2b01      	cmp	r3, #1
90013974:	d004      	beq.n	90013980 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
90013976:	3301      	adds	r3, #1
90013978:	105b      	asrs	r3, r3, #1
9001397a:	f8ad 3006 	strh.w	r3, [sp, #6]
9001397e:	e7f0      	b.n	90013962 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
90013980:	f8bd 2006 	ldrh.w	r2, [sp, #6]
90013984:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90013988:	4413      	add	r3, r2
9001398a:	b29b      	uxth	r3, r3
9001398c:	441a      	add	r2, r3
9001398e:	f8ad 3002 	strh.w	r3, [sp, #2]
90013992:	b212      	sxth	r2, r2
90013994:	4296      	cmp	r6, r2
90013996:	dae0      	bge.n	9001395a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
90013998:	1aeb      	subs	r3, r5, r3
9001399a:	f8ad 3006 	strh.w	r3, [sp, #6]
9001399e:	e7dc      	b.n	9001395a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
900139a0:	f8bd 5000 	ldrh.w	r5, [sp]
900139a4:	441d      	add	r5, r3
900139a6:	b2ad      	uxth	r5, r5
900139a8:	b22e      	sxth	r6, r5
900139aa:	f9bd 3000 	ldrsh.w	r3, [sp]
900139ae:	42b3      	cmp	r3, r6
900139b0:	dac8      	bge.n	90013944 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
900139b2:	6823      	ldr	r3, [r4, #0]
900139b4:	4669      	mov	r1, sp
900139b6:	4620      	mov	r0, r4
900139b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900139ba:	4798      	blx	r3
900139bc:	b940      	cbnz	r0, 900139d0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
900139be:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
900139c2:	2b01      	cmp	r3, #1
900139c4:	d004      	beq.n	900139d0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
900139c6:	3301      	adds	r3, #1
900139c8:	105b      	asrs	r3, r3, #1
900139ca:	f8ad 3004 	strh.w	r3, [sp, #4]
900139ce:	e7f0      	b.n	900139b2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
900139d0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
900139d4:	f8bd 3000 	ldrh.w	r3, [sp]
900139d8:	4413      	add	r3, r2
900139da:	b29b      	uxth	r3, r3
900139dc:	441a      	add	r2, r3
900139de:	f8ad 3000 	strh.w	r3, [sp]
900139e2:	b212      	sxth	r2, r2
900139e4:	4296      	cmp	r6, r2
900139e6:	dae0      	bge.n	900139aa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
900139e8:	1aeb      	subs	r3, r5, r3
900139ea:	f8ad 3004 	strh.w	r3, [sp, #4]
900139ee:	e7dc      	b.n	900139aa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
900139f0:	2402818c 	.word	0x2402818c

900139f4 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
900139f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
900139f6:	6803      	ldr	r3, [r0, #0]
900139f8:	4604      	mov	r4, r0
900139fa:	4601      	mov	r1, r0
900139fc:	4668      	mov	r0, sp
900139fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90013a00:	4798      	blx	r3
90013a02:	2100      	movs	r1, #0
90013a04:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
90013a08:	4668      	mov	r0, sp
90013a0a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
90013a0e:	9102      	str	r1, [sp, #8]
90013a10:	a902      	add	r1, sp, #8
90013a12:	f8ad 200c 	strh.w	r2, [sp, #12]
90013a16:	f8ad 300e 	strh.w	r3, [sp, #14]
90013a1a:	f7fe ff0b 	bl	90012834 <_ZN8touchgfx4RectaNERKS0_>
90013a1e:	6823      	ldr	r3, [r4, #0]
90013a20:	4669      	mov	r1, sp
90013a22:	4620      	mov	r0, r4
90013a24:	691b      	ldr	r3, [r3, #16]
90013a26:	4798      	blx	r3
90013a28:	b004      	add	sp, #16
90013a2a:	bd10      	pop	{r4, pc}

90013a2c <_ZN8touchgfx12CanvasWidgetC1Ev>:
90013a2c:	2101      	movs	r1, #1
90013a2e:	2200      	movs	r2, #0
90013a30:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
90013a34:	490a      	ldr	r1, [pc, #40]	; (90013a60 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
90013a36:	8082      	strh	r2, [r0, #4]
90013a38:	6001      	str	r1, [r0, #0]
90013a3a:	21ff      	movs	r1, #255	; 0xff
90013a3c:	80c2      	strh	r2, [r0, #6]
90013a3e:	8102      	strh	r2, [r0, #8]
90013a40:	8142      	strh	r2, [r0, #10]
90013a42:	8182      	strh	r2, [r0, #12]
90013a44:	81c2      	strh	r2, [r0, #14]
90013a46:	8202      	strh	r2, [r0, #16]
90013a48:	8242      	strh	r2, [r0, #18]
90013a4a:	61c2      	str	r2, [r0, #28]
90013a4c:	8402      	strh	r2, [r0, #32]
90013a4e:	8442      	strh	r2, [r0, #34]	; 0x22
90013a50:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
90013a54:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
90013a58:	6282      	str	r2, [r0, #40]	; 0x28
90013a5a:	e9c0 2205 	strd	r2, r2, [r0, #20]
90013a5e:	4770      	bx	lr
90013a60:	9002b8f8 	.word	0x9002b8f8

90013a64 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
90013a64:	6301      	str	r1, [r0, #48]	; 0x30
90013a66:	4770      	bx	lr

90013a68 <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
90013a68:	6b00      	ldr	r0, [r0, #48]	; 0x30
90013a6a:	4770      	bx	lr

90013a6c <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
90013a6c:	6341      	str	r1, [r0, #52]	; 0x34
90013a6e:	4770      	bx	lr

90013a70 <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
90013a70:	6b40      	ldr	r0, [r0, #52]	; 0x34
90013a72:	4770      	bx	lr

90013a74 <_ZN8touchgfx16DynamicDataGraph14beforeAddValueEv>:
90013a74:	4770      	bx	lr

90013a76 <_ZNK8touchgfx16DynamicDataGraph18indexToGlobalIndexEs>:
90013a76:	4608      	mov	r0, r1
90013a78:	4770      	bx	lr

90013a7a <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
90013a7a:	b530      	push	{r4, r5, lr}
90013a7c:	460d      	mov	r5, r1
90013a7e:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
90013a80:	8949      	ldrh	r1, [r1, #10]
90013a82:	b085      	sub	sp, #20
90013a84:	4604      	mov	r4, r0
90013a86:	1ac9      	subs	r1, r1, r3
90013a88:	6803      	ldr	r3, [r0, #0]
90013a8a:	f10d 0206 	add.w	r2, sp, #6
90013a8e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
90013a92:	b209      	sxth	r1, r1
90013a94:	4798      	blx	r3
90013a96:	b1a0      	cbz	r0, 90013ac2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
90013a98:	792b      	ldrb	r3, [r5, #4]
90013a9a:	b993      	cbnz	r3, 90013ac2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
90013a9c:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
90013aa0:	b178      	cbz	r0, 90013ac2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
90013aa2:	6803      	ldr	r3, [r0, #0]
90013aa4:	68db      	ldr	r3, [r3, #12]
90013aa6:	4798      	blx	r3
90013aa8:	b158      	cbz	r0, 90013ac2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
90013aaa:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
90013aae:	aa02      	add	r2, sp, #8
90013ab0:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
90013ab4:	4621      	mov	r1, r4
90013ab6:	f8ad 3008 	strh.w	r3, [sp, #8]
90013aba:	9503      	str	r5, [sp, #12]
90013abc:	6803      	ldr	r3, [r0, #0]
90013abe:	689b      	ldr	r3, [r3, #8]
90013ac0:	4798      	blx	r3
90013ac2:	b005      	add	sp, #20
90013ac4:	bd30      	pop	{r4, r5, pc}

90013ac6 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
90013ac6:	428a      	cmp	r2, r1
90013ac8:	bfbc      	itt	lt
90013aca:	460b      	movlt	r3, r1
90013acc:	4611      	movlt	r1, r2
90013ace:	b510      	push	{r4, lr}
90013ad0:	bfb8      	it	lt
90013ad2:	461a      	movlt	r2, r3
90013ad4:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
90013ad8:	4604      	mov	r4, r0
90013ada:	428b      	cmp	r3, r1
90013adc:	d103      	bne.n	90013ae6 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
90013ade:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
90013ae2:	4293      	cmp	r3, r2
90013ae4:	d011      	beq.n	90013b0a <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
90013ae6:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
90013aea:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
90013aee:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
90013af2:	f005 f8d2 	bl	90018c9a <_ZNK8touchgfx8Drawable10invalidateEv>
90013af6:	f104 0038 	add.w	r0, r4, #56	; 0x38
90013afa:	f005 f8ce 	bl	90018c9a <_ZNK8touchgfx8Drawable10invalidateEv>
90013afe:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
90013b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90013b06:	f005 b8c8 	b.w	90018c9a <_ZNK8touchgfx8Drawable10invalidateEv>
90013b0a:	bd10      	pop	{r4, pc}

90013b0c <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
90013b0c:	428a      	cmp	r2, r1
90013b0e:	bfbc      	itt	lt
90013b10:	460b      	movlt	r3, r1
90013b12:	4611      	movlt	r1, r2
90013b14:	b510      	push	{r4, lr}
90013b16:	bfb8      	it	lt
90013b18:	461a      	movlt	r2, r3
90013b1a:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
90013b1e:	4604      	mov	r4, r0
90013b20:	428b      	cmp	r3, r1
90013b22:	d103      	bne.n	90013b2c <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
90013b24:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
90013b28:	4293      	cmp	r3, r2
90013b2a:	d011      	beq.n	90013b50 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
90013b2c:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
90013b30:	f104 0064 	add.w	r0, r4, #100	; 0x64
90013b34:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
90013b38:	f005 f8af 	bl	90018c9a <_ZNK8touchgfx8Drawable10invalidateEv>
90013b3c:	f104 0038 	add.w	r0, r4, #56	; 0x38
90013b40:	f005 f8ab 	bl	90018c9a <_ZNK8touchgfx8Drawable10invalidateEv>
90013b44:	f104 0090 	add.w	r0, r4, #144	; 0x90
90013b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90013b4c:	f005 b8a5 	b.w	90018c9a <_ZNK8touchgfx8Drawable10invalidateEv>
90013b50:	bd10      	pop	{r4, pc}

90013b52 <_ZN8touchgfx17AbstractDataGraph5clearEv>:
90013b52:	2300      	movs	r3, #0
90013b54:	3038      	adds	r0, #56	; 0x38
90013b56:	f8a0 30e6 	strh.w	r3, [r0, #230]	; 0xe6
90013b5a:	f005 b89e 	b.w	90018c9a <_ZNK8touchgfx8Drawable10invalidateEv>

90013b5e <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi>:
90013b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90013b62:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
90013b66:	4605      	mov	r5, r0
90013b68:	4688      	mov	r8, r1
90013b6a:	4617      	mov	r7, r2
90013b6c:	2b00      	cmp	r3, #0
90013b6e:	d03e      	beq.n	90013bee <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
90013b70:	6803      	ldr	r3, [r0, #0]
90013b72:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
90013b76:	4798      	blx	r3
90013b78:	682b      	ldr	r3, [r5, #0]
90013b7a:	4604      	mov	r4, r0
90013b7c:	4628      	mov	r0, r5
90013b7e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
90013b82:	4798      	blx	r3
90013b84:	4284      	cmp	r4, r0
90013b86:	f9b5 611e 	ldrsh.w	r6, [r5, #286]	; 0x11e
90013b8a:	bfc2      	ittt	gt
90013b8c:	4623      	movgt	r3, r4
90013b8e:	4604      	movgt	r4, r0
90013b90:	4618      	movgt	r0, r3
90013b92:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
90013b96:	42b3      	cmp	r3, r6
90013b98:	da29      	bge.n	90013bee <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
90013b9a:	42b0      	cmp	r0, r6
90013b9c:	bfa8      	it	ge
90013b9e:	4630      	movge	r0, r6
90013ba0:	2800      	cmp	r0, #0
90013ba2:	db24      	blt.n	90013bee <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
90013ba4:	f1b8 0f00 	cmp.w	r8, #0
90013ba8:	d11e      	bne.n	90013be8 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8a>
90013baa:	f8d5 2144 	ldr.w	r2, [r5, #324]	; 0x144
90013bae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
90013bb2:	460c      	mov	r4, r1
90013bb4:	009a      	lsls	r2, r3, #2
90013bb6:	4298      	cmp	r0, r3
90013bb8:	dd0b      	ble.n	90013bd2 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x74>
90013bba:	f8d5 6144 	ldr.w	r6, [r5, #324]	; 0x144
90013bbe:	3301      	adds	r3, #1
90013bc0:	58b6      	ldr	r6, [r6, r2]
90013bc2:	3204      	adds	r2, #4
90013bc4:	42b1      	cmp	r1, r6
90013bc6:	bfa8      	it	ge
90013bc8:	4631      	movge	r1, r6
90013bca:	42b4      	cmp	r4, r6
90013bcc:	bfb8      	it	lt
90013bce:	4634      	movlt	r4, r6
90013bd0:	e7f1      	b.n	90013bb6 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x58>
90013bd2:	1bc9      	subs	r1, r1, r7
90013bd4:	193a      	adds	r2, r7, r4
90013bd6:	4291      	cmp	r1, r2
90013bd8:	d009      	beq.n	90013bee <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
90013bda:	682b      	ldr	r3, [r5, #0]
90013bdc:	4628      	mov	r0, r5
90013bde:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
90013be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90013be6:	4718      	bx	r3
90013be8:	427c      	negs	r4, r7
90013bea:	4639      	mov	r1, r7
90013bec:	e7e2      	b.n	90013bb4 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
90013bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90013bf2 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
90013bf2:	b530      	push	{r4, r5, lr}
90013bf4:	790b      	ldrb	r3, [r1, #4]
90013bf6:	b085      	sub	sp, #20
90013bf8:	4604      	mov	r4, r0
90013bfa:	460d      	mov	r5, r1
90013bfc:	2b02      	cmp	r3, #2
90013bfe:	d020      	beq.n	90013c42 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
90013c00:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
90013c02:	f10d 0206 	add.w	r2, sp, #6
90013c06:	88c9      	ldrh	r1, [r1, #6]
90013c08:	1ac9      	subs	r1, r1, r3
90013c0a:	6803      	ldr	r3, [r0, #0]
90013c0c:	b209      	sxth	r1, r1
90013c0e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
90013c12:	4798      	blx	r3
90013c14:	b1a8      	cbz	r0, 90013c42 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
90013c16:	792b      	ldrb	r3, [r5, #4]
90013c18:	2b01      	cmp	r3, #1
90013c1a:	d812      	bhi.n	90013c42 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
90013c1c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
90013c20:	b178      	cbz	r0, 90013c42 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
90013c22:	6803      	ldr	r3, [r0, #0]
90013c24:	68db      	ldr	r3, [r3, #12]
90013c26:	4798      	blx	r3
90013c28:	b158      	cbz	r0, 90013c42 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
90013c2a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
90013c2e:	aa02      	add	r2, sp, #8
90013c30:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
90013c34:	4621      	mov	r1, r4
90013c36:	f8ad 3008 	strh.w	r3, [sp, #8]
90013c3a:	9503      	str	r5, [sp, #12]
90013c3c:	6803      	ldr	r3, [r0, #0]
90013c3e:	689b      	ldr	r3, [r3, #8]
90013c40:	4798      	blx	r3
90013c42:	b005      	add	sp, #20
90013c44:	bd30      	pop	{r4, r5, pc}

90013c46 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
90013c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90013c4a:	4604      	mov	r4, r0
90013c4c:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
90013c50:	4690      	mov	r8, r2
90013c52:	461f      	mov	r7, r3
90013c54:	9e06      	ldr	r6, [sp, #24]
90013c56:	b928      	cbnz	r0, 90013c64 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
90013c58:	f64f 73ff 	movw	r3, #65535	; 0xffff
90013c5c:	8033      	strh	r3, [r6, #0]
90013c5e:	803b      	strh	r3, [r7, #0]
90013c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90013c64:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
90013c68:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	; 0x116
90013c6c:	1883      	adds	r3, r0, r2
90013c6e:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
90013c72:	1ad2      	subs	r2, r2, r3
90013c74:	b212      	sxth	r2, r2
90013c76:	2a01      	cmp	r2, #1
90013c78:	dc07      	bgt.n	90013c8a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
90013c7a:	2300      	movs	r3, #0
90013c7c:	803b      	strh	r3, [r7, #0]
90013c7e:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
90013c82:	3b01      	subs	r3, #1
90013c84:	8033      	strh	r3, [r6, #0]
90013c86:	2001      	movs	r0, #1
90013c88:	e7ea      	b.n	90013c60 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
90013c8a:	1a08      	subs	r0, r1, r0
90013c8c:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
90013c90:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
90013c94:	0140      	lsls	r0, r0, #5
90013c96:	6b25      	ldr	r5, [r4, #48]	; 0x30
90013c98:	1a5b      	subs	r3, r3, r1
90013c9a:	d459      	bmi.n	90013d50 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
90013c9c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
90013ca0:	fb93 f1f5 	sdiv	r1, r3, r5
90013ca4:	2302      	movs	r3, #2
90013ca6:	fb91 f1f3 	sdiv	r1, r1, r3
90013caa:	3a01      	subs	r2, #1
90013cac:	f005 f9bc 	bl	90019028 <_ZN8touchgfx6muldivElll>
90013cb0:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
90013cb4:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
90013cb8:	2900      	cmp	r1, #0
90013cba:	db55      	blt.n	90013d68 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
90013cbc:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
90013cc0:	2502      	movs	r5, #2
90013cc2:	fb93 f3fc 	sdiv	r3, r3, ip
90013cc6:	fb93 f3f5 	sdiv	r3, r3, r5
90013cca:	eb00 1543 	add.w	r5, r0, r3, lsl #5
90013cce:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
90013cd2:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
90013cd6:	1a52      	subs	r2, r2, r1
90013cd8:	eba8 0003 	sub.w	r0, r8, r3
90013cdc:	ea4f 1040 	mov.w	r0, r0, lsl #5
90013ce0:	d44e      	bmi.n	90013d80 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x13a>
90013ce2:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
90013ce6:	fb92 f1fc 	sdiv	r1, r2, ip
90013cea:	2202      	movs	r2, #2
90013cec:	fb91 f1f2 	sdiv	r1, r1, r2
90013cf0:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
90013cf4:	4413      	add	r3, r2
90013cf6:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
90013cfa:	1ad2      	subs	r2, r2, r3
90013cfc:	b212      	sxth	r2, r2
90013cfe:	3a01      	subs	r2, #1
90013d00:	f005 f992 	bl	90019028 <_ZN8touchgfx6muldivElll>
90013d04:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
90013d08:	6b22      	ldr	r2, [r4, #48]	; 0x30
90013d0a:	2b00      	cmp	r3, #0
90013d0c:	db44      	blt.n	90013d98 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x152>
90013d0e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90013d12:	fb93 f3f2 	sdiv	r3, r3, r2
90013d16:	2202      	movs	r2, #2
90013d18:	fb93 f3f2 	sdiv	r3, r3, r2
90013d1c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
90013d20:	2020      	movs	r0, #32
90013d22:	429d      	cmp	r5, r3
90013d24:	bfde      	ittt	le
90013d26:	461a      	movle	r2, r3
90013d28:	462b      	movle	r3, r5
90013d2a:	4615      	movle	r5, r2
90013d2c:	b21b      	sxth	r3, r3
90013d2e:	2d00      	cmp	r5, #0
90013d30:	bfaa      	itet	ge
90013d32:	351f      	addge	r5, #31
90013d34:	fb95 f5f0 	sdivlt	r5, r5, r0
90013d38:	116d      	asrge	r5, r5, #5
90013d3a:	fb93 f3f0 	sdiv	r3, r3, r0
90013d3e:	b22d      	sxth	r5, r5
90013d40:	803b      	strh	r3, [r7, #0]
90013d42:	2d00      	cmp	r5, #0
90013d44:	8035      	strh	r5, [r6, #0]
90013d46:	da33      	bge.n	90013db0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x16a>
90013d48:	2000      	movs	r0, #0
90013d4a:	8030      	strh	r0, [r6, #0]
90013d4c:	8038      	strh	r0, [r7, #0]
90013d4e:	e787      	b.n	90013c60 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
90013d50:	f06f 0101 	mvn.w	r1, #1
90013d54:	fb01 5303 	mla	r3, r1, r3, r5
90013d58:	1e59      	subs	r1, r3, #1
90013d5a:	2302      	movs	r3, #2
90013d5c:	fb91 f1f5 	sdiv	r1, r1, r5
90013d60:	fb91 f1f3 	sdiv	r1, r1, r3
90013d64:	4249      	negs	r1, r1
90013d66:	e7a0      	b.n	90013caa <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x64>
90013d68:	f06f 0301 	mvn.w	r3, #1
90013d6c:	2502      	movs	r5, #2
90013d6e:	fb03 c301 	mla	r3, r3, r1, ip
90013d72:	3b01      	subs	r3, #1
90013d74:	fb93 f3fc 	sdiv	r3, r3, ip
90013d78:	fb93 f3f5 	sdiv	r3, r3, r5
90013d7c:	425b      	negs	r3, r3
90013d7e:	e7a4      	b.n	90013cca <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x84>
90013d80:	f06f 0101 	mvn.w	r1, #1
90013d84:	fb01 c202 	mla	r2, r1, r2, ip
90013d88:	1e51      	subs	r1, r2, #1
90013d8a:	2202      	movs	r2, #2
90013d8c:	fb91 f1fc 	sdiv	r1, r1, ip
90013d90:	fb91 f1f2 	sdiv	r1, r1, r2
90013d94:	4249      	negs	r1, r1
90013d96:	e7ab      	b.n	90013cf0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xaa>
90013d98:	f06f 0101 	mvn.w	r1, #1
90013d9c:	fb01 2303 	mla	r3, r1, r3, r2
90013da0:	3b01      	subs	r3, #1
90013da2:	fb93 f3f2 	sdiv	r3, r3, r2
90013da6:	2202      	movs	r2, #2
90013da8:	fb93 f3f2 	sdiv	r3, r3, r2
90013dac:	425b      	negs	r3, r3
90013dae:	e7b5      	b.n	90013d1c <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd6>
90013db0:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
90013db4:	f9b7 2000 	ldrsh.w	r2, [r7]
90013db8:	4293      	cmp	r3, r2
90013dba:	dc05      	bgt.n	90013dc8 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x182>
90013dbc:	3b01      	subs	r3, #1
90013dbe:	2000      	movs	r0, #0
90013dc0:	b21b      	sxth	r3, r3
90013dc2:	8033      	strh	r3, [r6, #0]
90013dc4:	803b      	strh	r3, [r7, #0]
90013dc6:	e74b      	b.n	90013c60 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
90013dc8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
90013dcc:	803a      	strh	r2, [r7, #0]
90013dce:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
90013dd2:	f9b6 2000 	ldrsh.w	r2, [r6]
90013dd6:	4293      	cmp	r3, r2
90013dd8:	bfdc      	itt	le
90013dda:	f103 33ff 	addle.w	r3, r3, #4294967295
90013dde:	b21a      	sxthle	r2, r3
90013de0:	8032      	strh	r2, [r6, #0]
90013de2:	e750      	b.n	90013c86 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>

90013de4 <_ZN8touchgfx8Drawable11setPositionEssss>:
90013de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90013de8:	461e      	mov	r6, r3
90013dea:	6803      	ldr	r3, [r0, #0]
90013dec:	4604      	mov	r4, r0
90013dee:	4617      	mov	r7, r2
90013df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90013df2:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
90013df6:	4798      	blx	r3
90013df8:	6823      	ldr	r3, [r4, #0]
90013dfa:	4639      	mov	r1, r7
90013dfc:	4620      	mov	r0, r4
90013dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90013e00:	4798      	blx	r3
90013e02:	6823      	ldr	r3, [r4, #0]
90013e04:	4631      	mov	r1, r6
90013e06:	4620      	mov	r0, r4
90013e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90013e0a:	4790      	blx	r2
90013e0c:	6823      	ldr	r3, [r4, #0]
90013e0e:	4629      	mov	r1, r5
90013e10:	4620      	mov	r0, r4
90013e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90013e14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90013e18:	4718      	bx	r3
	...

90013e1c <_ZN8touchgfx9ContainerC1Ev>:
90013e1c:	2101      	movs	r1, #1
90013e1e:	2200      	movs	r2, #0
90013e20:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
90013e24:	4909      	ldr	r1, [pc, #36]	; (90013e4c <_ZN8touchgfx9ContainerC1Ev+0x30>)
90013e26:	8082      	strh	r2, [r0, #4]
90013e28:	80c2      	strh	r2, [r0, #6]
90013e2a:	8102      	strh	r2, [r0, #8]
90013e2c:	8142      	strh	r2, [r0, #10]
90013e2e:	8182      	strh	r2, [r0, #12]
90013e30:	81c2      	strh	r2, [r0, #14]
90013e32:	8202      	strh	r2, [r0, #16]
90013e34:	8242      	strh	r2, [r0, #18]
90013e36:	61c2      	str	r2, [r0, #28]
90013e38:	8402      	strh	r2, [r0, #32]
90013e3a:	8442      	strh	r2, [r0, #34]	; 0x22
90013e3c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
90013e40:	6001      	str	r1, [r0, #0]
90013e42:	6282      	str	r2, [r0, #40]	; 0x28
90013e44:	e9c0 2205 	strd	r2, r2, [r0, #20]
90013e48:	4770      	bx	lr
90013e4a:	bf00      	nop
90013e4c:	9002b800 	.word	0x9002b800

90013e50 <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
90013e50:	6800      	ldr	r0, [r0, #0]
90013e52:	2800      	cmp	r0, #0
90013e54:	bfbd      	ittte	lt
90013e56:	380f      	sublt	r0, #15
90013e58:	2320      	movlt	r3, #32
90013e5a:	fb90 f0f3 	sdivlt	r0, r0, r3
90013e5e:	3010      	addge	r0, #16
90013e60:	bfa8      	it	ge
90013e62:	1140      	asrge	r0, r0, #5
90013e64:	4770      	bx	lr

90013e66 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
90013e66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013e6a:	4605      	mov	r5, r0
90013e6c:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
90013e70:	4688      	mov	r8, r1
90013e72:	4691      	mov	r9, r2
90013e74:	469a      	mov	sl, r3
90013e76:	b360      	cbz	r0, 90013ed2 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
90013e78:	2700      	movs	r7, #0
90013e7a:	f04f 3bff 	mov.w	fp, #4294967295
90013e7e:	b23e      	sxth	r6, r7
90013e80:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	; 0x11e
90013e84:	42b3      	cmp	r3, r6
90013e86:	dd23      	ble.n	90013ed0 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
90013e88:	682b      	ldr	r3, [r5, #0]
90013e8a:	4631      	mov	r1, r6
90013e8c:	4628      	mov	r0, r5
90013e8e:	3701      	adds	r7, #1
90013e90:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
90013e94:	4798      	blx	r3
90013e96:	9001      	str	r0, [sp, #4]
90013e98:	a801      	add	r0, sp, #4
90013e9a:	f7ff ffd9 	bl	90013e50 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
90013e9e:	682b      	ldr	r3, [r5, #0]
90013ea0:	eba0 0008 	sub.w	r0, r0, r8
90013ea4:	4631      	mov	r1, r6
90013ea6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
90013eaa:	b204      	sxth	r4, r0
90013eac:	4628      	mov	r0, r5
90013eae:	4798      	blx	r3
90013eb0:	9001      	str	r0, [sp, #4]
90013eb2:	a801      	add	r0, sp, #4
90013eb4:	f7ff ffcc 	bl	90013e50 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
90013eb8:	eba0 0009 	sub.w	r0, r0, r9
90013ebc:	fb10 f000 	smulbb	r0, r0, r0
90013ec0:	fb04 0404 	mla	r4, r4, r4, r0
90013ec4:	455c      	cmp	r4, fp
90013ec6:	bf3c      	itt	cc
90013ec8:	f8aa 6000 	strhcc.w	r6, [sl]
90013ecc:	46a3      	movcc	fp, r4
90013ece:	e7d6      	b.n	90013e7e <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
90013ed0:	2001      	movs	r0, #1
90013ed2:	b003      	add	sp, #12
90013ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90013ed8 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
90013ed8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
90013edc:	4604      	mov	r4, r0
90013ede:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
90013ee2:	4688      	mov	r8, r1
90013ee4:	4691      	mov	r9, r2
90013ee6:	b1f8      	cbz	r0, 90013f28 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x50>
90013ee8:	2500      	movs	r5, #0
90013eea:	f04f 37ff 	mov.w	r7, #4294967295
90013eee:	b22e      	sxth	r6, r5
90013ef0:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
90013ef4:	42b3      	cmp	r3, r6
90013ef6:	dd16      	ble.n	90013f26 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x4e>
90013ef8:	6823      	ldr	r3, [r4, #0]
90013efa:	4631      	mov	r1, r6
90013efc:	4620      	mov	r0, r4
90013efe:	3501      	adds	r5, #1
90013f00:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
90013f04:	4798      	blx	r3
90013f06:	9001      	str	r0, [sp, #4]
90013f08:	a801      	add	r0, sp, #4
90013f0a:	f7ff ffa1 	bl	90013e50 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
90013f0e:	b200      	sxth	r0, r0
90013f10:	eba0 0008 	sub.w	r0, r0, r8
90013f14:	2800      	cmp	r0, #0
90013f16:	bfb8      	it	lt
90013f18:	4240      	neglt	r0, r0
90013f1a:	42b8      	cmp	r0, r7
90013f1c:	bf3c      	itt	cc
90013f1e:	f8a9 6000 	strhcc.w	r6, [r9]
90013f22:	4607      	movcc	r7, r0
90013f24:	e7e3      	b.n	90013eee <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x16>
90013f26:	2001      	movs	r0, #1
90013f28:	b003      	add	sp, #12
90013f2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

90013f2e <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
90013f2e:	f8a0 3118 	strh.w	r3, [r0, #280]	; 0x118
90013f32:	f9bd 3000 	ldrsh.w	r3, [sp]
90013f36:	f8a0 1114 	strh.w	r1, [r0, #276]	; 0x114
90013f3a:	f8a0 2116 	strh.w	r2, [r0, #278]	; 0x116
90013f3e:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
90013f42:	4770      	bx	lr

90013f44 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
90013f44:	b537      	push	{r0, r1, r2, r4, r5, lr}
90013f46:	4604      	mov	r4, r0
90013f48:	3038      	adds	r0, #56	; 0x38
90013f4a:	460d      	mov	r5, r1
90013f4c:	f7fe faee 	bl	9001252c <_ZN8touchgfx9Container3addERNS_8DrawableE>
90013f50:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
90013f54:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
90013f58:	4628      	mov	r0, r5
90013f5a:	9200      	str	r2, [sp, #0]
90013f5c:	2200      	movs	r2, #0
90013f5e:	4611      	mov	r1, r2
90013f60:	f7ff ff40 	bl	90013de4 <_ZN8touchgfx8Drawable11setPositionEssss>
90013f64:	b003      	add	sp, #12
90013f66:	bd30      	pop	{r4, r5, pc}

90013f68 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
90013f68:	b538      	push	{r3, r4, r5, lr}
90013f6a:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
90013f6e:	460d      	mov	r5, r1
90013f70:	428b      	cmp	r3, r1
90013f72:	dd08      	ble.n	90013f86 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
90013f74:	6e04      	ldr	r4, [r0, #96]	; 0x60
90013f76:	b134      	cbz	r4, 90013f86 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
90013f78:	6823      	ldr	r3, [r4, #0]
90013f7a:	4620      	mov	r0, r4
90013f7c:	4629      	mov	r1, r5
90013f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90013f80:	4798      	blx	r3
90013f82:	69a4      	ldr	r4, [r4, #24]
90013f84:	e7f7      	b.n	90013f76 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
90013f86:	bd38      	pop	{r3, r4, r5, pc}

90013f88 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
90013f88:	b570      	push	{r4, r5, r6, lr}
90013f8a:	4606      	mov	r6, r0
90013f8c:	460d      	mov	r5, r1
90013f8e:	f8d0 40e4 	ldr.w	r4, [r0, #228]	; 0xe4
90013f92:	b134      	cbz	r4, 90013fa2 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
90013f94:	6823      	ldr	r3, [r4, #0]
90013f96:	4620      	mov	r0, r4
90013f98:	4629      	mov	r1, r5
90013f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90013f9c:	4798      	blx	r3
90013f9e:	69a4      	ldr	r4, [r4, #24]
90013fa0:	e7f7      	b.n	90013f92 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
90013fa2:	f8d6 4110 	ldr.w	r4, [r6, #272]	; 0x110
90013fa6:	b134      	cbz	r4, 90013fb6 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
90013fa8:	6823      	ldr	r3, [r4, #0]
90013faa:	4620      	mov	r0, r4
90013fac:	4629      	mov	r1, r5
90013fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90013fb0:	4798      	blx	r3
90013fb2:	69a4      	ldr	r4, [r4, #24]
90013fb4:	e7f7      	b.n	90013fa6 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
90013fb6:	bd70      	pop	{r4, r5, r6, pc}

90013fb8 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
90013fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
90013fba:	4604      	mov	r4, r0
90013fbc:	6e05      	ldr	r5, [r0, #96]	; 0x60
90013fbe:	b15d      	cbz	r5, 90013fd8 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
90013fc0:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
90013fc4:	4628      	mov	r0, r5
90013fc6:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
90013fca:	9200      	str	r2, [sp, #0]
90013fcc:	2200      	movs	r2, #0
90013fce:	4611      	mov	r1, r2
90013fd0:	f7ff ff08 	bl	90013de4 <_ZN8touchgfx8Drawable11setPositionEssss>
90013fd4:	69ad      	ldr	r5, [r5, #24]
90013fd6:	e7f2      	b.n	90013fbe <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
90013fd8:	f8d4 50e4 	ldr.w	r5, [r4, #228]	; 0xe4
90013fdc:	b15d      	cbz	r5, 90013ff6 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
90013fde:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	; 0xc6
90013fe2:	4628      	mov	r0, r5
90013fe4:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	; 0xc4
90013fe8:	9200      	str	r2, [sp, #0]
90013fea:	2200      	movs	r2, #0
90013fec:	4611      	mov	r1, r2
90013fee:	f7ff fef9 	bl	90013de4 <_ZN8touchgfx8Drawable11setPositionEssss>
90013ff2:	69ad      	ldr	r5, [r5, #24]
90013ff4:	e7f2      	b.n	90013fdc <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
90013ff6:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
90013ffa:	b15d      	cbz	r5, 90014014 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
90013ffc:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
90014000:	4628      	mov	r0, r5
90014002:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
90014006:	9200      	str	r2, [sp, #0]
90014008:	2200      	movs	r2, #0
9001400a:	4611      	mov	r1, r2
9001400c:	f7ff feea 	bl	90013de4 <_ZN8touchgfx8Drawable11setPositionEssss>
90014010:	69ad      	ldr	r5, [r5, #24]
90014012:	e7f2      	b.n	90013ffa <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
90014014:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
90014018:	b15d      	cbz	r5, 90014032 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
9001401a:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
9001401e:	4628      	mov	r0, r5
90014020:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	; 0x98
90014024:	9200      	str	r2, [sp, #0]
90014026:	2200      	movs	r2, #0
90014028:	4611      	mov	r1, r2
9001402a:	f7ff fedb 	bl	90013de4 <_ZN8touchgfx8Drawable11setPositionEssss>
9001402e:	69ad      	ldr	r5, [r5, #24]
90014030:	e7f2      	b.n	90014018 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
90014032:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
90014036:	b15d      	cbz	r5, 90014050 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
90014038:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
9001403c:	4628      	mov	r0, r5
9001403e:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	; 0xf0
90014042:	9200      	str	r2, [sp, #0]
90014044:	2200      	movs	r2, #0
90014046:	4611      	mov	r1, r2
90014048:	f7ff fecc 	bl	90013de4 <_ZN8touchgfx8Drawable11setPositionEssss>
9001404c:	69ad      	ldr	r5, [r5, #24]
9001404e:	e7f2      	b.n	90014036 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
90014050:	6823      	ldr	r3, [r4, #0]
90014052:	4620      	mov	r0, r4
90014054:	695b      	ldr	r3, [r3, #20]
90014056:	b003      	add	sp, #12
90014058:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
9001405c:	4718      	bx	r3

9001405e <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
9001405e:	b430      	push	{r4, r5}
90014060:	b28a      	uxth	r2, r1
90014062:	f8b0 4098 	ldrh.w	r4, [r0, #152]	; 0x98
90014066:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
9001406a:	1b15      	subs	r5, r2, r4
9001406c:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
90014070:	8101      	strh	r1, [r0, #8]
90014072:	f8a0 5094 	strh.w	r5, [r0, #148]	; 0x94
90014076:	f8b0 506c 	ldrh.w	r5, [r0, #108]	; 0x6c
9001407a:	442c      	add	r4, r5
9001407c:	1b12      	subs	r2, r2, r4
9001407e:	bc30      	pop	{r4, r5}
90014080:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
90014084:	f7ff bf98 	b.w	90013fb8 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

90014088 <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
90014088:	b430      	push	{r4, r5}
9001408a:	b28a      	uxth	r2, r1
9001408c:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	; 0xf2
90014090:	f8a0 106e 	strh.w	r1, [r0, #110]	; 0x6e
90014094:	1b15      	subs	r5, r2, r4
90014096:	f8a0 109a 	strh.w	r1, [r0, #154]	; 0x9a
9001409a:	8141      	strh	r1, [r0, #10]
9001409c:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
900140a0:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	; 0xc6
900140a4:	442c      	add	r4, r5
900140a6:	1b12      	subs	r2, r2, r4
900140a8:	bc30      	pop	{r4, r5}
900140aa:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
900140ae:	f7ff bf83 	b.w	90013fb8 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

900140b2 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
900140b2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
900140b6:	fa1f fa83 	uxth.w	sl, r3
900140ba:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
900140be:	4615      	mov	r5, r2
900140c0:	4699      	mov	r9, r3
900140c2:	fa1f f887 	uxth.w	r8, r7
900140c6:	8903      	ldrh	r3, [r0, #8]
900140c8:	4452      	add	r2, sl
900140ca:	4604      	mov	r4, r0
900140cc:	8940      	ldrh	r0, [r0, #10]
900140ce:	460e      	mov	r6, r1
900140d0:	1a9b      	subs	r3, r3, r2
900140d2:	eb08 0201 	add.w	r2, r8, r1
900140d6:	1a80      	subs	r0, r0, r2
900140d8:	b21b      	sxth	r3, r3
900140da:	460a      	mov	r2, r1
900140dc:	4629      	mov	r1, r5
900140de:	b200      	sxth	r0, r0
900140e0:	9000      	str	r0, [sp, #0]
900140e2:	f104 0038 	add.w	r0, r4, #56	; 0x38
900140e6:	f7ff fe7d 	bl	90013de4 <_ZN8touchgfx8Drawable11setPositionEssss>
900140ea:	2200      	movs	r2, #0
900140ec:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
900140f0:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
900140f4:	4611      	mov	r1, r2
900140f6:	9600      	str	r6, [sp, #0]
900140f8:	f7ff fe74 	bl	90013de4 <_ZN8touchgfx8Drawable11setPositionEssss>
900140fc:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
90014100:	2200      	movs	r2, #0
90014102:	f104 0064 	add.w	r0, r4, #100	; 0x64
90014106:	9300      	str	r3, [sp, #0]
90014108:	462b      	mov	r3, r5
9001410a:	4611      	mov	r1, r2
9001410c:	f7ff fe6a 	bl	90013de4 <_ZN8touchgfx8Drawable11setPositionEssss>
90014110:	8921      	ldrh	r1, [r4, #8]
90014112:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
90014116:	f104 0090 	add.w	r0, r4, #144	; 0x90
9001411a:	eba1 010a 	sub.w	r1, r1, sl
9001411e:	2200      	movs	r2, #0
90014120:	9300      	str	r3, [sp, #0]
90014122:	464b      	mov	r3, r9
90014124:	b209      	sxth	r1, r1
90014126:	f7ff fe5d 	bl	90013de4 <_ZN8touchgfx8Drawable11setPositionEssss>
9001412a:	8962      	ldrh	r2, [r4, #10]
9001412c:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
90014130:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
90014134:	eba2 0208 	sub.w	r2, r2, r8
90014138:	9700      	str	r7, [sp, #0]
9001413a:	2100      	movs	r1, #0
9001413c:	b212      	sxth	r2, r2
9001413e:	f7ff fe51 	bl	90013de4 <_ZN8touchgfx8Drawable11setPositionEssss>
90014142:	4620      	mov	r0, r4
90014144:	b002      	add	sp, #8
90014146:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001414a:	f7ff bf35 	b.w	90013fb8 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>
	...

90014150 <_ZN8touchgfx17AbstractDataGraphC1Es>:
90014150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90014154:	b085      	sub	sp, #20
90014156:	4604      	mov	r4, r0
90014158:	2601      	movs	r6, #1
9001415a:	2500      	movs	r5, #0
9001415c:	9103      	str	r1, [sp, #12]
9001415e:	f7ff fe5d 	bl	90013e1c <_ZN8touchgfx9ContainerC1Ev>
90014162:	4b2c      	ldr	r3, [pc, #176]	; (90014214 <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
90014164:	f104 0b38 	add.w	fp, r4, #56	; 0x38
90014168:	f104 0964 	add.w	r9, r4, #100	; 0x64
9001416c:	f104 0890 	add.w	r8, r4, #144	; 0x90
90014170:	6023      	str	r3, [r4, #0]
90014172:	23ff      	movs	r3, #255	; 0xff
90014174:	4658      	mov	r0, fp
90014176:	f104 0abc 	add.w	sl, r4, #188	; 0xbc
9001417a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
9001417e:	f104 07e8 	add.w	r7, r4, #232	; 0xe8
90014182:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
90014186:	f7ff fe49 	bl	90013e1c <_ZN8touchgfx9ContainerC1Ev>
9001418a:	4648      	mov	r0, r9
9001418c:	f7ff fe46 	bl	90013e1c <_ZN8touchgfx9ContainerC1Ev>
90014190:	4640      	mov	r0, r8
90014192:	f7ff fe43 	bl	90013e1c <_ZN8touchgfx9ContainerC1Ev>
90014196:	4650      	mov	r0, sl
90014198:	f7ff fe40 	bl	90013e1c <_ZN8touchgfx9ContainerC1Ev>
9001419c:	4638      	mov	r0, r7
9001419e:	f7ff fe3d 	bl	90013e1c <_ZN8touchgfx9ContainerC1Ev>
900141a2:	9903      	ldr	r1, [sp, #12]
900141a4:	4620      	mov	r0, r4
900141a6:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
900141aa:	f8a4 111c 	strh.w	r1, [r4, #284]	; 0x11c
900141ae:	4659      	mov	r1, fp
900141b0:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
900141b4:	f8a4 511e 	strh.w	r5, [r4, #286]	; 0x11e
900141b8:	f8a4 5120 	strh.w	r5, [r4, #288]	; 0x120
900141bc:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
900141c0:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
900141c4:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
900141c8:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
900141cc:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
900141d0:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
900141d4:	f7fe f9aa 	bl	9001252c <_ZN8touchgfx9Container3addERNS_8DrawableE>
900141d8:	4651      	mov	r1, sl
900141da:	4620      	mov	r0, r4
900141dc:	f7fe f9a6 	bl	9001252c <_ZN8touchgfx9Container3addERNS_8DrawableE>
900141e0:	4649      	mov	r1, r9
900141e2:	4620      	mov	r0, r4
900141e4:	f7fe f9a2 	bl	9001252c <_ZN8touchgfx9Container3addERNS_8DrawableE>
900141e8:	4641      	mov	r1, r8
900141ea:	4620      	mov	r0, r4
900141ec:	f7fe f99e 	bl	9001252c <_ZN8touchgfx9Container3addERNS_8DrawableE>
900141f0:	4639      	mov	r1, r7
900141f2:	4620      	mov	r0, r4
900141f4:	f7fe f99a 	bl	9001252c <_ZN8touchgfx9Container3addERNS_8DrawableE>
900141f8:	4620      	mov	r0, r4
900141fa:	9500      	str	r5, [sp, #0]
900141fc:	462b      	mov	r3, r5
900141fe:	462a      	mov	r2, r5
90014200:	4629      	mov	r1, r5
90014202:	f7ff ff56 	bl	900140b2 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
90014206:	4620      	mov	r0, r4
90014208:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
9001420c:	b005      	add	sp, #20
9001420e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90014212:	bf00      	nop
90014214:	9002bb08 	.word	0x9002bb08

90014218 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
90014218:	4291      	cmp	r1, r2
9001421a:	4613      	mov	r3, r2
9001421c:	d003      	beq.n	90014226 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
9001421e:	460a      	mov	r2, r1
90014220:	4619      	mov	r1, r3
90014222:	f004 bf01 	b.w	90019028 <_ZN8touchgfx6muldivElll>
90014226:	4770      	bx	lr

90014228 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>:
90014228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001422c:	6803      	ldr	r3, [r0, #0]
9001422e:	460d      	mov	r5, r1
90014230:	4604      	mov	r4, r0
90014232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90014236:	4798      	blx	r3
90014238:	42a8      	cmp	r0, r5
9001423a:	4606      	mov	r6, r0
9001423c:	d024      	beq.n	90014288 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib+0x60>
9001423e:	6823      	ldr	r3, [r4, #0]
90014240:	4601      	mov	r1, r0
90014242:	462a      	mov	r2, r5
90014244:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
90014248:	f8d3 70a4 	ldr.w	r7, [r3, #164]	; 0xa4
9001424c:	f7ff ffe4 	bl	90014218 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
90014250:	4680      	mov	r8, r0
90014252:	462a      	mov	r2, r5
90014254:	4631      	mov	r1, r6
90014256:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
9001425a:	f7ff ffdd 	bl	90014218 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
9001425e:	4641      	mov	r1, r8
90014260:	4602      	mov	r2, r0
90014262:	4620      	mov	r0, r4
90014264:	47b8      	blx	r7
90014266:	462a      	mov	r2, r5
90014268:	4631      	mov	r1, r6
9001426a:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
9001426e:	f7ff ffd3 	bl	90014218 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
90014272:	462a      	mov	r2, r5
90014274:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
90014278:	4631      	mov	r1, r6
9001427a:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
9001427e:	f7ff ffcb 	bl	90014218 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
90014282:	6325      	str	r5, [r4, #48]	; 0x30
90014284:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
90014288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

9001428c <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>:
9001428c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90014290:	4604      	mov	r4, r0
90014292:	460f      	mov	r7, r1
90014294:	b1b2      	cbz	r2, 900142c4 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
90014296:	6803      	ldr	r3, [r0, #0]
90014298:	2600      	movs	r6, #0
9001429a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
9001429e:	4798      	blx	r3
900142a0:	4681      	mov	r9, r0
900142a2:	b235      	sxth	r5, r6
900142a4:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
900142a8:	3601      	adds	r6, #1
900142aa:	42ab      	cmp	r3, r5
900142ac:	dd0a      	ble.n	900142c4 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
900142ae:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144
900142b2:	463a      	mov	r2, r7
900142b4:	4649      	mov	r1, r9
900142b6:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
900142ba:	f7ff ffad 	bl	90014218 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
900142be:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
900142c2:	e7ee      	b.n	900142a2 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x16>
900142c4:	6367      	str	r7, [r4, #52]	; 0x34
900142c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

900142ca <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>:
900142ca:	b570      	push	{r4, r5, r6, lr}
900142cc:	6803      	ldr	r3, [r0, #0]
900142ce:	4604      	mov	r4, r0
900142d0:	460d      	mov	r5, r1
900142d2:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
900142d6:	4798      	blx	r3
900142d8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
900142dc:	4629      	mov	r1, r5
900142de:	4620      	mov	r0, r4
900142e0:	3301      	adds	r3, #1
900142e2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
900142e6:	6823      	ldr	r3, [r4, #0]
900142e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900142ec:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
900142f0:	4718      	bx	r3

900142f2 <_ZN8touchgfx16GraphElementLineD1Ev>:
900142f2:	4770      	bx	lr

900142f4 <_ZN8touchgfx16GraphElementLineD0Ev>:
900142f4:	b510      	push	{r4, lr}
900142f6:	4604      	mov	r4, r0
900142f8:	2130      	movs	r1, #48	; 0x30
900142fa:	f012 febc 	bl	90027076 <_ZdlPvj>
900142fe:	4620      	mov	r0, r4
90014300:	bd10      	pop	{r4, pc}

90014302 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
90014302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90014304:	4604      	mov	r4, r0
90014306:	4608      	mov	r0, r1
90014308:	460d      	mov	r5, r1
9001430a:	f7fe fad6 	bl	900128ba <_ZNK8touchgfx4Rect7isEmptyEv>
9001430e:	b978      	cbnz	r0, 90014330 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
90014310:	4620      	mov	r0, r4
90014312:	f7fe fad2 	bl	900128ba <_ZNK8touchgfx4Rect7isEmptyEv>
90014316:	f9b5 6000 	ldrsh.w	r6, [r5]
9001431a:	b150      	cbz	r0, 90014332 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
9001431c:	8026      	strh	r6, [r4, #0]
9001431e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
90014322:	8063      	strh	r3, [r4, #2]
90014324:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
90014328:	80a3      	strh	r3, [r4, #4]
9001432a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
9001432e:	80e3      	strh	r3, [r4, #6]
90014330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90014332:	f9b4 1000 	ldrsh.w	r1, [r4]
90014336:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
9001433a:	42b1      	cmp	r1, r6
9001433c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
90014340:	f8b5 c004 	ldrh.w	ip, [r5, #4]
90014344:	460f      	mov	r7, r1
90014346:	88ed      	ldrh	r5, [r5, #6]
90014348:	bfa8      	it	ge
9001434a:	4637      	movge	r7, r6
9001434c:	4293      	cmp	r3, r2
9001434e:	4618      	mov	r0, r3
90014350:	4466      	add	r6, ip
90014352:	f8b4 c004 	ldrh.w	ip, [r4, #4]
90014356:	bfa8      	it	ge
90014358:	4610      	movge	r0, r2
9001435a:	442a      	add	r2, r5
9001435c:	88e5      	ldrh	r5, [r4, #6]
9001435e:	4461      	add	r1, ip
90014360:	b236      	sxth	r6, r6
90014362:	8027      	strh	r7, [r4, #0]
90014364:	442b      	add	r3, r5
90014366:	b209      	sxth	r1, r1
90014368:	b212      	sxth	r2, r2
9001436a:	8060      	strh	r0, [r4, #2]
9001436c:	b21b      	sxth	r3, r3
9001436e:	428e      	cmp	r6, r1
90014370:	bfac      	ite	ge
90014372:	ebc7 0106 	rsbge	r1, r7, r6
90014376:	ebc7 0101 	rsblt	r1, r7, r1
9001437a:	429a      	cmp	r2, r3
9001437c:	bfac      	ite	ge
9001437e:	ebc0 0202 	rsbge	r2, r0, r2
90014382:	ebc0 0203 	rsblt	r2, r0, r3
90014386:	80a1      	strh	r1, [r4, #4]
90014388:	80e2      	strh	r2, [r4, #6]
9001438a:	e7d1      	b.n	90014330 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

9001438c <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
9001438c:	6800      	ldr	r0, [r0, #0]
9001438e:	2800      	cmp	r0, #0
90014390:	bfb9      	ittee	lt
90014392:	2320      	movlt	r3, #32
90014394:	fb90 f0f3 	sdivlt	r0, r0, r3
90014398:	301f      	addge	r0, #31
9001439a:	1140      	asrge	r0, r0, #5
9001439c:	4770      	bx	lr

9001439e <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
9001439e:	b510      	push	{r4, lr}
900143a0:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
900143a4:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
900143a8:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
900143ac:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
900143b0:	139b      	asrs	r3, r3, #14
900143b2:	13a4      	asrs	r4, r4, #14
900143b4:	429c      	cmp	r4, r3
900143b6:	bfb8      	it	lt
900143b8:	461c      	movlt	r4, r3
900143ba:	2c01      	cmp	r4, #1
900143bc:	dd07      	ble.n	900143ce <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
900143be:	fb91 f1f4 	sdiv	r1, r1, r4
900143c2:	fb90 f0f4 	sdiv	r0, r0, r4
900143c6:	f7ff ffea 	bl	9001439e <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
900143ca:	4360      	muls	r0, r4
900143cc:	bd10      	pop	{r4, pc}
900143ce:	4340      	muls	r0, r0
900143d0:	fb01 0101 	mla	r1, r1, r1, r0
900143d4:	2000      	movs	r0, #0
900143d6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
900143da:	bfb4      	ite	lt
900143dc:	f44f 4380 	movlt.w	r3, #16384	; 0x4000
900143e0:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
900143e4:	18c2      	adds	r2, r0, r3
900143e6:	428a      	cmp	r2, r1
900143e8:	bf9c      	itt	ls
900143ea:	1898      	addls	r0, r3, r2
900143ec:	1a89      	subls	r1, r1, r2
900143ee:	089b      	lsrs	r3, r3, #2
900143f0:	ea4f 0050 	mov.w	r0, r0, lsr #1
900143f4:	d1f6      	bne.n	900143e4 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
900143f6:	e7e9      	b.n	900143cc <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

900143f8 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
900143f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900143fa:	9906      	ldr	r1, [sp, #24]
900143fc:	4606      	mov	r6, r0
900143fe:	461c      	mov	r4, r3
90014400:	2020      	movs	r0, #32
90014402:	4291      	cmp	r1, r2
90014404:	bfbc      	itt	lt
90014406:	9206      	strlt	r2, [sp, #24]
90014408:	460a      	movlt	r2, r1
9001440a:	9907      	ldr	r1, [sp, #28]
9001440c:	428b      	cmp	r3, r1
9001440e:	bfc4      	itt	gt
90014410:	460c      	movgt	r4, r1
90014412:	9307      	strgt	r3, [sp, #28]
90014414:	fb92 f5f0 	sdiv	r5, r2, r0
90014418:	fb94 f4f0 	sdiv	r4, r4, r0
9001441c:	a806      	add	r0, sp, #24
9001441e:	f7ff ffb5 	bl	9001438c <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
90014422:	4607      	mov	r7, r0
90014424:	a807      	add	r0, sp, #28
90014426:	f7ff ffb1 	bl	9001438c <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
9001442a:	1b7a      	subs	r2, r7, r5
9001442c:	1b00      	subs	r0, r0, r4
9001442e:	8035      	strh	r5, [r6, #0]
90014430:	8074      	strh	r4, [r6, #2]
90014432:	80f0      	strh	r0, [r6, #6]
90014434:	4630      	mov	r0, r6
90014436:	80b2      	strh	r2, [r6, #4]
90014438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

9001443a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
9001443a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
9001443c:	9c08      	ldr	r4, [sp, #32]
9001443e:	2602      	movs	r6, #2
90014440:	4605      	mov	r5, r0
90014442:	3401      	adds	r4, #1
90014444:	fb94 f4f6 	sdiv	r4, r4, r6
90014448:	18a6      	adds	r6, r4, r2
9001444a:	191f      	adds	r7, r3, r4
9001444c:	1b12      	subs	r2, r2, r4
9001444e:	1b1b      	subs	r3, r3, r4
90014450:	e9cd 6700 	strd	r6, r7, [sp]
90014454:	f7ff ffd0 	bl	900143f8 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
90014458:	4628      	mov	r0, r5
9001445a:	b003      	add	sp, #12
9001445c:	bdf0      	pop	{r4, r5, r6, r7, pc}

9001445e <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
9001445e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90014462:	6943      	ldr	r3, [r0, #20]
90014464:	b087      	sub	sp, #28
90014466:	4606      	mov	r6, r0
90014468:	460d      	mov	r5, r1
9001446a:	2b00      	cmp	r3, #0
9001446c:	d072      	beq.n	90014554 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
9001446e:	695c      	ldr	r4, [r3, #20]
90014470:	f890 702c 	ldrb.w	r7, [r0, #44]	; 0x2c
90014474:	6823      	ldr	r3, [r4, #0]
90014476:	4620      	mov	r0, r4
90014478:	017f      	lsls	r7, r7, #5
9001447a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
9001447e:	4798      	blx	r3
90014480:	6823      	ldr	r3, [r4, #0]
90014482:	4680      	mov	r8, r0
90014484:	4629      	mov	r1, r5
90014486:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
9001448a:	4620      	mov	r0, r4
9001448c:	4798      	blx	r3
9001448e:	9700      	str	r7, [sp, #0]
90014490:	4603      	mov	r3, r0
90014492:	4642      	mov	r2, r8
90014494:	4631      	mov	r1, r6
90014496:	a802      	add	r0, sp, #8
90014498:	f7ff ffcf 	bl	9001443a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
9001449c:	2d00      	cmp	r5, #0
9001449e:	dd1b      	ble.n	900144d8 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
900144a0:	f105 38ff 	add.w	r8, r5, #4294967295
900144a4:	6823      	ldr	r3, [r4, #0]
900144a6:	4620      	mov	r0, r4
900144a8:	fa0f f888 	sxth.w	r8, r8
900144ac:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
900144b0:	4641      	mov	r1, r8
900144b2:	4798      	blx	r3
900144b4:	6823      	ldr	r3, [r4, #0]
900144b6:	4681      	mov	r9, r0
900144b8:	4641      	mov	r1, r8
900144ba:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
900144be:	4620      	mov	r0, r4
900144c0:	4798      	blx	r3
900144c2:	4631      	mov	r1, r6
900144c4:	4603      	mov	r3, r0
900144c6:	9700      	str	r7, [sp, #0]
900144c8:	a804      	add	r0, sp, #16
900144ca:	464a      	mov	r2, r9
900144cc:	f7ff ffb5 	bl	9001443a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
900144d0:	a904      	add	r1, sp, #16
900144d2:	a802      	add	r0, sp, #8
900144d4:	f7ff ff15 	bl	90014302 <_ZN8touchgfx4Rect11expandToFitERKS0_>
900144d8:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
900144dc:	3b01      	subs	r3, #1
900144de:	429d      	cmp	r5, r3
900144e0:	da19      	bge.n	90014516 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
900144e2:	3501      	adds	r5, #1
900144e4:	6823      	ldr	r3, [r4, #0]
900144e6:	4620      	mov	r0, r4
900144e8:	b22d      	sxth	r5, r5
900144ea:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
900144ee:	4629      	mov	r1, r5
900144f0:	4798      	blx	r3
900144f2:	6823      	ldr	r3, [r4, #0]
900144f4:	4680      	mov	r8, r0
900144f6:	4629      	mov	r1, r5
900144f8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
900144fc:	4620      	mov	r0, r4
900144fe:	4798      	blx	r3
90014500:	4631      	mov	r1, r6
90014502:	4603      	mov	r3, r0
90014504:	9700      	str	r7, [sp, #0]
90014506:	a804      	add	r0, sp, #16
90014508:	4642      	mov	r2, r8
9001450a:	f7ff ff96 	bl	9001443a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
9001450e:	a904      	add	r1, sp, #16
90014510:	a802      	add	r0, sp, #8
90014512:	f7ff fef6 	bl	90014302 <_ZN8touchgfx4Rect11expandToFitERKS0_>
90014516:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
9001451a:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
9001451e:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
90014522:	18ca      	adds	r2, r1, r3
90014524:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
90014528:	f8ad 1012 	strh.w	r1, [sp, #18]
9001452c:	a904      	add	r1, sp, #16
9001452e:	1a9b      	subs	r3, r3, r2
90014530:	2200      	movs	r2, #0
90014532:	f8ad 0014 	strh.w	r0, [sp, #20]
90014536:	a802      	add	r0, sp, #8
90014538:	f8ad 2010 	strh.w	r2, [sp, #16]
9001453c:	f8ad 3016 	strh.w	r3, [sp, #22]
90014540:	f7fe f978 	bl	90012834 <_ZN8touchgfx4RectaNERKS0_>
90014544:	6833      	ldr	r3, [r6, #0]
90014546:	a902      	add	r1, sp, #8
90014548:	4630      	mov	r0, r6
9001454a:	691b      	ldr	r3, [r3, #16]
9001454c:	4798      	blx	r3
9001454e:	b007      	add	sp, #28
90014550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90014554:	681b      	ldr	r3, [r3, #0]
90014556:	deff      	udf	#255	; 0xff

90014558 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
90014558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001455c:	b08b      	sub	sp, #44	; 0x2c
9001455e:	461e      	mov	r6, r3
90014560:	460f      	mov	r7, r1
90014562:	4615      	mov	r5, r2
90014564:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
90014568:	429e      	cmp	r6, r3
9001456a:	9304      	str	r3, [sp, #16]
9001456c:	d074      	beq.n	90014658 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
9001456e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
90014572:	4631      	mov	r1, r6
90014574:	4610      	mov	r0, r2
90014576:	4634      	mov	r4, r6
90014578:	015b      	lsls	r3, r3, #5
9001457a:	9303      	str	r3, [sp, #12]
9001457c:	6813      	ldr	r3, [r2, #0]
9001457e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
90014582:	4798      	blx	r3
90014584:	ab0a      	add	r3, sp, #40	; 0x28
90014586:	f843 0d10 	str.w	r0, [r3, #-16]!
9001458a:	4618      	mov	r0, r3
9001458c:	f7ff fc60 	bl	90013e50 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
90014590:	682b      	ldr	r3, [r5, #0]
90014592:	4631      	mov	r1, r6
90014594:	ea4f 1840 	mov.w	r8, r0, lsl #5
90014598:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
9001459c:	4628      	mov	r0, r5
9001459e:	4798      	blx	r3
900145a0:	ab0a      	add	r3, sp, #40	; 0x28
900145a2:	f843 0d0c 	str.w	r0, [r3, #-12]!
900145a6:	4618      	mov	r0, r3
900145a8:	f7ff fc52 	bl	90013e50 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
900145ac:	4641      	mov	r1, r8
900145ae:	ea4f 1940 	mov.w	r9, r0, lsl #5
900145b2:	4638      	mov	r0, r7
900145b4:	464a      	mov	r2, r9
900145b6:	f012 fc9d 	bl	90026ef4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
900145ba:	2301      	movs	r3, #1
900145bc:	9300      	str	r3, [sp, #0]
900145be:	4628      	mov	r0, r5
900145c0:	9b00      	ldr	r3, [sp, #0]
900145c2:	441c      	add	r4, r3
900145c4:	682b      	ldr	r3, [r5, #0]
900145c6:	b224      	sxth	r4, r4
900145c8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
900145cc:	4621      	mov	r1, r4
900145ce:	4798      	blx	r3
900145d0:	9008      	str	r0, [sp, #32]
900145d2:	a808      	add	r0, sp, #32
900145d4:	f7ff fc3c 	bl	90013e50 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
900145d8:	4621      	mov	r1, r4
900145da:	0143      	lsls	r3, r0, #5
900145dc:	4628      	mov	r0, r5
900145de:	9301      	str	r3, [sp, #4]
900145e0:	682b      	ldr	r3, [r5, #0]
900145e2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
900145e6:	4798      	blx	r3
900145e8:	9009      	str	r0, [sp, #36]	; 0x24
900145ea:	a809      	add	r0, sp, #36	; 0x24
900145ec:	f7ff fc30 	bl	90013e50 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
900145f0:	0143      	lsls	r3, r0, #5
900145f2:	9302      	str	r3, [sp, #8]
900145f4:	9b01      	ldr	r3, [sp, #4]
900145f6:	eba3 0b08 	sub.w	fp, r3, r8
900145fa:	9b02      	ldr	r3, [sp, #8]
900145fc:	eba3 0a09 	sub.w	sl, r3, r9
90014600:	4658      	mov	r0, fp
90014602:	4651      	mov	r1, sl
90014604:	f7ff fecb 	bl	9001439e <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
90014608:	b320      	cbz	r0, 90014654 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
9001460a:	4602      	mov	r2, r0
9001460c:	4651      	mov	r1, sl
9001460e:	9005      	str	r0, [sp, #20]
90014610:	9803      	ldr	r0, [sp, #12]
90014612:	f004 fd09 	bl	90019028 <_ZN8touchgfx6muldivElll>
90014616:	2302      	movs	r3, #2
90014618:	4659      	mov	r1, fp
9001461a:	fb90 faf3 	sdiv	sl, r0, r3
9001461e:	9b05      	ldr	r3, [sp, #20]
90014620:	9803      	ldr	r0, [sp, #12]
90014622:	461a      	mov	r2, r3
90014624:	f004 fd00 	bl	90019028 <_ZN8touchgfx6muldivElll>
90014628:	2302      	movs	r3, #2
9001462a:	eba8 010a 	sub.w	r1, r8, sl
9001462e:	fb90 fbf3 	sdiv	fp, r0, r3
90014632:	683b      	ldr	r3, [r7, #0]
90014634:	eb0b 0209 	add.w	r2, fp, r9
90014638:	4638      	mov	r0, r7
9001463a:	689b      	ldr	r3, [r3, #8]
9001463c:	4798      	blx	r3
9001463e:	683b      	ldr	r3, [r7, #0]
90014640:	9a02      	ldr	r2, [sp, #8]
90014642:	4638      	mov	r0, r7
90014644:	9901      	ldr	r1, [sp, #4]
90014646:	689b      	ldr	r3, [r3, #8]
90014648:	445a      	add	r2, fp
9001464a:	eba1 010a 	sub.w	r1, r1, sl
9001464e:	4798      	blx	r3
90014650:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
90014654:	42a6      	cmp	r6, r4
90014656:	db02      	blt.n	9001465e <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
90014658:	b00b      	add	sp, #44	; 0x2c
9001465a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001465e:	9b00      	ldr	r3, [sp, #0]
90014660:	9a04      	ldr	r2, [sp, #16]
90014662:	42a2      	cmp	r2, r4
90014664:	bf08      	it	eq
90014666:	f04f 33ff 	moveq.w	r3, #4294967295
9001466a:	e7a7      	b.n	900145bc <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>

9001466c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
9001466c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90014670:	6943      	ldr	r3, [r0, #20]
90014672:	b0a2      	sub	sp, #136	; 0x88
90014674:	4606      	mov	r6, r0
90014676:	460f      	mov	r7, r1
90014678:	2b00      	cmp	r3, #0
9001467a:	d06c      	beq.n	90014756 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xea>
9001467c:	695c      	ldr	r4, [r3, #20]
9001467e:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
90014682:	2b01      	cmp	r3, #1
90014684:	dc04      	bgt.n	90014690 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
90014686:	2401      	movs	r4, #1
90014688:	4620      	mov	r0, r4
9001468a:	b022      	add	sp, #136	; 0x88
9001468c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90014690:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
90014694:	ad22      	add	r5, sp, #136	; 0x88
90014696:	011b      	lsls	r3, r3, #4
90014698:	f845 3d70 	str.w	r3, [r5, #-112]!
9001469c:	4628      	mov	r0, r5
9001469e:	f7ff fe75 	bl	9001438c <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
900146a2:	8839      	ldrh	r1, [r7, #0]
900146a4:	88ba      	ldrh	r2, [r7, #4]
900146a6:	b280      	uxth	r0, r0
900146a8:	6823      	ldr	r3, [r4, #0]
900146aa:	440a      	add	r2, r1
900146ac:	1a09      	subs	r1, r1, r0
900146ae:	4402      	add	r2, r0
900146b0:	f10d 000e 	add.w	r0, sp, #14
900146b4:	b209      	sxth	r1, r1
900146b6:	9000      	str	r0, [sp, #0]
900146b8:	b212      	sxth	r2, r2
900146ba:	f8d3 8124 	ldr.w	r8, [r3, #292]	; 0x124
900146be:	4620      	mov	r0, r4
900146c0:	ab03      	add	r3, sp, #12
900146c2:	47c0      	blx	r8
900146c4:	2800      	cmp	r0, #0
900146c6:	d0de      	beq.n	90014686 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
900146c8:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
900146cc:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
900146d0:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
900146d4:	18ca      	adds	r2, r1, r3
900146d6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
900146da:	f8ad 1012 	strh.w	r1, [sp, #18]
900146de:	4639      	mov	r1, r7
900146e0:	1a9b      	subs	r3, r3, r2
900146e2:	2200      	movs	r2, #0
900146e4:	f8ad 0014 	strh.w	r0, [sp, #20]
900146e8:	a804      	add	r0, sp, #16
900146ea:	f8ad 3016 	strh.w	r3, [sp, #22]
900146ee:	f8ad 2010 	strh.w	r2, [sp, #16]
900146f2:	f7fe f89f 	bl	90012834 <_ZN8touchgfx4RectaNERKS0_>
900146f6:	aa04      	add	r2, sp, #16
900146f8:	4631      	mov	r1, r6
900146fa:	4628      	mov	r0, r5
900146fc:	f012 fa80 	bl	90026c00 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
90014700:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	; 0x120
90014704:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
90014708:	2f00      	cmp	r7, #0
9001470a:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
9001470e:	dd03      	ble.n	90014718 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
90014710:	42bb      	cmp	r3, r7
90014712:	da01      	bge.n	90014718 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
90014714:	42ba      	cmp	r2, r7
90014716:	da11      	bge.n	9001473c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xd0>
90014718:	9200      	str	r2, [sp, #0]
9001471a:	4622      	mov	r2, r4
9001471c:	4629      	mov	r1, r5
9001471e:	4630      	mov	r0, r6
90014720:	f7ff ff1a 	bl	90014558 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
90014724:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
90014728:	4628      	mov	r0, r5
9001472a:	f012 fb25 	bl	90026d78 <_ZN8touchgfx6Canvas6renderEh>
9001472e:	4b0b      	ldr	r3, [pc, #44]	; (9001475c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xf0>)
90014730:	4604      	mov	r4, r0
90014732:	a80e      	add	r0, sp, #56	; 0x38
90014734:	9306      	str	r3, [sp, #24]
90014736:	f000 ff19 	bl	9001556c <_ZN8touchgfx7OutlineD1Ev>
9001473a:	e7a5      	b.n	90014688 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
9001473c:	1e7a      	subs	r2, r7, #1
9001473e:	4629      	mov	r1, r5
90014740:	4630      	mov	r0, r6
90014742:	b212      	sxth	r2, r2
90014744:	9200      	str	r2, [sp, #0]
90014746:	4622      	mov	r2, r4
90014748:	f7ff ff06 	bl	90014558 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
9001474c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
90014750:	9300      	str	r3, [sp, #0]
90014752:	463b      	mov	r3, r7
90014754:	e7e1      	b.n	9001471a <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xae>
90014756:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
9001475a:	deff      	udf	#255	; 0xff
9001475c:	9002c2b8 	.word	0x9002c2b8

90014760 <_ZNK8touchgfx25GraphWrapAndOverwriteData18indexToGlobalIndexEs>:
90014760:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	; 0x11c
90014764:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
90014768:	4293      	cmp	r3, r2
9001476a:	da01      	bge.n	90014770 <_ZNK8touchgfx25GraphWrapAndOverwriteData18indexToGlobalIndexEs+0x10>
9001476c:	4608      	mov	r0, r1
9001476e:	4770      	bx	lr
90014770:	f9b0 3120 	ldrsh.w	r3, [r0, #288]	; 0x120
90014774:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
90014778:	428b      	cmp	r3, r1
9001477a:	bfc7      	ittee	gt
9001477c:	1809      	addgt	r1, r1, r0
9001477e:	1ac8      	subgt	r0, r1, r3
90014780:	1ac0      	suble	r0, r0, r3
90014782:	1a80      	suble	r0, r0, r2
90014784:	bfd8      	it	le
90014786:	1840      	addle	r0, r0, r1
90014788:	4770      	bx	lr

9001478a <_ZN8touchgfx25GraphWrapAndOverwriteData5clearEv>:
9001478a:	b510      	push	{r4, lr}
9001478c:	4604      	mov	r4, r0
9001478e:	f7ff f9e0 	bl	90013b52 <_ZN8touchgfx17AbstractDataGraph5clearEv>
90014792:	2300      	movs	r3, #0
90014794:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
90014798:	bd10      	pop	{r4, pc}

9001479a <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv>:
9001479a:	b570      	push	{r4, r5, r6, lr}
9001479c:	f9b0 314c 	ldrsh.w	r3, [r0, #332]	; 0x14c
900147a0:	4604      	mov	r4, r0
900147a2:	bb13      	cbnz	r3, 900147ea <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x50>
900147a4:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	; 0x11c
900147a8:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
900147ac:	429a      	cmp	r2, r3
900147ae:	dc1c      	bgt.n	900147ea <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x50>
900147b0:	6803      	ldr	r3, [r0, #0]
900147b2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
900147b6:	4798      	blx	r3
900147b8:	6823      	ldr	r3, [r4, #0]
900147ba:	4605      	mov	r5, r0
900147bc:	4620      	mov	r0, r4
900147be:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
900147c2:	4798      	blx	r3
900147c4:	4606      	mov	r6, r0
900147c6:	2d00      	cmp	r5, #0
900147c8:	da05      	bge.n	900147d6 <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x3c>
900147ca:	b229      	sxth	r1, r5
900147cc:	4620      	mov	r0, r4
900147ce:	f7ff fbdb 	bl	90013f88 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
900147d2:	3501      	adds	r5, #1
900147d4:	e7f7      	b.n	900147c6 <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x2c>
900147d6:	f9b4 511c 	ldrsh.w	r5, [r4, #284]	; 0x11c
900147da:	42b5      	cmp	r5, r6
900147dc:	dc05      	bgt.n	900147ea <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x50>
900147de:	b229      	sxth	r1, r5
900147e0:	4620      	mov	r0, r4
900147e2:	f7ff fbd1 	bl	90013f88 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
900147e6:	3501      	adds	r5, #1
900147e8:	e7f7      	b.n	900147da <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x40>
900147ea:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	; 0x11e
900147ee:	f9b4 311c 	ldrsh.w	r3, [r4, #284]	; 0x11c
900147f2:	429a      	cmp	r2, r3
900147f4:	db0b      	blt.n	9001480e <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x74>
900147f6:	f9b4 114c 	ldrsh.w	r1, [r4, #332]	; 0x14c
900147fa:	4620      	mov	r0, r4
900147fc:	f7ff fbb4 	bl	90013f68 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
90014800:	f9b4 114c 	ldrsh.w	r1, [r4, #332]	; 0x14c
90014804:	4620      	mov	r0, r4
90014806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001480a:	f7ff bbbd 	b.w	90013f88 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
9001480e:	bd70      	pop	{r4, r5, r6, pc}

90014810 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi>:
90014810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90014814:	f9b0 514c 	ldrsh.w	r5, [r0, #332]	; 0x14c
90014818:	4604      	mov	r4, r0
9001481a:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	; 0x11c
9001481e:	4688      	mov	r8, r1
90014820:	1c6e      	adds	r6, r5, #1
90014822:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
90014826:	4629      	mov	r1, r5
90014828:	b236      	sxth	r6, r6
9001482a:	fb96 f3f2 	sdiv	r3, r6, r2
9001482e:	fb02 6313 	mls	r3, r2, r3, r6
90014832:	f8a0 314c 	strh.w	r3, [r0, #332]	; 0x14c
90014836:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
9001483a:	42ab      	cmp	r3, r5
9001483c:	6803      	ldr	r3, [r0, #0]
9001483e:	bf08      	it	eq
90014840:	f8a0 611e 	strheq.w	r6, [r0, #286]	; 0x11e
90014844:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
90014848:	4798      	blx	r3
9001484a:	4629      	mov	r1, r5
9001484c:	f847 8020 	str.w	r8, [r7, r0, lsl #2]
90014850:	4620      	mov	r0, r4
90014852:	f8a4 6120 	strh.w	r6, [r4, #288]	; 0x120
90014856:	f7ff fb87 	bl	90013f68 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
9001485a:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	; 0x11e
9001485e:	f9b4 311c 	ldrsh.w	r3, [r4, #284]	; 0x11c
90014862:	429a      	cmp	r2, r3
90014864:	db28      	blt.n	900148b8 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
90014866:	4629      	mov	r1, r5
90014868:	4620      	mov	r0, r4
9001486a:	f7ff fb8d 	bl	90013f88 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
9001486e:	bb1d      	cbnz	r5, 900148b8 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
90014870:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	; 0x11e
90014874:	f9b4 311c 	ldrsh.w	r3, [r4, #284]	; 0x11c
90014878:	429a      	cmp	r2, r3
9001487a:	db1d      	blt.n	900148b8 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
9001487c:	6823      	ldr	r3, [r4, #0]
9001487e:	4620      	mov	r0, r4
90014880:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
90014884:	4798      	blx	r3
90014886:	6823      	ldr	r3, [r4, #0]
90014888:	4606      	mov	r6, r0
9001488a:	4620      	mov	r0, r4
9001488c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
90014890:	4798      	blx	r3
90014892:	4607      	mov	r7, r0
90014894:	2e00      	cmp	r6, #0
90014896:	da05      	bge.n	900148a4 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0x94>
90014898:	b231      	sxth	r1, r6
9001489a:	4620      	mov	r0, r4
9001489c:	f7ff fb74 	bl	90013f88 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
900148a0:	3601      	adds	r6, #1
900148a2:	e7f7      	b.n	90014894 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0x84>
900148a4:	f9b4 611c 	ldrsh.w	r6, [r4, #284]	; 0x11c
900148a8:	42be      	cmp	r6, r7
900148aa:	dc05      	bgt.n	900148b8 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
900148ac:	b231      	sxth	r1, r6
900148ae:	4620      	mov	r0, r4
900148b0:	f7ff fb6a 	bl	90013f88 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
900148b4:	3601      	adds	r6, #1
900148b6:	e7f7      	b.n	900148a8 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0x98>
900148b8:	4628      	mov	r0, r5
900148ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

900148be <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv>:
900148be:	b508      	push	{r3, lr}
900148c0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
900148c4:	b10b      	cbz	r3, 900148ca <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv+0xc>
900148c6:	f7ed fd39 	bl	9000233c <_ZNK8touchgfx8Drawable17invalidateContentEv>
900148ca:	bd08      	pop	{r3, pc}

900148cc <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
900148cc:	6803      	ldr	r3, [r0, #0]
900148ce:	f64f 71fe 	movw	r1, #65534	; 0xfffe
900148d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900148d4:	4718      	bx	r3

900148d6 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
900148d6:	4770      	bx	lr

900148d8 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
900148d8:	b510      	push	{r4, lr}
900148da:	4604      	mov	r4, r0
900148dc:	212c      	movs	r1, #44	; 0x2c
900148de:	f012 fbca 	bl	90027076 <_ZdlPvj>
900148e2:	4620      	mov	r0, r4
900148e4:	bd10      	pop	{r4, pc}

900148e6 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
900148e6:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
900148ea:	2bff      	cmp	r3, #255	; 0xff
900148ec:	b510      	push	{r4, lr}
900148ee:	d104      	bne.n	900148fa <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
900148f0:	8cca      	ldrh	r2, [r1, #38]	; 0x26
900148f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
900148f6:	429a      	cmp	r2, r3
900148f8:	d105      	bne.n	90014906 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
900148fa:	2300      	movs	r3, #0
900148fc:	8003      	strh	r3, [r0, #0]
900148fe:	8043      	strh	r3, [r0, #2]
90014900:	8083      	strh	r3, [r0, #4]
90014902:	80c3      	strh	r3, [r0, #6]
90014904:	bd10      	pop	{r4, pc}
90014906:	2300      	movs	r3, #0
90014908:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
9001490c:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
90014910:	8003      	strh	r3, [r0, #0]
90014912:	8043      	strh	r3, [r0, #2]
90014914:	8084      	strh	r4, [r0, #4]
90014916:	80c2      	strh	r2, [r0, #6]
90014918:	e7f4      	b.n	90014904 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

9001491a <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
9001491a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001491e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
90014922:	b087      	sub	sp, #28
90014924:	4604      	mov	r4, r0
90014926:	4689      	mov	r9, r1
90014928:	b363      	cbz	r3, 90014984 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
9001492a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
9001492c:	f64f 73ff 	movw	r3, #65535	; 0xffff
90014930:	429a      	cmp	r2, r3
90014932:	d027      	beq.n	90014984 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
90014934:	ad06      	add	r5, sp, #24
90014936:	2700      	movs	r7, #0
90014938:	f825 2d0c 	strh.w	r2, [r5, #-12]!
9001493c:	4628      	mov	r0, r5
9001493e:	f006 fa97 	bl	9001ae70 <_ZNK8touchgfx6Bitmap8getWidthEv>
90014942:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
90014946:	a904      	add	r1, sp, #16
90014948:	f8ad 0014 	strh.w	r0, [sp, #20]
9001494c:	f8ad 3016 	strh.w	r3, [sp, #22]
90014950:	4620      	mov	r0, r4
90014952:	6823      	ldr	r3, [r4, #0]
90014954:	9704      	str	r7, [sp, #16]
90014956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90014958:	4798      	blx	r3
9001495a:	f7fe fa49 	bl	90012df0 <_ZN8touchgfx3HAL3lcdEv>
9001495e:	6803      	ldr	r3, [r0, #0]
90014960:	4606      	mov	r6, r0
90014962:	4628      	mov	r0, r5
90014964:	f8d3 800c 	ldr.w	r8, [r3, #12]
90014968:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
9001496a:	f8ad 300c 	strh.w	r3, [sp, #12]
9001496e:	f006 fb6b 	bl	9001b048 <_ZNK8touchgfx6Bitmap7getDataEv>
90014972:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
90014976:	4601      	mov	r1, r0
90014978:	9701      	str	r7, [sp, #4]
9001497a:	aa04      	add	r2, sp, #16
9001497c:	9300      	str	r3, [sp, #0]
9001497e:	4630      	mov	r0, r6
90014980:	464b      	mov	r3, r9
90014982:	47c0      	blx	r8
90014984:	b007      	add	sp, #28
90014986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

9001498a <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
9001498a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
9001498c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
90014990:	460d      	mov	r5, r1
90014992:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
90014996:	2100      	movs	r1, #0
90014998:	f8ad 3006 	strh.w	r3, [sp, #6]
9001499c:	4604      	mov	r4, r0
9001499e:	6803      	ldr	r3, [r0, #0]
900149a0:	f8ad 2004 	strh.w	r2, [sp, #4]
900149a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900149a6:	9100      	str	r1, [sp, #0]
900149a8:	4669      	mov	r1, sp
900149aa:	4798      	blx	r3
900149ac:	4621      	mov	r1, r4
900149ae:	a802      	add	r0, sp, #8
900149b0:	f004 fa0e 	bl	90018dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900149b4:	f7fe fa1c 	bl	90012df0 <_ZN8touchgfx3HAL3lcdEv>
900149b8:	6803      	ldr	r3, [r0, #0]
900149ba:	aa02      	add	r2, sp, #8
900149bc:	4669      	mov	r1, sp
900149be:	695e      	ldr	r6, [r3, #20]
900149c0:	462b      	mov	r3, r5
900149c2:	47b0      	blx	r6
900149c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
900149c8:	2800      	cmp	r0, #0
900149ca:	bf08      	it	eq
900149cc:	461d      	moveq	r5, r3
900149ce:	84e5      	strh	r5, [r4, #38]	; 0x26
900149d0:	b004      	add	sp, #16
900149d2:	bd70      	pop	{r4, r5, r6, pc}

900149d4 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
900149d4:	2200      	movs	r2, #0
900149d6:	8082      	strh	r2, [r0, #4]
900149d8:	80c2      	strh	r2, [r0, #6]
900149da:	8102      	strh	r2, [r0, #8]
900149dc:	8142      	strh	r2, [r0, #10]
900149de:	8182      	strh	r2, [r0, #12]
900149e0:	81c2      	strh	r2, [r0, #14]
900149e2:	8202      	strh	r2, [r0, #16]
900149e4:	8242      	strh	r2, [r0, #18]
900149e6:	61c2      	str	r2, [r0, #28]
900149e8:	8402      	strh	r2, [r0, #32]
900149ea:	8442      	strh	r2, [r0, #34]	; 0x22
900149ec:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
900149f0:	e9c0 2205 	strd	r2, r2, [r0, #20]
900149f4:	2201      	movs	r2, #1
900149f6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
900149fa:	4a04      	ldr	r2, [pc, #16]	; (90014a0c <_ZN8touchgfx14SnapshotWidgetC1Ev+0x38>)
900149fc:	6002      	str	r2, [r0, #0]
900149fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
90014a02:	84c2      	strh	r2, [r0, #38]	; 0x26
90014a04:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
90014a08:	4770      	bx	lr
90014a0a:	bf00      	nop
90014a0c:	9002bcb4 	.word	0x9002bcb4

90014a10 <_ZN8touchgfx13AnimatedImage12setBitmapEndERKNS_6BitmapE>:
90014a10:	880b      	ldrh	r3, [r1, #0]
90014a12:	8643      	strh	r3, [r0, #50]	; 0x32
90014a14:	4770      	bx	lr

90014a16 <_ZN8touchgfx13AnimatedImageD1Ev>:
90014a16:	4770      	bx	lr

90014a18 <_ZN8touchgfx13AnimatedImage9setBitmapERKNS_6BitmapE>:
90014a18:	880b      	ldrh	r3, [r1, #0]
90014a1a:	8603      	strh	r3, [r0, #48]	; 0x30
90014a1c:	f000 bd33 	b.w	90015486 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

90014a20 <_ZN8touchgfx13AnimatedImage13stopAnimationEv>:
90014a20:	b513      	push	{r0, r1, r4, lr}
90014a22:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
90014a26:	4604      	mov	r4, r0
90014a28:	b143      	cbz	r3, 90014a3c <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x1c>
90014a2a:	f003 f8a7 	bl	90017b7c <_ZN8touchgfx11Application11getInstanceEv>
90014a2e:	4621      	mov	r1, r4
90014a30:	3004      	adds	r0, #4
90014a32:	f003 f8c8 	bl	90017bc6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
90014a36:	2300      	movs	r3, #0
90014a38:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
90014a3c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
90014a40:	b163      	cbz	r3, 90014a5c <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x3c>
90014a42:	8e63      	ldrh	r3, [r4, #50]	; 0x32
90014a44:	a901      	add	r1, sp, #4
90014a46:	4620      	mov	r0, r4
90014a48:	f8ad 3004 	strh.w	r3, [sp, #4]
90014a4c:	f000 fd1b 	bl	90015486 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90014a50:	6823      	ldr	r3, [r4, #0]
90014a52:	4620      	mov	r0, r4
90014a54:	695b      	ldr	r3, [r3, #20]
90014a56:	4798      	blx	r3
90014a58:	b002      	add	sp, #8
90014a5a:	bd10      	pop	{r4, pc}
90014a5c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
90014a5e:	e7f1      	b.n	90014a44 <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x24>

90014a60 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>:
90014a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
90014a62:	f64f 77ff 	movw	r7, #65535	; 0xffff
90014a66:	8e05      	ldrh	r5, [r0, #48]	; 0x30
90014a68:	4604      	mov	r4, r0
90014a6a:	42bd      	cmp	r5, r7
90014a6c:	d01a      	beq.n	90014aa4 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x44>
90014a6e:	8e46      	ldrh	r6, [r0, #50]	; 0x32
90014a70:	42be      	cmp	r6, r7
90014a72:	d017      	beq.n	90014aa4 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x44>
90014a74:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
90014a78:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
90014a7c:	b1a1      	cbz	r1, 90014aa8 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x48>
90014a7e:	b142      	cbz	r2, 90014a92 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x32>
90014a80:	a902      	add	r1, sp, #8
90014a82:	f821 6d04 	strh.w	r6, [r1, #-4]!
90014a86:	f000 fcfe 	bl	90015486 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90014a8a:	6823      	ldr	r3, [r4, #0]
90014a8c:	4620      	mov	r0, r4
90014a8e:	695b      	ldr	r3, [r3, #20]
90014a90:	4798      	blx	r3
90014a92:	f003 f873 	bl	90017b7c <_ZN8touchgfx11Application11getInstanceEv>
90014a96:	4621      	mov	r1, r4
90014a98:	3004      	adds	r0, #4
90014a9a:	f003 f93d 	bl	90017d18 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
90014a9e:	2301      	movs	r3, #1
90014aa0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
90014aa4:	b003      	add	sp, #12
90014aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
90014aa8:	2a00      	cmp	r2, #0
90014aaa:	d0f2      	beq.n	90014a92 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x32>
90014aac:	a902      	add	r1, sp, #8
90014aae:	f821 5d04 	strh.w	r5, [r1, #-4]!
90014ab2:	e7e8      	b.n	90014a86 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x26>

90014ab4 <_ZN8touchgfx13AnimatedImageD0Ev>:
90014ab4:	b510      	push	{r4, lr}
90014ab6:	4604      	mov	r4, r0
90014ab8:	213c      	movs	r1, #60	; 0x3c
90014aba:	f012 fadc 	bl	90027076 <_ZdlPvj>
90014abe:	4620      	mov	r0, r4
90014ac0:	bd10      	pop	{r4, pc}

90014ac2 <_ZN8touchgfx13AnimatedImage14pauseAnimationEv>:
90014ac2:	b510      	push	{r4, lr}
90014ac4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
90014ac8:	4604      	mov	r4, r0
90014aca:	b14b      	cbz	r3, 90014ae0 <_ZN8touchgfx13AnimatedImage14pauseAnimationEv+0x1e>
90014acc:	f003 f856 	bl	90017b7c <_ZN8touchgfx11Application11getInstanceEv>
90014ad0:	4621      	mov	r1, r4
90014ad2:	3004      	adds	r0, #4
90014ad4:	f003 f877 	bl	90017bc6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
90014ad8:	2300      	movs	r3, #0
90014ada:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
90014ade:	bd10      	pop	{r4, pc}
90014ae0:	f003 f84c 	bl	90017b7c <_ZN8touchgfx11Application11getInstanceEv>
90014ae4:	4621      	mov	r1, r4
90014ae6:	3004      	adds	r0, #4
90014ae8:	f003 f916 	bl	90017d18 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
90014aec:	2301      	movs	r3, #1
90014aee:	e7f4      	b.n	90014ada <_ZN8touchgfx13AnimatedImage14pauseAnimationEv+0x18>

90014af0 <_ZN8touchgfx13AnimatedImage15handleTickEventEv>:
90014af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
90014af2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
90014af6:	4604      	mov	r4, r0
90014af8:	2b00      	cmp	r3, #0
90014afa:	d042      	beq.n	90014b82 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
90014afc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
90014b00:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
90014b04:	3301      	adds	r3, #1
90014b06:	b2db      	uxtb	r3, r3
90014b08:	429a      	cmp	r2, r3
90014b0a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
90014b0e:	d138      	bne.n	90014b82 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
90014b10:	2300      	movs	r3, #0
90014b12:	8e41      	ldrh	r1, [r0, #50]	; 0x32
90014b14:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
90014b18:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
90014b1c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
90014b1e:	4299      	cmp	r1, r3
90014b20:	d100      	bne.n	90014b24 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x34>
90014b22:	b122      	cbz	r2, 90014b2e <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x3e>
90014b24:	8e21      	ldrh	r1, [r4, #48]	; 0x30
90014b26:	4299      	cmp	r1, r3
90014b28:	d12f      	bne.n	90014b8a <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x9a>
90014b2a:	2a00      	cmp	r2, #0
90014b2c:	d034      	beq.n	90014b98 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0xa8>
90014b2e:	f894 5037 	ldrb.w	r5, [r4, #55]	; 0x37
90014b32:	b93d      	cbnz	r5, 90014b44 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x54>
90014b34:	f003 f822 	bl	90017b7c <_ZN8touchgfx11Application11getInstanceEv>
90014b38:	4621      	mov	r1, r4
90014b3a:	3004      	adds	r0, #4
90014b3c:	f003 f843 	bl	90017bc6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
90014b40:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
90014b44:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
90014b46:	b140      	cbz	r0, 90014b5a <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x6a>
90014b48:	6803      	ldr	r3, [r0, #0]
90014b4a:	68db      	ldr	r3, [r3, #12]
90014b4c:	4798      	blx	r3
90014b4e:	b120      	cbz	r0, 90014b5a <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x6a>
90014b50:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
90014b52:	4621      	mov	r1, r4
90014b54:	6803      	ldr	r3, [r0, #0]
90014b56:	689b      	ldr	r3, [r3, #8]
90014b58:	4798      	blx	r3
90014b5a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
90014b5e:	b183      	cbz	r3, 90014b82 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
90014b60:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
90014b64:	b16b      	cbz	r3, 90014b82 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
90014b66:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
90014b6a:	b163      	cbz	r3, 90014b86 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x96>
90014b6c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
90014b6e:	a901      	add	r1, sp, #4
90014b70:	f8ad 3004 	strh.w	r3, [sp, #4]
90014b74:	4620      	mov	r0, r4
90014b76:	f000 fc86 	bl	90015486 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90014b7a:	6823      	ldr	r3, [r4, #0]
90014b7c:	4620      	mov	r0, r4
90014b7e:	695b      	ldr	r3, [r3, #20]
90014b80:	4798      	blx	r3
90014b82:	b003      	add	sp, #12
90014b84:	bd30      	pop	{r4, r5, pc}
90014b86:	8e23      	ldrh	r3, [r4, #48]	; 0x30
90014b88:	e7f1      	b.n	90014b6e <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x7e>
90014b8a:	b12a      	cbz	r2, 90014b98 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0xa8>
90014b8c:	3b01      	subs	r3, #1
90014b8e:	b29b      	uxth	r3, r3
90014b90:	a902      	add	r1, sp, #8
90014b92:	f821 3d04 	strh.w	r3, [r1, #-4]!
90014b96:	e7ed      	b.n	90014b74 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x84>
90014b98:	3301      	adds	r3, #1
90014b9a:	e7f8      	b.n	90014b8e <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x9e>

90014b9c <_ZNK8touchgfx5Image17invalidateContentEv>:
90014b9c:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
90014ba0:	b12a      	cbz	r2, 90014bae <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
90014ba2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90014ba6:	b112      	cbz	r2, 90014bae <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
90014ba8:	6803      	ldr	r3, [r0, #0]
90014baa:	695b      	ldr	r3, [r3, #20]
90014bac:	4718      	bx	r3
90014bae:	4770      	bx	lr

90014bb0 <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>:
90014bb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
90014bb2:	ac02      	add	r4, sp, #8
90014bb4:	6803      	ldr	r3, [r0, #0]
90014bb6:	4605      	mov	r5, r0
90014bb8:	4616      	mov	r6, r2
90014bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90014bbc:	f824 1d04 	strh.w	r1, [r4, #-4]!
90014bc0:	4621      	mov	r1, r4
90014bc2:	4798      	blx	r3
90014bc4:	682b      	ldr	r3, [r5, #0]
90014bc6:	4621      	mov	r1, r4
90014bc8:	4628      	mov	r0, r5
90014bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90014bcc:	f8ad 6004 	strh.w	r6, [sp, #4]
90014bd0:	4798      	blx	r3
90014bd2:	b002      	add	sp, #8
90014bd4:	bd70      	pop	{r4, r5, r6, pc}

90014bd6 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>:
90014bd6:	2300      	movs	r3, #0
90014bd8:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
90014bdc:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
90014be0:	4770      	bx	lr

90014be2 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
90014be2:	2000      	movs	r0, #0
90014be4:	4770      	bx	lr
	...

90014be8 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
90014be8:	4b07      	ldr	r3, [pc, #28]	; (90014c08 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
90014bea:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90014bec:	881b      	ldrh	r3, [r3, #0]
90014bee:	4293      	cmp	r3, r2
90014bf0:	bf81      	itttt	hi
90014bf2:	4b06      	ldrhi	r3, [pc, #24]	; (90014c0c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
90014bf4:	681b      	ldrhi	r3, [r3, #0]
90014bf6:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
90014bfa:	7858      	ldrbhi	r0, [r3, #1]
90014bfc:	bf8c      	ite	hi
90014bfe:	f000 0003 	andhi.w	r0, r0, #3
90014c02:	2000      	movls	r0, #0
90014c04:	4770      	bx	lr
90014c06:	bf00      	nop
90014c08:	240281f0 	.word	0x240281f0
90014c0c:	240281ec 	.word	0x240281ec

90014c10 <_ZN8touchgfx8TextAreaD1Ev>:
90014c10:	4770      	bx	lr
	...

90014c14 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
90014c14:	4b11      	ldr	r3, [pc, #68]	; (90014c5c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
90014c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90014c1a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
90014c1c:	4604      	mov	r4, r0
90014c1e:	881b      	ldrh	r3, [r3, #0]
90014c20:	428b      	cmp	r3, r1
90014c22:	d918      	bls.n	90014c56 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
90014c24:	6803      	ldr	r3, [r0, #0]
90014c26:	6f9d      	ldr	r5, [r3, #120]	; 0x78
90014c28:	4b0d      	ldr	r3, [pc, #52]	; (90014c60 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
90014c2a:	6818      	ldr	r0, [r3, #0]
90014c2c:	f7f3 f882 	bl	90007d34 <_ZNK8touchgfx5Texts7getTextEt>
90014c30:	6823      	ldr	r3, [r4, #0]
90014c32:	4606      	mov	r6, r0
90014c34:	4620      	mov	r0, r4
90014c36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90014c38:	4798      	blx	r3
90014c3a:	6823      	ldr	r3, [r4, #0]
90014c3c:	4607      	mov	r7, r0
90014c3e:	4620      	mov	r0, r4
90014c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90014c44:	4798      	blx	r3
90014c46:	463a      	mov	r2, r7
90014c48:	4603      	mov	r3, r0
90014c4a:	4631      	mov	r1, r6
90014c4c:	4620      	mov	r0, r4
90014c4e:	46ac      	mov	ip, r5
90014c50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90014c54:	4760      	bx	ip
90014c56:	2000      	movs	r0, #0
90014c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90014c5c:	240281f0 	.word	0x240281f0
90014c60:	240281f8 	.word	0x240281f8

90014c64 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
90014c64:	4b18      	ldr	r3, [pc, #96]	; (90014cc8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
90014c66:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
90014c6a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
90014c6c:	4604      	mov	r4, r0
90014c6e:	881b      	ldrh	r3, [r3, #0]
90014c70:	428b      	cmp	r3, r1
90014c72:	d926      	bls.n	90014cc2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
90014c74:	4b15      	ldr	r3, [pc, #84]	; (90014ccc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
90014c76:	681b      	ldr	r3, [r3, #0]
90014c78:	eb03 0241 	add.w	r2, r3, r1, lsl #1
90014c7c:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
90014c80:	4b13      	ldr	r3, [pc, #76]	; (90014cd0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
90014c82:	7855      	ldrb	r5, [r2, #1]
90014c84:	681b      	ldr	r3, [r3, #0]
90014c86:	f3c5 0581 	ubfx	r5, r5, #2, #2
90014c8a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
90014c8e:	6833      	ldr	r3, [r6, #0]
90014c90:	69df      	ldr	r7, [r3, #28]
90014c92:	4b10      	ldr	r3, [pc, #64]	; (90014cd4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
90014c94:	6818      	ldr	r0, [r3, #0]
90014c96:	f7f3 f84d 	bl	90007d34 <_ZNK8touchgfx5Texts7getTextEt>
90014c9a:	6823      	ldr	r3, [r4, #0]
90014c9c:	4680      	mov	r8, r0
90014c9e:	4620      	mov	r0, r4
90014ca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90014ca2:	4798      	blx	r3
90014ca4:	6823      	ldr	r3, [r4, #0]
90014ca6:	4681      	mov	r9, r0
90014ca8:	4620      	mov	r0, r4
90014caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90014cae:	4798      	blx	r3
90014cb0:	464b      	mov	r3, r9
90014cb2:	9000      	str	r0, [sp, #0]
90014cb4:	4642      	mov	r2, r8
90014cb6:	4629      	mov	r1, r5
90014cb8:	4630      	mov	r0, r6
90014cba:	47b8      	blx	r7
90014cbc:	b003      	add	sp, #12
90014cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90014cc2:	2000      	movs	r0, #0
90014cc4:	e7fa      	b.n	90014cbc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
90014cc6:	bf00      	nop
90014cc8:	240281f0 	.word	0x240281f0
90014ccc:	240281ec 	.word	0x240281ec
90014cd0:	240281f4 	.word	0x240281f4
90014cd4:	240281f8 	.word	0x240281f8

90014cd8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
90014cd8:	b40e      	push	{r1, r2, r3}
90014cda:	4b30      	ldr	r3, [pc, #192]	; (90014d9c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
90014cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90014ce0:	881a      	ldrh	r2, [r3, #0]
90014ce2:	b09d      	sub	sp, #116	; 0x74
90014ce4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
90014ce6:	4604      	mov	r4, r0
90014ce8:	429a      	cmp	r2, r3
90014cea:	d954      	bls.n	90014d96 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
90014cec:	aa26      	add	r2, sp, #152	; 0x98
90014cee:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 90014da0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
90014cf2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 90014da4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
90014cf6:	9202      	str	r2, [sp, #8]
90014cf8:	f8d9 2000 	ldr.w	r2, [r9]
90014cfc:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
90014d00:	f8d8 3000 	ldr.w	r3, [r8]
90014d04:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
90014d08:	682b      	ldr	r3, [r5, #0]
90014d0a:	4628      	mov	r0, r5
90014d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90014d0e:	4798      	blx	r3
90014d10:	4606      	mov	r6, r0
90014d12:	b207      	sxth	r7, r0
90014d14:	a803      	add	r0, sp, #12
90014d16:	f004 fd18 	bl	9001974a <_ZN8touchgfx12TextProviderC1Ev>
90014d1a:	682b      	ldr	r3, [r5, #0]
90014d1c:	4628      	mov	r0, r5
90014d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90014d20:	4798      	blx	r3
90014d22:	682b      	ldr	r3, [r5, #0]
90014d24:	4682      	mov	sl, r0
90014d26:	4628      	mov	r0, r5
90014d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90014d2a:	4798      	blx	r3
90014d2c:	4653      	mov	r3, sl
90014d2e:	9000      	str	r0, [sp, #0]
90014d30:	a803      	add	r0, sp, #12
90014d32:	9a02      	ldr	r2, [sp, #8]
90014d34:	9925      	ldr	r1, [sp, #148]	; 0x94
90014d36:	f004 fd63 	bl	90019800 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90014d3a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
90014d3c:	f8d9 3000 	ldr.w	r3, [r9]
90014d40:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
90014d44:	8925      	ldrh	r5, [r4, #8]
90014d46:	eb03 0142 	add.w	r1, r3, r2, lsl #1
90014d4a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
90014d4e:	eba5 050c 	sub.w	r5, r5, ip
90014d52:	784a      	ldrb	r2, [r1, #1]
90014d54:	f8d8 3000 	ldr.w	r3, [r8]
90014d58:	b22d      	sxth	r5, r5
90014d5a:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
90014d5e:	f3c2 0281 	ubfx	r2, r2, #2, #2
90014d62:	9500      	str	r5, [sp, #0]
90014d64:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
90014d68:	a803      	add	r0, sp, #12
90014d6a:	f002 fad9 	bl	90017320 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
90014d6e:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
90014d72:	b203      	sxth	r3, r0
90014d74:	18b9      	adds	r1, r7, r2
90014d76:	2900      	cmp	r1, #0
90014d78:	dd0b      	ble.n	90014d92 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
90014d7a:	3b01      	subs	r3, #1
90014d7c:	fb13 f302 	smulbb	r3, r3, r2
90014d80:	fb16 3300 	smlabb	r3, r6, r0, r3
90014d84:	b21f      	sxth	r7, r3
90014d86:	4638      	mov	r0, r7
90014d88:	b01d      	add	sp, #116	; 0x74
90014d8a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90014d8e:	b003      	add	sp, #12
90014d90:	4770      	bx	lr
90014d92:	2b00      	cmp	r3, #0
90014d94:	dcf7      	bgt.n	90014d86 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
90014d96:	2700      	movs	r7, #0
90014d98:	e7f5      	b.n	90014d86 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
90014d9a:	bf00      	nop
90014d9c:	240281f0 	.word	0x240281f0
90014da0:	240281ec 	.word	0x240281ec
90014da4:	240281f4 	.word	0x240281f4

90014da8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
90014da8:	4bbd      	ldr	r3, [pc, #756]	; (900150a0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
90014daa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90014dae:	460c      	mov	r4, r1
90014db0:	881b      	ldrh	r3, [r3, #0]
90014db2:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
90014db4:	b0a9      	sub	sp, #164	; 0xa4
90014db6:	4680      	mov	r8, r0
90014db8:	428b      	cmp	r3, r1
90014dba:	d809      	bhi.n	90014dd0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
90014dbc:	2300      	movs	r3, #0
90014dbe:	f04f 32ff 	mov.w	r2, #4294967295
90014dc2:	6083      	str	r3, [r0, #8]
90014dc4:	e9c0 3200 	strd	r3, r2, [r0]
90014dc8:	4640      	mov	r0, r8
90014dca:	b029      	add	sp, #164	; 0xa4
90014dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90014dd0:	4eb4      	ldr	r6, [pc, #720]	; (900150a4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
90014dd2:	6833      	ldr	r3, [r6, #0]
90014dd4:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
90014dd8:	4bb3      	ldr	r3, [pc, #716]	; (900150a8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
90014dda:	681b      	ldr	r3, [r3, #0]
90014ddc:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
90014de0:	4bb2      	ldr	r3, [pc, #712]	; (900150ac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
90014de2:	6818      	ldr	r0, [r3, #0]
90014de4:	f7f2 ffa6 	bl	90007d34 <_ZNK8touchgfx5Texts7getTextEt>
90014de8:	682b      	ldr	r3, [r5, #0]
90014dea:	4681      	mov	r9, r0
90014dec:	4628      	mov	r0, r5
90014dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90014df0:	4798      	blx	r3
90014df2:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
90014df4:	b203      	sxth	r3, r0
90014df6:	4682      	mov	sl, r0
90014df8:	4407      	add	r7, r0
90014dfa:	a80f      	add	r0, sp, #60	; 0x3c
90014dfc:	9304      	str	r3, [sp, #16]
90014dfe:	b2bb      	uxth	r3, r7
90014e00:	9303      	str	r3, [sp, #12]
90014e02:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
90014e06:	2b00      	cmp	r3, #0
90014e08:	f040 80a5 	bne.w	90014f56 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
90014e0c:	f004 fc9d 	bl	9001974a <_ZN8touchgfx12TextProviderC1Ev>
90014e10:	682b      	ldr	r3, [r5, #0]
90014e12:	4628      	mov	r0, r5
90014e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90014e16:	4798      	blx	r3
90014e18:	682b      	ldr	r3, [r5, #0]
90014e1a:	4606      	mov	r6, r0
90014e1c:	4628      	mov	r0, r5
90014e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90014e20:	4798      	blx	r3
90014e22:	6823      	ldr	r3, [r4, #0]
90014e24:	4607      	mov	r7, r0
90014e26:	4620      	mov	r0, r4
90014e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90014e2a:	4798      	blx	r3
90014e2c:	6823      	ldr	r3, [r4, #0]
90014e2e:	4683      	mov	fp, r0
90014e30:	4620      	mov	r0, r4
90014e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90014e36:	4798      	blx	r3
90014e38:	463b      	mov	r3, r7
90014e3a:	4649      	mov	r1, r9
90014e3c:	4632      	mov	r2, r6
90014e3e:	2600      	movs	r6, #0
90014e40:	e9cd b000 	strd	fp, r0, [sp]
90014e44:	a80f      	add	r0, sp, #60	; 0x3c
90014e46:	4637      	mov	r7, r6
90014e48:	f004 fcef 	bl	9001982a <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
90014e4c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
90014e50:	f8df b250 	ldr.w	fp, [pc, #592]	; 900150a4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
90014e54:	f013 0ffd 	tst.w	r3, #253	; 0xfd
90014e58:	bf0c      	ite	eq
90014e5a:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
90014e5e:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
90014e62:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
90014e64:	4629      	mov	r1, r5
90014e66:	f8db 3000 	ldr.w	r3, [fp]
90014e6a:	a80f      	add	r0, sp, #60	; 0x3c
90014e6c:	3701      	adds	r7, #1
90014e6e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
90014e72:	f647 72ff 	movw	r2, #32767	; 0x7fff
90014e76:	b2bf      	uxth	r7, r7
90014e78:	785b      	ldrb	r3, [r3, #1]
90014e7a:	f3c3 0381 	ubfx	r3, r3, #2, #2
90014e7e:	f001 ff6a 	bl	90016d56 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
90014e82:	9b03      	ldr	r3, [sp, #12]
90014e84:	4286      	cmp	r6, r0
90014e86:	eba9 0903 	sub.w	r9, r9, r3
90014e8a:	bfb8      	it	lt
90014e8c:	4606      	movlt	r6, r0
90014e8e:	a80f      	add	r0, sp, #60	; 0x3c
90014e90:	fa0f f989 	sxth.w	r9, r9
90014e94:	b236      	sxth	r6, r6
90014e96:	f004 fc7f 	bl	90019798 <_ZN8touchgfx12TextProvider11endOfStringEv>
90014e9a:	b918      	cbnz	r0, 90014ea4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
90014e9c:	7a2b      	ldrb	r3, [r5, #8]
90014e9e:	444b      	add	r3, r9
90014ea0:	2b00      	cmp	r3, #0
90014ea2:	dcde      	bgt.n	90014e62 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
90014ea4:	9b03      	ldr	r3, [sp, #12]
90014ea6:	4620      	mov	r0, r4
90014ea8:	9a04      	ldr	r2, [sp, #16]
90014eaa:	fb13 f707 	smulbb	r7, r3, r7
90014eae:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
90014eb0:	f895 9009 	ldrb.w	r9, [r5, #9]
90014eb4:	1aff      	subs	r7, r7, r3
90014eb6:	b2bf      	uxth	r7, r7
90014eb8:	b23b      	sxth	r3, r7
90014eba:	429a      	cmp	r2, r3
90014ebc:	bfa8      	it	ge
90014ebe:	4657      	movge	r7, sl
90014ec0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
90014ec4:	f013 0ffd 	tst.w	r3, #253	; 0xfd
90014ec8:	6823      	ldr	r3, [r4, #0]
90014eca:	444f      	add	r7, r9
90014ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90014ece:	bf08      	it	eq
90014ed0:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
90014ed4:	fa1f f987 	uxth.w	r9, r7
90014ed8:	bf18      	it	ne
90014eda:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
90014ede:	4798      	blx	r3
90014ee0:	2801      	cmp	r0, #1
90014ee2:	fa0f f789 	sxth.w	r7, r9
90014ee6:	b2b3      	uxth	r3, r6
90014ee8:	f000 80e2 	beq.w	900150b0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
90014eec:	2802      	cmp	r0, #2
90014eee:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
90014ef2:	f000 80e3 	beq.w	900150bc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
90014ef6:	7aea      	ldrb	r2, [r5, #11]
90014ef8:	b236      	sxth	r6, r6
90014efa:	7b2d      	ldrb	r5, [r5, #12]
90014efc:	1ab6      	subs	r6, r6, r2
90014efe:	442a      	add	r2, r5
90014f00:	fa1f fa86 	uxth.w	sl, r6
90014f04:	4413      	add	r3, r2
90014f06:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
90014f0a:	fa0f fb8a 	sxth.w	fp, sl
90014f0e:	b29b      	uxth	r3, r3
90014f10:	2a02      	cmp	r2, #2
90014f12:	b21e      	sxth	r6, r3
90014f14:	f000 80d6 	beq.w	900150c4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
90014f18:	2a03      	cmp	r2, #3
90014f1a:	f000 80de 	beq.w	900150da <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
90014f1e:	2a01      	cmp	r2, #1
90014f20:	f040 80e6 	bne.w	900150f0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
90014f24:	8925      	ldrh	r5, [r4, #8]
90014f26:	4633      	mov	r3, r6
90014f28:	463e      	mov	r6, r7
90014f2a:	eba5 0909 	sub.w	r9, r5, r9
90014f2e:	461f      	mov	r7, r3
90014f30:	465d      	mov	r5, fp
90014f32:	fa0f fb89 	sxth.w	fp, r9
90014f36:	4b5d      	ldr	r3, [pc, #372]	; (900150ac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
90014f38:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
90014f3a:	6818      	ldr	r0, [r3, #0]
90014f3c:	f7f2 fefa 	bl	90007d34 <_ZNK8touchgfx5Texts7getTextEt>
90014f40:	f8a8 b000 	strh.w	fp, [r8]
90014f44:	f8a8 5002 	strh.w	r5, [r8, #2]
90014f48:	f8a8 6004 	strh.w	r6, [r8, #4]
90014f4c:	f8a8 7006 	strh.w	r7, [r8, #6]
90014f50:	f8c8 0008 	str.w	r0, [r8, #8]
90014f54:	e738      	b.n	90014dc8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
90014f56:	f004 fbf8 	bl	9001974a <_ZN8touchgfx12TextProviderC1Ev>
90014f5a:	682b      	ldr	r3, [r5, #0]
90014f5c:	4628      	mov	r0, r5
90014f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90014f60:	4798      	blx	r3
90014f62:	682b      	ldr	r3, [r5, #0]
90014f64:	4607      	mov	r7, r0
90014f66:	4628      	mov	r0, r5
90014f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90014f6a:	4798      	blx	r3
90014f6c:	6823      	ldr	r3, [r4, #0]
90014f6e:	4683      	mov	fp, r0
90014f70:	4620      	mov	r0, r4
90014f72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90014f74:	4798      	blx	r3
90014f76:	6822      	ldr	r2, [r4, #0]
90014f78:	9005      	str	r0, [sp, #20]
90014f7a:	4620      	mov	r0, r4
90014f7c:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
90014f80:	4790      	blx	r2
90014f82:	9b05      	ldr	r3, [sp, #20]
90014f84:	463a      	mov	r2, r7
90014f86:	4649      	mov	r1, r9
90014f88:	9001      	str	r0, [sp, #4]
90014f8a:	a80f      	add	r0, sp, #60	; 0x3c
90014f8c:	9300      	str	r3, [sp, #0]
90014f8e:	465b      	mov	r3, fp
90014f90:	f004 fc4b 	bl	9001982a <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
90014f94:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
90014f98:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
90014f9c:	af0f      	add	r7, sp, #60	; 0x3c
90014f9e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
90014fa2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
90014fa6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
90014fa8:	bf0a      	itet	eq
90014faa:	464a      	moveq	r2, r9
90014fac:	461a      	movne	r2, r3
90014fae:	4699      	moveq	r9, r3
90014fb0:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
90014fb4:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
90014fb8:	1ad2      	subs	r2, r2, r3
90014fba:	6833      	ldr	r3, [r6, #0]
90014fbc:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
90014fc0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
90014fc4:	7859      	ldrb	r1, [r3, #1]
90014fc6:	2300      	movs	r3, #0
90014fc8:	9707      	str	r7, [sp, #28]
90014fca:	f3c1 0181 	ubfx	r1, r1, #2, #2
90014fce:	f8ad 3018 	strh.w	r3, [sp, #24]
90014fd2:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
90014fd6:	f88d 1020 	strb.w	r1, [sp, #32]
90014fda:	9509      	str	r5, [sp, #36]	; 0x24
90014fdc:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
90014fe0:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
90014fe4:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
90014fe8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
90014fec:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
90014ff0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
90014ff4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
90014ff8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90014ffc:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
90015000:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
90015004:	b350      	cbz	r0, 9001505c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
90015006:	682b      	ldr	r3, [r5, #0]
90015008:	4628      	mov	r0, r5
9001500a:	695b      	ldr	r3, [r3, #20]
9001500c:	4798      	blx	r3
9001500e:	4607      	mov	r7, r0
90015010:	b320      	cbz	r0, 9001505c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
90015012:	9809      	ldr	r0, [sp, #36]	; 0x24
90015014:	4639      	mov	r1, r7
90015016:	6803      	ldr	r3, [r0, #0]
90015018:	68db      	ldr	r3, [r3, #12]
9001501a:	4798      	blx	r3
9001501c:	4606      	mov	r6, r0
9001501e:	b1e8      	cbz	r0, 9001505c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
90015020:	7b43      	ldrb	r3, [r0, #13]
90015022:	7a82      	ldrb	r2, [r0, #10]
90015024:	005b      	lsls	r3, r3, #1
90015026:	f403 7380 	and.w	r3, r3, #256	; 0x100
9001502a:	4313      	orrs	r3, r2
9001502c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
90015030:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
90015034:	2b06      	cmp	r3, #6
90015036:	d111      	bne.n	9001505c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
90015038:	9809      	ldr	r0, [sp, #36]	; 0x24
9001503a:	4632      	mov	r2, r6
9001503c:	4639      	mov	r1, r7
9001503e:	6803      	ldr	r3, [r0, #0]
90015040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90015042:	4798      	blx	r3
90015044:	7b73      	ldrb	r3, [r6, #13]
90015046:	005b      	lsls	r3, r3, #1
90015048:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001504c:	7ab3      	ldrb	r3, [r6, #10]
9001504e:	4313      	orrs	r3, r2
90015050:	4418      	add	r0, r3
90015052:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
90015056:	4418      	add	r0, r3
90015058:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
9001505c:	2600      	movs	r6, #0
9001505e:	4637      	mov	r7, r6
90015060:	a806      	add	r0, sp, #24
90015062:	3701      	adds	r7, #1
90015064:	f002 f859 	bl	9001711a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
90015068:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
9001506c:	9b03      	ldr	r3, [sp, #12]
9001506e:	b2bf      	uxth	r7, r7
90015070:	4286      	cmp	r6, r0
90015072:	eba9 0903 	sub.w	r9, r9, r3
90015076:	f8bd 3018 	ldrh.w	r3, [sp, #24]
9001507a:	bfb8      	it	lt
9001507c:	4606      	movlt	r6, r0
9001507e:	fa0f f989 	sxth.w	r9, r9
90015082:	b236      	sxth	r6, r6
90015084:	2b00      	cmp	r3, #0
90015086:	f43f af0d 	beq.w	90014ea4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
9001508a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
9001508e:	2b00      	cmp	r3, #0
90015090:	f47f af08 	bne.w	90014ea4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
90015094:	7a2b      	ldrb	r3, [r5, #8]
90015096:	444b      	add	r3, r9
90015098:	2b00      	cmp	r3, #0
9001509a:	dce1      	bgt.n	90015060 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
9001509c:	e702      	b.n	90014ea4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
9001509e:	bf00      	nop
900150a0:	240281f0 	.word	0x240281f0
900150a4:	240281ec 	.word	0x240281ec
900150a8:	240281f4 	.word	0x240281f4
900150ac:	240281f8 	.word	0x240281f8
900150b0:	ebaa 0606 	sub.w	r6, sl, r6
900150b4:	2002      	movs	r0, #2
900150b6:	fb96 f6f0 	sdiv	r6, r6, r0
900150ba:	e71c      	b.n	90014ef6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
900150bc:	441e      	add	r6, r3
900150be:	ebaa 0606 	sub.w	r6, sl, r6
900150c2:	e718      	b.n	90014ef6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
900150c4:	8925      	ldrh	r5, [r4, #8]
900150c6:	1aed      	subs	r5, r5, r3
900150c8:	eba5 050a 	sub.w	r5, r5, sl
900150cc:	fa0f fb85 	sxth.w	fp, r5
900150d0:	8965      	ldrh	r5, [r4, #10]
900150d2:	eba5 0509 	sub.w	r5, r5, r9
900150d6:	b22d      	sxth	r5, r5
900150d8:	e72d      	b.n	90014f36 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
900150da:	8965      	ldrh	r5, [r4, #10]
900150dc:	f04f 0b00 	mov.w	fp, #0
900150e0:	1aed      	subs	r5, r5, r3
900150e2:	4633      	mov	r3, r6
900150e4:	463e      	mov	r6, r7
900150e6:	eba5 050a 	sub.w	r5, r5, sl
900150ea:	461f      	mov	r7, r3
900150ec:	b22d      	sxth	r5, r5
900150ee:	e722      	b.n	90014f36 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
900150f0:	2500      	movs	r5, #0
900150f2:	e720      	b.n	90014f36 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

900150f4 <_ZN8touchgfx8TextAreaD0Ev>:
900150f4:	b510      	push	{r4, lr}
900150f6:	4604      	mov	r4, r0
900150f8:	2148      	movs	r1, #72	; 0x48
900150fa:	f011 ffbc 	bl	90027076 <_ZdlPvj>
900150fe:	4620      	mov	r0, r4
90015100:	bd10      	pop	{r4, pc}
	...

90015104 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
90015104:	b513      	push	{r0, r1, r4, lr}
90015106:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
9001510a:	4604      	mov	r4, r0
9001510c:	b1fb      	cbz	r3, 9001514e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
9001510e:	4b16      	ldr	r3, [pc, #88]	; (90015168 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
90015110:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
90015112:	881b      	ldrh	r3, [r3, #0]
90015114:	428b      	cmp	r3, r1
90015116:	d91a      	bls.n	9001514e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
90015118:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
9001511c:	2b00      	cmp	r3, #0
9001511e:	dd16      	ble.n	9001514e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
90015120:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
90015124:	2b00      	cmp	r3, #0
90015126:	dd12      	ble.n	9001514e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
90015128:	4b10      	ldr	r3, [pc, #64]	; (9001516c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
9001512a:	6818      	ldr	r0, [r3, #0]
9001512c:	f7f2 fe02 	bl	90007d34 <_ZNK8touchgfx5Texts7getTextEt>
90015130:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
90015134:	6822      	ldr	r2, [r4, #0]
90015136:	2b00      	cmp	r3, #0
90015138:	db06      	blt.n	90015148 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
9001513a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
9001513e:	2b00      	cmp	r3, #0
90015140:	db02      	blt.n	90015148 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
90015142:	6c63      	ldr	r3, [r4, #68]	; 0x44
90015144:	4298      	cmp	r0, r3
90015146:	d004      	beq.n	90015152 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
90015148:	6953      	ldr	r3, [r2, #20]
9001514a:	4620      	mov	r0, r4
9001514c:	4798      	blx	r3
9001514e:	b002      	add	sp, #8
90015150:	bd10      	pop	{r4, pc}
90015152:	f104 013c 	add.w	r1, r4, #60	; 0x3c
90015156:	466b      	mov	r3, sp
90015158:	6912      	ldr	r2, [r2, #16]
9001515a:	c903      	ldmia	r1, {r0, r1}
9001515c:	e883 0003 	stmia.w	r3, {r0, r1}
90015160:	4619      	mov	r1, r3
90015162:	4620      	mov	r0, r4
90015164:	4790      	blx	r2
90015166:	e7f2      	b.n	9001514e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
90015168:	240281f0 	.word	0x240281f0
9001516c:	240281f8 	.word	0x240281f8

90015170 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
90015170:	4b45      	ldr	r3, [pc, #276]	; (90015288 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
90015172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90015176:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90015178:	b08e      	sub	sp, #56	; 0x38
9001517a:	881b      	ldrh	r3, [r3, #0]
9001517c:	4604      	mov	r4, r0
9001517e:	4293      	cmp	r3, r2
90015180:	d97e      	bls.n	90015280 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
90015182:	6808      	ldr	r0, [r1, #0]
90015184:	ab05      	add	r3, sp, #20
90015186:	6849      	ldr	r1, [r1, #4]
90015188:	4d40      	ldr	r5, [pc, #256]	; (9001528c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
9001518a:	c303      	stmia	r3!, {r0, r1}
9001518c:	4611      	mov	r1, r2
9001518e:	6828      	ldr	r0, [r5, #0]
90015190:	f7f2 fdd0 	bl	90007d34 <_ZNK8touchgfx5Texts7getTextEt>
90015194:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
90015198:	2b00      	cmp	r3, #0
9001519a:	db11      	blt.n	900151c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
9001519c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
900151a0:	2b00      	cmp	r3, #0
900151a2:	db0d      	blt.n	900151c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
900151a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
900151a6:	4298      	cmp	r0, r3
900151a8:	d10a      	bne.n	900151c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
900151aa:	f104 023c 	add.w	r2, r4, #60	; 0x3c
900151ae:	ab09      	add	r3, sp, #36	; 0x24
900151b0:	e892 0003 	ldmia.w	r2, {r0, r1}
900151b4:	e883 0003 	stmia.w	r3, {r0, r1}
900151b8:	4619      	mov	r1, r3
900151ba:	a805      	add	r0, sp, #20
900151bc:	f7fd fb3a 	bl	90012834 <_ZN8touchgfx4RectaNERKS0_>
900151c0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
900151c4:	2b00      	cmp	r3, #0
900151c6:	dd5b      	ble.n	90015280 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
900151c8:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
900151cc:	2b00      	cmp	r3, #0
900151ce:	dd57      	ble.n	90015280 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
900151d0:	4f2f      	ldr	r7, [pc, #188]	; (90015290 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
900151d2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
900151d4:	683b      	ldr	r3, [r7, #0]
900151d6:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
900151da:	4b2e      	ldr	r3, [pc, #184]	; (90015294 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
900151dc:	681b      	ldr	r3, [r3, #0]
900151de:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
900151e2:	2e00      	cmp	r6, #0
900151e4:	d04c      	beq.n	90015280 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
900151e6:	6823      	ldr	r3, [r4, #0]
900151e8:	4620      	mov	r0, r4
900151ea:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
900151ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900151f0:	4798      	blx	r3
900151f2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
900151f4:	683b      	ldr	r3, [r7, #0]
900151f6:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
900151fa:	eb03 0342 	add.w	r3, r3, r2, lsl #1
900151fe:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
90015202:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
90015206:	785b      	ldrb	r3, [r3, #1]
90015208:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
9001520c:	f3c3 0381 	ubfx	r3, r3, #2, #2
90015210:	6b21      	ldr	r1, [r4, #48]	; 0x30
90015212:	9609      	str	r6, [sp, #36]	; 0x24
90015214:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
90015218:	4b1f      	ldr	r3, [pc, #124]	; (90015298 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
9001521a:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
9001521e:	681b      	ldr	r3, [r3, #0]
90015220:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
90015224:	910b      	str	r1, [sp, #44]	; 0x2c
90015226:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
9001522a:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
9001522e:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
90015232:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
90015236:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
9001523a:	b10a      	cbz	r2, 90015240 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
9001523c:	6cde      	ldr	r6, [r3, #76]	; 0x4c
9001523e:	b906      	cbnz	r6, 90015242 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
90015240:	689e      	ldr	r6, [r3, #8]
90015242:	af07      	add	r7, sp, #28
90015244:	4621      	mov	r1, r4
90015246:	4638      	mov	r0, r7
90015248:	f003 fdc2 	bl	90018dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001524c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
9001524e:	6828      	ldr	r0, [r5, #0]
90015250:	f7f2 fd70 	bl	90007d34 <_ZNK8touchgfx5Texts7getTextEt>
90015254:	6823      	ldr	r3, [r4, #0]
90015256:	4605      	mov	r5, r0
90015258:	4620      	mov	r0, r4
9001525a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9001525c:	4798      	blx	r3
9001525e:	6823      	ldr	r3, [r4, #0]
90015260:	4680      	mov	r8, r0
90015262:	4620      	mov	r0, r4
90015264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90015268:	4798      	blx	r3
9001526a:	ab09      	add	r3, sp, #36	; 0x24
9001526c:	9501      	str	r5, [sp, #4]
9001526e:	9300      	str	r3, [sp, #0]
90015270:	ab05      	add	r3, sp, #20
90015272:	e9cd 8002 	strd	r8, r0, [sp, #8]
90015276:	4630      	mov	r0, r6
90015278:	e897 0006 	ldmia.w	r7, {r1, r2}
9001527c:	f7f2 fd0a 	bl	90007c94 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
90015280:	b00e      	add	sp, #56	; 0x38
90015282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90015286:	bf00      	nop
90015288:	240281f0 	.word	0x240281f0
9001528c:	240281f8 	.word	0x240281f8
90015290:	240281ec 	.word	0x240281ec
90015294:	240281f4 	.word	0x240281f4
90015298:	24028194 	.word	0x24028194

9001529c <_ZN8touchgfx8Drawable14setWidthHeightEss>:
9001529c:	b570      	push	{r4, r5, r6, lr}
9001529e:	6803      	ldr	r3, [r0, #0]
900152a0:	4604      	mov	r4, r0
900152a2:	4615      	mov	r5, r2
900152a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900152a6:	4798      	blx	r3
900152a8:	6823      	ldr	r3, [r4, #0]
900152aa:	4629      	mov	r1, r5
900152ac:	4620      	mov	r0, r4
900152ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900152b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900152b4:	4718      	bx	r3
	...

900152b8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
900152b8:	b538      	push	{r3, r4, r5, lr}
900152ba:	4b0e      	ldr	r3, [pc, #56]	; (900152f4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
900152bc:	4604      	mov	r4, r0
900152be:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
900152c0:	881b      	ldrh	r3, [r3, #0]
900152c2:	429a      	cmp	r2, r3
900152c4:	d214      	bcs.n	900152f0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
900152c6:	6803      	ldr	r3, [r0, #0]
900152c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900152ca:	4798      	blx	r3
900152cc:	6823      	ldr	r3, [r4, #0]
900152ce:	4605      	mov	r5, r0
900152d0:	4620      	mov	r0, r4
900152d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900152d4:	4798      	blx	r3
900152d6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
900152da:	b22d      	sxth	r5, r5
900152dc:	4601      	mov	r1, r0
900152de:	f013 0ffd 	tst.w	r3, #253	; 0xfd
900152e2:	bf06      	itte	eq
900152e4:	4602      	moveq	r2, r0
900152e6:	4629      	moveq	r1, r5
900152e8:	462a      	movne	r2, r5
900152ea:	4620      	mov	r0, r4
900152ec:	f7ff ffd6 	bl	9001529c <_ZN8touchgfx8Drawable14setWidthHeightEss>
900152f0:	bd38      	pop	{r3, r4, r5, pc}
900152f2:	bf00      	nop
900152f4:	240281f0 	.word	0x240281f0

900152f8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
900152f8:	b530      	push	{r4, r5, lr}
900152fa:	888b      	ldrh	r3, [r1, #4]
900152fc:	b085      	sub	sp, #20
900152fe:	4604      	mov	r4, r0
90015300:	8583      	strh	r3, [r0, #44]	; 0x2c
90015302:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
90015306:	b923      	cbnz	r3, 90015312 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
90015308:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
9001530c:	b90b      	cbnz	r3, 90015312 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
9001530e:	f7ff ffd3 	bl	900152b8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
90015312:	6823      	ldr	r3, [r4, #0]
90015314:	466d      	mov	r5, sp
90015316:	4621      	mov	r1, r4
90015318:	343c      	adds	r4, #60	; 0x3c
9001531a:	4628      	mov	r0, r5
9001531c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90015320:	4798      	blx	r3
90015322:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90015326:	e884 0007 	stmia.w	r4, {r0, r1, r2}
9001532a:	b005      	add	sp, #20
9001532c:	bd30      	pop	{r4, r5, pc}

9001532e <_ZNK8touchgfx3Box12getSolidRectEv>:
9001532e:	2300      	movs	r3, #0
90015330:	8083      	strh	r3, [r0, #4]
90015332:	80c3      	strh	r3, [r0, #6]
90015334:	8003      	strh	r3, [r0, #0]
90015336:	8043      	strh	r3, [r0, #2]
90015338:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
9001533c:	2bff      	cmp	r3, #255	; 0xff
9001533e:	bf01      	itttt	eq
90015340:	890b      	ldrheq	r3, [r1, #8]
90015342:	8083      	strheq	r3, [r0, #4]
90015344:	894b      	ldrheq	r3, [r1, #10]
90015346:	80c3      	strheq	r3, [r0, #6]
90015348:	4770      	bx	lr
	...

9001534c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
9001534c:	b537      	push	{r0, r1, r2, r4, r5, lr}
9001534e:	4604      	mov	r4, r0
90015350:	466b      	mov	r3, sp
90015352:	6808      	ldr	r0, [r1, #0]
90015354:	6849      	ldr	r1, [r1, #4]
90015356:	c303      	stmia	r3!, {r0, r1}
90015358:	6823      	ldr	r3, [r4, #0]
9001535a:	4669      	mov	r1, sp
9001535c:	4620      	mov	r0, r4
9001535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90015360:	4798      	blx	r3
90015362:	4b08      	ldr	r3, [pc, #32]	; (90015384 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
90015364:	681b      	ldr	r3, [r3, #0]
90015366:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
9001536a:	b10a      	cbz	r2, 90015370 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
9001536c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
9001536e:	b900      	cbnz	r0, 90015372 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
90015370:	6898      	ldr	r0, [r3, #8]
90015372:	6803      	ldr	r3, [r0, #0]
90015374:	4669      	mov	r1, sp
90015376:	6aa2      	ldr	r2, [r4, #40]	; 0x28
90015378:	6a1d      	ldr	r5, [r3, #32]
9001537a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
9001537e:	47a8      	blx	r5
90015380:	b003      	add	sp, #12
90015382:	bd30      	pop	{r4, r5, pc}
90015384:	24028194 	.word	0x24028194

90015388 <_ZN8touchgfx3BoxD1Ev>:
90015388:	4770      	bx	lr

9001538a <_ZN8touchgfx3BoxD0Ev>:
9001538a:	b510      	push	{r4, lr}
9001538c:	4604      	mov	r4, r0
9001538e:	212c      	movs	r1, #44	; 0x2c
90015390:	f011 fe71 	bl	90027076 <_ZdlPvj>
90015394:	4620      	mov	r0, r4
90015396:	bd10      	pop	{r4, pc}

90015398 <_ZNK8touchgfx3Box17invalidateContentEv>:
90015398:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
9001539c:	b12a      	cbz	r2, 900153aa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
9001539e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900153a2:	b112      	cbz	r2, 900153aa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
900153a4:	6803      	ldr	r3, [r0, #0]
900153a6:	695b      	ldr	r3, [r3, #20]
900153a8:	4718      	bx	r3
900153aa:	4770      	bx	lr

900153ac <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
900153ac:	4b30      	ldr	r3, [pc, #192]	; (90015470 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
900153ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900153b2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
900153b4:	b08d      	sub	sp, #52	; 0x34
900153b6:	881b      	ldrh	r3, [r3, #0]
900153b8:	4604      	mov	r4, r0
900153ba:	460f      	mov	r7, r1
900153bc:	4293      	cmp	r3, r2
900153be:	d954      	bls.n	9001546a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
900153c0:	4b2c      	ldr	r3, [pc, #176]	; (90015474 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
900153c2:	6819      	ldr	r1, [r3, #0]
900153c4:	eb01 0342 	add.w	r3, r1, r2, lsl #1
900153c8:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
900153cc:	4a2a      	ldr	r2, [pc, #168]	; (90015478 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
900153ce:	6812      	ldr	r2, [r2, #0]
900153d0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
900153d4:	2900      	cmp	r1, #0
900153d6:	d048      	beq.n	9001546a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
900153d8:	785a      	ldrb	r2, [r3, #1]
900153da:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
900153de:	f3c2 0801 	ubfx	r8, r2, #0, #2
900153e2:	f3c2 0281 	ubfx	r2, r2, #2, #2
900153e6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
900153ea:	4b24      	ldr	r3, [pc, #144]	; (9001547c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
900153ec:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
900153f0:	681a      	ldr	r2, [r3, #0]
900153f2:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
900153f6:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
900153fa:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
900153fe:	6b26      	ldr	r6, [r4, #48]	; 0x30
90015400:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
90015404:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
90015408:	9107      	str	r1, [sp, #28]
9001540a:	f88d 8020 	strb.w	r8, [sp, #32]
9001540e:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
90015412:	9609      	str	r6, [sp, #36]	; 0x24
90015414:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
90015418:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
9001541c:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
90015420:	b10b      	cbz	r3, 90015426 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
90015422:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
90015424:	b905      	cbnz	r5, 90015428 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
90015426:	6895      	ldr	r5, [r2, #8]
90015428:	ae05      	add	r6, sp, #20
9001542a:	4621      	mov	r1, r4
9001542c:	4630      	mov	r0, r6
9001542e:	f003 fccf 	bl	90018dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90015432:	4b13      	ldr	r3, [pc, #76]	; (90015480 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
90015434:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
90015436:	6818      	ldr	r0, [r3, #0]
90015438:	f7f2 fc7c 	bl	90007d34 <_ZNK8touchgfx5Texts7getTextEt>
9001543c:	6823      	ldr	r3, [r4, #0]
9001543e:	4680      	mov	r8, r0
90015440:	4620      	mov	r0, r4
90015442:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90015444:	4798      	blx	r3
90015446:	6823      	ldr	r3, [r4, #0]
90015448:	4681      	mov	r9, r0
9001544a:	4620      	mov	r0, r4
9001544c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90015450:	4798      	blx	r3
90015452:	ab07      	add	r3, sp, #28
90015454:	f8cd 8004 	str.w	r8, [sp, #4]
90015458:	9300      	str	r3, [sp, #0]
9001545a:	463b      	mov	r3, r7
9001545c:	e9cd 9002 	strd	r9, r0, [sp, #8]
90015460:	4628      	mov	r0, r5
90015462:	e896 0006 	ldmia.w	r6, {r1, r2}
90015466:	f7f2 fc15 	bl	90007c94 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
9001546a:	b00d      	add	sp, #52	; 0x34
9001546c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90015470:	240281f0 	.word	0x240281f0
90015474:	240281ec 	.word	0x240281ec
90015478:	240281f4 	.word	0x240281f4
9001547c:	24028194 	.word	0x24028194
90015480:	240281f8 	.word	0x240281f8

90015484 <_ZN8touchgfx5ImageD1Ev>:
90015484:	4770      	bx	lr

90015486 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
90015486:	b570      	push	{r4, r5, r6, lr}
90015488:	880b      	ldrh	r3, [r1, #0]
9001548a:	460d      	mov	r5, r1
9001548c:	4604      	mov	r4, r0
9001548e:	84c3      	strh	r3, [r0, #38]	; 0x26
90015490:	4608      	mov	r0, r1
90015492:	f005 fced 	bl	9001ae70 <_ZNK8touchgfx6Bitmap8getWidthEv>
90015496:	4606      	mov	r6, r0
90015498:	4628      	mov	r0, r5
9001549a:	f005 fd1d 	bl	9001aed8 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001549e:	6823      	ldr	r3, [r4, #0]
900154a0:	4605      	mov	r5, r0
900154a2:	4631      	mov	r1, r6
900154a4:	4620      	mov	r0, r4
900154a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900154a8:	4798      	blx	r3
900154aa:	6823      	ldr	r3, [r4, #0]
900154ac:	4629      	mov	r1, r5
900154ae:	4620      	mov	r0, r4
900154b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900154b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900154b6:	4718      	bx	r3

900154b8 <_ZN8touchgfx5ImageD0Ev>:
900154b8:	b510      	push	{r4, lr}
900154ba:	4604      	mov	r4, r0
900154bc:	212c      	movs	r1, #44	; 0x2c
900154be:	f011 fdda 	bl	90027076 <_ZdlPvj>
900154c2:	4620      	mov	r0, r4
900154c4:	bd10      	pop	{r4, pc}

900154c6 <_ZNK8touchgfx5Image12getSolidRectEv>:
900154c6:	b510      	push	{r4, lr}
900154c8:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
900154cc:	4604      	mov	r4, r0
900154ce:	2bff      	cmp	r3, #255	; 0xff
900154d0:	d006      	beq.n	900154e0 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
900154d2:	2300      	movs	r3, #0
900154d4:	8003      	strh	r3, [r0, #0]
900154d6:	8043      	strh	r3, [r0, #2]
900154d8:	8083      	strh	r3, [r0, #4]
900154da:	80c3      	strh	r3, [r0, #6]
900154dc:	4620      	mov	r0, r4
900154de:	bd10      	pop	{r4, pc}
900154e0:	3126      	adds	r1, #38	; 0x26
900154e2:	f005 fd2d 	bl	9001af40 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
900154e6:	e7f9      	b.n	900154dc <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

900154e8 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
900154e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900154ec:	4604      	mov	r4, r0
900154ee:	b088      	sub	sp, #32
900154f0:	2500      	movs	r5, #0
900154f2:	460f      	mov	r7, r1
900154f4:	f854 3b26 	ldr.w	r3, [r4], #38
900154f8:	a904      	add	r1, sp, #16
900154fa:	4606      	mov	r6, r0
900154fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900154fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
90015502:	4798      	blx	r3
90015504:	4620      	mov	r0, r4
90015506:	f005 fcb3 	bl	9001ae70 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001550a:	4680      	mov	r8, r0
9001550c:	4620      	mov	r0, r4
9001550e:	f005 fce3 	bl	9001aed8 <_ZNK8touchgfx6Bitmap9getHeightEv>
90015512:	9506      	str	r5, [sp, #24]
90015514:	ad06      	add	r5, sp, #24
90015516:	f8ad 001e 	strh.w	r0, [sp, #30]
9001551a:	4639      	mov	r1, r7
9001551c:	f8ad 801c 	strh.w	r8, [sp, #28]
90015520:	4628      	mov	r0, r5
90015522:	f7fd f987 	bl	90012834 <_ZN8touchgfx4RectaNERKS0_>
90015526:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
9001552a:	2b00      	cmp	r3, #0
9001552c:	dd19      	ble.n	90015562 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
9001552e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
90015532:	2b00      	cmp	r3, #0
90015534:	dd15      	ble.n	90015562 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
90015536:	4b0c      	ldr	r3, [pc, #48]	; (90015568 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
90015538:	681b      	ldr	r3, [r3, #0]
9001553a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
9001553e:	b10a      	cbz	r2, 90015544 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
90015540:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90015542:	b900      	cbnz	r0, 90015546 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
90015544:	6898      	ldr	r0, [r3, #8]
90015546:	2701      	movs	r7, #1
90015548:	6801      	ldr	r1, [r0, #0]
9001554a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001554e:	9702      	str	r7, [sp, #8]
90015550:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
90015554:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
90015558:	e9cd 5600 	strd	r5, r6, [sp]
9001555c:	688d      	ldr	r5, [r1, #8]
9001555e:	4621      	mov	r1, r4
90015560:	47a8      	blx	r5
90015562:	b008      	add	sp, #32
90015564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90015568:	24028194 	.word	0x24028194

9001556c <_ZN8touchgfx7OutlineD1Ev>:
9001556c:	4770      	bx	lr

9001556e <_ZN8touchgfx7OutlineD0Ev>:
9001556e:	b510      	push	{r4, lr}
90015570:	4604      	mov	r4, r0
90015572:	2130      	movs	r1, #48	; 0x30
90015574:	f011 fd7f 	bl	90027076 <_ZdlPvj>
90015578:	4620      	mov	r0, r4
9001557a:	bd10      	pop	{r4, pc}

9001557c <_ZN8touchgfx7Outline5resetEv>:
9001557c:	b510      	push	{r4, lr}
9001557e:	4604      	mov	r4, r0
90015580:	f000 fe86 	bl	90016290 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
90015584:	60e0      	str	r0, [r4, #12]
90015586:	f000 fe89 	bl	9001629c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
9001558a:	68e3      	ldr	r3, [r4, #12]
9001558c:	08c0      	lsrs	r0, r0, #3
9001558e:	2200      	movs	r2, #0
90015590:	f647 71ff 	movw	r1, #32767	; 0x7fff
90015594:	6123      	str	r3, [r4, #16]
90015596:	3801      	subs	r0, #1
90015598:	60a2      	str	r2, [r4, #8]
9001559a:	6060      	str	r0, [r4, #4]
9001559c:	8019      	strh	r1, [r3, #0]
9001559e:	8059      	strh	r1, [r3, #2]
900155a0:	809a      	strh	r2, [r3, #4]
900155a2:	80da      	strh	r2, [r3, #6]
900155a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
900155a6:	f023 0301 	bic.w	r3, r3, #1
900155aa:	f043 0302 	orr.w	r3, r3, #2
900155ae:	6263      	str	r3, [r4, #36]	; 0x24
900155b0:	bd10      	pop	{r4, pc}
	...

900155b4 <_ZN8touchgfx7OutlineC1Ev>:
900155b4:	4b0a      	ldr	r3, [pc, #40]	; (900155e0 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
900155b6:	b510      	push	{r4, lr}
900155b8:	6003      	str	r3, [r0, #0]
900155ba:	2300      	movs	r3, #0
900155bc:	4604      	mov	r4, r0
900155be:	6243      	str	r3, [r0, #36]	; 0x24
900155c0:	e9c0 3301 	strd	r3, r3, [r0, #4]
900155c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
900155c8:	e9c0 3305 	strd	r3, r3, [r0, #20]
900155cc:	e9c0 3307 	strd	r3, r3, [r0, #28]
900155d0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
900155d4:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
900155d8:	f7ff ffd0 	bl	9001557c <_ZN8touchgfx7Outline5resetEv>
900155dc:	4620      	mov	r0, r4
900155de:	bd10      	pop	{r4, pc}
900155e0:	9002bf04 	.word	0x9002bf04

900155e4 <_ZN8touchgfx7Outline10renderLineEiiii>:
900155e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900155e8:	b093      	sub	sp, #76	; 0x4c
900155ea:	1156      	asrs	r6, r2, #5
900155ec:	9c1c      	ldr	r4, [sp, #112]	; 0x70
900155ee:	9305      	str	r3, [sp, #20]
900155f0:	1153      	asrs	r3, r2, #5
900155f2:	f004 051f 	and.w	r5, r4, #31
900155f6:	9303      	str	r3, [sp, #12]
900155f8:	1163      	asrs	r3, r4, #5
900155fa:	9504      	str	r5, [sp, #16]
900155fc:	1165      	asrs	r5, r4, #5
900155fe:	9306      	str	r3, [sp, #24]
90015600:	f002 031f 	and.w	r3, r2, #31
90015604:	42ae      	cmp	r6, r5
90015606:	f040 80f4 	bne.w	900157f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
9001560a:	9c04      	ldr	r4, [sp, #16]
9001560c:	9a05      	ldr	r2, [sp, #20]
9001560e:	42a3      	cmp	r3, r4
90015610:	ea4f 1e62 	mov.w	lr, r2, asr #5
90015614:	6902      	ldr	r2, [r0, #16]
90015616:	d125      	bne.n	90015664 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
90015618:	f9b2 3000 	ldrsh.w	r3, [r2]
9001561c:	459e      	cmp	lr, r3
9001561e:	d103      	bne.n	90015628 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
90015620:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
90015624:	429e      	cmp	r6, r3
90015626:	d035      	beq.n	90015694 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
90015628:	88d1      	ldrh	r1, [r2, #6]
9001562a:	8893      	ldrh	r3, [r2, #4]
9001562c:	430b      	orrs	r3, r1
9001562e:	d010      	beq.n	90015652 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
90015630:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
90015634:	2b00      	cmp	r3, #0
90015636:	db0c      	blt.n	90015652 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
90015638:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9001563a:	428b      	cmp	r3, r1
9001563c:	da09      	bge.n	90015652 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
9001563e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
90015642:	428b      	cmp	r3, r1
90015644:	f103 0301 	add.w	r3, r3, #1
90015648:	bf38      	it	cc
9001564a:	3208      	addcc	r2, #8
9001564c:	6083      	str	r3, [r0, #8]
9001564e:	bf38      	it	cc
90015650:	6102      	strcc	r2, [r0, #16]
90015652:	6903      	ldr	r3, [r0, #16]
90015654:	9a03      	ldr	r2, [sp, #12]
90015656:	f8a3 e000 	strh.w	lr, [r3]
9001565a:	805a      	strh	r2, [r3, #2]
9001565c:	2200      	movs	r2, #0
9001565e:	809a      	strh	r2, [r3, #4]
90015660:	80da      	strh	r2, [r3, #6]
90015662:	e017      	b.n	90015694 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
90015664:	9c05      	ldr	r4, [sp, #20]
90015666:	114e      	asrs	r6, r1, #5
90015668:	f001 0c1f 	and.w	ip, r1, #31
9001566c:	f8b2 8004 	ldrh.w	r8, [r2, #4]
90015670:	f004 041f 	and.w	r4, r4, #31
90015674:	4576      	cmp	r6, lr
90015676:	f8b2 a006 	ldrh.w	sl, [r2, #6]
9001567a:	9402      	str	r4, [sp, #8]
9001567c:	9c04      	ldr	r4, [sp, #16]
9001567e:	eba4 0403 	sub.w	r4, r4, r3
90015682:	d10a      	bne.n	9001569a <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
90015684:	9b02      	ldr	r3, [sp, #8]
90015686:	44a0      	add	r8, r4
90015688:	449c      	add	ip, r3
9001568a:	f8a2 8004 	strh.w	r8, [r2, #4]
9001568e:	fb04 a40c 	mla	r4, r4, ip, sl
90015692:	80d4      	strh	r4, [r2, #6]
90015694:	b013      	add	sp, #76	; 0x4c
90015696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001569a:	9d05      	ldr	r5, [sp, #20]
9001569c:	1a69      	subs	r1, r5, r1
9001569e:	bf51      	iteee	pl
900156a0:	f1cc 0520 	rsbpl	r5, ip, #32
900156a4:	fb04 f40c 	mulmi.w	r4, r4, ip
900156a8:	4249      	negmi	r1, r1
900156aa:	2500      	movmi	r5, #0
900156ac:	bf5d      	ittte	pl
900156ae:	436c      	mulpl	r4, r5
900156b0:	2520      	movpl	r5, #32
900156b2:	f04f 0901 	movpl.w	r9, #1
900156b6:	f04f 39ff 	movmi.w	r9, #4294967295
900156ba:	9501      	str	r5, [sp, #4]
900156bc:	9f01      	ldr	r7, [sp, #4]
900156be:	444e      	add	r6, r9
900156c0:	fb94 f5f1 	sdiv	r5, r4, r1
900156c4:	fb01 4415 	mls	r4, r1, r5, r4
900156c8:	44bc      	add	ip, r7
900156ca:	2c00      	cmp	r4, #0
900156cc:	bfbc      	itt	lt
900156ce:	f105 35ff 	addlt.w	r5, r5, #4294967295
900156d2:	1864      	addlt	r4, r4, r1
900156d4:	44a8      	add	r8, r5
900156d6:	fb05 ac0c 	mla	ip, r5, ip, sl
900156da:	f8a2 8004 	strh.w	r8, [r2, #4]
900156de:	f8a2 c006 	strh.w	ip, [r2, #6]
900156e2:	f8d0 c010 	ldr.w	ip, [r0, #16]
900156e6:	f8bc 8006 	ldrh.w	r8, [ip, #6]
900156ea:	f8bc 2004 	ldrh.w	r2, [ip, #4]
900156ee:	ea58 0202 	orrs.w	r2, r8, r2
900156f2:	d011      	beq.n	90015718 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
900156f4:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
900156f8:	f1b8 0f00 	cmp.w	r8, #0
900156fc:	db0c      	blt.n	90015718 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
900156fe:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
90015700:	4590      	cmp	r8, r2
90015702:	da09      	bge.n	90015718 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
90015704:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
90015708:	4590      	cmp	r8, r2
9001570a:	bf3c      	itt	cc
9001570c:	f10c 0208 	addcc.w	r2, ip, #8
90015710:	6102      	strcc	r2, [r0, #16]
90015712:	f108 0201 	add.w	r2, r8, #1
90015716:	6082      	str	r2, [r0, #8]
90015718:	f8d0 c010 	ldr.w	ip, [r0, #16]
9001571c:	2700      	movs	r7, #0
9001571e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
90015722:	45b6      	cmp	lr, r6
90015724:	f8ac 6000 	strh.w	r6, [ip]
90015728:	442b      	add	r3, r5
9001572a:	f8ac 2002 	strh.w	r2, [ip, #2]
9001572e:	f8ac 7004 	strh.w	r7, [ip, #4]
90015732:	f8ac 7006 	strh.w	r7, [ip, #6]
90015736:	d04b      	beq.n	900157d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
90015738:	9f04      	ldr	r7, [sp, #16]
9001573a:	1a64      	subs	r4, r4, r1
9001573c:	f04f 0a00 	mov.w	sl, #0
90015740:	1aff      	subs	r7, r7, r3
90015742:	443d      	add	r5, r7
90015744:	016d      	lsls	r5, r5, #5
90015746:	fb95 f8f1 	sdiv	r8, r5, r1
9001574a:	fb01 5518 	mls	r5, r1, r8, r5
9001574e:	2d00      	cmp	r5, #0
90015750:	bfbc      	itt	lt
90015752:	f108 38ff 	addlt.w	r8, r8, #4294967295
90015756:	186d      	addlt	r5, r5, r1
90015758:	f108 0701 	add.w	r7, r8, #1
9001575c:	9703      	str	r7, [sp, #12]
9001575e:	f8d0 c010 	ldr.w	ip, [r0, #16]
90015762:	1964      	adds	r4, r4, r5
90015764:	444e      	add	r6, r9
90015766:	bf54      	ite	pl
90015768:	9f03      	ldrpl	r7, [sp, #12]
9001576a:	4647      	movmi	r7, r8
9001576c:	f8bc b004 	ldrh.w	fp, [ip, #4]
90015770:	bf58      	it	pl
90015772:	1a64      	subpl	r4, r4, r1
90015774:	443b      	add	r3, r7
90015776:	44bb      	add	fp, r7
90015778:	f8ac b004 	strh.w	fp, [ip, #4]
9001577c:	f8bc b006 	ldrh.w	fp, [ip, #6]
90015780:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
90015784:	f8ac b006 	strh.w	fp, [ip, #6]
90015788:	f8d0 c010 	ldr.w	ip, [r0, #16]
9001578c:	f8bc b006 	ldrh.w	fp, [ip, #6]
90015790:	f8bc 7004 	ldrh.w	r7, [ip, #4]
90015794:	ea5b 0707 	orrs.w	r7, fp, r7
90015798:	d011      	beq.n	900157be <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
9001579a:	f9bc b002 	ldrsh.w	fp, [ip, #2]
9001579e:	f1bb 0f00 	cmp.w	fp, #0
900157a2:	db0c      	blt.n	900157be <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
900157a4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
900157a6:	45bb      	cmp	fp, r7
900157a8:	da09      	bge.n	900157be <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
900157aa:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
900157ae:	45bb      	cmp	fp, r7
900157b0:	bf3c      	itt	cc
900157b2:	f10c 0708 	addcc.w	r7, ip, #8
900157b6:	6107      	strcc	r7, [r0, #16]
900157b8:	f10b 0701 	add.w	r7, fp, #1
900157bc:	6087      	str	r7, [r0, #8]
900157be:	6907      	ldr	r7, [r0, #16]
900157c0:	45b6      	cmp	lr, r6
900157c2:	803e      	strh	r6, [r7, #0]
900157c4:	807a      	strh	r2, [r7, #2]
900157c6:	f8a7 a004 	strh.w	sl, [r7, #4]
900157ca:	f8a7 a006 	strh.w	sl, [r7, #6]
900157ce:	d1c6      	bne.n	9001575e <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
900157d0:	9a04      	ldr	r2, [sp, #16]
900157d2:	1ad3      	subs	r3, r2, r3
900157d4:	6902      	ldr	r2, [r0, #16]
900157d6:	8891      	ldrh	r1, [r2, #4]
900157d8:	88d6      	ldrh	r6, [r2, #6]
900157da:	4419      	add	r1, r3
900157dc:	8091      	strh	r1, [r2, #4]
900157de:	9902      	ldr	r1, [sp, #8]
900157e0:	f101 0c20 	add.w	ip, r1, #32
900157e4:	9901      	ldr	r1, [sp, #4]
900157e6:	ebac 0c01 	sub.w	ip, ip, r1
900157ea:	fb03 630c 	mla	r3, r3, ip, r6
900157ee:	80d3      	strh	r3, [r2, #6]
900157f0:	e750      	b.n	90015694 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
900157f2:	9d05      	ldr	r5, [sp, #20]
900157f4:	1aa2      	subs	r2, r4, r2
900157f6:	eba5 0501 	sub.w	r5, r5, r1
900157fa:	9202      	str	r2, [sp, #8]
900157fc:	9508      	str	r5, [sp, #32]
900157fe:	f140 8128 	bpl.w	90015a52 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
90015802:	9a03      	ldr	r2, [sp, #12]
90015804:	2a00      	cmp	r2, #0
90015806:	f6ff af45 	blt.w	90015694 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
9001580a:	9a02      	ldr	r2, [sp, #8]
9001580c:	f04f 34ff 	mov.w	r4, #4294967295
90015810:	4252      	negs	r2, r2
90015812:	940b      	str	r4, [sp, #44]	; 0x2c
90015814:	2400      	movs	r4, #0
90015816:	9202      	str	r2, [sp, #8]
90015818:	9a06      	ldr	r2, [sp, #24]
9001581a:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
9001581e:	9206      	str	r2, [sp, #24]
90015820:	462a      	mov	r2, r5
90015822:	435a      	muls	r2, r3
90015824:	9401      	str	r4, [sp, #4]
90015826:	9c02      	ldr	r4, [sp, #8]
90015828:	9d02      	ldr	r5, [sp, #8]
9001582a:	fb92 f4f4 	sdiv	r4, r2, r4
9001582e:	fb05 2214 	mls	r2, r5, r4, r2
90015832:	2a00      	cmp	r2, #0
90015834:	9207      	str	r2, [sp, #28]
90015836:	bfbc      	itt	lt
90015838:	1952      	addlt	r2, r2, r5
9001583a:	f104 34ff 	addlt.w	r4, r4, #4294967295
9001583e:	6905      	ldr	r5, [r0, #16]
90015840:	bfb8      	it	lt
90015842:	9207      	strlt	r2, [sp, #28]
90015844:	eb04 0901 	add.w	r9, r4, r1
90015848:	9a01      	ldr	r2, [sp, #4]
9001584a:	ea4f 1669 	mov.w	r6, r9, asr #5
9001584e:	429a      	cmp	r2, r3
90015850:	f040 8111 	bne.w	90015a76 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
90015854:	f9b5 3000 	ldrsh.w	r3, [r5]
90015858:	429e      	cmp	r6, r3
9001585a:	d104      	bne.n	90015866 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
9001585c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
90015860:	9a03      	ldr	r2, [sp, #12]
90015862:	429a      	cmp	r2, r3
90015864:	d01b      	beq.n	9001589e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
90015866:	88ea      	ldrh	r2, [r5, #6]
90015868:	88ab      	ldrh	r3, [r5, #4]
9001586a:	4313      	orrs	r3, r2
9001586c:	d010      	beq.n	90015890 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
9001586e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90015872:	2a00      	cmp	r2, #0
90015874:	db0c      	blt.n	90015890 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
90015876:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
90015878:	429a      	cmp	r2, r3
9001587a:	da09      	bge.n	90015890 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
9001587c:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
90015880:	429a      	cmp	r2, r3
90015882:	f102 0201 	add.w	r2, r2, #1
90015886:	bf38      	it	cc
90015888:	3508      	addcc	r5, #8
9001588a:	6082      	str	r2, [r0, #8]
9001588c:	bf38      	it	cc
9001588e:	6105      	strcc	r5, [r0, #16]
90015890:	6903      	ldr	r3, [r0, #16]
90015892:	9a03      	ldr	r2, [sp, #12]
90015894:	801e      	strh	r6, [r3, #0]
90015896:	805a      	strh	r2, [r3, #2]
90015898:	2200      	movs	r2, #0
9001589a:	809a      	strh	r2, [r3, #4]
9001589c:	80da      	strh	r2, [r3, #6]
9001589e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
900158a0:	9a03      	ldr	r2, [sp, #12]
900158a2:	6901      	ldr	r1, [r0, #16]
900158a4:	441a      	add	r2, r3
900158a6:	f9b1 3000 	ldrsh.w	r3, [r1]
900158aa:	42b3      	cmp	r3, r6
900158ac:	d103      	bne.n	900158b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
900158ae:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
900158b2:	429a      	cmp	r2, r3
900158b4:	d01a      	beq.n	900158ec <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
900158b6:	88cc      	ldrh	r4, [r1, #6]
900158b8:	888b      	ldrh	r3, [r1, #4]
900158ba:	4323      	orrs	r3, r4
900158bc:	d010      	beq.n	900158e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
900158be:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
900158c2:	2c00      	cmp	r4, #0
900158c4:	db0c      	blt.n	900158e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
900158c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
900158c8:	429c      	cmp	r4, r3
900158ca:	da09      	bge.n	900158e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
900158cc:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
900158d0:	429c      	cmp	r4, r3
900158d2:	f104 0401 	add.w	r4, r4, #1
900158d6:	bf38      	it	cc
900158d8:	3108      	addcc	r1, #8
900158da:	6084      	str	r4, [r0, #8]
900158dc:	bf38      	it	cc
900158de:	6101      	strcc	r1, [r0, #16]
900158e0:	6903      	ldr	r3, [r0, #16]
900158e2:	2100      	movs	r1, #0
900158e4:	801e      	strh	r6, [r3, #0]
900158e6:	805a      	strh	r2, [r3, #2]
900158e8:	8099      	strh	r1, [r3, #4]
900158ea:	80d9      	strh	r1, [r3, #6]
900158ec:	9b06      	ldr	r3, [sp, #24]
900158ee:	4293      	cmp	r3, r2
900158f0:	f000 8082 	beq.w	900159f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
900158f4:	9b08      	ldr	r3, [sp, #32]
900158f6:	9902      	ldr	r1, [sp, #8]
900158f8:	015b      	lsls	r3, r3, #5
900158fa:	9c02      	ldr	r4, [sp, #8]
900158fc:	fb93 f1f1 	sdiv	r1, r3, r1
90015900:	fb04 3311 	mls	r3, r4, r1, r3
90015904:	9103      	str	r1, [sp, #12]
90015906:	2b00      	cmp	r3, #0
90015908:	9308      	str	r3, [sp, #32]
9001590a:	da04      	bge.n	90015916 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
9001590c:	1e4b      	subs	r3, r1, #1
9001590e:	9303      	str	r3, [sp, #12]
90015910:	9b08      	ldr	r3, [sp, #32]
90015912:	4423      	add	r3, r4
90015914:	9308      	str	r3, [sp, #32]
90015916:	9b07      	ldr	r3, [sp, #28]
90015918:	464f      	mov	r7, r9
9001591a:	9902      	ldr	r1, [sp, #8]
9001591c:	2600      	movs	r6, #0
9001591e:	1a5b      	subs	r3, r3, r1
90015920:	9307      	str	r3, [sp, #28]
90015922:	9b01      	ldr	r3, [sp, #4]
90015924:	f1c3 0320 	rsb	r3, r3, #32
90015928:	930e      	str	r3, [sp, #56]	; 0x38
9001592a:	990e      	ldr	r1, [sp, #56]	; 0x38
9001592c:	9b01      	ldr	r3, [sp, #4]
9001592e:	1a5b      	subs	r3, r3, r1
90015930:	930a      	str	r3, [sp, #40]	; 0x28
90015932:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
90015936:	185b      	adds	r3, r3, r1
90015938:	bf58      	it	pl
9001593a:	9902      	ldrpl	r1, [sp, #8]
9001593c:	9307      	str	r3, [sp, #28]
9001593e:	bf57      	itett	pl
90015940:	1a5b      	subpl	r3, r3, r1
90015942:	9903      	ldrmi	r1, [sp, #12]
90015944:	9307      	strpl	r3, [sp, #28]
90015946:	9b03      	ldrpl	r3, [sp, #12]
90015948:	bf58      	it	pl
9001594a:	1c59      	addpl	r1, r3, #1
9001594c:	2a00      	cmp	r2, #0
9001594e:	4489      	add	r9, r1
90015950:	ea4f 1a69 	mov.w	sl, r9, asr #5
90015954:	db2e      	blt.n	900159b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
90015956:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
90015958:	4293      	cmp	r3, r2
9001595a:	dd2b      	ble.n	900159b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
9001595c:	9c01      	ldr	r4, [sp, #4]
9001595e:	6905      	ldr	r5, [r0, #16]
90015960:	46a0      	mov	r8, r4
90015962:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90015964:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
90015968:	45a0      	cmp	r8, r4
9001596a:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
9001596e:	f040 814c 	bne.w	90015c0a <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
90015972:	f9b5 1000 	ldrsh.w	r1, [r5]
90015976:	4551      	cmp	r1, sl
90015978:	d103      	bne.n	90015982 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
9001597a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
9001597e:	4291      	cmp	r1, r2
90015980:	d018      	beq.n	900159b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
90015982:	ea5c 010e 	orrs.w	r1, ip, lr
90015986:	d00f      	beq.n	900159a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
90015988:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
9001598c:	2900      	cmp	r1, #0
9001598e:	db0b      	blt.n	900159a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
90015990:	428b      	cmp	r3, r1
90015992:	dd09      	ble.n	900159a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
90015994:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
90015998:	4299      	cmp	r1, r3
9001599a:	f101 0101 	add.w	r1, r1, #1
9001599e:	bf38      	it	cc
900159a0:	3508      	addcc	r5, #8
900159a2:	6081      	str	r1, [r0, #8]
900159a4:	bf38      	it	cc
900159a6:	6105      	strcc	r5, [r0, #16]
900159a8:	6903      	ldr	r3, [r0, #16]
900159aa:	f8a3 a000 	strh.w	sl, [r3]
900159ae:	805a      	strh	r2, [r3, #2]
900159b0:	809e      	strh	r6, [r3, #4]
900159b2:	80de      	strh	r6, [r3, #6]
900159b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
900159b6:	6901      	ldr	r1, [r0, #16]
900159b8:	441a      	add	r2, r3
900159ba:	88cc      	ldrh	r4, [r1, #6]
900159bc:	888b      	ldrh	r3, [r1, #4]
900159be:	4323      	orrs	r3, r4
900159c0:	d010      	beq.n	900159e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
900159c2:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
900159c6:	2c00      	cmp	r4, #0
900159c8:	db0c      	blt.n	900159e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
900159ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
900159cc:	429c      	cmp	r4, r3
900159ce:	da09      	bge.n	900159e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
900159d0:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
900159d4:	429c      	cmp	r4, r3
900159d6:	f104 0401 	add.w	r4, r4, #1
900159da:	bf38      	it	cc
900159dc:	3108      	addcc	r1, #8
900159de:	6084      	str	r4, [r0, #8]
900159e0:	bf38      	it	cc
900159e2:	6101      	strcc	r1, [r0, #16]
900159e4:	6903      	ldr	r3, [r0, #16]
900159e6:	464f      	mov	r7, r9
900159e8:	f8a3 a000 	strh.w	sl, [r3]
900159ec:	805a      	strh	r2, [r3, #2]
900159ee:	809e      	strh	r6, [r3, #4]
900159f0:	80de      	strh	r6, [r3, #6]
900159f2:	9b06      	ldr	r3, [sp, #24]
900159f4:	4293      	cmp	r3, r2
900159f6:	d19c      	bne.n	90015932 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
900159f8:	9b01      	ldr	r3, [sp, #4]
900159fa:	6907      	ldr	r7, [r0, #16]
900159fc:	f1c3 0620 	rsb	r6, r3, #32
90015a00:	9b05      	ldr	r3, [sp, #20]
90015a02:	ea4f 1e63 	mov.w	lr, r3, asr #5
90015a06:	9b04      	ldr	r3, [sp, #16]
90015a08:	429e      	cmp	r6, r3
90015a0a:	f040 81c7 	bne.w	90015d9c <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
90015a0e:	f9b7 3000 	ldrsh.w	r3, [r7]
90015a12:	459e      	cmp	lr, r3
90015a14:	d104      	bne.n	90015a20 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
90015a16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
90015a1a:	429a      	cmp	r2, r3
90015a1c:	f43f ae3a 	beq.w	90015694 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
90015a20:	88f9      	ldrh	r1, [r7, #6]
90015a22:	88bb      	ldrh	r3, [r7, #4]
90015a24:	430b      	orrs	r3, r1
90015a26:	d010      	beq.n	90015a4a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
90015a28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
90015a2c:	2b00      	cmp	r3, #0
90015a2e:	db0c      	blt.n	90015a4a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
90015a30:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
90015a32:	428b      	cmp	r3, r1
90015a34:	da09      	bge.n	90015a4a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
90015a36:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
90015a3a:	428b      	cmp	r3, r1
90015a3c:	f103 0301 	add.w	r3, r3, #1
90015a40:	bf38      	it	cc
90015a42:	3708      	addcc	r7, #8
90015a44:	6083      	str	r3, [r0, #8]
90015a46:	bf38      	it	cc
90015a48:	6107      	strcc	r7, [r0, #16]
90015a4a:	6903      	ldr	r3, [r0, #16]
90015a4c:	f8a3 e000 	strh.w	lr, [r3]
90015a50:	e603      	b.n	9001565a <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
90015a52:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
90015a54:	9c03      	ldr	r4, [sp, #12]
90015a56:	42a2      	cmp	r2, r4
90015a58:	f6ff ae1c 	blt.w	90015694 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
90015a5c:	9c06      	ldr	r4, [sp, #24]
90015a5e:	42a2      	cmp	r2, r4
90015a60:	9c08      	ldr	r4, [sp, #32]
90015a62:	bfbc      	itt	lt
90015a64:	3201      	addlt	r2, #1
90015a66:	9206      	strlt	r2, [sp, #24]
90015a68:	f1c3 0220 	rsb	r2, r3, #32
90015a6c:	4362      	muls	r2, r4
90015a6e:	2401      	movs	r4, #1
90015a70:	940b      	str	r4, [sp, #44]	; 0x2c
90015a72:	2420      	movs	r4, #32
90015a74:	e6d6      	b.n	90015824 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
90015a76:	ea4f 1861 	mov.w	r8, r1, asr #5
90015a7a:	f009 021f 	and.w	r2, r9, #31
90015a7e:	f001 011f 	and.w	r1, r1, #31
90015a82:	f8b5 e004 	ldrh.w	lr, [r5, #4]
90015a86:	920c      	str	r2, [sp, #48]	; 0x30
90015a88:	45b0      	cmp	r8, r6
90015a8a:	9a01      	ldr	r2, [sp, #4]
90015a8c:	f8b5 a006 	ldrh.w	sl, [r5, #6]
90015a90:	eba2 0203 	sub.w	r2, r2, r3
90015a94:	d108      	bne.n	90015aa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
90015a96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90015a98:	4496      	add	lr, r2
90015a9a:	4419      	add	r1, r3
90015a9c:	f8a5 e004 	strh.w	lr, [r5, #4]
90015aa0:	fb02 a101 	mla	r1, r2, r1, sl
90015aa4:	80e9      	strh	r1, [r5, #6]
90015aa6:	e6fa      	b.n	9001589e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
90015aa8:	2c00      	cmp	r4, #0
90015aaa:	f2c0 80a7 	blt.w	90015bfc <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
90015aae:	2701      	movs	r7, #1
90015ab0:	f1c1 0c20 	rsb	ip, r1, #32
90015ab4:	970a      	str	r7, [sp, #40]	; 0x28
90015ab6:	2720      	movs	r7, #32
90015ab8:	fb02 f20c 	mul.w	r2, r2, ip
90015abc:	9709      	str	r7, [sp, #36]	; 0x24
90015abe:	9f09      	ldr	r7, [sp, #36]	; 0x24
90015ac0:	fb92 fcf4 	sdiv	ip, r2, r4
90015ac4:	fb04 221c 	mls	r2, r4, ip, r2
90015ac8:	4439      	add	r1, r7
90015aca:	2a00      	cmp	r2, #0
90015acc:	bfbc      	itt	lt
90015ace:	f10c 3cff 	addlt.w	ip, ip, #4294967295
90015ad2:	1912      	addlt	r2, r2, r4
90015ad4:	fb0c a101 	mla	r1, ip, r1, sl
90015ad8:	44e6      	add	lr, ip
90015ada:	80e9      	strh	r1, [r5, #6]
90015adc:	990a      	ldr	r1, [sp, #40]	; 0x28
90015ade:	f8a5 e004 	strh.w	lr, [r5, #4]
90015ae2:	eb08 0501 	add.w	r5, r8, r1
90015ae6:	6901      	ldr	r1, [r0, #16]
90015ae8:	f8b1 8006 	ldrh.w	r8, [r1, #6]
90015aec:	f8b1 e004 	ldrh.w	lr, [r1, #4]
90015af0:	ea58 070e 	orrs.w	r7, r8, lr
90015af4:	d010      	beq.n	90015b18 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
90015af6:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
90015afa:	f1be 0f00 	cmp.w	lr, #0
90015afe:	db0b      	blt.n	90015b18 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
90015b00:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
90015b02:	45be      	cmp	lr, r7
90015b04:	da08      	bge.n	90015b18 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
90015b06:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
90015b0a:	45be      	cmp	lr, r7
90015b0c:	bf3c      	itt	cc
90015b0e:	3108      	addcc	r1, #8
90015b10:	6101      	strcc	r1, [r0, #16]
90015b12:	f10e 0101 	add.w	r1, lr, #1
90015b16:	6081      	str	r1, [r0, #8]
90015b18:	6901      	ldr	r1, [r0, #16]
90015b1a:	f04f 0e00 	mov.w	lr, #0
90015b1e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
90015b22:	42ae      	cmp	r6, r5
90015b24:	800d      	strh	r5, [r1, #0]
90015b26:	4463      	add	r3, ip
90015b28:	f8a1 8002 	strh.w	r8, [r1, #2]
90015b2c:	f8a1 e004 	strh.w	lr, [r1, #4]
90015b30:	f8a1 e006 	strh.w	lr, [r1, #6]
90015b34:	d053      	beq.n	90015bde <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
90015b36:	9901      	ldr	r1, [sp, #4]
90015b38:	1b12      	subs	r2, r2, r4
90015b3a:	1ac9      	subs	r1, r1, r3
90015b3c:	4461      	add	r1, ip
90015b3e:	0149      	lsls	r1, r1, #5
90015b40:	fb91 fef4 	sdiv	lr, r1, r4
90015b44:	fb04 111e 	mls	r1, r4, lr, r1
90015b48:	2900      	cmp	r1, #0
90015b4a:	bfbc      	itt	lt
90015b4c:	f10e 3eff 	addlt.w	lr, lr, #4294967295
90015b50:	1909      	addlt	r1, r1, r4
90015b52:	f10e 0701 	add.w	r7, lr, #1
90015b56:	970d      	str	r7, [sp, #52]	; 0x34
90015b58:	f8d0 a010 	ldr.w	sl, [r0, #16]
90015b5c:	1852      	adds	r2, r2, r1
90015b5e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
90015b60:	bf54      	ite	pl
90015b62:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
90015b66:	46f4      	movmi	ip, lr
90015b68:	f8ba b004 	ldrh.w	fp, [sl, #4]
90015b6c:	bf58      	it	pl
90015b6e:	1b12      	subpl	r2, r2, r4
90015b70:	4463      	add	r3, ip
90015b72:	443d      	add	r5, r7
90015b74:	44e3      	add	fp, ip
90015b76:	f8aa b004 	strh.w	fp, [sl, #4]
90015b7a:	f8ba b006 	ldrh.w	fp, [sl, #6]
90015b7e:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
90015b82:	f8aa b006 	strh.w	fp, [sl, #6]
90015b86:	f8d0 c010 	ldr.w	ip, [r0, #16]
90015b8a:	f8bc b006 	ldrh.w	fp, [ip, #6]
90015b8e:	f8bc a004 	ldrh.w	sl, [ip, #4]
90015b92:	ea5b 070a 	orrs.w	r7, fp, sl
90015b96:	d014      	beq.n	90015bc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
90015b98:	f9bc a002 	ldrsh.w	sl, [ip, #2]
90015b9c:	f1ba 0f00 	cmp.w	sl, #0
90015ba0:	db0f      	blt.n	90015bc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
90015ba2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
90015ba4:	45ba      	cmp	sl, r7
90015ba6:	da0c      	bge.n	90015bc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
90015ba8:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
90015bac:	45ba      	cmp	sl, r7
90015bae:	f10a 0a01 	add.w	sl, sl, #1
90015bb2:	bf38      	it	cc
90015bb4:	f10c 0c08 	addcc.w	ip, ip, #8
90015bb8:	f8c0 a008 	str.w	sl, [r0, #8]
90015bbc:	bf38      	it	cc
90015bbe:	f8c0 c010 	strcc.w	ip, [r0, #16]
90015bc2:	f8d0 c010 	ldr.w	ip, [r0, #16]
90015bc6:	f04f 0700 	mov.w	r7, #0
90015bca:	42ae      	cmp	r6, r5
90015bcc:	f8ac 5000 	strh.w	r5, [ip]
90015bd0:	f8ac 8002 	strh.w	r8, [ip, #2]
90015bd4:	f8ac 7004 	strh.w	r7, [ip, #4]
90015bd8:	f8ac 7006 	strh.w	r7, [ip, #6]
90015bdc:	d1bc      	bne.n	90015b58 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
90015bde:	6904      	ldr	r4, [r0, #16]
90015be0:	9a01      	ldr	r2, [sp, #4]
90015be2:	990c      	ldr	r1, [sp, #48]	; 0x30
90015be4:	1ad3      	subs	r3, r2, r3
90015be6:	88a2      	ldrh	r2, [r4, #4]
90015be8:	3120      	adds	r1, #32
90015bea:	441a      	add	r2, r3
90015bec:	80a2      	strh	r2, [r4, #4]
90015bee:	9a09      	ldr	r2, [sp, #36]	; 0x24
90015bf0:	1a89      	subs	r1, r1, r2
90015bf2:	88e2      	ldrh	r2, [r4, #6]
90015bf4:	fb03 2301 	mla	r3, r3, r1, r2
90015bf8:	80e3      	strh	r3, [r4, #6]
90015bfa:	e650      	b.n	9001589e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
90015bfc:	f04f 37ff 	mov.w	r7, #4294967295
90015c00:	434a      	muls	r2, r1
90015c02:	4264      	negs	r4, r4
90015c04:	970a      	str	r7, [sp, #40]	; 0x28
90015c06:	2700      	movs	r7, #0
90015c08:	e758      	b.n	90015abc <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
90015c0a:	ea4f 1867 	mov.w	r8, r7, asr #5
90015c0e:	f009 031f 	and.w	r3, r9, #31
90015c12:	f007 071f 	and.w	r7, r7, #31
90015c16:	fa1f fc8c 	uxth.w	ip, ip
90015c1a:	45d0      	cmp	r8, sl
90015c1c:	930f      	str	r3, [sp, #60]	; 0x3c
90015c1e:	fa1f fe8e 	uxth.w	lr, lr
90015c22:	d10a      	bne.n	90015c3a <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
90015c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90015c26:	449c      	add	ip, r3
90015c28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90015c2a:	441f      	add	r7, r3
90015c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90015c2e:	f8a5 c004 	strh.w	ip, [r5, #4]
90015c32:	fb03 e707 	mla	r7, r3, r7, lr
90015c36:	80ef      	strh	r7, [r5, #6]
90015c38:	e6bc      	b.n	900159b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
90015c3a:	2900      	cmp	r1, #0
90015c3c:	f2c0 80a6 	blt.w	90015d8c <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
90015c40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90015c42:	f1c7 0320 	rsb	r3, r7, #32
90015c46:	4363      	muls	r3, r4
90015c48:	2401      	movs	r4, #1
90015c4a:	940d      	str	r4, [sp, #52]	; 0x34
90015c4c:	2420      	movs	r4, #32
90015c4e:	940c      	str	r4, [sp, #48]	; 0x30
90015c50:	fb93 f4f1 	sdiv	r4, r3, r1
90015c54:	fb01 3b14 	mls	fp, r1, r4, r3
90015c58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90015c5a:	f1bb 0f00 	cmp.w	fp, #0
90015c5e:	441f      	add	r7, r3
90015c60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90015c62:	bfbc      	itt	lt
90015c64:	f104 34ff 	addlt.w	r4, r4, #4294967295
90015c68:	448b      	addlt	fp, r1
90015c6a:	fb04 e707 	mla	r7, r4, r7, lr
90015c6e:	44a4      	add	ip, r4
90015c70:	80ef      	strh	r7, [r5, #6]
90015c72:	f8a5 c004 	strh.w	ip, [r5, #4]
90015c76:	eb08 0503 	add.w	r5, r8, r3
90015c7a:	f8d0 c010 	ldr.w	ip, [r0, #16]
90015c7e:	f8bc e006 	ldrh.w	lr, [ip, #6]
90015c82:	f8bc 7004 	ldrh.w	r7, [ip, #4]
90015c86:	ea5e 0307 	orrs.w	r3, lr, r7
90015c8a:	d011      	beq.n	90015cb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
90015c8c:	f9bc e002 	ldrsh.w	lr, [ip, #2]
90015c90:	f1be 0f00 	cmp.w	lr, #0
90015c94:	db0c      	blt.n	90015cb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
90015c96:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
90015c98:	45be      	cmp	lr, r7
90015c9a:	da09      	bge.n	90015cb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
90015c9c:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
90015ca0:	45be      	cmp	lr, r7
90015ca2:	bf3c      	itt	cc
90015ca4:	f10c 0708 	addcc.w	r7, ip, #8
90015ca8:	6107      	strcc	r7, [r0, #16]
90015caa:	f10e 0701 	add.w	r7, lr, #1
90015cae:	6087      	str	r7, [r0, #8]
90015cb0:	6907      	ldr	r7, [r0, #16]
90015cb2:	b213      	sxth	r3, r2
90015cb4:	4555      	cmp	r5, sl
90015cb6:	9310      	str	r3, [sp, #64]	; 0x40
90015cb8:	807b      	strh	r3, [r7, #2]
90015cba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90015cbc:	803d      	strh	r5, [r7, #0]
90015cbe:	80be      	strh	r6, [r7, #4]
90015cc0:	eb04 0c03 	add.w	ip, r4, r3
90015cc4:	80fe      	strh	r6, [r7, #6]
90015cc6:	d050      	beq.n	90015d6a <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
90015cc8:	9b01      	ldr	r3, [sp, #4]
90015cca:	eba3 070c 	sub.w	r7, r3, ip
90015cce:	ebab 0301 	sub.w	r3, fp, r1
90015cd2:	443c      	add	r4, r7
90015cd4:	9309      	str	r3, [sp, #36]	; 0x24
90015cd6:	0164      	lsls	r4, r4, #5
90015cd8:	fb94 f8f1 	sdiv	r8, r4, r1
90015cdc:	fb01 4418 	mls	r4, r1, r8, r4
90015ce0:	2c00      	cmp	r4, #0
90015ce2:	bfbc      	itt	lt
90015ce4:	f108 38ff 	addlt.w	r8, r8, #4294967295
90015ce8:	1864      	addlt	r4, r4, r1
90015cea:	f108 0701 	add.w	r7, r8, #1
90015cee:	9711      	str	r7, [sp, #68]	; 0x44
90015cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
90015cf2:	f8d0 e010 	ldr.w	lr, [r0, #16]
90015cf6:	191b      	adds	r3, r3, r4
90015cf8:	f8be b004 	ldrh.w	fp, [lr, #4]
90015cfc:	bf54      	ite	pl
90015cfe:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
90015d00:	4647      	movmi	r7, r8
90015d02:	9309      	str	r3, [sp, #36]	; 0x24
90015d04:	bf58      	it	pl
90015d06:	1a5b      	subpl	r3, r3, r1
90015d08:	44bb      	add	fp, r7
90015d0a:	44bc      	add	ip, r7
90015d0c:	bf58      	it	pl
90015d0e:	9309      	strpl	r3, [sp, #36]	; 0x24
90015d10:	f8ae b004 	strh.w	fp, [lr, #4]
90015d14:	f8be b006 	ldrh.w	fp, [lr, #6]
90015d18:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
90015d1c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
90015d1e:	f8ae b006 	strh.w	fp, [lr, #6]
90015d22:	443d      	add	r5, r7
90015d24:	f8d0 e010 	ldr.w	lr, [r0, #16]
90015d28:	f8be b006 	ldrh.w	fp, [lr, #6]
90015d2c:	f8be 7004 	ldrh.w	r7, [lr, #4]
90015d30:	ea5b 0307 	orrs.w	r3, fp, r7
90015d34:	d011      	beq.n	90015d5a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
90015d36:	f9be b002 	ldrsh.w	fp, [lr, #2]
90015d3a:	f1bb 0f00 	cmp.w	fp, #0
90015d3e:	db0c      	blt.n	90015d5a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
90015d40:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
90015d42:	45bb      	cmp	fp, r7
90015d44:	da09      	bge.n	90015d5a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
90015d46:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
90015d4a:	45bb      	cmp	fp, r7
90015d4c:	bf3c      	itt	cc
90015d4e:	f10e 0708 	addcc.w	r7, lr, #8
90015d52:	6107      	strcc	r7, [r0, #16]
90015d54:	f10b 0701 	add.w	r7, fp, #1
90015d58:	6087      	str	r7, [r0, #8]
90015d5a:	6907      	ldr	r7, [r0, #16]
90015d5c:	4555      	cmp	r5, sl
90015d5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
90015d60:	803d      	strh	r5, [r7, #0]
90015d62:	807b      	strh	r3, [r7, #2]
90015d64:	80be      	strh	r6, [r7, #4]
90015d66:	80fe      	strh	r6, [r7, #6]
90015d68:	d1c2      	bne.n	90015cf0 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
90015d6a:	9b01      	ldr	r3, [sp, #4]
90015d6c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
90015d6e:	eba3 0c0c 	sub.w	ip, r3, ip
90015d72:	6903      	ldr	r3, [r0, #16]
90015d74:	3720      	adds	r7, #32
90015d76:	8899      	ldrh	r1, [r3, #4]
90015d78:	4461      	add	r1, ip
90015d7a:	8099      	strh	r1, [r3, #4]
90015d7c:	990c      	ldr	r1, [sp, #48]	; 0x30
90015d7e:	1a7f      	subs	r7, r7, r1
90015d80:	88d9      	ldrh	r1, [r3, #6]
90015d82:	fb0c 1c07 	mla	ip, ip, r7, r1
90015d86:	f8a3 c006 	strh.w	ip, [r3, #6]
90015d8a:	e613      	b.n	900159b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
90015d8c:	f04f 34ff 	mov.w	r4, #4294967295
90015d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90015d92:	4249      	negs	r1, r1
90015d94:	940d      	str	r4, [sp, #52]	; 0x34
90015d96:	2400      	movs	r4, #0
90015d98:	437b      	muls	r3, r7
90015d9a:	e758      	b.n	90015c4e <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
90015d9c:	9905      	ldr	r1, [sp, #20]
90015d9e:	ea4f 1b69 	mov.w	fp, r9, asr #5
90015da2:	f009 0c1f 	and.w	ip, r9, #31
90015da6:	f8b7 8004 	ldrh.w	r8, [r7, #4]
90015daa:	f001 011f 	and.w	r1, r1, #31
90015dae:	45f3      	cmp	fp, lr
90015db0:	f8b7 a006 	ldrh.w	sl, [r7, #6]
90015db4:	9102      	str	r1, [sp, #8]
90015db6:	9904      	ldr	r1, [sp, #16]
90015db8:	eba1 0406 	sub.w	r4, r1, r6
90015dbc:	d108      	bne.n	90015dd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
90015dbe:	9b02      	ldr	r3, [sp, #8]
90015dc0:	44a0      	add	r8, r4
90015dc2:	449c      	add	ip, r3
90015dc4:	f8a7 8004 	strh.w	r8, [r7, #4]
90015dc8:	fb04 a40c 	mla	r4, r4, ip, sl
90015dcc:	80fc      	strh	r4, [r7, #6]
90015dce:	e461      	b.n	90015694 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
90015dd0:	9905      	ldr	r1, [sp, #20]
90015dd2:	ebb1 0109 	subs.w	r1, r1, r9
90015dd6:	bf51      	iteee	pl
90015dd8:	f1cc 0520 	rsbpl	r5, ip, #32
90015ddc:	fb04 f40c 	mulmi.w	r4, r4, ip
90015de0:	4249      	negmi	r1, r1
90015de2:	2500      	movmi	r5, #0
90015de4:	bf5d      	ittte	pl
90015de6:	436c      	mulpl	r4, r5
90015de8:	2520      	movpl	r5, #32
90015dea:	f04f 0901 	movpl.w	r9, #1
90015dee:	f04f 39ff 	movmi.w	r9, #4294967295
90015df2:	9501      	str	r5, [sp, #4]
90015df4:	9b01      	ldr	r3, [sp, #4]
90015df6:	fb94 f5f1 	sdiv	r5, r4, r1
90015dfa:	fb01 4415 	mls	r4, r1, r5, r4
90015dfe:	449c      	add	ip, r3
90015e00:	eb0b 0309 	add.w	r3, fp, r9
90015e04:	2c00      	cmp	r4, #0
90015e06:	bfbc      	itt	lt
90015e08:	f105 35ff 	addlt.w	r5, r5, #4294967295
90015e0c:	1864      	addlt	r4, r4, r1
90015e0e:	44a8      	add	r8, r5
90015e10:	fb05 ac0c 	mla	ip, r5, ip, sl
90015e14:	f8a7 8004 	strh.w	r8, [r7, #4]
90015e18:	f8a7 c006 	strh.w	ip, [r7, #6]
90015e1c:	f8d0 c010 	ldr.w	ip, [r0, #16]
90015e20:	f8bc 8006 	ldrh.w	r8, [ip, #6]
90015e24:	f8bc 7004 	ldrh.w	r7, [ip, #4]
90015e28:	ea58 0707 	orrs.w	r7, r8, r7
90015e2c:	d011      	beq.n	90015e52 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
90015e2e:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
90015e32:	f1b8 0f00 	cmp.w	r8, #0
90015e36:	db0c      	blt.n	90015e52 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
90015e38:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
90015e3a:	45b8      	cmp	r8, r7
90015e3c:	da09      	bge.n	90015e52 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
90015e3e:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
90015e42:	45b8      	cmp	r8, r7
90015e44:	bf3c      	itt	cc
90015e46:	f10c 0708 	addcc.w	r7, ip, #8
90015e4a:	6107      	strcc	r7, [r0, #16]
90015e4c:	f108 0701 	add.w	r7, r8, #1
90015e50:	6087      	str	r7, [r0, #8]
90015e52:	6907      	ldr	r7, [r0, #16]
90015e54:	f04f 0c00 	mov.w	ip, #0
90015e58:	b212      	sxth	r2, r2
90015e5a:	459e      	cmp	lr, r3
90015e5c:	803b      	strh	r3, [r7, #0]
90015e5e:	442e      	add	r6, r5
90015e60:	807a      	strh	r2, [r7, #2]
90015e62:	f8a7 c004 	strh.w	ip, [r7, #4]
90015e66:	f8a7 c006 	strh.w	ip, [r7, #6]
90015e6a:	d04b      	beq.n	90015f04 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
90015e6c:	9f04      	ldr	r7, [sp, #16]
90015e6e:	1a64      	subs	r4, r4, r1
90015e70:	f04f 0a00 	mov.w	sl, #0
90015e74:	1bbf      	subs	r7, r7, r6
90015e76:	443d      	add	r5, r7
90015e78:	016d      	lsls	r5, r5, #5
90015e7a:	fb95 f8f1 	sdiv	r8, r5, r1
90015e7e:	fb01 5518 	mls	r5, r1, r8, r5
90015e82:	4565      	cmp	r5, ip
90015e84:	bfbc      	itt	lt
90015e86:	f108 38ff 	addlt.w	r8, r8, #4294967295
90015e8a:	186d      	addlt	r5, r5, r1
90015e8c:	f108 0701 	add.w	r7, r8, #1
90015e90:	9703      	str	r7, [sp, #12]
90015e92:	f8d0 c010 	ldr.w	ip, [r0, #16]
90015e96:	1964      	adds	r4, r4, r5
90015e98:	444b      	add	r3, r9
90015e9a:	bf54      	ite	pl
90015e9c:	9f03      	ldrpl	r7, [sp, #12]
90015e9e:	4647      	movmi	r7, r8
90015ea0:	f8bc b004 	ldrh.w	fp, [ip, #4]
90015ea4:	bf58      	it	pl
90015ea6:	1a64      	subpl	r4, r4, r1
90015ea8:	443e      	add	r6, r7
90015eaa:	44bb      	add	fp, r7
90015eac:	f8ac b004 	strh.w	fp, [ip, #4]
90015eb0:	f8bc b006 	ldrh.w	fp, [ip, #6]
90015eb4:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
90015eb8:	f8ac b006 	strh.w	fp, [ip, #6]
90015ebc:	f8d0 c010 	ldr.w	ip, [r0, #16]
90015ec0:	f8bc b006 	ldrh.w	fp, [ip, #6]
90015ec4:	f8bc 7004 	ldrh.w	r7, [ip, #4]
90015ec8:	ea5b 0707 	orrs.w	r7, fp, r7
90015ecc:	d011      	beq.n	90015ef2 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
90015ece:	f9bc b002 	ldrsh.w	fp, [ip, #2]
90015ed2:	f1bb 0f00 	cmp.w	fp, #0
90015ed6:	db0c      	blt.n	90015ef2 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
90015ed8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
90015eda:	45bb      	cmp	fp, r7
90015edc:	da09      	bge.n	90015ef2 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
90015ede:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
90015ee2:	45bb      	cmp	fp, r7
90015ee4:	bf3c      	itt	cc
90015ee6:	f10c 0708 	addcc.w	r7, ip, #8
90015eea:	6107      	strcc	r7, [r0, #16]
90015eec:	f10b 0701 	add.w	r7, fp, #1
90015ef0:	6087      	str	r7, [r0, #8]
90015ef2:	6907      	ldr	r7, [r0, #16]
90015ef4:	459e      	cmp	lr, r3
90015ef6:	803b      	strh	r3, [r7, #0]
90015ef8:	807a      	strh	r2, [r7, #2]
90015efa:	f8a7 a004 	strh.w	sl, [r7, #4]
90015efe:	f8a7 a006 	strh.w	sl, [r7, #6]
90015f02:	d1c6      	bne.n	90015e92 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
90015f04:	9b04      	ldr	r3, [sp, #16]
90015f06:	1b9e      	subs	r6, r3, r6
90015f08:	6903      	ldr	r3, [r0, #16]
90015f0a:	889a      	ldrh	r2, [r3, #4]
90015f0c:	4432      	add	r2, r6
90015f0e:	809a      	strh	r2, [r3, #4]
90015f10:	9a02      	ldr	r2, [sp, #8]
90015f12:	f102 0c20 	add.w	ip, r2, #32
90015f16:	9a01      	ldr	r2, [sp, #4]
90015f18:	ebac 0c02 	sub.w	ip, ip, r2
90015f1c:	88da      	ldrh	r2, [r3, #6]
90015f1e:	fb06 260c 	mla	r6, r6, ip, r2
90015f22:	80de      	strh	r6, [r3, #6]
90015f24:	f7ff bbb6 	b.w	90015694 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

90015f28 <_ZN8touchgfx7Outline6lineToEii>:
90015f28:	6a43      	ldr	r3, [r0, #36]	; 0x24
90015f2a:	079b      	lsls	r3, r3, #30
90015f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
90015f2e:	460e      	mov	r6, r1
90015f30:	4615      	mov	r5, r2
90015f32:	d511      	bpl.n	90015f58 <_ZN8touchgfx7Outline6lineToEii+0x30>
90015f34:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
90015f38:	ea86 0701 	eor.w	r7, r6, r1
90015f3c:	ea85 0302 	eor.w	r3, r5, r2
90015f40:	433b      	orrs	r3, r7
90015f42:	d009      	beq.n	90015f58 <_ZN8touchgfx7Outline6lineToEii+0x30>
90015f44:	4633      	mov	r3, r6
90015f46:	9500      	str	r5, [sp, #0]
90015f48:	f7ff fb4c 	bl	900155e4 <_ZN8touchgfx7Outline10renderLineEiiii>
90015f4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
90015f4e:	f043 0301 	orr.w	r3, r3, #1
90015f52:	e9c0 6505 	strd	r6, r5, [r0, #20]
90015f56:	6243      	str	r3, [r0, #36]	; 0x24
90015f58:	b003      	add	sp, #12
90015f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

90015f5c <_ZN8touchgfx7Outline6moveToEii>:
90015f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90015f5e:	6a43      	ldr	r3, [r0, #36]	; 0x24
90015f60:	4615      	mov	r5, r2
90015f62:	4604      	mov	r4, r0
90015f64:	460e      	mov	r6, r1
90015f66:	079a      	lsls	r2, r3, #30
90015f68:	d401      	bmi.n	90015f6e <_ZN8touchgfx7Outline6moveToEii+0x12>
90015f6a:	f7ff fb07 	bl	9001557c <_ZN8touchgfx7Outline5resetEv>
90015f6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
90015f70:	07db      	lsls	r3, r3, #31
90015f72:	d504      	bpl.n	90015f7e <_ZN8touchgfx7Outline6moveToEii+0x22>
90015f74:	4620      	mov	r0, r4
90015f76:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
90015f7a:	f7ff ffd5 	bl	90015f28 <_ZN8touchgfx7Outline6lineToEii>
90015f7e:	6923      	ldr	r3, [r4, #16]
90015f80:	1170      	asrs	r0, r6, #5
90015f82:	1169      	asrs	r1, r5, #5
90015f84:	f9b3 2000 	ldrsh.w	r2, [r3]
90015f88:	4290      	cmp	r0, r2
90015f8a:	d103      	bne.n	90015f94 <_ZN8touchgfx7Outline6moveToEii+0x38>
90015f8c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
90015f90:	4291      	cmp	r1, r2
90015f92:	d01a      	beq.n	90015fca <_ZN8touchgfx7Outline6moveToEii+0x6e>
90015f94:	88df      	ldrh	r7, [r3, #6]
90015f96:	889a      	ldrh	r2, [r3, #4]
90015f98:	433a      	orrs	r2, r7
90015f9a:	d010      	beq.n	90015fbe <_ZN8touchgfx7Outline6moveToEii+0x62>
90015f9c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
90015fa0:	2a00      	cmp	r2, #0
90015fa2:	db0c      	blt.n	90015fbe <_ZN8touchgfx7Outline6moveToEii+0x62>
90015fa4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
90015fa6:	42ba      	cmp	r2, r7
90015fa8:	da09      	bge.n	90015fbe <_ZN8touchgfx7Outline6moveToEii+0x62>
90015faa:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
90015fae:	42ba      	cmp	r2, r7
90015fb0:	f102 0201 	add.w	r2, r2, #1
90015fb4:	bf38      	it	cc
90015fb6:	3308      	addcc	r3, #8
90015fb8:	60a2      	str	r2, [r4, #8]
90015fba:	bf38      	it	cc
90015fbc:	6123      	strcc	r3, [r4, #16]
90015fbe:	6923      	ldr	r3, [r4, #16]
90015fc0:	2200      	movs	r2, #0
90015fc2:	8018      	strh	r0, [r3, #0]
90015fc4:	8059      	strh	r1, [r3, #2]
90015fc6:	809a      	strh	r2, [r3, #4]
90015fc8:	80da      	strh	r2, [r3, #6]
90015fca:	6166      	str	r6, [r4, #20]
90015fcc:	6225      	str	r5, [r4, #32]
90015fce:	e9c4 5606 	strd	r5, r6, [r4, #24]
90015fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

90015fd4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
90015fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90015fd8:	b0d0      	sub	sp, #320	; 0x140
90015fda:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
90015fde:	466c      	mov	r4, sp
90015fe0:	4627      	mov	r7, r4
90015fe2:	1a0d      	subs	r5, r1, r0
90015fe4:	f100 0308 	add.w	r3, r0, #8
90015fe8:	2d48      	cmp	r5, #72	; 0x48
90015fea:	f340 80d5 	ble.w	90016198 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
90015fee:	112d      	asrs	r5, r5, #4
90015ff0:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
90015ff4:	f9b0 9000 	ldrsh.w	r9, [r0]
90015ff8:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
90015ffc:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
90016000:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
90016004:	6816      	ldr	r6, [r2, #0]
90016006:	6006      	str	r6, [r0, #0]
90016008:	6856      	ldr	r6, [r2, #4]
9001600a:	6046      	str	r6, [r0, #4]
9001600c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
90016010:	f8a2 8002 	strh.w	r8, [r2, #2]
90016014:	f8a2 e004 	strh.w	lr, [r2, #4]
90016018:	f8a2 c006 	strh.w	ip, [r2, #6]
9001601c:	f1a1 0208 	sub.w	r2, r1, #8
90016020:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
90016024:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
90016028:	4565      	cmp	r5, ip
9001602a:	db06      	blt.n	9001603a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
9001602c:	d119      	bne.n	90016062 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
9001602e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
90016032:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
90016036:	42ae      	cmp	r6, r5
90016038:	dd13      	ble.n	90016062 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
9001603a:	460e      	mov	r6, r1
9001603c:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
90016040:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
90016044:	f856 5d08 	ldr.w	r5, [r6, #-8]!
90016048:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
9001604c:	601d      	str	r5, [r3, #0]
9001604e:	6875      	ldr	r5, [r6, #4]
90016050:	605d      	str	r5, [r3, #4]
90016052:	f821 9c08 	strh.w	r9, [r1, #-8]
90016056:	f821 cc06 	strh.w	ip, [r1, #-6]
9001605a:	f821 8c04 	strh.w	r8, [r1, #-4]
9001605e:	f821 ec02 	strh.w	lr, [r1, #-2]
90016062:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
90016066:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
9001606a:	42ae      	cmp	r6, r5
9001606c:	db06      	blt.n	9001607c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
9001606e:	d116      	bne.n	9001609e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
90016070:	f9b0 c000 	ldrsh.w	ip, [r0]
90016074:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
90016078:	45ac      	cmp	ip, r5
9001607a:	da10      	bge.n	9001609e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
9001607c:	681d      	ldr	r5, [r3, #0]
9001607e:	f9b0 8000 	ldrsh.w	r8, [r0]
90016082:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
90016086:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
9001608a:	6005      	str	r5, [r0, #0]
9001608c:	685d      	ldr	r5, [r3, #4]
9001608e:	f8a0 8008 	strh.w	r8, [r0, #8]
90016092:	6045      	str	r5, [r0, #4]
90016094:	8146      	strh	r6, [r0, #10]
90016096:	f8a0 e00c 	strh.w	lr, [r0, #12]
9001609a:	f8a0 c00e 	strh.w	ip, [r0, #14]
9001609e:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
900160a2:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
900160a6:	4565      	cmp	r5, ip
900160a8:	db06      	blt.n	900160b8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
900160aa:	d119      	bne.n	900160e0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
900160ac:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
900160b0:	f9b0 5000 	ldrsh.w	r5, [r0]
900160b4:	42ae      	cmp	r6, r5
900160b6:	da13      	bge.n	900160e0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
900160b8:	460e      	mov	r6, r1
900160ba:	f9b0 9000 	ldrsh.w	r9, [r0]
900160be:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
900160c2:	f856 5d08 	ldr.w	r5, [r6, #-8]!
900160c6:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
900160ca:	6005      	str	r5, [r0, #0]
900160cc:	6875      	ldr	r5, [r6, #4]
900160ce:	6045      	str	r5, [r0, #4]
900160d0:	f821 9c08 	strh.w	r9, [r1, #-8]
900160d4:	f821 cc06 	strh.w	ip, [r1, #-6]
900160d8:	f821 8c04 	strh.w	r8, [r1, #-4]
900160dc:	f821 ec02 	strh.w	lr, [r1, #-2]
900160e0:	3308      	adds	r3, #8
900160e2:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
900160e6:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
900160ea:	45e6      	cmp	lr, ip
900160ec:	dbf8      	blt.n	900160e0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
900160ee:	d105      	bne.n	900160fc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
900160f0:	f9b3 6000 	ldrsh.w	r6, [r3]
900160f4:	f9b0 5000 	ldrsh.w	r5, [r0]
900160f8:	42ae      	cmp	r6, r5
900160fa:	dbf1      	blt.n	900160e0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
900160fc:	4615      	mov	r5, r2
900160fe:	3a08      	subs	r2, #8
90016100:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
90016104:	45b4      	cmp	ip, r6
90016106:	dbf9      	blt.n	900160fc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
90016108:	d105      	bne.n	90016116 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
9001610a:	f9b0 8000 	ldrsh.w	r8, [r0]
9001610e:	f9b2 6000 	ldrsh.w	r6, [r2]
90016112:	45b0      	cmp	r8, r6
90016114:	dbf2      	blt.n	900160fc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
90016116:	4293      	cmp	r3, r2
90016118:	f1a5 0608 	sub.w	r6, r5, #8
9001611c:	d816      	bhi.n	9001614c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
9001611e:	f8d6 c000 	ldr.w	ip, [r6]
90016122:	f9b3 a000 	ldrsh.w	sl, [r3]
90016126:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
9001612a:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
9001612e:	f8c3 c000 	str.w	ip, [r3]
90016132:	f8d6 c004 	ldr.w	ip, [r6, #4]
90016136:	f8c3 c004 	str.w	ip, [r3, #4]
9001613a:	f825 ac08 	strh.w	sl, [r5, #-8]
9001613e:	f825 ec06 	strh.w	lr, [r5, #-6]
90016142:	f825 9c04 	strh.w	r9, [r5, #-4]
90016146:	f825 8c02 	strh.w	r8, [r5, #-2]
9001614a:	e7c9      	b.n	900160e0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
9001614c:	f8d6 e000 	ldr.w	lr, [r6]
90016150:	f9b0 a000 	ldrsh.w	sl, [r0]
90016154:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
90016158:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
9001615c:	f8c0 e000 	str.w	lr, [r0]
90016160:	f8d6 e004 	ldr.w	lr, [r6, #4]
90016164:	1a16      	subs	r6, r2, r0
90016166:	f8c0 e004 	str.w	lr, [r0, #4]
9001616a:	f825 ac08 	strh.w	sl, [r5, #-8]
9001616e:	f825 cc06 	strh.w	ip, [r5, #-6]
90016172:	f825 9c04 	strh.w	r9, [r5, #-4]
90016176:	f825 8c02 	strh.w	r8, [r5, #-2]
9001617a:	1acd      	subs	r5, r1, r3
9001617c:	10ed      	asrs	r5, r5, #3
9001617e:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
90016182:	bfb5      	itete	lt
90016184:	e9c4 0200 	strdlt	r0, r2, [r4]
90016188:	e9c4 3100 	strdge	r3, r1, [r4]
9001618c:	460a      	movlt	r2, r1
9001618e:	4603      	movge	r3, r0
90016190:	3408      	adds	r4, #8
90016192:	4618      	mov	r0, r3
90016194:	4611      	mov	r1, r2
90016196:	e724      	b.n	90015fe2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
90016198:	4299      	cmp	r1, r3
9001619a:	d927      	bls.n	900161ec <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
9001619c:	f1a3 0210 	sub.w	r2, r3, #16
900161a0:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
900161a4:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
900161a8:	45ac      	cmp	ip, r5
900161aa:	db06      	blt.n	900161ba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
900161ac:	d11c      	bne.n	900161e8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
900161ae:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
900161b2:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
900161b6:	42ae      	cmp	r6, r5
900161b8:	da16      	bge.n	900161e8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
900161ba:	4615      	mov	r5, r2
900161bc:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
900161c0:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
900161c4:	3a08      	subs	r2, #8
900161c6:	f855 6f08 	ldr.w	r6, [r5, #8]!
900161ca:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
900161ce:	6196      	str	r6, [r2, #24]
900161d0:	42a8      	cmp	r0, r5
900161d2:	686e      	ldr	r6, [r5, #4]
900161d4:	f8a2 9010 	strh.w	r9, [r2, #16]
900161d8:	61d6      	str	r6, [r2, #28]
900161da:	f8a2 c012 	strh.w	ip, [r2, #18]
900161de:	f8a2 8014 	strh.w	r8, [r2, #20]
900161e2:	f8a2 e016 	strh.w	lr, [r2, #22]
900161e6:	d1db      	bne.n	900161a0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
900161e8:	3308      	adds	r3, #8
900161ea:	e7d5      	b.n	90016198 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
900161ec:	42bc      	cmp	r4, r7
900161ee:	d903      	bls.n	900161f8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
900161f0:	e954 0102 	ldrd	r0, r1, [r4, #-8]
900161f4:	3c08      	subs	r4, #8
900161f6:	e6f4      	b.n	90015fe2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
900161f8:	b050      	add	sp, #320	; 0x140
900161fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

900161fe <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
900161fe:	b510      	push	{r4, lr}
90016200:	6a43      	ldr	r3, [r0, #36]	; 0x24
90016202:	4604      	mov	r4, r0
90016204:	07da      	lsls	r2, r3, #31
90016206:	d507      	bpl.n	90016218 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
90016208:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
9001620c:	f7ff fe8c 	bl	90015f28 <_ZN8touchgfx7Outline6lineToEii>
90016210:	6a43      	ldr	r3, [r0, #36]	; 0x24
90016212:	f023 0301 	bic.w	r3, r3, #1
90016216:	6243      	str	r3, [r0, #36]	; 0x24
90016218:	6a63      	ldr	r3, [r4, #36]	; 0x24
9001621a:	079b      	lsls	r3, r3, #30
9001621c:	d521      	bpl.n	90016262 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
9001621e:	6923      	ldr	r3, [r4, #16]
90016220:	88d9      	ldrh	r1, [r3, #6]
90016222:	889a      	ldrh	r2, [r3, #4]
90016224:	430a      	orrs	r2, r1
90016226:	d010      	beq.n	9001624a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
90016228:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
9001622c:	2a00      	cmp	r2, #0
9001622e:	db0c      	blt.n	9001624a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
90016230:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
90016232:	428a      	cmp	r2, r1
90016234:	da09      	bge.n	9001624a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
90016236:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
9001623a:	4291      	cmp	r1, r2
9001623c:	f102 0201 	add.w	r2, r2, #1
90016240:	bf88      	it	hi
90016242:	3308      	addhi	r3, #8
90016244:	60a2      	str	r2, [r4, #8]
90016246:	bf88      	it	hi
90016248:	6123      	strhi	r3, [r4, #16]
9001624a:	68a1      	ldr	r1, [r4, #8]
9001624c:	b129      	cbz	r1, 9001625a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
9001624e:	6863      	ldr	r3, [r4, #4]
90016250:	4299      	cmp	r1, r3
90016252:	d802      	bhi.n	9001625a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
90016254:	68e0      	ldr	r0, [r4, #12]
90016256:	f7ff febd 	bl	90015fd4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
9001625a:	6a63      	ldr	r3, [r4, #36]	; 0x24
9001625c:	f023 0302 	bic.w	r3, r3, #2
90016260:	6263      	str	r3, [r4, #36]	; 0x24
90016262:	68e0      	ldr	r0, [r4, #12]
90016264:	bd10      	pop	{r4, pc}
	...

90016268 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
90016268:	4b02      	ldr	r3, [pc, #8]	; (90016274 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
9001626a:	6018      	str	r0, [r3, #0]
9001626c:	4b02      	ldr	r3, [pc, #8]	; (90016278 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
9001626e:	6019      	str	r1, [r3, #0]
90016270:	4770      	bx	lr
90016272:	bf00      	nop
90016274:	2402819c 	.word	0x2402819c
90016278:	240281a0 	.word	0x240281a0

9001627c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
9001627c:	2300      	movs	r3, #0
9001627e:	4a02      	ldr	r2, [pc, #8]	; (90016288 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
90016280:	6013      	str	r3, [r2, #0]
90016282:	4a02      	ldr	r2, [pc, #8]	; (9001628c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
90016284:	6013      	str	r3, [r2, #0]
90016286:	4770      	bx	lr
90016288:	2402819c 	.word	0x2402819c
9001628c:	240281a0 	.word	0x240281a0

90016290 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
90016290:	4b01      	ldr	r3, [pc, #4]	; (90016298 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
90016292:	6818      	ldr	r0, [r3, #0]
90016294:	4770      	bx	lr
90016296:	bf00      	nop
90016298:	2402819c 	.word	0x2402819c

9001629c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
9001629c:	4b01      	ldr	r3, [pc, #4]	; (900162a4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
9001629e:	6818      	ldr	r0, [r3, #0]
900162a0:	4770      	bx	lr
900162a2:	bf00      	nop
900162a4:	240281a0 	.word	0x240281a0

900162a8 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
900162a8:	b510      	push	{r4, lr}
900162aa:	6803      	ldr	r3, [r0, #0]
900162ac:	460c      	mov	r4, r1
900162ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900162b0:	4798      	blx	r3
900162b2:	1b03      	subs	r3, r0, r4
900162b4:	4258      	negs	r0, r3
900162b6:	4158      	adcs	r0, r3
900162b8:	bd10      	pop	{r4, pc}
	...

900162bc <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
900162bc:	4b01      	ldr	r3, [pc, #4]	; (900162c4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
900162be:	6019      	str	r1, [r3, #0]
900162c0:	4770      	bx	lr
900162c2:	bf00      	nop
900162c4:	240281a4 	.word	0x240281a4

900162c8 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
900162c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900162cc:	4696      	mov	lr, r2
900162ce:	b097      	sub	sp, #92	; 0x5c
900162d0:	4605      	mov	r5, r0
900162d2:	4614      	mov	r4, r2
900162d4:	460e      	mov	r6, r1
900162d6:	461f      	mov	r7, r3
900162d8:	f10d 0c1c 	add.w	ip, sp, #28
900162dc:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
900162e0:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
900162e4:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
900162e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
900162ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
900162f0:	f8de 3000 	ldr.w	r3, [lr]
900162f4:	f104 0e14 	add.w	lr, r4, #20
900162f8:	f8cc 3000 	str.w	r3, [ip]
900162fc:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
90016300:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90016304:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90016308:	f8de 3000 	ldr.w	r3, [lr]
9001630c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
90016310:	f8cc 3000 	str.w	r3, [ip]
90016314:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
90016318:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
9001631c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90016320:	f8de 3000 	ldr.w	r3, [lr]
90016324:	4631      	mov	r1, r6
90016326:	9a21      	ldr	r2, [sp, #132]	; 0x84
90016328:	4628      	mov	r0, r5
9001632a:	f8cc 3000 	str.w	r3, [ip]
9001632e:	682b      	ldr	r3, [r5, #0]
90016330:	9201      	str	r2, [sp, #4]
90016332:	9a20      	ldr	r2, [sp, #128]	; 0x80
90016334:	f8cd 8008 	str.w	r8, [sp, #8]
90016338:	9200      	str	r2, [sp, #0]
9001633a:	aa07      	add	r2, sp, #28
9001633c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
90016340:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
90016344:	463b      	mov	r3, r7
90016346:	47d8      	blx	fp
90016348:	46a6      	mov	lr, r4
9001634a:	f10d 0c1c 	add.w	ip, sp, #28
9001634e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90016352:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90016356:	f8de 3000 	ldr.w	r3, [lr]
9001635a:	f104 0e28 	add.w	lr, r4, #40	; 0x28
9001635e:	343c      	adds	r4, #60	; 0x3c
90016360:	f8cc 3000 	str.w	r3, [ip]
90016364:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
90016368:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
9001636c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90016370:	f8de 3000 	ldr.w	r3, [lr]
90016374:	f8cc 3000 	str.w	r3, [ip]
90016378:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
9001637c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
9001637e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90016382:	6823      	ldr	r3, [r4, #0]
90016384:	4631      	mov	r1, r6
90016386:	4628      	mov	r0, r5
90016388:	f8cc 3000 	str.w	r3, [ip]
9001638c:	682b      	ldr	r3, [r5, #0]
9001638e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
90016392:	9a21      	ldr	r2, [sp, #132]	; 0x84
90016394:	f8cd 8008 	str.w	r8, [sp, #8]
90016398:	9201      	str	r2, [sp, #4]
9001639a:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001639c:	9200      	str	r2, [sp, #0]
9001639e:	aa07      	add	r2, sp, #28
900163a0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
900163a2:	463b      	mov	r3, r7
900163a4:	47a0      	blx	r4
900163a6:	b017      	add	sp, #92	; 0x5c
900163a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900163ac <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
900163ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900163b0:	b08d      	sub	sp, #52	; 0x34
900163b2:	4688      	mov	r8, r1
900163b4:	f8d3 c000 	ldr.w	ip, [r3]
900163b8:	9916      	ldr	r1, [sp, #88]	; 0x58
900163ba:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
900163be:	680f      	ldr	r7, [r1, #0]
900163c0:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
900163c4:	eba7 070c 	sub.w	r7, r7, ip
900163c8:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
900163cc:	edd3 6a07 	vldr	s13, [r3, #28]
900163d0:	42bc      	cmp	r4, r7
900163d2:	9918      	ldr	r1, [sp, #96]	; 0x60
900163d4:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
900163d8:	bfa8      	it	ge
900163da:	463c      	movge	r4, r7
900163dc:	f9b1 9000 	ldrsh.w	r9, [r1]
900163e0:	f9ba 1000 	ldrsh.w	r1, [sl]
900163e4:	ee07 4a90 	vmov	s15, r4
900163e8:	eb09 0e0c 	add.w	lr, r9, ip
900163ec:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
900163f0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
900163f4:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
900163f8:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
900163fc:	4571      	cmp	r1, lr
900163fe:	ee25 4a04 	vmul.f32	s8, s10, s8
90016402:	ee65 4a24 	vmul.f32	s9, s10, s9
90016406:	ee25 5a27 	vmul.f32	s10, s10, s15
9001640a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
9001640e:	ee71 0aa4 	vadd.f32	s1, s3, s9
90016412:	ee32 1a05 	vadd.f32	s2, s4, s10
90016416:	ee87 7aa6 	vdiv.f32	s14, s15, s13
9001641a:	ee36 0a84 	vadd.f32	s0, s13, s8
9001641e:	ee61 1a87 	vmul.f32	s3, s3, s14
90016422:	ee22 2a07 	vmul.f32	s4, s4, s14
90016426:	f340 808c 	ble.w	90016542 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
9001642a:	eba1 060e 	sub.w	r6, r1, lr
9001642e:	fb96 f5f4 	sdiv	r5, r6, r4
90016432:	ee07 5a10 	vmov	s14, r5
90016436:	2d00      	cmp	r5, #0
90016438:	fb04 6615 	mls	r6, r4, r5, r6
9001643c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90016440:	eea7 0a04 	vfma.f32	s0, s14, s8
90016444:	eee7 0a24 	vfma.f32	s1, s14, s9
90016448:	eea7 1a05 	vfma.f32	s2, s14, s10
9001644c:	dd12      	ble.n	90016474 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
9001644e:	ee70 6a44 	vsub.f32	s13, s0, s8
90016452:	ee70 1ae4 	vsub.f32	s3, s1, s9
90016456:	ee31 2a45 	vsub.f32	s4, s2, s10
9001645a:	eef5 6a40 	vcmp.f32	s13, #0.0
9001645e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016462:	bf14      	ite	ne
90016464:	ee87 7aa6 	vdivne.f32	s14, s15, s13
90016468:	eeb0 7a67 	vmoveq.f32	s14, s15
9001646c:	ee61 1a87 	vmul.f32	s3, s3, s14
90016470:	ee22 2a07 	vmul.f32	s4, s4, s14
90016474:	fb05 f204 	mul.w	r2, r5, r4
90016478:	1abf      	subs	r7, r7, r2
9001647a:	4494      	add	ip, r2
9001647c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
90016480:	4411      	add	r1, r2
90016482:	eb09 020c 	add.w	r2, r9, ip
90016486:	b209      	sxth	r1, r1
90016488:	443a      	add	r2, r7
9001648a:	428a      	cmp	r2, r1
9001648c:	bfc4      	itt	gt
9001648e:	eba1 0209 	subgt.w	r2, r1, r9
90016492:	eba2 070c 	subgt.w	r7, r2, ip
90016496:	2f00      	cmp	r7, #0
90016498:	dd50      	ble.n	9001653c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
9001649a:	fb97 f1f4 	sdiv	r1, r7, r4
9001649e:	fb04 7211 	mls	r2, r4, r1, r7
900164a2:	b90a      	cbnz	r2, 900164a8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
900164a4:	3901      	subs	r1, #1
900164a6:	4622      	mov	r2, r4
900164a8:	eec7 3a80 	vdiv.f32	s7, s15, s0
900164ac:	6840      	ldr	r0, [r0, #4]
900164ae:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
900164b2:	44b6      	add	lr, r6
900164b4:	f8d0 a000 	ldr.w	sl, [r0]
900164b8:	2900      	cmp	r1, #0
900164ba:	bfcc      	ite	gt
900164bc:	46a1      	movgt	r9, r4
900164be:	4691      	movle	r9, r2
900164c0:	900b      	str	r0, [sp, #44]	; 0x2c
900164c2:	9817      	ldr	r0, [sp, #92]	; 0x5c
900164c4:	fb04 e505 	mla	r5, r4, r5, lr
900164c8:	eef0 6a42 	vmov.f32	s13, s4
900164cc:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
900164d0:	9008      	str	r0, [sp, #32]
900164d2:	eeb0 7a61 	vmov.f32	s14, s3
900164d6:	9818      	ldr	r0, [sp, #96]	; 0x60
900164d8:	695b      	ldr	r3, [r3, #20]
900164da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900164de:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
900164e2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
900164e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
900164e8:	445b      	add	r3, fp
900164ea:	9307      	str	r3, [sp, #28]
900164ec:	ee16 3a90 	vmov	r3, s13
900164f0:	e9cd 8505 	strd	r8, r5, [sp, #20]
900164f4:	ee60 2aa3 	vmul.f32	s5, s1, s7
900164f8:	ee21 3a23 	vmul.f32	s6, s2, s7
900164fc:	ee72 7ae1 	vsub.f32	s15, s5, s3
90016500:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
90016504:	ee17 7a90 	vmov	r7, s15
90016508:	ee73 7a42 	vsub.f32	s15, s6, s4
9001650c:	fb97 f7f4 	sdiv	r7, r7, r4
90016510:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
90016514:	ee17 ca90 	vmov	ip, s15
90016518:	fb9c fcf4 	sdiv	ip, ip, r4
9001651c:	fb0c 3306 	mla	r3, ip, r6, r3
90016520:	9302      	str	r3, [sp, #8]
90016522:	ee17 3a10 	vmov	r3, s14
90016526:	e9cd 7c03 	strd	r7, ip, [sp, #12]
9001652a:	fb07 3706 	mla	r7, r7, r6, r3
9001652e:	eba9 0306 	sub.w	r3, r9, r6
90016532:	e9cd 4700 	strd	r4, r7, [sp]
90016536:	f8da 4008 	ldr.w	r4, [sl, #8]
9001653a:	47a0      	blx	r4
9001653c:	b00d      	add	sp, #52	; 0x34
9001653e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90016542:	2500      	movs	r5, #0
90016544:	462e      	mov	r6, r5
90016546:	e799      	b.n	9001647c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

90016548 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
90016548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001654c:	b0db      	sub	sp, #364	; 0x16c
9001654e:	461d      	mov	r5, r3
90016550:	4614      	mov	r4, r2
90016552:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
90016556:	910f      	str	r1, [sp, #60]	; 0x3c
90016558:	4629      	mov	r1, r5
9001655a:	930a      	str	r3, [sp, #40]	; 0x28
9001655c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
90016560:	9009      	str	r0, [sp, #36]	; 0x24
90016562:	930b      	str	r3, [sp, #44]	; 0x2c
90016564:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
90016568:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
9001656c:	9310      	str	r3, [sp, #64]	; 0x40
9001656e:	6803      	ldr	r3, [r0, #0]
90016570:	6c5f      	ldr	r7, [r3, #68]	; 0x44
90016572:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
90016576:	47b8      	blx	r7
90016578:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001657a:	6058      	str	r0, [r3, #4]
9001657c:	2800      	cmp	r0, #0
9001657e:	f000 83a1 	beq.w	90016cc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016582:	682b      	ldr	r3, [r5, #0]
90016584:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
90016588:	ed94 7a02 	vldr	s14, [r4, #8]
9001658c:	9314      	str	r3, [sp, #80]	; 0x50
9001658e:	686b      	ldr	r3, [r5, #4]
90016590:	eeb4 7ae7 	vcmpe.f32	s14, s15
90016594:	9315      	str	r3, [sp, #84]	; 0x54
90016596:	4bc1      	ldr	r3, [pc, #772]	; (9001689c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
90016598:	7819      	ldrb	r1, [r3, #0]
9001659a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
9001659e:	2900      	cmp	r1, #0
900165a0:	bf16      	itet	ne
900165a2:	4619      	movne	r1, r3
900165a4:	4611      	moveq	r1, r2
900165a6:	4613      	movne	r3, r2
900165a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900165ac:	9116      	str	r1, [sp, #88]	; 0x58
900165ae:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
900165b2:	f240 8387 	bls.w	90016cc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900165b6:	ed94 7a07 	vldr	s14, [r4, #28]
900165ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
900165be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900165c2:	f240 837f 	bls.w	90016cc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900165c6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
900165ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
900165ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900165d2:	f240 8377 	bls.w	90016cc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900165d6:	6822      	ldr	r2, [r4, #0]
900165d8:	4bb1      	ldr	r3, [pc, #708]	; (900168a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
900165da:	429a      	cmp	r2, r3
900165dc:	f2c0 8372 	blt.w	90016cc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900165e0:	49b0      	ldr	r1, [pc, #704]	; (900168a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
900165e2:	6963      	ldr	r3, [r4, #20]
900165e4:	428a      	cmp	r2, r1
900165e6:	f300 836d 	bgt.w	90016cc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900165ea:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
900165ee:	48ae      	ldr	r0, [pc, #696]	; (900168a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
900165f0:	33ff      	adds	r3, #255	; 0xff
900165f2:	4283      	cmp	r3, r0
900165f4:	f200 8366 	bhi.w	90016cc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900165f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
900165fa:	4dac      	ldr	r5, [pc, #688]	; (900168ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
900165fc:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
90016600:	33ff      	adds	r3, #255	; 0xff
90016602:	42ab      	cmp	r3, r5
90016604:	f200 835e 	bhi.w	90016cc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016608:	6862      	ldr	r2, [r4, #4]
9001660a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
9001660e:	33ff      	adds	r3, #255	; 0xff
90016610:	4283      	cmp	r3, r0
90016612:	f200 8357 	bhi.w	90016cc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016616:	69a1      	ldr	r1, [r4, #24]
90016618:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
9001661c:	33ff      	adds	r3, #255	; 0xff
9001661e:	4283      	cmp	r3, r0
90016620:	f200 8350 	bhi.w	90016cc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016624:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90016626:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
9001662a:	30ff      	adds	r0, #255	; 0xff
9001662c:	42a8      	cmp	r0, r5
9001662e:	f200 8349 	bhi.w	90016cc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016632:	428a      	cmp	r2, r1
90016634:	f280 8110 	bge.w	90016858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
90016638:	429a      	cmp	r2, r3
9001663a:	f300 8119 	bgt.w	90016870 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
9001663e:	4299      	cmp	r1, r3
90016640:	f280 811d 	bge.w	9001687e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
90016644:	2502      	movs	r5, #2
90016646:	2701      	movs	r7, #1
90016648:	46a9      	mov	r9, r5
9001664a:	46b8      	mov	r8, r7
9001664c:	f04f 0a00 	mov.w	sl, #0
90016650:	4621      	mov	r1, r4
90016652:	a849      	add	r0, sp, #292	; 0x124
90016654:	f003 fdc4 	bl	9001a1e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
90016658:	4622      	mov	r2, r4
9001665a:	4653      	mov	r3, sl
9001665c:	a949      	add	r1, sp, #292	; 0x124
9001665e:	f8cd 9000 	str.w	r9, [sp]
90016662:	a819      	add	r0, sp, #100	; 0x64
90016664:	f003 feec 	bl	9001a440 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90016668:	4622      	mov	r2, r4
9001666a:	4653      	mov	r3, sl
9001666c:	a949      	add	r1, sp, #292	; 0x124
9001666e:	f8cd 8000 	str.w	r8, [sp]
90016672:	a829      	add	r0, sp, #164	; 0xa4
90016674:	f003 fee4 	bl	9001a440 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90016678:	4643      	mov	r3, r8
9001667a:	4622      	mov	r2, r4
9001667c:	a949      	add	r1, sp, #292	; 0x124
9001667e:	f8cd 9000 	str.w	r9, [sp]
90016682:	a839      	add	r0, sp, #228	; 0xe4
90016684:	f003 fedc 	bl	9001a440 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90016688:	42af      	cmp	r7, r5
9001668a:	af12      	add	r7, sp, #72	; 0x48
9001668c:	bfb7      	itett	lt
9001668e:	2300      	movlt	r3, #0
90016690:	2301      	movge	r3, #1
90016692:	ad29      	addlt	r5, sp, #164	; 0xa4
90016694:	ac19      	addlt	r4, sp, #100	; 0x64
90016696:	bfb1      	iteee	lt
90016698:	930e      	strlt	r3, [sp, #56]	; 0x38
9001669a:	ad19      	addge	r5, sp, #100	; 0x64
9001669c:	930e      	strge	r3, [sp, #56]	; 0x38
9001669e:	ac29      	addge	r4, sp, #164	; 0xa4
900166a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
900166a2:	e893 0003 	ldmia.w	r3, {r0, r1}
900166a6:	e887 0003 	stmia.w	r7, {r0, r1}
900166aa:	b928      	cbnz	r0, 900166b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
900166ac:	4b80      	ldr	r3, [pc, #512]	; (900168b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
900166ae:	6818      	ldr	r0, [r3, #0]
900166b0:	6803      	ldr	r3, [r0, #0]
900166b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900166b4:	4798      	blx	r3
900166b6:	6038      	str	r0, [r7, #0]
900166b8:	9b64      	ldr	r3, [sp, #400]	; 0x190
900166ba:	f8bb 0006 	ldrh.w	r0, [fp, #6]
900166be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
900166c2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
900166c4:	930c      	str	r3, [sp, #48]	; 0x30
900166c6:	990c      	ldr	r1, [sp, #48]	; 0x30
900166c8:	6963      	ldr	r3, [r4, #20]
900166ca:	440b      	add	r3, r1
900166cc:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
900166d0:	4408      	add	r0, r1
900166d2:	b200      	sxth	r0, r0
900166d4:	4283      	cmp	r3, r0
900166d6:	900d      	str	r0, [sp, #52]	; 0x34
900166d8:	f280 80dd 	bge.w	90016896 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
900166dc:	428b      	cmp	r3, r1
900166de:	da08      	bge.n	900166f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
900166e0:	2a00      	cmp	r2, #0
900166e2:	dd06      	ble.n	900166f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
900166e4:	1acb      	subs	r3, r1, r3
900166e6:	429a      	cmp	r2, r3
900166e8:	f2c0 80e4 	blt.w	900168b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
900166ec:	2b00      	cmp	r3, #0
900166ee:	f300 80e2 	bgt.w	900168b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
900166f2:	6967      	ldr	r7, [r4, #20]
900166f4:	f10d 0850 	add.w	r8, sp, #80	; 0x50
900166f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900166fa:	443b      	add	r3, r7
900166fc:	461f      	mov	r7, r3
900166fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90016700:	1bdf      	subs	r7, r3, r7
90016702:	4297      	cmp	r7, r2
90016704:	bfa8      	it	ge
90016706:	4617      	movge	r7, r2
90016708:	2f00      	cmp	r7, #0
9001670a:	f340 8166 	ble.w	900169da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
9001670e:	9b64      	ldr	r3, [sp, #400]	; 0x190
90016710:	6829      	ldr	r1, [r5, #0]
90016712:	f9b3 2000 	ldrsh.w	r2, [r3]
90016716:	f9bb 3000 	ldrsh.w	r3, [fp]
9001671a:	4411      	add	r1, r2
9001671c:	6820      	ldr	r0, [r4, #0]
9001671e:	4299      	cmp	r1, r3
90016720:	dd1a      	ble.n	90016758 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
90016722:	f8bb 1004 	ldrh.w	r1, [fp, #4]
90016726:	4402      	add	r2, r0
90016728:	440b      	add	r3, r1
9001672a:	b21b      	sxth	r3, r3
9001672c:	429a      	cmp	r2, r3
9001672e:	dc13      	bgt.n	90016758 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
90016730:	9a10      	ldr	r2, [sp, #64]	; 0x40
90016732:	a912      	add	r1, sp, #72	; 0x48
90016734:	9b09      	ldr	r3, [sp, #36]	; 0x24
90016736:	9809      	ldr	r0, [sp, #36]	; 0x24
90016738:	681b      	ldr	r3, [r3, #0]
9001673a:	9206      	str	r2, [sp, #24]
9001673c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001673e:	9500      	str	r5, [sp, #0]
90016740:	9205      	str	r2, [sp, #20]
90016742:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90016744:	e9cd b203 	strd	fp, r2, [sp, #12]
90016748:	9a64      	ldr	r2, [sp, #400]	; 0x190
9001674a:	e9cd 8201 	strd	r8, r2, [sp, #4]
9001674e:	aa49      	add	r2, sp, #292	; 0x124
90016750:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
90016754:	4623      	mov	r3, r4
90016756:	47c8      	blx	r9
90016758:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
9001675c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
90016760:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
90016764:	ee37 7a27 	vadd.f32	s14, s14, s15
90016768:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
9001676c:	68a1      	ldr	r1, [r4, #8]
9001676e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90016772:	ed94 6a08 	vldr	s12, [r4, #32]
90016776:	edd4 6a07 	vldr	s13, [r4, #28]
9001677a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
9001677e:	ee76 6a86 	vadd.f32	s13, s13, s12
90016782:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90016786:	e9d4 2300 	ldrd	r2, r3, [r4]
9001678a:	edc4 6a07 	vstr	s13, [r4, #28]
9001678e:	441a      	add	r2, r3
90016790:	6963      	ldr	r3, [r4, #20]
90016792:	3301      	adds	r3, #1
90016794:	6022      	str	r2, [r4, #0]
90016796:	6163      	str	r3, [r4, #20]
90016798:	69a3      	ldr	r3, [r4, #24]
9001679a:	3b01      	subs	r3, #1
9001679c:	61a3      	str	r3, [r4, #24]
9001679e:	6923      	ldr	r3, [r4, #16]
900167a0:	440b      	add	r3, r1
900167a2:	68e1      	ldr	r1, [r4, #12]
900167a4:	428b      	cmp	r3, r1
900167a6:	6123      	str	r3, [r4, #16]
900167a8:	db15      	blt.n	900167d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
900167aa:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
900167ae:	3201      	adds	r2, #1
900167b0:	1a5b      	subs	r3, r3, r1
900167b2:	ee76 6a26 	vadd.f32	s13, s12, s13
900167b6:	6022      	str	r2, [r4, #0]
900167b8:	6123      	str	r3, [r4, #16]
900167ba:	edc4 6a07 	vstr	s13, [r4, #28]
900167be:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
900167c2:	ee36 7a87 	vadd.f32	s14, s13, s14
900167c6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
900167ca:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
900167ce:	ee77 7a27 	vadd.f32	s15, s14, s15
900167d2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
900167d6:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
900167da:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
900167de:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
900167e2:	ee37 7a27 	vadd.f32	s14, s14, s15
900167e6:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
900167ea:	68a9      	ldr	r1, [r5, #8]
900167ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
900167f0:	ed95 6a08 	vldr	s12, [r5, #32]
900167f4:	edd5 6a07 	vldr	s13, [r5, #28]
900167f8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
900167fc:	ee76 6a86 	vadd.f32	s13, s13, s12
90016800:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90016804:	e9d5 2300 	ldrd	r2, r3, [r5]
90016808:	edc5 6a07 	vstr	s13, [r5, #28]
9001680c:	441a      	add	r2, r3
9001680e:	696b      	ldr	r3, [r5, #20]
90016810:	3301      	adds	r3, #1
90016812:	602a      	str	r2, [r5, #0]
90016814:	616b      	str	r3, [r5, #20]
90016816:	69ab      	ldr	r3, [r5, #24]
90016818:	3b01      	subs	r3, #1
9001681a:	61ab      	str	r3, [r5, #24]
9001681c:	692b      	ldr	r3, [r5, #16]
9001681e:	440b      	add	r3, r1
90016820:	68e9      	ldr	r1, [r5, #12]
90016822:	428b      	cmp	r3, r1
90016824:	612b      	str	r3, [r5, #16]
90016826:	db15      	blt.n	90016854 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
90016828:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
9001682c:	3201      	adds	r2, #1
9001682e:	1a5b      	subs	r3, r3, r1
90016830:	ee76 6a26 	vadd.f32	s13, s12, s13
90016834:	602a      	str	r2, [r5, #0]
90016836:	612b      	str	r3, [r5, #16]
90016838:	edc5 6a07 	vstr	s13, [r5, #28]
9001683c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
90016840:	ee36 7a87 	vadd.f32	s14, s13, s14
90016844:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90016848:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
9001684c:	ee77 7a27 	vadd.f32	s15, s14, s15
90016850:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90016854:	3f01      	subs	r7, #1
90016856:	e757      	b.n	90016708 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
90016858:	4299      	cmp	r1, r3
9001685a:	dc13      	bgt.n	90016884 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
9001685c:	429a      	cmp	r2, r3
9001685e:	da14      	bge.n	9001688a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
90016860:	2502      	movs	r5, #2
90016862:	2703      	movs	r7, #3
90016864:	f04f 0800 	mov.w	r8, #0
90016868:	46a9      	mov	r9, r5
9001686a:	f04f 0a01 	mov.w	sl, #1
9001686e:	e6ef      	b.n	90016650 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
90016870:	2501      	movs	r5, #1
90016872:	2700      	movs	r7, #0
90016874:	46a9      	mov	r9, r5
90016876:	46b8      	mov	r8, r7
90016878:	f04f 0a02 	mov.w	sl, #2
9001687c:	e6e8      	b.n	90016650 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
9001687e:	2501      	movs	r5, #1
90016880:	2702      	movs	r7, #2
90016882:	e6e1      	b.n	90016648 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
90016884:	2500      	movs	r5, #0
90016886:	2701      	movs	r7, #1
90016888:	e7f4      	b.n	90016874 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
9001688a:	2702      	movs	r7, #2
9001688c:	2503      	movs	r5, #3
9001688e:	f04f 0900 	mov.w	r9, #0
90016892:	46b8      	mov	r8, r7
90016894:	e7e9      	b.n	9001686a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
90016896:	4613      	mov	r3, r2
90016898:	e728      	b.n	900166ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
9001689a:	bf00      	nop
9001689c:	2402818c 	.word	0x2402818c
900168a0:	fffd8f01 	.word	0xfffd8f01
900168a4:	00027100 	.word	0x00027100
900168a8:	0004e1ff 	.word	0x0004e1ff
900168ac:	0004e1fe 	.word	0x0004e1fe
900168b0:	24028194 	.word	0x24028194
900168b4:	4613      	mov	r3, r2
900168b6:	992b      	ldr	r1, [sp, #172]	; 0xac
900168b8:	469e      	mov	lr, r3
900168ba:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
900168bc:	469c      	mov	ip, r3
900168be:	9111      	str	r1, [sp, #68]	; 0x44
900168c0:	f04f 0900 	mov.w	r9, #0
900168c4:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
900168c8:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
900168cc:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
900168d0:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
900168d4:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
900168d8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
900168dc:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
900168e0:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
900168e4:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
900168e8:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
900168ec:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
900168f0:	f1bc 0f00 	cmp.w	ip, #0
900168f4:	d147      	bne.n	90016986 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
900168f6:	eb03 0c07 	add.w	ip, r3, r7
900168fa:	1ad7      	subs	r7, r2, r3
900168fc:	f1b9 0f00 	cmp.w	r9, #0
90016900:	d009      	beq.n	90016916 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
90016902:	9029      	str	r0, [sp, #164]	; 0xa4
90016904:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
90016908:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
9001690c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
90016910:	912d      	str	r1, [sp, #180]	; 0xb4
90016912:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
90016916:	991b      	ldr	r1, [sp, #108]	; 0x6c
90016918:	f04f 0800 	mov.w	r8, #0
9001691c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
90016920:	9111      	str	r1, [sp, #68]	; 0x44
90016922:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
90016926:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
9001692a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
9001692e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
90016932:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
90016936:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
9001693a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
9001693e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
90016942:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
90016946:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
9001694a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
9001694e:	f1be 0f00 	cmp.w	lr, #0
90016952:	d031      	beq.n	900169b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
90016954:	9e11      	ldr	r6, [sp, #68]	; 0x44
90016956:	4450      	add	r0, sl
90016958:	ee76 6aa4 	vadd.f32	s13, s13, s9
9001695c:	4431      	add	r1, r6
9001695e:	ee37 7a04 	vadd.f32	s14, s14, s8
90016962:	ee77 7aa3 	vadd.f32	s15, s15, s7
90016966:	4549      	cmp	r1, r9
90016968:	db08      	blt.n	9001697c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
9001696a:	ee77 7a85 	vadd.f32	s15, s15, s10
9001696e:	3001      	adds	r0, #1
90016970:	ee76 6aa5 	vadd.f32	s13, s13, s11
90016974:	eba1 0109 	sub.w	r1, r1, r9
90016978:	ee37 7a06 	vadd.f32	s14, s14, s12
9001697c:	f10e 3eff 	add.w	lr, lr, #4294967295
90016980:	f04f 0801 	mov.w	r8, #1
90016984:	e7e3      	b.n	9001694e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
90016986:	9e11      	ldr	r6, [sp, #68]	; 0x44
90016988:	4450      	add	r0, sl
9001698a:	ee37 7a24 	vadd.f32	s14, s14, s9
9001698e:	4431      	add	r1, r6
90016990:	ee77 7a84 	vadd.f32	s15, s15, s8
90016994:	ee76 6aa3 	vadd.f32	s13, s13, s7
90016998:	4541      	cmp	r1, r8
9001699a:	db08      	blt.n	900169ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
9001699c:	ee76 6a85 	vadd.f32	s13, s13, s10
900169a0:	3001      	adds	r0, #1
900169a2:	ee37 7a25 	vadd.f32	s14, s14, s11
900169a6:	eba1 0108 	sub.w	r1, r1, r8
900169aa:	ee77 7a86 	vadd.f32	s15, s15, s12
900169ae:	f10c 3cff 	add.w	ip, ip, #4294967295
900169b2:	f04f 0901 	mov.w	r9, #1
900169b6:	e79b      	b.n	900168f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
900169b8:	449c      	add	ip, r3
900169ba:	1aff      	subs	r7, r7, r3
900169bc:	f1b8 0f00 	cmp.w	r8, #0
900169c0:	d009      	beq.n	900169d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
900169c2:	9019      	str	r0, [sp, #100]	; 0x64
900169c4:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
900169c8:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
900169cc:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
900169d0:	911d      	str	r1, [sp, #116]	; 0x74
900169d2:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
900169d6:	1ad2      	subs	r2, r2, r3
900169d8:	e68b      	b.n	900166f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
900169da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900169dc:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
900169de:	2b00      	cmp	r3, #0
900169e0:	f000 80d1 	beq.w	90016b86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
900169e4:	ad19      	add	r5, sp, #100	; 0x64
900169e6:	ac39      	add	r4, sp, #228	; 0xe4
900169e8:	9b64      	ldr	r3, [sp, #400]	; 0x190
900169ea:	f8bb 0006 	ldrh.w	r0, [fp, #6]
900169ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
900169f2:	930c      	str	r3, [sp, #48]	; 0x30
900169f4:	990c      	ldr	r1, [sp, #48]	; 0x30
900169f6:	6963      	ldr	r3, [r4, #20]
900169f8:	440b      	add	r3, r1
900169fa:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
900169fe:	4408      	add	r0, r1
90016a00:	b200      	sxth	r0, r0
90016a02:	4283      	cmp	r3, r0
90016a04:	900d      	str	r0, [sp, #52]	; 0x34
90016a06:	f280 80c1 	bge.w	90016b8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
90016a0a:	428b      	cmp	r3, r1
90016a0c:	da08      	bge.n	90016a20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90016a0e:	2a00      	cmp	r2, #0
90016a10:	dd06      	ble.n	90016a20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90016a12:	1acb      	subs	r3, r1, r3
90016a14:	429a      	cmp	r2, r3
90016a16:	f2c0 80bb 	blt.w	90016b90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
90016a1a:	2b00      	cmp	r3, #0
90016a1c:	f300 80b9 	bgt.w	90016b92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
90016a20:	6967      	ldr	r7, [r4, #20]
90016a22:	f10d 0850 	add.w	r8, sp, #80	; 0x50
90016a26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90016a28:	443b      	add	r3, r7
90016a2a:	461f      	mov	r7, r3
90016a2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90016a2e:	1bdf      	subs	r7, r3, r7
90016a30:	4297      	cmp	r7, r2
90016a32:	bfa8      	it	ge
90016a34:	4617      	movge	r7, r2
90016a36:	2f00      	cmp	r7, #0
90016a38:	f340 813c 	ble.w	90016cb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
90016a3c:	9b64      	ldr	r3, [sp, #400]	; 0x190
90016a3e:	6829      	ldr	r1, [r5, #0]
90016a40:	f9b3 2000 	ldrsh.w	r2, [r3]
90016a44:	f9bb 3000 	ldrsh.w	r3, [fp]
90016a48:	4411      	add	r1, r2
90016a4a:	6820      	ldr	r0, [r4, #0]
90016a4c:	4299      	cmp	r1, r3
90016a4e:	dd1a      	ble.n	90016a86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
90016a50:	f8bb 1004 	ldrh.w	r1, [fp, #4]
90016a54:	4402      	add	r2, r0
90016a56:	440b      	add	r3, r1
90016a58:	b21b      	sxth	r3, r3
90016a5a:	429a      	cmp	r2, r3
90016a5c:	dc13      	bgt.n	90016a86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
90016a5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
90016a60:	a912      	add	r1, sp, #72	; 0x48
90016a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
90016a64:	9809      	ldr	r0, [sp, #36]	; 0x24
90016a66:	681b      	ldr	r3, [r3, #0]
90016a68:	9206      	str	r2, [sp, #24]
90016a6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90016a6c:	9500      	str	r5, [sp, #0]
90016a6e:	9205      	str	r2, [sp, #20]
90016a70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90016a72:	e9cd b203 	strd	fp, r2, [sp, #12]
90016a76:	9a64      	ldr	r2, [sp, #400]	; 0x190
90016a78:	e9cd 8201 	strd	r8, r2, [sp, #4]
90016a7c:	aa49      	add	r2, sp, #292	; 0x124
90016a7e:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
90016a82:	4623      	mov	r3, r4
90016a84:	47c8      	blx	r9
90016a86:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
90016a8a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
90016a8e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
90016a92:	ee37 7a27 	vadd.f32	s14, s14, s15
90016a96:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
90016a9a:	68a1      	ldr	r1, [r4, #8]
90016a9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
90016aa0:	ed94 6a08 	vldr	s12, [r4, #32]
90016aa4:	edd4 6a07 	vldr	s13, [r4, #28]
90016aa8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90016aac:	ee76 6a86 	vadd.f32	s13, s13, s12
90016ab0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90016ab4:	e9d4 2300 	ldrd	r2, r3, [r4]
90016ab8:	edc4 6a07 	vstr	s13, [r4, #28]
90016abc:	441a      	add	r2, r3
90016abe:	6963      	ldr	r3, [r4, #20]
90016ac0:	3301      	adds	r3, #1
90016ac2:	6022      	str	r2, [r4, #0]
90016ac4:	6163      	str	r3, [r4, #20]
90016ac6:	69a3      	ldr	r3, [r4, #24]
90016ac8:	3b01      	subs	r3, #1
90016aca:	61a3      	str	r3, [r4, #24]
90016acc:	6923      	ldr	r3, [r4, #16]
90016ace:	440b      	add	r3, r1
90016ad0:	68e1      	ldr	r1, [r4, #12]
90016ad2:	428b      	cmp	r3, r1
90016ad4:	6123      	str	r3, [r4, #16]
90016ad6:	db15      	blt.n	90016b04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
90016ad8:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
90016adc:	3201      	adds	r2, #1
90016ade:	1a5b      	subs	r3, r3, r1
90016ae0:	ee76 6a26 	vadd.f32	s13, s12, s13
90016ae4:	6022      	str	r2, [r4, #0]
90016ae6:	6123      	str	r3, [r4, #16]
90016ae8:	edc4 6a07 	vstr	s13, [r4, #28]
90016aec:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
90016af0:	ee36 7a87 	vadd.f32	s14, s13, s14
90016af4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90016af8:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
90016afc:	ee77 7a27 	vadd.f32	s15, s14, s15
90016b00:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90016b04:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
90016b08:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
90016b0c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
90016b10:	ee37 7a27 	vadd.f32	s14, s14, s15
90016b14:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
90016b18:	68a9      	ldr	r1, [r5, #8]
90016b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
90016b1e:	ed95 6a08 	vldr	s12, [r5, #32]
90016b22:	edd5 6a07 	vldr	s13, [r5, #28]
90016b26:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90016b2a:	ee76 6a86 	vadd.f32	s13, s13, s12
90016b2e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90016b32:	e9d5 2300 	ldrd	r2, r3, [r5]
90016b36:	edc5 6a07 	vstr	s13, [r5, #28]
90016b3a:	441a      	add	r2, r3
90016b3c:	696b      	ldr	r3, [r5, #20]
90016b3e:	3301      	adds	r3, #1
90016b40:	602a      	str	r2, [r5, #0]
90016b42:	616b      	str	r3, [r5, #20]
90016b44:	69ab      	ldr	r3, [r5, #24]
90016b46:	3b01      	subs	r3, #1
90016b48:	61ab      	str	r3, [r5, #24]
90016b4a:	692b      	ldr	r3, [r5, #16]
90016b4c:	440b      	add	r3, r1
90016b4e:	68e9      	ldr	r1, [r5, #12]
90016b50:	428b      	cmp	r3, r1
90016b52:	612b      	str	r3, [r5, #16]
90016b54:	db15      	blt.n	90016b82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
90016b56:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
90016b5a:	3201      	adds	r2, #1
90016b5c:	1a5b      	subs	r3, r3, r1
90016b5e:	ee76 6a26 	vadd.f32	s13, s12, s13
90016b62:	602a      	str	r2, [r5, #0]
90016b64:	612b      	str	r3, [r5, #16]
90016b66:	edc5 6a07 	vstr	s13, [r5, #28]
90016b6a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
90016b6e:	ee36 7a87 	vadd.f32	s14, s13, s14
90016b72:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90016b76:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
90016b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
90016b7e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90016b82:	3f01      	subs	r7, #1
90016b84:	e757      	b.n	90016a36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
90016b86:	ad39      	add	r5, sp, #228	; 0xe4
90016b88:	ac19      	add	r4, sp, #100	; 0x64
90016b8a:	e72d      	b.n	900169e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
90016b8c:	4613      	mov	r3, r2
90016b8e:	e744      	b.n	90016a1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
90016b90:	4613      	mov	r3, r2
90016b92:	9e3b      	ldr	r6, [sp, #236]	; 0xec
90016b94:	469e      	mov	lr, r3
90016b96:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
90016b9a:	461f      	mov	r7, r3
90016b9c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
90016ba0:	f04f 0900 	mov.w	r9, #0
90016ba4:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
90016ba8:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
90016bac:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
90016bb0:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
90016bb4:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
90016bb8:	993d      	ldr	r1, [sp, #244]	; 0xf4
90016bba:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
90016bbe:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
90016bc2:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
90016bc6:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
90016bca:	960e      	str	r6, [sp, #56]	; 0x38
90016bcc:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
90016bd0:	2f00      	cmp	r7, #0
90016bd2:	d146      	bne.n	90016c62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
90016bd4:	449c      	add	ip, r3
90016bd6:	1ad7      	subs	r7, r2, r3
90016bd8:	f1b9 0f00 	cmp.w	r9, #0
90016bdc:	d009      	beq.n	90016bf2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
90016bde:	9039      	str	r0, [sp, #228]	; 0xe4
90016be0:	913d      	str	r1, [sp, #244]	; 0xf4
90016be2:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
90016be6:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
90016bea:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
90016bee:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
90016bf2:	991b      	ldr	r1, [sp, #108]	; 0x6c
90016bf4:	f04f 0800 	mov.w	r8, #0
90016bf8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
90016bfc:	910e      	str	r1, [sp, #56]	; 0x38
90016bfe:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
90016c02:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
90016c06:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
90016c0a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
90016c0e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
90016c12:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
90016c16:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
90016c1a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
90016c1e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
90016c22:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
90016c26:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
90016c2a:	f1be 0f00 	cmp.w	lr, #0
90016c2e:	d030      	beq.n	90016c92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
90016c30:	9e0e      	ldr	r6, [sp, #56]	; 0x38
90016c32:	4450      	add	r0, sl
90016c34:	ee76 6aa4 	vadd.f32	s13, s13, s9
90016c38:	4431      	add	r1, r6
90016c3a:	ee37 7a04 	vadd.f32	s14, s14, s8
90016c3e:	ee77 7aa3 	vadd.f32	s15, s15, s7
90016c42:	4549      	cmp	r1, r9
90016c44:	db08      	blt.n	90016c58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
90016c46:	ee77 7a85 	vadd.f32	s15, s15, s10
90016c4a:	3001      	adds	r0, #1
90016c4c:	ee76 6aa5 	vadd.f32	s13, s13, s11
90016c50:	eba1 0109 	sub.w	r1, r1, r9
90016c54:	ee37 7a06 	vadd.f32	s14, s14, s12
90016c58:	f10e 3eff 	add.w	lr, lr, #4294967295
90016c5c:	f04f 0801 	mov.w	r8, #1
90016c60:	e7e3      	b.n	90016c2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
90016c62:	9e0e      	ldr	r6, [sp, #56]	; 0x38
90016c64:	4450      	add	r0, sl
90016c66:	ee37 7a24 	vadd.f32	s14, s14, s9
90016c6a:	4431      	add	r1, r6
90016c6c:	ee77 7a84 	vadd.f32	s15, s15, s8
90016c70:	ee76 6aa3 	vadd.f32	s13, s13, s7
90016c74:	4541      	cmp	r1, r8
90016c76:	db08      	blt.n	90016c8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
90016c78:	ee76 6a85 	vadd.f32	s13, s13, s10
90016c7c:	3001      	adds	r0, #1
90016c7e:	ee37 7a25 	vadd.f32	s14, s14, s11
90016c82:	eba1 0108 	sub.w	r1, r1, r8
90016c86:	ee77 7a86 	vadd.f32	s15, s15, s12
90016c8a:	3f01      	subs	r7, #1
90016c8c:	f04f 0901 	mov.w	r9, #1
90016c90:	e79e      	b.n	90016bd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
90016c92:	449c      	add	ip, r3
90016c94:	1aff      	subs	r7, r7, r3
90016c96:	f1b8 0f00 	cmp.w	r8, #0
90016c9a:	d009      	beq.n	90016cb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
90016c9c:	9019      	str	r0, [sp, #100]	; 0x64
90016c9e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
90016ca2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
90016ca6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
90016caa:	911d      	str	r1, [sp, #116]	; 0x74
90016cac:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
90016cb0:	1ad2      	subs	r2, r2, r3
90016cb2:	e6b5      	b.n	90016a20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90016cb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90016cb6:	681b      	ldr	r3, [r3, #0]
90016cb8:	b923      	cbnz	r3, 90016cc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016cba:	4b04      	ldr	r3, [pc, #16]	; (90016ccc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
90016cbc:	6818      	ldr	r0, [r3, #0]
90016cbe:	6803      	ldr	r3, [r0, #0]
90016cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90016cc2:	4798      	blx	r3
90016cc4:	b05b      	add	sp, #364	; 0x16c
90016cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90016cca:	bf00      	nop
90016ccc:	24028194 	.word	0x24028194

90016cd0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
90016cd0:	b570      	push	{r4, r5, r6, lr}
90016cd2:	4604      	mov	r4, r0
90016cd4:	2500      	movs	r5, #0
90016cd6:	9805      	ldr	r0, [sp, #20]
90016cd8:	f89d 601c 	ldrb.w	r6, [sp, #28]
90016cdc:	6061      	str	r1, [r4, #4]
90016cde:	8263      	strh	r3, [r4, #18]
90016ce0:	f89d 1010 	ldrb.w	r1, [sp, #16]
90016ce4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
90016ce8:	8025      	strh	r5, [r4, #0]
90016cea:	7221      	strb	r1, [r4, #8]
90016cec:	7266      	strb	r6, [r4, #9]
90016cee:	60e0      	str	r0, [r4, #12]
90016cf0:	8222      	strh	r2, [r4, #16]
90016cf2:	82a3      	strh	r3, [r4, #20]
90016cf4:	82e5      	strh	r5, [r4, #22]
90016cf6:	8325      	strh	r5, [r4, #24]
90016cf8:	8365      	strh	r5, [r4, #26]
90016cfa:	83a5      	strh	r5, [r4, #28]
90016cfc:	83e5      	strh	r5, [r4, #30]
90016cfe:	8425      	strh	r5, [r4, #32]
90016d00:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
90016d04:	b32e      	cbz	r6, 90016d52 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90016d06:	6803      	ldr	r3, [r0, #0]
90016d08:	695b      	ldr	r3, [r3, #20]
90016d0a:	4798      	blx	r3
90016d0c:	4606      	mov	r6, r0
90016d0e:	b300      	cbz	r0, 90016d52 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90016d10:	68e0      	ldr	r0, [r4, #12]
90016d12:	4631      	mov	r1, r6
90016d14:	6803      	ldr	r3, [r0, #0]
90016d16:	68db      	ldr	r3, [r3, #12]
90016d18:	4798      	blx	r3
90016d1a:	4605      	mov	r5, r0
90016d1c:	b1c8      	cbz	r0, 90016d52 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90016d1e:	7b43      	ldrb	r3, [r0, #13]
90016d20:	7a82      	ldrb	r2, [r0, #10]
90016d22:	005b      	lsls	r3, r3, #1
90016d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
90016d28:	4313      	orrs	r3, r2
90016d2a:	8423      	strh	r3, [r4, #32]
90016d2c:	7a63      	ldrb	r3, [r4, #9]
90016d2e:	2b06      	cmp	r3, #6
90016d30:	d10f      	bne.n	90016d52 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90016d32:	68e0      	ldr	r0, [r4, #12]
90016d34:	462a      	mov	r2, r5
90016d36:	4631      	mov	r1, r6
90016d38:	6803      	ldr	r3, [r0, #0]
90016d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90016d3c:	4798      	blx	r3
90016d3e:	7b6b      	ldrb	r3, [r5, #13]
90016d40:	005b      	lsls	r3, r3, #1
90016d42:	f403 7280 	and.w	r2, r3, #256	; 0x100
90016d46:	7aab      	ldrb	r3, [r5, #10]
90016d48:	4313      	orrs	r3, r2
90016d4a:	4418      	add	r0, r3
90016d4c:	8c23      	ldrh	r3, [r4, #32]
90016d4e:	4418      	add	r0, r3
90016d50:	8420      	strh	r0, [r4, #32]
90016d52:	4620      	mov	r0, r4
90016d54:	bd70      	pop	{r4, r5, r6, pc}

90016d56 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
90016d56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016d5a:	2400      	movs	r4, #0
90016d5c:	b085      	sub	sp, #20
90016d5e:	4681      	mov	r9, r0
90016d60:	4688      	mov	r8, r1
90016d62:	4692      	mov	sl, r2
90016d64:	469b      	mov	fp, r3
90016d66:	4627      	mov	r7, r4
90016d68:	4625      	mov	r5, r4
90016d6a:	4626      	mov	r6, r4
90016d6c:	4554      	cmp	r4, sl
90016d6e:	da2a      	bge.n	90016dc6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
90016d70:	2300      	movs	r3, #0
90016d72:	9303      	str	r3, [sp, #12]
90016d74:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90016d78:	429d      	cmp	r5, r3
90016d7a:	d004      	beq.n	90016d86 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
90016d7c:	f242 030b 	movw	r3, #8203	; 0x200b
90016d80:	429d      	cmp	r5, r3
90016d82:	bf18      	it	ne
90016d84:	462f      	movne	r7, r5
90016d86:	ab03      	add	r3, sp, #12
90016d88:	4642      	mov	r2, r8
90016d8a:	4659      	mov	r1, fp
90016d8c:	4648      	mov	r0, r9
90016d8e:	f003 f83d 	bl	90019e0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90016d92:	4605      	mov	r5, r0
90016d94:	b1b8      	cbz	r0, 90016dc6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
90016d96:	280a      	cmp	r0, #10
90016d98:	d015      	beq.n	90016dc6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
90016d9a:	9a03      	ldr	r2, [sp, #12]
90016d9c:	b18a      	cbz	r2, 90016dc2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
90016d9e:	7b50      	ldrb	r0, [r2, #13]
90016da0:	4639      	mov	r1, r7
90016da2:	7a93      	ldrb	r3, [r2, #10]
90016da4:	0040      	lsls	r0, r0, #1
90016da6:	8895      	ldrh	r5, [r2, #4]
90016da8:	f400 7080 	and.w	r0, r0, #256	; 0x100
90016dac:	4303      	orrs	r3, r0
90016dae:	4640      	mov	r0, r8
90016db0:	9301      	str	r3, [sp, #4]
90016db2:	f8d8 3000 	ldr.w	r3, [r8]
90016db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90016db8:	4798      	blx	r3
90016dba:	9b01      	ldr	r3, [sp, #4]
90016dbc:	4418      	add	r0, r3
90016dbe:	4406      	add	r6, r0
90016dc0:	b2b6      	uxth	r6, r6
90016dc2:	3401      	adds	r4, #1
90016dc4:	e7d2      	b.n	90016d6c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
90016dc6:	4630      	mov	r0, r6
90016dc8:	b005      	add	sp, #20
90016dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90016dce <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
90016dce:	2a02      	cmp	r2, #2
90016dd0:	b530      	push	{r4, r5, lr}
90016dd2:	d011      	beq.n	90016df8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
90016dd4:	2a03      	cmp	r2, #3
90016dd6:	d01c      	beq.n	90016e12 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
90016dd8:	2a01      	cmp	r2, #1
90016dda:	d10c      	bne.n	90016df6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
90016ddc:	888b      	ldrh	r3, [r1, #4]
90016dde:	8801      	ldrh	r1, [r0, #0]
90016de0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
90016de4:	1a5b      	subs	r3, r3, r1
90016de6:	8844      	ldrh	r4, [r0, #2]
90016de8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
90016dec:	1a9b      	subs	r3, r3, r2
90016dee:	8004      	strh	r4, [r0, #0]
90016df0:	8081      	strh	r1, [r0, #4]
90016df2:	8043      	strh	r3, [r0, #2]
90016df4:	80c2      	strh	r2, [r0, #6]
90016df6:	bd30      	pop	{r4, r5, pc}
90016df8:	88cb      	ldrh	r3, [r1, #6]
90016dfa:	8842      	ldrh	r2, [r0, #2]
90016dfc:	1a9b      	subs	r3, r3, r2
90016dfe:	88c2      	ldrh	r2, [r0, #6]
90016e00:	1a9b      	subs	r3, r3, r2
90016e02:	888a      	ldrh	r2, [r1, #4]
90016e04:	8801      	ldrh	r1, [r0, #0]
90016e06:	8043      	strh	r3, [r0, #2]
90016e08:	1a52      	subs	r2, r2, r1
90016e0a:	8881      	ldrh	r1, [r0, #4]
90016e0c:	1a52      	subs	r2, r2, r1
90016e0e:	8002      	strh	r2, [r0, #0]
90016e10:	e7f1      	b.n	90016df6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
90016e12:	88cb      	ldrh	r3, [r1, #6]
90016e14:	8841      	ldrh	r1, [r0, #2]
90016e16:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
90016e1a:	1a5b      	subs	r3, r3, r1
90016e1c:	f9b0 5000 	ldrsh.w	r5, [r0]
90016e20:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
90016e24:	1a9b      	subs	r3, r3, r2
90016e26:	8045      	strh	r5, [r0, #2]
90016e28:	8082      	strh	r2, [r0, #4]
90016e2a:	8003      	strh	r3, [r0, #0]
90016e2c:	80c4      	strh	r4, [r0, #6]
90016e2e:	e7e2      	b.n	90016df6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

90016e30 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
90016e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016e34:	b09f      	sub	sp, #124	; 0x7c
90016e36:	9116      	str	r1, [sp, #88]	; 0x58
90016e38:	9317      	str	r3, [sp, #92]	; 0x5c
90016e3a:	9929      	ldr	r1, [sp, #164]	; 0xa4
90016e3c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90016e3e:	8809      	ldrh	r1, [r1, #0]
90016e40:	889b      	ldrh	r3, [r3, #4]
90016e42:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
90016e46:	440b      	add	r3, r1
90016e48:	9212      	str	r2, [sp, #72]	; 0x48
90016e4a:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
90016e4e:	b21b      	sxth	r3, r3
90016e50:	9011      	str	r0, [sp, #68]	; 0x44
90016e52:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
90016e56:	9310      	str	r3, [sp, #64]	; 0x40
90016e58:	f8d8 3000 	ldr.w	r3, [r8]
90016e5c:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
90016e60:	7b19      	ldrb	r1, [r3, #12]
90016e62:	7adb      	ldrb	r3, [r3, #11]
90016e64:	9114      	str	r1, [sp, #80]	; 0x50
90016e66:	9315      	str	r3, [sp, #84]	; 0x54
90016e68:	2a00      	cmp	r2, #0
90016e6a:	d06a      	beq.n	90016f42 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
90016e6c:	f898 3010 	ldrb.w	r3, [r8, #16]
90016e70:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
90016e72:	2b06      	cmp	r3, #6
90016e74:	bf14      	ite	ne
90016e76:	2301      	movne	r3, #1
90016e78:	2302      	moveq	r3, #2
90016e7a:	4413      	add	r3, r2
90016e7c:	f04f 0900 	mov.w	r9, #0
90016e80:	930f      	str	r3, [sp, #60]	; 0x3c
90016e82:	464c      	mov	r4, r9
90016e84:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
90016e88:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
90016e8c:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
90016e90:	4293      	cmp	r3, r2
90016e92:	f280 808f 	bge.w	90016fb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
90016e96:	2300      	movs	r3, #0
90016e98:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
90016e9c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
90016ea0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90016ea4:	429c      	cmp	r4, r3
90016ea6:	d006      	beq.n	90016eb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
90016ea8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90016eaa:	f242 020b 	movw	r2, #8203	; 0x200b
90016eae:	4294      	cmp	r4, r2
90016eb0:	bf18      	it	ne
90016eb2:	4623      	movne	r3, r4
90016eb4:	930d      	str	r3, [sp, #52]	; 0x34
90016eb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90016eb8:	992d      	ldr	r1, [sp, #180]	; 0xb4
90016eba:	f8d8 2000 	ldr.w	r2, [r8]
90016ebe:	428b      	cmp	r3, r1
90016ec0:	db41      	blt.n	90016f46 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
90016ec2:	6813      	ldr	r3, [r2, #0]
90016ec4:	4610      	mov	r0, r2
90016ec6:	695b      	ldr	r3, [r3, #20]
90016ec8:	4798      	blx	r3
90016eca:	4604      	mov	r4, r0
90016ecc:	f8d8 0000 	ldr.w	r0, [r8]
90016ed0:	aa1d      	add	r2, sp, #116	; 0x74
90016ed2:	4621      	mov	r1, r4
90016ed4:	6803      	ldr	r3, [r0, #0]
90016ed6:	689d      	ldr	r5, [r3, #8]
90016ed8:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
90016edc:	47a8      	blx	r5
90016ede:	901c      	str	r0, [sp, #112]	; 0x70
90016ee0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90016ee4:	429c      	cmp	r4, r3
90016ee6:	f000 80ec 	beq.w	900170c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90016eea:	f242 030b 	movw	r3, #8203	; 0x200b
90016eee:	429c      	cmp	r4, r3
90016ef0:	f000 80e7 	beq.w	900170c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90016ef4:	2c00      	cmp	r4, #0
90016ef6:	f000 80f9 	beq.w	900170ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
90016efa:	2c0a      	cmp	r4, #10
90016efc:	d060      	beq.n	90016fc0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
90016efe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
90016f00:	b36a      	cbz	r2, 90016f5e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
90016f02:	8894      	ldrh	r4, [r2, #4]
90016f04:	f1bb 0f00 	cmp.w	fp, #0
90016f08:	d03b      	beq.n	90016f82 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
90016f0a:	f892 900d 	ldrb.w	r9, [r2, #13]
90016f0e:	f1bb 0f01 	cmp.w	fp, #1
90016f12:	ea4f 0949 	mov.w	r9, r9, lsl #1
90016f16:	f409 7380 	and.w	r3, r9, #256	; 0x100
90016f1a:	f892 900a 	ldrb.w	r9, [r2, #10]
90016f1e:	ea49 0903 	orr.w	r9, r9, r3
90016f22:	d134      	bne.n	90016f8e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
90016f24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90016f26:	eba6 0609 	sub.w	r6, r6, r9
90016f2a:	2b00      	cmp	r3, #0
90016f2c:	d14f      	bne.n	90016fce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
90016f2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
90016f30:	eb09 0306 	add.w	r3, r9, r6
90016f34:	4413      	add	r3, r2
90016f36:	9a29      	ldr	r2, [sp, #164]	; 0xa4
90016f38:	f9b2 2000 	ldrsh.w	r2, [r2]
90016f3c:	4293      	cmp	r3, r2
90016f3e:	da51      	bge.n	90016fe4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
90016f40:	e038      	b.n	90016fb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
90016f42:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
90016f44:	e79a      	b.n	90016e7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
90016f46:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
90016f4a:	4659      	mov	r1, fp
90016f4c:	982c      	ldr	r0, [sp, #176]	; 0xb0
90016f4e:	9301      	str	r3, [sp, #4]
90016f50:	ab1d      	add	r3, sp, #116	; 0x74
90016f52:	9300      	str	r3, [sp, #0]
90016f54:	ab1c      	add	r3, sp, #112	; 0x70
90016f56:	f002 ffa2 	bl	90019e9e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
90016f5a:	4604      	mov	r4, r0
90016f5c:	e7c0      	b.n	90016ee0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
90016f5e:	f8d8 0000 	ldr.w	r0, [r8]
90016f62:	6803      	ldr	r3, [r0, #0]
90016f64:	691b      	ldr	r3, [r3, #16]
90016f66:	4798      	blx	r3
90016f68:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90016f6c:	4298      	cmp	r0, r3
90016f6e:	f000 80a8 	beq.w	900170c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90016f72:	f242 030b 	movw	r3, #8203	; 0x200b
90016f76:	4298      	cmp	r0, r3
90016f78:	f000 80a3 	beq.w	900170c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90016f7c:	f1bb 0f00 	cmp.w	fp, #0
90016f80:	d100      	bne.n	90016f84 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
90016f82:	444e      	add	r6, r9
90016f84:	9a1c      	ldr	r2, [sp, #112]	; 0x70
90016f86:	2a00      	cmp	r2, #0
90016f88:	d1bf      	bne.n	90016f0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
90016f8a:	4691      	mov	r9, r2
90016f8c:	e099      	b.n	900170c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90016f8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90016f90:	2b00      	cmp	r3, #0
90016f92:	f000 80ad 	beq.w	900170f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
90016f96:	f1bb 0f00 	cmp.w	fp, #0
90016f9a:	d118      	bne.n	90016fce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
90016f9c:	f8d8 0000 	ldr.w	r0, [r8]
90016fa0:	990d      	ldr	r1, [sp, #52]	; 0x34
90016fa2:	6803      	ldr	r3, [r0, #0]
90016fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90016fa6:	4798      	blx	r3
90016fa8:	4406      	add	r6, r0
90016faa:	9b15      	ldr	r3, [sp, #84]	; 0x54
90016fac:	9a10      	ldr	r2, [sp, #64]	; 0x40
90016fae:	1af3      	subs	r3, r6, r3
90016fb0:	4293      	cmp	r3, r2
90016fb2:	dd17      	ble.n	90016fe4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
90016fb4:	2c00      	cmp	r4, #0
90016fb6:	f000 8099 	beq.w	900170ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
90016fba:	2c0a      	cmp	r4, #10
90016fbc:	f040 8087 	bne.w	900170ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
90016fc0:	240a      	movs	r4, #10
90016fc2:	fab4 f084 	clz	r0, r4
90016fc6:	0940      	lsrs	r0, r0, #5
90016fc8:	b01f      	add	sp, #124	; 0x7c
90016fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90016fce:	f8d8 0000 	ldr.w	r0, [r8]
90016fd2:	990d      	ldr	r1, [sp, #52]	; 0x34
90016fd4:	6803      	ldr	r3, [r0, #0]
90016fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90016fd8:	4798      	blx	r3
90016fda:	f1bb 0f01 	cmp.w	fp, #1
90016fde:	eba6 0600 	sub.w	r6, r6, r0
90016fe2:	d0a4      	beq.n	90016f2e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
90016fe4:	981c      	ldr	r0, [sp, #112]	; 0x70
90016fe6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90016fe8:	f990 1009 	ldrsb.w	r1, [r0, #9]
90016fec:	f9b3 7000 	ldrsh.w	r7, [r3]
90016ff0:	7b43      	ldrb	r3, [r0, #13]
90016ff2:	4431      	add	r1, r6
90016ff4:	015b      	lsls	r3, r3, #5
90016ff6:	f403 7280 	and.w	r2, r3, #256	; 0x100
90016ffa:	7983      	ldrb	r3, [r0, #6]
90016ffc:	4313      	orrs	r3, r2
90016ffe:	440b      	add	r3, r1
90017000:	42bb      	cmp	r3, r7
90017002:	db5e      	blt.n	900170c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90017004:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017006:	4299      	cmp	r1, r3
90017008:	da5b      	bge.n	900170c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
9001700a:	f8d8 0000 	ldr.w	r0, [r8]
9001700e:	42b7      	cmp	r7, r6
90017010:	6803      	ldr	r3, [r0, #0]
90017012:	bfcc      	ite	gt
90017014:	1bbf      	subgt	r7, r7, r6
90017016:	2700      	movle	r7, #0
90017018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001701a:	bfc8      	it	gt
9001701c:	b2bf      	uxthgt	r7, r7
9001701e:	4798      	blx	r3
90017020:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90017022:	7b5a      	ldrb	r2, [r3, #13]
90017024:	00d1      	lsls	r1, r2, #3
90017026:	f401 7580 	and.w	r5, r1, #256	; 0x100
9001702a:	7a19      	ldrb	r1, [r3, #8]
9001702c:	4329      	orrs	r1, r5
9001702e:	0655      	lsls	r5, r2, #25
90017030:	9d17      	ldr	r5, [sp, #92]	; 0x5c
90017032:	bf48      	it	mi
90017034:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
90017038:	4405      	add	r5, r0
9001703a:	bf48      	it	mi
9001703c:	b209      	sxthmi	r1, r1
9001703e:	1a6d      	subs	r5, r5, r1
90017040:	9929      	ldr	r1, [sp, #164]	; 0xa4
90017042:	b2ad      	uxth	r5, r5
90017044:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
90017048:	fa0f fa85 	sxth.w	sl, r5
9001704c:	4551      	cmp	r1, sl
9001704e:	dd3c      	ble.n	900170ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
90017050:	0112      	lsls	r2, r2, #4
90017052:	79d8      	ldrb	r0, [r3, #7]
90017054:	f402 7280 	and.w	r2, r2, #256	; 0x100
90017058:	4302      	orrs	r2, r0
9001705a:	4492      	add	sl, r2
9001705c:	4551      	cmp	r1, sl
9001705e:	dc30      	bgt.n	900170c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90017060:	1b4d      	subs	r5, r1, r5
90017062:	468a      	mov	sl, r1
90017064:	b22d      	sxth	r5, r5
90017066:	9319      	str	r3, [sp, #100]	; 0x64
90017068:	b2ad      	uxth	r5, r5
9001706a:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001706c:	f8d8 0000 	ldr.w	r0, [r8]
90017070:	681a      	ldr	r2, [r3, #0]
90017072:	6801      	ldr	r1, [r0, #0]
90017074:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
90017076:	9a1d      	ldr	r2, [sp, #116]	; 0x74
90017078:	9313      	str	r3, [sp, #76]	; 0x4c
9001707a:	9218      	str	r2, [sp, #96]	; 0x60
9001707c:	6c09      	ldr	r1, [r1, #64]	; 0x40
9001707e:	4788      	blx	r1
90017080:	f898 1006 	ldrb.w	r1, [r8, #6]
90017084:	9b19      	ldr	r3, [sp, #100]	; 0x64
90017086:	910b      	str	r1, [sp, #44]	; 0x2c
90017088:	f898 100e 	ldrb.w	r1, [r8, #14]
9001708c:	9a18      	ldr	r2, [sp, #96]	; 0x60
9001708e:	910a      	str	r1, [sp, #40]	; 0x28
90017090:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
90017094:	9109      	str	r1, [sp, #36]	; 0x24
90017096:	f8d8 1008 	ldr.w	r1, [r8, #8]
9001709a:	9305      	str	r3, [sp, #20]
9001709c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001709e:	9206      	str	r2, [sp, #24]
900170a0:	9304      	str	r3, [sp, #16]
900170a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
900170a4:	f8cd a004 	str.w	sl, [sp, #4]
900170a8:	e9cd 7502 	strd	r7, r5, [sp, #8]
900170ac:	4437      	add	r7, r6
900170ae:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900170b0:	b23f      	sxth	r7, r7
900170b2:	e9cd 0107 	strd	r0, r1, [sp, #28]
900170b6:	9700      	str	r7, [sp, #0]
900170b8:	9916      	ldr	r1, [sp, #88]	; 0x58
900170ba:	681a      	ldr	r2, [r3, #0]
900170bc:	9811      	ldr	r0, [sp, #68]	; 0x44
900170be:	685b      	ldr	r3, [r3, #4]
900170c0:	47a8      	blx	r5
900170c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900170c4:	3301      	adds	r3, #1
900170c6:	930e      	str	r3, [sp, #56]	; 0x38
900170c8:	e6e0      	b.n	90016e8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
900170ca:	2500      	movs	r5, #0
900170cc:	e7cb      	b.n	90017066 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
900170ce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
900170d0:	3501      	adds	r5, #1
900170d2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
900170d4:	429d      	cmp	r5, r3
900170d6:	f6bf af74 	bge.w	90016fc2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
900170da:	4659      	mov	r1, fp
900170dc:	982c      	ldr	r0, [sp, #176]	; 0xb0
900170de:	f7f0 fd87 	bl	90007bf0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
900170e2:	4604      	mov	r4, r0
900170e4:	b110      	cbz	r0, 900170ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
900170e6:	280a      	cmp	r0, #10
900170e8:	d1f2      	bne.n	900170d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
900170ea:	e769      	b.n	90016fc0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
900170ec:	2400      	movs	r4, #0
900170ee:	e768      	b.n	90016fc2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
900170f0:	f1bb 0f00 	cmp.w	fp, #0
900170f4:	f43f af59 	beq.w	90016faa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
900170f8:	e774      	b.n	90016fe4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

900170fa <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
900170fa:	b530      	push	{r4, r5, lr}
900170fc:	8ac4      	ldrh	r4, [r0, #22]
900170fe:	8b45      	ldrh	r5, [r0, #26]
90017100:	8343      	strh	r3, [r0, #26]
90017102:	442c      	add	r4, r5
90017104:	1ae4      	subs	r4, r4, r3
90017106:	8b83      	ldrh	r3, [r0, #28]
90017108:	82c4      	strh	r4, [r0, #22]
9001710a:	8b04      	ldrh	r4, [r0, #24]
9001710c:	4422      	add	r2, r4
9001710e:	440c      	add	r4, r1
90017110:	1a59      	subs	r1, r3, r1
90017112:	83c2      	strh	r2, [r0, #30]
90017114:	8304      	strh	r4, [r0, #24]
90017116:	8381      	strh	r1, [r0, #28]
90017118:	bd30      	pop	{r4, r5, pc}

9001711a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
9001711a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001711e:	4604      	mov	r4, r0
90017120:	8a47      	ldrh	r7, [r0, #18]
90017122:	68c0      	ldr	r0, [r0, #12]
90017124:	b085      	sub	sp, #20
90017126:	6803      	ldr	r3, [r0, #0]
90017128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001712a:	4798      	blx	r3
9001712c:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
90017130:	7a63      	ldrb	r3, [r4, #9]
90017132:	eb06 0640 	add.w	r6, r6, r0, lsl #1
90017136:	3b01      	subs	r3, #1
90017138:	42b7      	cmp	r7, r6
9001713a:	bfac      	ite	ge
9001713c:	f04f 0900 	movge.w	r9, #0
90017140:	f04f 0901 	movlt.w	r9, #1
90017144:	2b05      	cmp	r3, #5
90017146:	d804      	bhi.n	90017152 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
90017148:	e8df f003 	tbb	[pc, r3]
9001714c:	470f0854 	.word	0x470f0854
90017150:	4c4c      	.short	0x4c4c
90017152:	2500      	movs	r5, #0
90017154:	46a9      	mov	r9, r5
90017156:	462e      	mov	r6, r5
90017158:	462f      	mov	r7, r5
9001715a:	e00e      	b.n	9001717a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
9001715c:	42b7      	cmp	r7, r6
9001715e:	f04f 0500 	mov.w	r5, #0
90017162:	bfb4      	ite	lt
90017164:	2600      	movlt	r6, #0
90017166:	2601      	movge	r6, #1
90017168:	e7f6      	b.n	90017158 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
9001716a:	42b7      	cmp	r7, r6
9001716c:	464d      	mov	r5, r9
9001716e:	f04f 0900 	mov.w	r9, #0
90017172:	bfb4      	ite	lt
90017174:	2600      	movlt	r6, #0
90017176:	2601      	movge	r6, #1
90017178:	464f      	mov	r7, r9
9001717a:	f04f 0800 	mov.w	r8, #0
9001717e:	f8a4 8016 	strh.w	r8, [r4, #22]
90017182:	f8a4 8018 	strh.w	r8, [r4, #24]
90017186:	f8cd 8004 	str.w	r8, [sp, #4]
9001718a:	2300      	movs	r3, #0
9001718c:	9303      	str	r3, [sp, #12]
9001718e:	8823      	ldrh	r3, [r4, #0]
90017190:	2b20      	cmp	r3, #32
90017192:	d033      	beq.n	900171fc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
90017194:	f242 010b 	movw	r1, #8203	; 0x200b
90017198:	1a5a      	subs	r2, r3, r1
9001719a:	f1d2 0a00 	rsbs	sl, r2, #0
9001719e:	eb4a 0a02 	adc.w	sl, sl, r2
900171a2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
900171a6:	4293      	cmp	r3, r2
900171a8:	d008      	beq.n	900171bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
900171aa:	428b      	cmp	r3, r1
900171ac:	9a01      	ldr	r2, [sp, #4]
900171ae:	bf0e      	itee	eq
900171b0:	f04f 0a01 	moveq.w	sl, #1
900171b4:	461a      	movne	r2, r3
900171b6:	f04f 0a00 	movne.w	sl, #0
900171ba:	9201      	str	r2, [sp, #4]
900171bc:	ab03      	add	r3, sp, #12
900171be:	68e2      	ldr	r2, [r4, #12]
900171c0:	7a21      	ldrb	r1, [r4, #8]
900171c2:	6860      	ldr	r0, [r4, #4]
900171c4:	f002 fe22 	bl	90019e0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
900171c8:	8020      	strh	r0, [r4, #0]
900171ca:	b9d8      	cbnz	r0, 90017204 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
900171cc:	8ba2      	ldrh	r2, [r4, #28]
900171ce:	2300      	movs	r3, #0
900171d0:	4611      	mov	r1, r2
900171d2:	4620      	mov	r0, r4
900171d4:	f7ff ff91 	bl	900170fa <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
900171d8:	e06e      	b.n	900172b8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
900171da:	2500      	movs	r5, #0
900171dc:	2701      	movs	r7, #1
900171de:	46a9      	mov	r9, r5
900171e0:	462e      	mov	r6, r5
900171e2:	e7ca      	b.n	9001717a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
900171e4:	42b7      	cmp	r7, r6
900171e6:	f04f 0500 	mov.w	r5, #0
900171ea:	bfb4      	ite	lt
900171ec:	2700      	movlt	r7, #0
900171ee:	2701      	movge	r7, #1
900171f0:	462e      	mov	r6, r5
900171f2:	e7c2      	b.n	9001717a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
900171f4:	2500      	movs	r5, #0
900171f6:	2601      	movs	r6, #1
900171f8:	46a9      	mov	r9, r5
900171fa:	e7ad      	b.n	90017158 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
900171fc:	9301      	str	r3, [sp, #4]
900171fe:	f04f 0a01 	mov.w	sl, #1
90017202:	e7db      	b.n	900171bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
90017204:	8b63      	ldrh	r3, [r4, #26]
90017206:	280a      	cmp	r0, #10
90017208:	f103 0301 	add.w	r3, r3, #1
9001720c:	8363      	strh	r3, [r4, #26]
9001720e:	d0dd      	beq.n	900171cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
90017210:	9a03      	ldr	r2, [sp, #12]
90017212:	bb62      	cbnz	r2, 9001726e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
90017214:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90017218:	4298      	cmp	r0, r3
9001721a:	d003      	beq.n	90017224 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
9001721c:	f242 030b 	movw	r3, #8203	; 0x200b
90017220:	4298      	cmp	r0, r3
90017222:	d1b2      	bne.n	9001718a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90017224:	8823      	ldrh	r3, [r4, #0]
90017226:	8ba1      	ldrh	r1, [r4, #28]
90017228:	2b20      	cmp	r3, #32
9001722a:	d003      	beq.n	90017234 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
9001722c:	f242 000b 	movw	r0, #8203	; 0x200b
90017230:	4283      	cmp	r3, r0
90017232:	d131      	bne.n	90017298 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
90017234:	f1ba 0f00 	cmp.w	sl, #0
90017238:	bf0a      	itet	eq
9001723a:	4688      	moveq	r8, r1
9001723c:	4650      	movne	r0, sl
9001723e:	2001      	moveq	r0, #1
90017240:	440a      	add	r2, r1
90017242:	8b23      	ldrh	r3, [r4, #24]
90017244:	f8b4 c010 	ldrh.w	ip, [r4, #16]
90017248:	b292      	uxth	r2, r2
9001724a:	83a2      	strh	r2, [r4, #28]
9001724c:	4413      	add	r3, r2
9001724e:	f1b9 0f00 	cmp.w	r9, #0
90017252:	d102      	bne.n	9001725a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
90017254:	2d00      	cmp	r5, #0
90017256:	d042      	beq.n	900172de <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
90017258:	b300      	cbz	r0, 9001729c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
9001725a:	8c21      	ldrh	r1, [r4, #32]
9001725c:	4419      	add	r1, r3
9001725e:	458c      	cmp	ip, r1
90017260:	da37      	bge.n	900172d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
90017262:	8ae1      	ldrh	r1, [r4, #22]
90017264:	2900      	cmp	r1, #0
90017266:	d034      	beq.n	900172d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
90017268:	4563      	cmp	r3, ip
9001726a:	dd8e      	ble.n	9001718a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001726c:	e01d      	b.n	900172aa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
9001726e:	8893      	ldrh	r3, [r2, #4]
90017270:	9901      	ldr	r1, [sp, #4]
90017272:	8023      	strh	r3, [r4, #0]
90017274:	f892 b00d 	ldrb.w	fp, [r2, #13]
90017278:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
9001727c:	f40b 7080 	and.w	r0, fp, #256	; 0x100
90017280:	f892 b00a 	ldrb.w	fp, [r2, #10]
90017284:	ea4b 0b00 	orr.w	fp, fp, r0
90017288:	68e0      	ldr	r0, [r4, #12]
9001728a:	6803      	ldr	r3, [r0, #0]
9001728c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9001728e:	4798      	blx	r3
90017290:	eb0b 0200 	add.w	r2, fp, r0
90017294:	b292      	uxth	r2, r2
90017296:	e7c5      	b.n	90017224 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
90017298:	2000      	movs	r0, #0
9001729a:	e7d1      	b.n	90017240 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
9001729c:	4563      	cmp	r3, ip
9001729e:	f77f af74 	ble.w	9001718a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900172a2:	8ae3      	ldrh	r3, [r4, #22]
900172a4:	2b00      	cmp	r3, #0
900172a6:	f43f af70 	beq.w	9001718a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900172aa:	2301      	movs	r3, #1
900172ac:	8c22      	ldrh	r2, [r4, #32]
900172ae:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
900172b2:	8be3      	ldrh	r3, [r4, #30]
900172b4:	4413      	add	r3, r2
900172b6:	83e3      	strh	r3, [r4, #30]
900172b8:	68e0      	ldr	r0, [r4, #12]
900172ba:	6803      	ldr	r3, [r0, #0]
900172bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900172be:	4798      	blx	r3
900172c0:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
900172c4:	4418      	add	r0, r3
900172c6:	8a63      	ldrh	r3, [r4, #18]
900172c8:	1a18      	subs	r0, r3, r0
900172ca:	8260      	strh	r0, [r4, #18]
900172cc:	b005      	add	sp, #20
900172ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900172d2:	2300      	movs	r3, #0
900172d4:	4611      	mov	r1, r2
900172d6:	4620      	mov	r0, r4
900172d8:	f7ff ff0f 	bl	900170fa <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
900172dc:	e755      	b.n	9001718a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900172de:	4563      	cmp	r3, ip
900172e0:	dd14      	ble.n	9001730c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
900172e2:	b117      	cbz	r7, 900172ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
900172e4:	2301      	movs	r3, #1
900172e6:	460a      	mov	r2, r1
900172e8:	e772      	b.n	900171d0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
900172ea:	2e00      	cmp	r6, #0
900172ec:	f43f af4d 	beq.w	9001718a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900172f0:	2800      	cmp	r0, #0
900172f2:	f47f af4a 	bne.w	9001718a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900172f6:	f1ba 0f00 	cmp.w	sl, #0
900172fa:	d002      	beq.n	90017302 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
900172fc:	2301      	movs	r3, #1
900172fe:	4642      	mov	r2, r8
90017300:	e767      	b.n	900171d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
90017302:	8ae3      	ldrh	r3, [r4, #22]
90017304:	2b00      	cmp	r3, #0
90017306:	f43f af40 	beq.w	9001718a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001730a:	e7d5      	b.n	900172b8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
9001730c:	2800      	cmp	r0, #0
9001730e:	f47f af3c 	bne.w	9001718a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90017312:	f1ba 0f00 	cmp.w	sl, #0
90017316:	f43f af38 	beq.w	9001718a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001731a:	2301      	movs	r3, #1
9001731c:	4642      	mov	r2, r8
9001731e:	e7da      	b.n	900172d6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

90017320 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
90017320:	b5f0      	push	{r4, r5, r6, r7, lr}
90017322:	4605      	mov	r5, r0
90017324:	b08f      	sub	sp, #60	; 0x3c
90017326:	4617      	mov	r7, r2
90017328:	461c      	mov	r4, r3
9001732a:	460e      	mov	r6, r1
9001732c:	b1d1      	cbz	r1, 90017364 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
9001732e:	681b      	ldr	r3, [r3, #0]
90017330:	4620      	mov	r0, r4
90017332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90017334:	4798      	blx	r3
90017336:	4240      	negs	r0, r0
90017338:	9603      	str	r6, [sp, #12]
9001733a:	f64f 73ff 	movw	r3, #65535	; 0xffff
9001733e:	b200      	sxth	r0, r0
90017340:	9700      	str	r7, [sp, #0]
90017342:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
90017346:	4629      	mov	r1, r5
90017348:	e9cd 4001 	strd	r4, r0, [sp, #4]
9001734c:	2401      	movs	r4, #1
9001734e:	a805      	add	r0, sp, #20
90017350:	f7ff fcbe 	bl	90016cd0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
90017354:	a805      	add	r0, sp, #20
90017356:	f7ff fee0 	bl	9001711a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
9001735a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
9001735e:	b163      	cbz	r3, 9001737a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
90017360:	3401      	adds	r4, #1
90017362:	e7f7      	b.n	90017354 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
90017364:	2401      	movs	r4, #1
90017366:	f002 fe1d 	bl	90019fa4 <_ZN8touchgfx12TextProvider11getNextCharEv>
9001736a:	280a      	cmp	r0, #10
9001736c:	4628      	mov	r0, r5
9001736e:	bf08      	it	eq
90017370:	3401      	addeq	r4, #1
90017372:	f002 fe17 	bl	90019fa4 <_ZN8touchgfx12TextProvider11getNextCharEv>
90017376:	2800      	cmp	r0, #0
90017378:	d1f7      	bne.n	9001736a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
9001737a:	b2a0      	uxth	r0, r4
9001737c:	b00f      	add	sp, #60	; 0x3c
9001737e:	bdf0      	pop	{r4, r5, r6, r7, pc}

90017380 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
90017380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017384:	b0e3      	sub	sp, #396	; 0x18c
90017386:	461c      	mov	r4, r3
90017388:	4683      	mov	fp, r0
9001738a:	4688      	mov	r8, r1
9001738c:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
9001738e:	2b00      	cmp	r3, #0
90017390:	f000 810f 	beq.w	900175b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90017394:	6823      	ldr	r3, [r4, #0]
90017396:	2b00      	cmp	r3, #0
90017398:	f000 810b 	beq.w	900175b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
9001739c:	7ba3      	ldrb	r3, [r4, #14]
9001739e:	2b00      	cmp	r3, #0
900173a0:	f000 8107 	beq.w	900175b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
900173a4:	ad0a      	add	r5, sp, #40	; 0x28
900173a6:	6810      	ldr	r0, [r2, #0]
900173a8:	6851      	ldr	r1, [r2, #4]
900173aa:	462b      	mov	r3, r5
900173ac:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
900173b0:	c303      	stmia	r3!, {r0, r1}
900173b2:	2100      	movs	r1, #0
900173b4:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
900173b8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
900173bc:	4628      	mov	r0, r5
900173be:	910c      	str	r1, [sp, #48]	; 0x30
900173c0:	a90c      	add	r1, sp, #48	; 0x30
900173c2:	79a2      	ldrb	r2, [r4, #6]
900173c4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
900173c8:	f7ff fd01 	bl	90016dce <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
900173cc:	a90c      	add	r1, sp, #48	; 0x30
900173ce:	79a2      	ldrb	r2, [r4, #6]
900173d0:	4608      	mov	r0, r1
900173d2:	f7ff fcfc 	bl	90016dce <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
900173d6:	a817      	add	r0, sp, #92	; 0x5c
900173d8:	f002 f9b7 	bl	9001974a <_ZN8touchgfx12TextProviderC1Ev>
900173dc:	6820      	ldr	r0, [r4, #0]
900173de:	6803      	ldr	r3, [r0, #0]
900173e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900173e2:	4798      	blx	r3
900173e4:	4606      	mov	r6, r0
900173e6:	6820      	ldr	r0, [r4, #0]
900173e8:	6803      	ldr	r3, [r0, #0]
900173ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900173ec:	4798      	blx	r3
900173ee:	4633      	mov	r3, r6
900173f0:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
900173f2:	996c      	ldr	r1, [sp, #432]	; 0x1b0
900173f4:	9000      	str	r0, [sp, #0]
900173f6:	a817      	add	r0, sp, #92	; 0x5c
900173f8:	f002 fa02 	bl	90019800 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
900173fc:	6820      	ldr	r0, [r4, #0]
900173fe:	f894 a004 	ldrb.w	sl, [r4, #4]
90017402:	6803      	ldr	r3, [r0, #0]
90017404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90017406:	4798      	blx	r3
90017408:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
9001740c:	6823      	ldr	r3, [r4, #0]
9001740e:	4607      	mov	r7, r0
90017410:	4406      	add	r6, r0
90017412:	a830      	add	r0, sp, #192	; 0xc0
90017414:	f893 9009 	ldrb.w	r9, [r3, #9]
90017418:	f002 f997 	bl	9001974a <_ZN8touchgfx12TextProviderC1Ev>
9001741c:	7c23      	ldrb	r3, [r4, #16]
9001741e:	b17b      	cbz	r3, 90017440 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
90017420:	6820      	ldr	r0, [r4, #0]
90017422:	6803      	ldr	r3, [r0, #0]
90017424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90017426:	4798      	blx	r3
90017428:	9009      	str	r0, [sp, #36]	; 0x24
9001742a:	6820      	ldr	r0, [r4, #0]
9001742c:	6802      	ldr	r2, [r0, #0]
9001742e:	6d12      	ldr	r2, [r2, #80]	; 0x50
90017430:	4790      	blx	r2
90017432:	9b09      	ldr	r3, [sp, #36]	; 0x24
90017434:	9000      	str	r0, [sp, #0]
90017436:	a830      	add	r0, sp, #192	; 0xc0
90017438:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
9001743a:	996c      	ldr	r1, [sp, #432]	; 0x1b0
9001743c:	f002 f9e0 	bl	90019800 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90017440:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
90017444:	a80e      	add	r0, sp, #56	; 0x38
90017446:	7be2      	ldrb	r2, [r4, #15]
90017448:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
9001744c:	1a8a      	subs	r2, r1, r2
9001744e:	7c21      	ldrb	r1, [r4, #16]
90017450:	9103      	str	r1, [sp, #12]
90017452:	b292      	uxth	r2, r2
90017454:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
90017458:	9102      	str	r1, [sp, #8]
9001745a:	6821      	ldr	r1, [r4, #0]
9001745c:	9101      	str	r1, [sp, #4]
9001745e:	7961      	ldrb	r1, [r4, #5]
90017460:	9100      	str	r1, [sp, #0]
90017462:	a930      	add	r1, sp, #192	; 0xc0
90017464:	f7ff fc34 	bl	90016cd0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
90017468:	2e00      	cmp	r6, #0
9001746a:	dc5b      	bgt.n	90017524 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
9001746c:	af17      	add	r7, sp, #92	; 0x5c
9001746e:	f04f 0900 	mov.w	r9, #0
90017472:	7c23      	ldrb	r3, [r4, #16]
90017474:	2b00      	cmp	r3, #0
90017476:	f000 80ae 	beq.w	900175d6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
9001747a:	a80e      	add	r0, sp, #56	; 0x38
9001747c:	f7ff fe4d 	bl	9001711a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
90017480:	f1ba 0f00 	cmp.w	sl, #0
90017484:	f000 80a2 	beq.w	900175cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
90017488:	7c23      	ldrb	r3, [r4, #16]
9001748a:	2264      	movs	r2, #100	; 0x64
9001748c:	4639      	mov	r1, r7
9001748e:	a849      	add	r0, sp, #292	; 0x124
90017490:	9309      	str	r3, [sp, #36]	; 0x24
90017492:	f010 f9b4 	bl	900277fe <memcpy>
90017496:	9b09      	ldr	r3, [sp, #36]	; 0x24
90017498:	2b00      	cmp	r3, #0
9001749a:	f000 80a4 	beq.w	900175e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
9001749e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
900174a2:	7922      	ldrb	r2, [r4, #4]
900174a4:	2a01      	cmp	r2, #1
900174a6:	f040 8087 	bne.w	900175b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
900174aa:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
900174ae:	1ac0      	subs	r0, r0, r3
900174b0:	2302      	movs	r3, #2
900174b2:	fb90 f0f3 	sdiv	r0, r0, r3
900174b6:	b200      	sxth	r0, r0
900174b8:	7c23      	ldrb	r3, [r4, #16]
900174ba:	2b00      	cmp	r3, #0
900174bc:	f000 8088 	beq.w	900175d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
900174c0:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
900174c4:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
900174c8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
900174cc:	e9cd 2105 	strd	r2, r1, [sp, #20]
900174d0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
900174d4:	2100      	movs	r1, #0
900174d6:	4410      	add	r0, r2
900174d8:	4642      	mov	r2, r8
900174da:	b200      	sxth	r0, r0
900174dc:	e9cd 9703 	strd	r9, r7, [sp, #12]
900174e0:	9000      	str	r0, [sp, #0]
900174e2:	4658      	mov	r0, fp
900174e4:	e9cd 5401 	strd	r5, r4, [sp, #4]
900174e8:	f7ff fca2 	bl	90016e30 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
900174ec:	2800      	cmp	r0, #0
900174ee:	d160      	bne.n	900175b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
900174f0:	b2b2      	uxth	r2, r6
900174f2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
900174f6:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
900174fa:	4413      	add	r3, r2
900174fc:	1a8a      	subs	r2, r1, r2
900174fe:	b21b      	sxth	r3, r3
90017500:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
90017504:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
90017508:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001750c:	2a00      	cmp	r2, #0
9001750e:	d150      	bne.n	900175b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90017510:	6822      	ldr	r2, [r4, #0]
90017512:	8869      	ldrh	r1, [r5, #2]
90017514:	7a12      	ldrb	r2, [r2, #8]
90017516:	1a9b      	subs	r3, r3, r2
90017518:	88ea      	ldrh	r2, [r5, #6]
9001751a:	440a      	add	r2, r1
9001751c:	b212      	sxth	r2, r2
9001751e:	4293      	cmp	r3, r2
90017520:	dda7      	ble.n	90017472 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
90017522:	e046      	b.n	900175b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90017524:	7c23      	ldrb	r3, [r4, #16]
90017526:	444f      	add	r7, r9
90017528:	b1c3      	cbz	r3, 9001755c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
9001752a:	f64f 79ff 	movw	r9, #65535	; 0xffff
9001752e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90017532:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90017536:	443b      	add	r3, r7
90017538:	4293      	cmp	r3, r2
9001753a:	da97      	bge.n	9001746c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
9001753c:	a80e      	add	r0, sp, #56	; 0x38
9001753e:	f7ff fdec 	bl	9001711a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
90017542:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
90017546:	3b01      	subs	r3, #1
90017548:	b29b      	uxth	r3, r3
9001754a:	454b      	cmp	r3, r9
9001754c:	9309      	str	r3, [sp, #36]	; 0x24
9001754e:	d021      	beq.n	90017594 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
90017550:	7961      	ldrb	r1, [r4, #5]
90017552:	a817      	add	r0, sp, #92	; 0x5c
90017554:	f7f0 fb4c 	bl	90007bf0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90017558:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001755a:	e7f4      	b.n	90017546 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
9001755c:	fa1f f986 	uxth.w	r9, r6
90017560:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90017564:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90017568:	443b      	add	r3, r7
9001756a:	4293      	cmp	r3, r2
9001756c:	f6bf af7e 	bge.w	9001746c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
90017570:	a817      	add	r0, sp, #92	; 0x5c
90017572:	f002 fd17 	bl	90019fa4 <_ZN8touchgfx12TextProvider11getNextCharEv>
90017576:	b1e0      	cbz	r0, 900175b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90017578:	280a      	cmp	r0, #10
9001757a:	d1f1      	bne.n	90017560 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
9001757c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
90017580:	444b      	add	r3, r9
90017582:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
90017586:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
9001758a:	eba3 0309 	sub.w	r3, r3, r9
9001758e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90017592:	e7e5      	b.n	90017560 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
90017594:	b2b3      	uxth	r3, r6
90017596:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
9001759a:	441a      	add	r2, r3
9001759c:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
900175a0:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
900175a4:	1ad3      	subs	r3, r2, r3
900175a6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
900175aa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
900175ae:	2b00      	cmp	r3, #0
900175b0:	d1bd      	bne.n	9001752e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
900175b2:	b063      	add	sp, #396	; 0x18c
900175b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900175b8:	2a02      	cmp	r2, #2
900175ba:	d105      	bne.n	900175c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
900175bc:	7be2      	ldrb	r2, [r4, #15]
900175be:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
900175c2:	1a80      	subs	r0, r0, r2
900175c4:	1ac0      	subs	r0, r0, r3
900175c6:	e776      	b.n	900174b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
900175c8:	2000      	movs	r0, #0
900175ca:	e775      	b.n	900174b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
900175cc:	7be0      	ldrb	r0, [r4, #15]
900175ce:	e773      	b.n	900174b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
900175d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
900175d4:	e776      	b.n	900174c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
900175d6:	f1ba 0f00 	cmp.w	sl, #0
900175da:	d0f7      	beq.n	900175cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
900175dc:	2264      	movs	r2, #100	; 0x64
900175de:	4639      	mov	r1, r7
900175e0:	a849      	add	r0, sp, #292	; 0x124
900175e2:	f010 f90c 	bl	900277fe <memcpy>
900175e6:	2300      	movs	r3, #0
900175e8:	f647 72ff 	movw	r2, #32767	; 0x7fff
900175ec:	6821      	ldr	r1, [r4, #0]
900175ee:	a849      	add	r0, sp, #292	; 0x124
900175f0:	f7ff fbb1 	bl	90016d56 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
900175f4:	b203      	sxth	r3, r0
900175f6:	e754      	b.n	900174a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

900175f8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
900175f8:	2b03      	cmp	r3, #3
900175fa:	d818      	bhi.n	9001762e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
900175fc:	e8df f003 	tbb	[pc, r3]
90017600:	130d0602 	.word	0x130d0602
90017604:	f9b0 2000 	ldrsh.w	r2, [r0]
90017608:	1850      	adds	r0, r2, r1
9001760a:	4770      	bx	lr
9001760c:	8803      	ldrh	r3, [r0, #0]
9001760e:	8880      	ldrh	r0, [r0, #4]
90017610:	4418      	add	r0, r3
90017612:	b200      	sxth	r0, r0
90017614:	1a80      	subs	r0, r0, r2
90017616:	3801      	subs	r0, #1
90017618:	4770      	bx	lr
9001761a:	8803      	ldrh	r3, [r0, #0]
9001761c:	8880      	ldrh	r0, [r0, #4]
9001761e:	4418      	add	r0, r3
90017620:	b200      	sxth	r0, r0
90017622:	1a40      	subs	r0, r0, r1
90017624:	e7f7      	b.n	90017616 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
90017626:	f9b0 0000 	ldrsh.w	r0, [r0]
9001762a:	4410      	add	r0, r2
9001762c:	4770      	bx	lr
9001762e:	2000      	movs	r0, #0
90017630:	4770      	bx	lr

90017632 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
90017632:	2b03      	cmp	r3, #3
90017634:	d817      	bhi.n	90017666 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
90017636:	e8df f003 	tbb	[pc, r3]
9001763a:	0602      	.short	0x0602
9001763c:	1009      	.short	0x1009
9001763e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
90017642:	1850      	adds	r0, r2, r1
90017644:	4770      	bx	lr
90017646:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
9001764a:	e7fa      	b.n	90017642 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
9001764c:	8843      	ldrh	r3, [r0, #2]
9001764e:	88c0      	ldrh	r0, [r0, #6]
90017650:	4418      	add	r0, r3
90017652:	b200      	sxth	r0, r0
90017654:	1a80      	subs	r0, r0, r2
90017656:	3801      	subs	r0, #1
90017658:	4770      	bx	lr
9001765a:	8843      	ldrh	r3, [r0, #2]
9001765c:	88c0      	ldrh	r0, [r0, #6]
9001765e:	4418      	add	r0, r3
90017660:	b200      	sxth	r0, r0
90017662:	1a40      	subs	r0, r0, r1
90017664:	e7f7      	b.n	90017656 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
90017666:	2000      	movs	r0, #0
90017668:	4770      	bx	lr
	...

9001766c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
9001766c:	4b01      	ldr	r3, [pc, #4]	; (90017674 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
9001766e:	2200      	movs	r2, #0
90017670:	601a      	str	r2, [r3, #0]
90017672:	4770      	bx	lr
90017674:	240281a4 	.word	0x240281a4

90017678 <_ZN8touchgfx16TouchCalibration4clzuEm>:
90017678:	4603      	mov	r3, r0
9001767a:	b1c8      	cbz	r0, 900176b0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
9001767c:	0c02      	lsrs	r2, r0, #16
9001767e:	0412      	lsls	r2, r2, #16
90017680:	b9a2      	cbnz	r2, 900176ac <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
90017682:	0403      	lsls	r3, r0, #16
90017684:	2010      	movs	r0, #16
90017686:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
9001768a:	bf04      	itt	eq
9001768c:	021b      	lsleq	r3, r3, #8
9001768e:	3008      	addeq	r0, #8
90017690:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
90017694:	bf04      	itt	eq
90017696:	011b      	lsleq	r3, r3, #4
90017698:	3004      	addeq	r0, #4
9001769a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
9001769e:	bf04      	itt	eq
900176a0:	009b      	lsleq	r3, r3, #2
900176a2:	3002      	addeq	r0, #2
900176a4:	2b00      	cmp	r3, #0
900176a6:	db04      	blt.n	900176b2 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
900176a8:	3001      	adds	r0, #1
900176aa:	4770      	bx	lr
900176ac:	2000      	movs	r0, #0
900176ae:	e7ea      	b.n	90017686 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
900176b0:	2020      	movs	r0, #32
900176b2:	4770      	bx	lr

900176b4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
900176b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900176b8:	b087      	sub	sp, #28
900176ba:	4681      	mov	r9, r0
900176bc:	4698      	mov	r8, r3
900176be:	4610      	mov	r0, r2
900176c0:	460d      	mov	r5, r1
900176c2:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
900176c6:	b981      	cbnz	r1, 900176ea <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
900176c8:	b14b      	cbz	r3, 900176de <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
900176ca:	460b      	mov	r3, r1
900176cc:	464a      	mov	r2, r9
900176ce:	4641      	mov	r1, r8
900176d0:	e9cd 4700 	strd	r4, r7, [sp]
900176d4:	f7ff ffee 	bl	900176b4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
900176d8:	b007      	add	sp, #28
900176da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900176de:	f04f 33ff 	mov.w	r3, #4294967295
900176e2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
900176e6:	603b      	str	r3, [r7, #0]
900176e8:	e7f6      	b.n	900176d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
900176ea:	fa32 fa01 	lsrs.w	sl, r2, r1
900176ee:	d107      	bne.n	90017700 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
900176f0:	fb09 f602 	mul.w	r6, r9, r2
900176f4:	fbb6 f0f4 	udiv	r0, r6, r4
900176f8:	fb04 6610 	mls	r6, r4, r0, r6
900176fc:	603e      	str	r6, [r7, #0]
900176fe:	e7eb      	b.n	900176d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
90017700:	2601      	movs	r6, #1
90017702:	fa09 fb01 	lsl.w	fp, r9, r1
90017706:	408e      	lsls	r6, r1
90017708:	fbbb f3f4 	udiv	r3, fp, r4
9001770c:	3e01      	subs	r6, #1
9001770e:	9302      	str	r3, [sp, #8]
90017710:	fb0a f303 	mul.w	r3, sl, r3
90017714:	4016      	ands	r6, r2
90017716:	9303      	str	r3, [sp, #12]
90017718:	4630      	mov	r0, r6
9001771a:	f7ff ffad 	bl	90017678 <_ZN8touchgfx16TouchCalibration4clzuEm>
9001771e:	464a      	mov	r2, r9
90017720:	460b      	mov	r3, r1
90017722:	4601      	mov	r1, r0
90017724:	4630      	mov	r0, r6
90017726:	e9cd 4700 	strd	r4, r7, [sp]
9001772a:	f7ff ffc3 	bl	900176b4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
9001772e:	9b02      	ldr	r3, [sp, #8]
90017730:	4606      	mov	r6, r0
90017732:	eb05 0108 	add.w	r1, r5, r8
90017736:	fb04 bb13 	mls	fp, r4, r3, fp
9001773a:	4658      	mov	r0, fp
9001773c:	f7ff ff9c 	bl	90017678 <_ZN8touchgfx16TouchCalibration4clzuEm>
90017740:	ab05      	add	r3, sp, #20
90017742:	465a      	mov	r2, fp
90017744:	e9cd 4300 	strd	r4, r3, [sp]
90017748:	4603      	mov	r3, r0
9001774a:	4650      	mov	r0, sl
9001774c:	f7ff ffb2 	bl	900176b4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90017750:	6839      	ldr	r1, [r7, #0]
90017752:	9a05      	ldr	r2, [sp, #20]
90017754:	9b03      	ldr	r3, [sp, #12]
90017756:	4411      	add	r1, r2
90017758:	fbb1 f2f4 	udiv	r2, r1, r4
9001775c:	18d3      	adds	r3, r2, r3
9001775e:	fb04 1412 	mls	r4, r4, r2, r1
90017762:	441e      	add	r6, r3
90017764:	603c      	str	r4, [r7, #0]
90017766:	4430      	add	r0, r6
90017768:	e7b6      	b.n	900176d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

9001776a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
9001776a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001776e:	b085      	sub	sp, #20
90017770:	f1b0 0900 	subs.w	r9, r0, #0
90017774:	461d      	mov	r5, r3
90017776:	4617      	mov	r7, r2
90017778:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001777a:	bfbb      	ittet	lt
9001777c:	f1c9 0900 	rsblt	r9, r9, #0
90017780:	f04f 36ff 	movlt.w	r6, #4294967295
90017784:	2601      	movge	r6, #1
90017786:	6823      	ldrlt	r3, [r4, #0]
90017788:	bfbc      	itt	lt
9001778a:	425b      	neglt	r3, r3
9001778c:	6023      	strlt	r3, [r4, #0]
9001778e:	2a00      	cmp	r2, #0
90017790:	da04      	bge.n	9001779c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
90017792:	6823      	ldr	r3, [r4, #0]
90017794:	4257      	negs	r7, r2
90017796:	4276      	negs	r6, r6
90017798:	425b      	negs	r3, r3
9001779a:	6023      	str	r3, [r4, #0]
9001779c:	2d00      	cmp	r5, #0
9001779e:	4638      	mov	r0, r7
900177a0:	bfba      	itte	lt
900177a2:	426d      	neglt	r5, r5
900177a4:	f04f 38ff 	movlt.w	r8, #4294967295
900177a8:	f04f 0801 	movge.w	r8, #1
900177ac:	f7ff ff64 	bl	90017678 <_ZN8touchgfx16TouchCalibration4clzuEm>
900177b0:	ab03      	add	r3, sp, #12
900177b2:	463a      	mov	r2, r7
900177b4:	e9cd 5300 	strd	r5, r3, [sp]
900177b8:	4603      	mov	r3, r0
900177ba:	4648      	mov	r0, r9
900177bc:	f7ff ff7a 	bl	900176b4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
900177c0:	6823      	ldr	r3, [r4, #0]
900177c2:	9a03      	ldr	r2, [sp, #12]
900177c4:	4546      	cmp	r6, r8
900177c6:	441a      	add	r2, r3
900177c8:	fb92 f3f5 	sdiv	r3, r2, r5
900177cc:	4418      	add	r0, r3
900177ce:	fb05 2313 	mls	r3, r5, r3, r2
900177d2:	bf18      	it	ne
900177d4:	4240      	negne	r0, r0
900177d6:	1c72      	adds	r2, r6, #1
900177d8:	6023      	str	r3, [r4, #0]
900177da:	d105      	bne.n	900177e8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
900177dc:	2b00      	cmp	r3, #0
900177de:	f1c3 0200 	rsb	r2, r3, #0
900177e2:	db0b      	blt.n	900177fc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
900177e4:	6022      	str	r2, [r4, #0]
900177e6:	e006      	b.n	900177f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
900177e8:	2e01      	cmp	r6, #1
900177ea:	d104      	bne.n	900177f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
900177ec:	2b00      	cmp	r3, #0
900177ee:	da02      	bge.n	900177f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
900177f0:	442b      	add	r3, r5
900177f2:	3801      	subs	r0, #1
900177f4:	6023      	str	r3, [r4, #0]
900177f6:	b005      	add	sp, #20
900177f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900177fc:	3801      	subs	r0, #1
900177fe:	1b52      	subs	r2, r2, r5
90017800:	e7f0      	b.n	900177e4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

90017804 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
90017804:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
90017808:	4c1c      	ldr	r4, [pc, #112]	; (9001787c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
9001780a:	4605      	mov	r5, r0
9001780c:	6807      	ldr	r7, [r0, #0]
9001780e:	69a3      	ldr	r3, [r4, #24]
90017810:	b92b      	cbnz	r3, 9001781e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
90017812:	6840      	ldr	r0, [r0, #4]
90017814:	e9c5 7000 	strd	r7, r0, [r5]
90017818:	b004      	add	sp, #16
9001781a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9001781e:	f04f 0802 	mov.w	r8, #2
90017822:	68a2      	ldr	r2, [r4, #8]
90017824:	ae04      	add	r6, sp, #16
90017826:	6820      	ldr	r0, [r4, #0]
90017828:	fb93 f1f8 	sdiv	r1, r3, r8
9001782c:	440a      	add	r2, r1
9001782e:	69e1      	ldr	r1, [r4, #28]
90017830:	f846 2d04 	str.w	r2, [r6, #-4]!
90017834:	463a      	mov	r2, r7
90017836:	9600      	str	r6, [sp, #0]
90017838:	f7ff ff97 	bl	9001776a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
9001783c:	69a3      	ldr	r3, [r4, #24]
9001783e:	4607      	mov	r7, r0
90017840:	686a      	ldr	r2, [r5, #4]
90017842:	6a21      	ldr	r1, [r4, #32]
90017844:	9600      	str	r6, [sp, #0]
90017846:	6860      	ldr	r0, [r4, #4]
90017848:	f7ff ff8f 	bl	9001776a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
9001784c:	69a3      	ldr	r3, [r4, #24]
9001784e:	6962      	ldr	r2, [r4, #20]
90017850:	4407      	add	r7, r0
90017852:	6a61      	ldr	r1, [r4, #36]	; 0x24
90017854:	9600      	str	r6, [sp, #0]
90017856:	68e0      	ldr	r0, [r4, #12]
90017858:	fb93 f8f8 	sdiv	r8, r3, r8
9001785c:	4442      	add	r2, r8
9001785e:	9203      	str	r2, [sp, #12]
90017860:	682a      	ldr	r2, [r5, #0]
90017862:	f7ff ff82 	bl	9001776a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90017866:	4680      	mov	r8, r0
90017868:	9600      	str	r6, [sp, #0]
9001786a:	69a3      	ldr	r3, [r4, #24]
9001786c:	686a      	ldr	r2, [r5, #4]
9001786e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
90017870:	6920      	ldr	r0, [r4, #16]
90017872:	f7ff ff7a 	bl	9001776a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90017876:	4440      	add	r0, r8
90017878:	e7cc      	b.n	90017814 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
9001787a:	bf00      	nop
9001787c:	240281a8 	.word	0x240281a8

90017880 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
90017880:	4b07      	ldr	r3, [pc, #28]	; (900178a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
90017882:	781b      	ldrb	r3, [r3, #0]
90017884:	2b01      	cmp	r3, #1
90017886:	d109      	bne.n	9001789c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
90017888:	f9b1 3000 	ldrsh.w	r3, [r1]
9001788c:	f9b0 2000 	ldrsh.w	r2, [r0]
90017890:	8003      	strh	r3, [r0, #0]
90017892:	4b04      	ldr	r3, [pc, #16]	; (900178a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
90017894:	881b      	ldrh	r3, [r3, #0]
90017896:	3b01      	subs	r3, #1
90017898:	1a9b      	subs	r3, r3, r2
9001789a:	800b      	strh	r3, [r1, #0]
9001789c:	4770      	bx	lr
9001789e:	bf00      	nop
900178a0:	2402818c 	.word	0x2402818c
900178a4:	24028188 	.word	0x24028188

900178a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
900178a8:	4b07      	ldr	r3, [pc, #28]	; (900178c8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
900178aa:	b510      	push	{r4, lr}
900178ac:	781b      	ldrb	r3, [r3, #0]
900178ae:	2b01      	cmp	r3, #1
900178b0:	d108      	bne.n	900178c4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
900178b2:	4b06      	ldr	r3, [pc, #24]	; (900178cc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
900178b4:	880c      	ldrh	r4, [r1, #0]
900178b6:	881b      	ldrh	r3, [r3, #0]
900178b8:	f9b0 2000 	ldrsh.w	r2, [r0]
900178bc:	3b01      	subs	r3, #1
900178be:	1b1b      	subs	r3, r3, r4
900178c0:	8003      	strh	r3, [r0, #0]
900178c2:	800a      	strh	r2, [r1, #0]
900178c4:	bd10      	pop	{r4, pc}
900178c6:	bf00      	nop
900178c8:	2402818c 	.word	0x2402818c
900178cc:	24028188 	.word	0x24028188

900178d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
900178d0:	4b0a      	ldr	r3, [pc, #40]	; (900178fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
900178d2:	b510      	push	{r4, lr}
900178d4:	781b      	ldrb	r3, [r3, #0]
900178d6:	2b01      	cmp	r3, #1
900178d8:	d10e      	bne.n	900178f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
900178da:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
900178de:	8843      	ldrh	r3, [r0, #2]
900178e0:	f9b0 4000 	ldrsh.w	r4, [r0]
900178e4:	18ca      	adds	r2, r1, r3
900178e6:	4b06      	ldr	r3, [pc, #24]	; (90017900 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
900178e8:	8044      	strh	r4, [r0, #2]
900178ea:	881b      	ldrh	r3, [r3, #0]
900178ec:	1a9b      	subs	r3, r3, r2
900178ee:	8003      	strh	r3, [r0, #0]
900178f0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
900178f4:	8081      	strh	r1, [r0, #4]
900178f6:	80c3      	strh	r3, [r0, #6]
900178f8:	bd10      	pop	{r4, pc}
900178fa:	bf00      	nop
900178fc:	2402818c 	.word	0x2402818c
90017900:	24028188 	.word	0x24028188

90017904 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
90017904:	4b08      	ldr	r3, [pc, #32]	; (90017928 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
90017906:	781b      	ldrb	r3, [r3, #0]
90017908:	2b01      	cmp	r3, #1
9001790a:	d10c      	bne.n	90017926 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
9001790c:	8803      	ldrh	r3, [r0, #0]
9001790e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
90017912:	8842      	ldrh	r2, [r0, #2]
90017914:	8002      	strh	r2, [r0, #0]
90017916:	185a      	adds	r2, r3, r1
90017918:	4b04      	ldr	r3, [pc, #16]	; (9001792c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
9001791a:	881b      	ldrh	r3, [r3, #0]
9001791c:	1a9b      	subs	r3, r3, r2
9001791e:	8043      	strh	r3, [r0, #2]
90017920:	88c3      	ldrh	r3, [r0, #6]
90017922:	80c1      	strh	r1, [r0, #6]
90017924:	8083      	strh	r3, [r0, #4]
90017926:	4770      	bx	lr
90017928:	2402818c 	.word	0x2402818c
9001792c:	24028188 	.word	0x24028188

90017930 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
90017930:	4b07      	ldr	r3, [pc, #28]	; (90017950 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
90017932:	b510      	push	{r4, lr}
90017934:	781b      	ldrb	r3, [r3, #0]
90017936:	2b01      	cmp	r3, #1
90017938:	d108      	bne.n	9001794c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
9001793a:	f9b1 3000 	ldrsh.w	r3, [r1]
9001793e:	f9b0 4000 	ldrsh.w	r4, [r0]
90017942:	8003      	strh	r3, [r0, #0]
90017944:	8893      	ldrh	r3, [r2, #4]
90017946:	3b01      	subs	r3, #1
90017948:	1b1b      	subs	r3, r3, r4
9001794a:	800b      	strh	r3, [r1, #0]
9001794c:	bd10      	pop	{r4, pc}
9001794e:	bf00      	nop
90017950:	2402818c 	.word	0x2402818c

90017954 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
90017954:	4b0a      	ldr	r3, [pc, #40]	; (90017980 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
90017956:	460a      	mov	r2, r1
90017958:	b510      	push	{r4, lr}
9001795a:	781b      	ldrb	r3, [r3, #0]
9001795c:	2b01      	cmp	r3, #1
9001795e:	d10d      	bne.n	9001797c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
90017960:	8881      	ldrh	r1, [r0, #4]
90017962:	8803      	ldrh	r3, [r0, #0]
90017964:	440b      	add	r3, r1
90017966:	4601      	mov	r1, r0
90017968:	3b01      	subs	r3, #1
9001796a:	f821 3b02 	strh.w	r3, [r1], #2
9001796e:	f7ff ffdf 	bl	90017930 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
90017972:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90017976:	88c2      	ldrh	r2, [r0, #6]
90017978:	80c3      	strh	r3, [r0, #6]
9001797a:	8082      	strh	r2, [r0, #4]
9001797c:	bd10      	pop	{r4, pc}
9001797e:	bf00      	nop
90017980:	2402818c 	.word	0x2402818c

90017984 <_ZN8touchgfx11Application19changeToStartScreenEv>:
90017984:	4770      	bx	lr
	...

90017988 <_ZN8touchgfx11Application13requestRedrawEv>:
90017988:	4b06      	ldr	r3, [pc, #24]	; (900179a4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
9001798a:	2100      	movs	r1, #0
9001798c:	f9b3 2000 	ldrsh.w	r2, [r3]
90017990:	4b05      	ldr	r3, [pc, #20]	; (900179a8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
90017992:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
90017996:	f9b3 3000 	ldrsh.w	r3, [r3]
9001799a:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
9001799e:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
900179a2:	4770      	bx	lr
900179a4:	24028188 	.word	0x24028188
900179a8:	2402818a 	.word	0x2402818a

900179ac <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
900179ac:	4b03      	ldr	r3, [pc, #12]	; (900179bc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
900179ae:	6818      	ldr	r0, [r3, #0]
900179b0:	b110      	cbz	r0, 900179b8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
900179b2:	6803      	ldr	r3, [r0, #0]
900179b4:	699b      	ldr	r3, [r3, #24]
900179b6:	4718      	bx	r3
900179b8:	4770      	bx	lr
900179ba:	bf00      	nop
900179bc:	240281d8 	.word	0x240281d8

900179c0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
900179c0:	4770      	bx	lr
	...

900179c4 <_ZN8touchgfx11Application4drawEv>:
900179c4:	4b09      	ldr	r3, [pc, #36]	; (900179ec <_ZN8touchgfx11Application4drawEv+0x28>)
900179c6:	b507      	push	{r0, r1, r2, lr}
900179c8:	f9b3 2000 	ldrsh.w	r2, [r3]
900179cc:	2100      	movs	r1, #0
900179ce:	4b08      	ldr	r3, [pc, #32]	; (900179f0 <_ZN8touchgfx11Application4drawEv+0x2c>)
900179d0:	9100      	str	r1, [sp, #0]
900179d2:	4669      	mov	r1, sp
900179d4:	f9b3 3000 	ldrsh.w	r3, [r3]
900179d8:	f8ad 2004 	strh.w	r2, [sp, #4]
900179dc:	f8ad 3006 	strh.w	r3, [sp, #6]
900179e0:	6803      	ldr	r3, [r0, #0]
900179e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900179e4:	4798      	blx	r3
900179e6:	b003      	add	sp, #12
900179e8:	f85d fb04 	ldr.w	pc, [sp], #4
900179ec:	24028188 	.word	0x24028188
900179f0:	2402818a 	.word	0x2402818a

900179f4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
900179f4:	4b03      	ldr	r3, [pc, #12]	; (90017a04 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
900179f6:	6818      	ldr	r0, [r3, #0]
900179f8:	b110      	cbz	r0, 90017a00 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
900179fa:	6803      	ldr	r3, [r0, #0]
900179fc:	69db      	ldr	r3, [r3, #28]
900179fe:	4718      	bx	r3
90017a00:	4770      	bx	lr
90017a02:	bf00      	nop
90017a04:	240281d8 	.word	0x240281d8

90017a08 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
90017a08:	4b03      	ldr	r3, [pc, #12]	; (90017a18 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
90017a0a:	6818      	ldr	r0, [r3, #0]
90017a0c:	b110      	cbz	r0, 90017a14 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
90017a0e:	6803      	ldr	r3, [r0, #0]
90017a10:	6a1b      	ldr	r3, [r3, #32]
90017a12:	4718      	bx	r3
90017a14:	4770      	bx	lr
90017a16:	bf00      	nop
90017a18:	240281d8 	.word	0x240281d8

90017a1c <_ZN8touchgfx11Application16clearCachedAreasEv>:
90017a1c:	2300      	movs	r3, #0
90017a1e:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
90017a22:	4770      	bx	lr

90017a24 <_ZN8touchgfx11Application14handleKeyEventEh>:
90017a24:	4b03      	ldr	r3, [pc, #12]	; (90017a34 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
90017a26:	6818      	ldr	r0, [r3, #0]
90017a28:	b110      	cbz	r0, 90017a30 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
90017a2a:	6803      	ldr	r3, [r0, #0]
90017a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90017a2e:	4718      	bx	r3
90017a30:	4770      	bx	lr
90017a32:	bf00      	nop
90017a34:	240281d8 	.word	0x240281d8

90017a38 <_ZN8touchgfx11ApplicationD1Ev>:
90017a38:	4770      	bx	lr

90017a3a <_ZN8touchgfx11ApplicationD0Ev>:
90017a3a:	b510      	push	{r4, lr}
90017a3c:	4604      	mov	r4, r0
90017a3e:	f44f 719e 	mov.w	r1, #316	; 0x13c
90017a42:	f00f fb18 	bl	90027076 <_ZdlPvj>
90017a46:	4620      	mov	r0, r4
90017a48:	bd10      	pop	{r4, pc}

90017a4a <_ZNK8touchgfx4Rect9intersectERKS0_>:
90017a4a:	b510      	push	{r4, lr}
90017a4c:	f9b1 4000 	ldrsh.w	r4, [r1]
90017a50:	888a      	ldrh	r2, [r1, #4]
90017a52:	f9b0 3000 	ldrsh.w	r3, [r0]
90017a56:	4422      	add	r2, r4
90017a58:	b212      	sxth	r2, r2
90017a5a:	4293      	cmp	r3, r2
90017a5c:	da15      	bge.n	90017a8a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90017a5e:	8882      	ldrh	r2, [r0, #4]
90017a60:	4413      	add	r3, r2
90017a62:	b21b      	sxth	r3, r3
90017a64:	429c      	cmp	r4, r3
90017a66:	da10      	bge.n	90017a8a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90017a68:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
90017a6c:	88c9      	ldrh	r1, [r1, #6]
90017a6e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
90017a72:	4419      	add	r1, r3
90017a74:	b209      	sxth	r1, r1
90017a76:	428a      	cmp	r2, r1
90017a78:	da07      	bge.n	90017a8a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90017a7a:	88c0      	ldrh	r0, [r0, #6]
90017a7c:	4410      	add	r0, r2
90017a7e:	b200      	sxth	r0, r0
90017a80:	4283      	cmp	r3, r0
90017a82:	bfac      	ite	ge
90017a84:	2000      	movge	r0, #0
90017a86:	2001      	movlt	r0, #1
90017a88:	bd10      	pop	{r4, pc}
90017a8a:	2000      	movs	r0, #0
90017a8c:	e7fc      	b.n	90017a88 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

90017a8e <_ZN8touchgfx4Rect10restrictToEss>:
90017a8e:	f9b0 3000 	ldrsh.w	r3, [r0]
90017a92:	2b00      	cmp	r3, #0
90017a94:	b510      	push	{r4, lr}
90017a96:	da04      	bge.n	90017aa2 <_ZN8touchgfx4Rect10restrictToEss+0x14>
90017a98:	8884      	ldrh	r4, [r0, #4]
90017a9a:	4423      	add	r3, r4
90017a9c:	8083      	strh	r3, [r0, #4]
90017a9e:	2300      	movs	r3, #0
90017aa0:	8003      	strh	r3, [r0, #0]
90017aa2:	f9b0 4000 	ldrsh.w	r4, [r0]
90017aa6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90017aaa:	1b09      	subs	r1, r1, r4
90017aac:	428b      	cmp	r3, r1
90017aae:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
90017ab2:	bfc8      	it	gt
90017ab4:	8081      	strhgt	r1, [r0, #4]
90017ab6:	2b00      	cmp	r3, #0
90017ab8:	da04      	bge.n	90017ac4 <_ZN8touchgfx4Rect10restrictToEss+0x36>
90017aba:	88c1      	ldrh	r1, [r0, #6]
90017abc:	440b      	add	r3, r1
90017abe:	80c3      	strh	r3, [r0, #6]
90017ac0:	2300      	movs	r3, #0
90017ac2:	8043      	strh	r3, [r0, #2]
90017ac4:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
90017ac8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
90017acc:	1a52      	subs	r2, r2, r1
90017ace:	4293      	cmp	r3, r2
90017ad0:	bfc8      	it	gt
90017ad2:	80c2      	strhgt	r2, [r0, #6]
90017ad4:	bd10      	pop	{r4, pc}
	...

90017ad8 <_ZN8touchgfx11Application4drawERNS_4RectE>:
90017ad8:	4b10      	ldr	r3, [pc, #64]	; (90017b1c <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
90017ada:	b510      	push	{r4, lr}
90017adc:	460c      	mov	r4, r1
90017ade:	f9b3 2000 	ldrsh.w	r2, [r3]
90017ae2:	4b0f      	ldr	r3, [pc, #60]	; (90017b20 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
90017ae4:	4620      	mov	r0, r4
90017ae6:	f9b3 1000 	ldrsh.w	r1, [r3]
90017aea:	f7ff ffd0 	bl	90017a8e <_ZN8touchgfx4Rect10restrictToEss>
90017aee:	4b0d      	ldr	r3, [pc, #52]	; (90017b24 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
90017af0:	6818      	ldr	r0, [r3, #0]
90017af2:	b190      	cbz	r0, 90017b1a <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
90017af4:	6803      	ldr	r3, [r0, #0]
90017af6:	4621      	mov	r1, r4
90017af8:	689b      	ldr	r3, [r3, #8]
90017afa:	4798      	blx	r3
90017afc:	4b0a      	ldr	r3, [pc, #40]	; (90017b28 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
90017afe:	6818      	ldr	r0, [r3, #0]
90017b00:	b118      	cbz	r0, 90017b0a <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
90017b02:	6803      	ldr	r3, [r0, #0]
90017b04:	4621      	mov	r1, r4
90017b06:	689b      	ldr	r3, [r3, #8]
90017b08:	4798      	blx	r3
90017b0a:	4b08      	ldr	r3, [pc, #32]	; (90017b2c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
90017b0c:	4621      	mov	r1, r4
90017b0e:	6818      	ldr	r0, [r3, #0]
90017b10:	6803      	ldr	r3, [r0, #0]
90017b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90017b16:	69db      	ldr	r3, [r3, #28]
90017b18:	4718      	bx	r3
90017b1a:	bd10      	pop	{r4, pc}
90017b1c:	2402818a 	.word	0x2402818a
90017b20:	24028188 	.word	0x24028188
90017b24:	240281d8 	.word	0x240281d8
90017b28:	240281d4 	.word	0x240281d4
90017b2c:	24028194 	.word	0x24028194

90017b30 <_ZNK8touchgfx4Rect8includesERKS0_>:
90017b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90017b32:	4606      	mov	r6, r0
90017b34:	4608      	mov	r0, r1
90017b36:	460f      	mov	r7, r1
90017b38:	f7fa febf 	bl	900128ba <_ZNK8touchgfx4Rect7isEmptyEv>
90017b3c:	b9e8      	cbnz	r0, 90017b7a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90017b3e:	f9b7 5000 	ldrsh.w	r5, [r7]
90017b42:	f9b6 4000 	ldrsh.w	r4, [r6]
90017b46:	42a5      	cmp	r5, r4
90017b48:	db17      	blt.n	90017b7a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90017b4a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
90017b4e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
90017b52:	429a      	cmp	r2, r3
90017b54:	db11      	blt.n	90017b7a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90017b56:	88b9      	ldrh	r1, [r7, #4]
90017b58:	440d      	add	r5, r1
90017b5a:	88b1      	ldrh	r1, [r6, #4]
90017b5c:	440c      	add	r4, r1
90017b5e:	b22d      	sxth	r5, r5
90017b60:	b224      	sxth	r4, r4
90017b62:	42a5      	cmp	r5, r4
90017b64:	dc09      	bgt.n	90017b7a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90017b66:	88f8      	ldrh	r0, [r7, #6]
90017b68:	4410      	add	r0, r2
90017b6a:	88f2      	ldrh	r2, [r6, #6]
90017b6c:	4413      	add	r3, r2
90017b6e:	b200      	sxth	r0, r0
90017b70:	b21b      	sxth	r3, r3
90017b72:	4298      	cmp	r0, r3
90017b74:	bfcc      	ite	gt
90017b76:	2000      	movgt	r0, #0
90017b78:	2001      	movle	r0, #1
90017b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

90017b7c <_ZN8touchgfx11Application11getInstanceEv>:
90017b7c:	4b01      	ldr	r3, [pc, #4]	; (90017b84 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
90017b7e:	6818      	ldr	r0, [r3, #0]
90017b80:	4770      	bx	lr
90017b82:	bf00      	nop
90017b84:	240281e8 	.word	0x240281e8

90017b88 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
90017b88:	2300      	movs	r3, #0
90017b8a:	b510      	push	{r4, lr}
90017b8c:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
90017b90:	4604      	mov	r4, r0
90017b92:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
90017b96:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
90017b9a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
90017b9e:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
90017ba2:	429a      	cmp	r2, r3
90017ba4:	d90e      	bls.n	90017bc4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
90017ba6:	18e2      	adds	r2, r4, r3
90017ba8:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
90017bac:	b122      	cbz	r2, 90017bb8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
90017bae:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
90017bb2:	6803      	ldr	r3, [r0, #0]
90017bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90017bb6:	4798      	blx	r3
90017bb8:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
90017bbc:	3301      	adds	r3, #1
90017bbe:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
90017bc2:	e7ea      	b.n	90017b9a <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
90017bc4:	bd10      	pop	{r4, pc}

90017bc6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
90017bc6:	b530      	push	{r4, r5, lr}
90017bc8:	2200      	movs	r2, #0
90017bca:	f8b0 5080 	ldrh.w	r5, [r0, #128]	; 0x80
90017bce:	b293      	uxth	r3, r2
90017bd0:	429d      	cmp	r5, r3
90017bd2:	d90e      	bls.n	90017bf2 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
90017bd4:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
90017bd8:	428b      	cmp	r3, r1
90017bda:	d10b      	bne.n	90017bf4 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
90017bdc:	1884      	adds	r4, r0, r2
90017bde:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
90017be2:	b13b      	cbz	r3, 90017bf4 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
90017be4:	3b01      	subs	r3, #1
90017be6:	b2db      	uxtb	r3, r3
90017be8:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
90017bec:	b90b      	cbnz	r3, 90017bf2 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
90017bee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
90017bf2:	bd30      	pop	{r4, r5, pc}
90017bf4:	3201      	adds	r2, #1
90017bf6:	e7ea      	b.n	90017bce <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

90017bf8 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
90017bf8:	2300      	movs	r3, #0
90017bfa:	f100 0284 	add.w	r2, r0, #132	; 0x84
90017bfe:	30a4      	adds	r0, #164	; 0xa4
90017c00:	f820 3c24 	strh.w	r3, [r0, #-36]
90017c04:	f802 3b01 	strb.w	r3, [r2], #1
90017c08:	4282      	cmp	r2, r0
90017c0a:	d1fb      	bne.n	90017c04 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
90017c0c:	4770      	bx	lr
	...

90017c10 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
90017c10:	b570      	push	{r4, r5, r6, lr}
90017c12:	4c0b      	ldr	r4, [pc, #44]	; (90017c40 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
90017c14:	4605      	mov	r5, r0
90017c16:	460e      	mov	r6, r1
90017c18:	6820      	ldr	r0, [r4, #0]
90017c1a:	b110      	cbz	r0, 90017c22 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
90017c1c:	6803      	ldr	r3, [r0, #0]
90017c1e:	695b      	ldr	r3, [r3, #20]
90017c20:	4798      	blx	r3
90017c22:	1d28      	adds	r0, r5, #4
90017c24:	f7ff ffe8 	bl	90017bf8 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
90017c28:	6026      	str	r6, [r4, #0]
90017c2a:	6833      	ldr	r3, [r6, #0]
90017c2c:	4630      	mov	r0, r6
90017c2e:	68db      	ldr	r3, [r3, #12]
90017c30:	4798      	blx	r3
90017c32:	682b      	ldr	r3, [r5, #0]
90017c34:	4628      	mov	r0, r5
90017c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90017c38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90017c3c:	4718      	bx	r3
90017c3e:	bf00      	nop
90017c40:	240281d8 	.word	0x240281d8

90017c44 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
90017c44:	2300      	movs	r3, #0
90017c46:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
90017c4a:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
90017c4e:	461a      	mov	r2, r3
90017c50:	b5f0      	push	{r4, r5, r6, r7, lr}
90017c52:	461c      	mov	r4, r3
90017c54:	461d      	mov	r5, r3
90017c56:	459c      	cmp	ip, r3
90017c58:	dd1a      	ble.n	90017c90 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
90017c5a:	18c6      	adds	r6, r0, r3
90017c5c:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
90017c60:	b16e      	cbz	r6, 90017c7e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
90017c62:	429a      	cmp	r2, r3
90017c64:	d008      	beq.n	90017c78 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
90017c66:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
90017c6a:	fa1f fe82 	uxth.w	lr, r2
90017c6e:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
90017c72:	1887      	adds	r7, r0, r2
90017c74:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
90017c78:	3201      	adds	r2, #1
90017c7a:	3301      	adds	r3, #1
90017c7c:	e7eb      	b.n	90017c56 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
90017c7e:	4299      	cmp	r1, r3
90017c80:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
90017c84:	bfa8      	it	ge
90017c86:	3501      	addge	r5, #1
90017c88:	429e      	cmp	r6, r3
90017c8a:	bfc8      	it	gt
90017c8c:	3401      	addgt	r4, #1
90017c8e:	e7f4      	b.n	90017c7a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
90017c90:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
90017c94:	1b49      	subs	r1, r1, r5
90017c96:	1b1b      	subs	r3, r3, r4
90017c98:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
90017c9c:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
90017ca0:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
90017ca4:	4293      	cmp	r3, r2
90017ca6:	dd03      	ble.n	90017cb0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
90017ca8:	3b01      	subs	r3, #1
90017caa:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
90017cae:	e7f7      	b.n	90017ca0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
90017cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

90017cb4 <_ZN8touchgfx11Application15handleTickEventEv>:
90017cb4:	b570      	push	{r4, r5, r6, lr}
90017cb6:	4d16      	ldr	r5, [pc, #88]	; (90017d10 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
90017cb8:	4604      	mov	r4, r0
90017cba:	6828      	ldr	r0, [r5, #0]
90017cbc:	b140      	cbz	r0, 90017cd0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
90017cbe:	7a03      	ldrb	r3, [r0, #8]
90017cc0:	b933      	cbnz	r3, 90017cd0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
90017cc2:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
90017cc6:	6803      	ldr	r3, [r0, #0]
90017cc8:	689b      	ldr	r3, [r3, #8]
90017cca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90017cce:	4718      	bx	r3
90017cd0:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
90017cd4:	4e0f      	ldr	r6, [pc, #60]	; (90017d14 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
90017cd6:	b973      	cbnz	r3, 90017cf6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
90017cd8:	b168      	cbz	r0, 90017cf6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
90017cda:	7a03      	ldrb	r3, [r0, #8]
90017cdc:	b15b      	cbz	r3, 90017cf6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
90017cde:	6830      	ldr	r0, [r6, #0]
90017ce0:	b110      	cbz	r0, 90017ce8 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
90017ce2:	6803      	ldr	r3, [r0, #0]
90017ce4:	691b      	ldr	r3, [r3, #16]
90017ce6:	4798      	blx	r3
90017ce8:	6828      	ldr	r0, [r5, #0]
90017cea:	6803      	ldr	r3, [r0, #0]
90017cec:	68db      	ldr	r3, [r3, #12]
90017cee:	4798      	blx	r3
90017cf0:	2301      	movs	r3, #1
90017cf2:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
90017cf6:	3404      	adds	r4, #4
90017cf8:	4620      	mov	r0, r4
90017cfa:	f7ff ff45 	bl	90017b88 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
90017cfe:	4620      	mov	r0, r4
90017d00:	f7ff ffa0 	bl	90017c44 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
90017d04:	6830      	ldr	r0, [r6, #0]
90017d06:	b110      	cbz	r0, 90017d0e <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
90017d08:	6803      	ldr	r3, [r0, #0]
90017d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90017d0c:	e7dd      	b.n	90017cca <_ZN8touchgfx11Application15handleTickEventEv+0x16>
90017d0e:	bd70      	pop	{r4, r5, r6, pc}
90017d10:	240281dc 	.word	0x240281dc
90017d14:	240281d8 	.word	0x240281d8

90017d18 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
90017d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90017d1a:	2300      	movs	r3, #0
90017d1c:	4604      	mov	r4, r0
90017d1e:	460d      	mov	r5, r1
90017d20:	f8b0 1080 	ldrh.w	r1, [r0, #128]	; 0x80
90017d24:	4618      	mov	r0, r3
90017d26:	b29a      	uxth	r2, r3
90017d28:	4291      	cmp	r1, r2
90017d2a:	d912      	bls.n	90017d52 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
90017d2c:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
90017d30:	18e6      	adds	r6, r4, r3
90017d32:	42af      	cmp	r7, r5
90017d34:	f896 2084 	ldrb.w	r2, [r6, #132]	; 0x84
90017d38:	d105      	bne.n	90017d46 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
90017d3a:	2aff      	cmp	r2, #255	; 0xff
90017d3c:	d002      	beq.n	90017d44 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
90017d3e:	3201      	adds	r2, #1
90017d40:	f886 2084 	strb.w	r2, [r6, #132]	; 0x84
90017d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90017d46:	2a00      	cmp	r2, #0
90017d48:	f103 0301 	add.w	r3, r3, #1
90017d4c:	bf08      	it	eq
90017d4e:	2001      	moveq	r0, #1
90017d50:	e7e9      	b.n	90017d26 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
90017d52:	b120      	cbz	r0, 90017d5e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
90017d54:	2920      	cmp	r1, #32
90017d56:	d102      	bne.n	90017d5e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
90017d58:	4620      	mov	r0, r4
90017d5a:	f7ff ff73 	bl	90017c44 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
90017d5e:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
90017d62:	2b1f      	cmp	r3, #31
90017d64:	d8ee      	bhi.n	90017d44 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
90017d66:	18e2      	adds	r2, r4, r3
90017d68:	2101      	movs	r1, #1
90017d6a:	f882 1084 	strb.w	r1, [r2, #132]	; 0x84
90017d6e:	185a      	adds	r2, r3, r1
90017d70:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
90017d74:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
90017d78:	e7e4      	b.n	90017d44 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

90017d7a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
90017d7a:	4603      	mov	r3, r0
90017d7c:	f100 0140 	add.w	r1, r0, #64	; 0x40
90017d80:	2200      	movs	r2, #0
90017d82:	801a      	strh	r2, [r3, #0]
90017d84:	3308      	adds	r3, #8
90017d86:	f823 2c06 	strh.w	r2, [r3, #-6]
90017d8a:	f823 2c04 	strh.w	r2, [r3, #-4]
90017d8e:	f823 2c02 	strh.w	r2, [r3, #-2]
90017d92:	428b      	cmp	r3, r1
90017d94:	d1f5      	bne.n	90017d82 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
90017d96:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
90017d9a:	4770      	bx	lr

90017d9c <_ZN8touchgfx11ApplicationC1Ev>:
90017d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90017d9e:	4b1d      	ldr	r3, [pc, #116]	; (90017e14 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
90017da0:	4606      	mov	r6, r0
90017da2:	4604      	mov	r4, r0
90017da4:	2500      	movs	r5, #0
90017da6:	f846 3b04 	str.w	r3, [r6], #4
90017daa:	22a8      	movs	r2, #168	; 0xa8
90017dac:	2100      	movs	r1, #0
90017dae:	4630      	mov	r0, r6
90017db0:	f00f fc44 	bl	9002763c <memset>
90017db4:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
90017db8:	f104 00ac 	add.w	r0, r4, #172	; 0xac
90017dbc:	4f16      	ldr	r7, [pc, #88]	; (90017e18 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
90017dbe:	f7ff ffdc 	bl	90017d7a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
90017dc2:	f104 00ee 	add.w	r0, r4, #238	; 0xee
90017dc6:	f7ff ffd8 	bl	90017d7a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
90017dca:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
90017dce:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
90017dd2:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
90017dd6:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
90017dda:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
90017dde:	490f      	ldr	r1, [pc, #60]	; (90017e1c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
90017de0:	480f      	ldr	r0, [pc, #60]	; (90017e20 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
90017de2:	f00e fd1d 	bl	90026820 <CRC_Lock>
90017de6:	4b0f      	ldr	r3, [pc, #60]	; (90017e24 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
90017de8:	b158      	cbz	r0, 90017e02 <_ZN8touchgfx11ApplicationC1Ev+0x66>
90017dea:	801d      	strh	r5, [r3, #0]
90017dec:	2300      	movs	r3, #0
90017dee:	4a0e      	ldr	r2, [pc, #56]	; (90017e28 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
90017df0:	4630      	mov	r0, r6
90017df2:	6013      	str	r3, [r2, #0]
90017df4:	4a0d      	ldr	r2, [pc, #52]	; (90017e2c <_ZN8touchgfx11ApplicationC1Ev+0x90>)
90017df6:	603b      	str	r3, [r7, #0]
90017df8:	6013      	str	r3, [r2, #0]
90017dfa:	f7ff fefd 	bl	90017bf8 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
90017dfe:	4620      	mov	r0, r4
90017e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90017e02:	f44f 6280 	mov.w	r2, #1024	; 0x400
90017e06:	2002      	movs	r0, #2
90017e08:	801a      	strh	r2, [r3, #0]
90017e0a:	6038      	str	r0, [r7, #0]
90017e0c:	f001 faf0 	bl	900193f0 <_ZN8touchgfx6Screen4drawEv>
90017e10:	e7ec      	b.n	90017dec <_ZN8touchgfx11ApplicationC1Ev+0x50>
90017e12:	bf00      	nop
90017e14:	9002bf14 	.word	0x9002bf14
90017e18:	240281d8 	.word	0x240281d8
90017e1c:	b5e8b5cd 	.word	0xb5e8b5cd
90017e20:	f407a5c2 	.word	0xf407a5c2
90017e24:	24000068 	.word	0x24000068
90017e28:	240281e8 	.word	0x240281e8
90017e2c:	240281dc 	.word	0x240281dc

90017e30 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
90017e30:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
90017e34:	3b01      	subs	r3, #1
90017e36:	b29b      	uxth	r3, r3
90017e38:	428b      	cmp	r3, r1
90017e3a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
90017e3e:	b510      	push	{r4, lr}
90017e40:	d908      	bls.n	90017e54 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
90017e42:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
90017e46:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
90017e4a:	681a      	ldr	r2, [r3, #0]
90017e4c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
90017e50:	685a      	ldr	r2, [r3, #4]
90017e52:	6062      	str	r2, [r4, #4]
90017e54:	bd10      	pop	{r4, pc}
	...

90017e58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
90017e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017e5c:	b08f      	sub	sp, #60	; 0x3c
90017e5e:	4b8f      	ldr	r3, [pc, #572]	; (9001809c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
90017e60:	4683      	mov	fp, r0
90017e62:	ac0a      	add	r4, sp, #40	; 0x28
90017e64:	e884 0006 	stmia.w	r4, {r1, r2}
90017e68:	f9b3 2000 	ldrsh.w	r2, [r3]
90017e6c:	4620      	mov	r0, r4
90017e6e:	4b8c      	ldr	r3, [pc, #560]	; (900180a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
90017e70:	f9b3 1000 	ldrsh.w	r1, [r3]
90017e74:	f7ff fe0b 	bl	90017a8e <_ZN8touchgfx4Rect10restrictToEss>
90017e78:	4620      	mov	r0, r4
90017e7a:	f7fa fd1e 	bl	900128ba <_ZNK8touchgfx4Rect7isEmptyEv>
90017e7e:	2800      	cmp	r0, #0
90017e80:	d16a      	bne.n	90017f58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90017e82:	9403      	str	r4, [sp, #12]
90017e84:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
90017e88:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
90017e8c:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
90017e90:	9301      	str	r3, [sp, #4]
90017e92:	35a4      	adds	r5, #164	; 0xa4
90017e94:	b15c      	cbz	r4, 90017eae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
90017e96:	4629      	mov	r1, r5
90017e98:	9803      	ldr	r0, [sp, #12]
90017e9a:	f7ff fe49 	bl	90017b30 <_ZNK8touchgfx4Rect8includesERKS0_>
90017e9e:	3c01      	subs	r4, #1
90017ea0:	b118      	cbz	r0, 90017eaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
90017ea2:	b2a1      	uxth	r1, r4
90017ea4:	9801      	ldr	r0, [sp, #4]
90017ea6:	f7ff ffc3 	bl	90017e30 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90017eaa:	3d08      	subs	r5, #8
90017eac:	e7f2      	b.n	90017e94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
90017eae:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
90017eb2:	f108 33ff 	add.w	r3, r8, #4294967295
90017eb6:	f8cd 8010 	str.w	r8, [sp, #16]
90017eba:	9302      	str	r3, [sp, #8]
90017ebc:	ea4f 03c8 	mov.w	r3, r8, lsl #3
90017ec0:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
90017ec4:	9306      	str	r3, [sp, #24]
90017ec6:	445c      	add	r4, fp
90017ec8:	2500      	movs	r5, #0
90017eca:	4626      	mov	r6, r4
90017ecc:	f8cd 8014 	str.w	r8, [sp, #20]
90017ed0:	462f      	mov	r7, r5
90017ed2:	9b05      	ldr	r3, [sp, #20]
90017ed4:	2b00      	cmp	r3, #0
90017ed6:	d073      	beq.n	90017fc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
90017ed8:	9903      	ldr	r1, [sp, #12]
90017eda:	4630      	mov	r0, r6
90017edc:	f7ff fdb5 	bl	90017a4a <_ZNK8touchgfx4Rect9intersectERKS0_>
90017ee0:	b350      	cbz	r0, 90017f38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
90017ee2:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
90017ee6:	f9b6 c000 	ldrsh.w	ip, [r6]
90017eea:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
90017eee:	45e6      	cmp	lr, ip
90017ef0:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
90017ef4:	db33      	blt.n	90017f5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
90017ef6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
90017efa:	88b3      	ldrh	r3, [r6, #4]
90017efc:	4472      	add	r2, lr
90017efe:	4463      	add	r3, ip
90017f00:	b212      	sxth	r2, r2
90017f02:	b21b      	sxth	r3, r3
90017f04:	429a      	cmp	r2, r3
90017f06:	dc2a      	bgt.n	90017f5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
90017f08:	fa1f f289 	uxth.w	r2, r9
90017f0c:	88f3      	ldrh	r3, [r6, #6]
90017f0e:	45ca      	cmp	sl, r9
90017f10:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
90017f14:	4413      	add	r3, r2
90017f16:	fa1f fc8a 	uxth.w	ip, sl
90017f1a:	b29b      	uxth	r3, r3
90017f1c:	fa0f fe83 	sxth.w	lr, r3
90017f20:	db0f      	blt.n	90017f42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
90017f22:	eba3 030c 	sub.w	r3, r3, ip
90017f26:	1ac9      	subs	r1, r1, r3
90017f28:	b209      	sxth	r1, r1
90017f2a:	2900      	cmp	r1, #0
90017f2c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
90017f30:	dd12      	ble.n	90017f58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90017f32:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
90017f36:	4605      	mov	r5, r0
90017f38:	9b05      	ldr	r3, [sp, #20]
90017f3a:	3e08      	subs	r6, #8
90017f3c:	3b01      	subs	r3, #1
90017f3e:	9305      	str	r3, [sp, #20]
90017f40:	e7c7      	b.n	90017ed2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
90017f42:	4461      	add	r1, ip
90017f44:	b209      	sxth	r1, r1
90017f46:	4571      	cmp	r1, lr
90017f48:	dc38      	bgt.n	90017fbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90017f4a:	eba2 020c 	sub.w	r2, r2, ip
90017f4e:	b212      	sxth	r2, r2
90017f50:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
90017f54:	2a00      	cmp	r2, #0
90017f56:	dcee      	bgt.n	90017f36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
90017f58:	b00f      	add	sp, #60	; 0x3c
90017f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90017f5e:	45ca      	cmp	sl, r9
90017f60:	db2c      	blt.n	90017fbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90017f62:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
90017f66:	449a      	add	sl, r3
90017f68:	88f3      	ldrh	r3, [r6, #6]
90017f6a:	4499      	add	r9, r3
90017f6c:	fa0f fa8a 	sxth.w	sl, sl
90017f70:	fa0f f989 	sxth.w	r9, r9
90017f74:	45ca      	cmp	sl, r9
90017f76:	dc21      	bgt.n	90017fbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90017f78:	fa1f f28c 	uxth.w	r2, ip
90017f7c:	88b3      	ldrh	r3, [r6, #4]
90017f7e:	45e6      	cmp	lr, ip
90017f80:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
90017f84:	4413      	add	r3, r2
90017f86:	fa1f f98e 	uxth.w	r9, lr
90017f8a:	b29b      	uxth	r3, r3
90017f8c:	fa0f fa83 	sxth.w	sl, r3
90017f90:	db0a      	blt.n	90017fa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
90017f92:	eba3 0309 	sub.w	r3, r3, r9
90017f96:	1ac9      	subs	r1, r1, r3
90017f98:	b209      	sxth	r1, r1
90017f9a:	2900      	cmp	r1, #0
90017f9c:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
90017fa0:	ddda      	ble.n	90017f58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90017fa2:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
90017fa6:	e7c6      	b.n	90017f36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
90017fa8:	4449      	add	r1, r9
90017faa:	b209      	sxth	r1, r1
90017fac:	4551      	cmp	r1, sl
90017fae:	dc05      	bgt.n	90017fbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90017fb0:	eba2 0209 	sub.w	r2, r2, r9
90017fb4:	b212      	sxth	r2, r2
90017fb6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
90017fba:	e7cb      	b.n	90017f54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
90017fbc:	4607      	mov	r7, r0
90017fbe:	e7bb      	b.n	90017f38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
90017fc0:	2d00      	cmp	r5, #0
90017fc2:	d181      	bne.n	90017ec8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
90017fc4:	2f00      	cmp	r7, #0
90017fc6:	f000 81dd 	beq.w	90018384 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
90017fca:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
90017fce:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
90017fd2:	b2b3      	uxth	r3, r6
90017fd4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
90017fd8:	b2b9      	uxth	r1, r7
90017fda:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
90017fde:	441a      	add	r2, r3
90017fe0:	448a      	add	sl, r1
90017fe2:	9105      	str	r1, [sp, #20]
90017fe4:	b292      	uxth	r2, r2
90017fe6:	fa1f fa8a 	uxth.w	sl, sl
90017fea:	fa0f f882 	sxth.w	r8, r2
90017fee:	fa0f f98a 	sxth.w	r9, sl
90017ff2:	e9cd 2307 	strd	r2, r3, [sp, #28]
90017ff6:	9b04      	ldr	r3, [sp, #16]
90017ff8:	2b00      	cmp	r3, #0
90017ffa:	d053      	beq.n	900180a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
90017ffc:	9903      	ldr	r1, [sp, #12]
90017ffe:	4620      	mov	r0, r4
90018000:	f7ff fd23 	bl	90017a4a <_ZNK8touchgfx4Rect9intersectERKS0_>
90018004:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
90018008:	b1c0      	cbz	r0, 9001803c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
9001800a:	f9b4 e000 	ldrsh.w	lr, [r4]
9001800e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
90018012:	4576      	cmp	r6, lr
90018014:	dc23      	bgt.n	9001805e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
90018016:	f8b4 c004 	ldrh.w	ip, [r4, #4]
9001801a:	44f4      	add	ip, lr
9001801c:	fa0f fc8c 	sxth.w	ip, ip
90018020:	45e0      	cmp	r8, ip
90018022:	db1c      	blt.n	9001805e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
90018024:	428f      	cmp	r7, r1
90018026:	fa1f fc81 	uxth.w	ip, r1
9001802a:	88e1      	ldrh	r1, [r4, #6]
9001802c:	dc0d      	bgt.n	9001804a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
9001802e:	ebaa 0c0c 	sub.w	ip, sl, ip
90018032:	f8a4 9002 	strh.w	r9, [r4, #2]
90018036:	eba1 010c 	sub.w	r1, r1, ip
9001803a:	80e1      	strh	r1, [r4, #6]
9001803c:	4628      	mov	r0, r5
9001803e:	9904      	ldr	r1, [sp, #16]
90018040:	3c08      	subs	r4, #8
90018042:	4605      	mov	r5, r0
90018044:	3901      	subs	r1, #1
90018046:	9104      	str	r1, [sp, #16]
90018048:	e7d3      	b.n	90017ff2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
9001804a:	4461      	add	r1, ip
9001804c:	b209      	sxth	r1, r1
9001804e:	4549      	cmp	r1, r9
90018050:	dcf5      	bgt.n	9001803e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
90018052:	9905      	ldr	r1, [sp, #20]
90018054:	eba1 0c0c 	sub.w	ip, r1, ip
90018058:	f8a4 c006 	strh.w	ip, [r4, #6]
9001805c:	e7ee      	b.n	9001803c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
9001805e:	428f      	cmp	r7, r1
90018060:	dced      	bgt.n	9001803e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
90018062:	f8b4 c006 	ldrh.w	ip, [r4, #6]
90018066:	4461      	add	r1, ip
90018068:	b209      	sxth	r1, r1
9001806a:	4589      	cmp	r9, r1
9001806c:	dbe7      	blt.n	9001803e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
9001806e:	4576      	cmp	r6, lr
90018070:	fa1f fc8e 	uxth.w	ip, lr
90018074:	88a1      	ldrh	r1, [r4, #4]
90018076:	dc07      	bgt.n	90018088 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
90018078:	eba2 0c0c 	sub.w	ip, r2, ip
9001807c:	f8a4 8000 	strh.w	r8, [r4]
90018080:	eba1 010c 	sub.w	r1, r1, ip
90018084:	80a1      	strh	r1, [r4, #4]
90018086:	e7d9      	b.n	9001803c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
90018088:	4461      	add	r1, ip
9001808a:	b209      	sxth	r1, r1
9001808c:	4588      	cmp	r8, r1
9001808e:	dbd6      	blt.n	9001803e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
90018090:	eba3 0c0c 	sub.w	ip, r3, ip
90018094:	f8a4 c004 	strh.w	ip, [r4, #4]
90018098:	e7d0      	b.n	9001803c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
9001809a:	bf00      	nop
9001809c:	2402818a 	.word	0x2402818a
900180a0:	24028188 	.word	0x24028188
900180a4:	2d00      	cmp	r5, #0
900180a6:	f000 816d 	beq.w	90018384 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
900180aa:	9b06      	ldr	r3, [sp, #24]
900180ac:	445b      	add	r3, fp
900180ae:	461c      	mov	r4, r3
900180b0:	9b02      	ldr	r3, [sp, #8]
900180b2:	3301      	adds	r3, #1
900180b4:	f000 8166 	beq.w	90018384 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
900180b8:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
900180bc:	9803      	ldr	r0, [sp, #12]
900180be:	4629      	mov	r1, r5
900180c0:	f7ff fd36 	bl	90017b30 <_ZNK8touchgfx4Rect8includesERKS0_>
900180c4:	b120      	cbz	r0, 900180d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
900180c6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
900180ca:	9801      	ldr	r0, [sp, #4]
900180cc:	f7ff feb0 	bl	90017e30 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
900180d0:	9903      	ldr	r1, [sp, #12]
900180d2:	4628      	mov	r0, r5
900180d4:	f7ff fcb9 	bl	90017a4a <_ZNK8touchgfx4Rect9intersectERKS0_>
900180d8:	2800      	cmp	r0, #0
900180da:	f000 809c 	beq.w	90018216 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
900180de:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
900180e2:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
900180e6:	fa1f f189 	uxth.w	r1, r9
900180ea:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
900180ee:	9309      	str	r3, [sp, #36]	; 0x24
900180f0:	eb01 0c03 	add.w	ip, r1, r3
900180f4:	b283      	uxth	r3, r0
900180f6:	4548      	cmp	r0, r9
900180f8:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
900180fc:	fa1f fa8c 	uxth.w	sl, ip
90018100:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
90018104:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
90018108:	eb03 050c 	add.w	r5, r3, ip
9001810c:	b2ad      	uxth	r5, r5
9001810e:	9505      	str	r5, [sp, #20]
90018110:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
90018114:	9504      	str	r5, [sp, #16]
90018116:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
9001811a:	f340 8099 	ble.w	90018250 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
9001811e:	1a5b      	subs	r3, r3, r1
90018120:	4596      	cmp	lr, r2
90018122:	fa0f f08a 	sxth.w	r0, sl
90018126:	b29b      	uxth	r3, r3
90018128:	b21e      	sxth	r6, r3
9001812a:	dd2e      	ble.n	9001818a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
9001812c:	9f02      	ldr	r7, [sp, #8]
9001812e:	fa1f fe8e 	uxth.w	lr, lr
90018132:	b292      	uxth	r2, r2
90018134:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
90018138:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
9001813c:	9f04      	ldr	r7, [sp, #16]
9001813e:	ebae 0102 	sub.w	r1, lr, r2
90018142:	44a6      	add	lr, r4
90018144:	1a3f      	subs	r7, r7, r0
90018146:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
9001814a:	b289      	uxth	r1, r1
9001814c:	4402      	add	r2, r0
9001814e:	fa0f fe8e 	sxth.w	lr, lr
90018152:	b20d      	sxth	r5, r1
90018154:	b212      	sxth	r2, r2
90018156:	436f      	muls	r7, r5
90018158:	ebae 0202 	sub.w	r2, lr, r2
9001815c:	4372      	muls	r2, r6
9001815e:	4297      	cmp	r7, r2
90018160:	db09      	blt.n	90018176 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
90018162:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
90018166:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
9001816a:	449c      	add	ip, r3
9001816c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
90018170:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
90018174:	e686      	b.n	90017e84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90018176:	4421      	add	r1, r4
90018178:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
9001817c:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
90018180:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
90018184:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
90018188:	e67c      	b.n	90017e84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
9001818a:	9f04      	ldr	r7, [sp, #16]
9001818c:	42b8      	cmp	r0, r7
9001818e:	da27      	bge.n	900181e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
90018190:	9902      	ldr	r1, [sp, #8]
90018192:	1a3f      	subs	r7, r7, r0
90018194:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
90018198:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
9001819c:	eb05 010e 	add.w	r1, r5, lr
900181a0:	fa1f f881 	uxth.w	r8, r1
900181a4:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
900181a8:	4411      	add	r1, r2
900181aa:	fa0f f988 	sxth.w	r9, r8
900181ae:	eba2 020e 	sub.w	r2, r2, lr
900181b2:	eba1 0108 	sub.w	r1, r1, r8
900181b6:	4372      	muls	r2, r6
900181b8:	b289      	uxth	r1, r1
900181ba:	fa0f f881 	sxth.w	r8, r1
900181be:	fb08 f707 	mul.w	r7, r8, r7
900181c2:	42ba      	cmp	r2, r7
900181c4:	dc06      	bgt.n	900181d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
900181c6:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
900181ca:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
900181ce:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
900181d2:	e7ca      	b.n	9001816a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
900181d4:	4429      	add	r1, r5
900181d6:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
900181da:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
900181de:	e651      	b.n	90017e84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
900181e0:	9805      	ldr	r0, [sp, #20]
900181e2:	2d06      	cmp	r5, #6
900181e4:	ebaa 0000 	sub.w	r0, sl, r0
900181e8:	b280      	uxth	r0, r0
900181ea:	fa0f fe80 	sxth.w	lr, r0
900181ee:	d817      	bhi.n	90018220 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
900181f0:	9b04      	ldr	r3, [sp, #16]
900181f2:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
900181f6:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
900181fa:	1c6b      	adds	r3, r5, #1
900181fc:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
90018200:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
90018204:	9b01      	ldr	r3, [sp, #4]
90018206:	9801      	ldr	r0, [sp, #4]
90018208:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
9001820c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
90018210:	805a      	strh	r2, [r3, #2]
90018212:	809e      	strh	r6, [r3, #4]
90018214:	80d9      	strh	r1, [r3, #6]
90018216:	9b02      	ldr	r3, [sp, #8]
90018218:	3c08      	subs	r4, #8
9001821a:	3b01      	subs	r3, #1
9001821c:	9302      	str	r3, [sp, #8]
9001821e:	e747      	b.n	900180b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
90018220:	9a02      	ldr	r2, [sp, #8]
90018222:	45b6      	cmp	lr, r6
90018224:	ea4f 02c2 	mov.w	r2, r2, lsl #3
90018228:	db0d      	blt.n	90018246 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
9001822a:	449c      	add	ip, r3
9001822c:	445a      	add	r2, fp
9001822e:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
90018232:	fa1f fc8c 	uxth.w	ip, ip
90018236:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
9001823a:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
9001823e:	448c      	add	ip, r1
90018240:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
90018244:	e61e      	b.n	90017e84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90018246:	445a      	add	r2, fp
90018248:	4484      	add	ip, r0
9001824a:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
9001824e:	e78f      	b.n	90018170 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
90018250:	fa1f f18e 	uxth.w	r1, lr
90018254:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
90018258:	b293      	uxth	r3, r2
9001825a:	4596      	cmp	lr, r2
9001825c:	eb01 0806 	add.w	r8, r1, r6
90018260:	9306      	str	r3, [sp, #24]
90018262:	fa1f f888 	uxth.w	r8, r8
90018266:	9f06      	ldr	r7, [sp, #24]
90018268:	fa0f f388 	sxth.w	r3, r8
9001826c:	9307      	str	r3, [sp, #28]
9001826e:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
90018272:	443b      	add	r3, r7
90018274:	b29b      	uxth	r3, r3
90018276:	9308      	str	r3, [sp, #32]
90018278:	da24      	bge.n	900182c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
9001827a:	9905      	ldr	r1, [sp, #20]
9001827c:	eba3 0308 	sub.w	r3, r3, r8
90018280:	eba2 020e 	sub.w	r2, r2, lr
90018284:	eba9 0000 	sub.w	r0, r9, r0
90018288:	ebaa 0401 	sub.w	r4, sl, r1
9001828c:	b29b      	uxth	r3, r3
9001828e:	b2a4      	uxth	r4, r4
90018290:	b219      	sxth	r1, r3
90018292:	b225      	sxth	r5, r4
90018294:	4348      	muls	r0, r1
90018296:	436a      	muls	r2, r5
90018298:	4282      	cmp	r2, r0
9001829a:	9a02      	ldr	r2, [sp, #8]
9001829c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
900182a0:	445a      	add	r2, fp
900182a2:	dc06      	bgt.n	900182b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
900182a4:	9b07      	ldr	r3, [sp, #28]
900182a6:	44a4      	add	ip, r4
900182a8:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
900182ac:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
900182b0:	e75e      	b.n	90018170 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
900182b2:	9904      	ldr	r1, [sp, #16]
900182b4:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
900182b8:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
900182bc:	4433      	add	r3, r6
900182be:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
900182c2:	e5df      	b.n	90017e84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
900182c4:	9f06      	ldr	r7, [sp, #24]
900182c6:	9b04      	ldr	r3, [sp, #16]
900182c8:	1bc9      	subs	r1, r1, r7
900182ca:	fa0f f78a 	sxth.w	r7, sl
900182ce:	b289      	uxth	r1, r1
900182d0:	429f      	cmp	r7, r3
900182d2:	fa0f fe81 	sxth.w	lr, r1
900182d6:	dd23      	ble.n	90018320 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
900182d8:	9a05      	ldr	r2, [sp, #20]
900182da:	eba9 0000 	sub.w	r0, r9, r0
900182de:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
900182e2:	ebaa 0202 	sub.w	r2, sl, r2
900182e6:	9d07      	ldr	r5, [sp, #28]
900182e8:	fb0e f000 	mul.w	r0, lr, r0
900182ec:	b292      	uxth	r2, r2
900182ee:	eba5 0a03 	sub.w	sl, r5, r3
900182f2:	9b02      	ldr	r3, [sp, #8]
900182f4:	b214      	sxth	r4, r2
900182f6:	00db      	lsls	r3, r3, #3
900182f8:	fb04 fa0a 	mul.w	sl, r4, sl
900182fc:	445b      	add	r3, fp
900182fe:	4550      	cmp	r0, sl
90018300:	db03      	blt.n	9001830a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
90018302:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
90018306:	4494      	add	ip, r2
90018308:	e732      	b.n	90018170 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
9001830a:	9a04      	ldr	r2, [sp, #16]
9001830c:	4431      	add	r1, r6
9001830e:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
90018312:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
90018316:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
9001831a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
9001831e:	e75c      	b.n	900181da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
90018320:	9b08      	ldr	r3, [sp, #32]
90018322:	2d06      	cmp	r5, #6
90018324:	eba3 0308 	sub.w	r3, r3, r8
90018328:	b29b      	uxth	r3, r3
9001832a:	b218      	sxth	r0, r3
9001832c:	d813      	bhi.n	90018356 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
9001832e:	9b07      	ldr	r3, [sp, #28]
90018330:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
90018334:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
90018338:	1c6b      	adds	r3, r5, #1
9001833a:	9901      	ldr	r1, [sp, #4]
9001833c:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
90018340:	9b01      	ldr	r3, [sp, #4]
90018342:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
90018346:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
9001834a:	805a      	strh	r2, [r3, #2]
9001834c:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001834e:	f8a3 e006 	strh.w	lr, [r3, #6]
90018352:	809a      	strh	r2, [r3, #4]
90018354:	e75f      	b.n	90018216 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
90018356:	9c02      	ldr	r4, [sp, #8]
90018358:	4570      	cmp	r0, lr
9001835a:	ea4f 04c4 	mov.w	r4, r4, lsl #3
9001835e:	db0d      	blt.n	9001837c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
90018360:	4431      	add	r1, r6
90018362:	9b06      	ldr	r3, [sp, #24]
90018364:	445c      	add	r4, fp
90018366:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
9001836a:	b289      	uxth	r1, r1
9001836c:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
90018370:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
90018374:	4419      	add	r1, r3
90018376:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
9001837a:	e583      	b.n	90017e84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
9001837c:	445c      	add	r4, fp
9001837e:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
90018382:	e79b      	b.n	900182bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
90018384:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
90018388:	2e07      	cmp	r6, #7
9001838a:	ea4f 04c6 	mov.w	r4, r6, lsl #3
9001838e:	d812      	bhi.n	900183b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
90018390:	1c75      	adds	r5, r6, #1
90018392:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
90018396:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
9001839a:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
9001839e:	9d01      	ldr	r5, [sp, #4]
900183a0:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
900183a4:	442c      	add	r4, r5
900183a6:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
900183aa:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
900183ae:	8061      	strh	r1, [r4, #2]
900183b0:	80a2      	strh	r2, [r4, #4]
900183b2:	80e3      	strh	r3, [r4, #6]
900183b4:	e5d0      	b.n	90017f58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
900183b6:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
900183ba:	3e01      	subs	r6, #1
900183bc:	445c      	add	r4, fp
900183be:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
900183c2:	f04f 37ff 	mov.w	r7, #4294967295
900183c6:	2500      	movs	r5, #0
900183c8:	9305      	str	r3, [sp, #20]
900183ca:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
900183ce:	1e72      	subs	r2, r6, #1
900183d0:	9302      	str	r3, [sp, #8]
900183d2:	4691      	mov	r9, r2
900183d4:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
900183d8:	9304      	str	r3, [sp, #16]
900183da:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
900183de:	f1b9 3fff 	cmp.w	r9, #4294967295
900183e2:	6818      	ldr	r0, [r3, #0]
900183e4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
900183e8:	9207      	str	r2, [sp, #28]
900183ea:	bf16      	itet	ne
900183ec:	9905      	ldrne	r1, [sp, #20]
900183ee:	f8dd e00c 	ldreq.w	lr, [sp, #12]
900183f2:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
900183f6:	9306      	str	r3, [sp, #24]
900183f8:	f8be 1006 	ldrh.w	r1, [lr, #6]
900183fc:	f8be 8004 	ldrh.w	r8, [lr, #4]
90018400:	fb18 f801 	smulbb	r8, r8, r1
90018404:	6859      	ldr	r1, [r3, #4]
90018406:	e8ac 0003 	stmia.w	ip!, {r0, r1}
9001840a:	4671      	mov	r1, lr
9001840c:	a80c      	add	r0, sp, #48	; 0x30
9001840e:	f7fb ff78 	bl	90014302 <_ZN8touchgfx4Rect11expandToFitERKS0_>
90018412:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
90018416:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
9001841a:	f04f 0c08 	mov.w	ip, #8
9001841e:	9b04      	ldr	r3, [sp, #16]
90018420:	9a02      	ldr	r2, [sp, #8]
90018422:	fb10 f001 	smulbb	r0, r0, r1
90018426:	fb02 8803 	mla	r8, r2, r3, r8
9001842a:	eba0 0108 	sub.w	r1, r0, r8
9001842e:	fb90 f0fc 	sdiv	r0, r0, ip
90018432:	4288      	cmp	r0, r1
90018434:	dc20      	bgt.n	90018478 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
90018436:	4551      	cmp	r1, sl
90018438:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
9001843c:	da03      	bge.n	90018446 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
9001843e:	b1d9      	cbz	r1, 90018478 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
90018440:	468a      	mov	sl, r1
90018442:	464f      	mov	r7, r9
90018444:	4635      	mov	r5, r6
90018446:	f109 39ff 	add.w	r9, r9, #4294967295
9001844a:	f119 0f02 	cmn.w	r9, #2
9001844e:	d1c6      	bne.n	900183de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
90018450:	4616      	mov	r6, r2
90018452:	3201      	adds	r2, #1
90018454:	f1a4 0408 	sub.w	r4, r4, #8
90018458:	d1b7      	bne.n	900183ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
9001845a:	9b01      	ldr	r3, [sp, #4]
9001845c:	b2ac      	uxth	r4, r5
9001845e:	00ed      	lsls	r5, r5, #3
90018460:	1958      	adds	r0, r3, r5
90018462:	1c7b      	adds	r3, r7, #1
90018464:	d10b      	bne.n	9001847e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
90018466:	4601      	mov	r1, r0
90018468:	9803      	ldr	r0, [sp, #12]
9001846a:	f7fb ff4a 	bl	90014302 <_ZN8touchgfx4Rect11expandToFitERKS0_>
9001846e:	4621      	mov	r1, r4
90018470:	9801      	ldr	r0, [sp, #4]
90018472:	f7ff fcdd 	bl	90017e30 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90018476:	e505      	b.n	90017e84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90018478:	464f      	mov	r7, r9
9001847a:	4635      	mov	r5, r6
9001847c:	e7ed      	b.n	9001845a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
9001847e:	9b01      	ldr	r3, [sp, #4]
90018480:	00ff      	lsls	r7, r7, #3
90018482:	445d      	add	r5, fp
90018484:	19d9      	adds	r1, r3, r7
90018486:	445f      	add	r7, fp
90018488:	f7fb ff3b 	bl	90014302 <_ZN8touchgfx4Rect11expandToFitERKS0_>
9001848c:	9b03      	ldr	r3, [sp, #12]
9001848e:	cb03      	ldmia	r3!, {r0, r1}
90018490:	9b03      	ldr	r3, [sp, #12]
90018492:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
90018496:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
9001849a:	f855 0fac 	ldr.w	r0, [r5, #172]!
9001849e:	6869      	ldr	r1, [r5, #4]
900184a0:	c303      	stmia	r3!, {r0, r1}
900184a2:	e7e4      	b.n	9001846e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

900184a4 <_ZN8touchgfx11Application10invalidateEv>:
900184a4:	4b09      	ldr	r3, [pc, #36]	; (900184cc <_ZN8touchgfx11Application10invalidateEv+0x28>)
900184a6:	b082      	sub	sp, #8
900184a8:	2100      	movs	r1, #0
900184aa:	f9b3 2000 	ldrsh.w	r2, [r3]
900184ae:	4b08      	ldr	r3, [pc, #32]	; (900184d0 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
900184b0:	9100      	str	r1, [sp, #0]
900184b2:	f9b3 3000 	ldrsh.w	r3, [r3]
900184b6:	f8ad 2004 	strh.w	r2, [sp, #4]
900184ba:	f8ad 3006 	strh.w	r3, [sp, #6]
900184be:	ab02      	add	r3, sp, #8
900184c0:	e913 0006 	ldmdb	r3, {r1, r2}
900184c4:	b002      	add	sp, #8
900184c6:	f7ff bcc7 	b.w	90017e58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
900184ca:	bf00      	nop
900184cc:	24028188 	.word	0x24028188
900184d0:	2402818a 	.word	0x2402818a

900184d4 <_ZN8touchgfx11Application15drawCachedAreasEv>:
900184d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900184d8:	f500 7698 	add.w	r6, r0, #304	; 0x130
900184dc:	b09b      	sub	sp, #108	; 0x6c
900184de:	4604      	mov	r4, r0
900184e0:	4630      	mov	r0, r6
900184e2:	f7fa f9ea 	bl	900128ba <_ZNK8touchgfx4Rect7isEmptyEv>
900184e6:	4605      	mov	r5, r0
900184e8:	b940      	cbnz	r0, 900184fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
900184ea:	4620      	mov	r0, r4
900184ec:	e896 0006 	ldmia.w	r6, {r1, r2}
900184f0:	f7ff fcb2 	bl	90017e58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
900184f4:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
900184f8:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
900184fc:	4bc8      	ldr	r3, [pc, #800]	; (90018820 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
900184fe:	681b      	ldr	r3, [r3, #0]
90018500:	2b00      	cmp	r3, #0
90018502:	d03e      	beq.n	90018582 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
90018504:	4dc7      	ldr	r5, [pc, #796]	; (90018824 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
90018506:	4628      	mov	r0, r5
90018508:	f7fa f9d7 	bl	900128ba <_ZNK8touchgfx4Rect7isEmptyEv>
9001850c:	4606      	mov	r6, r0
9001850e:	2800      	cmp	r0, #0
90018510:	d137      	bne.n	90018582 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
90018512:	4628      	mov	r0, r5
90018514:	f7ff f9dc 	bl	900178d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
90018518:	6829      	ldr	r1, [r5, #0]
9001851a:	686a      	ldr	r2, [r5, #4]
9001851c:	4620      	mov	r0, r4
9001851e:	f7ff fc9b 	bl	90017e58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90018522:	802e      	strh	r6, [r5, #0]
90018524:	806e      	strh	r6, [r5, #2]
90018526:	80ae      	strh	r6, [r5, #4]
90018528:	80ee      	strh	r6, [r5, #6]
9001852a:	ae09      	add	r6, sp, #36	; 0x24
9001852c:	4630      	mov	r0, r6
9001852e:	f7ff fc24 	bl	90017d7a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
90018532:	4abd      	ldr	r2, [pc, #756]	; (90018828 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
90018534:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
90018538:	f104 00ac 	add.w	r0, r4, #172	; 0xac
9001853c:	8815      	ldrh	r5, [r2, #0]
9001853e:	9202      	str	r2, [sp, #8]
90018540:	462b      	mov	r3, r5
90018542:	429f      	cmp	r7, r3
90018544:	d924      	bls.n	90018590 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
90018546:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
9001854a:	2907      	cmp	r1, #7
9001854c:	d816      	bhi.n	9001857c <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
9001854e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
90018552:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
90018556:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
9001855a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
9001855e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
90018562:	1c4a      	adds	r2, r1, #1
90018564:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
90018568:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
9001856c:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
90018570:	f8a2 9002 	strh.w	r9, [r2, #2]
90018574:	f8a2 e004 	strh.w	lr, [r2, #4]
90018578:	f8a2 c006 	strh.w	ip, [r2, #6]
9001857c:	3301      	adds	r3, #1
9001857e:	b29b      	uxth	r3, r3
90018580:	e7df      	b.n	90018542 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
90018582:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
90018586:	2b00      	cmp	r3, #0
90018588:	d1cf      	bne.n	9001852a <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
9001858a:	b01b      	add	sp, #108	; 0x6c
9001858c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90018590:	462f      	mov	r7, r5
90018592:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
90018596:	42bb      	cmp	r3, r7
90018598:	d90b      	bls.n	900185b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
9001859a:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
9001859e:	3701      	adds	r7, #1
900185a0:	4620      	mov	r0, r4
900185a2:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
900185a6:	b2bf      	uxth	r7, r7
900185a8:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
900185ac:	f7ff fc54 	bl	90017e58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
900185b0:	e7ef      	b.n	90018592 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
900185b2:	4a9e      	ldr	r2, [pc, #632]	; (9001882c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
900185b4:	6813      	ldr	r3, [r2, #0]
900185b6:	4690      	mov	r8, r2
900185b8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
900185bc:	2b01      	cmp	r3, #1
900185be:	f040 80e4 	bne.w	9001878a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
900185c2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
900185c6:	4629      	mov	r1, r5
900185c8:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
900185cc:	2500      	movs	r5, #0
900185ce:	33ae      	adds	r3, #174	; 0xae
900185d0:	428f      	cmp	r7, r1
900185d2:	f103 0308 	add.w	r3, r3, #8
900185d6:	dd0a      	ble.n	900185ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
900185d8:	f833 2c08 	ldrh.w	r2, [r3, #-8]
900185dc:	3101      	adds	r1, #1
900185de:	f833 0c04 	ldrh.w	r0, [r3, #-4]
900185e2:	4402      	add	r2, r0
900185e4:	b212      	sxth	r2, r2
900185e6:	4295      	cmp	r5, r2
900185e8:	bfb8      	it	lt
900185ea:	4615      	movlt	r5, r2
900185ec:	e7f0      	b.n	900185d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
900185ee:	4b90      	ldr	r3, [pc, #576]	; (90018830 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
900185f0:	f8df b238 	ldr.w	fp, [pc, #568]	; 9001882c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
900185f4:	881b      	ldrh	r3, [r3, #0]
900185f6:	46d8      	mov	r8, fp
900185f8:	2b0f      	cmp	r3, #15
900185fa:	bf8c      	ite	hi
900185fc:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
90018600:	f04f 0a01 	movls.w	sl, #1
90018604:	2300      	movs	r3, #0
90018606:	e9cd 3305 	strd	r3, r3, [sp, #20]
9001860a:	f8bd 701a 	ldrh.w	r7, [sp, #26]
9001860e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
90018612:	4438      	add	r0, r7
90018614:	b207      	sxth	r7, r0
90018616:	f8db 0000 	ldr.w	r0, [fp]
9001861a:	42bd      	cmp	r5, r7
9001861c:	6803      	ldr	r3, [r0, #0]
9001861e:	f340 8084 	ble.w	9001872a <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
90018622:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90018626:	4798      	blx	r3
90018628:	eb07 030a 	add.w	r3, r7, sl
9001862c:	4298      	cmp	r0, r3
9001862e:	da07      	bge.n	90018640 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
90018630:	4285      	cmp	r5, r0
90018632:	dd05      	ble.n	90018640 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
90018634:	4287      	cmp	r7, r0
90018636:	dd6d      	ble.n	90018714 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
90018638:	2f00      	cmp	r7, #0
9001863a:	dd6b      	ble.n	90018714 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
9001863c:	4628      	mov	r0, r5
9001863e:	e004      	b.n	9001864a <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
90018640:	4287      	cmp	r7, r0
90018642:	dcfb      	bgt.n	9001863c <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
90018644:	42a8      	cmp	r0, r5
90018646:	bfa8      	it	ge
90018648:	4628      	movge	r0, r5
9001864a:	4b7a      	ldr	r3, [pc, #488]	; (90018834 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
9001864c:	1bc0      	subs	r0, r0, r7
9001864e:	2200      	movs	r2, #0
90018650:	f8ad 7016 	strh.w	r7, [sp, #22]
90018654:	f9b3 3000 	ldrsh.w	r3, [r3]
90018658:	f8ad 2014 	strh.w	r2, [sp, #20]
9001865c:	f8ad 3018 	strh.w	r3, [sp, #24]
90018660:	9b02      	ldr	r3, [sp, #8]
90018662:	f8ad 001a 	strh.w	r0, [sp, #26]
90018666:	881f      	ldrh	r7, [r3, #0]
90018668:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
9001866c:	42bb      	cmp	r3, r7
9001866e:	d9cc      	bls.n	9001860a <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
90018670:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
90018674:	ab07      	add	r3, sp, #28
90018676:	f852 0fac 	ldr.w	r0, [r2, #172]!
9001867a:	6851      	ldr	r1, [r2, #4]
9001867c:	c303      	stmia	r3!, {r0, r1}
9001867e:	a905      	add	r1, sp, #20
90018680:	a807      	add	r0, sp, #28
90018682:	f7ff f9e2 	bl	90017a4a <_ZNK8touchgfx4Rect9intersectERKS0_>
90018686:	2800      	cmp	r0, #0
90018688:	d04c      	beq.n	90018724 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
9001868a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
9001868e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
90018692:	f8bd 9020 	ldrh.w	r9, [sp, #32]
90018696:	4686      	mov	lr, r0
90018698:	4290      	cmp	r0, r2
9001869a:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
9001869e:	4448      	add	r0, r9
900186a0:	f8bd 9018 	ldrh.w	r9, [sp, #24]
900186a4:	bfb8      	it	lt
900186a6:	4696      	movlt	lr, r2
900186a8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
900186ac:	444a      	add	r2, r9
900186ae:	b280      	uxth	r0, r0
900186b0:	4299      	cmp	r1, r3
900186b2:	468c      	mov	ip, r1
900186b4:	b292      	uxth	r2, r2
900186b6:	9303      	str	r3, [sp, #12]
900186b8:	bfb8      	it	lt
900186ba:	469c      	movlt	ip, r3
900186bc:	b203      	sxth	r3, r0
900186be:	fa0f f982 	sxth.w	r9, r2
900186c2:	f8ad e01c 	strh.w	lr, [sp, #28]
900186c6:	f8ad c01e 	strh.w	ip, [sp, #30]
900186ca:	454b      	cmp	r3, r9
900186cc:	bfb8      	it	lt
900186ce:	4602      	movlt	r2, r0
900186d0:	9b03      	ldr	r3, [sp, #12]
900186d2:	eba2 020e 	sub.w	r2, r2, lr
900186d6:	f8ad 2020 	strh.w	r2, [sp, #32]
900186da:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
900186de:	4411      	add	r1, r2
900186e0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
900186e4:	4413      	add	r3, r2
900186e6:	b289      	uxth	r1, r1
900186e8:	b29b      	uxth	r3, r3
900186ea:	b208      	sxth	r0, r1
900186ec:	b21a      	sxth	r2, r3
900186ee:	4290      	cmp	r0, r2
900186f0:	bfb8      	it	lt
900186f2:	460b      	movlt	r3, r1
900186f4:	eba3 030c 	sub.w	r3, r3, ip
900186f8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
900186fc:	a807      	add	r0, sp, #28
900186fe:	f7fa f8dc 	bl	900128ba <_ZNK8touchgfx4Rect7isEmptyEv>
90018702:	b920      	cbnz	r0, 9001870e <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
90018704:	6823      	ldr	r3, [r4, #0]
90018706:	a907      	add	r1, sp, #28
90018708:	4620      	mov	r0, r4
9001870a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9001870c:	4798      	blx	r3
9001870e:	3701      	adds	r7, #1
90018710:	b2bf      	uxth	r7, r7
90018712:	e7a9      	b.n	90018668 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
90018714:	f8d8 0000 	ldr.w	r0, [r8]
90018718:	2101      	movs	r1, #1
9001871a:	6803      	ldr	r3, [r0, #0]
9001871c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
90018720:	4798      	blx	r3
90018722:	e772      	b.n	9001860a <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
90018724:	e9cd 0007 	strd	r0, r0, [sp, #28]
90018728:	e7e8      	b.n	900186fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
9001872a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9001872c:	4798      	blx	r3
9001872e:	4b42      	ldr	r3, [pc, #264]	; (90018838 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
90018730:	781b      	ldrb	r3, [r3, #0]
90018732:	2b00      	cmp	r3, #0
90018734:	f43f af29 	beq.w	9001858a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
90018738:	2300      	movs	r3, #0
9001873a:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
9001873e:	f104 00ee 	add.w	r0, r4, #238	; 0xee
90018742:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
90018746:	9b02      	ldr	r3, [sp, #8]
90018748:	881b      	ldrh	r3, [r3, #0]
9001874a:	429d      	cmp	r5, r3
9001874c:	f67f af1d 	bls.w	9001858a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
90018750:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
90018754:	2907      	cmp	r1, #7
90018756:	d815      	bhi.n	90018784 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
90018758:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
9001875c:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
90018760:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
90018764:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
90018768:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
9001876c:	1c4a      	adds	r2, r1, #1
9001876e:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
90018772:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
90018776:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
9001877a:	f8a2 e002 	strh.w	lr, [r2, #2]
9001877e:	f8a2 c004 	strh.w	ip, [r2, #4]
90018782:	80d7      	strh	r7, [r2, #6]
90018784:	3301      	adds	r3, #1
90018786:	b29b      	uxth	r3, r3
90018788:	e7df      	b.n	9001874a <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
9001878a:	2b02      	cmp	r3, #2
9001878c:	f040 8135 	bne.w	900189fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
90018790:	4b2a      	ldr	r3, [pc, #168]	; (9001883c <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
90018792:	f104 09ac 	add.w	r9, r4, #172	; 0xac
90018796:	781b      	ldrb	r3, [r3, #0]
90018798:	2b01      	cmp	r3, #1
9001879a:	f000 809c 	beq.w	900188d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
9001879e:	9b02      	ldr	r3, [sp, #8]
900187a0:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
900187a4:	f8b3 b000 	ldrh.w	fp, [r3]
900187a8:	f10b 0b01 	add.w	fp, fp, #1
900187ac:	fa1f fb8b 	uxth.w	fp, fp
900187b0:	2a00      	cmp	r2, #0
900187b2:	d0bc      	beq.n	9001872e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
900187b4:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
900187b8:	4659      	mov	r1, fp
900187ba:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
900187be:	f04f 0800 	mov.w	r8, #0
900187c2:	441d      	add	r5, r3
900187c4:	b22d      	sxth	r5, r5
900187c6:	b28b      	uxth	r3, r1
900187c8:	ea4f 07c8 	mov.w	r7, r8, lsl #3
900187cc:	429a      	cmp	r2, r3
900187ce:	f240 80c0 	bls.w	90018952 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
900187d2:	4427      	add	r7, r4
900187d4:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
900187d8:	4608      	mov	r0, r1
900187da:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
900187de:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
900187e2:	4563      	cmp	r3, ip
900187e4:	f340 80a2 	ble.w	9001892c <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
900187e8:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
900187ec:	4465      	add	r5, ip
900187ee:	b22d      	sxth	r5, r5
900187f0:	429d      	cmp	r5, r3
900187f2:	bfa8      	it	ge
900187f4:	461d      	movge	r5, r3
900187f6:	3101      	adds	r1, #1
900187f8:	4680      	mov	r8, r0
900187fa:	e7e4      	b.n	900187c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
900187fc:	d10b      	bne.n	90018816 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
900187fe:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
90018802:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
90018806:	458c      	cmp	ip, r1
90018808:	bfb4      	ite	lt
9001880a:	469c      	movlt	ip, r3
9001880c:	46bc      	movge	ip, r7
9001880e:	4572      	cmp	r2, lr
90018810:	bfb8      	it	lt
90018812:	4672      	movlt	r2, lr
90018814:	e087      	b.n	90018926 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
90018816:	428a      	cmp	r2, r1
90018818:	46bc      	mov	ip, r7
9001881a:	bfb8      	it	lt
9001881c:	460a      	movlt	r2, r1
9001881e:	e082      	b.n	90018926 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
90018820:	240281d4 	.word	0x240281d4
90018824:	240281e0 	.word	0x240281e0
90018828:	24000068 	.word	0x24000068
9001882c:	24028194 	.word	0x24028194
90018830:	2402818a 	.word	0x2402818a
90018834:	24028188 	.word	0x24028188
90018838:	24028192 	.word	0x24028192
9001883c:	2402818c 	.word	0x2402818c
90018840:	1961      	adds	r1, r4, r5
90018842:	ab07      	add	r3, sp, #28
90018844:	f851 0fac 	ldr.w	r0, [r1, #172]!
90018848:	6849      	ldr	r1, [r1, #4]
9001884a:	c303      	stmia	r3!, {r0, r1}
9001884c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
90018850:	a807      	add	r0, sp, #28
90018852:	f8bd 101c 	ldrh.w	r1, [sp, #28]
90018856:	2b13      	cmp	r3, #19
90018858:	440b      	add	r3, r1
9001885a:	bfd8      	it	le
9001885c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
90018860:	1a9b      	subs	r3, r3, r2
90018862:	f8ad 201c 	strh.w	r2, [sp, #28]
90018866:	f8ad 3020 	strh.w	r3, [sp, #32]
9001886a:	f7ff f84b 	bl	90017904 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001886e:	a807      	add	r0, sp, #28
90018870:	f7fa f823 	bl	900128ba <_ZNK8touchgfx4Rect7isEmptyEv>
90018874:	bb78      	cbnz	r0, 900188d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
90018876:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
9001887a:	4425      	add	r5, r4
9001887c:	f8d8 0000 	ldr.w	r0, [r8]
90018880:	f1bc 0f14 	cmp.w	ip, #20
90018884:	f8bd 3020 	ldrh.w	r3, [sp, #32]
90018888:	f8d0 e000 	ldr.w	lr, [r0]
9001888c:	bfa8      	it	ge
9001888e:	f04f 0c14 	movge.w	ip, #20
90018892:	f8bd 201e 	ldrh.w	r2, [sp, #30]
90018896:	f8bd 101c 	ldrh.w	r1, [sp, #28]
9001889a:	fa1f fc8c 	uxth.w	ip, ip
9001889e:	f8cd c000 	str.w	ip, [sp]
900188a2:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
900188a6:	47d0      	blx	sl
900188a8:	4682      	mov	sl, r0
900188aa:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
900188ae:	a807      	add	r0, sp, #28
900188b0:	f7ff f80e 	bl	900178d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
900188b4:	6823      	ldr	r3, [r4, #0]
900188b6:	4620      	mov	r0, r4
900188b8:	a907      	add	r1, sp, #28
900188ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900188bc:	4798      	blx	r3
900188be:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
900188c2:	eba0 000a 	sub.w	r0, r0, sl
900188c6:	b200      	sxth	r0, r0
900188c8:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
900188cc:	b918      	cbnz	r0, 900188d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
900188ce:	b2b9      	uxth	r1, r7
900188d0:	4648      	mov	r0, r9
900188d2:	f7ff faad 	bl	90017e30 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
900188d6:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
900188da:	f1bb 0f00 	cmp.w	fp, #0
900188de:	f43f af26 	beq.w	9001872e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
900188e2:	9b02      	ldr	r3, [sp, #8]
900188e4:	2700      	movs	r7, #0
900188e6:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
900188ea:	881b      	ldrh	r3, [r3, #0]
900188ec:	3301      	adds	r3, #1
900188ee:	b29b      	uxth	r3, r3
900188f0:	b299      	uxth	r1, r3
900188f2:	00fd      	lsls	r5, r7, #3
900188f4:	458b      	cmp	fp, r1
900188f6:	d9a3      	bls.n	90018840 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
900188f8:	4425      	add	r5, r4
900188fa:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
900188fe:	469c      	mov	ip, r3
90018900:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
90018904:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
90018908:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
9001890c:	4408      	add	r0, r1
9001890e:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
90018912:	4471      	add	r1, lr
90018914:	b200      	sxth	r0, r0
90018916:	b209      	sxth	r1, r1
90018918:	4288      	cmp	r0, r1
9001891a:	f6bf af6f 	bge.w	900187fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
9001891e:	4586      	cmp	lr, r0
90018920:	4672      	mov	r2, lr
90018922:	bfb8      	it	lt
90018924:	4602      	movlt	r2, r0
90018926:	3301      	adds	r3, #1
90018928:	4667      	mov	r7, ip
9001892a:	e7e1      	b.n	900188f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
9001892c:	d10c      	bne.n	90018948 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
9001892e:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
90018932:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
90018936:	4287      	cmp	r7, r0
90018938:	bfb4      	ite	lt
9001893a:	4608      	movlt	r0, r1
9001893c:	4640      	movge	r0, r8
9001893e:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
90018942:	443b      	add	r3, r7
90018944:	b21b      	sxth	r3, r3
90018946:	e753      	b.n	900187f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
90018948:	4565      	cmp	r5, ip
9001894a:	4640      	mov	r0, r8
9001894c:	bfa8      	it	ge
9001894e:	4665      	movge	r5, ip
90018950:	e751      	b.n	900187f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
90018952:	eb09 0007 	add.w	r0, r9, r7
90018956:	4427      	add	r7, r4
90018958:	9203      	str	r2, [sp, #12]
9001895a:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
9001895e:	f1ba 0f13 	cmp.w	sl, #19
90018962:	bfde      	ittt	le
90018964:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
90018968:	4455      	addle	r5, sl
9001896a:	b22d      	sxthle	r5, r5
9001896c:	f7f9 ffa5 	bl	900128ba <_ZNK8touchgfx4Rect7isEmptyEv>
90018970:	9a03      	ldr	r2, [sp, #12]
90018972:	2800      	cmp	r0, #0
90018974:	f47f af1c 	bne.w	900187b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
90018978:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
9001897c:	fa1f fa8a 	uxth.w	sl, sl
90018980:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90018984:	1aad      	subs	r5, r5, r2
90018986:	4829      	ldr	r0, [pc, #164]	; (90018a2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
90018988:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
9001898c:	2d14      	cmp	r5, #20
9001898e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
90018992:	6800      	ldr	r0, [r0, #0]
90018994:	bfa8      	it	ge
90018996:	2514      	movge	r5, #20
90018998:	f8ad 101c 	strh.w	r1, [sp, #28]
9001899c:	f8ad 201e 	strh.w	r2, [sp, #30]
900189a0:	b289      	uxth	r1, r1
900189a2:	f8ad 3020 	strh.w	r3, [sp, #32]
900189a6:	b2ad      	uxth	r5, r5
900189a8:	f8d0 c000 	ldr.w	ip, [r0]
900189ac:	b292      	uxth	r2, r2
900189ae:	4555      	cmp	r5, sl
900189b0:	bf94      	ite	ls
900189b2:	9500      	strls	r5, [sp, #0]
900189b4:	f8cd a000 	strhi.w	sl, [sp]
900189b8:	b29b      	uxth	r3, r3
900189ba:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
900189be:	47a8      	blx	r5
900189c0:	6823      	ldr	r3, [r4, #0]
900189c2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
900189c6:	a907      	add	r1, sp, #28
900189c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900189ca:	4620      	mov	r0, r4
900189cc:	4798      	blx	r3
900189ce:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
900189d2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
900189d6:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
900189da:	1a5b      	subs	r3, r3, r1
900189dc:	440a      	add	r2, r1
900189de:	b21b      	sxth	r3, r3
900189e0:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
900189e4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
900189e8:	2b00      	cmp	r3, #0
900189ea:	f47f aed8 	bne.w	9001879e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
900189ee:	fa1f f188 	uxth.w	r1, r8
900189f2:	4648      	mov	r0, r9
900189f4:	f7ff fa1c 	bl	90017e30 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
900189f8:	e6d1      	b.n	9001879e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
900189fa:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
900189fe:	42ab      	cmp	r3, r5
90018a00:	f67f ae95 	bls.w	9001872e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90018a04:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
90018a08:	ab07      	add	r3, sp, #28
90018a0a:	f852 0fac 	ldr.w	r0, [r2, #172]!
90018a0e:	6851      	ldr	r1, [r2, #4]
90018a10:	c303      	stmia	r3!, {r0, r1}
90018a12:	a807      	add	r0, sp, #28
90018a14:	f7f9 ff51 	bl	900128ba <_ZNK8touchgfx4Rect7isEmptyEv>
90018a18:	b920      	cbnz	r0, 90018a24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
90018a1a:	6823      	ldr	r3, [r4, #0]
90018a1c:	a907      	add	r1, sp, #28
90018a1e:	4620      	mov	r0, r4
90018a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90018a22:	4798      	blx	r3
90018a24:	3501      	adds	r5, #1
90018a26:	b2ad      	uxth	r5, r5
90018a28:	e7e7      	b.n	900189fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
90018a2a:	bf00      	nop
90018a2c:	24028194 	.word	0x24028194

90018a30 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
90018a30:	4b03      	ldr	r3, [pc, #12]	; (90018a40 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
90018a32:	2200      	movs	r2, #0
90018a34:	801a      	strh	r2, [r3, #0]
90018a36:	805a      	strh	r2, [r3, #2]
90018a38:	809a      	strh	r2, [r3, #4]
90018a3a:	80da      	strh	r2, [r3, #6]
90018a3c:	4770      	bx	lr
90018a3e:	bf00      	nop
90018a40:	240281e0 	.word	0x240281e0

90018a44 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
90018a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018a48:	b09d      	sub	sp, #116	; 0x74
90018a4a:	4606      	mov	r6, r0
90018a4c:	4614      	mov	r4, r2
90018a4e:	468a      	mov	sl, r1
90018a50:	a803      	add	r0, sp, #12
90018a52:	461d      	mov	r5, r3
90018a54:	f000 fe79 	bl	9001974a <_ZN8touchgfx12TextProviderC1Ev>
90018a58:	6833      	ldr	r3, [r6, #0]
90018a5a:	4630      	mov	r0, r6
90018a5c:	f242 0b0b 	movw	fp, #8203	; 0x200b
90018a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90018a62:	4798      	blx	r3
90018a64:	6833      	ldr	r3, [r6, #0]
90018a66:	4607      	mov	r7, r0
90018a68:	4630      	mov	r0, r6
90018a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90018a6c:	4798      	blx	r3
90018a6e:	462a      	mov	r2, r5
90018a70:	2500      	movs	r5, #0
90018a72:	4621      	mov	r1, r4
90018a74:	9000      	str	r0, [sp, #0]
90018a76:	463b      	mov	r3, r7
90018a78:	462c      	mov	r4, r5
90018a7a:	46a9      	mov	r9, r5
90018a7c:	46a8      	mov	r8, r5
90018a7e:	a803      	add	r0, sp, #12
90018a80:	f000 febe 	bl	90019800 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90018a84:	2300      	movs	r3, #0
90018a86:	9302      	str	r3, [sp, #8]
90018a88:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90018a8c:	429c      	cmp	r4, r3
90018a8e:	d002      	beq.n	90018a96 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
90018a90:	455c      	cmp	r4, fp
90018a92:	bf18      	it	ne
90018a94:	4625      	movne	r5, r4
90018a96:	ab02      	add	r3, sp, #8
90018a98:	4632      	mov	r2, r6
90018a9a:	4651      	mov	r1, sl
90018a9c:	a803      	add	r0, sp, #12
90018a9e:	f001 f9b5 	bl	90019e0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90018aa2:	4604      	mov	r4, r0
90018aa4:	b108      	cbz	r0, 90018aaa <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
90018aa6:	280a      	cmp	r0, #10
90018aa8:	d10a      	bne.n	90018ac0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
90018aaa:	45c1      	cmp	r9, r8
90018aac:	bf38      	it	cc
90018aae:	46c1      	movcc	r9, r8
90018ab0:	f04f 0800 	mov.w	r8, #0
90018ab4:	2c00      	cmp	r4, #0
90018ab6:	d1e5      	bne.n	90018a84 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
90018ab8:	4648      	mov	r0, r9
90018aba:	b01d      	add	sp, #116	; 0x74
90018abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90018ac0:	9a02      	ldr	r2, [sp, #8]
90018ac2:	2a00      	cmp	r2, #0
90018ac4:	d0de      	beq.n	90018a84 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
90018ac6:	7b57      	ldrb	r7, [r2, #13]
90018ac8:	4629      	mov	r1, r5
90018aca:	6833      	ldr	r3, [r6, #0]
90018acc:	007f      	lsls	r7, r7, #1
90018ace:	8894      	ldrh	r4, [r2, #4]
90018ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90018ad2:	f407 7080 	and.w	r0, r7, #256	; 0x100
90018ad6:	7a97      	ldrb	r7, [r2, #10]
90018ad8:	4307      	orrs	r7, r0
90018ada:	4630      	mov	r0, r6
90018adc:	4798      	blx	r3
90018ade:	4438      	add	r0, r7
90018ae0:	4480      	add	r8, r0
90018ae2:	fa1f f888 	uxth.w	r8, r8
90018ae6:	e7e5      	b.n	90018ab4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

90018ae8 <_ZNK8touchgfx4Font12getCharWidthEt>:
90018ae8:	b508      	push	{r3, lr}
90018aea:	6803      	ldr	r3, [r0, #0]
90018aec:	68db      	ldr	r3, [r3, #12]
90018aee:	4798      	blx	r3
90018af0:	b128      	cbz	r0, 90018afe <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
90018af2:	7b43      	ldrb	r3, [r0, #13]
90018af4:	7a80      	ldrb	r0, [r0, #10]
90018af6:	005b      	lsls	r3, r3, #1
90018af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
90018afc:	4318      	orrs	r0, r3
90018afe:	bd08      	pop	{r3, pc}

90018b00 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
90018b00:	b40e      	push	{r1, r2, r3}
90018b02:	b5f0      	push	{r4, r5, r6, r7, lr}
90018b04:	b09e      	sub	sp, #120	; 0x78
90018b06:	4605      	mov	r5, r0
90018b08:	ab23      	add	r3, sp, #140	; 0x8c
90018b0a:	a805      	add	r0, sp, #20
90018b0c:	f853 4b04 	ldr.w	r4, [r3], #4
90018b10:	9303      	str	r3, [sp, #12]
90018b12:	f000 fe1a 	bl	9001974a <_ZN8touchgfx12TextProviderC1Ev>
90018b16:	682b      	ldr	r3, [r5, #0]
90018b18:	4628      	mov	r0, r5
90018b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90018b1c:	4798      	blx	r3
90018b1e:	682b      	ldr	r3, [r5, #0]
90018b20:	4606      	mov	r6, r0
90018b22:	4628      	mov	r0, r5
90018b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90018b26:	4798      	blx	r3
90018b28:	4633      	mov	r3, r6
90018b2a:	4621      	mov	r1, r4
90018b2c:	ae1e      	add	r6, sp, #120	; 0x78
90018b2e:	2400      	movs	r4, #0
90018b30:	9000      	str	r0, [sp, #0]
90018b32:	9a03      	ldr	r2, [sp, #12]
90018b34:	a805      	add	r0, sp, #20
90018b36:	f000 fe63 	bl	90019800 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90018b3a:	f846 4d68 	str.w	r4, [r6, #-104]!
90018b3e:	462a      	mov	r2, r5
90018b40:	4633      	mov	r3, r6
90018b42:	4621      	mov	r1, r4
90018b44:	a805      	add	r0, sp, #20
90018b46:	f001 f961 	bl	90019e0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90018b4a:	b300      	cbz	r0, 90018b8e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
90018b4c:	280a      	cmp	r0, #10
90018b4e:	d01a      	beq.n	90018b86 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
90018b50:	9f04      	ldr	r7, [sp, #16]
90018b52:	b1c7      	cbz	r7, 90018b86 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
90018b54:	7b78      	ldrb	r0, [r7, #13]
90018b56:	7a3b      	ldrb	r3, [r7, #8]
90018b58:	00c1      	lsls	r1, r0, #3
90018b5a:	88ea      	ldrh	r2, [r5, #6]
90018b5c:	f401 7180 	and.w	r1, r1, #256	; 0x100
90018b60:	4319      	orrs	r1, r3
90018b62:	0643      	lsls	r3, r0, #25
90018b64:	ea4f 1000 	mov.w	r0, r0, lsl #4
90018b68:	bf48      	it	mi
90018b6a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
90018b6e:	f400 7080 	and.w	r0, r0, #256	; 0x100
90018b72:	bf48      	it	mi
90018b74:	b219      	sxthmi	r1, r3
90018b76:	79fb      	ldrb	r3, [r7, #7]
90018b78:	4303      	orrs	r3, r0
90018b7a:	4413      	add	r3, r2
90018b7c:	1a5b      	subs	r3, r3, r1
90018b7e:	b21b      	sxth	r3, r3
90018b80:	429c      	cmp	r4, r3
90018b82:	bfb8      	it	lt
90018b84:	461c      	movlt	r4, r3
90018b86:	4633      	mov	r3, r6
90018b88:	462a      	mov	r2, r5
90018b8a:	2100      	movs	r1, #0
90018b8c:	e7da      	b.n	90018b44 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
90018b8e:	b2a0      	uxth	r0, r4
90018b90:	b01e      	add	sp, #120	; 0x78
90018b92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
90018b96:	b003      	add	sp, #12
90018b98:	4770      	bx	lr

90018b9a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
90018b9a:	7a43      	ldrb	r3, [r0, #9]
90018b9c:	8880      	ldrh	r0, [r0, #4]
90018b9e:	4418      	add	r0, r3
90018ba0:	b280      	uxth	r0, r0
90018ba2:	4770      	bx	lr

90018ba4 <_ZNK8touchgfx4Font13getFontHeightEv>:
90018ba4:	6803      	ldr	r3, [r0, #0]
90018ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90018ba8:	4718      	bx	r3

90018baa <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
90018baa:	b40e      	push	{r1, r2, r3}
90018bac:	b570      	push	{r4, r5, r6, lr}
90018bae:	b09d      	sub	sp, #116	; 0x74
90018bb0:	4604      	mov	r4, r0
90018bb2:	ab21      	add	r3, sp, #132	; 0x84
90018bb4:	a803      	add	r0, sp, #12
90018bb6:	f853 5b04 	ldr.w	r5, [r3], #4
90018bba:	9302      	str	r3, [sp, #8]
90018bbc:	f000 fdc5 	bl	9001974a <_ZN8touchgfx12TextProviderC1Ev>
90018bc0:	6823      	ldr	r3, [r4, #0]
90018bc2:	4620      	mov	r0, r4
90018bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90018bc6:	4798      	blx	r3
90018bc8:	6823      	ldr	r3, [r4, #0]
90018bca:	4606      	mov	r6, r0
90018bcc:	4620      	mov	r0, r4
90018bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90018bd0:	2401      	movs	r4, #1
90018bd2:	4798      	blx	r3
90018bd4:	4633      	mov	r3, r6
90018bd6:	9000      	str	r0, [sp, #0]
90018bd8:	4629      	mov	r1, r5
90018bda:	9a02      	ldr	r2, [sp, #8]
90018bdc:	a803      	add	r0, sp, #12
90018bde:	f000 fe0f 	bl	90019800 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90018be2:	a803      	add	r0, sp, #12
90018be4:	f001 f9de 	bl	90019fa4 <_ZN8touchgfx12TextProvider11getNextCharEv>
90018be8:	b2a3      	uxth	r3, r4
90018bea:	b138      	cbz	r0, 90018bfc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
90018bec:	280a      	cmp	r0, #10
90018bee:	a803      	add	r0, sp, #12
90018bf0:	bf04      	itt	eq
90018bf2:	3301      	addeq	r3, #1
90018bf4:	b21c      	sxtheq	r4, r3
90018bf6:	f001 f9d5 	bl	90019fa4 <_ZN8touchgfx12TextProvider11getNextCharEv>
90018bfa:	e7f5      	b.n	90018be8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
90018bfc:	4618      	mov	r0, r3
90018bfe:	b01d      	add	sp, #116	; 0x74
90018c00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90018c04:	b003      	add	sp, #12
90018c06:	4770      	bx	lr

90018c08 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
90018c08:	b40e      	push	{r1, r2, r3}
90018c0a:	b5f0      	push	{r4, r5, r6, r7, lr}
90018c0c:	b09e      	sub	sp, #120	; 0x78
90018c0e:	4604      	mov	r4, r0
90018c10:	ab23      	add	r3, sp, #140	; 0x8c
90018c12:	a805      	add	r0, sp, #20
90018c14:	f853 5b04 	ldr.w	r5, [r3], #4
90018c18:	9303      	str	r3, [sp, #12]
90018c1a:	f000 fd96 	bl	9001974a <_ZN8touchgfx12TextProviderC1Ev>
90018c1e:	6823      	ldr	r3, [r4, #0]
90018c20:	4620      	mov	r0, r4
90018c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90018c24:	4798      	blx	r3
90018c26:	6823      	ldr	r3, [r4, #0]
90018c28:	4606      	mov	r6, r0
90018c2a:	4620      	mov	r0, r4
90018c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90018c2e:	4798      	blx	r3
90018c30:	4633      	mov	r3, r6
90018c32:	4629      	mov	r1, r5
90018c34:	9000      	str	r0, [sp, #0]
90018c36:	9a03      	ldr	r2, [sp, #12]
90018c38:	a805      	add	r0, sp, #20
90018c3a:	f000 fde1 	bl	90019800 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90018c3e:	ad1e      	add	r5, sp, #120	; 0x78
90018c40:	2100      	movs	r1, #0
90018c42:	f647 76ff 	movw	r6, #32767	; 0x7fff
90018c46:	4622      	mov	r2, r4
90018c48:	a805      	add	r0, sp, #20
90018c4a:	f845 1d68 	str.w	r1, [r5, #-104]!
90018c4e:	462b      	mov	r3, r5
90018c50:	f001 f8dc 	bl	90019e0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90018c54:	b1d8      	cbz	r0, 90018c8e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
90018c56:	280a      	cmp	r0, #10
90018c58:	d012      	beq.n	90018c80 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
90018c5a:	9804      	ldr	r0, [sp, #16]
90018c5c:	b180      	cbz	r0, 90018c80 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
90018c5e:	7b47      	ldrb	r7, [r0, #13]
90018c60:	88e2      	ldrh	r2, [r4, #6]
90018c62:	00fb      	lsls	r3, r7, #3
90018c64:	f403 7180 	and.w	r1, r3, #256	; 0x100
90018c68:	7a03      	ldrb	r3, [r0, #8]
90018c6a:	430b      	orrs	r3, r1
90018c6c:	0679      	lsls	r1, r7, #25
90018c6e:	bf44      	itt	mi
90018c70:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90018c74:	b21b      	sxthmi	r3, r3
90018c76:	1ad3      	subs	r3, r2, r3
90018c78:	b21b      	sxth	r3, r3
90018c7a:	429e      	cmp	r6, r3
90018c7c:	bfa8      	it	ge
90018c7e:	461e      	movge	r6, r3
90018c80:	462b      	mov	r3, r5
90018c82:	4622      	mov	r2, r4
90018c84:	2100      	movs	r1, #0
90018c86:	a805      	add	r0, sp, #20
90018c88:	f001 f8c0 	bl	90019e0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90018c8c:	e7e2      	b.n	90018c54 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
90018c8e:	4630      	mov	r0, r6
90018c90:	b01e      	add	sp, #120	; 0x78
90018c92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
90018c96:	b003      	add	sp, #12
90018c98:	4770      	bx	lr

90018c9a <_ZNK8touchgfx8Drawable10invalidateEv>:
90018c9a:	b513      	push	{r0, r1, r4, lr}
90018c9c:	6803      	ldr	r3, [r0, #0]
90018c9e:	2400      	movs	r4, #0
90018ca0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
90018ca4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90018ca8:	f8ad 1004 	strh.w	r1, [sp, #4]
90018cac:	4669      	mov	r1, sp
90018cae:	691b      	ldr	r3, [r3, #16]
90018cb0:	9400      	str	r4, [sp, #0]
90018cb2:	f8ad 2006 	strh.w	r2, [sp, #6]
90018cb6:	4798      	blx	r3
90018cb8:	b002      	add	sp, #8
90018cba:	bd10      	pop	{r4, pc}

90018cbc <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
90018cbc:	b538      	push	{r3, r4, r5, lr}
90018cbe:	680b      	ldr	r3, [r1, #0]
90018cc0:	460c      	mov	r4, r1
90018cc2:	4605      	mov	r5, r0
90018cc4:	68db      	ldr	r3, [r3, #12]
90018cc6:	4798      	blx	r3
90018cc8:	6823      	ldr	r3, [r4, #0]
90018cca:	4620      	mov	r0, r4
90018ccc:	4629      	mov	r1, r5
90018cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90018cd0:	4798      	blx	r3
90018cd2:	4628      	mov	r0, r5
90018cd4:	bd38      	pop	{r3, r4, r5, pc}

90018cd6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
90018cd6:	b410      	push	{r4}
90018cd8:	880a      	ldrh	r2, [r1, #0]
90018cda:	8884      	ldrh	r4, [r0, #4]
90018cdc:	4422      	add	r2, r4
90018cde:	800a      	strh	r2, [r1, #0]
90018ce0:	884a      	ldrh	r2, [r1, #2]
90018ce2:	88c4      	ldrh	r4, [r0, #6]
90018ce4:	4422      	add	r2, r4
90018ce6:	804a      	strh	r2, [r1, #2]
90018ce8:	6940      	ldr	r0, [r0, #20]
90018cea:	b120      	cbz	r0, 90018cf6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
90018cec:	6803      	ldr	r3, [r0, #0]
90018cee:	f85d 4b04 	ldr.w	r4, [sp], #4
90018cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90018cf4:	4718      	bx	r3
90018cf6:	f85d 4b04 	ldr.w	r4, [sp], #4
90018cfa:	4770      	bx	lr

90018cfc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
90018cfc:	b570      	push	{r4, r5, r6, lr}
90018cfe:	8882      	ldrh	r2, [r0, #4]
90018d00:	460c      	mov	r4, r1
90018d02:	880b      	ldrh	r3, [r1, #0]
90018d04:	4605      	mov	r5, r0
90018d06:	4413      	add	r3, r2
90018d08:	800b      	strh	r3, [r1, #0]
90018d0a:	884b      	ldrh	r3, [r1, #2]
90018d0c:	88c2      	ldrh	r2, [r0, #6]
90018d0e:	4413      	add	r3, r2
90018d10:	804b      	strh	r3, [r1, #2]
90018d12:	1d01      	adds	r1, r0, #4
90018d14:	4620      	mov	r0, r4
90018d16:	f7f9 fd8d 	bl	90012834 <_ZN8touchgfx4RectaNERKS0_>
90018d1a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
90018d1e:	2b00      	cmp	r3, #0
90018d20:	dd0b      	ble.n	90018d3a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
90018d22:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90018d26:	2b00      	cmp	r3, #0
90018d28:	dd07      	ble.n	90018d3a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
90018d2a:	6968      	ldr	r0, [r5, #20]
90018d2c:	b128      	cbz	r0, 90018d3a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
90018d2e:	6803      	ldr	r3, [r0, #0]
90018d30:	4621      	mov	r1, r4
90018d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90018d34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90018d38:	4718      	bx	r3
90018d3a:	bd70      	pop	{r4, r5, r6, pc}

90018d3c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
90018d3c:	b570      	push	{r4, r5, r6, lr}
90018d3e:	8882      	ldrh	r2, [r0, #4]
90018d40:	460c      	mov	r4, r1
90018d42:	880b      	ldrh	r3, [r1, #0]
90018d44:	4605      	mov	r5, r0
90018d46:	4413      	add	r3, r2
90018d48:	800b      	strh	r3, [r1, #0]
90018d4a:	884b      	ldrh	r3, [r1, #2]
90018d4c:	88c2      	ldrh	r2, [r0, #6]
90018d4e:	4413      	add	r3, r2
90018d50:	804b      	strh	r3, [r1, #2]
90018d52:	1d01      	adds	r1, r0, #4
90018d54:	4620      	mov	r0, r4
90018d56:	f7f9 fd6d 	bl	90012834 <_ZN8touchgfx4RectaNERKS0_>
90018d5a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
90018d5e:	2b00      	cmp	r3, #0
90018d60:	dd18      	ble.n	90018d94 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
90018d62:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90018d66:	2b00      	cmp	r3, #0
90018d68:	dd14      	ble.n	90018d94 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
90018d6a:	6968      	ldr	r0, [r5, #20]
90018d6c:	b128      	cbz	r0, 90018d7a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
90018d6e:	6803      	ldr	r3, [r0, #0]
90018d70:	4621      	mov	r1, r4
90018d72:	691b      	ldr	r3, [r3, #16]
90018d74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90018d78:	4718      	bx	r3
90018d7a:	4b07      	ldr	r3, [pc, #28]	; (90018d98 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
90018d7c:	681b      	ldr	r3, [r3, #0]
90018d7e:	3304      	adds	r3, #4
90018d80:	429d      	cmp	r5, r3
90018d82:	d107      	bne.n	90018d94 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
90018d84:	f7fe fefa 	bl	90017b7c <_ZN8touchgfx11Application11getInstanceEv>
90018d88:	6821      	ldr	r1, [r4, #0]
90018d8a:	6862      	ldr	r2, [r4, #4]
90018d8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90018d90:	f7ff b862 	b.w	90017e58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90018d94:	bd70      	pop	{r4, r5, r6, pc}
90018d96:	bf00      	nop
90018d98:	240281d8 	.word	0x240281d8

90018d9c <_ZN8touchgfx8Drawable12moveRelativeEss>:
90018d9c:	b570      	push	{r4, r5, r6, lr}
90018d9e:	4604      	mov	r4, r0
90018da0:	4616      	mov	r6, r2
90018da2:	460d      	mov	r5, r1
90018da4:	b901      	cbnz	r1, 90018da8 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
90018da6:	b192      	cbz	r2, 90018dce <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
90018da8:	6823      	ldr	r3, [r4, #0]
90018daa:	4620      	mov	r0, r4
90018dac:	699b      	ldr	r3, [r3, #24]
90018dae:	4798      	blx	r3
90018db0:	88e2      	ldrh	r2, [r4, #6]
90018db2:	88a1      	ldrh	r1, [r4, #4]
90018db4:	4620      	mov	r0, r4
90018db6:	4432      	add	r2, r6
90018db8:	4429      	add	r1, r5
90018dba:	b212      	sxth	r2, r2
90018dbc:	b209      	sxth	r1, r1
90018dbe:	f7fa f809 	bl	90012dd4 <_ZN8touchgfx8Drawable5setXYEss>
90018dc2:	6823      	ldr	r3, [r4, #0]
90018dc4:	4620      	mov	r0, r4
90018dc6:	699b      	ldr	r3, [r3, #24]
90018dc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90018dcc:	4718      	bx	r3
90018dce:	bd70      	pop	{r4, r5, r6, pc}

90018dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
90018dd0:	b510      	push	{r4, lr}
90018dd2:	2300      	movs	r3, #0
90018dd4:	4604      	mov	r4, r0
90018dd6:	4608      	mov	r0, r1
90018dd8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
90018ddc:	8023      	strh	r3, [r4, #0]
90018dde:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90018de2:	8063      	strh	r3, [r4, #2]
90018de4:	6803      	ldr	r3, [r0, #0]
90018de6:	80a1      	strh	r1, [r4, #4]
90018de8:	4621      	mov	r1, r4
90018dea:	80e2      	strh	r2, [r4, #6]
90018dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90018dee:	4798      	blx	r3
90018df0:	4620      	mov	r0, r4
90018df2:	bd10      	pop	{r4, pc}

90018df4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
90018df4:	b530      	push	{r4, r5, lr}
90018df6:	8083      	strh	r3, [r0, #4]
90018df8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
90018dfc:	f89d 5018 	ldrb.w	r5, [sp, #24]
90018e00:	80c3      	strh	r3, [r0, #6]
90018e02:	f89d 3010 	ldrb.w	r3, [sp, #16]
90018e06:	6141      	str	r1, [r0, #20]
90018e08:	7203      	strb	r3, [r0, #8]
90018e0a:	f89d 3014 	ldrb.w	r3, [sp, #20]
90018e0e:	8302      	strh	r2, [r0, #24]
90018e10:	7243      	strb	r3, [r0, #9]
90018e12:	7a83      	ldrb	r3, [r0, #10]
90018e14:	f365 0306 	bfi	r3, r5, #0, #7
90018e18:	f89d 501c 	ldrb.w	r5, [sp, #28]
90018e1c:	f365 13c7 	bfi	r3, r5, #7, #1
90018e20:	7283      	strb	r3, [r0, #10]
90018e22:	f89d 3020 	ldrb.w	r3, [sp, #32]
90018e26:	72c3      	strb	r3, [r0, #11]
90018e28:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
90018e2c:	7303      	strb	r3, [r0, #12]
90018e2e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
90018e32:	81c3      	strh	r3, [r0, #14]
90018e34:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
90018e38:	8203      	strh	r3, [r0, #16]
90018e3a:	4b01      	ldr	r3, [pc, #4]	; (90018e40 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
90018e3c:	6003      	str	r3, [r0, #0]
90018e3e:	bd30      	pop	{r4, r5, pc}
90018e40:	9002bf60 	.word	0x9002bf60

90018e44 <_ZNK8touchgfx9ConstFont4findEt>:
90018e44:	b5f0      	push	{r4, r5, r6, r7, lr}
90018e46:	6944      	ldr	r4, [r0, #20]
90018e48:	b3bc      	cbz	r4, 90018eba <_ZNK8touchgfx9ConstFont4findEt+0x76>
90018e4a:	88a3      	ldrh	r3, [r4, #4]
90018e4c:	8b02      	ldrh	r2, [r0, #24]
90018e4e:	1acb      	subs	r3, r1, r3
90018e50:	f102 32ff 	add.w	r2, r2, #4294967295
90018e54:	d431      	bmi.n	90018eba <_ZNK8touchgfx9ConstFont4findEt+0x76>
90018e56:	4293      	cmp	r3, r2
90018e58:	dd0c      	ble.n	90018e74 <_ZNK8touchgfx9ConstFont4findEt+0x30>
90018e5a:	230e      	movs	r3, #14
90018e5c:	fb03 4302 	mla	r3, r3, r2, r4
90018e60:	889b      	ldrh	r3, [r3, #4]
90018e62:	1a5b      	subs	r3, r3, r1
90018e64:	1ad3      	subs	r3, r2, r3
90018e66:	429a      	cmp	r2, r3
90018e68:	db27      	blt.n	90018eba <_ZNK8touchgfx9ConstFont4findEt+0x76>
90018e6a:	2b00      	cmp	r3, #0
90018e6c:	bfbc      	itt	lt
90018e6e:	2302      	movlt	r3, #2
90018e70:	fb92 f3f3 	sdivlt	r3, r2, r3
90018e74:	2500      	movs	r5, #0
90018e76:	260e      	movs	r6, #14
90018e78:	4295      	cmp	r5, r2
90018e7a:	dc1e      	bgt.n	90018eba <_ZNK8touchgfx9ConstFont4findEt+0x76>
90018e7c:	fb06 4003 	mla	r0, r6, r3, r4
90018e80:	8887      	ldrh	r7, [r0, #4]
90018e82:	42b9      	cmp	r1, r7
90018e84:	d01a      	beq.n	90018ebc <_ZNK8touchgfx9ConstFont4findEt+0x78>
90018e86:	d20d      	bcs.n	90018ea4 <_ZNK8touchgfx9ConstFont4findEt+0x60>
90018e88:	1e5a      	subs	r2, r3, #1
90018e8a:	4295      	cmp	r5, r2
90018e8c:	dc15      	bgt.n	90018eba <_ZNK8touchgfx9ConstFont4findEt+0x76>
90018e8e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
90018e92:	1a5b      	subs	r3, r3, r1
90018e94:	1ad3      	subs	r3, r2, r3
90018e96:	429a      	cmp	r2, r3
90018e98:	db0f      	blt.n	90018eba <_ZNK8touchgfx9ConstFont4findEt+0x76>
90018e9a:	429d      	cmp	r5, r3
90018e9c:	ddec      	ble.n	90018e78 <_ZNK8touchgfx9ConstFont4findEt+0x34>
90018e9e:	1953      	adds	r3, r2, r5
90018ea0:	105b      	asrs	r3, r3, #1
90018ea2:	e7e9      	b.n	90018e78 <_ZNK8touchgfx9ConstFont4findEt+0x34>
90018ea4:	1c5d      	adds	r5, r3, #1
90018ea6:	42aa      	cmp	r2, r5
90018ea8:	db07      	blt.n	90018eba <_ZNK8touchgfx9ConstFont4findEt+0x76>
90018eaa:	8a43      	ldrh	r3, [r0, #18]
90018eac:	1acb      	subs	r3, r1, r3
90018eae:	442b      	add	r3, r5
90018eb0:	429d      	cmp	r5, r3
90018eb2:	dc02      	bgt.n	90018eba <_ZNK8touchgfx9ConstFont4findEt+0x76>
90018eb4:	429a      	cmp	r2, r3
90018eb6:	dadf      	bge.n	90018e78 <_ZNK8touchgfx9ConstFont4findEt+0x34>
90018eb8:	e7f1      	b.n	90018e9e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
90018eba:	2000      	movs	r0, #0
90018ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}

90018ebe <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
90018ebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90018ec0:	4604      	mov	r4, r0
90018ec2:	4617      	mov	r7, r2
90018ec4:	461e      	mov	r6, r3
90018ec6:	b911      	cbnz	r1, 90018ece <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
90018ec8:	2500      	movs	r5, #0
90018eca:	4628      	mov	r0, r5
90018ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90018ece:	290a      	cmp	r1, #10
90018ed0:	d0fa      	beq.n	90018ec8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90018ed2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
90018ed6:	4291      	cmp	r1, r2
90018ed8:	d0f6      	beq.n	90018ec8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90018eda:	f242 020b 	movw	r2, #8203	; 0x200b
90018ede:	4291      	cmp	r1, r2
90018ee0:	d0f2      	beq.n	90018ec8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90018ee2:	f7ff ffaf 	bl	90018e44 <_ZNK8touchgfx9ConstFont4findEt>
90018ee6:	4605      	mov	r5, r0
90018ee8:	b950      	cbnz	r0, 90018f00 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
90018eea:	6823      	ldr	r3, [r4, #0]
90018eec:	4620      	mov	r0, r4
90018eee:	691b      	ldr	r3, [r3, #16]
90018ef0:	4798      	blx	r3
90018ef2:	4601      	mov	r1, r0
90018ef4:	4620      	mov	r0, r4
90018ef6:	f7ff ffa5 	bl	90018e44 <_ZNK8touchgfx9ConstFont4findEt>
90018efa:	4605      	mov	r5, r0
90018efc:	2800      	cmp	r0, #0
90018efe:	d0e3      	beq.n	90018ec8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90018f00:	6823      	ldr	r3, [r4, #0]
90018f02:	4629      	mov	r1, r5
90018f04:	4620      	mov	r0, r4
90018f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90018f08:	4798      	blx	r3
90018f0a:	6038      	str	r0, [r7, #0]
90018f0c:	6823      	ldr	r3, [r4, #0]
90018f0e:	4620      	mov	r0, r4
90018f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90018f12:	4798      	blx	r3
90018f14:	7030      	strb	r0, [r6, #0]
90018f16:	e7d8      	b.n	90018eca <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

90018f18 <_ZN8touchgfx4clzuEm>:
90018f18:	4603      	mov	r3, r0
90018f1a:	b1c8      	cbz	r0, 90018f50 <_ZN8touchgfx4clzuEm+0x38>
90018f1c:	0c02      	lsrs	r2, r0, #16
90018f1e:	0412      	lsls	r2, r2, #16
90018f20:	b9a2      	cbnz	r2, 90018f4c <_ZN8touchgfx4clzuEm+0x34>
90018f22:	0403      	lsls	r3, r0, #16
90018f24:	2010      	movs	r0, #16
90018f26:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
90018f2a:	bf04      	itt	eq
90018f2c:	021b      	lsleq	r3, r3, #8
90018f2e:	3008      	addeq	r0, #8
90018f30:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
90018f34:	bf04      	itt	eq
90018f36:	011b      	lsleq	r3, r3, #4
90018f38:	3004      	addeq	r0, #4
90018f3a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
90018f3e:	bf04      	itt	eq
90018f40:	009b      	lsleq	r3, r3, #2
90018f42:	3002      	addeq	r0, #2
90018f44:	2b00      	cmp	r3, #0
90018f46:	db04      	blt.n	90018f52 <_ZN8touchgfx4clzuEm+0x3a>
90018f48:	3001      	adds	r0, #1
90018f4a:	4770      	bx	lr
90018f4c:	2000      	movs	r0, #0
90018f4e:	e7ea      	b.n	90018f26 <_ZN8touchgfx4clzuEm+0xe>
90018f50:	2020      	movs	r0, #32
90018f52:	4770      	bx	lr

90018f54 <_ZN8touchgfx7muldivuEmmmRm>:
90018f54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018f58:	4680      	mov	r8, r0
90018f5a:	460f      	mov	r7, r1
90018f5c:	4615      	mov	r5, r2
90018f5e:	461e      	mov	r6, r3
90018f60:	f7ff ffda 	bl	90018f18 <_ZN8touchgfx4clzuEm>
90018f64:	b998      	cbnz	r0, 90018f8e <_ZN8touchgfx7muldivuEmmmRm+0x3a>
90018f66:	4608      	mov	r0, r1
90018f68:	f7ff ffd6 	bl	90018f18 <_ZN8touchgfx4clzuEm>
90018f6c:	2800      	cmp	r0, #0
90018f6e:	dd08      	ble.n	90018f82 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
90018f70:	4633      	mov	r3, r6
90018f72:	462a      	mov	r2, r5
90018f74:	4641      	mov	r1, r8
90018f76:	4638      	mov	r0, r7
90018f78:	f7ff ffec 	bl	90018f54 <_ZN8touchgfx7muldivuEmmmRm>
90018f7c:	b003      	add	sp, #12
90018f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90018f82:	f04f 33ff 	mov.w	r3, #4294967295
90018f86:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
90018f8a:	6033      	str	r3, [r6, #0]
90018f8c:	e7f6      	b.n	90018f7c <_ZN8touchgfx7muldivuEmmmRm+0x28>
90018f8e:	fa31 f900 	lsrs.w	r9, r1, r0
90018f92:	fb01 f308 	mul.w	r3, r1, r8
90018f96:	d105      	bne.n	90018fa4 <_ZN8touchgfx7muldivuEmmmRm+0x50>
90018f98:	fbb3 f0f5 	udiv	r0, r3, r5
90018f9c:	fb05 3510 	mls	r5, r5, r0, r3
90018fa0:	6035      	str	r5, [r6, #0]
90018fa2:	e7eb      	b.n	90018f7c <_ZN8touchgfx7muldivuEmmmRm+0x28>
90018fa4:	2301      	movs	r3, #1
90018fa6:	fa08 fb00 	lsl.w	fp, r8, r0
90018faa:	462a      	mov	r2, r5
90018fac:	4641      	mov	r1, r8
90018fae:	fa03 f000 	lsl.w	r0, r3, r0
90018fb2:	4633      	mov	r3, r6
90018fb4:	fbbb faf5 	udiv	sl, fp, r5
90018fb8:	3801      	subs	r0, #1
90018fba:	fb09 f40a 	mul.w	r4, r9, sl
90018fbe:	4038      	ands	r0, r7
90018fc0:	f7ff ffc8 	bl	90018f54 <_ZN8touchgfx7muldivuEmmmRm>
90018fc4:	462a      	mov	r2, r5
90018fc6:	4607      	mov	r7, r0
90018fc8:	ab01      	add	r3, sp, #4
90018fca:	fb05 b11a 	mls	r1, r5, sl, fp
90018fce:	4648      	mov	r0, r9
90018fd0:	f7ff ffc0 	bl	90018f54 <_ZN8touchgfx7muldivuEmmmRm>
90018fd4:	9b01      	ldr	r3, [sp, #4]
90018fd6:	6832      	ldr	r2, [r6, #0]
90018fd8:	441a      	add	r2, r3
90018fda:	fbb2 f3f5 	udiv	r3, r2, r5
90018fde:	441c      	add	r4, r3
90018fe0:	fb05 2513 	mls	r5, r5, r3, r2
90018fe4:	443c      	add	r4, r7
90018fe6:	4420      	add	r0, r4
90018fe8:	e7da      	b.n	90018fa0 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

90018fea <_ZN8touchgfx6muldivElllRl>:
90018fea:	b573      	push	{r0, r1, r4, r5, r6, lr}
90018fec:	2800      	cmp	r0, #0
90018fee:	461e      	mov	r6, r3
90018ff0:	bfba      	itte	lt
90018ff2:	4240      	neglt	r0, r0
90018ff4:	f04f 34ff 	movlt.w	r4, #4294967295
90018ff8:	2401      	movge	r4, #1
90018ffa:	2900      	cmp	r1, #0
90018ffc:	bfbc      	itt	lt
90018ffe:	4249      	neglt	r1, r1
90019000:	4264      	neglt	r4, r4
90019002:	2a00      	cmp	r2, #0
90019004:	bfb6      	itet	lt
90019006:	4265      	neglt	r5, r4
90019008:	4625      	movge	r5, r4
9001900a:	4252      	neglt	r2, r2
9001900c:	4288      	cmp	r0, r1
9001900e:	bfc2      	ittt	gt
90019010:	4603      	movgt	r3, r0
90019012:	4608      	movgt	r0, r1
90019014:	4619      	movgt	r1, r3
90019016:	ab01      	add	r3, sp, #4
90019018:	f7ff ff9c 	bl	90018f54 <_ZN8touchgfx7muldivuEmmmRm>
9001901c:	9b01      	ldr	r3, [sp, #4]
9001901e:	4368      	muls	r0, r5
90019020:	435c      	muls	r4, r3
90019022:	6034      	str	r4, [r6, #0]
90019024:	b002      	add	sp, #8
90019026:	bd70      	pop	{r4, r5, r6, pc}

90019028 <_ZN8touchgfx6muldivElll>:
90019028:	b573      	push	{r0, r1, r4, r5, r6, lr}
9001902a:	4606      	mov	r6, r0
9001902c:	ab01      	add	r3, sp, #4
9001902e:	460d      	mov	r5, r1
90019030:	4614      	mov	r4, r2
90019032:	f7ff ffda 	bl	90018fea <_ZN8touchgfx6muldivElllRl>
90019036:	2e00      	cmp	r6, #0
90019038:	db20      	blt.n	9001907c <_ZN8touchgfx6muldivElll+0x54>
9001903a:	bf14      	ite	ne
9001903c:	2301      	movne	r3, #1
9001903e:	2300      	moveq	r3, #0
90019040:	2d00      	cmp	r5, #0
90019042:	db1e      	blt.n	90019082 <_ZN8touchgfx6muldivElll+0x5a>
90019044:	bf14      	ite	ne
90019046:	2201      	movne	r2, #1
90019048:	2200      	moveq	r2, #0
9001904a:	2c00      	cmp	r4, #0
9001904c:	fb03 f202 	mul.w	r2, r3, r2
90019050:	db1a      	blt.n	90019088 <_ZN8touchgfx6muldivElll+0x60>
90019052:	bf14      	ite	ne
90019054:	2301      	movne	r3, #1
90019056:	2300      	moveq	r3, #0
90019058:	4353      	muls	r3, r2
9001905a:	2b01      	cmp	r3, #1
9001905c:	d117      	bne.n	9001908e <_ZN8touchgfx6muldivElll+0x66>
9001905e:	2c00      	cmp	r4, #0
90019060:	9b01      	ldr	r3, [sp, #4]
90019062:	bfb8      	it	lt
90019064:	4264      	neglt	r4, r4
90019066:	2b00      	cmp	r3, #0
90019068:	f104 0401 	add.w	r4, r4, #1
9001906c:	bfb8      	it	lt
9001906e:	425b      	neglt	r3, r3
90019070:	ebb3 0f64 	cmp.w	r3, r4, asr #1
90019074:	db00      	blt.n	90019078 <_ZN8touchgfx6muldivElll+0x50>
90019076:	3001      	adds	r0, #1
90019078:	b002      	add	sp, #8
9001907a:	bd70      	pop	{r4, r5, r6, pc}
9001907c:	f04f 33ff 	mov.w	r3, #4294967295
90019080:	e7de      	b.n	90019040 <_ZN8touchgfx6muldivElll+0x18>
90019082:	f04f 32ff 	mov.w	r2, #4294967295
90019086:	e7e0      	b.n	9001904a <_ZN8touchgfx6muldivElll+0x22>
90019088:	f04f 33ff 	mov.w	r3, #4294967295
9001908c:	e7e4      	b.n	90019058 <_ZN8touchgfx6muldivElll+0x30>
9001908e:	3301      	adds	r3, #1
90019090:	d1f2      	bne.n	90019078 <_ZN8touchgfx6muldivElll+0x50>
90019092:	9b01      	ldr	r3, [sp, #4]
90019094:	2c00      	cmp	r4, #0
90019096:	bfb8      	it	lt
90019098:	4264      	neglt	r4, r4
9001909a:	2b00      	cmp	r3, #0
9001909c:	bfb8      	it	lt
9001909e:	425b      	neglt	r3, r3
900190a0:	ebb3 0f64 	cmp.w	r3, r4, asr #1
900190a4:	bfc8      	it	gt
900190a6:	f100 30ff 	addgt.w	r0, r0, #4294967295
900190aa:	e7e5      	b.n	90019078 <_ZN8touchgfx6muldivElll+0x50>

900190ac <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
900190ac:	2000      	movs	r0, #0
900190ae:	4770      	bx	lr

900190b0 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
900190b0:	2001      	movs	r0, #1
900190b2:	4770      	bx	lr

900190b4 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
900190b4:	2002      	movs	r0, #2
900190b6:	4770      	bx	lr

900190b8 <_ZN8touchgfx6ScreenD1Ev>:
900190b8:	4770      	bx	lr

900190ba <_ZN8touchgfx6Screen11setupScreenEv>:
900190ba:	4770      	bx	lr

900190bc <_ZN8touchgfx12GestureEventD1Ev>:
900190bc:	4770      	bx	lr

900190be <_ZN8touchgfx9DragEventD1Ev>:
900190be:	4770      	bx	lr

900190c0 <_ZN8touchgfx10ClickEventD1Ev>:
900190c0:	4770      	bx	lr

900190c2 <_ZN8touchgfx10ClickEventD0Ev>:
900190c2:	b510      	push	{r4, lr}
900190c4:	4604      	mov	r4, r0
900190c6:	210c      	movs	r1, #12
900190c8:	f00d ffd5 	bl	90027076 <_ZdlPvj>
900190cc:	4620      	mov	r0, r4
900190ce:	bd10      	pop	{r4, pc}

900190d0 <_ZN8touchgfx9DragEventD0Ev>:
900190d0:	b510      	push	{r4, lr}
900190d2:	4604      	mov	r4, r0
900190d4:	2110      	movs	r1, #16
900190d6:	f00d ffce 	bl	90027076 <_ZdlPvj>
900190da:	4620      	mov	r0, r4
900190dc:	bd10      	pop	{r4, pc}

900190de <_ZN8touchgfx12GestureEventD0Ev>:
900190de:	b510      	push	{r4, lr}
900190e0:	4604      	mov	r4, r0
900190e2:	210c      	movs	r1, #12
900190e4:	f00d ffc7 	bl	90027076 <_ZdlPvj>
900190e8:	4620      	mov	r0, r4
900190ea:	bd10      	pop	{r4, pc}

900190ec <_ZN8touchgfx6ScreenD0Ev>:
900190ec:	b510      	push	{r4, lr}
900190ee:	4604      	mov	r4, r0
900190f0:	213c      	movs	r1, #60	; 0x3c
900190f2:	f00d ffc0 	bl	90027076 <_ZdlPvj>
900190f6:	4620      	mov	r0, r4
900190f8:	bd10      	pop	{r4, pc}
	...

900190fc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
900190fc:	b530      	push	{r4, r5, lr}
900190fe:	460d      	mov	r5, r1
90019100:	6b01      	ldr	r1, [r0, #48]	; 0x30
90019102:	b087      	sub	sp, #28
90019104:	4604      	mov	r4, r0
90019106:	b301      	cbz	r1, 9001914a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
90019108:	a801      	add	r0, sp, #4
9001910a:	f7ff fe61 	bl	90018dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001910e:	892a      	ldrh	r2, [r5, #8]
90019110:	f8bd 3004 	ldrh.w	r3, [sp, #4]
90019114:	7928      	ldrb	r0, [r5, #4]
90019116:	1ad2      	subs	r2, r2, r3
90019118:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
9001911a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
9001911e:	441a      	add	r2, r3
90019120:	896b      	ldrh	r3, [r5, #10]
90019122:	f8bd 5006 	ldrh.w	r5, [sp, #6]
90019126:	f88d 0010 	strb.w	r0, [sp, #16]
9001912a:	1b5b      	subs	r3, r3, r5
9001912c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
9001912e:	6b20      	ldr	r0, [r4, #48]	; 0x30
90019130:	442b      	add	r3, r5
90019132:	4d07      	ldr	r5, [pc, #28]	; (90019150 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
90019134:	f8ad 1012 	strh.w	r1, [sp, #18]
90019138:	a903      	add	r1, sp, #12
9001913a:	9503      	str	r5, [sp, #12]
9001913c:	f8ad 2014 	strh.w	r2, [sp, #20]
90019140:	f8ad 3016 	strh.w	r3, [sp, #22]
90019144:	6803      	ldr	r3, [r0, #0]
90019146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90019148:	4798      	blx	r3
9001914a:	b007      	add	sp, #28
9001914c:	bd30      	pop	{r4, r5, pc}
9001914e:	bf00      	nop
90019150:	9002bfe8 	.word	0x9002bfe8

90019154 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
90019154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90019158:	6b03      	ldr	r3, [r0, #48]	; 0x30
9001915a:	b08a      	sub	sp, #40	; 0x28
9001915c:	4604      	mov	r4, r0
9001915e:	460d      	mov	r5, r1
90019160:	b113      	cbz	r3, 90019168 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
90019162:	790b      	ldrb	r3, [r1, #4]
90019164:	2b00      	cmp	r3, #0
90019166:	d044      	beq.n	900191f2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
90019168:	f104 0804 	add.w	r8, r4, #4
9001916c:	a803      	add	r0, sp, #12
9001916e:	4641      	mov	r1, r8
90019170:	f7ff fe2e 	bl	90018dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90019174:	792b      	ldrb	r3, [r5, #4]
90019176:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
9001917a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
9001917e:	b983      	cbnz	r3, 900191a2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
90019180:	f104 0336 	add.w	r3, r4, #54	; 0x36
90019184:	892a      	ldrh	r2, [r5, #8]
90019186:	88e9      	ldrh	r1, [r5, #6]
90019188:	4640      	mov	r0, r8
9001918a:	1b92      	subs	r2, r2, r6
9001918c:	9301      	str	r3, [sp, #4]
9001918e:	1bc9      	subs	r1, r1, r7
90019190:	f104 0334 	add.w	r3, r4, #52	; 0x34
90019194:	b212      	sxth	r2, r2
90019196:	9300      	str	r3, [sp, #0]
90019198:	b209      	sxth	r1, r1
9001919a:	f104 0330 	add.w	r3, r4, #48	; 0x30
9001919e:	f7f9 fa67 	bl	90012670 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
900191a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
900191a4:	b329      	cbz	r1, 900191f2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
900191a6:	a805      	add	r0, sp, #20
900191a8:	f7ff fe12 	bl	90018dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900191ac:	f8bd 2014 	ldrh.w	r2, [sp, #20]
900191b0:	792b      	ldrb	r3, [r5, #4]
900191b2:	a907      	add	r1, sp, #28
900191b4:	1abf      	subs	r7, r7, r2
900191b6:	88ea      	ldrh	r2, [r5, #6]
900191b8:	6b20      	ldr	r0, [r4, #48]	; 0x30
900191ba:	4417      	add	r7, r2
900191bc:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
900191be:	f88d 3020 	strb.w	r3, [sp, #32]
900191c2:	4417      	add	r7, r2
900191c4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
900191c8:	1ab6      	subs	r6, r6, r2
900191ca:	892a      	ldrh	r2, [r5, #8]
900191cc:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
900191d0:	4416      	add	r6, r2
900191d2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
900191d4:	4416      	add	r6, r2
900191d6:	4a08      	ldr	r2, [pc, #32]	; (900191f8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
900191d8:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
900191dc:	2600      	movs	r6, #0
900191de:	9207      	str	r2, [sp, #28]
900191e0:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
900191e4:	6803      	ldr	r3, [r0, #0]
900191e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900191e8:	4798      	blx	r3
900191ea:	792b      	ldrb	r3, [r5, #4]
900191ec:	b10b      	cbz	r3, 900191f2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
900191ee:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
900191f2:	b00a      	add	sp, #40	; 0x28
900191f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900191f8:	9002bfc0 	.word	0x9002bfc0

900191fc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
900191fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90019200:	460c      	mov	r4, r1
90019202:	6b01      	ldr	r1, [r0, #48]	; 0x30
90019204:	b088      	sub	sp, #32
90019206:	4605      	mov	r5, r0
90019208:	2900      	cmp	r1, #0
9001920a:	d06d      	beq.n	900192e8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
9001920c:	4668      	mov	r0, sp
9001920e:	f7ff fddf 	bl	90018dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90019212:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
90019214:	88e3      	ldrh	r3, [r4, #6]
90019216:	f9bd 8000 	ldrsh.w	r8, [sp]
9001921a:	440b      	add	r3, r1
9001921c:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
90019220:	b21b      	sxth	r3, r3
90019222:	4543      	cmp	r3, r8
90019224:	db31      	blt.n	9001928a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90019226:	f8bd c004 	ldrh.w	ip, [sp, #4]
9001922a:	44c4      	add	ip, r8
9001922c:	fa0f fc8c 	sxth.w	ip, ip
90019230:	4563      	cmp	r3, ip
90019232:	da2a      	bge.n	9001928a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90019234:	8eea      	ldrh	r2, [r5, #54]	; 0x36
90019236:	8926      	ldrh	r6, [r4, #8]
90019238:	4416      	add	r6, r2
9001923a:	b236      	sxth	r6, r6
9001923c:	42be      	cmp	r6, r7
9001923e:	db24      	blt.n	9001928a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90019240:	f8bd 0006 	ldrh.w	r0, [sp, #6]
90019244:	4438      	add	r0, r7
90019246:	b200      	sxth	r0, r0
90019248:	4286      	cmp	r6, r0
9001924a:	da1e      	bge.n	9001928a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
9001924c:	8963      	ldrh	r3, [r4, #10]
9001924e:	4419      	add	r1, r3
90019250:	b209      	sxth	r1, r1
90019252:	4541      	cmp	r1, r8
90019254:	db08      	blt.n	90019268 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
90019256:	4561      	cmp	r1, ip
90019258:	da06      	bge.n	90019268 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
9001925a:	89a3      	ldrh	r3, [r4, #12]
9001925c:	441a      	add	r2, r3
9001925e:	b212      	sxth	r2, r2
90019260:	42ba      	cmp	r2, r7
90019262:	db01      	blt.n	90019268 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
90019264:	4282      	cmp	r2, r0
90019266:	db10      	blt.n	9001928a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90019268:	4b21      	ldr	r3, [pc, #132]	; (900192f0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
9001926a:	a904      	add	r1, sp, #16
9001926c:	6b28      	ldr	r0, [r5, #48]	; 0x30
9001926e:	9304      	str	r3, [sp, #16]
90019270:	2302      	movs	r3, #2
90019272:	f88d 3014 	strb.w	r3, [sp, #20]
90019276:	2300      	movs	r3, #0
90019278:	f8ad 3016 	strh.w	r3, [sp, #22]
9001927c:	f8ad 3018 	strh.w	r3, [sp, #24]
90019280:	f8ad 301a 	strh.w	r3, [sp, #26]
90019284:	6803      	ldr	r3, [r0, #0]
90019286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90019288:	4798      	blx	r3
9001928a:	1d29      	adds	r1, r5, #4
9001928c:	a802      	add	r0, sp, #8
9001928e:	f7ff fd9f 	bl	90018dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90019292:	f8bd 3008 	ldrh.w	r3, [sp, #8]
90019296:	88e0      	ldrh	r0, [r4, #6]
90019298:	eba3 0808 	sub.w	r8, r3, r8
9001929c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
900192a0:	7921      	ldrb	r1, [r4, #4]
900192a2:	fa1f f888 	uxth.w	r8, r8
900192a6:	1bdf      	subs	r7, r3, r7
900192a8:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
900192ac:	b2bb      	uxth	r3, r7
900192ae:	4440      	add	r0, r8
900192b0:	8922      	ldrh	r2, [r4, #8]
900192b2:	8967      	ldrh	r7, [r4, #10]
900192b4:	4460      	add	r0, ip
900192b6:	89a4      	ldrh	r4, [r4, #12]
900192b8:	441a      	add	r2, r3
900192ba:	8eee      	ldrh	r6, [r5, #54]	; 0x36
900192bc:	44b8      	add	r8, r7
900192be:	4423      	add	r3, r4
900192c0:	f8ad 0016 	strh.w	r0, [sp, #22]
900192c4:	4432      	add	r2, r6
900192c6:	44e0      	add	r8, ip
900192c8:	4433      	add	r3, r6
900192ca:	4c0a      	ldr	r4, [pc, #40]	; (900192f4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
900192cc:	6b28      	ldr	r0, [r5, #48]	; 0x30
900192ce:	f88d 1014 	strb.w	r1, [sp, #20]
900192d2:	a904      	add	r1, sp, #16
900192d4:	9404      	str	r4, [sp, #16]
900192d6:	f8ad 2018 	strh.w	r2, [sp, #24]
900192da:	f8ad 801a 	strh.w	r8, [sp, #26]
900192de:	f8ad 301c 	strh.w	r3, [sp, #28]
900192e2:	6803      	ldr	r3, [r0, #0]
900192e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900192e6:	4798      	blx	r3
900192e8:	b008      	add	sp, #32
900192ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900192ee:	bf00      	nop
900192f0:	9002bfc0 	.word	0x9002bfc0
900192f4:	9002bfd4 	.word	0x9002bfd4

900192f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
900192f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
900192fa:	4604      	mov	r4, r0
900192fc:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
90019300:	3201      	adds	r2, #1
90019302:	d112      	bne.n	9001932a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
90019304:	2500      	movs	r5, #0
90019306:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
9001930a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
9001930e:	6803      	ldr	r3, [r0, #0]
90019310:	9500      	str	r5, [sp, #0]
90019312:	466d      	mov	r5, sp
90019314:	f8ad 1004 	strh.w	r1, [sp, #4]
90019318:	f8ad 2006 	strh.w	r2, [sp, #6]
9001931c:	4629      	mov	r1, r5
9001931e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90019320:	4798      	blx	r3
90019322:	e895 0003 	ldmia.w	r5, {r0, r1}
90019326:	e884 0003 	stmia.w	r4, {r0, r1}
9001932a:	4620      	mov	r0, r4
9001932c:	b003      	add	sp, #12
9001932e:	bd30      	pop	{r4, r5, pc}

90019330 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
90019330:	b513      	push	{r0, r1, r4, lr}
90019332:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
90019336:	4604      	mov	r4, r0
90019338:	3301      	adds	r3, #1
9001933a:	d109      	bne.n	90019350 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
9001933c:	4601      	mov	r1, r0
9001933e:	4668      	mov	r0, sp
90019340:	f7ff fd46 	bl	90018dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90019344:	f8bd 3000 	ldrh.w	r3, [sp]
90019348:	8423      	strh	r3, [r4, #32]
9001934a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
9001934e:	8463      	strh	r3, [r4, #34]	; 0x22
90019350:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
90019354:	b002      	add	sp, #8
90019356:	bd10      	pop	{r4, pc}

90019358 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
90019358:	b513      	push	{r0, r1, r4, lr}
9001935a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
9001935e:	4604      	mov	r4, r0
90019360:	3301      	adds	r3, #1
90019362:	d109      	bne.n	90019378 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
90019364:	4601      	mov	r1, r0
90019366:	4668      	mov	r0, sp
90019368:	f7ff fd32 	bl	90018dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001936c:	f8bd 3000 	ldrh.w	r3, [sp]
90019370:	8423      	strh	r3, [r4, #32]
90019372:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90019376:	8463      	strh	r3, [r4, #34]	; 0x22
90019378:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
9001937c:	b002      	add	sp, #8
9001937e:	bd10      	pop	{r4, pc}

90019380 <_ZN8touchgfx6ScreenC1Ev>:
90019380:	b570      	push	{r4, r5, r6, lr}
90019382:	4b17      	ldr	r3, [pc, #92]	; (900193e0 <_ZN8touchgfx6ScreenC1Ev+0x60>)
90019384:	4605      	mov	r5, r0
90019386:	4a17      	ldr	r2, [pc, #92]	; (900193e4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
90019388:	2101      	movs	r1, #1
9001938a:	f845 3b04 	str.w	r3, [r5], #4
9001938e:	2300      	movs	r3, #0
90019390:	6042      	str	r2, [r0, #4]
90019392:	4604      	mov	r4, r0
90019394:	8103      	strh	r3, [r0, #8]
90019396:	8143      	strh	r3, [r0, #10]
90019398:	8183      	strh	r3, [r0, #12]
9001939a:	81c3      	strh	r3, [r0, #14]
9001939c:	8203      	strh	r3, [r0, #16]
9001939e:	8243      	strh	r3, [r0, #18]
900193a0:	8283      	strh	r3, [r0, #20]
900193a2:	82c3      	strh	r3, [r0, #22]
900193a4:	6203      	str	r3, [r0, #32]
900193a6:	8483      	strh	r3, [r0, #36]	; 0x24
900193a8:	84c3      	strh	r3, [r0, #38]	; 0x26
900193aa:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
900193ae:	6343      	str	r3, [r0, #52]	; 0x34
900193b0:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
900193b4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
900193b8:	e9c0 3306 	strd	r3, r3, [r0, #24]
900193bc:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
900193c0:	4b09      	ldr	r3, [pc, #36]	; (900193e8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
900193c2:	4628      	mov	r0, r5
900193c4:	f9b3 6000 	ldrsh.w	r6, [r3]
900193c8:	6b93      	ldr	r3, [r2, #56]	; 0x38
900193ca:	4a08      	ldr	r2, [pc, #32]	; (900193ec <_ZN8touchgfx6ScreenC1Ev+0x6c>)
900193cc:	f9b2 1000 	ldrsh.w	r1, [r2]
900193d0:	4798      	blx	r3
900193d2:	6863      	ldr	r3, [r4, #4]
900193d4:	4628      	mov	r0, r5
900193d6:	4631      	mov	r1, r6
900193d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900193da:	4798      	blx	r3
900193dc:	4620      	mov	r0, r4
900193de:	bd70      	pop	{r4, r5, r6, pc}
900193e0:	9002bffc 	.word	0x9002bffc
900193e4:	9002b800 	.word	0x9002b800
900193e8:	2402818a 	.word	0x2402818a
900193ec:	24028188 	.word	0x24028188

900193f0 <_ZN8touchgfx6Screen4drawEv>:
900193f0:	4b09      	ldr	r3, [pc, #36]	; (90019418 <_ZN8touchgfx6Screen4drawEv+0x28>)
900193f2:	b507      	push	{r0, r1, r2, lr}
900193f4:	f9b3 2000 	ldrsh.w	r2, [r3]
900193f8:	2100      	movs	r1, #0
900193fa:	4b08      	ldr	r3, [pc, #32]	; (9001941c <_ZN8touchgfx6Screen4drawEv+0x2c>)
900193fc:	9100      	str	r1, [sp, #0]
900193fe:	4669      	mov	r1, sp
90019400:	f9b3 3000 	ldrsh.w	r3, [r3]
90019404:	f8ad 2004 	strh.w	r2, [sp, #4]
90019408:	f8ad 3006 	strh.w	r3, [sp, #6]
9001940c:	6803      	ldr	r3, [r0, #0]
9001940e:	689b      	ldr	r3, [r3, #8]
90019410:	4798      	blx	r3
90019412:	b003      	add	sp, #12
90019414:	f85d fb04 	ldr.w	pc, [sp], #4
90019418:	24028188 	.word	0x24028188
9001941c:	2402818a 	.word	0x2402818a

90019420 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
90019420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90019424:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
90019428:	b089      	sub	sp, #36	; 0x24
9001942a:	4680      	mov	r8, r0
9001942c:	460c      	mov	r4, r1
9001942e:	2b00      	cmp	r3, #0
90019430:	4615      	mov	r5, r2
90019432:	dd0e      	ble.n	90019452 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90019434:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
90019438:	2b00      	cmp	r3, #0
9001943a:	dd0a      	ble.n	90019452 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
9001943c:	4628      	mov	r0, r5
9001943e:	f7ff ff5b 	bl	900192f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
90019442:	4621      	mov	r1, r4
90019444:	f7fe fb01 	bl	90017a4a <_ZNK8touchgfx4Rect9intersectERKS0_>
90019448:	69eb      	ldr	r3, [r5, #28]
9001944a:	b928      	cbnz	r0, 90019458 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
9001944c:	461d      	mov	r5, r3
9001944e:	2b00      	cmp	r3, #0
90019450:	d1f4      	bne.n	9001943c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
90019452:	b009      	add	sp, #36	; 0x24
90019454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019458:	ae04      	add	r6, sp, #16
9001945a:	2b00      	cmp	r3, #0
9001945c:	f000 80b5 	beq.w	900195ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
90019460:	682b      	ldr	r3, [r5, #0]
90019462:	4629      	mov	r1, r5
90019464:	a802      	add	r0, sp, #8
90019466:	68db      	ldr	r3, [r3, #12]
90019468:	4798      	blx	r3
9001946a:	4628      	mov	r0, r5
9001946c:	f7ff ff60 	bl	90019330 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
90019470:	f8bd 7008 	ldrh.w	r7, [sp, #8]
90019474:	4407      	add	r7, r0
90019476:	4628      	mov	r0, r5
90019478:	f7ff ff6e 	bl	90019358 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
9001947c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
90019480:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
90019484:	b23f      	sxth	r7, r7
90019486:	4418      	add	r0, r3
90019488:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
9001948c:	4621      	mov	r1, r4
9001948e:	f8ad 2014 	strh.w	r2, [sp, #20]
90019492:	f8ad 0012 	strh.w	r0, [sp, #18]
90019496:	4630      	mov	r0, r6
90019498:	f8ad 3016 	strh.w	r3, [sp, #22]
9001949c:	f8ad 7010 	strh.w	r7, [sp, #16]
900194a0:	f7f9 f9c8 	bl	90012834 <_ZN8touchgfx4RectaNERKS0_>
900194a4:	4628      	mov	r0, r5
900194a6:	f7ff ff27 	bl	900192f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
900194aa:	ab06      	add	r3, sp, #24
900194ac:	4602      	mov	r2, r0
900194ae:	e896 0003 	ldmia.w	r6, {r0, r1}
900194b2:	e883 0003 	stmia.w	r3, {r0, r1}
900194b6:	4611      	mov	r1, r2
900194b8:	4618      	mov	r0, r3
900194ba:	f7f9 f9bb 	bl	90012834 <_ZN8touchgfx4RectaNERKS0_>
900194be:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
900194c2:	f9b4 1000 	ldrsh.w	r1, [r4]
900194c6:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
900194ca:	4299      	cmp	r1, r3
900194cc:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
900194d0:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
900194d4:	d10b      	bne.n	900194ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
900194d6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
900194da:	4552      	cmp	r2, sl
900194dc:	d107      	bne.n	900194ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
900194de:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
900194e2:	455a      	cmp	r2, fp
900194e4:	d103      	bne.n	900194ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
900194e6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
900194ea:	454a      	cmp	r2, r9
900194ec:	d06d      	beq.n	900195ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
900194ee:	f1bb 0f00 	cmp.w	fp, #0
900194f2:	dd65      	ble.n	900195c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
900194f4:	f1b9 0f00 	cmp.w	r9, #0
900194f8:	dd62      	ble.n	900195c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
900194fa:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
900194fe:	fa1f f08a 	uxth.w	r0, sl
90019502:	4552      	cmp	r2, sl
90019504:	9000      	str	r0, [sp, #0]
90019506:	da12      	bge.n	9001952e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
90019508:	9301      	str	r3, [sp, #4]
9001950a:	9b00      	ldr	r3, [sp, #0]
9001950c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
90019510:	f8ad 2012 	strh.w	r2, [sp, #18]
90019514:	1a9a      	subs	r2, r3, r2
90019516:	f8ad 1010 	strh.w	r1, [sp, #16]
9001951a:	4631      	mov	r1, r6
9001951c:	f8ad 0014 	strh.w	r0, [sp, #20]
90019520:	4640      	mov	r0, r8
90019522:	f8ad 2016 	strh.w	r2, [sp, #22]
90019526:	69ea      	ldr	r2, [r5, #28]
90019528:	f7ff ff7a 	bl	90019420 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
9001952c:	9b01      	ldr	r3, [sp, #4]
9001952e:	f9b4 2000 	ldrsh.w	r2, [r4]
90019532:	b29f      	uxth	r7, r3
90019534:	429a      	cmp	r2, r3
90019536:	da0d      	bge.n	90019554 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
90019538:	f8ad 2010 	strh.w	r2, [sp, #16]
9001953c:	1aba      	subs	r2, r7, r2
9001953e:	f8ad a012 	strh.w	sl, [sp, #18]
90019542:	4631      	mov	r1, r6
90019544:	f8ad 2014 	strh.w	r2, [sp, #20]
90019548:	4640      	mov	r0, r8
9001954a:	f8ad 9016 	strh.w	r9, [sp, #22]
9001954e:	69ea      	ldr	r2, [r5, #28]
90019550:	f7ff ff66 	bl	90019420 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90019554:	8822      	ldrh	r2, [r4, #0]
90019556:	445f      	add	r7, fp
90019558:	88a3      	ldrh	r3, [r4, #4]
9001955a:	b2bf      	uxth	r7, r7
9001955c:	4413      	add	r3, r2
9001955e:	b23a      	sxth	r2, r7
90019560:	b29b      	uxth	r3, r3
90019562:	b219      	sxth	r1, r3
90019564:	4291      	cmp	r1, r2
90019566:	dd0d      	ble.n	90019584 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
90019568:	1bdb      	subs	r3, r3, r7
9001956a:	f8ad 2010 	strh.w	r2, [sp, #16]
9001956e:	f8ad a012 	strh.w	sl, [sp, #18]
90019572:	4631      	mov	r1, r6
90019574:	f8ad 3014 	strh.w	r3, [sp, #20]
90019578:	4640      	mov	r0, r8
9001957a:	f8ad 9016 	strh.w	r9, [sp, #22]
9001957e:	69ea      	ldr	r2, [r5, #28]
90019580:	f7ff ff4e 	bl	90019420 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90019584:	88e2      	ldrh	r2, [r4, #6]
90019586:	8863      	ldrh	r3, [r4, #2]
90019588:	4413      	add	r3, r2
9001958a:	9a00      	ldr	r2, [sp, #0]
9001958c:	444a      	add	r2, r9
9001958e:	b29b      	uxth	r3, r3
90019590:	fa1f f982 	uxth.w	r9, r2
90019594:	b219      	sxth	r1, r3
90019596:	fa0f f289 	sxth.w	r2, r9
9001959a:	428a      	cmp	r2, r1
9001959c:	da15      	bge.n	900195ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
9001959e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
900195a2:	eba3 0309 	sub.w	r3, r3, r9
900195a6:	f9b4 0000 	ldrsh.w	r0, [r4]
900195aa:	f8ad 1014 	strh.w	r1, [sp, #20]
900195ae:	4631      	mov	r1, r6
900195b0:	f8ad 0010 	strh.w	r0, [sp, #16]
900195b4:	f8ad 2012 	strh.w	r2, [sp, #18]
900195b8:	f8ad 3016 	strh.w	r3, [sp, #22]
900195bc:	69ea      	ldr	r2, [r5, #28]
900195be:	e001      	b.n	900195c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
900195c0:	69ea      	ldr	r2, [r5, #28]
900195c2:	4621      	mov	r1, r4
900195c4:	4640      	mov	r0, r8
900195c6:	f7ff ff2b 	bl	90019420 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
900195ca:	4628      	mov	r0, r5
900195cc:	f7ff fe94 	bl	900192f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
900195d0:	6861      	ldr	r1, [r4, #4]
900195d2:	4602      	mov	r2, r0
900195d4:	4633      	mov	r3, r6
900195d6:	6820      	ldr	r0, [r4, #0]
900195d8:	c303      	stmia	r3!, {r0, r1}
900195da:	4611      	mov	r1, r2
900195dc:	4630      	mov	r0, r6
900195de:	f7f9 f929 	bl	90012834 <_ZN8touchgfx4RectaNERKS0_>
900195e2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
900195e6:	2b00      	cmp	r3, #0
900195e8:	f77f af33 	ble.w	90019452 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
900195ec:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
900195f0:	2b00      	cmp	r3, #0
900195f2:	f77f af2e 	ble.w	90019452 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
900195f6:	4628      	mov	r0, r5
900195f8:	f7ff fe9a 	bl	90019330 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
900195fc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
90019600:	1a18      	subs	r0, r3, r0
90019602:	f8ad 0010 	strh.w	r0, [sp, #16]
90019606:	4628      	mov	r0, r5
90019608:	f7ff fea6 	bl	90019358 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
9001960c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
90019610:	4631      	mov	r1, r6
90019612:	1a18      	subs	r0, r3, r0
90019614:	f8ad 0012 	strh.w	r0, [sp, #18]
90019618:	4628      	mov	r0, r5
9001961a:	682b      	ldr	r3, [r5, #0]
9001961c:	689b      	ldr	r3, [r3, #8]
9001961e:	4798      	blx	r3
90019620:	e717      	b.n	90019452 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

90019622 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
90019622:	b570      	push	{r4, r5, r6, lr}
90019624:	1d06      	adds	r6, r0, #4
90019626:	b086      	sub	sp, #24
90019628:	460c      	mov	r4, r1
9001962a:	2300      	movs	r3, #0
9001962c:	4631      	mov	r1, r6
9001962e:	4605      	mov	r5, r0
90019630:	a802      	add	r0, sp, #8
90019632:	9301      	str	r3, [sp, #4]
90019634:	f7ff fbcc 	bl	90018dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90019638:	f8bd 3008 	ldrh.w	r3, [sp, #8]
9001963c:	8822      	ldrh	r2, [r4, #0]
9001963e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
90019642:	1ad2      	subs	r2, r2, r3
90019644:	8863      	ldrh	r3, [r4, #2]
90019646:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
9001964a:	1a5b      	subs	r3, r3, r1
9001964c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
90019650:	f8ad 2010 	strh.w	r2, [sp, #16]
90019654:	aa01      	add	r2, sp, #4
90019656:	f8ad 0014 	strh.w	r0, [sp, #20]
9001965a:	4630      	mov	r0, r6
9001965c:	f8ad 1016 	strh.w	r1, [sp, #22]
90019660:	a904      	add	r1, sp, #16
90019662:	f8ad 3012 	strh.w	r3, [sp, #18]
90019666:	f7f9 f9bd 	bl	900129e4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
9001966a:	9a01      	ldr	r2, [sp, #4]
9001966c:	b11a      	cbz	r2, 90019676 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
9001966e:	4621      	mov	r1, r4
90019670:	4628      	mov	r0, r5
90019672:	f7ff fed5 	bl	90019420 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90019676:	b006      	add	sp, #24
90019678:	bd70      	pop	{r4, r5, r6, pc}

9001967a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
9001967a:	4602      	mov	r2, r0
9001967c:	b530      	push	{r4, r5, lr}
9001967e:	4604      	mov	r4, r0
90019680:	b085      	sub	sp, #20
90019682:	f852 0f08 	ldr.w	r0, [r2, #8]!
90019686:	460d      	mov	r5, r1
90019688:	466b      	mov	r3, sp
9001968a:	6851      	ldr	r1, [r2, #4]
9001968c:	c303      	stmia	r3!, {r0, r1}
9001968e:	4629      	mov	r1, r5
90019690:	4668      	mov	r0, sp
90019692:	f7f9 f8cf 	bl	90012834 <_ZN8touchgfx4RectaNERKS0_>
90019696:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
9001969a:	b12b      	cbz	r3, 900196a8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
9001969c:	4669      	mov	r1, sp
9001969e:	4620      	mov	r0, r4
900196a0:	f7ff ffbf 	bl	90019622 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
900196a4:	b005      	add	sp, #20
900196a6:	bd30      	pop	{r4, r5, pc}
900196a8:	3404      	adds	r4, #4
900196aa:	a802      	add	r0, sp, #8
900196ac:	4621      	mov	r1, r4
900196ae:	f7ff fb8f 	bl	90018dd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900196b2:	f8bd 3000 	ldrh.w	r3, [sp]
900196b6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
900196ba:	4669      	mov	r1, sp
900196bc:	4620      	mov	r0, r4
900196be:	1a9b      	subs	r3, r3, r2
900196c0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
900196c4:	f8ad 3000 	strh.w	r3, [sp]
900196c8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
900196cc:	1a9b      	subs	r3, r3, r2
900196ce:	f8ad 3002 	strh.w	r3, [sp, #2]
900196d2:	f7f9 f94e 	bl	90012972 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
900196d6:	e7e5      	b.n	900196a4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

900196d8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
900196d8:	460b      	mov	r3, r1
900196da:	680a      	ldr	r2, [r1, #0]
900196dc:	1d01      	adds	r1, r0, #4
900196de:	6992      	ldr	r2, [r2, #24]
900196e0:	4618      	mov	r0, r3
900196e2:	4710      	bx	r2

900196e4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
900196e4:	4298      	cmp	r0, r3
900196e6:	d200      	bcs.n	900196ea <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
900196e8:	b913      	cbnz	r3, 900196f0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
900196ea:	440a      	add	r2, r1
900196ec:	b210      	sxth	r0, r2
900196ee:	4770      	bx	lr
900196f0:	ee07 0a90 	vmov	s15, r0
900196f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
900196f8:	ee07 3a90 	vmov	s15, r3
900196fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90019700:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90019704:	ee07 2a90 	vmov	s15, r2
90019708:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001970c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
90019710:	ee07 1a90 	vmov	s15, r1
90019714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90019718:	ee37 7a66 	vsub.f32	s14, s14, s13
9001971c:	ee67 5a07 	vmul.f32	s11, s14, s14
90019720:	eee5 6a87 	vfma.f32	s13, s11, s14
90019724:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90019728:	eee6 7a26 	vfma.f32	s15, s12, s13
9001972c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90019730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90019734:	bfcc      	ite	gt
90019736:	ee77 7a87 	vaddgt.f32	s15, s15, s14
9001973a:	ee77 7ac7 	vsuble.f32	s15, s15, s14
9001973e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90019742:	ee17 3a90 	vmov	r3, s15
90019746:	b218      	sxth	r0, r3
90019748:	4770      	bx	lr

9001974a <_ZN8touchgfx12TextProviderC1Ev>:
9001974a:	b538      	push	{r3, r4, r5, lr}
9001974c:	2500      	movs	r5, #0
9001974e:	2302      	movs	r3, #2
90019750:	4604      	mov	r4, r0
90019752:	220e      	movs	r2, #14
90019754:	7403      	strb	r3, [r0, #16]
90019756:	4629      	mov	r1, r5
90019758:	6145      	str	r5, [r0, #20]
9001975a:	7605      	strb	r5, [r0, #24]
9001975c:	83c5      	strh	r5, [r0, #30]
9001975e:	8405      	strh	r5, [r0, #32]
90019760:	86c5      	strh	r5, [r0, #54]	; 0x36
90019762:	8705      	strh	r5, [r0, #56]	; 0x38
90019764:	87c5      	strh	r5, [r0, #62]	; 0x3e
90019766:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
9001976a:	e9c0 5500 	strd	r5, r5, [r0]
9001976e:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
90019772:	304c      	adds	r0, #76	; 0x4c
90019774:	f00d ff62 	bl	9002763c <memset>
90019778:	2301      	movs	r3, #1
9001977a:	4620      	mov	r0, r4
9001977c:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
90019780:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90019784:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
90019788:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
9001978c:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
90019790:	f7ee fa7e 	bl	90007c90 <_ZN8touchgfx12TextProvider18initializeInternalEv>
90019794:	4620      	mov	r0, r4
90019796:	bd38      	pop	{r3, r4, r5, pc}

90019798 <_ZN8touchgfx12TextProvider11endOfStringEv>:
90019798:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
9001979a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001979e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
900197a0:	fab0 f080 	clz	r0, r0
900197a4:	0940      	lsrs	r0, r0, #5
900197a6:	4770      	bx	lr

900197a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
900197a8:	b530      	push	{r4, r5, lr}
900197aa:	2500      	movs	r5, #0
900197ac:	2401      	movs	r4, #1
900197ae:	6843      	ldr	r3, [r0, #4]
900197b0:	b913      	cbnz	r3, 900197b8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
900197b2:	6803      	ldr	r3, [r0, #0]
900197b4:	b313      	cbz	r3, 900197fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
900197b6:	6043      	str	r3, [r0, #4]
900197b8:	7e03      	ldrb	r3, [r0, #24]
900197ba:	b143      	cbz	r3, 900197ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
900197bc:	6943      	ldr	r3, [r0, #20]
900197be:	b12b      	cbz	r3, 900197cc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
900197c0:	881a      	ldrh	r2, [r3, #0]
900197c2:	b11a      	cbz	r2, 900197cc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
900197c4:	1c9a      	adds	r2, r3, #2
900197c6:	6142      	str	r2, [r0, #20]
900197c8:	8818      	ldrh	r0, [r3, #0]
900197ca:	bd30      	pop	{r4, r5, pc}
900197cc:	7605      	strb	r5, [r0, #24]
900197ce:	6843      	ldr	r3, [r0, #4]
900197d0:	8819      	ldrh	r1, [r3, #0]
900197d2:	b199      	cbz	r1, 900197fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
900197d4:	1c9a      	adds	r2, r3, #2
900197d6:	2902      	cmp	r1, #2
900197d8:	6042      	str	r2, [r0, #4]
900197da:	d1f5      	bne.n	900197c8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
900197dc:	7c03      	ldrb	r3, [r0, #16]
900197de:	2b01      	cmp	r3, #1
900197e0:	d8e5      	bhi.n	900197ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
900197e2:	1c5a      	adds	r2, r3, #1
900197e4:	3302      	adds	r3, #2
900197e6:	7402      	strb	r2, [r0, #16]
900197e8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
900197ec:	6143      	str	r3, [r0, #20]
900197ee:	2b00      	cmp	r3, #0
900197f0:	d0dd      	beq.n	900197ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
900197f2:	881b      	ldrh	r3, [r3, #0]
900197f4:	2b00      	cmp	r3, #0
900197f6:	d0da      	beq.n	900197ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
900197f8:	7604      	strb	r4, [r0, #24]
900197fa:	e7d8      	b.n	900197ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
900197fc:	2000      	movs	r0, #0
900197fe:	e7e4      	b.n	900197ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

90019800 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
90019800:	6001      	str	r1, [r0, #0]
90019802:	2100      	movs	r1, #0
90019804:	b430      	push	{r4, r5}
90019806:	6041      	str	r1, [r0, #4]
90019808:	6815      	ldr	r5, [r2, #0]
9001980a:	6085      	str	r5, [r0, #8]
9001980c:	6852      	ldr	r2, [r2, #4]
9001980e:	6443      	str	r3, [r0, #68]	; 0x44
90019810:	9b02      	ldr	r3, [sp, #8]
90019812:	60c2      	str	r2, [r0, #12]
90019814:	7401      	strb	r1, [r0, #16]
90019816:	6141      	str	r1, [r0, #20]
90019818:	7601      	strb	r1, [r0, #24]
9001981a:	8701      	strh	r1, [r0, #56]	; 0x38
9001981c:	8401      	strh	r1, [r0, #32]
9001981e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
90019822:	6483      	str	r3, [r0, #72]	; 0x48
90019824:	bc30      	pop	{r4, r5}
90019826:	f7ee ba33 	b.w	90007c90 <_ZN8touchgfx12TextProvider18initializeInternalEv>

9001982a <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
9001982a:	b408      	push	{r3}
9001982c:	b510      	push	{r4, lr}
9001982e:	b085      	sub	sp, #20
90019830:	ac07      	add	r4, sp, #28
90019832:	f854 3b04 	ldr.w	r3, [r4], #4
90019836:	9300      	str	r3, [sp, #0]
90019838:	4613      	mov	r3, r2
9001983a:	4622      	mov	r2, r4
9001983c:	9403      	str	r4, [sp, #12]
9001983e:	f7ff ffdf 	bl	90019800 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90019842:	b005      	add	sp, #20
90019844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90019848:	b001      	add	sp, #4
9001984a:	4770      	bx	lr

9001984c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
9001984c:	b5f0      	push	{r4, r5, r6, r7, lr}
9001984e:	4605      	mov	r5, r0
90019850:	4608      	mov	r0, r1
90019852:	b1f1      	cbz	r1, 90019892 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
90019854:	f105 044c 	add.w	r4, r5, #76	; 0x4c
90019858:	460b      	mov	r3, r1
9001985a:	f101 0708 	add.w	r7, r1, #8
9001985e:	4622      	mov	r2, r4
90019860:	6818      	ldr	r0, [r3, #0]
90019862:	3308      	adds	r3, #8
90019864:	f853 1c04 	ldr.w	r1, [r3, #-4]
90019868:	4626      	mov	r6, r4
9001986a:	42bb      	cmp	r3, r7
9001986c:	c603      	stmia	r6!, {r0, r1}
9001986e:	4634      	mov	r4, r6
90019870:	d1f6      	bne.n	90019860 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
90019872:	6818      	ldr	r0, [r3, #0]
90019874:	6030      	str	r0, [r6, #0]
90019876:	4610      	mov	r0, r2
90019878:	889b      	ldrh	r3, [r3, #4]
9001987a:	80b3      	strh	r3, [r6, #4]
9001987c:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
90019880:	015b      	lsls	r3, r3, #5
90019882:	f403 7180 	and.w	r1, r3, #256	; 0x100
90019886:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
9001988a:	430b      	orrs	r3, r1
9001988c:	425b      	negs	r3, r3
9001988e:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
90019892:	bdf0      	pop	{r4, r5, r6, r7, pc}

90019894 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
90019894:	b538      	push	{r3, r4, r5, lr}
90019896:	460c      	mov	r4, r1
90019898:	6811      	ldr	r1, [r2, #0]
9001989a:	4610      	mov	r0, r2
9001989c:	68cd      	ldr	r5, [r1, #12]
9001989e:	4619      	mov	r1, r3
900198a0:	47a8      	blx	r5
900198a2:	2800      	cmp	r0, #0
900198a4:	bf08      	it	eq
900198a6:	4620      	moveq	r0, r4
900198a8:	bd38      	pop	{r3, r4, r5, pc}
	...

900198ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
900198ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900198ae:	4604      	mov	r4, r0
900198b0:	4615      	mov	r5, r2
900198b2:	4608      	mov	r0, r1
900198b4:	b93a      	cbnz	r2, 900198c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
900198b6:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
900198ba:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
900198be:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
900198c2:	4628      	mov	r0, r5
900198c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
900198c6:	f892 c00d 	ldrb.w	ip, [r2, #13]
900198ca:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
900198ce:	8893      	ldrh	r3, [r2, #4]
900198d0:	ea4f 160c 	mov.w	r6, ip, lsl #4
900198d4:	f406 7280 	and.w	r2, r6, #256	; 0x100
900198d8:	79ee      	ldrb	r6, [r5, #7]
900198da:	4316      	orrs	r6, r2
900198dc:	19da      	adds	r2, r3, r7
900198de:	b291      	uxth	r1, r2
900198e0:	b2b7      	uxth	r7, r6
900198e2:	291d      	cmp	r1, #29
900198e4:	d87b      	bhi.n	900199de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
900198e6:	2201      	movs	r2, #1
900198e8:	10f6      	asrs	r6, r6, #3
900198ea:	408a      	lsls	r2, r1
900198ec:	4974      	ldr	r1, [pc, #464]	; (90019ac0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
900198ee:	420a      	tst	r2, r1
900198f0:	d12e      	bne.n	90019950 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
900198f2:	f412 7f60 	tst.w	r2, #896	; 0x380
900198f6:	d072      	beq.n	900199de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
900198f8:	f104 024c 	add.w	r2, r4, #76	; 0x4c
900198fc:	462b      	mov	r3, r5
900198fe:	f105 0e08 	add.w	lr, r5, #8
90019902:	4615      	mov	r5, r2
90019904:	6818      	ldr	r0, [r3, #0]
90019906:	3308      	adds	r3, #8
90019908:	f853 1c04 	ldr.w	r1, [r3, #-4]
9001990c:	4694      	mov	ip, r2
9001990e:	4573      	cmp	r3, lr
90019910:	e8ac 0003 	stmia.w	ip!, {r0, r1}
90019914:	4662      	mov	r2, ip
90019916:	d1f5      	bne.n	90019904 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
90019918:	6818      	ldr	r0, [r3, #0]
9001991a:	f8cc 0000 	str.w	r0, [ip]
9001991e:	889b      	ldrh	r3, [r3, #4]
90019920:	f8ac 3004 	strh.w	r3, [ip, #4]
90019924:	b2b3      	uxth	r3, r6
90019926:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
9001992a:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
9001992e:	1aca      	subs	r2, r1, r3
90019930:	1bcf      	subs	r7, r1, r7
90019932:	f020 0060 	bic.w	r0, r0, #96	; 0x60
90019936:	b292      	uxth	r2, r2
90019938:	1afb      	subs	r3, r7, r3
9001993a:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
9001993e:	10d2      	asrs	r2, r2, #3
90019940:	f002 0260 	and.w	r2, r2, #96	; 0x60
90019944:	4302      	orrs	r2, r0
90019946:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
9001994a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
9001994e:	e7b8      	b.n	900198c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
90019950:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
90019952:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90019956:	8c59      	ldrh	r1, [r3, #34]	; 0x22
90019958:	f640 6333 	movw	r3, #3635	; 0xe33
9001995c:	4299      	cmp	r1, r3
9001995e:	d110      	bne.n	90019982 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
90019960:	6803      	ldr	r3, [r0, #0]
90019962:	68db      	ldr	r3, [r3, #12]
90019964:	4798      	blx	r3
90019966:	7b41      	ldrb	r1, [r0, #13]
90019968:	00cb      	lsls	r3, r1, #3
9001996a:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001996e:	7a03      	ldrb	r3, [r0, #8]
90019970:	0648      	lsls	r0, r1, #25
90019972:	ea43 0302 	orr.w	r3, r3, r2
90019976:	bf44      	itt	mi
90019978:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001997c:	b21b      	sxthmi	r3, r3
9001997e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90019982:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
90019986:	462a      	mov	r2, r5
90019988:	f105 0c08 	add.w	ip, r5, #8
9001998c:	443b      	add	r3, r7
9001998e:	4433      	add	r3, r6
90019990:	f104 064c 	add.w	r6, r4, #76	; 0x4c
90019994:	b29b      	uxth	r3, r3
90019996:	4635      	mov	r5, r6
90019998:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
9001999c:	6810      	ldr	r0, [r2, #0]
9001999e:	3208      	adds	r2, #8
900199a0:	f852 1c04 	ldr.w	r1, [r2, #-4]
900199a4:	4637      	mov	r7, r6
900199a6:	4562      	cmp	r2, ip
900199a8:	c703      	stmia	r7!, {r0, r1}
900199aa:	463e      	mov	r6, r7
900199ac:	d1f6      	bne.n	9001999c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
900199ae:	6810      	ldr	r0, [r2, #0]
900199b0:	6038      	str	r0, [r7, #0]
900199b2:	8892      	ldrh	r2, [r2, #4]
900199b4:	80ba      	strh	r2, [r7, #4]
900199b6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
900199ba:	10db      	asrs	r3, r3, #3
900199bc:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
900199c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
900199c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
900199c8:	4313      	orrs	r3, r2
900199ca:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
900199ce:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
900199d2:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
900199d6:	1a9b      	subs	r3, r3, r2
900199d8:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
900199dc:	e771      	b.n	900198c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
900199de:	f023 0204 	bic.w	r2, r3, #4
900199e2:	f640 611b 	movw	r1, #3611	; 0xe1b
900199e6:	428a      	cmp	r2, r1
900199e8:	d003      	beq.n	900199f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
900199ea:	f640 621d 	movw	r2, #3613	; 0xe1d
900199ee:	4293      	cmp	r3, r2
900199f0:	d120      	bne.n	90019a34 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
900199f2:	3b01      	subs	r3, #1
900199f4:	4602      	mov	r2, r0
900199f6:	4629      	mov	r1, r5
900199f8:	4620      	mov	r0, r4
900199fa:	b29b      	uxth	r3, r3
900199fc:	f7ff ff4a 	bl	90019894 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
90019a00:	7b41      	ldrb	r1, [r0, #13]
90019a02:	00cb      	lsls	r3, r1, #3
90019a04:	0649      	lsls	r1, r1, #25
90019a06:	f403 7280 	and.w	r2, r3, #256	; 0x100
90019a0a:	7a03      	ldrb	r3, [r0, #8]
90019a0c:	ea43 0302 	orr.w	r3, r3, r2
90019a10:	bf44      	itt	mi
90019a12:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90019a16:	b21b      	sxthmi	r3, r3
90019a18:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90019a1c:	7b6b      	ldrb	r3, [r5, #13]
90019a1e:	7aaa      	ldrb	r2, [r5, #10]
90019a20:	005b      	lsls	r3, r3, #1
90019a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
90019a26:	4313      	orrs	r3, r2
90019a28:	115a      	asrs	r2, r3, #5
90019a2a:	eb02 0393 	add.w	r3, r2, r3, lsr #2
90019a2e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
90019a32:	e035      	b.n	90019aa0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
90019a34:	ea4f 02cc 	mov.w	r2, ip, lsl #3
90019a38:	f01c 0f40 	tst.w	ip, #64	; 0x40
90019a3c:	f402 7180 	and.w	r1, r2, #256	; 0x100
90019a40:	7a2a      	ldrb	r2, [r5, #8]
90019a42:	ea42 0201 	orr.w	r2, r2, r1
90019a46:	f640 6109 	movw	r1, #3593	; 0xe09
90019a4a:	bf1c      	itt	ne
90019a4c:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
90019a50:	b212      	sxthne	r2, r2
90019a52:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
90019a56:	f023 0210 	bic.w	r2, r3, #16
90019a5a:	428a      	cmp	r2, r1
90019a5c:	d003      	beq.n	90019a66 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
90019a5e:	f640 6213 	movw	r2, #3603	; 0xe13
90019a62:	4293      	cmp	r3, r2
90019a64:	d129      	bne.n	90019aba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
90019a66:	7b6e      	ldrb	r6, [r5, #13]
90019a68:	4629      	mov	r1, r5
90019a6a:	0076      	lsls	r6, r6, #1
90019a6c:	f406 7280 	and.w	r2, r6, #256	; 0x100
90019a70:	7aae      	ldrb	r6, [r5, #10]
90019a72:	4316      	orrs	r6, r2
90019a74:	f640 6213 	movw	r2, #3603	; 0xe13
90019a78:	4293      	cmp	r3, r2
90019a7a:	4602      	mov	r2, r0
90019a7c:	4620      	mov	r0, r4
90019a7e:	bf16      	itet	ne
90019a80:	f103 33ff 	addne.w	r3, r3, #4294967295
90019a84:	f640 630c 	movweq	r3, #3596	; 0xe0c
90019a88:	b29b      	uxthne	r3, r3
90019a8a:	f7ff ff03 	bl	90019894 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
90019a8e:	7b43      	ldrb	r3, [r0, #13]
90019a90:	7a82      	ldrb	r2, [r0, #10]
90019a92:	005b      	lsls	r3, r3, #1
90019a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
90019a98:	4313      	orrs	r3, r2
90019a9a:	1af6      	subs	r6, r6, r3
90019a9c:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
90019aa0:	7b69      	ldrb	r1, [r5, #13]
90019aa2:	00cb      	lsls	r3, r1, #3
90019aa4:	f403 7280 	and.w	r2, r3, #256	; 0x100
90019aa8:	7a2b      	ldrb	r3, [r5, #8]
90019aaa:	4313      	orrs	r3, r2
90019aac:	064a      	lsls	r2, r1, #25
90019aae:	bf44      	itt	mi
90019ab0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90019ab4:	b21b      	sxthmi	r3, r3
90019ab6:	1bdb      	subs	r3, r3, r7
90019ab8:	e747      	b.n	9001994a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
90019aba:	2300      	movs	r3, #0
90019abc:	e7b7      	b.n	90019a2e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
90019abe:	bf00      	nop
90019ac0:	3fc00079 	.word	0x3fc00079

90019ac4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
90019ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90019ac8:	4604      	mov	r4, r0
90019aca:	b942      	cbnz	r2, 90019ade <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
90019acc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90019ad0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
90019ad4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
90019ad8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
90019adc:	e047      	b.n	90019b6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
90019ade:	7b51      	ldrb	r1, [r2, #13]
90019ae0:	8893      	ldrh	r3, [r2, #4]
90019ae2:	010d      	lsls	r5, r1, #4
90019ae4:	f405 7080 	and.w	r0, r5, #256	; 0x100
90019ae8:	79d5      	ldrb	r5, [r2, #7]
90019aea:	4305      	orrs	r5, r0
90019aec:	2d04      	cmp	r5, #4
90019aee:	bfcc      	ite	gt
90019af0:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
90019af4:	f04f 0e01 	movle.w	lr, #1
90019af8:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
90019afc:	f200 80ab 	bhi.w	90019c56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
90019b00:	f240 60e7 	movw	r0, #1767	; 0x6e7
90019b04:	4283      	cmp	r3, r0
90019b06:	d216      	bcs.n	90019b36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019b08:	f240 605b 	movw	r0, #1627	; 0x65b
90019b0c:	4283      	cmp	r3, r0
90019b0e:	d859      	bhi.n	90019bc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
90019b10:	f240 6057 	movw	r0, #1623	; 0x657
90019b14:	4283      	cmp	r3, r0
90019b16:	d20e      	bcs.n	90019b36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019b18:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
90019b1c:	d24a      	bcs.n	90019bb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
90019b1e:	f240 604e 	movw	r0, #1614	; 0x64e
90019b22:	4283      	cmp	r3, r0
90019b24:	d207      	bcs.n	90019b36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019b26:	f240 601a 	movw	r0, #1562	; 0x61a
90019b2a:	4283      	cmp	r3, r0
90019b2c:	d02a      	beq.n	90019b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90019b2e:	d821      	bhi.n	90019b74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
90019b30:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
90019b34:	d35b      	bcc.n	90019bee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90019b36:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
90019b3a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90019b3e:	f040 80d0 	bne.w	90019ce2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
90019b42:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
90019b46:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90019b4a:	f040 80ca 	bne.w	90019ce2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
90019b4e:	00cb      	lsls	r3, r1, #3
90019b50:	0649      	lsls	r1, r1, #25
90019b52:	f403 7080 	and.w	r0, r3, #256	; 0x100
90019b56:	7a13      	ldrb	r3, [r2, #8]
90019b58:	ea43 0300 	orr.w	r3, r3, r0
90019b5c:	bf44      	itt	mi
90019b5e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90019b62:	b21b      	sxthmi	r3, r3
90019b64:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90019b68:	1b5d      	subs	r5, r3, r5
90019b6a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90019b6e:	4610      	mov	r0, r2
90019b70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90019b74:	f240 604b 	movw	r0, #1611	; 0x64b
90019b78:	4283      	cmp	r3, r0
90019b7a:	d338      	bcc.n	90019bee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90019b7c:	f240 604c 	movw	r0, #1612	; 0x64c
90019b80:	4283      	cmp	r3, r0
90019b82:	d9d8      	bls.n	90019b36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019b84:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
90019b88:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
90019b8c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90019b90:	f040 80f3 	bne.w	90019d7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
90019b94:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90019b98:	f040 80ef 	bne.w	90019d7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
90019b9c:	00cb      	lsls	r3, r1, #3
90019b9e:	064e      	lsls	r6, r1, #25
90019ba0:	f403 7080 	and.w	r0, r3, #256	; 0x100
90019ba4:	7a13      	ldrb	r3, [r2, #8]
90019ba6:	ea43 0300 	orr.w	r3, r3, r0
90019baa:	bf44      	itt	mi
90019bac:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90019bb0:	b21b      	sxthmi	r3, r3
90019bb2:	e7d9      	b.n	90019b68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
90019bb4:	f240 6054 	movw	r0, #1620	; 0x654
90019bb8:	4283      	cmp	r3, r0
90019bba:	d8e3      	bhi.n	90019b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90019bbc:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
90019bc0:	d9e0      	bls.n	90019b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90019bc2:	e7b8      	b.n	90019b36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019bc4:	f240 6074 	movw	r0, #1652	; 0x674
90019bc8:	4283      	cmp	r3, r0
90019bca:	d0b4      	beq.n	90019b36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019bcc:	d82d      	bhi.n	90019c2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
90019bce:	f240 605e 	movw	r0, #1630	; 0x65e
90019bd2:	4283      	cmp	r3, r0
90019bd4:	d804      	bhi.n	90019be0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
90019bd6:	f240 605d 	movw	r0, #1629	; 0x65d
90019bda:	4283      	cmp	r3, r0
90019bdc:	d3d2      	bcc.n	90019b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90019bde:	e7aa      	b.n	90019b36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019be0:	f240 605f 	movw	r0, #1631	; 0x65f
90019be4:	4283      	cmp	r3, r0
90019be6:	d0cd      	beq.n	90019b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90019be8:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
90019bec:	d0a3      	beq.n	90019b36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019bee:	00cb      	lsls	r3, r1, #3
90019bf0:	0649      	lsls	r1, r1, #25
90019bf2:	f403 7080 	and.w	r0, r3, #256	; 0x100
90019bf6:	7a13      	ldrb	r3, [r2, #8]
90019bf8:	ea43 0300 	orr.w	r3, r3, r0
90019bfc:	bf44      	itt	mi
90019bfe:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90019c02:	b21b      	sxthmi	r3, r3
90019c04:	1b5d      	subs	r5, r3, r5
90019c06:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90019c0a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90019c0e:	7b53      	ldrb	r3, [r2, #13]
90019c10:	015b      	lsls	r3, r3, #5
90019c12:	f403 7180 	and.w	r1, r3, #256	; 0x100
90019c16:	7993      	ldrb	r3, [r2, #6]
90019c18:	430b      	orrs	r3, r1
90019c1a:	2105      	movs	r1, #5
90019c1c:	005b      	lsls	r3, r3, #1
90019c1e:	fb93 f3f1 	sdiv	r3, r3, r1
90019c22:	f992 1009 	ldrsb.w	r1, [r2, #9]
90019c26:	440b      	add	r3, r1
90019c28:	e756      	b.n	90019ad8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
90019c2a:	f240 60e2 	movw	r0, #1762	; 0x6e2
90019c2e:	4283      	cmp	r3, r0
90019c30:	d809      	bhi.n	90019c46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
90019c32:	f240 60df 	movw	r0, #1759	; 0x6df
90019c36:	4283      	cmp	r3, r0
90019c38:	f4bf af7d 	bcs.w	90019b36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019c3c:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
90019c40:	2b05      	cmp	r3, #5
90019c42:	d8d4      	bhi.n	90019bee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90019c44:	e777      	b.n	90019b36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019c46:	f240 60e3 	movw	r0, #1763	; 0x6e3
90019c4a:	4283      	cmp	r3, r0
90019c4c:	d09a      	beq.n	90019b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90019c4e:	f240 60e4 	movw	r0, #1764	; 0x6e4
90019c52:	4283      	cmp	r3, r0
90019c54:	e7ca      	b.n	90019bec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
90019c56:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
90019c5a:	d22b      	bcs.n	90019cb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
90019c5c:	f640 00ed 	movw	r0, #2285	; 0x8ed
90019c60:	4283      	cmp	r3, r0
90019c62:	d28f      	bcs.n	90019b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90019c64:	f640 00e5 	movw	r0, #2277	; 0x8e5
90019c68:	4283      	cmp	r3, r0
90019c6a:	d816      	bhi.n	90019c9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
90019c6c:	f640 00e4 	movw	r0, #2276	; 0x8e4
90019c70:	4283      	cmp	r3, r0
90019c72:	f4bf af60 	bcs.w	90019b36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019c76:	f240 60ec 	movw	r0, #1772	; 0x6ec
90019c7a:	4283      	cmp	r3, r0
90019c7c:	d80a      	bhi.n	90019c94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
90019c7e:	f240 60eb 	movw	r0, #1771	; 0x6eb
90019c82:	4283      	cmp	r3, r0
90019c84:	f4bf af57 	bcs.w	90019b36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019c88:	f240 60ea 	movw	r0, #1770	; 0x6ea
90019c8c:	4283      	cmp	r3, r0
90019c8e:	f43f af79 	beq.w	90019b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90019c92:	e7ac      	b.n	90019bee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90019c94:	f240 60ed 	movw	r0, #1773	; 0x6ed
90019c98:	e7f8      	b.n	90019c8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
90019c9a:	f640 00e8 	movw	r0, #2280	; 0x8e8
90019c9e:	4283      	cmp	r3, r0
90019ca0:	d802      	bhi.n	90019ca8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
90019ca2:	f640 00e7 	movw	r0, #2279	; 0x8e7
90019ca6:	e798      	b.n	90019bda <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
90019ca8:	f640 00e9 	movw	r0, #2281	; 0x8e9
90019cac:	4283      	cmp	r3, r0
90019cae:	f47f af42 	bne.w	90019b36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019cb2:	e767      	b.n	90019b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90019cb4:	f640 00f6 	movw	r0, #2294	; 0x8f6
90019cb8:	4283      	cmp	r3, r0
90019cba:	f43f af63 	beq.w	90019b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90019cbe:	d802      	bhi.n	90019cc6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
90019cc0:	f640 00f2 	movw	r0, #2290	; 0x8f2
90019cc4:	e7f2      	b.n	90019cac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
90019cc6:	f640 00fa 	movw	r0, #2298	; 0x8fa
90019cca:	4283      	cmp	r3, r0
90019ccc:	d805      	bhi.n	90019cda <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
90019cce:	f640 00f9 	movw	r0, #2297	; 0x8f9
90019cd2:	4283      	cmp	r3, r0
90019cd4:	f4ff af2f 	bcc.w	90019b36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019cd8:	e754      	b.n	90019b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90019cda:	f640 00fe 	movw	r0, #2302	; 0x8fe
90019cde:	4283      	cmp	r3, r0
90019ce0:	e7af      	b.n	90019c42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
90019ce2:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
90019ce6:	4617      	mov	r7, r2
90019ce8:	f102 0808 	add.w	r8, r2, #8
90019cec:	4666      	mov	r6, ip
90019cee:	6838      	ldr	r0, [r7, #0]
90019cf0:	3708      	adds	r7, #8
90019cf2:	f857 1c04 	ldr.w	r1, [r7, #-4]
90019cf6:	46e6      	mov	lr, ip
90019cf8:	4547      	cmp	r7, r8
90019cfa:	e8ae 0003 	stmia.w	lr!, {r0, r1}
90019cfe:	46f4      	mov	ip, lr
90019d00:	d1f5      	bne.n	90019cee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
90019d02:	6838      	ldr	r0, [r7, #0]
90019d04:	f8ce 0000 	str.w	r0, [lr]
90019d08:	88b9      	ldrh	r1, [r7, #4]
90019d0a:	f8ae 1004 	strh.w	r1, [lr, #4]
90019d0e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
90019d12:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90019d16:	d009      	beq.n	90019d2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
90019d18:	7b51      	ldrb	r1, [r2, #13]
90019d1a:	7992      	ldrb	r2, [r2, #6]
90019d1c:	0149      	lsls	r1, r1, #5
90019d1e:	f401 7180 	and.w	r1, r1, #256	; 0x100
90019d22:	4311      	orrs	r1, r2
90019d24:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
90019d28:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
90019d2c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90019d30:	b2ad      	uxth	r5, r5
90019d32:	d00d      	beq.n	90019d50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
90019d34:	442b      	add	r3, r5
90019d36:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
90019d3a:	b29b      	uxth	r3, r3
90019d3c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90019d40:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
90019d44:	10db      	asrs	r3, r3, #3
90019d46:	f003 0360 	and.w	r3, r3, #96	; 0x60
90019d4a:	4313      	orrs	r3, r2
90019d4c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
90019d50:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
90019d54:	00cb      	lsls	r3, r1, #3
90019d56:	064f      	lsls	r7, r1, #25
90019d58:	f403 7280 	and.w	r2, r3, #256	; 0x100
90019d5c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
90019d60:	ea43 0302 	orr.w	r3, r3, r2
90019d64:	bf44      	itt	mi
90019d66:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90019d6a:	b21b      	sxthmi	r3, r3
90019d6c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90019d70:	1b5b      	subs	r3, r3, r5
90019d72:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
90019d76:	4632      	mov	r2, r6
90019d78:	e6f9      	b.n	90019b6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
90019d7a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
90019d7e:	4617      	mov	r7, r2
90019d80:	f102 0908 	add.w	r9, r2, #8
90019d84:	4666      	mov	r6, ip
90019d86:	6838      	ldr	r0, [r7, #0]
90019d88:	3708      	adds	r7, #8
90019d8a:	f857 1c04 	ldr.w	r1, [r7, #-4]
90019d8e:	46e0      	mov	r8, ip
90019d90:	454f      	cmp	r7, r9
90019d92:	e8a8 0003 	stmia.w	r8!, {r0, r1}
90019d96:	46c4      	mov	ip, r8
90019d98:	d1f5      	bne.n	90019d86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
90019d9a:	6838      	ldr	r0, [r7, #0]
90019d9c:	f8c8 0000 	str.w	r0, [r8]
90019da0:	88b9      	ldrh	r1, [r7, #4]
90019da2:	f8a8 1004 	strh.w	r1, [r8, #4]
90019da6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
90019daa:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90019dae:	d009      	beq.n	90019dc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
90019db0:	7b51      	ldrb	r1, [r2, #13]
90019db2:	7992      	ldrb	r2, [r2, #6]
90019db4:	0149      	lsls	r1, r1, #5
90019db6:	f401 7180 	and.w	r1, r1, #256	; 0x100
90019dba:	4311      	orrs	r1, r2
90019dbc:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
90019dc0:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
90019dc4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90019dc8:	d00e      	beq.n	90019de8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
90019dca:	eba3 030e 	sub.w	r3, r3, lr
90019dce:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
90019dd2:	b29b      	uxth	r3, r3
90019dd4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90019dd8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
90019ddc:	10db      	asrs	r3, r3, #3
90019dde:	f003 0360 	and.w	r3, r3, #96	; 0x60
90019de2:	4313      	orrs	r3, r2
90019de4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
90019de8:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
90019dec:	00cb      	lsls	r3, r1, #3
90019dee:	0648      	lsls	r0, r1, #25
90019df0:	f403 7280 	and.w	r2, r3, #256	; 0x100
90019df4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
90019df8:	ea43 0302 	orr.w	r3, r3, r2
90019dfc:	bf44      	itt	mi
90019dfe:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90019e02:	b21b      	sxthmi	r3, r3
90019e04:	1b5d      	subs	r5, r3, r5
90019e06:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90019e0a:	e7b4      	b.n	90019d76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

90019e0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
90019e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90019e10:	461e      	mov	r6, r3
90019e12:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90019e14:	4604      	mov	r4, r0
90019e16:	4617      	mov	r7, r2
90019e18:	eb00 0343 	add.w	r3, r0, r3, lsl #1
90019e1c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
90019e20:	f7ed fee6 	bl	90007bf0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90019e24:	4605      	mov	r5, r0
90019e26:	b918      	cbnz	r0, 90019e30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
90019e28:	6030      	str	r0, [r6, #0]
90019e2a:	4628      	mov	r0, r5
90019e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90019e30:	683b      	ldr	r3, [r7, #0]
90019e32:	4601      	mov	r1, r0
90019e34:	4638      	mov	r0, r7
90019e36:	68db      	ldr	r3, [r3, #12]
90019e38:	4798      	blx	r3
90019e3a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
90019e3e:	4602      	mov	r2, r0
90019e40:	6030      	str	r0, [r6, #0]
90019e42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90019e46:	d213      	bcs.n	90019e70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
90019e48:	4643      	mov	r3, r8
90019e4a:	4639      	mov	r1, r7
90019e4c:	4620      	mov	r0, r4
90019e4e:	f7ff fe39 	bl	90019ac4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
90019e52:	6030      	str	r0, [r6, #0]
90019e54:	6833      	ldr	r3, [r6, #0]
90019e56:	b143      	cbz	r3, 90019e6a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
90019e58:	7b5a      	ldrb	r2, [r3, #13]
90019e5a:	7a9b      	ldrb	r3, [r3, #10]
90019e5c:	0052      	lsls	r2, r2, #1
90019e5e:	f402 7280 	and.w	r2, r2, #256	; 0x100
90019e62:	4313      	orrs	r3, r2
90019e64:	bf0c      	ite	eq
90019e66:	2301      	moveq	r3, #1
90019e68:	2300      	movne	r3, #0
90019e6a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
90019e6e:	e7dc      	b.n	90019e2a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
90019e70:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
90019e74:	b29b      	uxth	r3, r3
90019e76:	2b7f      	cmp	r3, #127	; 0x7f
90019e78:	d804      	bhi.n	90019e84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
90019e7a:	4639      	mov	r1, r7
90019e7c:	4620      	mov	r0, r4
90019e7e:	f7ff fd15 	bl	900198ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
90019e82:	e7e6      	b.n	90019e52 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
90019e84:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
90019e88:	2b00      	cmp	r3, #0
90019e8a:	d0e3      	beq.n	90019e54 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
90019e8c:	f640 1302 	movw	r3, #2306	; 0x902
90019e90:	429d      	cmp	r5, r3
90019e92:	d1df      	bne.n	90019e54 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
90019e94:	4601      	mov	r1, r0
90019e96:	4620      	mov	r0, r4
90019e98:	f7ff fcd8 	bl	9001984c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
90019e9c:	e7d9      	b.n	90019e52 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

90019e9e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
90019e9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90019ea2:	461e      	mov	r6, r3
90019ea4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90019ea6:	4604      	mov	r4, r0
90019ea8:	4617      	mov	r7, r2
90019eaa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
90019eae:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
90019eb2:	f7ed fe9d 	bl	90007bf0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90019eb6:	4605      	mov	r5, r0
90019eb8:	b918      	cbnz	r0, 90019ec2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
90019eba:	6030      	str	r0, [r6, #0]
90019ebc:	4628      	mov	r0, r5
90019ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90019ec2:	683b      	ldr	r3, [r7, #0]
90019ec4:	4601      	mov	r1, r0
90019ec6:	4638      	mov	r0, r7
90019ec8:	f8d3 9008 	ldr.w	r9, [r3, #8]
90019ecc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
90019ed0:	47c8      	blx	r9
90019ed2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
90019ed6:	4602      	mov	r2, r0
90019ed8:	6030      	str	r0, [r6, #0]
90019eda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90019ede:	d213      	bcs.n	90019f08 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
90019ee0:	4643      	mov	r3, r8
90019ee2:	4639      	mov	r1, r7
90019ee4:	4620      	mov	r0, r4
90019ee6:	f7ff fded 	bl	90019ac4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
90019eea:	6030      	str	r0, [r6, #0]
90019eec:	6833      	ldr	r3, [r6, #0]
90019eee:	b143      	cbz	r3, 90019f02 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
90019ef0:	7b5a      	ldrb	r2, [r3, #13]
90019ef2:	7a9b      	ldrb	r3, [r3, #10]
90019ef4:	0052      	lsls	r2, r2, #1
90019ef6:	f402 7280 	and.w	r2, r2, #256	; 0x100
90019efa:	4313      	orrs	r3, r2
90019efc:	bf0c      	ite	eq
90019efe:	2301      	moveq	r3, #1
90019f00:	2300      	movne	r3, #0
90019f02:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
90019f06:	e7d9      	b.n	90019ebc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
90019f08:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
90019f0c:	b29b      	uxth	r3, r3
90019f0e:	2b7f      	cmp	r3, #127	; 0x7f
90019f10:	d804      	bhi.n	90019f1c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
90019f12:	4639      	mov	r1, r7
90019f14:	4620      	mov	r0, r4
90019f16:	f7ff fcc9 	bl	900198ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
90019f1a:	e7e6      	b.n	90019eea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
90019f1c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
90019f20:	2b00      	cmp	r3, #0
90019f22:	d0e3      	beq.n	90019eec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
90019f24:	f640 1302 	movw	r3, #2306	; 0x902
90019f28:	429d      	cmp	r5, r3
90019f2a:	d1df      	bne.n	90019eec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
90019f2c:	4601      	mov	r1, r0
90019f2e:	4620      	mov	r0, r4
90019f30:	f7ff fc8c 	bl	9001984c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
90019f34:	e7d9      	b.n	90019eea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

90019f36 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
90019f36:	b510      	push	{r4, lr}
90019f38:	4604      	mov	r4, r0
90019f3a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
90019f3e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90019f40:	b1e1      	cbz	r1, 90019f7c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
90019f42:	2b0a      	cmp	r3, #10
90019f44:	d02d      	beq.n	90019fa2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
90019f46:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
90019f48:	3901      	subs	r1, #1
90019f4a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
90019f4e:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
90019f50:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
90019f54:	1c51      	adds	r1, r2, #1
90019f56:	b289      	uxth	r1, r1
90019f58:	2901      	cmp	r1, #1
90019f5a:	bf8a      	itet	hi
90019f5c:	f102 32ff 	addhi.w	r2, r2, #4294967295
90019f60:	87e1      	strhls	r1, [r4, #62]	; 0x3e
90019f62:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
90019f64:	1c5a      	adds	r2, r3, #1
90019f66:	8722      	strh	r2, [r4, #56]	; 0x38
90019f68:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
90019f6a:	4413      	add	r3, r2
90019f6c:	b29b      	uxth	r3, r3
90019f6e:	2b09      	cmp	r3, #9
90019f70:	bf88      	it	hi
90019f72:	3b0a      	subhi	r3, #10
90019f74:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90019f78:	8458      	strh	r0, [r3, #34]	; 0x22
90019f7a:	e7de      	b.n	90019f3a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
90019f7c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90019f7e:	2b0a      	cmp	r3, #10
90019f80:	d00f      	beq.n	90019fa2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
90019f82:	4620      	mov	r0, r4
90019f84:	f7ff fc10 	bl	900197a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
90019f88:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90019f8a:	1c5a      	adds	r2, r3, #1
90019f8c:	8722      	strh	r2, [r4, #56]	; 0x38
90019f8e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
90019f90:	4413      	add	r3, r2
90019f92:	b29b      	uxth	r3, r3
90019f94:	2b09      	cmp	r3, #9
90019f96:	bf88      	it	hi
90019f98:	3b0a      	subhi	r3, #10
90019f9a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90019f9e:	8458      	strh	r0, [r3, #34]	; 0x22
90019fa0:	e7ec      	b.n	90019f7c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
90019fa2:	bd10      	pop	{r4, pc}

90019fa4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
90019fa4:	b538      	push	{r3, r4, r5, lr}
90019fa6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90019fa8:	4604      	mov	r4, r0
90019faa:	eb00 0243 	add.w	r2, r0, r3, lsl #1
90019fae:	8c55      	ldrh	r5, [r2, #34]	; 0x22
90019fb0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
90019fb2:	3a01      	subs	r2, #1
90019fb4:	8702      	strh	r2, [r0, #56]	; 0x38
90019fb6:	1c5a      	adds	r2, r3, #1
90019fb8:	b292      	uxth	r2, r2
90019fba:	2a09      	cmp	r2, #9
90019fbc:	bf8a      	itet	hi
90019fbe:	3b09      	subhi	r3, #9
90019fc0:	86c2      	strhls	r2, [r0, #54]	; 0x36
90019fc2:	86c3      	strhhi	r3, [r0, #54]	; 0x36
90019fc4:	f7ff ffb7 	bl	90019f36 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
90019fc8:	8c23      	ldrh	r3, [r4, #32]
90019fca:	2b01      	cmp	r3, #1
90019fcc:	bf9c      	itt	ls
90019fce:	3301      	addls	r3, #1
90019fd0:	8423      	strhls	r3, [r4, #32]
90019fd2:	8be3      	ldrh	r3, [r4, #30]
90019fd4:	b90b      	cbnz	r3, 90019fda <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
90019fd6:	2302      	movs	r3, #2
90019fd8:	83e3      	strh	r3, [r4, #30]
90019fda:	8be3      	ldrh	r3, [r4, #30]
90019fdc:	4628      	mov	r0, r5
90019fde:	3b01      	subs	r3, #1
90019fe0:	b29b      	uxth	r3, r3
90019fe2:	83e3      	strh	r3, [r4, #30]
90019fe4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90019fe8:	8365      	strh	r5, [r4, #26]
90019fea:	bd38      	pop	{r3, r4, r5, pc}

90019fec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
90019fec:	428a      	cmp	r2, r1
90019fee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90019ff2:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
90019ff4:	d932      	bls.n	9001a05c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
90019ff6:	8f05      	ldrh	r5, [r0, #56]	; 0x38
90019ff8:	1a54      	subs	r4, r2, r1
90019ffa:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
90019ffe:	19ee      	adds	r6, r5, r7
9001a000:	fa1f fe84 	uxth.w	lr, r4
9001a004:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
9001a008:	3e01      	subs	r6, #1
9001a00a:	b2b4      	uxth	r4, r6
9001a00c:	eba4 090e 	sub.w	r9, r4, lr
9001a010:	fa1f f989 	uxth.w	r9, r9
9001a014:	2c09      	cmp	r4, #9
9001a016:	4626      	mov	r6, r4
9001a018:	bf88      	it	hi
9001a01a:	f1a4 060a 	subhi.w	r6, r4, #10
9001a01e:	f1bc 0f00 	cmp.w	ip, #0
9001a022:	f104 34ff 	add.w	r4, r4, #4294967295
9001a026:	bf08      	it	eq
9001a028:	f04f 0c02 	moveq.w	ip, #2
9001a02c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
9001a030:	b2a4      	uxth	r4, r4
9001a032:	f10c 3cff 	add.w	ip, ip, #4294967295
9001a036:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
9001a03a:	454c      	cmp	r4, r9
9001a03c:	fa1f fc8c 	uxth.w	ip, ip
9001a040:	eb00 064c 	add.w	r6, r0, ip, lsl #1
9001a044:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
9001a048:	d1e4      	bne.n	9001a014 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
9001a04a:	eba5 050e 	sub.w	r5, r5, lr
9001a04e:	eb0e 0408 	add.w	r4, lr, r8
9001a052:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
9001a056:	8705      	strh	r5, [r0, #56]	; 0x38
9001a058:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
9001a05c:	8f04      	ldrh	r4, [r0, #56]	; 0x38
9001a05e:	250a      	movs	r5, #10
9001a060:	1a64      	subs	r4, r4, r1
9001a062:	4439      	add	r1, r7
9001a064:	b289      	uxth	r1, r1
9001a066:	8704      	strh	r4, [r0, #56]	; 0x38
9001a068:	2909      	cmp	r1, #9
9001a06a:	bf88      	it	hi
9001a06c:	390a      	subhi	r1, #10
9001a06e:	86c1      	strh	r1, [r0, #54]	; 0x36
9001a070:	b18a      	cbz	r2, 9001a096 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
9001a072:	8f01      	ldrh	r1, [r0, #56]	; 0x38
9001a074:	3a01      	subs	r2, #1
9001a076:	3101      	adds	r1, #1
9001a078:	b292      	uxth	r2, r2
9001a07a:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
9001a07e:	8701      	strh	r1, [r0, #56]	; 0x38
9001a080:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
9001a082:	b901      	cbnz	r1, 9001a086 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
9001a084:	86c5      	strh	r5, [r0, #54]	; 0x36
9001a086:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
9001a088:	3901      	subs	r1, #1
9001a08a:	b289      	uxth	r1, r1
9001a08c:	86c1      	strh	r1, [r0, #54]	; 0x36
9001a08e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
9001a092:	844c      	strh	r4, [r1, #34]	; 0x22
9001a094:	e7ec      	b.n	9001a070 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
9001a096:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001a09a:	f7ff bf4c 	b.w	90019f36 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

9001a09e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
9001a09e:	b570      	push	{r4, r5, r6, lr}
9001a0a0:	2500      	movs	r5, #0
9001a0a2:	4295      	cmp	r5, r2
9001a0a4:	d011      	beq.n	9001a0ca <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
9001a0a6:	8bc4      	ldrh	r4, [r0, #30]
9001a0a8:	f831 6b02 	ldrh.w	r6, [r1], #2
9001a0ac:	4414      	add	r4, r2
9001a0ae:	3c01      	subs	r4, #1
9001a0b0:	1b64      	subs	r4, r4, r5
9001a0b2:	b2a4      	uxth	r4, r4
9001a0b4:	2c01      	cmp	r4, #1
9001a0b6:	bf88      	it	hi
9001a0b8:	3c02      	subhi	r4, #2
9001a0ba:	eb00 0444 	add.w	r4, r0, r4, lsl #1
9001a0be:	8b64      	ldrh	r4, [r4, #26]
9001a0c0:	42b4      	cmp	r4, r6
9001a0c2:	d117      	bne.n	9001a0f4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
9001a0c4:	3501      	adds	r5, #1
9001a0c6:	b2ad      	uxth	r5, r5
9001a0c8:	e7eb      	b.n	9001a0a2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
9001a0ca:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001a0ce:	2400      	movs	r4, #0
9001a0d0:	4413      	add	r3, r2
9001a0d2:	b2a2      	uxth	r2, r4
9001a0d4:	429a      	cmp	r2, r3
9001a0d6:	da0f      	bge.n	9001a0f8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
9001a0d8:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
9001a0da:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
9001a0de:	3401      	adds	r4, #1
9001a0e0:	4432      	add	r2, r6
9001a0e2:	b292      	uxth	r2, r2
9001a0e4:	2a09      	cmp	r2, #9
9001a0e6:	bf88      	it	hi
9001a0e8:	3a0a      	subhi	r2, #10
9001a0ea:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001a0ee:	8c52      	ldrh	r2, [r2, #34]	; 0x22
9001a0f0:	42aa      	cmp	r2, r5
9001a0f2:	d0ee      	beq.n	9001a0d2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
9001a0f4:	2000      	movs	r0, #0
9001a0f6:	bd70      	pop	{r4, r5, r6, pc}
9001a0f8:	2001      	movs	r0, #1
9001a0fa:	e7fc      	b.n	9001a0f6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

9001a0fc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
9001a0fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001a100:	4605      	mov	r5, r0
9001a102:	4616      	mov	r6, r2
9001a104:	1c8c      	adds	r4, r1, #2
9001a106:	8809      	ldrh	r1, [r1, #0]
9001a108:	ea4f 3a11 	mov.w	sl, r1, lsr #12
9001a10c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
9001a110:	42b3      	cmp	r3, r6
9001a112:	d124      	bne.n	9001a15e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
9001a114:	f3c1 2903 	ubfx	r9, r1, #8, #4
9001a118:	f3c1 1803 	ubfx	r8, r1, #4, #4
9001a11c:	f001 070f 	and.w	r7, r1, #15
9001a120:	4652      	mov	r2, sl
9001a122:	f8cd 8000 	str.w	r8, [sp]
9001a126:	464b      	mov	r3, r9
9001a128:	4621      	mov	r1, r4
9001a12a:	4628      	mov	r0, r5
9001a12c:	f7ff ffb7 	bl	9001a09e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
9001a130:	4683      	mov	fp, r0
9001a132:	b168      	cbz	r0, 9001a150 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
9001a134:	eb0a 0109 	add.w	r1, sl, r9
9001a138:	463a      	mov	r2, r7
9001a13a:	4628      	mov	r0, r5
9001a13c:	4441      	add	r1, r8
9001a13e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
9001a142:	4649      	mov	r1, r9
9001a144:	f7ff ff52 	bl	90019fec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
9001a148:	4658      	mov	r0, fp
9001a14a:	b003      	add	sp, #12
9001a14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001a150:	eb07 010a 	add.w	r1, r7, sl
9001a154:	4449      	add	r1, r9
9001a156:	4441      	add	r1, r8
9001a158:	eb04 0141 	add.w	r1, r4, r1, lsl #1
9001a15c:	e7d2      	b.n	9001a104 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
9001a15e:	f04f 0b00 	mov.w	fp, #0
9001a162:	e7f1      	b.n	9001a148 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

9001a164 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
9001a164:	b570      	push	{r4, r5, r6, lr}
9001a166:	8810      	ldrh	r0, [r2, #0]
9001a168:	4298      	cmp	r0, r3
9001a16a:	d817      	bhi.n	9001a19c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
9001a16c:	1e48      	subs	r0, r1, #1
9001a16e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
9001a172:	4298      	cmp	r0, r3
9001a174:	d312      	bcc.n	9001a19c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
9001a176:	2400      	movs	r4, #0
9001a178:	428c      	cmp	r4, r1
9001a17a:	d20f      	bcs.n	9001a19c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
9001a17c:	1860      	adds	r0, r4, r1
9001a17e:	1040      	asrs	r0, r0, #1
9001a180:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
9001a184:	0085      	lsls	r5, r0, #2
9001a186:	42b3      	cmp	r3, r6
9001a188:	d902      	bls.n	9001a190 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
9001a18a:	3001      	adds	r0, #1
9001a18c:	b284      	uxth	r4, r0
9001a18e:	e7f3      	b.n	9001a178 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
9001a190:	d201      	bcs.n	9001a196 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
9001a192:	b281      	uxth	r1, r0
9001a194:	e7f0      	b.n	9001a178 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
9001a196:	442a      	add	r2, r5
9001a198:	8850      	ldrh	r0, [r2, #2]
9001a19a:	bd70      	pop	{r4, r5, r6, pc}
9001a19c:	2000      	movs	r0, #0
9001a19e:	e7fc      	b.n	9001a19a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

9001a1a0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
9001a1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001a1a4:	6c45      	ldr	r5, [r0, #68]	; 0x44
9001a1a6:	4604      	mov	r4, r0
9001a1a8:	260b      	movs	r6, #11
9001a1aa:	886f      	ldrh	r7, [r5, #2]
9001a1ac:	087f      	lsrs	r7, r7, #1
9001a1ae:	3e01      	subs	r6, #1
9001a1b0:	d013      	beq.n	9001a1da <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
9001a1b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
9001a1b4:	462a      	mov	r2, r5
9001a1b6:	4639      	mov	r1, r7
9001a1b8:	4620      	mov	r0, r4
9001a1ba:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001a1be:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
9001a1c2:	4643      	mov	r3, r8
9001a1c4:	f7ff ffce 	bl	9001a164 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
9001a1c8:	b138      	cbz	r0, 9001a1da <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
9001a1ca:	eb05 0140 	add.w	r1, r5, r0, lsl #1
9001a1ce:	4642      	mov	r2, r8
9001a1d0:	4620      	mov	r0, r4
9001a1d2:	f7ff ff93 	bl	9001a0fc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
9001a1d6:	2800      	cmp	r0, #0
9001a1d8:	d1e9      	bne.n	9001a1ae <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
9001a1da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

9001a1e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
9001a1e0:	b570      	push	{r4, r5, r6, lr}
9001a1e2:	694a      	ldr	r2, [r1, #20]
9001a1e4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
9001a1e6:	684b      	ldr	r3, [r1, #4]
9001a1e8:	1b54      	subs	r4, r2, r5
9001a1ea:	6ace      	ldr	r6, [r1, #44]	; 0x2c
9001a1ec:	f000 8106 	beq.w	9001a3fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
9001a1f0:	1b9b      	subs	r3, r3, r6
9001a1f2:	d003      	beq.n	9001a1fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
9001a1f4:	4363      	muls	r3, r4
9001a1f6:	2210      	movs	r2, #16
9001a1f8:	fb93 f3f2 	sdiv	r3, r3, r2
9001a1fc:	680c      	ldr	r4, [r1, #0]
9001a1fe:	698a      	ldr	r2, [r1, #24]
9001a200:	1b65      	subs	r5, r4, r5
9001a202:	f000 80fd 	beq.w	9001a400 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
9001a206:	1b92      	subs	r2, r2, r6
9001a208:	d003      	beq.n	9001a212 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
9001a20a:	436a      	muls	r2, r5
9001a20c:	2410      	movs	r4, #16
9001a20e:	fb92 f2f4 	sdiv	r2, r2, r4
9001a212:	1a9b      	subs	r3, r3, r2
9001a214:	ed9f 4a89 	vldr	s8, [pc, #548]	; 9001a43c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
9001a218:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001a21c:	460a      	mov	r2, r1
9001a21e:	ee07 3a90 	vmov	s15, r3
9001a222:	f100 040c 	add.w	r4, r0, #12
9001a226:	4603      	mov	r3, r0
9001a228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9001a22c:	ee67 7a84 	vmul.f32	s15, s15, s8
9001a230:	ee87 3a27 	vdiv.f32	s6, s14, s15
9001a234:	eeb1 6a43 	vneg.f32	s12, s6
9001a238:	edd2 7a02 	vldr	s15, [r2, #8]
9001a23c:	3214      	adds	r2, #20
9001a23e:	eec7 6a27 	vdiv.f32	s13, s14, s15
9001a242:	ece3 6a01 	vstmia	r3!, {s13}
9001a246:	429c      	cmp	r4, r3
9001a248:	ed52 7a02 	vldr	s15, [r2, #-8]
9001a24c:	ee67 7aa6 	vmul.f32	s15, s15, s13
9001a250:	edc3 7a02 	vstr	s15, [r3, #8]
9001a254:	ed52 7a01 	vldr	s15, [r2, #-4]
9001a258:	ee67 7aa6 	vmul.f32	s15, s15, s13
9001a25c:	edc3 7a05 	vstr	s15, [r3, #20]
9001a260:	d1ea      	bne.n	9001a238 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
9001a262:	6aca      	ldr	r2, [r1, #44]	; 0x2c
9001a264:	698b      	ldr	r3, [r1, #24]
9001a266:	edd0 4a02 	vldr	s9, [r0, #8]
9001a26a:	1a9b      	subs	r3, r3, r2
9001a26c:	edd0 3a00 	vldr	s7, [r0]
9001a270:	edd0 6a01 	vldr	s13, [r0, #4]
9001a274:	ee07 3a90 	vmov	s15, r3
9001a278:	684b      	ldr	r3, [r1, #4]
9001a27a:	ee76 6ae4 	vsub.f32	s13, s13, s9
9001a27e:	ed90 5a05 	vldr	s10, [r0, #20]
9001a282:	1a9b      	subs	r3, r3, r2
9001a284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9001a288:	ee73 4ae4 	vsub.f32	s9, s7, s9
9001a28c:	ed90 2a03 	vldr	s4, [r0, #12]
9001a290:	ee07 3a10 	vmov	s14, r3
9001a294:	edd0 5a04 	vldr	s11, [r0, #16]
9001a298:	ee67 7a84 	vmul.f32	s15, s15, s8
9001a29c:	ed90 1a07 	vldr	s2, [r0, #28]
9001a2a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a2a4:	edd0 2a06 	vldr	s5, [r0, #24]
9001a2a8:	ee75 5ac5 	vsub.f32	s11, s11, s10
9001a2ac:	ee64 7ae7 	vnmul.f32	s15, s9, s15
9001a2b0:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a2b4:	ee32 5a45 	vsub.f32	s10, s4, s10
9001a2b8:	eee6 7a87 	vfma.f32	s15, s13, s14
9001a2bc:	ee67 7a83 	vmul.f32	s15, s15, s6
9001a2c0:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
9001a2c4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
9001a2c6:	694a      	ldr	r2, [r1, #20]
9001a2c8:	1b13      	subs	r3, r2, r4
9001a2ca:	ee07 3a10 	vmov	s14, r3
9001a2ce:	680b      	ldr	r3, [r1, #0]
9001a2d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a2d4:	1b1b      	subs	r3, r3, r4
9001a2d6:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a2da:	ee64 4ac7 	vnmul.f32	s9, s9, s14
9001a2de:	ee07 3a10 	vmov	s14, r3
9001a2e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a2e6:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a2ea:	eee6 4a87 	vfma.f32	s9, s13, s14
9001a2ee:	ee64 4a86 	vmul.f32	s9, s9, s12
9001a2f2:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
9001a2f6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
9001a2f8:	698b      	ldr	r3, [r1, #24]
9001a2fa:	1a9b      	subs	r3, r3, r2
9001a2fc:	ee06 3a90 	vmov	s13, r3
9001a300:	684b      	ldr	r3, [r1, #4]
9001a302:	1a9b      	subs	r3, r3, r2
9001a304:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9001a308:	ee07 3a10 	vmov	s14, r3
9001a30c:	ee66 6a84 	vmul.f32	s13, s13, s8
9001a310:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a314:	ee65 6a66 	vnmul.f32	s13, s10, s13
9001a318:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a31c:	eee5 6a87 	vfma.f32	s13, s11, s14
9001a320:	ee66 6a83 	vmul.f32	s13, s13, s6
9001a324:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
9001a328:	6a8c      	ldr	r4, [r1, #40]	; 0x28
9001a32a:	694a      	ldr	r2, [r1, #20]
9001a32c:	1b13      	subs	r3, r2, r4
9001a32e:	ee07 3a10 	vmov	s14, r3
9001a332:	680b      	ldr	r3, [r1, #0]
9001a334:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a338:	1b1b      	subs	r3, r3, r4
9001a33a:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a33e:	ee25 5a47 	vnmul.f32	s10, s10, s14
9001a342:	ee07 3a10 	vmov	s14, r3
9001a346:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a34a:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a34e:	eea5 5a87 	vfma.f32	s10, s11, s14
9001a352:	edd0 5a08 	vldr	s11, [r0, #32]
9001a356:	ee31 1a65 	vsub.f32	s2, s2, s11
9001a35a:	ee72 5ae5 	vsub.f32	s11, s5, s11
9001a35e:	ee25 5a06 	vmul.f32	s10, s10, s12
9001a362:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
9001a366:	6aca      	ldr	r2, [r1, #44]	; 0x2c
9001a368:	698b      	ldr	r3, [r1, #24]
9001a36a:	1a9b      	subs	r3, r3, r2
9001a36c:	ee07 3a10 	vmov	s14, r3
9001a370:	684b      	ldr	r3, [r1, #4]
9001a372:	1a9b      	subs	r3, r3, r2
9001a374:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a378:	ee01 3a90 	vmov	s3, r3
9001a37c:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a380:	eef8 1ae1 	vcvt.f32.s32	s3, s3
9001a384:	ee25 7ac7 	vnmul.f32	s14, s11, s14
9001a388:	ee61 1a84 	vmul.f32	s3, s3, s8
9001a38c:	eea1 7a21 	vfma.f32	s14, s2, s3
9001a390:	ee27 7a03 	vmul.f32	s14, s14, s6
9001a394:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
9001a398:	6a8c      	ldr	r4, [r1, #40]	; 0x28
9001a39a:	694a      	ldr	r2, [r1, #20]
9001a39c:	1b13      	subs	r3, r2, r4
9001a39e:	ee03 3a10 	vmov	s6, r3
9001a3a2:	680b      	ldr	r3, [r1, #0]
9001a3a4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
9001a3a8:	1b1b      	subs	r3, r3, r4
9001a3aa:	ee23 3a04 	vmul.f32	s6, s6, s8
9001a3ae:	ee65 5ac3 	vnmul.f32	s11, s11, s6
9001a3b2:	ee03 3a10 	vmov	s6, r3
9001a3b6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
9001a3ba:	ee23 4a04 	vmul.f32	s8, s6, s8
9001a3be:	eee1 5a04 	vfma.f32	s11, s2, s8
9001a3c2:	ee25 6a86 	vmul.f32	s12, s11, s12
9001a3c6:	ee62 5a67 	vnmul.f32	s11, s4, s15
9001a3ca:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
9001a3ce:	eee3 5aa6 	vfma.f32	s11, s7, s13
9001a3d2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
9001a3d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001a3da:	dd13      	ble.n	9001a404 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
9001a3dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
9001a3e0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
9001a3e4:	63c3      	str	r3, [r0, #60]	; 0x3c
9001a3e6:	eee3 7a87 	vfma.f32	s15, s7, s14
9001a3ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
9001a3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001a3f2:	dd15      	ble.n	9001a420 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
9001a3f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
9001a3f8:	6403      	str	r3, [r0, #64]	; 0x40
9001a3fa:	bd70      	pop	{r4, r5, r6, pc}
9001a3fc:	4623      	mov	r3, r4
9001a3fe:	e6fd      	b.n	9001a1fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
9001a400:	462a      	mov	r2, r5
9001a402:	e706      	b.n	9001a212 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
9001a404:	d502      	bpl.n	9001a40c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
9001a406:	f647 73ff 	movw	r3, #32767	; 0x7fff
9001a40a:	e7e9      	b.n	9001a3e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
9001a40c:	ee22 2a64 	vnmul.f32	s4, s4, s9
9001a410:	eea3 2a85 	vfma.f32	s4, s7, s10
9001a414:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
9001a418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001a41c:	dade      	bge.n	9001a3dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
9001a41e:	e7f2      	b.n	9001a406 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
9001a420:	d502      	bpl.n	9001a428 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
9001a422:	f647 73ff 	movw	r3, #32767	; 0x7fff
9001a426:	e7e7      	b.n	9001a3f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
9001a428:	ee62 4ae4 	vnmul.f32	s9, s5, s9
9001a42c:	eee3 4a86 	vfma.f32	s9, s7, s12
9001a430:	eef5 4ac0 	vcmpe.f32	s9, #0.0
9001a434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001a438:	dadc      	bge.n	9001a3f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
9001a43a:	e7f2      	b.n	9001a422 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
9001a43c:	3d800000 	.word	0x3d800000

9001a440 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
9001a440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001a444:	2714      	movs	r7, #20
9001a446:	435f      	muls	r7, r3
9001a448:	eb02 0c07 	add.w	ip, r2, r7
9001a44c:	f8dc 5004 	ldr.w	r5, [ip, #4]
9001a450:	f115 0e0f 	adds.w	lr, r5, #15
9001a454:	f100 80a2 	bmi.w	9001a59c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
9001a458:	ea4f 1e2e 	mov.w	lr, lr, asr #4
9001a45c:	9c08      	ldr	r4, [sp, #32]
9001a45e:	2614      	movs	r6, #20
9001a460:	f8c0 e014 	str.w	lr, [r0, #20]
9001a464:	4366      	muls	r6, r4
9001a466:	eb02 0806 	add.w	r8, r2, r6
9001a46a:	f8d8 5004 	ldr.w	r5, [r8, #4]
9001a46e:	f115 040f 	adds.w	r4, r5, #15
9001a472:	f100 809f 	bmi.w	9001a5b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
9001a476:	1124      	asrs	r4, r4, #4
9001a478:	eba4 040e 	sub.w	r4, r4, lr
9001a47c:	6184      	str	r4, [r0, #24]
9001a47e:	2c00      	cmp	r4, #0
9001a480:	f000 808a 	beq.w	9001a598 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
9001a484:	f8dc 9004 	ldr.w	r9, [ip, #4]
9001a488:	f8d8 4004 	ldr.w	r4, [r8, #4]
9001a48c:	5995      	ldr	r5, [r2, r6]
9001a48e:	eba4 0809 	sub.w	r8, r4, r9
9001a492:	59d4      	ldr	r4, [r2, r7]
9001a494:	eba5 0a04 	sub.w	sl, r5, r4
9001a498:	ea4f 1608 	mov.w	r6, r8, lsl #4
9001a49c:	ea4f 150a 	mov.w	r5, sl, lsl #4
9001a4a0:	fb0e fe05 	mul.w	lr, lr, r5
9001a4a4:	fb0a ee19 	mls	lr, sl, r9, lr
9001a4a8:	fb08 e404 	mla	r4, r8, r4, lr
9001a4ac:	3c01      	subs	r4, #1
9001a4ae:	19a4      	adds	r4, r4, r6
9001a4b0:	f100 808c 	bmi.w	9001a5cc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
9001a4b4:	fb94 fef6 	sdiv	lr, r4, r6
9001a4b8:	fb06 441e 	mls	r4, r6, lr, r4
9001a4bc:	f8c0 e000 	str.w	lr, [r0]
9001a4c0:	6104      	str	r4, [r0, #16]
9001a4c2:	2d00      	cmp	r5, #0
9001a4c4:	f2c0 8095 	blt.w	9001a5f2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
9001a4c8:	fb95 f4f6 	sdiv	r4, r5, r6
9001a4cc:	fb06 5514 	mls	r5, r6, r4, r5
9001a4d0:	6044      	str	r4, [r0, #4]
9001a4d2:	6085      	str	r5, [r0, #8]
9001a4d4:	60c6      	str	r6, [r0, #12]
9001a4d6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
9001a4da:	f8dc 4004 	ldr.w	r4, [ip, #4]
9001a4de:	6945      	ldr	r5, [r0, #20]
9001a4e0:	59d2      	ldr	r2, [r2, r7]
9001a4e2:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
9001a4e6:	eddf 6a4b 	vldr	s13, [pc, #300]	; 9001a614 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
9001a4ea:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
9001a4ee:	ee07 4a10 	vmov	s14, r4
9001a4f2:	6804      	ldr	r4, [r0, #0]
9001a4f4:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
9001a4f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a4fc:	ee07 2a90 	vmov	s15, r2
9001a500:	ee27 7a26 	vmul.f32	s14, s14, s13
9001a504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9001a508:	ee67 7aa6 	vmul.f32	s15, s15, s13
9001a50c:	edd3 6a00 	vldr	s13, [r3]
9001a510:	eee6 6a07 	vfma.f32	s13, s12, s14
9001a514:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
9001a518:	eee6 6a27 	vfma.f32	s13, s12, s15
9001a51c:	edc0 6a07 	vstr	s13, [r0, #28]
9001a520:	edd0 6a01 	vldr	s13, [r0, #4]
9001a524:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
9001a528:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9001a52c:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
9001a530:	eea6 6aa5 	vfma.f32	s12, s13, s11
9001a534:	ed80 6a08 	vstr	s12, [r0, #32]
9001a538:	6a4a      	ldr	r2, [r1, #36]	; 0x24
9001a53a:	6242      	str	r2, [r0, #36]	; 0x24
9001a53c:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
9001a540:	ed93 6a03 	vldr	s12, [r3, #12]
9001a544:	eea5 6a87 	vfma.f32	s12, s11, s14
9001a548:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
9001a54c:	eea5 6aa7 	vfma.f32	s12, s11, s15
9001a550:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
9001a554:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
9001a558:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
9001a55c:	eea6 6aa5 	vfma.f32	s12, s13, s11
9001a560:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
9001a564:	6aca      	ldr	r2, [r1, #44]	; 0x2c
9001a566:	6302      	str	r2, [r0, #48]	; 0x30
9001a568:	ed93 6a06 	vldr	s12, [r3, #24]
9001a56c:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
9001a570:	eea5 6a87 	vfma.f32	s12, s11, s14
9001a574:	eeb0 7a46 	vmov.f32	s14, s12
9001a578:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
9001a57c:	eea6 7a27 	vfma.f32	s14, s12, s15
9001a580:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
9001a584:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
9001a588:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
9001a58c:	eee6 7a87 	vfma.f32	s15, s13, s14
9001a590:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
9001a594:	6b4b      	ldr	r3, [r1, #52]	; 0x34
9001a596:	63c3      	str	r3, [r0, #60]	; 0x3c
9001a598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001a59c:	2410      	movs	r4, #16
9001a59e:	f1c5 0501 	rsb	r5, r5, #1
9001a5a2:	fb9e fef4 	sdiv	lr, lr, r4
9001a5a6:	f015 050f 	ands.w	r5, r5, #15
9001a5aa:	bf18      	it	ne
9001a5ac:	2501      	movne	r5, #1
9001a5ae:	ebae 0e05 	sub.w	lr, lr, r5
9001a5b2:	e753      	b.n	9001a45c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
9001a5b4:	f04f 0910 	mov.w	r9, #16
9001a5b8:	f1c5 0501 	rsb	r5, r5, #1
9001a5bc:	fb94 f4f9 	sdiv	r4, r4, r9
9001a5c0:	f015 050f 	ands.w	r5, r5, #15
9001a5c4:	bf18      	it	ne
9001a5c6:	2501      	movne	r5, #1
9001a5c8:	1b64      	subs	r4, r4, r5
9001a5ca:	e755      	b.n	9001a478 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
9001a5cc:	4264      	negs	r4, r4
9001a5ce:	fb94 fef6 	sdiv	lr, r4, r6
9001a5d2:	f1ce 0800 	rsb	r8, lr, #0
9001a5d6:	fb06 441e 	mls	r4, r6, lr, r4
9001a5da:	f8c0 8000 	str.w	r8, [r0]
9001a5de:	6104      	str	r4, [r0, #16]
9001a5e0:	2c00      	cmp	r4, #0
9001a5e2:	f43f af6e 	beq.w	9001a4c2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
9001a5e6:	ea6f 0e0e 	mvn.w	lr, lr
9001a5ea:	1b34      	subs	r4, r6, r4
9001a5ec:	f8c0 e000 	str.w	lr, [r0]
9001a5f0:	e766      	b.n	9001a4c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
9001a5f2:	426d      	negs	r5, r5
9001a5f4:	fb95 f4f6 	sdiv	r4, r5, r6
9001a5f8:	f1c4 0e00 	rsb	lr, r4, #0
9001a5fc:	fb06 5514 	mls	r5, r6, r4, r5
9001a600:	f8c0 e004 	str.w	lr, [r0, #4]
9001a604:	6085      	str	r5, [r0, #8]
9001a606:	2d00      	cmp	r5, #0
9001a608:	f43f af64 	beq.w	9001a4d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
9001a60c:	43e4      	mvns	r4, r4
9001a60e:	1b75      	subs	r5, r6, r5
9001a610:	6044      	str	r4, [r0, #4]
9001a612:	e75e      	b.n	9001a4d2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
9001a614:	3d800000 	.word	0x3d800000

9001a618 <_ZN8touchgfx7Unicode6strlenEPKt>:
9001a618:	4602      	mov	r2, r0
9001a61a:	b148      	cbz	r0, 9001a630 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
9001a61c:	2300      	movs	r3, #0
9001a61e:	b298      	uxth	r0, r3
9001a620:	3301      	adds	r3, #1
9001a622:	eb02 0143 	add.w	r1, r2, r3, lsl #1
9001a626:	f831 1c02 	ldrh.w	r1, [r1, #-2]
9001a62a:	2900      	cmp	r1, #0
9001a62c:	d1f7      	bne.n	9001a61e <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
9001a62e:	4770      	bx	lr
9001a630:	4770      	bx	lr

9001a632 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
9001a632:	b530      	push	{r4, r5, lr}
9001a634:	4604      	mov	r4, r0
9001a636:	b159      	cbz	r1, 9001a650 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
9001a638:	b148      	cbz	r0, 9001a64e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
9001a63a:	2300      	movs	r3, #0
9001a63c:	b298      	uxth	r0, r3
9001a63e:	4282      	cmp	r2, r0
9001a640:	d905      	bls.n	9001a64e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
9001a642:	5ccd      	ldrb	r5, [r1, r3]
9001a644:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
9001a648:	3301      	adds	r3, #1
9001a64a:	2d00      	cmp	r5, #0
9001a64c:	d1f6      	bne.n	9001a63c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
9001a64e:	bd30      	pop	{r4, r5, pc}
9001a650:	4608      	mov	r0, r1
9001a652:	e7fc      	b.n	9001a64e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

9001a654 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
9001a654:	b5f0      	push	{r4, r5, r6, r7, lr}
9001a656:	468c      	mov	ip, r1
9001a658:	b08b      	sub	sp, #44	; 0x2c
9001a65a:	2100      	movs	r1, #0
9001a65c:	ae01      	add	r6, sp, #4
9001a65e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
9001a662:	211f      	movs	r1, #31
9001a664:	fbb0 f7f3 	udiv	r7, r0, r3
9001a668:	fb03 0517 	mls	r5, r3, r7, r0
9001a66c:	4638      	mov	r0, r7
9001a66e:	b2ec      	uxtb	r4, r5
9001a670:	2d09      	cmp	r5, #9
9001a672:	bfd4      	ite	le
9001a674:	3430      	addle	r4, #48	; 0x30
9001a676:	3457      	addgt	r4, #87	; 0x57
9001a678:	b2e4      	uxtb	r4, r4
9001a67a:	558c      	strb	r4, [r1, r6]
9001a67c:	1e4c      	subs	r4, r1, #1
9001a67e:	b92f      	cbnz	r7, 9001a68c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
9001a680:	4431      	add	r1, r6
9001a682:	4660      	mov	r0, ip
9001a684:	f7ff ffd5 	bl	9001a632 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
9001a688:	b00b      	add	sp, #44	; 0x2c
9001a68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001a68c:	4621      	mov	r1, r4
9001a68e:	e7e9      	b.n	9001a664 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

9001a690 <_ZN8touchgfx7Unicode4itoaElPtti>:
9001a690:	b5f0      	push	{r4, r5, r6, r7, lr}
9001a692:	4607      	mov	r7, r0
9001a694:	b08b      	sub	sp, #44	; 0x2c
9001a696:	4608      	mov	r0, r1
9001a698:	b341      	cbz	r1, 9001a6ec <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
9001a69a:	1e99      	subs	r1, r3, #2
9001a69c:	2922      	cmp	r1, #34	; 0x22
9001a69e:	d825      	bhi.n	9001a6ec <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
9001a6a0:	2100      	movs	r1, #0
9001a6a2:	463c      	mov	r4, r7
9001a6a4:	261f      	movs	r6, #31
9001a6a6:	f10d 0c04 	add.w	ip, sp, #4
9001a6aa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
9001a6ae:	1e71      	subs	r1, r6, #1
9001a6b0:	fb94 fef3 	sdiv	lr, r4, r3
9001a6b4:	fb03 441e 	mls	r4, r3, lr, r4
9001a6b8:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
9001a6bc:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
9001a6c0:	b2ec      	uxtb	r4, r5
9001a6c2:	2d09      	cmp	r5, #9
9001a6c4:	bfd4      	ite	le
9001a6c6:	3430      	addle	r4, #48	; 0x30
9001a6c8:	3457      	addgt	r4, #87	; 0x57
9001a6ca:	b2e4      	uxtb	r4, r4
9001a6cc:	f80c 4006 	strb.w	r4, [ip, r6]
9001a6d0:	4674      	mov	r4, lr
9001a6d2:	b96c      	cbnz	r4, 9001a6f0 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
9001a6d4:	2f00      	cmp	r7, #0
9001a6d6:	da05      	bge.n	9001a6e4 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
9001a6d8:	ab0a      	add	r3, sp, #40	; 0x28
9001a6da:	4419      	add	r1, r3
9001a6dc:	232d      	movs	r3, #45	; 0x2d
9001a6de:	f801 3c24 	strb.w	r3, [r1, #-36]
9001a6e2:	1eb1      	subs	r1, r6, #2
9001a6e4:	3101      	adds	r1, #1
9001a6e6:	4461      	add	r1, ip
9001a6e8:	f7ff ffa3 	bl	9001a632 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
9001a6ec:	b00b      	add	sp, #44	; 0x2c
9001a6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001a6f0:	460e      	mov	r6, r1
9001a6f2:	e7dc      	b.n	9001a6ae <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

9001a6f4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
9001a6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001a6f8:	b085      	sub	sp, #20
9001a6fa:	4691      	mov	r9, r2
9001a6fc:	6802      	ldr	r2, [r0, #0]
9001a6fe:	4688      	mov	r8, r1
9001a700:	461c      	mov	r4, r3
9001a702:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
9001a706:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
9001a70a:	4683      	mov	fp, r0
9001a70c:	4610      	mov	r0, r2
9001a70e:	9103      	str	r1, [sp, #12]
9001a710:	9302      	str	r3, [sp, #8]
9001a712:	9201      	str	r2, [sp, #4]
9001a714:	f7ff ff80 	bl	9001a618 <_ZN8touchgfx7Unicode6strlenEPKt>
9001a718:	f1b8 0f00 	cmp.w	r8, #0
9001a71c:	bf0c      	ite	eq
9001a71e:	4684      	moveq	ip, r0
9001a720:	f100 0c01 	addne.w	ip, r0, #1
9001a724:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
9001a728:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
9001a72c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
9001a72e:	fa1f fc8c 	uxth.w	ip, ip
9001a732:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001a734:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
9001a738:	9903      	ldr	r1, [sp, #12]
9001a73a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
9001a73e:	d041      	beq.n	9001a7c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
9001a740:	d834      	bhi.n	9001a7ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
9001a742:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
9001a746:	d059      	beq.n	9001a7fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
9001a748:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
9001a74c:	d03a      	beq.n	9001a7c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
9001a74e:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
9001a752:	d034      	beq.n	9001a7be <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
9001a754:	2400      	movs	r4, #0
9001a756:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
9001a75a:	3a01      	subs	r2, #1
9001a75c:	b169      	cbz	r1, 9001a77a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
9001a75e:	9911      	ldr	r1, [sp, #68]	; 0x44
9001a760:	458c      	cmp	ip, r1
9001a762:	da09      	bge.n	9001a778 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
9001a764:	eba1 010c 	sub.w	r1, r1, ip
9001a768:	b289      	uxth	r1, r1
9001a76a:	b933      	cbnz	r3, 9001a77a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
9001a76c:	2e00      	cmp	r6, #0
9001a76e:	d051      	beq.n	9001a814 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
9001a770:	2800      	cmp	r0, #0
9001a772:	d04f      	beq.n	9001a814 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
9001a774:	440c      	add	r4, r1
9001a776:	b2a4      	uxth	r4, r4
9001a778:	2100      	movs	r1, #0
9001a77a:	682b      	ldr	r3, [r5, #0]
9001a77c:	4293      	cmp	r3, r2
9001a77e:	da07      	bge.n	9001a790 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
9001a780:	f1b8 0f00 	cmp.w	r8, #0
9001a784:	d004      	beq.n	9001a790 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
9001a786:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
9001a78a:	682b      	ldr	r3, [r5, #0]
9001a78c:	3301      	adds	r3, #1
9001a78e:	602b      	str	r3, [r5, #0]
9001a790:	2730      	movs	r7, #48	; 0x30
9001a792:	2c00      	cmp	r4, #0
9001a794:	d04e      	beq.n	9001a834 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
9001a796:	682e      	ldr	r6, [r5, #0]
9001a798:	3c01      	subs	r4, #1
9001a79a:	42b2      	cmp	r2, r6
9001a79c:	b2a4      	uxth	r4, r4
9001a79e:	dd49      	ble.n	9001a834 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
9001a7a0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
9001a7a4:	682b      	ldr	r3, [r5, #0]
9001a7a6:	3301      	adds	r3, #1
9001a7a8:	602b      	str	r3, [r5, #0]
9001a7aa:	e7f2      	b.n	9001a792 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
9001a7ac:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
9001a7b0:	d01d      	beq.n	9001a7ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
9001a7b2:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
9001a7b6:	d002      	beq.n	9001a7be <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
9001a7b8:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
9001a7bc:	e7c9      	b.n	9001a752 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
9001a7be:	4684      	mov	ip, r0
9001a7c0:	f04f 0800 	mov.w	r8, #0
9001a7c4:	2c00      	cmp	r4, #0
9001a7c6:	d0c6      	beq.n	9001a756 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
9001a7c8:	b947      	cbnz	r7, 9001a7dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
9001a7ca:	2801      	cmp	r0, #1
9001a7cc:	d106      	bne.n	9001a7dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
9001a7ce:	8814      	ldrh	r4, [r2, #0]
9001a7d0:	2c30      	cmp	r4, #48	; 0x30
9001a7d2:	bf02      	ittt	eq
9001a7d4:	3202      	addeq	r2, #2
9001a7d6:	4638      	moveq	r0, r7
9001a7d8:	f8cb 2000 	streq.w	r2, [fp]
9001a7dc:	45bc      	cmp	ip, r7
9001a7de:	da14      	bge.n	9001a80a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
9001a7e0:	b2bf      	uxth	r7, r7
9001a7e2:	eba7 040c 	sub.w	r4, r7, ip
9001a7e6:	46bc      	mov	ip, r7
9001a7e8:	b2a4      	uxth	r4, r4
9001a7ea:	2600      	movs	r6, #0
9001a7ec:	e7b3      	b.n	9001a756 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
9001a7ee:	4684      	mov	ip, r0
9001a7f0:	b16c      	cbz	r4, 9001a80e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
9001a7f2:	42b8      	cmp	r0, r7
9001a7f4:	dd00      	ble.n	9001a7f8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
9001a7f6:	b2b8      	uxth	r0, r7
9001a7f8:	2400      	movs	r4, #0
9001a7fa:	e003      	b.n	9001a804 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
9001a7fc:	f04f 0c01 	mov.w	ip, #1
9001a800:	2400      	movs	r4, #0
9001a802:	4660      	mov	r0, ip
9001a804:	4626      	mov	r6, r4
9001a806:	46a0      	mov	r8, r4
9001a808:	e7a5      	b.n	9001a756 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
9001a80a:	2400      	movs	r4, #0
9001a80c:	e7ed      	b.n	9001a7ea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
9001a80e:	4626      	mov	r6, r4
9001a810:	46a0      	mov	r8, r4
9001a812:	e7a0      	b.n	9001a756 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
9001a814:	2900      	cmp	r1, #0
9001a816:	d0b0      	beq.n	9001a77a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
9001a818:	2720      	movs	r7, #32
9001a81a:	682e      	ldr	r6, [r5, #0]
9001a81c:	2900      	cmp	r1, #0
9001a81e:	d0ac      	beq.n	9001a77a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
9001a820:	3901      	subs	r1, #1
9001a822:	4296      	cmp	r6, r2
9001a824:	b289      	uxth	r1, r1
9001a826:	daa7      	bge.n	9001a778 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
9001a828:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
9001a82c:	682b      	ldr	r3, [r5, #0]
9001a82e:	3301      	adds	r3, #1
9001a830:	602b      	str	r3, [r5, #0]
9001a832:	e7f2      	b.n	9001a81a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
9001a834:	b188      	cbz	r0, 9001a85a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
9001a836:	682b      	ldr	r3, [r5, #0]
9001a838:	3801      	subs	r0, #1
9001a83a:	429a      	cmp	r2, r3
9001a83c:	b280      	uxth	r0, r0
9001a83e:	dd0c      	ble.n	9001a85a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
9001a840:	f8db 3000 	ldr.w	r3, [fp]
9001a844:	1c9c      	adds	r4, r3, #2
9001a846:	f8cb 4000 	str.w	r4, [fp]
9001a84a:	881c      	ldrh	r4, [r3, #0]
9001a84c:	682b      	ldr	r3, [r5, #0]
9001a84e:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
9001a852:	682b      	ldr	r3, [r5, #0]
9001a854:	3301      	adds	r3, #1
9001a856:	602b      	str	r3, [r5, #0]
9001a858:	e7ec      	b.n	9001a834 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
9001a85a:	2620      	movs	r6, #32
9001a85c:	b151      	cbz	r1, 9001a874 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
9001a85e:	6828      	ldr	r0, [r5, #0]
9001a860:	3901      	subs	r1, #1
9001a862:	4282      	cmp	r2, r0
9001a864:	b289      	uxth	r1, r1
9001a866:	dd05      	ble.n	9001a874 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
9001a868:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
9001a86c:	682b      	ldr	r3, [r5, #0]
9001a86e:	3301      	adds	r3, #1
9001a870:	602b      	str	r3, [r5, #0]
9001a872:	e7f3      	b.n	9001a85c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
9001a874:	b005      	add	sp, #20
9001a876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001a87a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
9001a87a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001a87e:	2400      	movs	r4, #0
9001a880:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
9001a884:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
9001a888:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
9001a88c:	8014      	strh	r4, [r2, #0]
9001a88e:	701c      	strb	r4, [r3, #0]
9001a890:	f888 4000 	strb.w	r4, [r8]
9001a894:	f88c 4000 	strb.w	r4, [ip]
9001a898:	f88e 4000 	strb.w	r4, [lr]
9001a89c:	703c      	strb	r4, [r7, #0]
9001a89e:	6804      	ldr	r4, [r0, #0]
9001a8a0:	b1a4      	cbz	r4, 9001a8cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
9001a8a2:	8824      	ldrh	r4, [r4, #0]
9001a8a4:	f04f 0901 	mov.w	r9, #1
9001a8a8:	b314      	cbz	r4, 9001a8f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
9001a8aa:	2c2b      	cmp	r4, #43	; 0x2b
9001a8ac:	d001      	beq.n	9001a8b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
9001a8ae:	2c20      	cmp	r4, #32
9001a8b0:	d110      	bne.n	9001a8d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
9001a8b2:	8014      	strh	r4, [r2, #0]
9001a8b4:	6804      	ldr	r4, [r0, #0]
9001a8b6:	b10c      	cbz	r4, 9001a8bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
9001a8b8:	3402      	adds	r4, #2
9001a8ba:	6004      	str	r4, [r0, #0]
9001a8bc:	680c      	ldr	r4, [r1, #0]
9001a8be:	b10c      	cbz	r4, 9001a8c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
9001a8c0:	3401      	adds	r4, #1
9001a8c2:	600c      	str	r4, [r1, #0]
9001a8c4:	6804      	ldr	r4, [r0, #0]
9001a8c6:	b17c      	cbz	r4, 9001a8e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
9001a8c8:	8824      	ldrh	r4, [r4, #0]
9001a8ca:	e7ed      	b.n	9001a8a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
9001a8cc:	680c      	ldr	r4, [r1, #0]
9001a8ce:	b17c      	cbz	r4, 9001a8f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
9001a8d0:	7824      	ldrb	r4, [r4, #0]
9001a8d2:	e7e7      	b.n	9001a8a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
9001a8d4:	2c2d      	cmp	r4, #45	; 0x2d
9001a8d6:	d102      	bne.n	9001a8de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
9001a8d8:	f883 9000 	strb.w	r9, [r3]
9001a8dc:	e7ea      	b.n	9001a8b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
9001a8de:	2c23      	cmp	r4, #35	; 0x23
9001a8e0:	d107      	bne.n	9001a8f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
9001a8e2:	f888 9000 	strb.w	r9, [r8]
9001a8e6:	e7e5      	b.n	9001a8b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
9001a8e8:	680c      	ldr	r4, [r1, #0]
9001a8ea:	b10c      	cbz	r4, 9001a8f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
9001a8ec:	7824      	ldrb	r4, [r4, #0]
9001a8ee:	e7db      	b.n	9001a8a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
9001a8f0:	2400      	movs	r4, #0
9001a8f2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
9001a8f6:	2b09      	cmp	r3, #9
9001a8f8:	d901      	bls.n	9001a8fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
9001a8fa:	2c2a      	cmp	r4, #42	; 0x2a
9001a8fc:	d122      	bne.n	9001a944 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
9001a8fe:	2301      	movs	r3, #1
9001a900:	2c30      	cmp	r4, #48	; 0x30
9001a902:	f88e 3000 	strb.w	r3, [lr]
9001a906:	d10d      	bne.n	9001a924 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
9001a908:	f88c 3000 	strb.w	r3, [ip]
9001a90c:	6803      	ldr	r3, [r0, #0]
9001a90e:	b10b      	cbz	r3, 9001a914 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
9001a910:	3302      	adds	r3, #2
9001a912:	6003      	str	r3, [r0, #0]
9001a914:	680b      	ldr	r3, [r1, #0]
9001a916:	b10b      	cbz	r3, 9001a91c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
9001a918:	3301      	adds	r3, #1
9001a91a:	600b      	str	r3, [r1, #0]
9001a91c:	6803      	ldr	r3, [r0, #0]
9001a91e:	2b00      	cmp	r3, #0
9001a920:	d02f      	beq.n	9001a982 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
9001a922:	881c      	ldrh	r4, [r3, #0]
9001a924:	2c2a      	cmp	r4, #42	; 0x2a
9001a926:	d135      	bne.n	9001a994 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
9001a928:	f04f 33ff 	mov.w	r3, #4294967295
9001a92c:	6033      	str	r3, [r6, #0]
9001a92e:	6803      	ldr	r3, [r0, #0]
9001a930:	b10b      	cbz	r3, 9001a936 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
9001a932:	3302      	adds	r3, #2
9001a934:	6003      	str	r3, [r0, #0]
9001a936:	680b      	ldr	r3, [r1, #0]
9001a938:	b10b      	cbz	r3, 9001a93e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
9001a93a:	3301      	adds	r3, #1
9001a93c:	600b      	str	r3, [r1, #0]
9001a93e:	6803      	ldr	r3, [r0, #0]
9001a940:	b31b      	cbz	r3, 9001a98a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
9001a942:	881c      	ldrh	r4, [r3, #0]
9001a944:	2c2e      	cmp	r4, #46	; 0x2e
9001a946:	d11a      	bne.n	9001a97e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
9001a948:	2301      	movs	r3, #1
9001a94a:	703b      	strb	r3, [r7, #0]
9001a94c:	6803      	ldr	r3, [r0, #0]
9001a94e:	b10b      	cbz	r3, 9001a954 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
9001a950:	3302      	adds	r3, #2
9001a952:	6003      	str	r3, [r0, #0]
9001a954:	680b      	ldr	r3, [r1, #0]
9001a956:	b10b      	cbz	r3, 9001a95c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
9001a958:	3301      	adds	r3, #1
9001a95a:	600b      	str	r3, [r1, #0]
9001a95c:	6803      	ldr	r3, [r0, #0]
9001a95e:	2b00      	cmp	r3, #0
9001a960:	d036      	beq.n	9001a9d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
9001a962:	881b      	ldrh	r3, [r3, #0]
9001a964:	2b2a      	cmp	r3, #42	; 0x2a
9001a966:	d137      	bne.n	9001a9d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
9001a968:	f04f 33ff 	mov.w	r3, #4294967295
9001a96c:	602b      	str	r3, [r5, #0]
9001a96e:	6803      	ldr	r3, [r0, #0]
9001a970:	b10b      	cbz	r3, 9001a976 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
9001a972:	3302      	adds	r3, #2
9001a974:	6003      	str	r3, [r0, #0]
9001a976:	680b      	ldr	r3, [r1, #0]
9001a978:	b10b      	cbz	r3, 9001a97e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
9001a97a:	3301      	adds	r3, #1
9001a97c:	600b      	str	r3, [r1, #0]
9001a97e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001a982:	680c      	ldr	r4, [r1, #0]
9001a984:	b134      	cbz	r4, 9001a994 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
9001a986:	7824      	ldrb	r4, [r4, #0]
9001a988:	e7cc      	b.n	9001a924 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
9001a98a:	680b      	ldr	r3, [r1, #0]
9001a98c:	2b00      	cmp	r3, #0
9001a98e:	d0f6      	beq.n	9001a97e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
9001a990:	781c      	ldrb	r4, [r3, #0]
9001a992:	e7d7      	b.n	9001a944 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
9001a994:	2300      	movs	r3, #0
9001a996:	220a      	movs	r2, #10
9001a998:	6033      	str	r3, [r6, #0]
9001a99a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
9001a99e:	fa1f f38c 	uxth.w	r3, ip
9001a9a2:	2b09      	cmp	r3, #9
9001a9a4:	d8ce      	bhi.n	9001a944 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
9001a9a6:	6833      	ldr	r3, [r6, #0]
9001a9a8:	fb02 c303 	mla	r3, r2, r3, ip
9001a9ac:	6033      	str	r3, [r6, #0]
9001a9ae:	6803      	ldr	r3, [r0, #0]
9001a9b0:	b10b      	cbz	r3, 9001a9b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
9001a9b2:	3302      	adds	r3, #2
9001a9b4:	6003      	str	r3, [r0, #0]
9001a9b6:	680b      	ldr	r3, [r1, #0]
9001a9b8:	b10b      	cbz	r3, 9001a9be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
9001a9ba:	3301      	adds	r3, #1
9001a9bc:	600b      	str	r3, [r1, #0]
9001a9be:	6803      	ldr	r3, [r0, #0]
9001a9c0:	b10b      	cbz	r3, 9001a9c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
9001a9c2:	881c      	ldrh	r4, [r3, #0]
9001a9c4:	e7e9      	b.n	9001a99a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
9001a9c6:	680c      	ldr	r4, [r1, #0]
9001a9c8:	2c00      	cmp	r4, #0
9001a9ca:	d0e6      	beq.n	9001a99a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
9001a9cc:	7824      	ldrb	r4, [r4, #0]
9001a9ce:	e7e4      	b.n	9001a99a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
9001a9d0:	680b      	ldr	r3, [r1, #0]
9001a9d2:	b10b      	cbz	r3, 9001a9d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
9001a9d4:	781b      	ldrb	r3, [r3, #0]
9001a9d6:	e7c5      	b.n	9001a964 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
9001a9d8:	2200      	movs	r2, #0
9001a9da:	240a      	movs	r4, #10
9001a9dc:	602a      	str	r2, [r5, #0]
9001a9de:	3b30      	subs	r3, #48	; 0x30
9001a9e0:	682a      	ldr	r2, [r5, #0]
9001a9e2:	b29e      	uxth	r6, r3
9001a9e4:	2e09      	cmp	r6, #9
9001a9e6:	d813      	bhi.n	9001aa10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
9001a9e8:	fb04 3302 	mla	r3, r4, r2, r3
9001a9ec:	602b      	str	r3, [r5, #0]
9001a9ee:	6803      	ldr	r3, [r0, #0]
9001a9f0:	b10b      	cbz	r3, 9001a9f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
9001a9f2:	3302      	adds	r3, #2
9001a9f4:	6003      	str	r3, [r0, #0]
9001a9f6:	680b      	ldr	r3, [r1, #0]
9001a9f8:	b10b      	cbz	r3, 9001a9fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
9001a9fa:	3301      	adds	r3, #1
9001a9fc:	600b      	str	r3, [r1, #0]
9001a9fe:	6803      	ldr	r3, [r0, #0]
9001aa00:	b10b      	cbz	r3, 9001aa06 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
9001aa02:	881b      	ldrh	r3, [r3, #0]
9001aa04:	e7eb      	b.n	9001a9de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
9001aa06:	680b      	ldr	r3, [r1, #0]
9001aa08:	2b00      	cmp	r3, #0
9001aa0a:	d0e8      	beq.n	9001a9de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
9001aa0c:	781b      	ldrb	r3, [r3, #0]
9001aa0e:	e7e6      	b.n	9001a9de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
9001aa10:	2a06      	cmp	r2, #6
9001aa12:	bfa8      	it	ge
9001aa14:	2206      	movge	r2, #6
9001aa16:	602a      	str	r2, [r5, #0]
9001aa18:	e7b1      	b.n	9001a97e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

9001aa1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
9001aa1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001aa1e:	b0a3      	sub	sp, #140	; 0x8c
9001aa20:	2600      	movs	r6, #0
9001aa22:	4607      	mov	r7, r0
9001aa24:	4688      	mov	r8, r1
9001aa26:	f10d 0944 	add.w	r9, sp, #68	; 0x44
9001aa2a:	4631      	mov	r1, r6
9001aa2c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
9001aa2e:	4648      	mov	r0, r9
9001aa30:	960d      	str	r6, [sp, #52]	; 0x34
9001aa32:	e9cd 3208 	strd	r3, r2, [sp, #32]
9001aa36:	2242      	movs	r2, #66	; 0x42
9001aa38:	f00c fe00 	bl	9002763c <memset>
9001aa3c:	b15f      	cbz	r7, 9001aa56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
9001aa3e:	f108 3aff 	add.w	sl, r8, #4294967295
9001aa42:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001aa44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001aa46:	b152      	cbz	r2, 9001aa5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
9001aa48:	8812      	ldrh	r2, [r2, #0]
9001aa4a:	b10a      	cbz	r2, 9001aa50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
9001aa4c:	459a      	cmp	sl, r3
9001aa4e:	dc2e      	bgt.n	9001aaae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
9001aa50:	2200      	movs	r2, #0
9001aa52:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
9001aa56:	4638      	mov	r0, r7
9001aa58:	b023      	add	sp, #140	; 0x8c
9001aa5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001aa5e:	9a08      	ldr	r2, [sp, #32]
9001aa60:	2a00      	cmp	r2, #0
9001aa62:	d0f5      	beq.n	9001aa50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
9001aa64:	7812      	ldrb	r2, [r2, #0]
9001aa66:	e7f0      	b.n	9001aa4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
9001aa68:	2d00      	cmp	r5, #0
9001aa6a:	d0ea      	beq.n	9001aa42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001aa6c:	782a      	ldrb	r2, [r5, #0]
9001aa6e:	b142      	cbz	r2, 9001aa82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
9001aa70:	2a25      	cmp	r2, #37	; 0x25
9001aa72:	d001      	beq.n	9001aa78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
9001aa74:	459a      	cmp	sl, r3
9001aa76:	dc08      	bgt.n	9001aa8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
9001aa78:	f1bb 0f00 	cmp.w	fp, #0
9001aa7c:	d121      	bne.n	9001aac2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
9001aa7e:	2d00      	cmp	r5, #0
9001aa80:	d0df      	beq.n	9001aa42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001aa82:	782a      	ldrb	r2, [r5, #0]
9001aa84:	f04f 0b00 	mov.w	fp, #0
9001aa88:	e01d      	b.n	9001aac6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
9001aa8a:	f1bb 0f00 	cmp.w	fp, #0
9001aa8e:	d077      	beq.n	9001ab80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
9001aa90:	f8bb 2000 	ldrh.w	r2, [fp]
9001aa94:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
9001aa98:	f1bb 0f00 	cmp.w	fp, #0
9001aa9c:	d002      	beq.n	9001aaa4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
9001aa9e:	f10b 0202 	add.w	r2, fp, #2
9001aaa2:	9209      	str	r2, [sp, #36]	; 0x24
9001aaa4:	b10d      	cbz	r5, 9001aaaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
9001aaa6:	3501      	adds	r5, #1
9001aaa8:	9508      	str	r5, [sp, #32]
9001aaaa:	3301      	adds	r3, #1
9001aaac:	930d      	str	r3, [sp, #52]	; 0x34
9001aaae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001aab0:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
9001aab4:	f1bb 0f00 	cmp.w	fp, #0
9001aab8:	d0d6      	beq.n	9001aa68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
9001aaba:	f8bb 2000 	ldrh.w	r2, [fp]
9001aabe:	2a00      	cmp	r2, #0
9001aac0:	d1d6      	bne.n	9001aa70 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
9001aac2:	f8bb 2000 	ldrh.w	r2, [fp]
9001aac6:	2a00      	cmp	r2, #0
9001aac8:	d0bb      	beq.n	9001aa42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001aaca:	459a      	cmp	sl, r3
9001aacc:	ddb9      	ble.n	9001aa42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001aace:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
9001aad2:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
9001aad6:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
9001aada:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
9001aade:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
9001aae2:	960e      	str	r6, [sp, #56]	; 0x38
9001aae4:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
9001aae8:	960f      	str	r6, [sp, #60]	; 0x3c
9001aaea:	f1bb 0f00 	cmp.w	fp, #0
9001aaee:	d002      	beq.n	9001aaf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
9001aaf0:	f10b 0302 	add.w	r3, fp, #2
9001aaf4:	9309      	str	r3, [sp, #36]	; 0x24
9001aaf6:	b10d      	cbz	r5, 9001aafc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
9001aaf8:	1c6b      	adds	r3, r5, #1
9001aafa:	9308      	str	r3, [sp, #32]
9001aafc:	ab0f      	add	r3, sp, #60	; 0x3c
9001aafe:	f10d 0232 	add.w	r2, sp, #50	; 0x32
9001ab02:	a908      	add	r1, sp, #32
9001ab04:	a809      	add	r0, sp, #36	; 0x24
9001ab06:	9305      	str	r3, [sp, #20]
9001ab08:	f10d 0331 	add.w	r3, sp, #49	; 0x31
9001ab0c:	9304      	str	r3, [sp, #16]
9001ab0e:	ab0e      	add	r3, sp, #56	; 0x38
9001ab10:	9303      	str	r3, [sp, #12]
9001ab12:	ab0c      	add	r3, sp, #48	; 0x30
9001ab14:	9302      	str	r3, [sp, #8]
9001ab16:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
9001ab1a:	9301      	str	r3, [sp, #4]
9001ab1c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
9001ab20:	9300      	str	r3, [sp, #0]
9001ab22:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
9001ab26:	f7ff fea8 	bl	9001a87a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
9001ab2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001ab2c:	2b00      	cmp	r3, #0
9001ab2e:	bfbf      	itttt	lt
9001ab30:	6823      	ldrlt	r3, [r4, #0]
9001ab32:	3404      	addlt	r4, #4
9001ab34:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
9001ab38:	930e      	strlt	r3, [sp, #56]	; 0x38
9001ab3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001ab3c:	2b00      	cmp	r3, #0
9001ab3e:	bfbe      	ittt	lt
9001ab40:	6823      	ldrlt	r3, [r4, #0]
9001ab42:	3404      	addlt	r4, #4
9001ab44:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
9001ab48:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9001ab4c:	bfb8      	it	lt
9001ab4e:	930f      	strlt	r3, [sp, #60]	; 0x3c
9001ab50:	b1d9      	cbz	r1, 9001ab8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
9001ab52:	880b      	ldrh	r3, [r1, #0]
9001ab54:	2b69      	cmp	r3, #105	; 0x69
9001ab56:	d01f      	beq.n	9001ab98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001ab58:	d82f      	bhi.n	9001abba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
9001ab5a:	2b58      	cmp	r3, #88	; 0x58
9001ab5c:	d01c      	beq.n	9001ab98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001ab5e:	d818      	bhi.n	9001ab92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
9001ab60:	2b25      	cmp	r3, #37	; 0x25
9001ab62:	d034      	beq.n	9001abce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
9001ab64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001ab66:	e9cd 5b08 	strd	r5, fp, [sp, #32]
9001ab6a:	f1bb 0f00 	cmp.w	fp, #0
9001ab6e:	f000 80b7 	beq.w	9001ace0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
9001ab72:	f8bb 5000 	ldrh.w	r5, [fp]
9001ab76:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
9001ab7a:	3301      	adds	r3, #1
9001ab7c:	930d      	str	r3, [sp, #52]	; 0x34
9001ab7e:	e029      	b.n	9001abd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
9001ab80:	b10d      	cbz	r5, 9001ab86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
9001ab82:	782a      	ldrb	r2, [r5, #0]
9001ab84:	e786      	b.n	9001aa94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
9001ab86:	462a      	mov	r2, r5
9001ab88:	e784      	b.n	9001aa94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
9001ab8a:	2a00      	cmp	r2, #0
9001ab8c:	d0ea      	beq.n	9001ab64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
9001ab8e:	7813      	ldrb	r3, [r2, #0]
9001ab90:	e7e0      	b.n	9001ab54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
9001ab92:	3b63      	subs	r3, #99	; 0x63
9001ab94:	2b01      	cmp	r3, #1
9001ab96:	d8e5      	bhi.n	9001ab64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
9001ab98:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
9001ab9c:	b329      	cbz	r1, 9001abea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
9001ab9e:	880b      	ldrh	r3, [r1, #0]
9001aba0:	2b69      	cmp	r3, #105	; 0x69
9001aba2:	d063      	beq.n	9001ac6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
9001aba4:	d825      	bhi.n	9001abf2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
9001aba6:	2b63      	cmp	r3, #99	; 0x63
9001aba8:	d038      	beq.n	9001ac1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
9001abaa:	2b64      	cmp	r3, #100	; 0x64
9001abac:	d05e      	beq.n	9001ac6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
9001abae:	2b58      	cmp	r3, #88	; 0x58
9001abb0:	d07a      	beq.n	9001aca8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
9001abb2:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
9001abb6:	4625      	mov	r5, r4
9001abb8:	e036      	b.n	9001ac28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001abba:	2b73      	cmp	r3, #115	; 0x73
9001abbc:	d0ec      	beq.n	9001ab98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001abbe:	d802      	bhi.n	9001abc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
9001abc0:	2b6f      	cmp	r3, #111	; 0x6f
9001abc2:	d1cf      	bne.n	9001ab64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
9001abc4:	e7e8      	b.n	9001ab98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001abc6:	2b75      	cmp	r3, #117	; 0x75
9001abc8:	d0e6      	beq.n	9001ab98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001abca:	2b78      	cmp	r3, #120	; 0x78
9001abcc:	e7f9      	b.n	9001abc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
9001abce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001abd0:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
9001abd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001abd6:	b10b      	cbz	r3, 9001abdc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
9001abd8:	3302      	adds	r3, #2
9001abda:	9309      	str	r3, [sp, #36]	; 0x24
9001abdc:	9b08      	ldr	r3, [sp, #32]
9001abde:	2b00      	cmp	r3, #0
9001abe0:	f43f af2f 	beq.w	9001aa42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001abe4:	3301      	adds	r3, #1
9001abe6:	9308      	str	r3, [sp, #32]
9001abe8:	e72b      	b.n	9001aa42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001abea:	2a00      	cmp	r2, #0
9001abec:	d0e1      	beq.n	9001abb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
9001abee:	7813      	ldrb	r3, [r2, #0]
9001abf0:	e7d6      	b.n	9001aba0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
9001abf2:	2b73      	cmp	r3, #115	; 0x73
9001abf4:	d036      	beq.n	9001ac64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
9001abf6:	d807      	bhi.n	9001ac08 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
9001abf8:	2b6f      	cmp	r3, #111	; 0x6f
9001abfa:	d1da      	bne.n	9001abb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
9001abfc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001abfe:	1d25      	adds	r5, r4, #4
9001ac00:	2308      	movs	r3, #8
9001ac02:	eba8 0202 	sub.w	r2, r8, r2
9001ac06:	e049      	b.n	9001ac9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
9001ac08:	2b75      	cmp	r3, #117	; 0x75
9001ac0a:	d042      	beq.n	9001ac92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
9001ac0c:	2b78      	cmp	r3, #120	; 0x78
9001ac0e:	d1d0      	bne.n	9001abb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
9001ac10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001ac12:	1d25      	adds	r5, r4, #4
9001ac14:	2310      	movs	r3, #16
9001ac16:	eba8 0202 	sub.w	r2, r8, r2
9001ac1a:	e03f      	b.n	9001ac9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
9001ac1c:	6823      	ldr	r3, [r4, #0]
9001ac1e:	1d25      	adds	r5, r4, #4
9001ac20:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
9001ac24:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
9001ac28:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001ac2a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
9001ac2e:	2b00      	cmp	r3, #0
9001ac30:	d051      	beq.n	9001acd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
9001ac32:	881a      	ldrh	r2, [r3, #0]
9001ac34:	a80d      	add	r0, sp, #52	; 0x34
9001ac36:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
9001ac3a:	462c      	mov	r4, r5
9001ac3c:	9005      	str	r0, [sp, #20]
9001ac3e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
9001ac42:	9004      	str	r0, [sp, #16]
9001ac44:	980e      	ldr	r0, [sp, #56]	; 0x38
9001ac46:	9003      	str	r0, [sp, #12]
9001ac48:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
9001ac4c:	9002      	str	r0, [sp, #8]
9001ac4e:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001ac50:	9001      	str	r0, [sp, #4]
9001ac52:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
9001ac56:	e9cd 8706 	strd	r8, r7, [sp, #24]
9001ac5a:	9000      	str	r0, [sp, #0]
9001ac5c:	a810      	add	r0, sp, #64	; 0x40
9001ac5e:	f7ff fd49 	bl	9001a6f4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
9001ac62:	e7b7      	b.n	9001abd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
9001ac64:	1d25      	adds	r5, r4, #4
9001ac66:	6823      	ldr	r3, [r4, #0]
9001ac68:	9310      	str	r3, [sp, #64]	; 0x40
9001ac6a:	e7dd      	b.n	9001ac28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001ac6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001ac6e:	230a      	movs	r3, #10
9001ac70:	4649      	mov	r1, r9
9001ac72:	6820      	ldr	r0, [r4, #0]
9001ac74:	eba8 0202 	sub.w	r2, r8, r2
9001ac78:	1d25      	adds	r5, r4, #4
9001ac7a:	b292      	uxth	r2, r2
9001ac7c:	f7ff fd08 	bl	9001a690 <_ZN8touchgfx7Unicode4itoaElPtti>
9001ac80:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
9001ac84:	2b2d      	cmp	r3, #45	; 0x2d
9001ac86:	d1cf      	bne.n	9001ac28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001ac88:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001ac8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001ac8e:	3302      	adds	r3, #2
9001ac90:	e7ea      	b.n	9001ac68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
9001ac92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001ac94:	1d25      	adds	r5, r4, #4
9001ac96:	230a      	movs	r3, #10
9001ac98:	eba8 0202 	sub.w	r2, r8, r2
9001ac9c:	b292      	uxth	r2, r2
9001ac9e:	4649      	mov	r1, r9
9001aca0:	6820      	ldr	r0, [r4, #0]
9001aca2:	f7ff fcd7 	bl	9001a654 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
9001aca6:	e7bf      	b.n	9001ac28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001aca8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001acaa:	2310      	movs	r3, #16
9001acac:	4649      	mov	r1, r9
9001acae:	6820      	ldr	r0, [r4, #0]
9001acb0:	eba8 0202 	sub.w	r2, r8, r2
9001acb4:	1d25      	adds	r5, r4, #4
9001acb6:	b292      	uxth	r2, r2
9001acb8:	f7ff fccc 	bl	9001a654 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
9001acbc:	f10d 0242 	add.w	r2, sp, #66	; 0x42
9001acc0:	f832 3f02 	ldrh.w	r3, [r2, #2]!
9001acc4:	2b00      	cmp	r3, #0
9001acc6:	d0af      	beq.n	9001ac28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001acc8:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
9001accc:	2919      	cmp	r1, #25
9001acce:	d8f7      	bhi.n	9001acc0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
9001acd0:	3b20      	subs	r3, #32
9001acd2:	8013      	strh	r3, [r2, #0]
9001acd4:	e7f4      	b.n	9001acc0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
9001acd6:	9a08      	ldr	r2, [sp, #32]
9001acd8:	2a00      	cmp	r2, #0
9001acda:	d0ab      	beq.n	9001ac34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
9001acdc:	7812      	ldrb	r2, [r2, #0]
9001acde:	e7a9      	b.n	9001ac34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
9001ace0:	2d00      	cmp	r5, #0
9001ace2:	f43f af48 	beq.w	9001ab76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
9001ace6:	782d      	ldrb	r5, [r5, #0]
9001ace8:	e745      	b.n	9001ab76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

9001acea <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
9001acea:	b507      	push	{r0, r1, r2, lr}
9001acec:	9300      	str	r3, [sp, #0]
9001acee:	4613      	mov	r3, r2
9001acf0:	2200      	movs	r2, #0
9001acf2:	f7ff fe92 	bl	9001aa1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
9001acf6:	b003      	add	sp, #12
9001acf8:	f85d fb04 	ldr.w	pc, [sp], #4

9001acfc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
9001acfc:	b40c      	push	{r2, r3}
9001acfe:	b507      	push	{r0, r1, r2, lr}
9001ad00:	ab04      	add	r3, sp, #16
9001ad02:	f853 2b04 	ldr.w	r2, [r3], #4
9001ad06:	9301      	str	r3, [sp, #4]
9001ad08:	f7ff ffef 	bl	9001acea <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
9001ad0c:	b003      	add	sp, #12
9001ad0e:	f85d eb04 	ldr.w	lr, [sp], #4
9001ad12:	b002      	add	sp, #8
9001ad14:	4770      	bx	lr
	...

9001ad18 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
9001ad18:	4b01      	ldr	r3, [pc, #4]	; (9001ad20 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
9001ad1a:	6018      	str	r0, [r3, #0]
9001ad1c:	4770      	bx	lr
9001ad1e:	bf00      	nop
9001ad20:	240281fc 	.word	0x240281fc

9001ad24 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
9001ad24:	4b06      	ldr	r3, [pc, #24]	; (9001ad40 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
9001ad26:	881a      	ldrh	r2, [r3, #0]
9001ad28:	4282      	cmp	r2, r0
9001ad2a:	d807      	bhi.n	9001ad3c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
9001ad2c:	4b05      	ldr	r3, [pc, #20]	; (9001ad44 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
9001ad2e:	881b      	ldrh	r3, [r3, #0]
9001ad30:	4413      	add	r3, r2
9001ad32:	4298      	cmp	r0, r3
9001ad34:	bfac      	ite	ge
9001ad36:	2000      	movge	r0, #0
9001ad38:	2001      	movlt	r0, #1
9001ad3a:	4770      	bx	lr
9001ad3c:	2000      	movs	r0, #0
9001ad3e:	4770      	bx	lr
9001ad40:	2402821c 	.word	0x2402821c
9001ad44:	24028220 	.word	0x24028220

9001ad48 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
9001ad48:	b508      	push	{r3, lr}
9001ad4a:	4601      	mov	r1, r0
9001ad4c:	f7ff ffea 	bl	9001ad24 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
9001ad50:	b118      	cbz	r0, 9001ad5a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
9001ad52:	4b02      	ldr	r3, [pc, #8]	; (9001ad5c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
9001ad54:	681b      	ldr	r3, [r3, #0]
9001ad56:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
9001ad5a:	bd08      	pop	{r3, pc}
9001ad5c:	24028200 	.word	0x24028200

9001ad60 <_ZN8touchgfx6Bitmap10clearCacheEv>:
9001ad60:	b5f0      	push	{r4, r5, r6, r7, lr}
9001ad62:	4c24      	ldr	r4, [pc, #144]	; (9001adf4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
9001ad64:	6823      	ldr	r3, [r4, #0]
9001ad66:	2b00      	cmp	r3, #0
9001ad68:	d042      	beq.n	9001adf0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
9001ad6a:	4a23      	ldr	r2, [pc, #140]	; (9001adf8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
9001ad6c:	4d23      	ldr	r5, [pc, #140]	; (9001adfc <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
9001ad6e:	8811      	ldrh	r1, [r2, #0]
9001ad70:	f8b5 c000 	ldrh.w	ip, [r5]
9001ad74:	4822      	ldr	r0, [pc, #136]	; (9001ae00 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
9001ad76:	4461      	add	r1, ip
9001ad78:	1c4a      	adds	r2, r1, #1
9001ad7a:	008f      	lsls	r7, r1, #2
9001ad7c:	f022 0201 	bic.w	r2, r2, #1
9001ad80:	19de      	adds	r6, r3, r7
9001ad82:	0412      	lsls	r2, r2, #16
9001ad84:	6006      	str	r6, [r0, #0]
9001ad86:	4e1f      	ldr	r6, [pc, #124]	; (9001ae04 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
9001ad88:	0c12      	lsrs	r2, r2, #16
9001ad8a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
9001ad8e:	19da      	adds	r2, r3, r7
9001ad90:	6032      	str	r2, [r6, #0]
9001ad92:	220e      	movs	r2, #14
9001ad94:	fb02 f20c 	mul.w	r2, r2, ip
9001ad98:	3203      	adds	r2, #3
9001ad9a:	f022 0203 	bic.w	r2, r2, #3
9001ad9e:	443a      	add	r2, r7
9001ada0:	4f19      	ldr	r7, [pc, #100]	; (9001ae08 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
9001ada2:	4413      	add	r3, r2
9001ada4:	603b      	str	r3, [r7, #0]
9001ada6:	2300      	movs	r3, #0
9001ada8:	4f18      	ldr	r7, [pc, #96]	; (9001ae0c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
9001adaa:	469c      	mov	ip, r3
9001adac:	803b      	strh	r3, [r7, #0]
9001adae:	4f18      	ldr	r7, [pc, #96]	; (9001ae10 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
9001adb0:	683f      	ldr	r7, [r7, #0]
9001adb2:	1aba      	subs	r2, r7, r2
9001adb4:	4f17      	ldr	r7, [pc, #92]	; (9001ae14 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
9001adb6:	603a      	str	r2, [r7, #0]
9001adb8:	f64f 77ff 	movw	r7, #65535	; 0xffff
9001adbc:	4a16      	ldr	r2, [pc, #88]	; (9001ae18 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
9001adbe:	8013      	strh	r3, [r2, #0]
9001adc0:	428b      	cmp	r3, r1
9001adc2:	d10d      	bne.n	9001ade0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
9001adc4:	882d      	ldrh	r5, [r5, #0]
9001adc6:	2300      	movs	r3, #0
9001adc8:	6830      	ldr	r0, [r6, #0]
9001adca:	240e      	movs	r4, #14
9001adcc:	429d      	cmp	r5, r3
9001adce:	d90f      	bls.n	9001adf0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
9001add0:	fb04 0203 	mla	r2, r4, r3, r0
9001add4:	3301      	adds	r3, #1
9001add6:	7b11      	ldrb	r1, [r2, #12]
9001add8:	f36f 1145 	bfc	r1, #5, #1
9001addc:	7311      	strb	r1, [r2, #12]
9001adde:	e7f5      	b.n	9001adcc <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
9001ade0:	6822      	ldr	r2, [r4, #0]
9001ade2:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
9001ade6:	6802      	ldr	r2, [r0, #0]
9001ade8:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
9001adec:	3301      	adds	r3, #1
9001adee:	e7e7      	b.n	9001adc0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
9001adf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001adf2:	bf00      	nop
9001adf4:	24028200 	.word	0x24028200
9001adf8:	2402821c 	.word	0x2402821c
9001adfc:	24028220 	.word	0x24028220
9001ae00:	24028214 	.word	0x24028214
9001ae04:	24028204 	.word	0x24028204
9001ae08:	2402820c 	.word	0x2402820c
9001ae0c:	2402821e 	.word	0x2402821e
9001ae10:	24028208 	.word	0x24028208
9001ae14:	24028218 	.word	0x24028218
9001ae18:	24028210 	.word	0x24028210

9001ae1c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
9001ae1c:	4b06      	ldr	r3, [pc, #24]	; (9001ae38 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
9001ae1e:	681b      	ldr	r3, [r3, #0]
9001ae20:	b943      	cbnz	r3, 9001ae34 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
9001ae22:	b139      	cbz	r1, 9001ae34 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
9001ae24:	4b05      	ldr	r3, [pc, #20]	; (9001ae3c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
9001ae26:	801a      	strh	r2, [r3, #0]
9001ae28:	4b05      	ldr	r3, [pc, #20]	; (9001ae40 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
9001ae2a:	6019      	str	r1, [r3, #0]
9001ae2c:	4b05      	ldr	r3, [pc, #20]	; (9001ae44 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
9001ae2e:	6018      	str	r0, [r3, #0]
9001ae30:	f7ff bf96 	b.w	9001ad60 <_ZN8touchgfx6Bitmap10clearCacheEv>
9001ae34:	4770      	bx	lr
9001ae36:	bf00      	nop
9001ae38:	2402820c 	.word	0x2402820c
9001ae3c:	24028220 	.word	0x24028220
9001ae40:	24028208 	.word	0x24028208
9001ae44:	24028200 	.word	0x24028200

9001ae48 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
9001ae48:	b470      	push	{r4, r5, r6}
9001ae4a:	4c07      	ldr	r4, [pc, #28]	; (9001ae68 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
9001ae4c:	4605      	mov	r5, r0
9001ae4e:	4610      	mov	r0, r2
9001ae50:	9a03      	ldr	r2, [sp, #12]
9001ae52:	6826      	ldr	r6, [r4, #0]
9001ae54:	b936      	cbnz	r6, 9001ae64 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
9001ae56:	6025      	str	r5, [r4, #0]
9001ae58:	4c04      	ldr	r4, [pc, #16]	; (9001ae6c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
9001ae5a:	8021      	strh	r1, [r4, #0]
9001ae5c:	4619      	mov	r1, r3
9001ae5e:	bc70      	pop	{r4, r5, r6}
9001ae60:	f7ff bfdc 	b.w	9001ae1c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
9001ae64:	bc70      	pop	{r4, r5, r6}
9001ae66:	4770      	bx	lr
9001ae68:	24028224 	.word	0x24028224
9001ae6c:	2402821c 	.word	0x2402821c

9001ae70 <_ZNK8touchgfx6Bitmap8getWidthEv>:
9001ae70:	4a12      	ldr	r2, [pc, #72]	; (9001aebc <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
9001ae72:	8803      	ldrh	r3, [r0, #0]
9001ae74:	8812      	ldrh	r2, [r2, #0]
9001ae76:	4293      	cmp	r3, r2
9001ae78:	d207      	bcs.n	9001ae8a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
9001ae7a:	4a11      	ldr	r2, [pc, #68]	; (9001aec0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
9001ae7c:	2114      	movs	r1, #20
9001ae7e:	6812      	ldr	r2, [r2, #0]
9001ae80:	fb01 2303 	mla	r3, r1, r3, r2
9001ae84:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
9001ae88:	4770      	bx	lr
9001ae8a:	490e      	ldr	r1, [pc, #56]	; (9001aec4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
9001ae8c:	8809      	ldrh	r1, [r1, #0]
9001ae8e:	4411      	add	r1, r2
9001ae90:	428b      	cmp	r3, r1
9001ae92:	da04      	bge.n	9001ae9e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
9001ae94:	1a9b      	subs	r3, r3, r2
9001ae96:	4a0c      	ldr	r2, [pc, #48]	; (9001aec8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
9001ae98:	210e      	movs	r1, #14
9001ae9a:	6812      	ldr	r2, [r2, #0]
9001ae9c:	e7f0      	b.n	9001ae80 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
9001ae9e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001aea2:	4293      	cmp	r3, r2
9001aea4:	d108      	bne.n	9001aeb8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
9001aea6:	4b09      	ldr	r3, [pc, #36]	; (9001aecc <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
9001aea8:	781b      	ldrb	r3, [r3, #0]
9001aeaa:	b91b      	cbnz	r3, 9001aeb4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
9001aeac:	4b08      	ldr	r3, [pc, #32]	; (9001aed0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
9001aeae:	f9b3 0000 	ldrsh.w	r0, [r3]
9001aeb2:	4770      	bx	lr
9001aeb4:	4b07      	ldr	r3, [pc, #28]	; (9001aed4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
9001aeb6:	e7fa      	b.n	9001aeae <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
9001aeb8:	2000      	movs	r0, #0
9001aeba:	4770      	bx	lr
9001aebc:	2402821c 	.word	0x2402821c
9001aec0:	24028224 	.word	0x24028224
9001aec4:	24028220 	.word	0x24028220
9001aec8:	24028204 	.word	0x24028204
9001aecc:	2402818c 	.word	0x2402818c
9001aed0:	2402818e 	.word	0x2402818e
9001aed4:	24028190 	.word	0x24028190

9001aed8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
9001aed8:	4a12      	ldr	r2, [pc, #72]	; (9001af24 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
9001aeda:	8803      	ldrh	r3, [r0, #0]
9001aedc:	8812      	ldrh	r2, [r2, #0]
9001aede:	4293      	cmp	r3, r2
9001aee0:	d207      	bcs.n	9001aef2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
9001aee2:	4a11      	ldr	r2, [pc, #68]	; (9001af28 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
9001aee4:	2114      	movs	r1, #20
9001aee6:	6812      	ldr	r2, [r2, #0]
9001aee8:	fb01 2303 	mla	r3, r1, r3, r2
9001aeec:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
9001aef0:	4770      	bx	lr
9001aef2:	490e      	ldr	r1, [pc, #56]	; (9001af2c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
9001aef4:	8809      	ldrh	r1, [r1, #0]
9001aef6:	4411      	add	r1, r2
9001aef8:	428b      	cmp	r3, r1
9001aefa:	da04      	bge.n	9001af06 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
9001aefc:	1a9b      	subs	r3, r3, r2
9001aefe:	4a0c      	ldr	r2, [pc, #48]	; (9001af30 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
9001af00:	210e      	movs	r1, #14
9001af02:	6812      	ldr	r2, [r2, #0]
9001af04:	e7f0      	b.n	9001aee8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
9001af06:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001af0a:	4293      	cmp	r3, r2
9001af0c:	d108      	bne.n	9001af20 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
9001af0e:	4b09      	ldr	r3, [pc, #36]	; (9001af34 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
9001af10:	781b      	ldrb	r3, [r3, #0]
9001af12:	b91b      	cbnz	r3, 9001af1c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
9001af14:	4b08      	ldr	r3, [pc, #32]	; (9001af38 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
9001af16:	f9b3 0000 	ldrsh.w	r0, [r3]
9001af1a:	4770      	bx	lr
9001af1c:	4b07      	ldr	r3, [pc, #28]	; (9001af3c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
9001af1e:	e7fa      	b.n	9001af16 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
9001af20:	2000      	movs	r0, #0
9001af22:	4770      	bx	lr
9001af24:	2402821c 	.word	0x2402821c
9001af28:	24028224 	.word	0x24028224
9001af2c:	24028220 	.word	0x24028220
9001af30:	24028204 	.word	0x24028204
9001af34:	2402818c 	.word	0x2402818c
9001af38:	24028190 	.word	0x24028190
9001af3c:	2402818e 	.word	0x2402818e

9001af40 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
9001af40:	4a1f      	ldr	r2, [pc, #124]	; (9001afc0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
9001af42:	b510      	push	{r4, lr}
9001af44:	880b      	ldrh	r3, [r1, #0]
9001af46:	8812      	ldrh	r2, [r2, #0]
9001af48:	4293      	cmp	r3, r2
9001af4a:	d213      	bcs.n	9001af74 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
9001af4c:	4a1d      	ldr	r2, [pc, #116]	; (9001afc4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
9001af4e:	2114      	movs	r1, #20
9001af50:	6812      	ldr	r2, [r2, #0]
9001af52:	fb01 2303 	mla	r3, r1, r3, r2
9001af56:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
9001af5a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
9001af5e:	8a1a      	ldrh	r2, [r3, #16]
9001af60:	8a5b      	ldrh	r3, [r3, #18]
9001af62:	f3c2 020c 	ubfx	r2, r2, #0, #13
9001af66:	8004      	strh	r4, [r0, #0]
9001af68:	f3c3 030c 	ubfx	r3, r3, #0, #13
9001af6c:	8041      	strh	r1, [r0, #2]
9001af6e:	8082      	strh	r2, [r0, #4]
9001af70:	80c3      	strh	r3, [r0, #6]
9001af72:	e00e      	b.n	9001af92 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
9001af74:	4914      	ldr	r1, [pc, #80]	; (9001afc8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
9001af76:	8809      	ldrh	r1, [r1, #0]
9001af78:	4411      	add	r1, r2
9001af7a:	428b      	cmp	r3, r1
9001af7c:	da0a      	bge.n	9001af94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
9001af7e:	1a9b      	subs	r3, r3, r2
9001af80:	4a12      	ldr	r2, [pc, #72]	; (9001afcc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
9001af82:	210e      	movs	r1, #14
9001af84:	6812      	ldr	r2, [r2, #0]
9001af86:	fb01 2303 	mla	r3, r1, r3, r2
9001af8a:	681a      	ldr	r2, [r3, #0]
9001af8c:	6002      	str	r2, [r0, #0]
9001af8e:	685a      	ldr	r2, [r3, #4]
9001af90:	6042      	str	r2, [r0, #4]
9001af92:	bd10      	pop	{r4, pc}
9001af94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001af98:	4293      	cmp	r3, r2
9001af9a:	d10b      	bne.n	9001afb4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
9001af9c:	4b0c      	ldr	r3, [pc, #48]	; (9001afd0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
9001af9e:	f9b3 1000 	ldrsh.w	r1, [r3]
9001afa2:	4b0c      	ldr	r3, [pc, #48]	; (9001afd4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
9001afa4:	8081      	strh	r1, [r0, #4]
9001afa6:	f9b3 2000 	ldrsh.w	r2, [r3]
9001afaa:	2300      	movs	r3, #0
9001afac:	80c2      	strh	r2, [r0, #6]
9001afae:	8003      	strh	r3, [r0, #0]
9001afb0:	8043      	strh	r3, [r0, #2]
9001afb2:	e7ee      	b.n	9001af92 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
9001afb4:	2300      	movs	r3, #0
9001afb6:	8003      	strh	r3, [r0, #0]
9001afb8:	8043      	strh	r3, [r0, #2]
9001afba:	8083      	strh	r3, [r0, #4]
9001afbc:	e7d8      	b.n	9001af70 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
9001afbe:	bf00      	nop
9001afc0:	2402821c 	.word	0x2402821c
9001afc4:	24028224 	.word	0x24028224
9001afc8:	24028220 	.word	0x24028220
9001afcc:	24028204 	.word	0x24028204
9001afd0:	24028188 	.word	0x24028188
9001afd4:	2402818a 	.word	0x2402818a

9001afd8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
9001afd8:	4a17      	ldr	r2, [pc, #92]	; (9001b038 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
9001afda:	8803      	ldrh	r3, [r0, #0]
9001afdc:	8812      	ldrh	r2, [r2, #0]
9001afde:	4293      	cmp	r3, r2
9001afe0:	d213      	bcs.n	9001b00a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
9001afe2:	4a16      	ldr	r2, [pc, #88]	; (9001b03c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
9001afe4:	2114      	movs	r1, #20
9001afe6:	6812      	ldr	r2, [r2, #0]
9001afe8:	fb01 2303 	mla	r3, r1, r3, r2
9001afec:	8a1a      	ldrh	r2, [r3, #16]
9001afee:	8919      	ldrh	r1, [r3, #8]
9001aff0:	f3c2 020c 	ubfx	r2, r2, #0, #13
9001aff4:	428a      	cmp	r2, r1
9001aff6:	db1d      	blt.n	9001b034 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
9001aff8:	8a58      	ldrh	r0, [r3, #18]
9001affa:	f3c0 000c 	ubfx	r0, r0, #0, #13
9001affe:	895b      	ldrh	r3, [r3, #10]
9001b000:	4298      	cmp	r0, r3
9001b002:	bfac      	ite	ge
9001b004:	2000      	movge	r0, #0
9001b006:	2001      	movlt	r0, #1
9001b008:	4770      	bx	lr
9001b00a:	490d      	ldr	r1, [pc, #52]	; (9001b040 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
9001b00c:	8809      	ldrh	r1, [r1, #0]
9001b00e:	4411      	add	r1, r2
9001b010:	428b      	cmp	r3, r1
9001b012:	da0d      	bge.n	9001b030 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
9001b014:	1a9b      	subs	r3, r3, r2
9001b016:	4a0b      	ldr	r2, [pc, #44]	; (9001b044 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
9001b018:	210e      	movs	r1, #14
9001b01a:	6812      	ldr	r2, [r2, #0]
9001b01c:	fb01 2303 	mla	r3, r1, r3, r2
9001b020:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
9001b024:	891a      	ldrh	r2, [r3, #8]
9001b026:	4291      	cmp	r1, r2
9001b028:	db04      	blt.n	9001b034 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
9001b02a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
9001b02e:	e7e6      	b.n	9001affe <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
9001b030:	2000      	movs	r0, #0
9001b032:	4770      	bx	lr
9001b034:	2001      	movs	r0, #1
9001b036:	4770      	bx	lr
9001b038:	2402821c 	.word	0x2402821c
9001b03c:	24028224 	.word	0x24028224
9001b040:	24028220 	.word	0x24028220
9001b044:	24028204 	.word	0x24028204

9001b048 <_ZNK8touchgfx6Bitmap7getDataEv>:
9001b048:	4a12      	ldr	r2, [pc, #72]	; (9001b094 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
9001b04a:	8803      	ldrh	r3, [r0, #0]
9001b04c:	8811      	ldrh	r1, [r2, #0]
9001b04e:	428b      	cmp	r3, r1
9001b050:	d20b      	bcs.n	9001b06a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
9001b052:	4a11      	ldr	r2, [pc, #68]	; (9001b098 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
9001b054:	6812      	ldr	r2, [r2, #0]
9001b056:	b112      	cbz	r2, 9001b05e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
9001b058:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
9001b05c:	b9c0      	cbnz	r0, 9001b090 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
9001b05e:	4a0f      	ldr	r2, [pc, #60]	; (9001b09c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
9001b060:	6811      	ldr	r1, [r2, #0]
9001b062:	2214      	movs	r2, #20
9001b064:	4353      	muls	r3, r2
9001b066:	58c8      	ldr	r0, [r1, r3]
9001b068:	4770      	bx	lr
9001b06a:	4a0d      	ldr	r2, [pc, #52]	; (9001b0a0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
9001b06c:	8812      	ldrh	r2, [r2, #0]
9001b06e:	440a      	add	r2, r1
9001b070:	4293      	cmp	r3, r2
9001b072:	da04      	bge.n	9001b07e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
9001b074:	4a08      	ldr	r2, [pc, #32]	; (9001b098 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
9001b076:	6812      	ldr	r2, [r2, #0]
9001b078:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
9001b07c:	4770      	bx	lr
9001b07e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001b082:	4293      	cmp	r3, r2
9001b084:	d103      	bne.n	9001b08e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
9001b086:	4b07      	ldr	r3, [pc, #28]	; (9001b0a4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
9001b088:	681b      	ldr	r3, [r3, #0]
9001b08a:	6c58      	ldr	r0, [r3, #68]	; 0x44
9001b08c:	4770      	bx	lr
9001b08e:	2000      	movs	r0, #0
9001b090:	4770      	bx	lr
9001b092:	bf00      	nop
9001b094:	2402821c 	.word	0x2402821c
9001b098:	24028200 	.word	0x24028200
9001b09c:	24028224 	.word	0x24028224
9001b0a0:	24028220 	.word	0x24028220
9001b0a4:	24028194 	.word	0x24028194

9001b0a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
9001b0a8:	4b24      	ldr	r3, [pc, #144]	; (9001b13c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
9001b0aa:	8802      	ldrh	r2, [r0, #0]
9001b0ac:	8818      	ldrh	r0, [r3, #0]
9001b0ae:	4282      	cmp	r2, r0
9001b0b0:	d221      	bcs.n	9001b0f6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
9001b0b2:	4b23      	ldr	r3, [pc, #140]	; (9001b140 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
9001b0b4:	6819      	ldr	r1, [r3, #0]
9001b0b6:	2314      	movs	r3, #20
9001b0b8:	fb03 1302 	mla	r3, r3, r2, r1
9001b0bc:	6858      	ldr	r0, [r3, #4]
9001b0be:	2800      	cmp	r0, #0
9001b0c0:	d03a      	beq.n	9001b138 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
9001b0c2:	4920      	ldr	r1, [pc, #128]	; (9001b144 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
9001b0c4:	6809      	ldr	r1, [r1, #0]
9001b0c6:	2900      	cmp	r1, #0
9001b0c8:	d036      	beq.n	9001b138 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
9001b0ca:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
9001b0ce:	2900      	cmp	r1, #0
9001b0d0:	d032      	beq.n	9001b138 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
9001b0d2:	891a      	ldrh	r2, [r3, #8]
9001b0d4:	8958      	ldrh	r0, [r3, #10]
9001b0d6:	4350      	muls	r0, r2
9001b0d8:	7c5a      	ldrb	r2, [r3, #17]
9001b0da:	7cdb      	ldrb	r3, [r3, #19]
9001b0dc:	0952      	lsrs	r2, r2, #5
9001b0de:	f3c3 1342 	ubfx	r3, r3, #5, #3
9001b0e2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9001b0e6:	2b0b      	cmp	r3, #11
9001b0e8:	bf18      	it	ne
9001b0ea:	0040      	lslne	r0, r0, #1
9001b0ec:	3003      	adds	r0, #3
9001b0ee:	f020 0003 	bic.w	r0, r0, #3
9001b0f2:	4408      	add	r0, r1
9001b0f4:	4770      	bx	lr
9001b0f6:	4b14      	ldr	r3, [pc, #80]	; (9001b148 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
9001b0f8:	881b      	ldrh	r3, [r3, #0]
9001b0fa:	4403      	add	r3, r0
9001b0fc:	429a      	cmp	r2, r3
9001b0fe:	da1a      	bge.n	9001b136 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
9001b100:	4b12      	ldr	r3, [pc, #72]	; (9001b14c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
9001b102:	1a10      	subs	r0, r2, r0
9001b104:	210e      	movs	r1, #14
9001b106:	681b      	ldr	r3, [r3, #0]
9001b108:	fb01 3000 	mla	r0, r1, r0, r3
9001b10c:	7b03      	ldrb	r3, [r0, #12]
9001b10e:	f003 031f 	and.w	r3, r3, #31
9001b112:	2b0b      	cmp	r3, #11
9001b114:	d10b      	bne.n	9001b12e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
9001b116:	8903      	ldrh	r3, [r0, #8]
9001b118:	8940      	ldrh	r0, [r0, #10]
9001b11a:	4358      	muls	r0, r3
9001b11c:	4b09      	ldr	r3, [pc, #36]	; (9001b144 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
9001b11e:	3003      	adds	r0, #3
9001b120:	6819      	ldr	r1, [r3, #0]
9001b122:	f020 0303 	bic.w	r3, r0, #3
9001b126:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
9001b12a:	4418      	add	r0, r3
9001b12c:	4770      	bx	lr
9001b12e:	2b0d      	cmp	r3, #13
9001b130:	d101      	bne.n	9001b136 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
9001b132:	300d      	adds	r0, #13
9001b134:	4770      	bx	lr
9001b136:	2000      	movs	r0, #0
9001b138:	4770      	bx	lr
9001b13a:	bf00      	nop
9001b13c:	2402821c 	.word	0x2402821c
9001b140:	24028224 	.word	0x24028224
9001b144:	24028200 	.word	0x24028200
9001b148:	24028220 	.word	0x24028220
9001b14c:	24028204 	.word	0x24028204

9001b150 <_ZNK8touchgfx6Bitmap9getFormatEv>:
9001b150:	4a17      	ldr	r2, [pc, #92]	; (9001b1b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
9001b152:	b510      	push	{r4, lr}
9001b154:	8803      	ldrh	r3, [r0, #0]
9001b156:	8812      	ldrh	r2, [r2, #0]
9001b158:	4293      	cmp	r3, r2
9001b15a:	d20c      	bcs.n	9001b176 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
9001b15c:	4a15      	ldr	r2, [pc, #84]	; (9001b1b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
9001b15e:	2114      	movs	r1, #20
9001b160:	6812      	ldr	r2, [r2, #0]
9001b162:	fb01 2303 	mla	r3, r1, r3, r2
9001b166:	7c58      	ldrb	r0, [r3, #17]
9001b168:	0942      	lsrs	r2, r0, #5
9001b16a:	7cd8      	ldrb	r0, [r3, #19]
9001b16c:	f3c0 1042 	ubfx	r0, r0, #5, #3
9001b170:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
9001b174:	bd10      	pop	{r4, pc}
9001b176:	4910      	ldr	r1, [pc, #64]	; (9001b1b8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
9001b178:	8809      	ldrh	r1, [r1, #0]
9001b17a:	4411      	add	r1, r2
9001b17c:	428b      	cmp	r3, r1
9001b17e:	da09      	bge.n	9001b194 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
9001b180:	1a9b      	subs	r3, r3, r2
9001b182:	4a0e      	ldr	r2, [pc, #56]	; (9001b1bc <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
9001b184:	210e      	movs	r1, #14
9001b186:	6812      	ldr	r2, [r2, #0]
9001b188:	fb01 2303 	mla	r3, r1, r3, r2
9001b18c:	7b18      	ldrb	r0, [r3, #12]
9001b18e:	f000 001f 	and.w	r0, r0, #31
9001b192:	e7ef      	b.n	9001b174 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
9001b194:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001b198:	4293      	cmp	r3, r2
9001b19a:	d106      	bne.n	9001b1aa <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
9001b19c:	f7f7 fe28 	bl	90012df0 <_ZN8touchgfx3HAL3lcdEv>
9001b1a0:	6803      	ldr	r3, [r0, #0]
9001b1a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001b1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001b1a8:	4718      	bx	r3
9001b1aa:	2000      	movs	r0, #0
9001b1ac:	e7e2      	b.n	9001b174 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
9001b1ae:	bf00      	nop
9001b1b0:	2402821c 	.word	0x2402821c
9001b1b4:	24028224 	.word	0x24028224
9001b1b8:	24028220 	.word	0x24028220
9001b1bc:	24028204 	.word	0x24028204

9001b1c0 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
9001b1c0:	2010      	movs	r0, #16
9001b1c2:	4770      	bx	lr

9001b1c4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
9001b1c4:	4b02      	ldr	r3, [pc, #8]	; (9001b1d0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
9001b1c6:	8818      	ldrh	r0, [r3, #0]
9001b1c8:	0040      	lsls	r0, r0, #1
9001b1ca:	b280      	uxth	r0, r0
9001b1cc:	4770      	bx	lr
9001b1ce:	bf00      	nop
9001b1d0:	2402818e 	.word	0x2402818e

9001b1d4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
9001b1d4:	2bff      	cmp	r3, #255	; 0xff
9001b1d6:	d050      	beq.n	9001b27a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
9001b1d8:	2a0b      	cmp	r2, #11
9001b1da:	d04a      	beq.n	9001b272 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
9001b1dc:	d80e      	bhi.n	9001b1fc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
9001b1de:	2a03      	cmp	r2, #3
9001b1e0:	d03f      	beq.n	9001b262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
9001b1e2:	d804      	bhi.n	9001b1ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
9001b1e4:	2a01      	cmp	r2, #1
9001b1e6:	d03e      	beq.n	9001b266 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
9001b1e8:	d93f      	bls.n	9001b26a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
9001b1ea:	6b80      	ldr	r0, [r0, #56]	; 0x38
9001b1ec:	4770      	bx	lr
9001b1ee:	2a09      	cmp	r2, #9
9001b1f0:	d03f      	beq.n	9001b272 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
9001b1f2:	d83c      	bhi.n	9001b26e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
9001b1f4:	2a08      	cmp	r2, #8
9001b1f6:	d03a      	beq.n	9001b26e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
9001b1f8:	2000      	movs	r0, #0
9001b1fa:	4770      	bx	lr
9001b1fc:	2a2f      	cmp	r2, #47	; 0x2f
9001b1fe:	d024      	beq.n	9001b24a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
9001b200:	d80d      	bhi.n	9001b21e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
9001b202:	2a2d      	cmp	r2, #45	; 0x2d
9001b204:	d014      	beq.n	9001b230 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
9001b206:	d826      	bhi.n	9001b256 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
9001b208:	2a2c      	cmp	r2, #44	; 0x2c
9001b20a:	d1f5      	bne.n	9001b1f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b20c:	684b      	ldr	r3, [r1, #4]
9001b20e:	781b      	ldrb	r3, [r3, #0]
9001b210:	2b01      	cmp	r3, #1
9001b212:	d018      	beq.n	9001b246 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
9001b214:	d323      	bcc.n	9001b25e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
9001b216:	2b02      	cmp	r3, #2
9001b218:	d1ee      	bne.n	9001b1f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b21a:	6880      	ldr	r0, [r0, #8]
9001b21c:	4770      	bx	lr
9001b21e:	2a31      	cmp	r2, #49	; 0x31
9001b220:	d004      	beq.n	9001b22c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
9001b222:	d328      	bcc.n	9001b276 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
9001b224:	2a32      	cmp	r2, #50	; 0x32
9001b226:	d026      	beq.n	9001b276 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
9001b228:	2a33      	cmp	r2, #51	; 0x33
9001b22a:	d1e5      	bne.n	9001b1f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b22c:	6f00      	ldr	r0, [r0, #112]	; 0x70
9001b22e:	4770      	bx	lr
9001b230:	684b      	ldr	r3, [r1, #4]
9001b232:	781b      	ldrb	r3, [r3, #0]
9001b234:	2b01      	cmp	r3, #1
9001b236:	d004      	beq.n	9001b242 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
9001b238:	d30b      	bcc.n	9001b252 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
9001b23a:	2b02      	cmp	r3, #2
9001b23c:	d1dc      	bne.n	9001b1f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b23e:	6900      	ldr	r0, [r0, #16]
9001b240:	4770      	bx	lr
9001b242:	6a00      	ldr	r0, [r0, #32]
9001b244:	4770      	bx	lr
9001b246:	6980      	ldr	r0, [r0, #24]
9001b248:	4770      	bx	lr
9001b24a:	684b      	ldr	r3, [r1, #4]
9001b24c:	781b      	ldrb	r3, [r3, #0]
9001b24e:	2b00      	cmp	r3, #0
9001b250:	d1d2      	bne.n	9001b1f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b252:	6b00      	ldr	r0, [r0, #48]	; 0x30
9001b254:	4770      	bx	lr
9001b256:	684b      	ldr	r3, [r1, #4]
9001b258:	781b      	ldrb	r3, [r3, #0]
9001b25a:	2b00      	cmp	r3, #0
9001b25c:	d1cc      	bne.n	9001b1f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b25e:	6a80      	ldr	r0, [r0, #40]	; 0x28
9001b260:	4770      	bx	lr
9001b262:	6c80      	ldr	r0, [r0, #72]	; 0x48
9001b264:	4770      	bx	lr
9001b266:	6d00      	ldr	r0, [r0, #80]	; 0x50
9001b268:	4770      	bx	lr
9001b26a:	6c00      	ldr	r0, [r0, #64]	; 0x40
9001b26c:	4770      	bx	lr
9001b26e:	6d80      	ldr	r0, [r0, #88]	; 0x58
9001b270:	4770      	bx	lr
9001b272:	6e00      	ldr	r0, [r0, #96]	; 0x60
9001b274:	4770      	bx	lr
9001b276:	6e80      	ldr	r0, [r0, #104]	; 0x68
9001b278:	4770      	bx	lr
9001b27a:	2a0b      	cmp	r2, #11
9001b27c:	d049      	beq.n	9001b312 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
9001b27e:	d80e      	bhi.n	9001b29e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
9001b280:	2a03      	cmp	r2, #3
9001b282:	d040      	beq.n	9001b306 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
9001b284:	d804      	bhi.n	9001b290 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
9001b286:	2a01      	cmp	r2, #1
9001b288:	d03f      	beq.n	9001b30a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
9001b28a:	d940      	bls.n	9001b30e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
9001b28c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
9001b28e:	4770      	bx	lr
9001b290:	2a09      	cmp	r2, #9
9001b292:	d03e      	beq.n	9001b312 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
9001b294:	d801      	bhi.n	9001b29a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
9001b296:	2a08      	cmp	r2, #8
9001b298:	d1ae      	bne.n	9001b1f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b29a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
9001b29c:	4770      	bx	lr
9001b29e:	2a2f      	cmp	r2, #47	; 0x2f
9001b2a0:	d024      	beq.n	9001b2ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
9001b2a2:	d80d      	bhi.n	9001b2c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
9001b2a4:	2a2d      	cmp	r2, #45	; 0x2d
9001b2a6:	d014      	beq.n	9001b2d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
9001b2a8:	d826      	bhi.n	9001b2f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
9001b2aa:	2a2c      	cmp	r2, #44	; 0x2c
9001b2ac:	d1a4      	bne.n	9001b1f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b2ae:	684b      	ldr	r3, [r1, #4]
9001b2b0:	781b      	ldrb	r3, [r3, #0]
9001b2b2:	2b01      	cmp	r3, #1
9001b2b4:	d018      	beq.n	9001b2e8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
9001b2b6:	d324      	bcc.n	9001b302 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
9001b2b8:	2b02      	cmp	r3, #2
9001b2ba:	d19d      	bne.n	9001b1f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b2bc:	68c0      	ldr	r0, [r0, #12]
9001b2be:	4770      	bx	lr
9001b2c0:	2a31      	cmp	r2, #49	; 0x31
9001b2c2:	d004      	beq.n	9001b2ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
9001b2c4:	d327      	bcc.n	9001b316 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
9001b2c6:	2a32      	cmp	r2, #50	; 0x32
9001b2c8:	d025      	beq.n	9001b316 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
9001b2ca:	2a33      	cmp	r2, #51	; 0x33
9001b2cc:	d194      	bne.n	9001b1f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b2ce:	6f40      	ldr	r0, [r0, #116]	; 0x74
9001b2d0:	4770      	bx	lr
9001b2d2:	684b      	ldr	r3, [r1, #4]
9001b2d4:	781b      	ldrb	r3, [r3, #0]
9001b2d6:	2b01      	cmp	r3, #1
9001b2d8:	d004      	beq.n	9001b2e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
9001b2da:	d30b      	bcc.n	9001b2f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
9001b2dc:	2b02      	cmp	r3, #2
9001b2de:	d18b      	bne.n	9001b1f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b2e0:	6940      	ldr	r0, [r0, #20]
9001b2e2:	4770      	bx	lr
9001b2e4:	6a40      	ldr	r0, [r0, #36]	; 0x24
9001b2e6:	4770      	bx	lr
9001b2e8:	69c0      	ldr	r0, [r0, #28]
9001b2ea:	4770      	bx	lr
9001b2ec:	684b      	ldr	r3, [r1, #4]
9001b2ee:	781b      	ldrb	r3, [r3, #0]
9001b2f0:	2b00      	cmp	r3, #0
9001b2f2:	d181      	bne.n	9001b1f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b2f4:	6b40      	ldr	r0, [r0, #52]	; 0x34
9001b2f6:	4770      	bx	lr
9001b2f8:	684b      	ldr	r3, [r1, #4]
9001b2fa:	781b      	ldrb	r3, [r3, #0]
9001b2fc:	2b00      	cmp	r3, #0
9001b2fe:	f47f af7b 	bne.w	9001b1f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b302:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
9001b304:	4770      	bx	lr
9001b306:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
9001b308:	4770      	bx	lr
9001b30a:	6d40      	ldr	r0, [r0, #84]	; 0x54
9001b30c:	4770      	bx	lr
9001b30e:	6c40      	ldr	r0, [r0, #68]	; 0x44
9001b310:	4770      	bx	lr
9001b312:	6e40      	ldr	r0, [r0, #100]	; 0x64
9001b314:	4770      	bx	lr
9001b316:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
9001b318:	4770      	bx	lr

9001b31a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001b31a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b31e:	b087      	sub	sp, #28
9001b320:	9815      	ldr	r0, [sp, #84]	; 0x54
9001b322:	9205      	str	r2, [sp, #20]
9001b324:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001b328:	9101      	str	r1, [sp, #4]
9001b32a:	9202      	str	r2, [sp, #8]
9001b32c:	6841      	ldr	r1, [r0, #4]
9001b32e:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
9001b332:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
9001b336:	fb01 2404 	mla	r4, r1, r4, r2
9001b33a:	6802      	ldr	r2, [r0, #0]
9001b33c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001b340:	f8de 2000 	ldr.w	r2, [lr]
9001b344:	9203      	str	r2, [sp, #12]
9001b346:	f8de 2004 	ldr.w	r2, [lr, #4]
9001b34a:	3204      	adds	r2, #4
9001b34c:	9204      	str	r2, [sp, #16]
9001b34e:	9a02      	ldr	r2, [sp, #8]
9001b350:	43d6      	mvns	r6, r2
9001b352:	b2f6      	uxtb	r6, r6
9001b354:	9a01      	ldr	r2, [sp, #4]
9001b356:	2a00      	cmp	r2, #0
9001b358:	dc03      	bgt.n	9001b362 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001b35a:	9a05      	ldr	r2, [sp, #20]
9001b35c:	2a00      	cmp	r2, #0
9001b35e:	f340 8129 	ble.w	9001b5b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
9001b362:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001b364:	f9be c008 	ldrsh.w	ip, [lr, #8]
9001b368:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001b36c:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001b36e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
9001b372:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001b376:	2b00      	cmp	r3, #0
9001b378:	dd0e      	ble.n	9001b398 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001b37a:	1408      	asrs	r0, r1, #16
9001b37c:	d405      	bmi.n	9001b38a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001b37e:	4560      	cmp	r0, ip
9001b380:	da03      	bge.n	9001b38a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001b382:	1410      	asrs	r0, r2, #16
9001b384:	d401      	bmi.n	9001b38a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001b386:	42b8      	cmp	r0, r7
9001b388:	db07      	blt.n	9001b39a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9001b38a:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001b38c:	3b01      	subs	r3, #1
9001b38e:	3402      	adds	r4, #2
9001b390:	4401      	add	r1, r0
9001b392:	9814      	ldr	r0, [sp, #80]	; 0x50
9001b394:	4402      	add	r2, r0
9001b396:	e7ee      	b.n	9001b376 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
9001b398:	d071      	beq.n	9001b47e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001b39a:	1e58      	subs	r0, r3, #1
9001b39c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001b39e:	fb05 1500 	mla	r5, r5, r0, r1
9001b3a2:	142d      	asrs	r5, r5, #16
9001b3a4:	d45f      	bmi.n	9001b466 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001b3a6:	4565      	cmp	r5, ip
9001b3a8:	da5d      	bge.n	9001b466 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001b3aa:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001b3ac:	fb05 2000 	mla	r0, r5, r0, r2
9001b3b0:	1400      	asrs	r0, r0, #16
9001b3b2:	d458      	bmi.n	9001b466 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001b3b4:	42b8      	cmp	r0, r7
9001b3b6:	da56      	bge.n	9001b466 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001b3b8:	4699      	mov	r9, r3
9001b3ba:	46a2      	mov	sl, r4
9001b3bc:	f8bd b008 	ldrh.w	fp, [sp, #8]
9001b3c0:	f1b9 0f00 	cmp.w	r9, #0
9001b3c4:	dd57      	ble.n	9001b476 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
9001b3c6:	ea4f 4c22 	mov.w	ip, r2, asr #16
9001b3ca:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001b3ce:	9803      	ldr	r0, [sp, #12]
9001b3d0:	140d      	asrs	r5, r1, #16
9001b3d2:	f109 39ff 	add.w	r9, r9, #4294967295
9001b3d6:	fb07 000c 	mla	r0, r7, ip, r0
9001b3da:	5d40      	ldrb	r0, [r0, r5]
9001b3dc:	9d04      	ldr	r5, [sp, #16]
9001b3de:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
9001b3e2:	f8ba 5000 	ldrh.w	r5, [sl]
9001b3e6:	ea4f 2c20 	mov.w	ip, r0, asr #8
9001b3ea:	122f      	asrs	r7, r5, #8
9001b3ec:	ea4f 08e5 	mov.w	r8, r5, asr #3
9001b3f0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001b3f4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001b3f8:	00ed      	lsls	r5, r5, #3
9001b3fa:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
9001b3fe:	fb17 f706 	smulbb	r7, r7, r6
9001b402:	b2ed      	uxtb	r5, r5
9001b404:	fb18 f806 	smulbb	r8, r8, r6
9001b408:	fb0c 7c0b 	mla	ip, ip, fp, r7
9001b40c:	10c7      	asrs	r7, r0, #3
9001b40e:	fb15 f506 	smulbb	r5, r5, r6
9001b412:	00c0      	lsls	r0, r0, #3
9001b414:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001b418:	fa1f fc8c 	uxth.w	ip, ip
9001b41c:	b2c0      	uxtb	r0, r0
9001b41e:	fb07 870b 	mla	r7, r7, fp, r8
9001b422:	fb00 500b 	mla	r0, r0, fp, r5
9001b426:	f10c 0501 	add.w	r5, ip, #1
9001b42a:	b2bf      	uxth	r7, r7
9001b42c:	b280      	uxth	r0, r0
9001b42e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001b432:	f107 0801 	add.w	r8, r7, #1
9001b436:	1c45      	adds	r5, r0, #1
9001b438:	eb08 2817 	add.w	r8, r8, r7, lsr #8
9001b43c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001b440:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001b444:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001b446:	ea4f 1858 	mov.w	r8, r8, lsr #5
9001b44a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001b44e:	4401      	add	r1, r0
9001b450:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001b454:	9814      	ldr	r0, [sp, #80]	; 0x50
9001b456:	ea45 0c0c 	orr.w	ip, r5, ip
9001b45a:	4402      	add	r2, r0
9001b45c:	ea4c 0c08 	orr.w	ip, ip, r8
9001b460:	f82a cb02 	strh.w	ip, [sl], #2
9001b464:	e7ac      	b.n	9001b3c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
9001b466:	f04f 0800 	mov.w	r8, #0
9001b46a:	f8bd a008 	ldrh.w	sl, [sp, #8]
9001b46e:	eb03 0008 	add.w	r0, r3, r8
9001b472:	2800      	cmp	r0, #0
9001b474:	dc41      	bgt.n	9001b4fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001b476:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001b47a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001b47e:	9b01      	ldr	r3, [sp, #4]
9001b480:	2b00      	cmp	r3, #0
9001b482:	f340 8097 	ble.w	9001b5b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
9001b486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001b48a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b48c:	ee30 0a04 	vadd.f32	s0, s0, s8
9001b490:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001b494:	eef0 6a62 	vmov.f32	s13, s5
9001b498:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001b49c:	ee31 1a05 	vadd.f32	s2, s2, s10
9001b4a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001b4a4:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
9001b4a8:	eef0 6a43 	vmov.f32	s13, s6
9001b4ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001b4b0:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
9001b4b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001b4b8:	ee61 7a27 	vmul.f32	s15, s2, s15
9001b4bc:	ee77 2a62 	vsub.f32	s5, s14, s5
9001b4c0:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001b4c4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001b4c8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001b4cc:	ee12 2a90 	vmov	r2, s5
9001b4d0:	eef0 2a47 	vmov.f32	s5, s14
9001b4d4:	fb92 f3f3 	sdiv	r3, r2, r3
9001b4d8:	ee13 2a10 	vmov	r2, s6
9001b4dc:	9313      	str	r3, [sp, #76]	; 0x4c
9001b4de:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b4e0:	eeb0 3a67 	vmov.f32	s6, s15
9001b4e4:	fb92 f3f3 	sdiv	r3, r2, r3
9001b4e8:	9314      	str	r3, [sp, #80]	; 0x50
9001b4ea:	9b01      	ldr	r3, [sp, #4]
9001b4ec:	9a05      	ldr	r2, [sp, #20]
9001b4ee:	3b01      	subs	r3, #1
9001b4f0:	9301      	str	r3, [sp, #4]
9001b4f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b4f4:	bf08      	it	eq
9001b4f6:	4613      	moveq	r3, r2
9001b4f8:	e72c      	b.n	9001b354 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9001b4fa:	140f      	asrs	r7, r1, #16
9001b4fc:	d453      	bmi.n	9001b5a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001b4fe:	f8de 5008 	ldr.w	r5, [lr, #8]
9001b502:	42bd      	cmp	r5, r7
9001b504:	dd4f      	ble.n	9001b5a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001b506:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001b50a:	d44c      	bmi.n	9001b5a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001b50c:	f8de 000c 	ldr.w	r0, [lr, #12]
9001b510:	4560      	cmp	r0, ip
9001b512:	dd48      	ble.n	9001b5a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001b514:	9803      	ldr	r0, [sp, #12]
9001b516:	b22d      	sxth	r5, r5
9001b518:	fb0c 0505 	mla	r5, ip, r5, r0
9001b51c:	5de8      	ldrb	r0, [r5, r7]
9001b51e:	9d04      	ldr	r5, [sp, #16]
9001b520:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
9001b524:	f06f 0501 	mvn.w	r5, #1
9001b528:	fb05 fb08 	mul.w	fp, r5, r8
9001b52c:	ea4f 2c20 	mov.w	ip, r0, asr #8
9001b530:	f834 500b 	ldrh.w	r5, [r4, fp]
9001b534:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001b538:	122f      	asrs	r7, r5, #8
9001b53a:	ea4f 09e5 	mov.w	r9, r5, asr #3
9001b53e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001b542:	00ed      	lsls	r5, r5, #3
9001b544:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
9001b548:	fb17 f706 	smulbb	r7, r7, r6
9001b54c:	b2ed      	uxtb	r5, r5
9001b54e:	fb19 f906 	smulbb	r9, r9, r6
9001b552:	fb0c 7c0a 	mla	ip, ip, sl, r7
9001b556:	10c7      	asrs	r7, r0, #3
9001b558:	fb15 f506 	smulbb	r5, r5, r6
9001b55c:	00c0      	lsls	r0, r0, #3
9001b55e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001b562:	fa1f fc8c 	uxth.w	ip, ip
9001b566:	b2c0      	uxtb	r0, r0
9001b568:	fb07 970a 	mla	r7, r7, sl, r9
9001b56c:	fb00 500a 	mla	r0, r0, sl, r5
9001b570:	f10c 0501 	add.w	r5, ip, #1
9001b574:	b2bf      	uxth	r7, r7
9001b576:	b280      	uxth	r0, r0
9001b578:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001b57c:	f107 0901 	add.w	r9, r7, #1
9001b580:	1c45      	adds	r5, r0, #1
9001b582:	eb09 2917 	add.w	r9, r9, r7, lsr #8
9001b586:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001b58a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001b58e:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001b592:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001b596:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001b59a:	ea45 0c0c 	orr.w	ip, r5, ip
9001b59e:	ea4c 0c09 	orr.w	ip, ip, r9
9001b5a2:	f824 c00b 	strh.w	ip, [r4, fp]
9001b5a6:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001b5a8:	f108 38ff 	add.w	r8, r8, #4294967295
9001b5ac:	4401      	add	r1, r0
9001b5ae:	9814      	ldr	r0, [sp, #80]	; 0x50
9001b5b0:	4402      	add	r2, r0
9001b5b2:	e75c      	b.n	9001b46e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
9001b5b4:	b007      	add	sp, #28
9001b5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001b5ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001b5ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b5be:	b085      	sub	sp, #20
9001b5c0:	4693      	mov	fp, r2
9001b5c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001b5c6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
9001b5c8:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001b5ca:	6870      	ldr	r0, [r6, #4]
9001b5cc:	9100      	str	r1, [sp, #0]
9001b5ce:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001b5d2:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
9001b5d6:	fb00 2404 	mla	r4, r0, r4, r2
9001b5da:	6832      	ldr	r2, [r6, #0]
9001b5dc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001b5e0:	682a      	ldr	r2, [r5, #0]
9001b5e2:	9201      	str	r2, [sp, #4]
9001b5e4:	686a      	ldr	r2, [r5, #4]
9001b5e6:	3204      	adds	r2, #4
9001b5e8:	9202      	str	r2, [sp, #8]
9001b5ea:	9a00      	ldr	r2, [sp, #0]
9001b5ec:	2a00      	cmp	r2, #0
9001b5ee:	dc03      	bgt.n	9001b5f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001b5f0:	f1bb 0f00 	cmp.w	fp, #0
9001b5f4:	f340 80a0 	ble.w	9001b738 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
9001b5f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001b5fa:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
9001b5fe:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001b602:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001b604:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
9001b608:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001b60c:	2b00      	cmp	r3, #0
9001b60e:	dd0c      	ble.n	9001b62a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001b610:	1406      	asrs	r6, r0, #16
9001b612:	d405      	bmi.n	9001b620 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001b614:	454e      	cmp	r6, r9
9001b616:	da03      	bge.n	9001b620 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001b618:	1416      	asrs	r6, r2, #16
9001b61a:	d401      	bmi.n	9001b620 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001b61c:	4546      	cmp	r6, r8
9001b61e:	db05      	blt.n	9001b62c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001b620:	4470      	add	r0, lr
9001b622:	4462      	add	r2, ip
9001b624:	3b01      	subs	r3, #1
9001b626:	3402      	adds	r4, #2
9001b628:	e7f0      	b.n	9001b60c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001b62a:	d00f      	beq.n	9001b64c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001b62c:	1e5e      	subs	r6, r3, #1
9001b62e:	fb0e 0706 	mla	r7, lr, r6, r0
9001b632:	143f      	asrs	r7, r7, #16
9001b634:	d541      	bpl.n	9001b6ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
9001b636:	eb04 0643 	add.w	r6, r4, r3, lsl #1
9001b63a:	4698      	mov	r8, r3
9001b63c:	9603      	str	r6, [sp, #12]
9001b63e:	f1b8 0f00 	cmp.w	r8, #0
9001b642:	dc59      	bgt.n	9001b6f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001b644:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001b648:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001b64c:	9b00      	ldr	r3, [sp, #0]
9001b64e:	2b00      	cmp	r3, #0
9001b650:	dd72      	ble.n	9001b738 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
9001b652:	ee30 0a04 	vadd.f32	s0, s0, s8
9001b656:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001b658:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001b65c:	eeb0 6a62 	vmov.f32	s12, s5
9001b660:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001b664:	ee31 1a05 	vadd.f32	s2, s2, s10
9001b668:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001b66c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001b670:	eeb0 6a43 	vmov.f32	s12, s6
9001b674:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001b678:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001b67c:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001b680:	ee61 7a27 	vmul.f32	s15, s2, s15
9001b684:	ee77 2a62 	vsub.f32	s5, s14, s5
9001b688:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001b68c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001b690:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001b694:	ee12 2a90 	vmov	r2, s5
9001b698:	eef0 2a47 	vmov.f32	s5, s14
9001b69c:	fb92 fef3 	sdiv	lr, r2, r3
9001b6a0:	ee13 2a10 	vmov	r2, s6
9001b6a4:	eeb0 3a67 	vmov.f32	s6, s15
9001b6a8:	fb92 fcf3 	sdiv	ip, r2, r3
9001b6ac:	9b00      	ldr	r3, [sp, #0]
9001b6ae:	3b01      	subs	r3, #1
9001b6b0:	9300      	str	r3, [sp, #0]
9001b6b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001b6b4:	bf08      	it	eq
9001b6b6:	465b      	moveq	r3, fp
9001b6b8:	e797      	b.n	9001b5ea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001b6ba:	454f      	cmp	r7, r9
9001b6bc:	dabb      	bge.n	9001b636 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001b6be:	fb0c 2606 	mla	r6, ip, r6, r2
9001b6c2:	1436      	asrs	r6, r6, #16
9001b6c4:	d4b7      	bmi.n	9001b636 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001b6c6:	4546      	cmp	r6, r8
9001b6c8:	dab5      	bge.n	9001b636 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001b6ca:	461e      	mov	r6, r3
9001b6cc:	46a0      	mov	r8, r4
9001b6ce:	2e00      	cmp	r6, #0
9001b6d0:	ddb8      	ble.n	9001b644 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
9001b6d2:	1417      	asrs	r7, r2, #16
9001b6d4:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
9001b6d8:	9901      	ldr	r1, [sp, #4]
9001b6da:	ea4f 4920 	mov.w	r9, r0, asr #16
9001b6de:	4462      	add	r2, ip
9001b6e0:	4470      	add	r0, lr
9001b6e2:	fb0a 1707 	mla	r7, sl, r7, r1
9001b6e6:	9902      	ldr	r1, [sp, #8]
9001b6e8:	3e01      	subs	r6, #1
9001b6ea:	f817 7009 	ldrb.w	r7, [r7, r9]
9001b6ee:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
9001b6f2:	f828 7b02 	strh.w	r7, [r8], #2
9001b6f6:	e7ea      	b.n	9001b6ce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
9001b6f8:	ea5f 4920 	movs.w	r9, r0, asr #16
9001b6fc:	d417      	bmi.n	9001b72e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
9001b6fe:	68ae      	ldr	r6, [r5, #8]
9001b700:	454e      	cmp	r6, r9
9001b702:	dd14      	ble.n	9001b72e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
9001b704:	ea5f 4a22 	movs.w	sl, r2, asr #16
9001b708:	d411      	bmi.n	9001b72e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
9001b70a:	68ef      	ldr	r7, [r5, #12]
9001b70c:	4557      	cmp	r7, sl
9001b70e:	dd0e      	ble.n	9001b72e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
9001b710:	9f01      	ldr	r7, [sp, #4]
9001b712:	b236      	sxth	r6, r6
9001b714:	f06f 0101 	mvn.w	r1, #1
9001b718:	fb0a 7606 	mla	r6, sl, r6, r7
9001b71c:	9f02      	ldr	r7, [sp, #8]
9001b71e:	f816 6009 	ldrb.w	r6, [r6, r9]
9001b722:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
9001b726:	fb01 f608 	mul.w	r6, r1, r8
9001b72a:	9903      	ldr	r1, [sp, #12]
9001b72c:	538f      	strh	r7, [r1, r6]
9001b72e:	4470      	add	r0, lr
9001b730:	4462      	add	r2, ip
9001b732:	f108 38ff 	add.w	r8, r8, #4294967295
9001b736:	e782      	b.n	9001b63e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001b738:	b005      	add	sp, #20
9001b73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001b73e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001b73e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b742:	b087      	sub	sp, #28
9001b744:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001b746:	9205      	str	r2, [sp, #20]
9001b748:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001b74c:	9102      	str	r1, [sp, #8]
9001b74e:	9203      	str	r2, [sp, #12]
9001b750:	6861      	ldr	r1, [r4, #4]
9001b752:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
9001b756:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
9001b75a:	fb01 2000 	mla	r0, r1, r0, r2
9001b75e:	6822      	ldr	r2, [r4, #0]
9001b760:	eb02 0240 	add.w	r2, r2, r0, lsl #1
9001b764:	9200      	str	r2, [sp, #0]
9001b766:	f8dc 2000 	ldr.w	r2, [ip]
9001b76a:	9204      	str	r2, [sp, #16]
9001b76c:	f8dc 2004 	ldr.w	r2, [ip, #4]
9001b770:	3204      	adds	r2, #4
9001b772:	9201      	str	r2, [sp, #4]
9001b774:	9a03      	ldr	r2, [sp, #12]
9001b776:	43d5      	mvns	r5, r2
9001b778:	b2ed      	uxtb	r5, r5
9001b77a:	9a02      	ldr	r2, [sp, #8]
9001b77c:	2a00      	cmp	r2, #0
9001b77e:	dc03      	bgt.n	9001b788 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001b780:	9a05      	ldr	r2, [sp, #20]
9001b782:	2a00      	cmp	r2, #0
9001b784:	f340 812c 	ble.w	9001b9e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
9001b788:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001b78a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
9001b78e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001b792:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001b794:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
9001b798:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001b79c:	2b00      	cmp	r3, #0
9001b79e:	dd10      	ble.n	9001b7c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001b7a0:	140c      	asrs	r4, r1, #16
9001b7a2:	d405      	bmi.n	9001b7b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001b7a4:	4574      	cmp	r4, lr
9001b7a6:	da03      	bge.n	9001b7b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001b7a8:	1414      	asrs	r4, r2, #16
9001b7aa:	d401      	bmi.n	9001b7b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001b7ac:	42bc      	cmp	r4, r7
9001b7ae:	db09      	blt.n	9001b7c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001b7b0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001b7b2:	3b01      	subs	r3, #1
9001b7b4:	9800      	ldr	r0, [sp, #0]
9001b7b6:	4421      	add	r1, r4
9001b7b8:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001b7ba:	3002      	adds	r0, #2
9001b7bc:	4422      	add	r2, r4
9001b7be:	9000      	str	r0, [sp, #0]
9001b7c0:	e7ec      	b.n	9001b79c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
9001b7c2:	d071      	beq.n	9001b8a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
9001b7c4:	1e5c      	subs	r4, r3, #1
9001b7c6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
9001b7c8:	fb06 1604 	mla	r6, r6, r4, r1
9001b7cc:	1436      	asrs	r6, r6, #16
9001b7ce:	d45d      	bmi.n	9001b88c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001b7d0:	4576      	cmp	r6, lr
9001b7d2:	da5b      	bge.n	9001b88c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001b7d4:	9e14      	ldr	r6, [sp, #80]	; 0x50
9001b7d6:	fb06 2404 	mla	r4, r6, r4, r2
9001b7da:	1424      	asrs	r4, r4, #16
9001b7dc:	d456      	bmi.n	9001b88c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001b7de:	42bc      	cmp	r4, r7
9001b7e0:	da54      	bge.n	9001b88c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001b7e2:	4698      	mov	r8, r3
9001b7e4:	f8dd 9000 	ldr.w	r9, [sp]
9001b7e8:	f8bd a00c 	ldrh.w	sl, [sp, #12]
9001b7ec:	f1b8 0f00 	cmp.w	r8, #0
9001b7f0:	dd54      	ble.n	9001b89c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
9001b7f2:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
9001b7f6:	1414      	asrs	r4, r2, #16
9001b7f8:	9804      	ldr	r0, [sp, #16]
9001b7fa:	140e      	asrs	r6, r1, #16
9001b7fc:	f108 38ff 	add.w	r8, r8, #4294967295
9001b800:	fb07 0404 	mla	r4, r7, r4, r0
9001b804:	9801      	ldr	r0, [sp, #4]
9001b806:	f814 e006 	ldrb.w	lr, [r4, r6]
9001b80a:	f8b9 4000 	ldrh.w	r4, [r9]
9001b80e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
9001b812:	1227      	asrs	r7, r4, #8
9001b814:	eb00 0b0e 	add.w	fp, r0, lr
9001b818:	f810 e00e 	ldrb.w	lr, [r0, lr]
9001b81c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001b820:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001b822:	f89b 6002 	ldrb.w	r6, [fp, #2]
9001b826:	f89b b001 	ldrb.w	fp, [fp, #1]
9001b82a:	4401      	add	r1, r0
9001b82c:	fb16 f60a 	smulbb	r6, r6, sl
9001b830:	9814      	ldr	r0, [sp, #80]	; 0x50
9001b832:	fb1b fb0a 	smulbb	fp, fp, sl
9001b836:	fb07 6705 	mla	r7, r7, r5, r6
9001b83a:	10e6      	asrs	r6, r4, #3
9001b83c:	00e4      	lsls	r4, r4, #3
9001b83e:	4402      	add	r2, r0
9001b840:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001b844:	b2bf      	uxth	r7, r7
9001b846:	b2e4      	uxtb	r4, r4
9001b848:	fb06 b605 	mla	r6, r6, r5, fp
9001b84c:	fb14 f405 	smulbb	r4, r4, r5
9001b850:	b2b6      	uxth	r6, r6
9001b852:	fb0e 4e0a 	mla	lr, lr, sl, r4
9001b856:	1c7c      	adds	r4, r7, #1
9001b858:	f106 0b01 	add.w	fp, r6, #1
9001b85c:	fa1f fe8e 	uxth.w	lr, lr
9001b860:	eb04 2717 	add.w	r7, r4, r7, lsr #8
9001b864:	f10e 0401 	add.w	r4, lr, #1
9001b868:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
9001b86c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001b870:	eb04 241e 	add.w	r4, r4, lr, lsr #8
9001b874:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
9001b878:	f3c4 24c4 	ubfx	r4, r4, #11, #5
9001b87c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9001b880:	4327      	orrs	r7, r4
9001b882:	ea47 070b 	orr.w	r7, r7, fp
9001b886:	f829 7b02 	strh.w	r7, [r9], #2
9001b88a:	e7af      	b.n	9001b7ec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
9001b88c:	f04f 0e00 	mov.w	lr, #0
9001b890:	f8bd 900c 	ldrh.w	r9, [sp, #12]
9001b894:	eb03 040e 	add.w	r4, r3, lr
9001b898:	2c00      	cmp	r4, #0
9001b89a:	dc43      	bgt.n	9001b924 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
9001b89c:	9a00      	ldr	r2, [sp, #0]
9001b89e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001b8a2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001b8a6:	9300      	str	r3, [sp, #0]
9001b8a8:	9b02      	ldr	r3, [sp, #8]
9001b8aa:	2b00      	cmp	r3, #0
9001b8ac:	f340 8098 	ble.w	9001b9e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
9001b8b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001b8b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b8b6:	ee30 0a04 	vadd.f32	s0, s0, s8
9001b8ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001b8be:	eef0 6a62 	vmov.f32	s13, s5
9001b8c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001b8c6:	ee31 1a05 	vadd.f32	s2, s2, s10
9001b8ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001b8ce:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
9001b8d2:	eef0 6a43 	vmov.f32	s13, s6
9001b8d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001b8da:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
9001b8de:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001b8e2:	ee61 7a27 	vmul.f32	s15, s2, s15
9001b8e6:	ee77 2a62 	vsub.f32	s5, s14, s5
9001b8ea:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001b8ee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001b8f2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001b8f6:	ee12 2a90 	vmov	r2, s5
9001b8fa:	eef0 2a47 	vmov.f32	s5, s14
9001b8fe:	fb92 f3f3 	sdiv	r3, r2, r3
9001b902:	ee13 2a10 	vmov	r2, s6
9001b906:	9313      	str	r3, [sp, #76]	; 0x4c
9001b908:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b90a:	eeb0 3a67 	vmov.f32	s6, s15
9001b90e:	fb92 f3f3 	sdiv	r3, r2, r3
9001b912:	9314      	str	r3, [sp, #80]	; 0x50
9001b914:	9b02      	ldr	r3, [sp, #8]
9001b916:	9a05      	ldr	r2, [sp, #20]
9001b918:	3b01      	subs	r3, #1
9001b91a:	9302      	str	r3, [sp, #8]
9001b91c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b91e:	bf08      	it	eq
9001b920:	4613      	moveq	r3, r2
9001b922:	e72a      	b.n	9001b77a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001b924:	140f      	asrs	r7, r1, #16
9001b926:	d454      	bmi.n	9001b9d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001b928:	f8dc 6008 	ldr.w	r6, [ip, #8]
9001b92c:	42be      	cmp	r6, r7
9001b92e:	dd50      	ble.n	9001b9d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001b930:	ea5f 4822 	movs.w	r8, r2, asr #16
9001b934:	d44d      	bmi.n	9001b9d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001b936:	f8dc 400c 	ldr.w	r4, [ip, #12]
9001b93a:	4544      	cmp	r4, r8
9001b93c:	dd49      	ble.n	9001b9d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001b93e:	9c04      	ldr	r4, [sp, #16]
9001b940:	b236      	sxth	r6, r6
9001b942:	f06f 0001 	mvn.w	r0, #1
9001b946:	fb08 4606 	mla	r6, r8, r6, r4
9001b94a:	9c01      	ldr	r4, [sp, #4]
9001b94c:	fb00 fa0e 	mul.w	sl, r0, lr
9001b950:	9800      	ldr	r0, [sp, #0]
9001b952:	f816 8007 	ldrb.w	r8, [r6, r7]
9001b956:	eb08 0848 	add.w	r8, r8, r8, lsl #1
9001b95a:	eb04 0b08 	add.w	fp, r4, r8
9001b95e:	f830 400a 	ldrh.w	r4, [r0, sl]
9001b962:	9801      	ldr	r0, [sp, #4]
9001b964:	f89b 6002 	ldrb.w	r6, [fp, #2]
9001b968:	1227      	asrs	r7, r4, #8
9001b96a:	f89b b001 	ldrb.w	fp, [fp, #1]
9001b96e:	fb16 f609 	smulbb	r6, r6, r9
9001b972:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001b976:	f810 8008 	ldrb.w	r8, [r0, r8]
9001b97a:	fb1b fb09 	smulbb	fp, fp, r9
9001b97e:	fb07 6705 	mla	r7, r7, r5, r6
9001b982:	10e6      	asrs	r6, r4, #3
9001b984:	00e4      	lsls	r4, r4, #3
9001b986:	9800      	ldr	r0, [sp, #0]
9001b988:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001b98c:	b2bf      	uxth	r7, r7
9001b98e:	b2e4      	uxtb	r4, r4
9001b990:	fb06 b605 	mla	r6, r6, r5, fp
9001b994:	fb14 f405 	smulbb	r4, r4, r5
9001b998:	b2b6      	uxth	r6, r6
9001b99a:	fb08 4809 	mla	r8, r8, r9, r4
9001b99e:	1c7c      	adds	r4, r7, #1
9001b9a0:	f106 0b01 	add.w	fp, r6, #1
9001b9a4:	fa1f f888 	uxth.w	r8, r8
9001b9a8:	eb04 2717 	add.w	r7, r4, r7, lsr #8
9001b9ac:	f108 0401 	add.w	r4, r8, #1
9001b9b0:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
9001b9b4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001b9b8:	eb04 2418 	add.w	r4, r4, r8, lsr #8
9001b9bc:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
9001b9c0:	f3c4 24c4 	ubfx	r4, r4, #11, #5
9001b9c4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9001b9c8:	4327      	orrs	r7, r4
9001b9ca:	ea47 070b 	orr.w	r7, r7, fp
9001b9ce:	f820 700a 	strh.w	r7, [r0, sl]
9001b9d2:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001b9d4:	f10e 3eff 	add.w	lr, lr, #4294967295
9001b9d8:	4401      	add	r1, r0
9001b9da:	9814      	ldr	r0, [sp, #80]	; 0x50
9001b9dc:	4402      	add	r2, r0
9001b9de:	e759      	b.n	9001b894 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
9001b9e0:	b007      	add	sp, #28
9001b9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

9001b9e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001b9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b9ec:	b085      	sub	sp, #20
9001b9ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001b9f2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
9001b9f4:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001b9f6:	9203      	str	r2, [sp, #12]
9001b9f8:	6870      	ldr	r0, [r6, #4]
9001b9fa:	686f      	ldr	r7, [r5, #4]
9001b9fc:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
9001ba00:	3704      	adds	r7, #4
9001ba02:	9101      	str	r1, [sp, #4]
9001ba04:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001ba08:	fb00 2404 	mla	r4, r0, r4, r2
9001ba0c:	6832      	ldr	r2, [r6, #0]
9001ba0e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001ba12:	682a      	ldr	r2, [r5, #0]
9001ba14:	9202      	str	r2, [sp, #8]
9001ba16:	9a01      	ldr	r2, [sp, #4]
9001ba18:	2a00      	cmp	r2, #0
9001ba1a:	dc03      	bgt.n	9001ba24 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001ba1c:	9a03      	ldr	r2, [sp, #12]
9001ba1e:	2a00      	cmp	r2, #0
9001ba20:	f340 80cc 	ble.w	9001bbbc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
9001ba24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001ba26:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
9001ba2a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001ba2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001ba30:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
9001ba34:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001ba38:	2b00      	cmp	r3, #0
9001ba3a:	dd0d      	ble.n	9001ba58 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001ba3c:	1406      	asrs	r6, r0, #16
9001ba3e:	d405      	bmi.n	9001ba4c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
9001ba40:	454e      	cmp	r6, r9
9001ba42:	da03      	bge.n	9001ba4c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
9001ba44:	1416      	asrs	r6, r2, #16
9001ba46:	d401      	bmi.n	9001ba4c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
9001ba48:	4546      	cmp	r6, r8
9001ba4a:	db06      	blt.n	9001ba5a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001ba4c:	9e12      	ldr	r6, [sp, #72]	; 0x48
9001ba4e:	4460      	add	r0, ip
9001ba50:	3b01      	subs	r3, #1
9001ba52:	3402      	adds	r4, #2
9001ba54:	4432      	add	r2, r6
9001ba56:	e7ef      	b.n	9001ba38 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
9001ba58:	d00f      	beq.n	9001ba7a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001ba5a:	1e5e      	subs	r6, r3, #1
9001ba5c:	fb0c 0e06 	mla	lr, ip, r6, r0
9001ba60:	ea5f 4e2e 	movs.w	lr, lr, asr #16
9001ba64:	d543      	bpl.n	9001baee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
9001ba66:	4698      	mov	r8, r3
9001ba68:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
9001ba6c:	f1b8 0f00 	cmp.w	r8, #0
9001ba70:	dc71      	bgt.n	9001bb56 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
9001ba72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001ba76:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001ba7a:	9b01      	ldr	r3, [sp, #4]
9001ba7c:	2b00      	cmp	r3, #0
9001ba7e:	f340 809d 	ble.w	9001bbbc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
9001ba82:	ee30 0a04 	vadd.f32	s0, s0, s8
9001ba86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001ba88:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001ba8c:	eeb0 6a62 	vmov.f32	s12, s5
9001ba90:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001ba94:	ee31 1a05 	vadd.f32	s2, s2, s10
9001ba98:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001ba9c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001baa0:	eeb0 6a43 	vmov.f32	s12, s6
9001baa4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001baa8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001baac:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001bab0:	ee61 7a27 	vmul.f32	s15, s2, s15
9001bab4:	ee77 2a62 	vsub.f32	s5, s14, s5
9001bab8:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001babc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001bac0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001bac4:	ee12 2a90 	vmov	r2, s5
9001bac8:	eef0 2a47 	vmov.f32	s5, s14
9001bacc:	fb92 fcf3 	sdiv	ip, r2, r3
9001bad0:	ee13 2a10 	vmov	r2, s6
9001bad4:	eeb0 3a67 	vmov.f32	s6, s15
9001bad8:	fb92 f3f3 	sdiv	r3, r2, r3
9001badc:	9312      	str	r3, [sp, #72]	; 0x48
9001bade:	9b01      	ldr	r3, [sp, #4]
9001bae0:	9a03      	ldr	r2, [sp, #12]
9001bae2:	3b01      	subs	r3, #1
9001bae4:	9301      	str	r3, [sp, #4]
9001bae6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001bae8:	bf08      	it	eq
9001baea:	4613      	moveq	r3, r2
9001baec:	e793      	b.n	9001ba16 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
9001baee:	45ce      	cmp	lr, r9
9001baf0:	dab9      	bge.n	9001ba66 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001baf2:	9912      	ldr	r1, [sp, #72]	; 0x48
9001baf4:	fb01 2606 	mla	r6, r1, r6, r2
9001baf8:	1436      	asrs	r6, r6, #16
9001bafa:	d4b4      	bmi.n	9001ba66 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001bafc:	4546      	cmp	r6, r8
9001bafe:	dab2      	bge.n	9001ba66 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001bb00:	4698      	mov	r8, r3
9001bb02:	46a2      	mov	sl, r4
9001bb04:	f1b8 0f00 	cmp.w	r8, #0
9001bb08:	ddb3      	ble.n	9001ba72 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
9001bb0a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
9001bb0e:	1416      	asrs	r6, r2, #16
9001bb10:	9902      	ldr	r1, [sp, #8]
9001bb12:	ea4f 4e20 	mov.w	lr, r0, asr #16
9001bb16:	f108 38ff 	add.w	r8, r8, #4294967295
9001bb1a:	4460      	add	r0, ip
9001bb1c:	fb09 1606 	mla	r6, r9, r6, r1
9001bb20:	4928      	ldr	r1, [pc, #160]	; (9001bbc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
9001bb22:	f816 e00e 	ldrb.w	lr, [r6, lr]
9001bb26:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
9001bb2a:	eb07 0b0e 	add.w	fp, r7, lr
9001bb2e:	f89b 6001 	ldrb.w	r6, [fp, #1]
9001bb32:	f89b 9002 	ldrb.w	r9, [fp, #2]
9001bb36:	00f6      	lsls	r6, r6, #3
9001bb38:	ea01 2909 	and.w	r9, r1, r9, lsl #8
9001bb3c:	9912      	ldr	r1, [sp, #72]	; 0x48
9001bb3e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001bb42:	440a      	add	r2, r1
9001bb44:	ea49 0606 	orr.w	r6, r9, r6
9001bb48:	f817 900e 	ldrb.w	r9, [r7, lr]
9001bb4c:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
9001bb50:	f82a 6b02 	strh.w	r6, [sl], #2
9001bb54:	e7d6      	b.n	9001bb04 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9001bb56:	ea5f 4920 	movs.w	r9, r0, asr #16
9001bb5a:	d429      	bmi.n	9001bbb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
9001bb5c:	68ae      	ldr	r6, [r5, #8]
9001bb5e:	454e      	cmp	r6, r9
9001bb60:	dd26      	ble.n	9001bbb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
9001bb62:	ea5f 4b22 	movs.w	fp, r2, asr #16
9001bb66:	d423      	bmi.n	9001bbb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
9001bb68:	68e9      	ldr	r1, [r5, #12]
9001bb6a:	4559      	cmp	r1, fp
9001bb6c:	dd20      	ble.n	9001bbb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
9001bb6e:	fa0f fe86 	sxth.w	lr, r6
9001bb72:	9902      	ldr	r1, [sp, #8]
9001bb74:	fb0b 1e0e 	mla	lr, fp, lr, r1
9001bb78:	f06f 0101 	mvn.w	r1, #1
9001bb7c:	f81e e009 	ldrb.w	lr, [lr, r9]
9001bb80:	fb01 f908 	mul.w	r9, r1, r8
9001bb84:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
9001bb88:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
9001bb8c:	eb07 060e 	add.w	r6, r7, lr
9001bb90:	f896 b002 	ldrb.w	fp, [r6, #2]
9001bb94:	7876      	ldrb	r6, [r6, #1]
9001bb96:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
9001bb9a:	00f6      	lsls	r6, r6, #3
9001bb9c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001bba0:	ea4b 0606 	orr.w	r6, fp, r6
9001bba4:	f817 b00e 	ldrb.w	fp, [r7, lr]
9001bba8:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
9001bbac:	f82a 6009 	strh.w	r6, [sl, r9]
9001bbb0:	9912      	ldr	r1, [sp, #72]	; 0x48
9001bbb2:	4460      	add	r0, ip
9001bbb4:	f108 38ff 	add.w	r8, r8, #4294967295
9001bbb8:	440a      	add	r2, r1
9001bbba:	e757      	b.n	9001ba6c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001bbbc:	b005      	add	sp, #20
9001bbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001bbc2:	bf00      	nop
9001bbc4:	fffff800 	.word	0xfffff800

9001bbc8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001bbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001bbcc:	b087      	sub	sp, #28
9001bbce:	468b      	mov	fp, r1
9001bbd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001bbd4:	9815      	ldr	r0, [sp, #84]	; 0x54
9001bbd6:	9204      	str	r2, [sp, #16]
9001bbd8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001bbdc:	6841      	ldr	r1, [r0, #4]
9001bbde:	9205      	str	r2, [sp, #20]
9001bbe0:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
9001bbe4:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
9001bbe8:	fb01 2404 	mla	r4, r1, r4, r2
9001bbec:	6802      	ldr	r2, [r0, #0]
9001bbee:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001bbf2:	f8dc 2000 	ldr.w	r2, [ip]
9001bbf6:	9201      	str	r2, [sp, #4]
9001bbf8:	f8dc 2004 	ldr.w	r2, [ip, #4]
9001bbfc:	3204      	adds	r2, #4
9001bbfe:	9202      	str	r2, [sp, #8]
9001bc00:	f1bb 0f00 	cmp.w	fp, #0
9001bc04:	dc03      	bgt.n	9001bc0e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
9001bc06:	9a04      	ldr	r2, [sp, #16]
9001bc08:	2a00      	cmp	r2, #0
9001bc0a:	f340 8138 	ble.w	9001be7e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
9001bc0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001bc10:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
9001bc14:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001bc18:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001bc1a:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
9001bc1e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001bc22:	2b00      	cmp	r3, #0
9001bc24:	dd0e      	ble.n	9001bc44 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001bc26:	1402      	asrs	r2, r0, #16
9001bc28:	d405      	bmi.n	9001bc36 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001bc2a:	42ba      	cmp	r2, r7
9001bc2c:	da03      	bge.n	9001bc36 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001bc2e:	140a      	asrs	r2, r1, #16
9001bc30:	d401      	bmi.n	9001bc36 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001bc32:	42b2      	cmp	r2, r6
9001bc34:	db07      	blt.n	9001bc46 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001bc36:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001bc38:	3b01      	subs	r3, #1
9001bc3a:	3402      	adds	r4, #2
9001bc3c:	4410      	add	r0, r2
9001bc3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001bc40:	4411      	add	r1, r2
9001bc42:	e7ee      	b.n	9001bc22 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
9001bc44:	d019      	beq.n	9001bc7a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
9001bc46:	1e5a      	subs	r2, r3, #1
9001bc48:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001bc4a:	fb05 0502 	mla	r5, r5, r2, r0
9001bc4e:	142d      	asrs	r5, r5, #16
9001bc50:	d409      	bmi.n	9001bc66 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001bc52:	42bd      	cmp	r5, r7
9001bc54:	da07      	bge.n	9001bc66 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001bc56:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001bc58:	fb05 1202 	mla	r2, r5, r2, r1
9001bc5c:	1412      	asrs	r2, r2, #16
9001bc5e:	d402      	bmi.n	9001bc66 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001bc60:	42b2      	cmp	r2, r6
9001bc62:	f2c0 80ac 	blt.w	9001bdbe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
9001bc66:	f04f 0e00 	mov.w	lr, #0
9001bc6a:	eb03 020e 	add.w	r2, r3, lr
9001bc6e:	2a00      	cmp	r2, #0
9001bc70:	dc3e      	bgt.n	9001bcf0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
9001bc72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001bc76:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001bc7a:	f1bb 0f00 	cmp.w	fp, #0
9001bc7e:	f340 80fe 	ble.w	9001be7e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
9001bc82:	ee30 0a04 	vadd.f32	s0, s0, s8
9001bc86:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001bc88:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001bc8c:	f1bb 0b01 	subs.w	fp, fp, #1
9001bc90:	eeb0 6a62 	vmov.f32	s12, s5
9001bc94:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001bc98:	ee31 1a05 	vadd.f32	s2, s2, s10
9001bc9c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001bca0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001bca4:	eeb0 6a43 	vmov.f32	s12, s6
9001bca8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001bcac:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001bcb0:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001bcb4:	ee61 7a27 	vmul.f32	s15, s2, s15
9001bcb8:	ee77 2a62 	vsub.f32	s5, s14, s5
9001bcbc:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001bcc0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001bcc4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001bcc8:	ee12 2a90 	vmov	r2, s5
9001bccc:	eef0 2a47 	vmov.f32	s5, s14
9001bcd0:	fb92 f3f3 	sdiv	r3, r2, r3
9001bcd4:	ee13 2a10 	vmov	r2, s6
9001bcd8:	9313      	str	r3, [sp, #76]	; 0x4c
9001bcda:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001bcdc:	eeb0 3a67 	vmov.f32	s6, s15
9001bce0:	fb92 f3f3 	sdiv	r3, r2, r3
9001bce4:	9a04      	ldr	r2, [sp, #16]
9001bce6:	9314      	str	r3, [sp, #80]	; 0x50
9001bce8:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001bcea:	bf08      	it	eq
9001bcec:	4613      	moveq	r3, r2
9001bcee:	e787      	b.n	9001bc00 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9001bcf0:	1406      	asrs	r6, r0, #16
9001bcf2:	d45d      	bmi.n	9001bdb0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001bcf4:	f8dc 5008 	ldr.w	r5, [ip, #8]
9001bcf8:	42b5      	cmp	r5, r6
9001bcfa:	dd59      	ble.n	9001bdb0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001bcfc:	140f      	asrs	r7, r1, #16
9001bcfe:	d457      	bmi.n	9001bdb0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001bd00:	f8dc 200c 	ldr.w	r2, [ip, #12]
9001bd04:	42ba      	cmp	r2, r7
9001bd06:	dd53      	ble.n	9001bdb0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001bd08:	9a01      	ldr	r2, [sp, #4]
9001bd0a:	b22d      	sxth	r5, r5
9001bd0c:	fb07 2505 	mla	r5, r7, r5, r2
9001bd10:	5daa      	ldrb	r2, [r5, r6]
9001bd12:	9d02      	ldr	r5, [sp, #8]
9001bd14:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
9001bd18:	0e2e      	lsrs	r6, r5, #24
9001bd1a:	d049      	beq.n	9001bdb0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001bd1c:	f06f 0201 	mvn.w	r2, #1
9001bd20:	f3c5 2a07 	ubfx	sl, r5, #8, #8
9001bd24:	fb02 f20e 	mul.w	r2, r2, lr
9001bd28:	f834 8002 	ldrh.w	r8, [r4, r2]
9001bd2c:	9203      	str	r2, [sp, #12]
9001bd2e:	9a05      	ldr	r2, [sp, #20]
9001bd30:	ea4f 2728 	mov.w	r7, r8, asr #8
9001bd34:	4356      	muls	r6, r2
9001bd36:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001bd3a:	1c72      	adds	r2, r6, #1
9001bd3c:	eb02 2226 	add.w	r2, r2, r6, asr #8
9001bd40:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001bd44:	b2ed      	uxtb	r5, r5
9001bd46:	1212      	asrs	r2, r2, #8
9001bd48:	fa1f f982 	uxth.w	r9, r2
9001bd4c:	43d2      	mvns	r2, r2
9001bd4e:	fb16 f609 	smulbb	r6, r6, r9
9001bd52:	b2d2      	uxtb	r2, r2
9001bd54:	fb15 f509 	smulbb	r5, r5, r9
9001bd58:	fb07 6702 	mla	r7, r7, r2, r6
9001bd5c:	ea4f 06e8 	mov.w	r6, r8, asr #3
9001bd60:	fb1a fa09 	smulbb	sl, sl, r9
9001bd64:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001bd68:	b2bf      	uxth	r7, r7
9001bd6a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001bd6e:	fa5f f888 	uxtb.w	r8, r8
9001bd72:	fb06 a602 	mla	r6, r6, r2, sl
9001bd76:	fb08 5502 	mla	r5, r8, r2, r5
9001bd7a:	1c7a      	adds	r2, r7, #1
9001bd7c:	b2b6      	uxth	r6, r6
9001bd7e:	b2ad      	uxth	r5, r5
9001bd80:	eb02 2717 	add.w	r7, r2, r7, lsr #8
9001bd84:	9a03      	ldr	r2, [sp, #12]
9001bd86:	f105 0a01 	add.w	sl, r5, #1
9001bd8a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001bd8e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001bd92:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001bd96:	ea4a 0707 	orr.w	r7, sl, r7
9001bd9a:	f106 0a01 	add.w	sl, r6, #1
9001bd9e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001bda2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001bda6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001bdaa:	ea47 070a 	orr.w	r7, r7, sl
9001bdae:	52a7      	strh	r7, [r4, r2]
9001bdb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001bdb2:	f10e 3eff 	add.w	lr, lr, #4294967295
9001bdb6:	4410      	add	r0, r2
9001bdb8:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001bdba:	4411      	add	r1, r2
9001bdbc:	e755      	b.n	9001bc6a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001bdbe:	f04f 0800 	mov.w	r8, #0
9001bdc2:	eba3 0208 	sub.w	r2, r3, r8
9001bdc6:	2a00      	cmp	r2, #0
9001bdc8:	f77f af53 	ble.w	9001bc72 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
9001bdcc:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
9001bdd0:	140a      	asrs	r2, r1, #16
9001bdd2:	9f01      	ldr	r7, [sp, #4]
9001bdd4:	1405      	asrs	r5, r0, #16
9001bdd6:	fb06 7202 	mla	r2, r6, r2, r7
9001bdda:	5d52      	ldrb	r2, [r2, r5]
9001bddc:	9d02      	ldr	r5, [sp, #8]
9001bdde:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
9001bde2:	0e2e      	lsrs	r6, r5, #24
9001bde4:	d044      	beq.n	9001be70 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
9001bde6:	9a05      	ldr	r2, [sp, #20]
9001bde8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
9001bdec:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
9001bdf0:	4356      	muls	r6, r2
9001bdf2:	ea4f 272e 	mov.w	r7, lr, asr #8
9001bdf6:	1c72      	adds	r2, r6, #1
9001bdf8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001bdfc:	eb02 2226 	add.w	r2, r2, r6, asr #8
9001be00:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001be04:	b2ed      	uxtb	r5, r5
9001be06:	1212      	asrs	r2, r2, #8
9001be08:	fa1f f982 	uxth.w	r9, r2
9001be0c:	43d2      	mvns	r2, r2
9001be0e:	fb16 f609 	smulbb	r6, r6, r9
9001be12:	b2d2      	uxtb	r2, r2
9001be14:	fb15 f509 	smulbb	r5, r5, r9
9001be18:	fb07 6702 	mla	r7, r7, r2, r6
9001be1c:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001be20:	fb1a fa09 	smulbb	sl, sl, r9
9001be24:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001be28:	b2bf      	uxth	r7, r7
9001be2a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001be2e:	fa5f fe8e 	uxtb.w	lr, lr
9001be32:	fb06 a602 	mla	r6, r6, r2, sl
9001be36:	fb0e 5502 	mla	r5, lr, r2, r5
9001be3a:	1c7a      	adds	r2, r7, #1
9001be3c:	b2b6      	uxth	r6, r6
9001be3e:	b2ad      	uxth	r5, r5
9001be40:	eb02 2717 	add.w	r7, r2, r7, lsr #8
9001be44:	f105 0a01 	add.w	sl, r5, #1
9001be48:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001be4c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001be50:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001be54:	ea4a 0707 	orr.w	r7, sl, r7
9001be58:	f106 0a01 	add.w	sl, r6, #1
9001be5c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001be60:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001be64:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001be68:	ea47 070a 	orr.w	r7, r7, sl
9001be6c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
9001be70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001be72:	f108 0801 	add.w	r8, r8, #1
9001be76:	4410      	add	r0, r2
9001be78:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001be7a:	4411      	add	r1, r2
9001be7c:	e7a1      	b.n	9001bdc2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
9001be7e:	b007      	add	sp, #28
9001be80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001be84 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001be84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001be88:	b085      	sub	sp, #20
9001be8a:	468b      	mov	fp, r1
9001be8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001be90:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001be92:	9203      	str	r2, [sp, #12]
9001be94:	6841      	ldr	r1, [r0, #4]
9001be96:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
9001be9a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001be9e:	fb01 2404 	mla	r4, r1, r4, r2
9001bea2:	6802      	ldr	r2, [r0, #0]
9001bea4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001bea8:	f8de 2000 	ldr.w	r2, [lr]
9001beac:	9200      	str	r2, [sp, #0]
9001beae:	f8de 2004 	ldr.w	r2, [lr, #4]
9001beb2:	3204      	adds	r2, #4
9001beb4:	9201      	str	r2, [sp, #4]
9001beb6:	f1bb 0f00 	cmp.w	fp, #0
9001beba:	dc03      	bgt.n	9001bec4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
9001bebc:	9a03      	ldr	r2, [sp, #12]
9001bebe:	2a00      	cmp	r2, #0
9001bec0:	f340 8153 	ble.w	9001c16a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
9001bec4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001bec6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001beca:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001bece:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001bed0:	f9be 600c 	ldrsh.w	r6, [lr, #12]
9001bed4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001bed8:	2b00      	cmp	r3, #0
9001beda:	dd0e      	ble.n	9001befa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001bedc:	1408      	asrs	r0, r1, #16
9001bede:	d405      	bmi.n	9001beec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001bee0:	42b8      	cmp	r0, r7
9001bee2:	da03      	bge.n	9001beec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001bee4:	1410      	asrs	r0, r2, #16
9001bee6:	d401      	bmi.n	9001beec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001bee8:	42b0      	cmp	r0, r6
9001beea:	db07      	blt.n	9001befc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001beec:	9811      	ldr	r0, [sp, #68]	; 0x44
9001beee:	3b01      	subs	r3, #1
9001bef0:	3402      	adds	r4, #2
9001bef2:	4401      	add	r1, r0
9001bef4:	9812      	ldr	r0, [sp, #72]	; 0x48
9001bef6:	4402      	add	r2, r0
9001bef8:	e7ee      	b.n	9001bed8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
9001befa:	d017      	beq.n	9001bf2c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
9001befc:	1e58      	subs	r0, r3, #1
9001befe:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001bf00:	fb05 1500 	mla	r5, r5, r0, r1
9001bf04:	142d      	asrs	r5, r5, #16
9001bf06:	d409      	bmi.n	9001bf1c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001bf08:	42bd      	cmp	r5, r7
9001bf0a:	da07      	bge.n	9001bf1c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001bf0c:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001bf0e:	fb05 2000 	mla	r0, r5, r0, r2
9001bf12:	1400      	asrs	r0, r0, #16
9001bf14:	d402      	bmi.n	9001bf1c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001bf16:	42b0      	cmp	r0, r6
9001bf18:	f2c0 80bc 	blt.w	9001c094 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
9001bf1c:	2600      	movs	r6, #0
9001bf1e:	1998      	adds	r0, r3, r6
9001bf20:	2800      	cmp	r0, #0
9001bf22:	dc3e      	bgt.n	9001bfa2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
9001bf24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001bf28:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001bf2c:	f1bb 0f00 	cmp.w	fp, #0
9001bf30:	f340 811b 	ble.w	9001c16a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
9001bf34:	ee30 0a04 	vadd.f32	s0, s0, s8
9001bf38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001bf3a:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001bf3e:	f1bb 0b01 	subs.w	fp, fp, #1
9001bf42:	eeb0 6a62 	vmov.f32	s12, s5
9001bf46:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001bf4a:	ee31 1a05 	vadd.f32	s2, s2, s10
9001bf4e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001bf52:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001bf56:	eeb0 6a43 	vmov.f32	s12, s6
9001bf5a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001bf5e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001bf62:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001bf66:	ee61 7a27 	vmul.f32	s15, s2, s15
9001bf6a:	ee77 2a62 	vsub.f32	s5, s14, s5
9001bf6e:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001bf72:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001bf76:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001bf7a:	ee12 2a90 	vmov	r2, s5
9001bf7e:	eef0 2a47 	vmov.f32	s5, s14
9001bf82:	fb92 f3f3 	sdiv	r3, r2, r3
9001bf86:	ee13 2a10 	vmov	r2, s6
9001bf8a:	9311      	str	r3, [sp, #68]	; 0x44
9001bf8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001bf8e:	eeb0 3a67 	vmov.f32	s6, s15
9001bf92:	fb92 f3f3 	sdiv	r3, r2, r3
9001bf96:	9a03      	ldr	r2, [sp, #12]
9001bf98:	9312      	str	r3, [sp, #72]	; 0x48
9001bf9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001bf9c:	bf08      	it	eq
9001bf9e:	4613      	moveq	r3, r2
9001bfa0:	e789      	b.n	9001beb6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
9001bfa2:	140f      	asrs	r7, r1, #16
9001bfa4:	d426      	bmi.n	9001bff4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001bfa6:	f8de 5008 	ldr.w	r5, [lr, #8]
9001bfaa:	42bd      	cmp	r5, r7
9001bfac:	dd22      	ble.n	9001bff4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001bfae:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001bfb2:	d41f      	bmi.n	9001bff4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001bfb4:	f8de 000c 	ldr.w	r0, [lr, #12]
9001bfb8:	4560      	cmp	r0, ip
9001bfba:	dd1b      	ble.n	9001bff4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001bfbc:	9800      	ldr	r0, [sp, #0]
9001bfbe:	b22d      	sxth	r5, r5
9001bfc0:	fb0c 0505 	mla	r5, ip, r5, r0
9001bfc4:	5de8      	ldrb	r0, [r5, r7]
9001bfc6:	9d01      	ldr	r5, [sp, #4]
9001bfc8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
9001bfcc:	0e07      	lsrs	r7, r0, #24
9001bfce:	2fff      	cmp	r7, #255	; 0xff
9001bfd0:	d116      	bne.n	9001c000 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001bfd2:	f06f 0501 	mvn.w	r5, #1
9001bfd6:	fb05 f706 	mul.w	r7, r5, r6
9001bfda:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
9001bfde:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
9001bfe2:	0945      	lsrs	r5, r0, #5
9001bfe4:	f3c0 00c4 	ubfx	r0, r0, #3, #5
9001bfe8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001bfec:	ea4c 0505 	orr.w	r5, ip, r5
9001bff0:	4305      	orrs	r5, r0
9001bff2:	53e5      	strh	r5, [r4, r7]
9001bff4:	9811      	ldr	r0, [sp, #68]	; 0x44
9001bff6:	3e01      	subs	r6, #1
9001bff8:	4401      	add	r1, r0
9001bffa:	9812      	ldr	r0, [sp, #72]	; 0x48
9001bffc:	4402      	add	r2, r0
9001bffe:	e78e      	b.n	9001bf1e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001c000:	b2fd      	uxtb	r5, r7
9001c002:	2f00      	cmp	r7, #0
9001c004:	d0f6      	beq.n	9001bff4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001c006:	f06f 0701 	mvn.w	r7, #1
9001c00a:	fa1f f985 	uxth.w	r9, r5
9001c00e:	43ed      	mvns	r5, r5
9001c010:	f3c0 2a07 	ubfx	sl, r0, #8, #8
9001c014:	4377      	muls	r7, r6
9001c016:	fb1a fa09 	smulbb	sl, sl, r9
9001c01a:	b2ed      	uxtb	r5, r5
9001c01c:	f834 8007 	ldrh.w	r8, [r4, r7]
9001c020:	9702      	str	r7, [sp, #8]
9001c022:	f3c0 4707 	ubfx	r7, r0, #16, #8
9001c026:	ea4f 2c28 	mov.w	ip, r8, asr #8
9001c02a:	fb17 f709 	smulbb	r7, r7, r9
9001c02e:	b2c0      	uxtb	r0, r0
9001c030:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001c034:	fb10 f009 	smulbb	r0, r0, r9
9001c038:	fb0c 7c05 	mla	ip, ip, r5, r7
9001c03c:	ea4f 07e8 	mov.w	r7, r8, asr #3
9001c040:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001c044:	fa1f fc8c 	uxth.w	ip, ip
9001c048:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001c04c:	fa5f f888 	uxtb.w	r8, r8
9001c050:	fb07 a705 	mla	r7, r7, r5, sl
9001c054:	fb08 0005 	mla	r0, r8, r5, r0
9001c058:	f10c 0501 	add.w	r5, ip, #1
9001c05c:	b2bf      	uxth	r7, r7
9001c05e:	b280      	uxth	r0, r0
9001c060:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001c064:	f100 0a01 	add.w	sl, r0, #1
9001c068:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001c06c:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
9001c070:	9802      	ldr	r0, [sp, #8]
9001c072:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c076:	ea4a 0c0c 	orr.w	ip, sl, ip
9001c07a:	f107 0a01 	add.w	sl, r7, #1
9001c07e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001c082:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c086:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c08a:	ea4c 0c0a 	orr.w	ip, ip, sl
9001c08e:	f824 c000 	strh.w	ip, [r4, r0]
9001c092:	e7af      	b.n	9001bff4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001c094:	f04f 0800 	mov.w	r8, #0
9001c098:	eba3 0008 	sub.w	r0, r3, r8
9001c09c:	2800      	cmp	r0, #0
9001c09e:	f77f af41 	ble.w	9001bf24 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001c0a2:	f9be 6008 	ldrsh.w	r6, [lr, #8]
9001c0a6:	1410      	asrs	r0, r2, #16
9001c0a8:	9f00      	ldr	r7, [sp, #0]
9001c0aa:	140d      	asrs	r5, r1, #16
9001c0ac:	fb06 7000 	mla	r0, r6, r0, r7
9001c0b0:	5d40      	ldrb	r0, [r0, r5]
9001c0b2:	9d01      	ldr	r5, [sp, #4]
9001c0b4:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
9001c0b8:	0e2e      	lsrs	r6, r5, #24
9001c0ba:	2eff      	cmp	r6, #255	; 0xff
9001c0bc:	d112      	bne.n	9001c0e4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
9001c0be:	482c      	ldr	r0, [pc, #176]	; (9001c170 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
9001c0c0:	ea00 2615 	and.w	r6, r0, r5, lsr #8
9001c0c4:	0968      	lsrs	r0, r5, #5
9001c0c6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001c0ca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001c0ce:	4330      	orrs	r0, r6
9001c0d0:	4328      	orrs	r0, r5
9001c0d2:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
9001c0d6:	9811      	ldr	r0, [sp, #68]	; 0x44
9001c0d8:	f108 0801 	add.w	r8, r8, #1
9001c0dc:	4401      	add	r1, r0
9001c0de:	9812      	ldr	r0, [sp, #72]	; 0x48
9001c0e0:	4402      	add	r2, r0
9001c0e2:	e7d9      	b.n	9001c098 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001c0e4:	b2f0      	uxtb	r0, r6
9001c0e6:	2e00      	cmp	r6, #0
9001c0e8:	d0f5      	beq.n	9001c0d6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
9001c0ea:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
9001c0ee:	fa1f f980 	uxth.w	r9, r0
9001c0f2:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001c0f6:	43c0      	mvns	r0, r0
9001c0f8:	ea4f 272c 	mov.w	r7, ip, asr #8
9001c0fc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
9001c100:	fb16 f609 	smulbb	r6, r6, r9
9001c104:	b2c0      	uxtb	r0, r0
9001c106:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001c10a:	b2ed      	uxtb	r5, r5
9001c10c:	fb1a fa09 	smulbb	sl, sl, r9
9001c110:	fb07 6700 	mla	r7, r7, r0, r6
9001c114:	ea4f 06ec 	mov.w	r6, ip, asr #3
9001c118:	fb15 f509 	smulbb	r5, r5, r9
9001c11c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001c120:	b2bf      	uxth	r7, r7
9001c122:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001c126:	fa5f fc8c 	uxtb.w	ip, ip
9001c12a:	fb06 a600 	mla	r6, r6, r0, sl
9001c12e:	fb0c 5500 	mla	r5, ip, r0, r5
9001c132:	1c78      	adds	r0, r7, #1
9001c134:	b2b6      	uxth	r6, r6
9001c136:	b2ad      	uxth	r5, r5
9001c138:	eb00 2717 	add.w	r7, r0, r7, lsr #8
9001c13c:	f105 0a01 	add.w	sl, r5, #1
9001c140:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001c144:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001c148:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c14c:	ea4a 0707 	orr.w	r7, sl, r7
9001c150:	f106 0a01 	add.w	sl, r6, #1
9001c154:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001c158:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c15c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c160:	ea47 070a 	orr.w	r7, r7, sl
9001c164:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
9001c168:	e7b5      	b.n	9001c0d6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
9001c16a:	b005      	add	sp, #20
9001c16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001c170:	fffff800 	.word	0xfffff800

9001c174 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c178:	b087      	sub	sp, #28
9001c17a:	468b      	mov	fp, r1
9001c17c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001c180:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001c182:	9204      	str	r2, [sp, #16]
9001c184:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001c188:	6861      	ldr	r1, [r4, #4]
9001c18a:	9205      	str	r2, [sp, #20]
9001c18c:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
9001c190:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
9001c194:	fb01 2000 	mla	r0, r1, r0, r2
9001c198:	6822      	ldr	r2, [r4, #0]
9001c19a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
9001c19e:	f8de 2000 	ldr.w	r2, [lr]
9001c1a2:	9201      	str	r2, [sp, #4]
9001c1a4:	f8de 2004 	ldr.w	r2, [lr, #4]
9001c1a8:	9202      	str	r2, [sp, #8]
9001c1aa:	f1bb 0f00 	cmp.w	fp, #0
9001c1ae:	dc03      	bgt.n	9001c1b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
9001c1b0:	9a04      	ldr	r2, [sp, #16]
9001c1b2:	2a00      	cmp	r2, #0
9001c1b4:	f340 8142 	ble.w	9001c43c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
9001c1b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001c1ba:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001c1be:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001c1c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001c1c4:	f9be 600c 	ldrsh.w	r6, [lr, #12]
9001c1c8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001c1cc:	2b00      	cmp	r3, #0
9001c1ce:	dd0e      	ble.n	9001c1ee <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001c1d0:	140c      	asrs	r4, r1, #16
9001c1d2:	d405      	bmi.n	9001c1e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001c1d4:	42bc      	cmp	r4, r7
9001c1d6:	da03      	bge.n	9001c1e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001c1d8:	1414      	asrs	r4, r2, #16
9001c1da:	d401      	bmi.n	9001c1e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001c1dc:	42b4      	cmp	r4, r6
9001c1de:	db07      	blt.n	9001c1f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001c1e0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001c1e2:	3b01      	subs	r3, #1
9001c1e4:	3002      	adds	r0, #2
9001c1e6:	4421      	add	r1, r4
9001c1e8:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001c1ea:	4422      	add	r2, r4
9001c1ec:	e7ee      	b.n	9001c1cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9001c1ee:	d019      	beq.n	9001c224 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
9001c1f0:	1e5c      	subs	r4, r3, #1
9001c1f2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001c1f4:	fb05 1504 	mla	r5, r5, r4, r1
9001c1f8:	142d      	asrs	r5, r5, #16
9001c1fa:	d409      	bmi.n	9001c210 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9001c1fc:	42bd      	cmp	r5, r7
9001c1fe:	da07      	bge.n	9001c210 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9001c200:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001c202:	fb05 2404 	mla	r4, r5, r4, r2
9001c206:	1424      	asrs	r4, r4, #16
9001c208:	d402      	bmi.n	9001c210 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9001c20a:	42b4      	cmp	r4, r6
9001c20c:	f2c0 80b1 	blt.w	9001c372 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
9001c210:	f04f 0800 	mov.w	r8, #0
9001c214:	eb03 0408 	add.w	r4, r3, r8
9001c218:	2c00      	cmp	r4, #0
9001c21a:	dc3e      	bgt.n	9001c29a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
9001c21c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001c220:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001c224:	f1bb 0f00 	cmp.w	fp, #0
9001c228:	f340 8108 	ble.w	9001c43c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
9001c22c:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c230:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c232:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c236:	f1bb 0b01 	subs.w	fp, fp, #1
9001c23a:	eeb0 6a62 	vmov.f32	s12, s5
9001c23e:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001c242:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c246:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c24a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001c24e:	eeb0 6a43 	vmov.f32	s12, s6
9001c252:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c256:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001c25a:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c25e:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c262:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c266:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c26a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c26e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c272:	ee12 2a90 	vmov	r2, s5
9001c276:	eef0 2a47 	vmov.f32	s5, s14
9001c27a:	fb92 f3f3 	sdiv	r3, r2, r3
9001c27e:	ee13 2a10 	vmov	r2, s6
9001c282:	9313      	str	r3, [sp, #76]	; 0x4c
9001c284:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c286:	eeb0 3a67 	vmov.f32	s6, s15
9001c28a:	fb92 f3f3 	sdiv	r3, r2, r3
9001c28e:	9a04      	ldr	r2, [sp, #16]
9001c290:	9314      	str	r3, [sp, #80]	; 0x50
9001c292:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c294:	bf08      	it	eq
9001c296:	4613      	moveq	r3, r2
9001c298:	e787      	b.n	9001c1aa <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
9001c29a:	140e      	asrs	r6, r1, #16
9001c29c:	d462      	bmi.n	9001c364 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c29e:	f8de 5008 	ldr.w	r5, [lr, #8]
9001c2a2:	42b5      	cmp	r5, r6
9001c2a4:	dd5e      	ble.n	9001c364 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c2a6:	1417      	asrs	r7, r2, #16
9001c2a8:	d45c      	bmi.n	9001c364 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c2aa:	f8de 400c 	ldr.w	r4, [lr, #12]
9001c2ae:	42bc      	cmp	r4, r7
9001c2b0:	dd58      	ble.n	9001c364 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c2b2:	b22d      	sxth	r5, r5
9001c2b4:	9c02      	ldr	r4, [sp, #8]
9001c2b6:	fb07 6505 	mla	r5, r7, r5, r6
9001c2ba:	5d66      	ldrb	r6, [r4, r5]
9001c2bc:	2e00      	cmp	r6, #0
9001c2be:	d051      	beq.n	9001c364 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c2c0:	9c01      	ldr	r4, [sp, #4]
9001c2c2:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
9001c2c6:	f06f 0401 	mvn.w	r4, #1
9001c2ca:	fb04 f408 	mul.w	r4, r4, r8
9001c2ce:	ea4f 2c29 	mov.w	ip, r9, asr #8
9001c2d2:	5b05      	ldrh	r5, [r0, r4]
9001c2d4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001c2d8:	9403      	str	r4, [sp, #12]
9001c2da:	9c05      	ldr	r4, [sp, #20]
9001c2dc:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001c2e0:	4366      	muls	r6, r4
9001c2e2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001c2e6:	1c74      	adds	r4, r6, #1
9001c2e8:	eb04 2416 	add.w	r4, r4, r6, lsr #8
9001c2ec:	122e      	asrs	r6, r5, #8
9001c2ee:	1224      	asrs	r4, r4, #8
9001c2f0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001c2f4:	00ed      	lsls	r5, r5, #3
9001c2f6:	b2a7      	uxth	r7, r4
9001c2f8:	43e4      	mvns	r4, r4
9001c2fa:	b2ed      	uxtb	r5, r5
9001c2fc:	b2e4      	uxtb	r4, r4
9001c2fe:	fb16 f604 	smulbb	r6, r6, r4
9001c302:	fb15 f504 	smulbb	r5, r5, r4
9001c306:	fb0c 6c07 	mla	ip, ip, r7, r6
9001c30a:	ea4f 06e9 	mov.w	r6, r9, asr #3
9001c30e:	fb1a fa04 	smulbb	sl, sl, r4
9001c312:	ea4f 09c9 	mov.w	r9, r9, lsl #3
9001c316:	fa1f fc8c 	uxth.w	ip, ip
9001c31a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001c31e:	fa5f f989 	uxtb.w	r9, r9
9001c322:	fb06 a607 	mla	r6, r6, r7, sl
9001c326:	f10c 0401 	add.w	r4, ip, #1
9001c32a:	fb09 5507 	mla	r5, r9, r7, r5
9001c32e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
9001c332:	9c03      	ldr	r4, [sp, #12]
9001c334:	b2ad      	uxth	r5, r5
9001c336:	b2b6      	uxth	r6, r6
9001c338:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001c33c:	f105 0a01 	add.w	sl, r5, #1
9001c340:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001c344:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c348:	ea4a 0c0c 	orr.w	ip, sl, ip
9001c34c:	f106 0a01 	add.w	sl, r6, #1
9001c350:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001c354:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c358:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c35c:	ea4c 0c0a 	orr.w	ip, ip, sl
9001c360:	f820 c004 	strh.w	ip, [r0, r4]
9001c364:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001c366:	f108 38ff 	add.w	r8, r8, #4294967295
9001c36a:	4421      	add	r1, r4
9001c36c:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001c36e:	4422      	add	r2, r4
9001c370:	e750      	b.n	9001c214 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001c372:	f04f 0900 	mov.w	r9, #0
9001c376:	eba3 0409 	sub.w	r4, r3, r9
9001c37a:	2c00      	cmp	r4, #0
9001c37c:	f77f af4e 	ble.w	9001c21c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
9001c380:	f9be 6008 	ldrsh.w	r6, [lr, #8]
9001c384:	140d      	asrs	r5, r1, #16
9001c386:	1414      	asrs	r4, r2, #16
9001c388:	fb06 5404 	mla	r4, r6, r4, r5
9001c38c:	9d02      	ldr	r5, [sp, #8]
9001c38e:	5d2e      	ldrb	r6, [r5, r4]
9001c390:	2e00      	cmp	r6, #0
9001c392:	d04c      	beq.n	9001c42e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
9001c394:	9d01      	ldr	r5, [sp, #4]
9001c396:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
9001c39a:	9c05      	ldr	r4, [sp, #20]
9001c39c:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
9001c3a0:	ea4f 2c28 	mov.w	ip, r8, asr #8
9001c3a4:	4366      	muls	r6, r4
9001c3a6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001c3aa:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001c3ae:	1c74      	adds	r4, r6, #1
9001c3b0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001c3b4:	eb04 2416 	add.w	r4, r4, r6, lsr #8
9001c3b8:	122e      	asrs	r6, r5, #8
9001c3ba:	1224      	asrs	r4, r4, #8
9001c3bc:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001c3c0:	00ed      	lsls	r5, r5, #3
9001c3c2:	b2a7      	uxth	r7, r4
9001c3c4:	43e4      	mvns	r4, r4
9001c3c6:	b2ed      	uxtb	r5, r5
9001c3c8:	b2e4      	uxtb	r4, r4
9001c3ca:	fb16 f604 	smulbb	r6, r6, r4
9001c3ce:	fb15 f504 	smulbb	r5, r5, r4
9001c3d2:	fb0c 6c07 	mla	ip, ip, r7, r6
9001c3d6:	ea4f 06e8 	mov.w	r6, r8, asr #3
9001c3da:	fb1a fa04 	smulbb	sl, sl, r4
9001c3de:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001c3e2:	fa1f fc8c 	uxth.w	ip, ip
9001c3e6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001c3ea:	fa5f f888 	uxtb.w	r8, r8
9001c3ee:	fb06 a607 	mla	r6, r6, r7, sl
9001c3f2:	f10c 0401 	add.w	r4, ip, #1
9001c3f6:	fb08 5507 	mla	r5, r8, r7, r5
9001c3fa:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
9001c3fe:	b2ad      	uxth	r5, r5
9001c400:	b2b6      	uxth	r6, r6
9001c402:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001c406:	f105 0a01 	add.w	sl, r5, #1
9001c40a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001c40e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c412:	ea4a 0c0c 	orr.w	ip, sl, ip
9001c416:	f106 0a01 	add.w	sl, r6, #1
9001c41a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001c41e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c422:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c426:	ea4c 0c0a 	orr.w	ip, ip, sl
9001c42a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
9001c42e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001c430:	f109 0901 	add.w	r9, r9, #1
9001c434:	4421      	add	r1, r4
9001c436:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001c438:	4422      	add	r2, r4
9001c43a:	e79c      	b.n	9001c376 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
9001c43c:	b007      	add	sp, #28
9001c43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001c442 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c442:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c446:	b085      	sub	sp, #20
9001c448:	468b      	mov	fp, r1
9001c44a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001c44e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001c450:	9203      	str	r2, [sp, #12]
9001c452:	6861      	ldr	r1, [r4, #4]
9001c454:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
9001c458:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
9001c45c:	fb01 2000 	mla	r0, r1, r0, r2
9001c460:	6822      	ldr	r2, [r4, #0]
9001c462:	eb02 0040 	add.w	r0, r2, r0, lsl #1
9001c466:	f8d8 2000 	ldr.w	r2, [r8]
9001c46a:	9200      	str	r2, [sp, #0]
9001c46c:	f8d8 2004 	ldr.w	r2, [r8, #4]
9001c470:	9201      	str	r2, [sp, #4]
9001c472:	f1bb 0f00 	cmp.w	fp, #0
9001c476:	dc03      	bgt.n	9001c480 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001c478:	9a03      	ldr	r2, [sp, #12]
9001c47a:	2a00      	cmp	r2, #0
9001c47c:	f340 8146 	ble.w	9001c70c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
9001c480:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001c482:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
9001c486:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001c48a:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001c48c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
9001c490:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001c494:	2b00      	cmp	r3, #0
9001c496:	dd0e      	ble.n	9001c4b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
9001c498:	140c      	asrs	r4, r1, #16
9001c49a:	d405      	bmi.n	9001c4a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001c49c:	42bc      	cmp	r4, r7
9001c49e:	da03      	bge.n	9001c4a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001c4a0:	1414      	asrs	r4, r2, #16
9001c4a2:	d401      	bmi.n	9001c4a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001c4a4:	42b4      	cmp	r4, r6
9001c4a6:	db07      	blt.n	9001c4b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001c4a8:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001c4aa:	3b01      	subs	r3, #1
9001c4ac:	3002      	adds	r0, #2
9001c4ae:	4421      	add	r1, r4
9001c4b0:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001c4b2:	4422      	add	r2, r4
9001c4b4:	e7ee      	b.n	9001c494 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001c4b6:	d017      	beq.n	9001c4e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
9001c4b8:	1e5c      	subs	r4, r3, #1
9001c4ba:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001c4bc:	fb05 1504 	mla	r5, r5, r4, r1
9001c4c0:	142d      	asrs	r5, r5, #16
9001c4c2:	d409      	bmi.n	9001c4d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001c4c4:	42bd      	cmp	r5, r7
9001c4c6:	da07      	bge.n	9001c4d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001c4c8:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001c4ca:	fb05 2404 	mla	r4, r5, r4, r2
9001c4ce:	1424      	asrs	r4, r4, #16
9001c4d0:	d402      	bmi.n	9001c4d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001c4d2:	42b4      	cmp	r4, r6
9001c4d4:	f2c0 80b3 	blt.w	9001c63e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
9001c4d8:	2600      	movs	r6, #0
9001c4da:	199c      	adds	r4, r3, r6
9001c4dc:	2c00      	cmp	r4, #0
9001c4de:	dc3e      	bgt.n	9001c55e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9001c4e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001c4e4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001c4e8:	f1bb 0f00 	cmp.w	fp, #0
9001c4ec:	f340 810e 	ble.w	9001c70c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
9001c4f0:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c4f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c4f6:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c4fa:	f1bb 0b01 	subs.w	fp, fp, #1
9001c4fe:	eeb0 6a62 	vmov.f32	s12, s5
9001c502:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001c506:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c50a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c50e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001c512:	eeb0 6a43 	vmov.f32	s12, s6
9001c516:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c51a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001c51e:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c522:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c526:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c52a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c52e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c532:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c536:	ee12 2a90 	vmov	r2, s5
9001c53a:	eef0 2a47 	vmov.f32	s5, s14
9001c53e:	fb92 f3f3 	sdiv	r3, r2, r3
9001c542:	ee13 2a10 	vmov	r2, s6
9001c546:	9311      	str	r3, [sp, #68]	; 0x44
9001c548:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c54a:	eeb0 3a67 	vmov.f32	s6, s15
9001c54e:	fb92 f3f3 	sdiv	r3, r2, r3
9001c552:	9a03      	ldr	r2, [sp, #12]
9001c554:	9312      	str	r3, [sp, #72]	; 0x48
9001c556:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c558:	bf08      	it	eq
9001c55a:	4613      	moveq	r3, r2
9001c55c:	e789      	b.n	9001c472 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001c55e:	140f      	asrs	r7, r1, #16
9001c560:	d418      	bmi.n	9001c594 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001c562:	f8d8 5008 	ldr.w	r5, [r8, #8]
9001c566:	42bd      	cmp	r5, r7
9001c568:	dd14      	ble.n	9001c594 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001c56a:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001c56e:	d411      	bmi.n	9001c594 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001c570:	f8d8 400c 	ldr.w	r4, [r8, #12]
9001c574:	4564      	cmp	r4, ip
9001c576:	dd0d      	ble.n	9001c594 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001c578:	b22d      	sxth	r5, r5
9001c57a:	9c01      	ldr	r4, [sp, #4]
9001c57c:	fb0c 7505 	mla	r5, ip, r5, r7
9001c580:	5d64      	ldrb	r4, [r4, r5]
9001c582:	2cff      	cmp	r4, #255	; 0xff
9001c584:	d10c      	bne.n	9001c5a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
9001c586:	9c00      	ldr	r4, [sp, #0]
9001c588:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
9001c58c:	f06f 0401 	mvn.w	r4, #1
9001c590:	4374      	muls	r4, r6
9001c592:	5305      	strh	r5, [r0, r4]
9001c594:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001c596:	3e01      	subs	r6, #1
9001c598:	4421      	add	r1, r4
9001c59a:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001c59c:	4422      	add	r2, r4
9001c59e:	e79c      	b.n	9001c4da <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001c5a0:	2c00      	cmp	r4, #0
9001c5a2:	d0f7      	beq.n	9001c594 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001c5a4:	9f00      	ldr	r7, [sp, #0]
9001c5a6:	fa1f fc84 	uxth.w	ip, r4
9001c5aa:	43e4      	mvns	r4, r4
9001c5ac:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
9001c5b0:	f06f 0501 	mvn.w	r5, #1
9001c5b4:	b2e4      	uxtb	r4, r4
9001c5b6:	4375      	muls	r5, r6
9001c5b8:	ea4f 2e29 	mov.w	lr, r9, asr #8
9001c5bc:	9502      	str	r5, [sp, #8]
9001c5be:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
9001c5c2:	5b45      	ldrh	r5, [r0, r5]
9001c5c4:	122f      	asrs	r7, r5, #8
9001c5c6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001c5ca:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001c5ce:	00ed      	lsls	r5, r5, #3
9001c5d0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001c5d4:	fb17 f704 	smulbb	r7, r7, r4
9001c5d8:	b2ed      	uxtb	r5, r5
9001c5da:	fb1a fa04 	smulbb	sl, sl, r4
9001c5de:	fb0e 7e0c 	mla	lr, lr, ip, r7
9001c5e2:	ea4f 07e9 	mov.w	r7, r9, asr #3
9001c5e6:	fb15 f504 	smulbb	r5, r5, r4
9001c5ea:	ea4f 09c9 	mov.w	r9, r9, lsl #3
9001c5ee:	fa1f fe8e 	uxth.w	lr, lr
9001c5f2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001c5f6:	fa5f f989 	uxtb.w	r9, r9
9001c5fa:	fb07 a70c 	mla	r7, r7, ip, sl
9001c5fe:	f10e 0401 	add.w	r4, lr, #1
9001c602:	fb09 550c 	mla	r5, r9, ip, r5
9001c606:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
9001c60a:	9c02      	ldr	r4, [sp, #8]
9001c60c:	b2ad      	uxth	r5, r5
9001c60e:	b2bf      	uxth	r7, r7
9001c610:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
9001c614:	f105 0a01 	add.w	sl, r5, #1
9001c618:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001c61c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c620:	ea4a 0e0e 	orr.w	lr, sl, lr
9001c624:	f107 0a01 	add.w	sl, r7, #1
9001c628:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001c62c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c630:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c634:	ea4e 0e0a 	orr.w	lr, lr, sl
9001c638:	f820 e004 	strh.w	lr, [r0, r4]
9001c63c:	e7aa      	b.n	9001c594 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001c63e:	f04f 0900 	mov.w	r9, #0
9001c642:	eba3 0409 	sub.w	r4, r3, r9
9001c646:	2c00      	cmp	r4, #0
9001c648:	f77f af4a 	ble.w	9001c4e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001c64c:	1414      	asrs	r4, r2, #16
9001c64e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
9001c652:	140d      	asrs	r5, r1, #16
9001c654:	fb06 5504 	mla	r5, r6, r4, r5
9001c658:	9c01      	ldr	r4, [sp, #4]
9001c65a:	5d64      	ldrb	r4, [r4, r5]
9001c65c:	2cff      	cmp	r4, #255	; 0xff
9001c65e:	d10b      	bne.n	9001c678 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
9001c660:	9c00      	ldr	r4, [sp, #0]
9001c662:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
9001c666:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
9001c66a:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001c66c:	f109 0901 	add.w	r9, r9, #1
9001c670:	4421      	add	r1, r4
9001c672:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001c674:	4422      	add	r2, r4
9001c676:	e7e4      	b.n	9001c642 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
9001c678:	2c00      	cmp	r4, #0
9001c67a:	d0f6      	beq.n	9001c66a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
9001c67c:	9e00      	ldr	r6, [sp, #0]
9001c67e:	b2a7      	uxth	r7, r4
9001c680:	43e4      	mvns	r4, r4
9001c682:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
9001c686:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
9001c68a:	b2e4      	uxtb	r4, r4
9001c68c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001c690:	122e      	asrs	r6, r5, #8
9001c692:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001c696:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001c69a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001c69e:	00ed      	lsls	r5, r5, #3
9001c6a0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001c6a4:	fb16 f604 	smulbb	r6, r6, r4
9001c6a8:	b2ed      	uxtb	r5, r5
9001c6aa:	fb1a fa04 	smulbb	sl, sl, r4
9001c6ae:	fb0c 6c07 	mla	ip, ip, r7, r6
9001c6b2:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001c6b6:	fb15 f504 	smulbb	r5, r5, r4
9001c6ba:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001c6be:	fa1f fc8c 	uxth.w	ip, ip
9001c6c2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001c6c6:	fa5f fe8e 	uxtb.w	lr, lr
9001c6ca:	fb06 a607 	mla	r6, r6, r7, sl
9001c6ce:	f10c 0401 	add.w	r4, ip, #1
9001c6d2:	fb0e 5507 	mla	r5, lr, r7, r5
9001c6d6:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
9001c6da:	b2ad      	uxth	r5, r5
9001c6dc:	b2b6      	uxth	r6, r6
9001c6de:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001c6e2:	f105 0a01 	add.w	sl, r5, #1
9001c6e6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001c6ea:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c6ee:	ea4a 0c0c 	orr.w	ip, sl, ip
9001c6f2:	f106 0a01 	add.w	sl, r6, #1
9001c6f6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001c6fa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c6fe:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c702:	ea4c 0c0a 	orr.w	ip, ip, sl
9001c706:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
9001c70a:	e7ae      	b.n	9001c66a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
9001c70c:	b005      	add	sp, #20
9001c70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001c712 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c712:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c716:	b085      	sub	sp, #20
9001c718:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001c71a:	9203      	str	r2, [sp, #12]
9001c71c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
9001c720:	9100      	str	r1, [sp, #0]
9001c722:	9201      	str	r2, [sp, #4]
9001c724:	6841      	ldr	r1, [r0, #4]
9001c726:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
9001c72a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001c72e:	fb01 2404 	mla	r4, r1, r4, r2
9001c732:	6802      	ldr	r2, [r0, #0]
9001c734:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001c738:	f8de 2000 	ldr.w	r2, [lr]
9001c73c:	9202      	str	r2, [sp, #8]
9001c73e:	9a01      	ldr	r2, [sp, #4]
9001c740:	43d6      	mvns	r6, r2
9001c742:	b2f6      	uxtb	r6, r6
9001c744:	9a00      	ldr	r2, [sp, #0]
9001c746:	2a00      	cmp	r2, #0
9001c748:	dc03      	bgt.n	9001c752 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
9001c74a:	9a03      	ldr	r2, [sp, #12]
9001c74c:	2a00      	cmp	r2, #0
9001c74e:	f340 8124 	ble.w	9001c99a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
9001c752:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001c754:	f9be c008 	ldrsh.w	ip, [lr, #8]
9001c758:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001c75c:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001c75e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
9001c762:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001c766:	2b00      	cmp	r3, #0
9001c768:	dd0e      	ble.n	9001c788 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001c76a:	1408      	asrs	r0, r1, #16
9001c76c:	d405      	bmi.n	9001c77a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001c76e:	4560      	cmp	r0, ip
9001c770:	da03      	bge.n	9001c77a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001c772:	1410      	asrs	r0, r2, #16
9001c774:	d401      	bmi.n	9001c77a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001c776:	42b8      	cmp	r0, r7
9001c778:	db07      	blt.n	9001c78a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001c77a:	9811      	ldr	r0, [sp, #68]	; 0x44
9001c77c:	3b01      	subs	r3, #1
9001c77e:	3402      	adds	r4, #2
9001c780:	4401      	add	r1, r0
9001c782:	9812      	ldr	r0, [sp, #72]	; 0x48
9001c784:	4402      	add	r2, r0
9001c786:	e7ee      	b.n	9001c766 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
9001c788:	d06e      	beq.n	9001c868 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
9001c78a:	1e58      	subs	r0, r3, #1
9001c78c:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001c78e:	fb05 1500 	mla	r5, r5, r0, r1
9001c792:	142d      	asrs	r5, r5, #16
9001c794:	d45c      	bmi.n	9001c850 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001c796:	4565      	cmp	r5, ip
9001c798:	da5a      	bge.n	9001c850 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001c79a:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001c79c:	fb05 2000 	mla	r0, r5, r0, r2
9001c7a0:	1400      	asrs	r0, r0, #16
9001c7a2:	d455      	bmi.n	9001c850 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001c7a4:	42b8      	cmp	r0, r7
9001c7a6:	da53      	bge.n	9001c850 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001c7a8:	4699      	mov	r9, r3
9001c7aa:	46a2      	mov	sl, r4
9001c7ac:	f8bd b004 	ldrh.w	fp, [sp, #4]
9001c7b0:	f1b9 0f00 	cmp.w	r9, #0
9001c7b4:	dd54      	ble.n	9001c860 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001c7b6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001c7ba:	140d      	asrs	r5, r1, #16
9001c7bc:	1410      	asrs	r0, r2, #16
9001c7be:	f109 39ff 	add.w	r9, r9, #4294967295
9001c7c2:	fb07 5000 	mla	r0, r7, r0, r5
9001c7c6:	9d02      	ldr	r5, [sp, #8]
9001c7c8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
9001c7cc:	f8ba 5000 	ldrh.w	r5, [sl]
9001c7d0:	ea4f 2c20 	mov.w	ip, r0, asr #8
9001c7d4:	122f      	asrs	r7, r5, #8
9001c7d6:	ea4f 08e5 	mov.w	r8, r5, asr #3
9001c7da:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001c7de:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001c7e2:	00ed      	lsls	r5, r5, #3
9001c7e4:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
9001c7e8:	fb17 f706 	smulbb	r7, r7, r6
9001c7ec:	b2ed      	uxtb	r5, r5
9001c7ee:	fb18 f806 	smulbb	r8, r8, r6
9001c7f2:	fb0c 7c0b 	mla	ip, ip, fp, r7
9001c7f6:	10c7      	asrs	r7, r0, #3
9001c7f8:	fb15 f506 	smulbb	r5, r5, r6
9001c7fc:	00c0      	lsls	r0, r0, #3
9001c7fe:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001c802:	fa1f fc8c 	uxth.w	ip, ip
9001c806:	b2c0      	uxtb	r0, r0
9001c808:	fb07 870b 	mla	r7, r7, fp, r8
9001c80c:	fb00 500b 	mla	r0, r0, fp, r5
9001c810:	f10c 0501 	add.w	r5, ip, #1
9001c814:	b2bf      	uxth	r7, r7
9001c816:	b280      	uxth	r0, r0
9001c818:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001c81c:	f107 0801 	add.w	r8, r7, #1
9001c820:	1c45      	adds	r5, r0, #1
9001c822:	eb08 2817 	add.w	r8, r8, r7, lsr #8
9001c826:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001c82a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001c82e:	9811      	ldr	r0, [sp, #68]	; 0x44
9001c830:	ea4f 1858 	mov.w	r8, r8, lsr #5
9001c834:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001c838:	4401      	add	r1, r0
9001c83a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001c83e:	9812      	ldr	r0, [sp, #72]	; 0x48
9001c840:	ea45 0c0c 	orr.w	ip, r5, ip
9001c844:	4402      	add	r2, r0
9001c846:	ea4c 0c08 	orr.w	ip, ip, r8
9001c84a:	f82a cb02 	strh.w	ip, [sl], #2
9001c84e:	e7af      	b.n	9001c7b0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001c850:	f04f 0800 	mov.w	r8, #0
9001c854:	f8bd a004 	ldrh.w	sl, [sp, #4]
9001c858:	eb03 0008 	add.w	r0, r3, r8
9001c85c:	2800      	cmp	r0, #0
9001c85e:	dc41      	bgt.n	9001c8e4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
9001c860:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001c864:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001c868:	9b00      	ldr	r3, [sp, #0]
9001c86a:	2b00      	cmp	r3, #0
9001c86c:	f340 8095 	ble.w	9001c99a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
9001c870:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001c874:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c876:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c87a:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c87e:	eef0 6a62 	vmov.f32	s13, s5
9001c882:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001c886:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c88a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001c88e:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
9001c892:	eef0 6a43 	vmov.f32	s13, s6
9001c896:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001c89a:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
9001c89e:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c8a2:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c8a6:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c8aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c8ae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c8b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c8b6:	ee12 2a90 	vmov	r2, s5
9001c8ba:	eef0 2a47 	vmov.f32	s5, s14
9001c8be:	fb92 f3f3 	sdiv	r3, r2, r3
9001c8c2:	ee13 2a10 	vmov	r2, s6
9001c8c6:	9311      	str	r3, [sp, #68]	; 0x44
9001c8c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c8ca:	eeb0 3a67 	vmov.f32	s6, s15
9001c8ce:	fb92 f3f3 	sdiv	r3, r2, r3
9001c8d2:	9312      	str	r3, [sp, #72]	; 0x48
9001c8d4:	9b00      	ldr	r3, [sp, #0]
9001c8d6:	9a03      	ldr	r2, [sp, #12]
9001c8d8:	3b01      	subs	r3, #1
9001c8da:	9300      	str	r3, [sp, #0]
9001c8dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c8de:	bf08      	it	eq
9001c8e0:	4613      	moveq	r3, r2
9001c8e2:	e72f      	b.n	9001c744 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
9001c8e4:	140f      	asrs	r7, r1, #16
9001c8e6:	d451      	bmi.n	9001c98c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001c8e8:	f8de 5008 	ldr.w	r5, [lr, #8]
9001c8ec:	42bd      	cmp	r5, r7
9001c8ee:	dd4d      	ble.n	9001c98c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001c8f0:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001c8f4:	d44a      	bmi.n	9001c98c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001c8f6:	f8de 000c 	ldr.w	r0, [lr, #12]
9001c8fa:	4560      	cmp	r0, ip
9001c8fc:	dd46      	ble.n	9001c98c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001c8fe:	b22d      	sxth	r5, r5
9001c900:	9802      	ldr	r0, [sp, #8]
9001c902:	fb0c 7505 	mla	r5, ip, r5, r7
9001c906:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
9001c90a:	f06f 0501 	mvn.w	r5, #1
9001c90e:	fb05 fb08 	mul.w	fp, r5, r8
9001c912:	ea4f 2c20 	mov.w	ip, r0, asr #8
9001c916:	f834 500b 	ldrh.w	r5, [r4, fp]
9001c91a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001c91e:	122f      	asrs	r7, r5, #8
9001c920:	ea4f 09e5 	mov.w	r9, r5, asr #3
9001c924:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001c928:	00ed      	lsls	r5, r5, #3
9001c92a:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
9001c92e:	fb17 f706 	smulbb	r7, r7, r6
9001c932:	b2ed      	uxtb	r5, r5
9001c934:	fb19 f906 	smulbb	r9, r9, r6
9001c938:	fb0c 7c0a 	mla	ip, ip, sl, r7
9001c93c:	10c7      	asrs	r7, r0, #3
9001c93e:	fb15 f506 	smulbb	r5, r5, r6
9001c942:	00c0      	lsls	r0, r0, #3
9001c944:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001c948:	fa1f fc8c 	uxth.w	ip, ip
9001c94c:	b2c0      	uxtb	r0, r0
9001c94e:	fb07 970a 	mla	r7, r7, sl, r9
9001c952:	fb00 500a 	mla	r0, r0, sl, r5
9001c956:	f10c 0501 	add.w	r5, ip, #1
9001c95a:	b2bf      	uxth	r7, r7
9001c95c:	b280      	uxth	r0, r0
9001c95e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001c962:	f107 0901 	add.w	r9, r7, #1
9001c966:	1c45      	adds	r5, r0, #1
9001c968:	eb09 2917 	add.w	r9, r9, r7, lsr #8
9001c96c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001c970:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001c974:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001c978:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001c97c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001c980:	ea45 0c0c 	orr.w	ip, r5, ip
9001c984:	ea4c 0c09 	orr.w	ip, ip, r9
9001c988:	f824 c00b 	strh.w	ip, [r4, fp]
9001c98c:	9811      	ldr	r0, [sp, #68]	; 0x44
9001c98e:	f108 38ff 	add.w	r8, r8, #4294967295
9001c992:	4401      	add	r1, r0
9001c994:	9812      	ldr	r0, [sp, #72]	; 0x48
9001c996:	4402      	add	r2, r0
9001c998:	e75e      	b.n	9001c858 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
9001c99a:	b005      	add	sp, #20
9001c99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001c9a0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c9a4:	b085      	sub	sp, #20
9001c9a6:	4693      	mov	fp, r2
9001c9a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001c9ac:	9e13      	ldr	r6, [sp, #76]	; 0x4c
9001c9ae:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001c9b0:	6870      	ldr	r0, [r6, #4]
9001c9b2:	9101      	str	r1, [sp, #4]
9001c9b4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001c9b8:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
9001c9bc:	fb00 2404 	mla	r4, r0, r4, r2
9001c9c0:	6832      	ldr	r2, [r6, #0]
9001c9c2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001c9c6:	682a      	ldr	r2, [r5, #0]
9001c9c8:	9202      	str	r2, [sp, #8]
9001c9ca:	9a01      	ldr	r2, [sp, #4]
9001c9cc:	2a00      	cmp	r2, #0
9001c9ce:	dc03      	bgt.n	9001c9d8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9001c9d0:	f1bb 0f00 	cmp.w	fp, #0
9001c9d4:	f340 809a 	ble.w	9001cb0c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
9001c9d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001c9da:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
9001c9de:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001c9e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001c9e4:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
9001c9e8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001c9ec:	2b00      	cmp	r3, #0
9001c9ee:	dd0c      	ble.n	9001ca0a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
9001c9f0:	1406      	asrs	r6, r0, #16
9001c9f2:	d405      	bmi.n	9001ca00 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001c9f4:	454e      	cmp	r6, r9
9001c9f6:	da03      	bge.n	9001ca00 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001c9f8:	1416      	asrs	r6, r2, #16
9001c9fa:	d401      	bmi.n	9001ca00 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001c9fc:	4546      	cmp	r6, r8
9001c9fe:	db05      	blt.n	9001ca0c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001ca00:	4470      	add	r0, lr
9001ca02:	4462      	add	r2, ip
9001ca04:	3b01      	subs	r3, #1
9001ca06:	3402      	adds	r4, #2
9001ca08:	e7f0      	b.n	9001c9ec <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001ca0a:	d00f      	beq.n	9001ca2c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001ca0c:	1e5e      	subs	r6, r3, #1
9001ca0e:	fb0e 0706 	mla	r7, lr, r6, r0
9001ca12:	143f      	asrs	r7, r7, #16
9001ca14:	d541      	bpl.n	9001ca9a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
9001ca16:	eb04 0643 	add.w	r6, r4, r3, lsl #1
9001ca1a:	4698      	mov	r8, r3
9001ca1c:	9603      	str	r6, [sp, #12]
9001ca1e:	f1b8 0f00 	cmp.w	r8, #0
9001ca22:	dc56      	bgt.n	9001cad2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
9001ca24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001ca28:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001ca2c:	9b01      	ldr	r3, [sp, #4]
9001ca2e:	2b00      	cmp	r3, #0
9001ca30:	dd6c      	ble.n	9001cb0c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
9001ca32:	ee30 0a04 	vadd.f32	s0, s0, s8
9001ca36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001ca38:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001ca3c:	eeb0 6a62 	vmov.f32	s12, s5
9001ca40:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001ca44:	ee31 1a05 	vadd.f32	s2, s2, s10
9001ca48:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001ca4c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001ca50:	eeb0 6a43 	vmov.f32	s12, s6
9001ca54:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001ca58:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001ca5c:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001ca60:	ee61 7a27 	vmul.f32	s15, s2, s15
9001ca64:	ee77 2a62 	vsub.f32	s5, s14, s5
9001ca68:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001ca6c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001ca70:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001ca74:	ee12 2a90 	vmov	r2, s5
9001ca78:	eef0 2a47 	vmov.f32	s5, s14
9001ca7c:	fb92 fef3 	sdiv	lr, r2, r3
9001ca80:	ee13 2a10 	vmov	r2, s6
9001ca84:	eeb0 3a67 	vmov.f32	s6, s15
9001ca88:	fb92 fcf3 	sdiv	ip, r2, r3
9001ca8c:	9b01      	ldr	r3, [sp, #4]
9001ca8e:	3b01      	subs	r3, #1
9001ca90:	9301      	str	r3, [sp, #4]
9001ca92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001ca94:	bf08      	it	eq
9001ca96:	465b      	moveq	r3, fp
9001ca98:	e797      	b.n	9001c9ca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
9001ca9a:	454f      	cmp	r7, r9
9001ca9c:	dabb      	bge.n	9001ca16 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001ca9e:	fb0c 2606 	mla	r6, ip, r6, r2
9001caa2:	1436      	asrs	r6, r6, #16
9001caa4:	d4b7      	bmi.n	9001ca16 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001caa6:	4546      	cmp	r6, r8
9001caa8:	dab5      	bge.n	9001ca16 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001caaa:	461e      	mov	r6, r3
9001caac:	46a0      	mov	r8, r4
9001caae:	2e00      	cmp	r6, #0
9001cab0:	ddb8      	ble.n	9001ca24 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001cab2:	1417      	asrs	r7, r2, #16
9001cab4:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
9001cab8:	ea4f 4920 	mov.w	r9, r0, asr #16
9001cabc:	9902      	ldr	r1, [sp, #8]
9001cabe:	4470      	add	r0, lr
9001cac0:	4462      	add	r2, ip
9001cac2:	fb0a 9707 	mla	r7, sl, r7, r9
9001cac6:	3e01      	subs	r6, #1
9001cac8:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
9001cacc:	f828 7b02 	strh.w	r7, [r8], #2
9001cad0:	e7ed      	b.n	9001caae <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
9001cad2:	ea5f 4920 	movs.w	r9, r0, asr #16
9001cad6:	d414      	bmi.n	9001cb02 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
9001cad8:	68ae      	ldr	r6, [r5, #8]
9001cada:	454e      	cmp	r6, r9
9001cadc:	dd11      	ble.n	9001cb02 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
9001cade:	ea5f 4a22 	movs.w	sl, r2, asr #16
9001cae2:	d40e      	bmi.n	9001cb02 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
9001cae4:	68ef      	ldr	r7, [r5, #12]
9001cae6:	4557      	cmp	r7, sl
9001cae8:	dd0b      	ble.n	9001cb02 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
9001caea:	b236      	sxth	r6, r6
9001caec:	f06f 0101 	mvn.w	r1, #1
9001caf0:	9f02      	ldr	r7, [sp, #8]
9001caf2:	fb0a 9606 	mla	r6, sl, r6, r9
9001caf6:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
9001cafa:	fb01 f608 	mul.w	r6, r1, r8
9001cafe:	9903      	ldr	r1, [sp, #12]
9001cb00:	538f      	strh	r7, [r1, r6]
9001cb02:	4470      	add	r0, lr
9001cb04:	4462      	add	r2, ip
9001cb06:	f108 38ff 	add.w	r8, r8, #4294967295
9001cb0a:	e788      	b.n	9001ca1e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001cb0c:	b005      	add	sp, #20
9001cb0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001cb12 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001cb12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001cb16:	b087      	sub	sp, #28
9001cb18:	468b      	mov	fp, r1
9001cb1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001cb1e:	9815      	ldr	r0, [sp, #84]	; 0x54
9001cb20:	9203      	str	r2, [sp, #12]
9001cb22:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001cb26:	6841      	ldr	r1, [r0, #4]
9001cb28:	9204      	str	r2, [sp, #16]
9001cb2a:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
9001cb2e:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
9001cb32:	fb01 2505 	mla	r5, r1, r5, r2
9001cb36:	6802      	ldr	r2, [r0, #0]
9001cb38:	eb02 0545 	add.w	r5, r2, r5, lsl #1
9001cb3c:	f8d9 2000 	ldr.w	r2, [r9]
9001cb40:	9201      	str	r2, [sp, #4]
9001cb42:	f1bb 0f00 	cmp.w	fp, #0
9001cb46:	dc03      	bgt.n	9001cb50 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001cb48:	9a03      	ldr	r2, [sp, #12]
9001cb4a:	2a00      	cmp	r2, #0
9001cb4c:	f340 8158 	ble.w	9001ce00 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
9001cb50:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001cb52:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
9001cb56:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001cb5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001cb5c:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
9001cb60:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001cb64:	2b00      	cmp	r3, #0
9001cb66:	dd0e      	ble.n	9001cb86 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
9001cb68:	1402      	asrs	r2, r0, #16
9001cb6a:	d405      	bmi.n	9001cb78 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001cb6c:	42ba      	cmp	r2, r7
9001cb6e:	da03      	bge.n	9001cb78 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001cb70:	140a      	asrs	r2, r1, #16
9001cb72:	d401      	bmi.n	9001cb78 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001cb74:	42b2      	cmp	r2, r6
9001cb76:	db07      	blt.n	9001cb88 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001cb78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001cb7a:	3b01      	subs	r3, #1
9001cb7c:	3502      	adds	r5, #2
9001cb7e:	4410      	add	r0, r2
9001cb80:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001cb82:	4411      	add	r1, r2
9001cb84:	e7ee      	b.n	9001cb64 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001cb86:	d017      	beq.n	9001cbb8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
9001cb88:	1e5a      	subs	r2, r3, #1
9001cb8a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001cb8c:	fb04 0402 	mla	r4, r4, r2, r0
9001cb90:	1424      	asrs	r4, r4, #16
9001cb92:	d409      	bmi.n	9001cba8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001cb94:	42bc      	cmp	r4, r7
9001cb96:	da07      	bge.n	9001cba8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001cb98:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001cb9a:	fb04 1202 	mla	r2, r4, r2, r1
9001cb9e:	1412      	asrs	r2, r2, #16
9001cba0:	d402      	bmi.n	9001cba8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001cba2:	42b2      	cmp	r2, r6
9001cba4:	f2c0 80bf 	blt.w	9001cd26 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001cba8:	2700      	movs	r7, #0
9001cbaa:	19da      	adds	r2, r3, r7
9001cbac:	2a00      	cmp	r2, #0
9001cbae:	dc3e      	bgt.n	9001cc2e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9001cbb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001cbb4:	eb05 0543 	add.w	r5, r5, r3, lsl #1
9001cbb8:	f1bb 0f00 	cmp.w	fp, #0
9001cbbc:	f340 8120 	ble.w	9001ce00 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
9001cbc0:	ee30 0a04 	vadd.f32	s0, s0, s8
9001cbc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001cbc6:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001cbca:	f1bb 0b01 	subs.w	fp, fp, #1
9001cbce:	eeb0 6a62 	vmov.f32	s12, s5
9001cbd2:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001cbd6:	ee31 1a05 	vadd.f32	s2, s2, s10
9001cbda:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001cbde:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001cbe2:	eeb0 6a43 	vmov.f32	s12, s6
9001cbe6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001cbea:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001cbee:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001cbf2:	ee61 7a27 	vmul.f32	s15, s2, s15
9001cbf6:	ee77 2a62 	vsub.f32	s5, s14, s5
9001cbfa:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001cbfe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001cc02:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001cc06:	ee12 2a90 	vmov	r2, s5
9001cc0a:	eef0 2a47 	vmov.f32	s5, s14
9001cc0e:	fb92 f3f3 	sdiv	r3, r2, r3
9001cc12:	ee13 2a10 	vmov	r2, s6
9001cc16:	9313      	str	r3, [sp, #76]	; 0x4c
9001cc18:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001cc1a:	eeb0 3a67 	vmov.f32	s6, s15
9001cc1e:	fb92 f3f3 	sdiv	r3, r2, r3
9001cc22:	9a03      	ldr	r2, [sp, #12]
9001cc24:	9314      	str	r3, [sp, #80]	; 0x50
9001cc26:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001cc28:	bf08      	it	eq
9001cc2a:	4613      	moveq	r3, r2
9001cc2c:	e789      	b.n	9001cb42 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001cc2e:	1406      	asrs	r6, r0, #16
9001cc30:	d42d      	bmi.n	9001cc8e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001cc32:	f8d9 4008 	ldr.w	r4, [r9, #8]
9001cc36:	42b4      	cmp	r4, r6
9001cc38:	dd29      	ble.n	9001cc8e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001cc3a:	ea5f 4c21 	movs.w	ip, r1, asr #16
9001cc3e:	d426      	bmi.n	9001cc8e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001cc40:	f8d9 200c 	ldr.w	r2, [r9, #12]
9001cc44:	4562      	cmp	r2, ip
9001cc46:	dd22      	ble.n	9001cc8e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001cc48:	b224      	sxth	r4, r4
9001cc4a:	9a01      	ldr	r2, [sp, #4]
9001cc4c:	fb0c 6404 	mla	r4, ip, r4, r6
9001cc50:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
9001cc54:	0e22      	lsrs	r2, r4, #24
9001cc56:	d01a      	beq.n	9001cc8e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001cc58:	9e04      	ldr	r6, [sp, #16]
9001cc5a:	4372      	muls	r2, r6
9001cc5c:	1c56      	adds	r6, r2, #1
9001cc5e:	eb06 2222 	add.w	r2, r6, r2, asr #8
9001cc62:	0a26      	lsrs	r6, r4, #8
9001cc64:	1212      	asrs	r2, r2, #8
9001cc66:	9605      	str	r6, [sp, #20]
9001cc68:	2aff      	cmp	r2, #255	; 0xff
9001cc6a:	d116      	bne.n	9001cc9a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
9001cc6c:	f06f 0201 	mvn.w	r2, #1
9001cc70:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
9001cc74:	fb02 fc07 	mul.w	ip, r2, r7
9001cc78:	0962      	lsrs	r2, r4, #5
9001cc7a:	f026 0607 	bic.w	r6, r6, #7
9001cc7e:	f3c4 04c4 	ubfx	r4, r4, #3, #5
9001cc82:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001cc86:	4316      	orrs	r6, r2
9001cc88:	4326      	orrs	r6, r4
9001cc8a:	f825 600c 	strh.w	r6, [r5, ip]
9001cc8e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001cc90:	3f01      	subs	r7, #1
9001cc92:	4410      	add	r0, r2
9001cc94:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001cc96:	4411      	add	r1, r2
9001cc98:	e787      	b.n	9001cbaa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001cc9a:	f06f 0601 	mvn.w	r6, #1
9001cc9e:	fa1f fa82 	uxth.w	sl, r2
9001cca2:	f3c4 4c07 	ubfx	ip, r4, #16, #8
9001cca6:	43d2      	mvns	r2, r2
9001cca8:	437e      	muls	r6, r7
9001ccaa:	b2e4      	uxtb	r4, r4
9001ccac:	fb1c fc0a 	smulbb	ip, ip, sl
9001ccb0:	b2d2      	uxtb	r2, r2
9001ccb2:	f835 8006 	ldrh.w	r8, [r5, r6]
9001ccb6:	fb14 f40a 	smulbb	r4, r4, sl
9001ccba:	9602      	str	r6, [sp, #8]
9001ccbc:	ea4f 2e28 	mov.w	lr, r8, asr #8
9001ccc0:	f89d 6014 	ldrb.w	r6, [sp, #20]
9001ccc4:	fb16 f60a 	smulbb	r6, r6, sl
9001ccc8:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
9001cccc:	fb0e ce02 	mla	lr, lr, r2, ip
9001ccd0:	ea4f 0ce8 	mov.w	ip, r8, asr #3
9001ccd4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001ccd8:	fa1f fe8e 	uxth.w	lr, lr
9001ccdc:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
9001cce0:	fa5f f888 	uxtb.w	r8, r8
9001cce4:	fb0c 6c02 	mla	ip, ip, r2, r6
9001cce8:	fb08 4402 	mla	r4, r8, r2, r4
9001ccec:	f10e 0201 	add.w	r2, lr, #1
9001ccf0:	fa1f fc8c 	uxth.w	ip, ip
9001ccf4:	b2a4      	uxth	r4, r4
9001ccf6:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
9001ccfa:	9a02      	ldr	r2, [sp, #8]
9001ccfc:	1c66      	adds	r6, r4, #1
9001ccfe:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
9001cd02:	eb06 2614 	add.w	r6, r6, r4, lsr #8
9001cd06:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001cd0a:	ea46 0e0e 	orr.w	lr, r6, lr
9001cd0e:	f10c 0601 	add.w	r6, ip, #1
9001cd12:	eb06 261c 	add.w	r6, r6, ip, lsr #8
9001cd16:	0976      	lsrs	r6, r6, #5
9001cd18:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001cd1c:	ea4e 0e06 	orr.w	lr, lr, r6
9001cd20:	f825 e002 	strh.w	lr, [r5, r2]
9001cd24:	e7b3      	b.n	9001cc8e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001cd26:	f04f 0800 	mov.w	r8, #0
9001cd2a:	eba3 0208 	sub.w	r2, r3, r8
9001cd2e:	2a00      	cmp	r2, #0
9001cd30:	f77f af3e 	ble.w	9001cbb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001cd34:	1404      	asrs	r4, r0, #16
9001cd36:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
9001cd3a:	140a      	asrs	r2, r1, #16
9001cd3c:	fb06 4202 	mla	r2, r6, r2, r4
9001cd40:	9c01      	ldr	r4, [sp, #4]
9001cd42:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
9001cd46:	0e22      	lsrs	r2, r4, #24
9001cd48:	d015      	beq.n	9001cd76 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
9001cd4a:	9e04      	ldr	r6, [sp, #16]
9001cd4c:	4372      	muls	r2, r6
9001cd4e:	1c56      	adds	r6, r2, #1
9001cd50:	eb06 2222 	add.w	r2, r6, r2, asr #8
9001cd54:	0a26      	lsrs	r6, r4, #8
9001cd56:	1212      	asrs	r2, r2, #8
9001cd58:	2aff      	cmp	r2, #255	; 0xff
9001cd5a:	d113      	bne.n	9001cd84 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
9001cd5c:	0962      	lsrs	r2, r4, #5
9001cd5e:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
9001cd62:	f3c4 04c4 	ubfx	r4, r4, #3, #5
9001cd66:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001cd6a:	f026 0607 	bic.w	r6, r6, #7
9001cd6e:	4316      	orrs	r6, r2
9001cd70:	4326      	orrs	r6, r4
9001cd72:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
9001cd76:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001cd78:	f108 0801 	add.w	r8, r8, #1
9001cd7c:	4410      	add	r0, r2
9001cd7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001cd80:	4411      	add	r1, r2
9001cd82:	e7d2      	b.n	9001cd2a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
9001cd84:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
9001cd88:	fa1f fa82 	uxth.w	sl, r2
9001cd8c:	f3c4 4707 	ubfx	r7, r4, #16, #8
9001cd90:	43d2      	mvns	r2, r2
9001cd92:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001cd96:	fb17 f70a 	smulbb	r7, r7, sl
9001cd9a:	b2d2      	uxtb	r2, r2
9001cd9c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001cda0:	b2e4      	uxtb	r4, r4
9001cda2:	b2f6      	uxtb	r6, r6
9001cda4:	fb0c 7c02 	mla	ip, ip, r2, r7
9001cda8:	ea4f 07ee 	mov.w	r7, lr, asr #3
9001cdac:	fb14 f40a 	smulbb	r4, r4, sl
9001cdb0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001cdb4:	fa1f fc8c 	uxth.w	ip, ip
9001cdb8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001cdbc:	fb16 f60a 	smulbb	r6, r6, sl
9001cdc0:	fa5f fe8e 	uxtb.w	lr, lr
9001cdc4:	fb0e 4402 	mla	r4, lr, r2, r4
9001cdc8:	fb07 6702 	mla	r7, r7, r2, r6
9001cdcc:	f10c 0201 	add.w	r2, ip, #1
9001cdd0:	b2a4      	uxth	r4, r4
9001cdd2:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
9001cdd6:	1c66      	adds	r6, r4, #1
9001cdd8:	b2bf      	uxth	r7, r7
9001cdda:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001cdde:	eb06 2614 	add.w	r6, r6, r4, lsr #8
9001cde2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001cde6:	ea46 0c0c 	orr.w	ip, r6, ip
9001cdea:	1c7e      	adds	r6, r7, #1
9001cdec:	eb06 2617 	add.w	r6, r6, r7, lsr #8
9001cdf0:	0976      	lsrs	r6, r6, #5
9001cdf2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001cdf6:	ea4c 0c06 	orr.w	ip, ip, r6
9001cdfa:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
9001cdfe:	e7ba      	b.n	9001cd76 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
9001ce00:	b007      	add	sp, #28
9001ce02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

9001ce08 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001ce08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ce0c:	b085      	sub	sp, #20
9001ce0e:	468b      	mov	fp, r1
9001ce10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001ce14:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001ce16:	9203      	str	r2, [sp, #12]
9001ce18:	6841      	ldr	r1, [r0, #4]
9001ce1a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
9001ce1e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001ce22:	fb01 2404 	mla	r4, r1, r4, r2
9001ce26:	6802      	ldr	r2, [r0, #0]
9001ce28:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001ce2c:	f8d8 2000 	ldr.w	r2, [r8]
9001ce30:	9201      	str	r2, [sp, #4]
9001ce32:	f1bb 0f00 	cmp.w	fp, #0
9001ce36:	dc03      	bgt.n	9001ce40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9001ce38:	9a03      	ldr	r2, [sp, #12]
9001ce3a:	2a00      	cmp	r2, #0
9001ce3c:	f340 814f 	ble.w	9001d0de <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
9001ce40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001ce42:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
9001ce46:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001ce4a:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001ce4c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
9001ce50:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001ce54:	2b00      	cmp	r3, #0
9001ce56:	dd0e      	ble.n	9001ce76 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001ce58:	1408      	asrs	r0, r1, #16
9001ce5a:	d405      	bmi.n	9001ce68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001ce5c:	42b8      	cmp	r0, r7
9001ce5e:	da03      	bge.n	9001ce68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001ce60:	1410      	asrs	r0, r2, #16
9001ce62:	d401      	bmi.n	9001ce68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001ce64:	42b0      	cmp	r0, r6
9001ce66:	db07      	blt.n	9001ce78 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001ce68:	9811      	ldr	r0, [sp, #68]	; 0x44
9001ce6a:	3b01      	subs	r3, #1
9001ce6c:	3402      	adds	r4, #2
9001ce6e:	4401      	add	r1, r0
9001ce70:	9812      	ldr	r0, [sp, #72]	; 0x48
9001ce72:	4402      	add	r2, r0
9001ce74:	e7ee      	b.n	9001ce54 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001ce76:	d017      	beq.n	9001cea8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001ce78:	1e58      	subs	r0, r3, #1
9001ce7a:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001ce7c:	fb05 1500 	mla	r5, r5, r0, r1
9001ce80:	142d      	asrs	r5, r5, #16
9001ce82:	d409      	bmi.n	9001ce98 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001ce84:	42bd      	cmp	r5, r7
9001ce86:	da07      	bge.n	9001ce98 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001ce88:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001ce8a:	fb05 2000 	mla	r0, r5, r0, r2
9001ce8e:	1400      	asrs	r0, r0, #16
9001ce90:	d402      	bmi.n	9001ce98 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001ce92:	42b0      	cmp	r0, r6
9001ce94:	f2c0 80ba 	blt.w	9001d00c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001ce98:	2600      	movs	r6, #0
9001ce9a:	1998      	adds	r0, r3, r6
9001ce9c:	2800      	cmp	r0, #0
9001ce9e:	dc3e      	bgt.n	9001cf1e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001cea0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001cea4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001cea8:	f1bb 0f00 	cmp.w	fp, #0
9001ceac:	f340 8117 	ble.w	9001d0de <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
9001ceb0:	ee30 0a04 	vadd.f32	s0, s0, s8
9001ceb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001ceb6:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001ceba:	f1bb 0b01 	subs.w	fp, fp, #1
9001cebe:	eeb0 6a62 	vmov.f32	s12, s5
9001cec2:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001cec6:	ee31 1a05 	vadd.f32	s2, s2, s10
9001ceca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001cece:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001ced2:	eeb0 6a43 	vmov.f32	s12, s6
9001ced6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001ceda:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001cede:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001cee2:	ee61 7a27 	vmul.f32	s15, s2, s15
9001cee6:	ee77 2a62 	vsub.f32	s5, s14, s5
9001ceea:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001ceee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001cef2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001cef6:	ee12 2a90 	vmov	r2, s5
9001cefa:	eef0 2a47 	vmov.f32	s5, s14
9001cefe:	fb92 f3f3 	sdiv	r3, r2, r3
9001cf02:	ee13 2a10 	vmov	r2, s6
9001cf06:	9311      	str	r3, [sp, #68]	; 0x44
9001cf08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cf0a:	eeb0 3a67 	vmov.f32	s6, s15
9001cf0e:	fb92 f3f3 	sdiv	r3, r2, r3
9001cf12:	9a03      	ldr	r2, [sp, #12]
9001cf14:	9312      	str	r3, [sp, #72]	; 0x48
9001cf16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cf18:	bf08      	it	eq
9001cf1a:	4613      	moveq	r3, r2
9001cf1c:	e789      	b.n	9001ce32 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
9001cf1e:	140f      	asrs	r7, r1, #16
9001cf20:	d424      	bmi.n	9001cf6c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001cf22:	f8d8 5008 	ldr.w	r5, [r8, #8]
9001cf26:	42bd      	cmp	r5, r7
9001cf28:	dd20      	ble.n	9001cf6c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001cf2a:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001cf2e:	d41d      	bmi.n	9001cf6c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001cf30:	f8d8 000c 	ldr.w	r0, [r8, #12]
9001cf34:	4560      	cmp	r0, ip
9001cf36:	dd19      	ble.n	9001cf6c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001cf38:	b22d      	sxth	r5, r5
9001cf3a:	9801      	ldr	r0, [sp, #4]
9001cf3c:	fb0c 7505 	mla	r5, ip, r5, r7
9001cf40:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
9001cf44:	0e07      	lsrs	r7, r0, #24
9001cf46:	2fff      	cmp	r7, #255	; 0xff
9001cf48:	d116      	bne.n	9001cf78 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001cf4a:	f06f 0501 	mvn.w	r5, #1
9001cf4e:	fb05 f706 	mul.w	r7, r5, r6
9001cf52:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
9001cf56:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
9001cf5a:	0945      	lsrs	r5, r0, #5
9001cf5c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
9001cf60:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001cf64:	ea4c 0505 	orr.w	r5, ip, r5
9001cf68:	4305      	orrs	r5, r0
9001cf6a:	53e5      	strh	r5, [r4, r7]
9001cf6c:	9811      	ldr	r0, [sp, #68]	; 0x44
9001cf6e:	3e01      	subs	r6, #1
9001cf70:	4401      	add	r1, r0
9001cf72:	9812      	ldr	r0, [sp, #72]	; 0x48
9001cf74:	4402      	add	r2, r0
9001cf76:	e790      	b.n	9001ce9a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001cf78:	b2fd      	uxtb	r5, r7
9001cf7a:	2f00      	cmp	r7, #0
9001cf7c:	d0f6      	beq.n	9001cf6c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001cf7e:	f06f 0701 	mvn.w	r7, #1
9001cf82:	fa1f f985 	uxth.w	r9, r5
9001cf86:	43ed      	mvns	r5, r5
9001cf88:	f3c0 2a07 	ubfx	sl, r0, #8, #8
9001cf8c:	4377      	muls	r7, r6
9001cf8e:	fb1a fa09 	smulbb	sl, sl, r9
9001cf92:	b2ed      	uxtb	r5, r5
9001cf94:	f834 e007 	ldrh.w	lr, [r4, r7]
9001cf98:	9702      	str	r7, [sp, #8]
9001cf9a:	f3c0 4707 	ubfx	r7, r0, #16, #8
9001cf9e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001cfa2:	fb17 f709 	smulbb	r7, r7, r9
9001cfa6:	b2c0      	uxtb	r0, r0
9001cfa8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001cfac:	fb10 f009 	smulbb	r0, r0, r9
9001cfb0:	fb0c 7c05 	mla	ip, ip, r5, r7
9001cfb4:	ea4f 07ee 	mov.w	r7, lr, asr #3
9001cfb8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001cfbc:	fa1f fc8c 	uxth.w	ip, ip
9001cfc0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001cfc4:	fa5f fe8e 	uxtb.w	lr, lr
9001cfc8:	fb07 a705 	mla	r7, r7, r5, sl
9001cfcc:	fb0e 0005 	mla	r0, lr, r5, r0
9001cfd0:	f10c 0501 	add.w	r5, ip, #1
9001cfd4:	b2bf      	uxth	r7, r7
9001cfd6:	b280      	uxth	r0, r0
9001cfd8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001cfdc:	f100 0a01 	add.w	sl, r0, #1
9001cfe0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001cfe4:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
9001cfe8:	9802      	ldr	r0, [sp, #8]
9001cfea:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001cfee:	ea4a 0c0c 	orr.w	ip, sl, ip
9001cff2:	f107 0a01 	add.w	sl, r7, #1
9001cff6:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001cffa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001cffe:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001d002:	ea4c 0c0a 	orr.w	ip, ip, sl
9001d006:	f824 c000 	strh.w	ip, [r4, r0]
9001d00a:	e7af      	b.n	9001cf6c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001d00c:	f04f 0e00 	mov.w	lr, #0
9001d010:	eba3 000e 	sub.w	r0, r3, lr
9001d014:	2800      	cmp	r0, #0
9001d016:	f77f af43 	ble.w	9001cea0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001d01a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
9001d01e:	140d      	asrs	r5, r1, #16
9001d020:	1410      	asrs	r0, r2, #16
9001d022:	fb06 5000 	mla	r0, r6, r0, r5
9001d026:	9d01      	ldr	r5, [sp, #4]
9001d028:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
9001d02c:	0e2e      	lsrs	r6, r5, #24
9001d02e:	2eff      	cmp	r6, #255	; 0xff
9001d030:	d112      	bne.n	9001d058 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
9001d032:	482c      	ldr	r0, [pc, #176]	; (9001d0e4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
9001d034:	ea00 2615 	and.w	r6, r0, r5, lsr #8
9001d038:	0968      	lsrs	r0, r5, #5
9001d03a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001d03e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001d042:	4330      	orrs	r0, r6
9001d044:	4328      	orrs	r0, r5
9001d046:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
9001d04a:	9811      	ldr	r0, [sp, #68]	; 0x44
9001d04c:	f10e 0e01 	add.w	lr, lr, #1
9001d050:	4401      	add	r1, r0
9001d052:	9812      	ldr	r0, [sp, #72]	; 0x48
9001d054:	4402      	add	r2, r0
9001d056:	e7db      	b.n	9001d010 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
9001d058:	b2f0      	uxtb	r0, r6
9001d05a:	2e00      	cmp	r6, #0
9001d05c:	d0f5      	beq.n	9001d04a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
9001d05e:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
9001d062:	fa1f f980 	uxth.w	r9, r0
9001d066:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001d06a:	43c0      	mvns	r0, r0
9001d06c:	ea4f 272c 	mov.w	r7, ip, asr #8
9001d070:	f3c5 2a07 	ubfx	sl, r5, #8, #8
9001d074:	fb16 f609 	smulbb	r6, r6, r9
9001d078:	b2c0      	uxtb	r0, r0
9001d07a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001d07e:	b2ed      	uxtb	r5, r5
9001d080:	fb1a fa09 	smulbb	sl, sl, r9
9001d084:	fb07 6700 	mla	r7, r7, r0, r6
9001d088:	ea4f 06ec 	mov.w	r6, ip, asr #3
9001d08c:	fb15 f509 	smulbb	r5, r5, r9
9001d090:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001d094:	b2bf      	uxth	r7, r7
9001d096:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001d09a:	fa5f fc8c 	uxtb.w	ip, ip
9001d09e:	fb06 a600 	mla	r6, r6, r0, sl
9001d0a2:	fb0c 5500 	mla	r5, ip, r0, r5
9001d0a6:	1c78      	adds	r0, r7, #1
9001d0a8:	b2b6      	uxth	r6, r6
9001d0aa:	b2ad      	uxth	r5, r5
9001d0ac:	eb00 2717 	add.w	r7, r0, r7, lsr #8
9001d0b0:	f105 0a01 	add.w	sl, r5, #1
9001d0b4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001d0b8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001d0bc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001d0c0:	ea4a 0707 	orr.w	r7, sl, r7
9001d0c4:	f106 0a01 	add.w	sl, r6, #1
9001d0c8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001d0cc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d0d0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001d0d4:	ea47 070a 	orr.w	r7, r7, sl
9001d0d8:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
9001d0dc:	e7b5      	b.n	9001d04a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
9001d0de:	b005      	add	sp, #20
9001d0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d0e4:	fffff800 	.word	0xfffff800

9001d0e8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d0ec:	b087      	sub	sp, #28
9001d0ee:	468b      	mov	fp, r1
9001d0f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001d0f4:	9815      	ldr	r0, [sp, #84]	; 0x54
9001d0f6:	9203      	str	r2, [sp, #12]
9001d0f8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001d0fc:	6841      	ldr	r1, [r0, #4]
9001d0fe:	9204      	str	r2, [sp, #16]
9001d100:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
9001d104:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
9001d108:	fb01 2404 	mla	r4, r1, r4, r2
9001d10c:	6802      	ldr	r2, [r0, #0]
9001d10e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001d112:	f8d9 2008 	ldr.w	r2, [r9, #8]
9001d116:	3201      	adds	r2, #1
9001d118:	f022 0201 	bic.w	r2, r2, #1
9001d11c:	9200      	str	r2, [sp, #0]
9001d11e:	f8d9 2000 	ldr.w	r2, [r9]
9001d122:	9201      	str	r2, [sp, #4]
9001d124:	f1bb 0f00 	cmp.w	fp, #0
9001d128:	dc03      	bgt.n	9001d132 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001d12a:	9a03      	ldr	r2, [sp, #12]
9001d12c:	2a00      	cmp	r2, #0
9001d12e:	f340 816a 	ble.w	9001d406 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
9001d132:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001d134:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
9001d138:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001d13c:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001d13e:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
9001d142:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001d146:	2b00      	cmp	r3, #0
9001d148:	dd0e      	ble.n	9001d168 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9001d14a:	1402      	asrs	r2, r0, #16
9001d14c:	d405      	bmi.n	9001d15a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001d14e:	42ba      	cmp	r2, r7
9001d150:	da03      	bge.n	9001d15a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001d152:	140a      	asrs	r2, r1, #16
9001d154:	d401      	bmi.n	9001d15a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001d156:	42b2      	cmp	r2, r6
9001d158:	db07      	blt.n	9001d16a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
9001d15a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d15c:	3b01      	subs	r3, #1
9001d15e:	3402      	adds	r4, #2
9001d160:	4410      	add	r0, r2
9001d162:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d164:	4411      	add	r1, r2
9001d166:	e7ee      	b.n	9001d146 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
9001d168:	d017      	beq.n	9001d19a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
9001d16a:	1e5a      	subs	r2, r3, #1
9001d16c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001d16e:	fb05 0502 	mla	r5, r5, r2, r0
9001d172:	142d      	asrs	r5, r5, #16
9001d174:	d409      	bmi.n	9001d18a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001d176:	42bd      	cmp	r5, r7
9001d178:	da07      	bge.n	9001d18a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001d17a:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001d17c:	fb05 1202 	mla	r2, r5, r2, r1
9001d180:	1412      	asrs	r2, r2, #16
9001d182:	d402      	bmi.n	9001d18a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001d184:	42b2      	cmp	r2, r6
9001d186:	f2c0 80c8 	blt.w	9001d31a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
9001d18a:	2700      	movs	r7, #0
9001d18c:	19da      	adds	r2, r3, r7
9001d18e:	2a00      	cmp	r2, #0
9001d190:	dc3e      	bgt.n	9001d210 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
9001d192:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001d196:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001d19a:	f1bb 0f00 	cmp.w	fp, #0
9001d19e:	f340 8132 	ble.w	9001d406 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
9001d1a2:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d1a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d1a8:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d1ac:	f1bb 0b01 	subs.w	fp, fp, #1
9001d1b0:	eeb0 6a62 	vmov.f32	s12, s5
9001d1b4:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001d1b8:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d1bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d1c0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001d1c4:	eeb0 6a43 	vmov.f32	s12, s6
9001d1c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d1cc:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001d1d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d1d4:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d1d8:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d1dc:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d1e0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d1e4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d1e8:	ee12 2a90 	vmov	r2, s5
9001d1ec:	eef0 2a47 	vmov.f32	s5, s14
9001d1f0:	fb92 f3f3 	sdiv	r3, r2, r3
9001d1f4:	ee13 2a10 	vmov	r2, s6
9001d1f8:	9313      	str	r3, [sp, #76]	; 0x4c
9001d1fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d1fc:	eeb0 3a67 	vmov.f32	s6, s15
9001d200:	fb92 f3f3 	sdiv	r3, r2, r3
9001d204:	9a03      	ldr	r2, [sp, #12]
9001d206:	9314      	str	r3, [sp, #80]	; 0x50
9001d208:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d20a:	bf08      	it	eq
9001d20c:	4613      	moveq	r3, r2
9001d20e:	e789      	b.n	9001d124 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001d210:	1405      	asrs	r5, r0, #16
9001d212:	d436      	bmi.n	9001d282 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d214:	f8d9 2008 	ldr.w	r2, [r9, #8]
9001d218:	42aa      	cmp	r2, r5
9001d21a:	dd32      	ble.n	9001d282 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d21c:	140e      	asrs	r6, r1, #16
9001d21e:	d430      	bmi.n	9001d282 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d220:	f8d9 200c 	ldr.w	r2, [r9, #12]
9001d224:	42b2      	cmp	r2, r6
9001d226:	dd2c      	ble.n	9001d282 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d228:	9a00      	ldr	r2, [sp, #0]
9001d22a:	fb06 5502 	mla	r5, r6, r2, r5
9001d22e:	9e01      	ldr	r6, [sp, #4]
9001d230:	086a      	lsrs	r2, r5, #1
9001d232:	5cb2      	ldrb	r2, [r6, r2]
9001d234:	07ee      	lsls	r6, r5, #31
9001d236:	bf54      	ite	pl
9001d238:	f002 020f 	andpl.w	r2, r2, #15
9001d23c:	1112      	asrmi	r2, r2, #4
9001d23e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001d242:	b2d2      	uxtb	r2, r2
9001d244:	b1ea      	cbz	r2, 9001d282 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d246:	9d04      	ldr	r5, [sp, #16]
9001d248:	436a      	muls	r2, r5
9001d24a:	1c55      	adds	r5, r2, #1
9001d24c:	eb05 2222 	add.w	r2, r5, r2, asr #8
9001d250:	4d6e      	ldr	r5, [pc, #440]	; (9001d40c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
9001d252:	1212      	asrs	r2, r2, #8
9001d254:	682d      	ldr	r5, [r5, #0]
9001d256:	2aff      	cmp	r2, #255	; 0xff
9001d258:	ea4f 2615 	mov.w	r6, r5, lsr #8
9001d25c:	9605      	str	r6, [sp, #20]
9001d25e:	d116      	bne.n	9001d28e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
9001d260:	f06f 0201 	mvn.w	r2, #1
9001d264:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
9001d268:	fb02 fc07 	mul.w	ip, r2, r7
9001d26c:	096a      	lsrs	r2, r5, #5
9001d26e:	f026 0607 	bic.w	r6, r6, #7
9001d272:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001d276:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001d27a:	4316      	orrs	r6, r2
9001d27c:	432e      	orrs	r6, r5
9001d27e:	f824 600c 	strh.w	r6, [r4, ip]
9001d282:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d284:	3f01      	subs	r7, #1
9001d286:	4410      	add	r0, r2
9001d288:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d28a:	4411      	add	r1, r2
9001d28c:	e77e      	b.n	9001d18c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
9001d28e:	f06f 0601 	mvn.w	r6, #1
9001d292:	fa1f fa82 	uxth.w	sl, r2
9001d296:	f3c5 4c07 	ubfx	ip, r5, #16, #8
9001d29a:	43d2      	mvns	r2, r2
9001d29c:	437e      	muls	r6, r7
9001d29e:	b2ed      	uxtb	r5, r5
9001d2a0:	fb1c fc0a 	smulbb	ip, ip, sl
9001d2a4:	b2d2      	uxtb	r2, r2
9001d2a6:	f834 8006 	ldrh.w	r8, [r4, r6]
9001d2aa:	fb15 f50a 	smulbb	r5, r5, sl
9001d2ae:	9602      	str	r6, [sp, #8]
9001d2b0:	ea4f 2e28 	mov.w	lr, r8, asr #8
9001d2b4:	f89d 6014 	ldrb.w	r6, [sp, #20]
9001d2b8:	fb16 f60a 	smulbb	r6, r6, sl
9001d2bc:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
9001d2c0:	fb0e ce02 	mla	lr, lr, r2, ip
9001d2c4:	ea4f 0ce8 	mov.w	ip, r8, asr #3
9001d2c8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001d2cc:	fa1f fe8e 	uxth.w	lr, lr
9001d2d0:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
9001d2d4:	fa5f f888 	uxtb.w	r8, r8
9001d2d8:	fb0c 6c02 	mla	ip, ip, r2, r6
9001d2dc:	fb08 5502 	mla	r5, r8, r2, r5
9001d2e0:	f10e 0201 	add.w	r2, lr, #1
9001d2e4:	fa1f fc8c 	uxth.w	ip, ip
9001d2e8:	b2ad      	uxth	r5, r5
9001d2ea:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
9001d2ee:	9a02      	ldr	r2, [sp, #8]
9001d2f0:	1c6e      	adds	r6, r5, #1
9001d2f2:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
9001d2f6:	eb06 2615 	add.w	r6, r6, r5, lsr #8
9001d2fa:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001d2fe:	ea46 0e0e 	orr.w	lr, r6, lr
9001d302:	f10c 0601 	add.w	r6, ip, #1
9001d306:	eb06 261c 	add.w	r6, r6, ip, lsr #8
9001d30a:	0976      	lsrs	r6, r6, #5
9001d30c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001d310:	ea4e 0e06 	orr.w	lr, lr, r6
9001d314:	f824 e002 	strh.w	lr, [r4, r2]
9001d318:	e7b3      	b.n	9001d282 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d31a:	f04f 0800 	mov.w	r8, #0
9001d31e:	eba3 0208 	sub.w	r2, r3, r8
9001d322:	2a00      	cmp	r2, #0
9001d324:	f77f af35 	ble.w	9001d192 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
9001d328:	1402      	asrs	r2, r0, #16
9001d32a:	9e00      	ldr	r6, [sp, #0]
9001d32c:	140d      	asrs	r5, r1, #16
9001d32e:	fb06 2505 	mla	r5, r6, r5, r2
9001d332:	9e01      	ldr	r6, [sp, #4]
9001d334:	086a      	lsrs	r2, r5, #1
9001d336:	07ed      	lsls	r5, r5, #31
9001d338:	5cb2      	ldrb	r2, [r6, r2]
9001d33a:	bf54      	ite	pl
9001d33c:	f002 020f 	andpl.w	r2, r2, #15
9001d340:	1112      	asrmi	r2, r2, #4
9001d342:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001d346:	b2d2      	uxtb	r2, r2
9001d348:	b1c2      	cbz	r2, 9001d37c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001d34a:	9d04      	ldr	r5, [sp, #16]
9001d34c:	436a      	muls	r2, r5
9001d34e:	1c55      	adds	r5, r2, #1
9001d350:	eb05 2222 	add.w	r2, r5, r2, asr #8
9001d354:	4d2d      	ldr	r5, [pc, #180]	; (9001d40c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
9001d356:	1212      	asrs	r2, r2, #8
9001d358:	682e      	ldr	r6, [r5, #0]
9001d35a:	2aff      	cmp	r2, #255	; 0xff
9001d35c:	ea4f 2516 	mov.w	r5, r6, lsr #8
9001d360:	d113      	bne.n	9001d38a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
9001d362:	0972      	lsrs	r2, r6, #5
9001d364:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
9001d368:	f3c6 06c4 	ubfx	r6, r6, #3, #5
9001d36c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001d370:	f025 0507 	bic.w	r5, r5, #7
9001d374:	4315      	orrs	r5, r2
9001d376:	4335      	orrs	r5, r6
9001d378:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
9001d37c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d37e:	f108 0801 	add.w	r8, r8, #1
9001d382:	4410      	add	r0, r2
9001d384:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d386:	4411      	add	r1, r2
9001d388:	e7c9      	b.n	9001d31e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
9001d38a:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
9001d38e:	fa1f fa82 	uxth.w	sl, r2
9001d392:	f3c6 4707 	ubfx	r7, r6, #16, #8
9001d396:	43d2      	mvns	r2, r2
9001d398:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001d39c:	fb17 f70a 	smulbb	r7, r7, sl
9001d3a0:	b2d2      	uxtb	r2, r2
9001d3a2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001d3a6:	b2f6      	uxtb	r6, r6
9001d3a8:	b2ed      	uxtb	r5, r5
9001d3aa:	fb0c 7c02 	mla	ip, ip, r2, r7
9001d3ae:	ea4f 07ee 	mov.w	r7, lr, asr #3
9001d3b2:	fb16 f60a 	smulbb	r6, r6, sl
9001d3b6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001d3ba:	fa1f fc8c 	uxth.w	ip, ip
9001d3be:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001d3c2:	fb15 f50a 	smulbb	r5, r5, sl
9001d3c6:	fa5f fe8e 	uxtb.w	lr, lr
9001d3ca:	fb0e 6602 	mla	r6, lr, r2, r6
9001d3ce:	fb07 5702 	mla	r7, r7, r2, r5
9001d3d2:	f10c 0201 	add.w	r2, ip, #1
9001d3d6:	b2b6      	uxth	r6, r6
9001d3d8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
9001d3dc:	1c75      	adds	r5, r6, #1
9001d3de:	b2bf      	uxth	r7, r7
9001d3e0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001d3e4:	eb05 2516 	add.w	r5, r5, r6, lsr #8
9001d3e8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001d3ec:	ea45 0c0c 	orr.w	ip, r5, ip
9001d3f0:	1c7d      	adds	r5, r7, #1
9001d3f2:	eb05 2517 	add.w	r5, r5, r7, lsr #8
9001d3f6:	096d      	lsrs	r5, r5, #5
9001d3f8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001d3fc:	ea4c 0c05 	orr.w	ip, ip, r5
9001d400:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
9001d404:	e7ba      	b.n	9001d37c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001d406:	b007      	add	sp, #28
9001d408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d40c:	240281a4 	.word	0x240281a4

9001d410 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d414:	b087      	sub	sp, #28
9001d416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001d41a:	f8df 8308 	ldr.w	r8, [pc, #776]	; 9001d724 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
9001d41e:	9815      	ldr	r0, [sp, #84]	; 0x54
9001d420:	9101      	str	r1, [sp, #4]
9001d422:	9205      	str	r2, [sp, #20]
9001d424:	6841      	ldr	r1, [r0, #4]
9001d426:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
9001d42a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
9001d42e:	fb01 2404 	mla	r4, r1, r4, r2
9001d432:	6802      	ldr	r2, [r0, #0]
9001d434:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001d438:	f8db 2008 	ldr.w	r2, [fp, #8]
9001d43c:	3201      	adds	r2, #1
9001d43e:	f022 0201 	bic.w	r2, r2, #1
9001d442:	9202      	str	r2, [sp, #8]
9001d444:	f8db 2000 	ldr.w	r2, [fp]
9001d448:	9203      	str	r2, [sp, #12]
9001d44a:	9a01      	ldr	r2, [sp, #4]
9001d44c:	2a00      	cmp	r2, #0
9001d44e:	dc03      	bgt.n	9001d458 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001d450:	9a05      	ldr	r2, [sp, #20]
9001d452:	2a00      	cmp	r2, #0
9001d454:	f340 8162 	ble.w	9001d71c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
9001d458:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001d45a:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
9001d45e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001d462:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001d464:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
9001d468:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001d46c:	2b00      	cmp	r3, #0
9001d46e:	dd0e      	ble.n	9001d48e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001d470:	1402      	asrs	r2, r0, #16
9001d472:	d405      	bmi.n	9001d480 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001d474:	42ba      	cmp	r2, r7
9001d476:	da03      	bge.n	9001d480 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001d478:	140a      	asrs	r2, r1, #16
9001d47a:	d401      	bmi.n	9001d480 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001d47c:	42b2      	cmp	r2, r6
9001d47e:	db07      	blt.n	9001d490 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9001d480:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d482:	3b01      	subs	r3, #1
9001d484:	3402      	adds	r4, #2
9001d486:	4410      	add	r0, r2
9001d488:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d48a:	4411      	add	r1, r2
9001d48c:	e7ee      	b.n	9001d46c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
9001d48e:	d017      	beq.n	9001d4c0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
9001d490:	1e5a      	subs	r2, r3, #1
9001d492:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001d494:	fb05 0502 	mla	r5, r5, r2, r0
9001d498:	142d      	asrs	r5, r5, #16
9001d49a:	d409      	bmi.n	9001d4b0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001d49c:	42bd      	cmp	r5, r7
9001d49e:	da07      	bge.n	9001d4b0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001d4a0:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001d4a2:	fb05 1202 	mla	r2, r5, r2, r1
9001d4a6:	1412      	asrs	r2, r2, #16
9001d4a8:	d402      	bmi.n	9001d4b0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001d4aa:	42b2      	cmp	r2, r6
9001d4ac:	f2c0 80c3 	blt.w	9001d636 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
9001d4b0:	2500      	movs	r5, #0
9001d4b2:	195a      	adds	r2, r3, r5
9001d4b4:	2a00      	cmp	r2, #0
9001d4b6:	dc3f      	bgt.n	9001d538 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
9001d4b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001d4bc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001d4c0:	9b01      	ldr	r3, [sp, #4]
9001d4c2:	2b00      	cmp	r3, #0
9001d4c4:	f340 812a 	ble.w	9001d71c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
9001d4c8:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d4cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d4ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d4d2:	eeb0 6a62 	vmov.f32	s12, s5
9001d4d6:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001d4da:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d4de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d4e2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001d4e6:	eeb0 6a43 	vmov.f32	s12, s6
9001d4ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d4ee:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001d4f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d4f6:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d4fa:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d4fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d502:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d506:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d50a:	ee12 2a90 	vmov	r2, s5
9001d50e:	eef0 2a47 	vmov.f32	s5, s14
9001d512:	fb92 f3f3 	sdiv	r3, r2, r3
9001d516:	ee13 2a10 	vmov	r2, s6
9001d51a:	9313      	str	r3, [sp, #76]	; 0x4c
9001d51c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d51e:	eeb0 3a67 	vmov.f32	s6, s15
9001d522:	fb92 f3f3 	sdiv	r3, r2, r3
9001d526:	9314      	str	r3, [sp, #80]	; 0x50
9001d528:	9b01      	ldr	r3, [sp, #4]
9001d52a:	9a05      	ldr	r2, [sp, #20]
9001d52c:	3b01      	subs	r3, #1
9001d52e:	9301      	str	r3, [sp, #4]
9001d530:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d532:	bf08      	it	eq
9001d534:	4613      	moveq	r3, r2
9001d536:	e788      	b.n	9001d44a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9001d538:	1406      	asrs	r6, r0, #16
9001d53a:	d42c      	bmi.n	9001d596 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001d53c:	f8db 2008 	ldr.w	r2, [fp, #8]
9001d540:	42b2      	cmp	r2, r6
9001d542:	dd28      	ble.n	9001d596 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001d544:	140f      	asrs	r7, r1, #16
9001d546:	d426      	bmi.n	9001d596 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001d548:	f8db 200c 	ldr.w	r2, [fp, #12]
9001d54c:	42ba      	cmp	r2, r7
9001d54e:	dd22      	ble.n	9001d596 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001d550:	9a02      	ldr	r2, [sp, #8]
9001d552:	fb07 6602 	mla	r6, r7, r2, r6
9001d556:	9f03      	ldr	r7, [sp, #12]
9001d558:	0872      	lsrs	r2, r6, #1
9001d55a:	07f6      	lsls	r6, r6, #31
9001d55c:	5cba      	ldrb	r2, [r7, r2]
9001d55e:	bf54      	ite	pl
9001d560:	f002 020f 	andpl.w	r2, r2, #15
9001d564:	1112      	asrmi	r2, r2, #4
9001d566:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001d56a:	b2d2      	uxtb	r2, r2
9001d56c:	2aff      	cmp	r2, #255	; 0xff
9001d56e:	d118      	bne.n	9001d5a2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
9001d570:	f06f 0601 	mvn.w	r6, #1
9001d574:	f8d8 2000 	ldr.w	r2, [r8]
9001d578:	fb06 f705 	mul.w	r7, r6, r5
9001d57c:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
9001d580:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
9001d584:	0956      	lsrs	r6, r2, #5
9001d586:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001d58a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001d58e:	ea4c 0606 	orr.w	r6, ip, r6
9001d592:	4316      	orrs	r6, r2
9001d594:	53e6      	strh	r6, [r4, r7]
9001d596:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d598:	3d01      	subs	r5, #1
9001d59a:	4410      	add	r0, r2
9001d59c:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d59e:	4411      	add	r1, r2
9001d5a0:	e787      	b.n	9001d4b2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001d5a2:	2a00      	cmp	r2, #0
9001d5a4:	d0f7      	beq.n	9001d596 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001d5a6:	f06f 0601 	mvn.w	r6, #1
9001d5aa:	f8d8 c000 	ldr.w	ip, [r8]
9001d5ae:	fa1f f982 	uxth.w	r9, r2
9001d5b2:	43d2      	mvns	r2, r2
9001d5b4:	436e      	muls	r6, r5
9001d5b6:	f3cc 2a07 	ubfx	sl, ip, #8, #8
9001d5ba:	b2d2      	uxtb	r2, r2
9001d5bc:	f834 e006 	ldrh.w	lr, [r4, r6]
9001d5c0:	fb1a fa09 	smulbb	sl, sl, r9
9001d5c4:	9604      	str	r6, [sp, #16]
9001d5c6:	f3cc 4607 	ubfx	r6, ip, #16, #8
9001d5ca:	ea4f 272e 	mov.w	r7, lr, asr #8
9001d5ce:	fb16 f609 	smulbb	r6, r6, r9
9001d5d2:	fa5f fc8c 	uxtb.w	ip, ip
9001d5d6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001d5da:	fb1c fc09 	smulbb	ip, ip, r9
9001d5de:	fb07 6702 	mla	r7, r7, r2, r6
9001d5e2:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001d5e6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001d5ea:	b2bf      	uxth	r7, r7
9001d5ec:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001d5f0:	fa5f fe8e 	uxtb.w	lr, lr
9001d5f4:	fb06 a602 	mla	r6, r6, r2, sl
9001d5f8:	fb0e cc02 	mla	ip, lr, r2, ip
9001d5fc:	1c7a      	adds	r2, r7, #1
9001d5fe:	b2b6      	uxth	r6, r6
9001d600:	fa1f fc8c 	uxth.w	ip, ip
9001d604:	eb02 2717 	add.w	r7, r2, r7, lsr #8
9001d608:	9a04      	ldr	r2, [sp, #16]
9001d60a:	f10c 0a01 	add.w	sl, ip, #1
9001d60e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001d612:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
9001d616:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001d61a:	ea4a 0707 	orr.w	r7, sl, r7
9001d61e:	f106 0a01 	add.w	sl, r6, #1
9001d622:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001d626:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d62a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001d62e:	ea47 070a 	orr.w	r7, r7, sl
9001d632:	52a7      	strh	r7, [r4, r2]
9001d634:	e7af      	b.n	9001d596 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001d636:	f04f 0e00 	mov.w	lr, #0
9001d63a:	eba3 020e 	sub.w	r2, r3, lr
9001d63e:	2a00      	cmp	r2, #0
9001d640:	f77f af3a 	ble.w	9001d4b8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
9001d644:	1402      	asrs	r2, r0, #16
9001d646:	9e02      	ldr	r6, [sp, #8]
9001d648:	140d      	asrs	r5, r1, #16
9001d64a:	fb06 2505 	mla	r5, r6, r5, r2
9001d64e:	9e03      	ldr	r6, [sp, #12]
9001d650:	086a      	lsrs	r2, r5, #1
9001d652:	07ed      	lsls	r5, r5, #31
9001d654:	5cb2      	ldrb	r2, [r6, r2]
9001d656:	bf54      	ite	pl
9001d658:	f002 020f 	andpl.w	r2, r2, #15
9001d65c:	1112      	asrmi	r2, r2, #4
9001d65e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001d662:	b2d2      	uxtb	r2, r2
9001d664:	2aff      	cmp	r2, #255	; 0xff
9001d666:	d115      	bne.n	9001d694 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
9001d668:	f8d8 5000 	ldr.w	r5, [r8]
9001d66c:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
9001d670:	ea02 2615 	and.w	r6, r2, r5, lsr #8
9001d674:	096a      	lsrs	r2, r5, #5
9001d676:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001d67a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001d67e:	4332      	orrs	r2, r6
9001d680:	432a      	orrs	r2, r5
9001d682:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
9001d686:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d688:	f10e 0e01 	add.w	lr, lr, #1
9001d68c:	4410      	add	r0, r2
9001d68e:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d690:	4411      	add	r1, r2
9001d692:	e7d2      	b.n	9001d63a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9001d694:	2a00      	cmp	r2, #0
9001d696:	d0f6      	beq.n	9001d686 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
9001d698:	f8d8 7000 	ldr.w	r7, [r8]
9001d69c:	fa1f f982 	uxth.w	r9, r2
9001d6a0:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
9001d6a4:	43d2      	mvns	r2, r2
9001d6a6:	f3c7 4507 	ubfx	r5, r7, #16, #8
9001d6aa:	f3c7 2a07 	ubfx	sl, r7, #8, #8
9001d6ae:	ea4f 262c 	mov.w	r6, ip, asr #8
9001d6b2:	fb15 f509 	smulbb	r5, r5, r9
9001d6b6:	b2d2      	uxtb	r2, r2
9001d6b8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001d6bc:	b2ff      	uxtb	r7, r7
9001d6be:	fb1a fa09 	smulbb	sl, sl, r9
9001d6c2:	fb06 5602 	mla	r6, r6, r2, r5
9001d6c6:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001d6ca:	fb17 f709 	smulbb	r7, r7, r9
9001d6ce:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001d6d2:	b2b6      	uxth	r6, r6
9001d6d4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001d6d8:	fa5f fc8c 	uxtb.w	ip, ip
9001d6dc:	fb05 a502 	mla	r5, r5, r2, sl
9001d6e0:	fb0c 7702 	mla	r7, ip, r2, r7
9001d6e4:	1c72      	adds	r2, r6, #1
9001d6e6:	b2ad      	uxth	r5, r5
9001d6e8:	b2bf      	uxth	r7, r7
9001d6ea:	eb02 2616 	add.w	r6, r2, r6, lsr #8
9001d6ee:	f107 0a01 	add.w	sl, r7, #1
9001d6f2:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
9001d6f6:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001d6fa:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001d6fe:	ea4a 0606 	orr.w	r6, sl, r6
9001d702:	f105 0a01 	add.w	sl, r5, #1
9001d706:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001d70a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d70e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001d712:	ea46 060a 	orr.w	r6, r6, sl
9001d716:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
9001d71a:	e7b4      	b.n	9001d686 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
9001d71c:	b007      	add	sp, #28
9001d71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d722:	bf00      	nop
9001d724:	240281a4 	.word	0x240281a4

9001d728 <_ZN8touchgfx8LCD16bppD1Ev>:
9001d728:	4770      	bx	lr

9001d72a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
9001d72a:	4770      	bx	lr

9001d72c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
9001d72c:	4770      	bx	lr

9001d72e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
9001d72e:	4770      	bx	lr

9001d730 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
9001d730:	4770      	bx	lr

9001d732 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
9001d732:	4770      	bx	lr

9001d734 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
9001d734:	4770      	bx	lr

9001d736 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
9001d736:	4770      	bx	lr

9001d738 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
9001d738:	4770      	bx	lr

9001d73a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
9001d73a:	4770      	bx	lr

9001d73c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
9001d73c:	4770      	bx	lr

9001d73e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
9001d73e:	4770      	bx	lr

9001d740 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
9001d740:	4770      	bx	lr

9001d742 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
9001d742:	4770      	bx	lr

9001d744 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
9001d744:	4770      	bx	lr

9001d746 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
9001d746:	4770      	bx	lr

9001d748 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
9001d748:	4770      	bx	lr

9001d74a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
9001d74a:	4770      	bx	lr

9001d74c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
9001d74c:	4770      	bx	lr

9001d74e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
9001d74e:	4770      	bx	lr

9001d750 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
9001d750:	4770      	bx	lr

9001d752 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
9001d752:	4770      	bx	lr

9001d754 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
9001d754:	4770      	bx	lr

9001d756 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
9001d756:	4770      	bx	lr

9001d758 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
9001d758:	4770      	bx	lr

9001d75a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
9001d75a:	4770      	bx	lr

9001d75c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
9001d75c:	4770      	bx	lr

9001d75e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
9001d75e:	4770      	bx	lr

9001d760 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
9001d760:	4770      	bx	lr

9001d762 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
9001d762:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001d766:	b088      	sub	sp, #32
9001d768:	4606      	mov	r6, r0
9001d76a:	4688      	mov	r8, r1
9001d76c:	4691      	mov	r9, r2
9001d76e:	ac08      	add	r4, sp, #32
9001d770:	f824 3d0c 	strh.w	r3, [r4, #-12]!
9001d774:	4620      	mov	r0, r4
9001d776:	f7fd fc67 	bl	9001b048 <_ZNK8touchgfx6Bitmap7getDataEv>
9001d77a:	6833      	ldr	r3, [r6, #0]
9001d77c:	4605      	mov	r5, r0
9001d77e:	4620      	mov	r0, r4
9001d780:	699f      	ldr	r7, [r3, #24]
9001d782:	f7fd fb75 	bl	9001ae70 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001d786:	4682      	mov	sl, r0
9001d788:	4620      	mov	r0, r4
9001d78a:	f7fd fba5 	bl	9001aed8 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001d78e:	9500      	str	r5, [sp, #0]
9001d790:	464b      	mov	r3, r9
9001d792:	4642      	mov	r2, r8
9001d794:	4631      	mov	r1, r6
9001d796:	e9cd a001 	strd	sl, r0, [sp, #4]
9001d79a:	a806      	add	r0, sp, #24
9001d79c:	47b8      	blx	r7
9001d79e:	4628      	mov	r0, r5
9001d7a0:	b008      	add	sp, #32
9001d7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

9001d7a8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
9001d7a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
9001d7ac:	2300      	movs	r3, #0
9001d7ae:	9300      	str	r3, [sp, #0]
9001d7b0:	4b3d      	ldr	r3, [pc, #244]	; (9001d8a8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
9001d7b2:	781b      	ldrb	r3, [r3, #0]
9001d7b4:	2b00      	cmp	r3, #0
9001d7b6:	d137      	bne.n	9001d828 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
9001d7b8:	4a3c      	ldr	r2, [pc, #240]	; (9001d8ac <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
9001d7ba:	f9b2 2000 	ldrsh.w	r2, [r2]
9001d7be:	f8ad 2004 	strh.w	r2, [sp, #4]
9001d7c2:	2b00      	cmp	r3, #0
9001d7c4:	d132      	bne.n	9001d82c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
9001d7c6:	4b3a      	ldr	r3, [pc, #232]	; (9001d8b0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
9001d7c8:	f9b3 3000 	ldrsh.w	r3, [r3]
9001d7cc:	ac02      	add	r4, sp, #8
9001d7ce:	6808      	ldr	r0, [r1, #0]
9001d7d0:	f8ad 3006 	strh.w	r3, [sp, #6]
9001d7d4:	ab02      	add	r3, sp, #8
9001d7d6:	6849      	ldr	r1, [r1, #4]
9001d7d8:	4d36      	ldr	r5, [pc, #216]	; (9001d8b4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
9001d7da:	c303      	stmia	r3!, {r0, r1}
9001d7dc:	4669      	mov	r1, sp
9001d7de:	4620      	mov	r0, r4
9001d7e0:	f7fa f8b8 	bl	90017954 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001d7e4:	4668      	mov	r0, sp
9001d7e6:	f7fa f88d 	bl	90017904 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001d7ea:	f8bd 3008 	ldrh.w	r3, [sp, #8]
9001d7ee:	f8bd 2000 	ldrh.w	r2, [sp]
9001d7f2:	462f      	mov	r7, r5
9001d7f4:	6828      	ldr	r0, [r5, #0]
9001d7f6:	4413      	add	r3, r2
9001d7f8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
9001d7fc:	f8ad 3008 	strh.w	r3, [sp, #8]
9001d800:	f8bd 300a 	ldrh.w	r3, [sp, #10]
9001d804:	4413      	add	r3, r2
9001d806:	f8ad 300a 	strh.w	r3, [sp, #10]
9001d80a:	6803      	ldr	r3, [r0, #0]
9001d80c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001d80e:	4798      	blx	r3
9001d810:	f010 0f01 	tst.w	r0, #1
9001d814:	d00c      	beq.n	9001d830 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
9001d816:	6828      	ldr	r0, [r5, #0]
9001d818:	6803      	ldr	r3, [r0, #0]
9001d81a:	e894 0006 	ldmia.w	r4, {r1, r2}
9001d81e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
9001d820:	4798      	blx	r3
9001d822:	b004      	add	sp, #16
9001d824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001d828:	4a21      	ldr	r2, [pc, #132]	; (9001d8b0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
9001d82a:	e7c6      	b.n	9001d7ba <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
9001d82c:	4b1f      	ldr	r3, [pc, #124]	; (9001d8ac <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
9001d82e:	e7cb      	b.n	9001d7c8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
9001d830:	6838      	ldr	r0, [r7, #0]
9001d832:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
9001d836:	6803      	ldr	r3, [r0, #0]
9001d838:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
9001d83c:	ea4f 0848 	mov.w	r8, r8, lsl #1
9001d840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001d842:	4798      	blx	r3
9001d844:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
9001d848:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001d84c:	f8bd 6004 	ldrh.w	r6, [sp, #4]
9001d850:	fb16 3602 	smlabb	r6, r6, r2, r3
9001d854:	eb00 0646 	add.w	r6, r0, r6, lsl #1
9001d858:	6838      	ldr	r0, [r7, #0]
9001d85a:	6803      	ldr	r3, [r0, #0]
9001d85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001d85e:	4798      	blx	r3
9001d860:	4a12      	ldr	r2, [pc, #72]	; (9001d8ac <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
9001d862:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
9001d866:	8813      	ldrh	r3, [r2, #0]
9001d868:	4691      	mov	r9, r2
9001d86a:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
9001d86e:	435d      	muls	r5, r3
9001d870:	fb03 1404 	mla	r4, r3, r4, r1
9001d874:	eb00 0444 	add.w	r4, r0, r4, lsl #1
9001d878:	eb04 0545 	add.w	r5, r4, r5, lsl #1
9001d87c:	6838      	ldr	r0, [r7, #0]
9001d87e:	42ac      	cmp	r4, r5
9001d880:	6803      	ldr	r3, [r0, #0]
9001d882:	d20e      	bcs.n	9001d8a2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
9001d884:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
9001d888:	4632      	mov	r2, r6
9001d88a:	4643      	mov	r3, r8
9001d88c:	4621      	mov	r1, r4
9001d88e:	47d0      	blx	sl
9001d890:	f8b9 3000 	ldrh.w	r3, [r9]
9001d894:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001d898:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
9001d89c:	eb06 0643 	add.w	r6, r6, r3, lsl #1
9001d8a0:	e7ec      	b.n	9001d87c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
9001d8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001d8a4:	4798      	blx	r3
9001d8a6:	e7bc      	b.n	9001d822 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
9001d8a8:	2402818c 	.word	0x2402818c
9001d8ac:	2402818e 	.word	0x2402818e
9001d8b0:	24028190 	.word	0x24028190
9001d8b4:	24028194 	.word	0x24028194

9001d8b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
9001d8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d8bc:	b08b      	sub	sp, #44	; 0x2c
9001d8be:	460f      	mov	r7, r1
9001d8c0:	4616      	mov	r6, r2
9001d8c2:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
9001d8c6:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
9001d8ca:	f1bb 0f00 	cmp.w	fp, #0
9001d8ce:	d049      	beq.n	9001d964 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
9001d8d0:	6810      	ldr	r0, [r2, #0]
9001d8d2:	ad06      	add	r5, sp, #24
9001d8d4:	6851      	ldr	r1, [r2, #4]
9001d8d6:	c503      	stmia	r5!, {r0, r1}
9001d8d8:	6818      	ldr	r0, [r3, #0]
9001d8da:	ad08      	add	r5, sp, #32
9001d8dc:	6859      	ldr	r1, [r3, #4]
9001d8de:	c503      	stmia	r5!, {r0, r1}
9001d8e0:	a806      	add	r0, sp, #24
9001d8e2:	f7fa f80f 	bl	90017904 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001d8e6:	4631      	mov	r1, r6
9001d8e8:	a808      	add	r0, sp, #32
9001d8ea:	f7fa f833 	bl	90017954 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001d8ee:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
9001d8f2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
9001d8f6:	f8bd 601c 	ldrh.w	r6, [sp, #28]
9001d8fa:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
9001d8fe:	fb16 2103 	smlabb	r1, r6, r3, r2
9001d902:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
9001d906:	eb07 0641 	add.w	r6, r7, r1, lsl #1
9001d90a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
9001d90e:	4f5f      	ldr	r7, [pc, #380]	; (9001da8c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
9001d910:	440a      	add	r2, r1
9001d912:	6838      	ldr	r0, [r7, #0]
9001d914:	46b9      	mov	r9, r7
9001d916:	f8ad 2020 	strh.w	r2, [sp, #32]
9001d91a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
9001d91e:	4413      	add	r3, r2
9001d920:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
9001d924:	6803      	ldr	r3, [r0, #0]
9001d926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001d928:	4798      	blx	r3
9001d92a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
9001d92e:	d01c      	beq.n	9001d96a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
9001d930:	f010 0f04 	tst.w	r0, #4
9001d934:	d01d      	beq.n	9001d972 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
9001d936:	f8d9 0000 	ldr.w	r0, [r9]
9001d93a:	2700      	movs	r7, #0
9001d93c:	b2ad      	uxth	r5, r5
9001d93e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
9001d942:	6801      	ldr	r1, [r0, #0]
9001d944:	f8bd 2020 	ldrh.w	r2, [sp, #32]
9001d948:	f8cd b00c 	str.w	fp, [sp, #12]
9001d94c:	9501      	str	r5, [sp, #4]
9001d94e:	e9cd 4704 	strd	r4, r7, [sp, #16]
9001d952:	f8bd 401c 	ldrh.w	r4, [sp, #28]
9001d956:	9402      	str	r4, [sp, #8]
9001d958:	fa1f f488 	uxth.w	r4, r8
9001d95c:	9400      	str	r4, [sp, #0]
9001d95e:	6c4c      	ldr	r4, [r1, #68]	; 0x44
9001d960:	4631      	mov	r1, r6
9001d962:	47a0      	blx	r4
9001d964:	b00b      	add	sp, #44	; 0x2c
9001d966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d96a:	b914      	cbnz	r4, 9001d972 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
9001d96c:	f010 0f01 	tst.w	r0, #1
9001d970:	e7e0      	b.n	9001d934 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
9001d972:	f8d9 0000 	ldr.w	r0, [r9]
9001d976:	ea4f 0748 	mov.w	r7, r8, lsl #1
9001d97a:	6803      	ldr	r3, [r0, #0]
9001d97c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001d97e:	4798      	blx	r3
9001d980:	4b43      	ldr	r3, [pc, #268]	; (9001da90 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
9001d982:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
9001d986:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
9001d98a:	881a      	ldrh	r2, [r3, #0]
9001d98c:	469a      	mov	sl, r3
9001d98e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
9001d992:	fb05 f502 	mul.w	r5, r5, r2
9001d996:	fb02 1404 	mla	r4, r2, r4, r1
9001d99a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
9001d99e:	d059      	beq.n	9001da54 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
9001d9a0:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
9001d9a4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
9001d9a8:	fa1f f28b 	uxth.w	r2, fp
9001d9ac:	469e      	mov	lr, r3
9001d9ae:	fa1f f989 	uxth.w	r9, r9
9001d9b2:	42ac      	cmp	r4, r5
9001d9b4:	d264      	bcs.n	9001da80 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
9001d9b6:	eb04 0a07 	add.w	sl, r4, r7
9001d9ba:	4554      	cmp	r4, sl
9001d9bc:	d23d      	bcs.n	9001da3a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
9001d9be:	8821      	ldrh	r1, [r4, #0]
9001d9c0:	f836 3b02 	ldrh.w	r3, [r6], #2
9001d9c4:	1208      	asrs	r0, r1, #8
9001d9c6:	ea4f 2c23 	mov.w	ip, r3, asr #8
9001d9ca:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001d9ce:	ea4f 0be1 	mov.w	fp, r1, asr #3
9001d9d2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001d9d6:	00c9      	lsls	r1, r1, #3
9001d9d8:	fb10 f009 	smulbb	r0, r0, r9
9001d9dc:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
9001d9e0:	b2c9      	uxtb	r1, r1
9001d9e2:	fb0c 0c02 	mla	ip, ip, r2, r0
9001d9e6:	10d8      	asrs	r0, r3, #3
9001d9e8:	fb1b fb09 	smulbb	fp, fp, r9
9001d9ec:	00db      	lsls	r3, r3, #3
9001d9ee:	fa1f fc8c 	uxth.w	ip, ip
9001d9f2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001d9f6:	fb11 f109 	smulbb	r1, r1, r9
9001d9fa:	b2db      	uxtb	r3, r3
9001d9fc:	fb00 b002 	mla	r0, r0, r2, fp
9001da00:	f10c 0b01 	add.w	fp, ip, #1
9001da04:	fb03 1302 	mla	r3, r3, r2, r1
9001da08:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
9001da0c:	b29b      	uxth	r3, r3
9001da0e:	b280      	uxth	r0, r0
9001da10:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
9001da14:	f103 0c01 	add.w	ip, r3, #1
9001da18:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001da1c:	1c43      	adds	r3, r0, #1
9001da1e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9001da22:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001da26:	0940      	lsrs	r0, r0, #5
9001da28:	ea4c 0c0b 	orr.w	ip, ip, fp
9001da2c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001da30:	ea4c 0c00 	orr.w	ip, ip, r0
9001da34:	f824 cb02 	strh.w	ip, [r4], #2
9001da38:	e7bf      	b.n	9001d9ba <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
9001da3a:	f8be 3000 	ldrh.w	r3, [lr]
9001da3e:	eba3 0308 	sub.w	r3, r3, r8
9001da42:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001da46:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
9001da4a:	eba3 0308 	sub.w	r3, r3, r8
9001da4e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
9001da52:	e7ae      	b.n	9001d9b2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
9001da54:	eb04 0545 	add.w	r5, r4, r5, lsl #1
9001da58:	f8d9 0000 	ldr.w	r0, [r9]
9001da5c:	42ac      	cmp	r4, r5
9001da5e:	6803      	ldr	r3, [r0, #0]
9001da60:	d20e      	bcs.n	9001da80 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
9001da62:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
9001da66:	4632      	mov	r2, r6
9001da68:	463b      	mov	r3, r7
9001da6a:	4621      	mov	r1, r4
9001da6c:	47c0      	blx	r8
9001da6e:	f8ba 3000 	ldrh.w	r3, [sl]
9001da72:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001da76:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
9001da7a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
9001da7e:	e7eb      	b.n	9001da58 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
9001da80:	4b02      	ldr	r3, [pc, #8]	; (9001da8c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
9001da82:	6818      	ldr	r0, [r3, #0]
9001da84:	6803      	ldr	r3, [r0, #0]
9001da86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001da88:	4798      	blx	r3
9001da8a:	e76b      	b.n	9001d964 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
9001da8c:	24028194 	.word	0x24028194
9001da90:	2402818e 	.word	0x2402818e

9001da94 <_ZN8touchgfx8LCD16bppD0Ev>:
9001da94:	b510      	push	{r4, lr}
9001da96:	4604      	mov	r4, r0
9001da98:	2178      	movs	r1, #120	; 0x78
9001da9a:	f009 faec 	bl	90027076 <_ZdlPvj>
9001da9e:	4620      	mov	r0, r4
9001daa0:	bd10      	pop	{r4, pc}

9001daa2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
9001daa2:	b510      	push	{r4, lr}
9001daa4:	4604      	mov	r4, r0
9001daa6:	2104      	movs	r1, #4
9001daa8:	f009 fae5 	bl	90027076 <_ZdlPvj>
9001daac:	4620      	mov	r0, r4
9001daae:	bd10      	pop	{r4, pc}

9001dab0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
9001dab0:	b510      	push	{r4, lr}
9001dab2:	4604      	mov	r4, r0
9001dab4:	2104      	movs	r1, #4
9001dab6:	f009 fade 	bl	90027076 <_ZdlPvj>
9001daba:	4620      	mov	r0, r4
9001dabc:	bd10      	pop	{r4, pc}

9001dabe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
9001dabe:	b510      	push	{r4, lr}
9001dac0:	4604      	mov	r4, r0
9001dac2:	2104      	movs	r1, #4
9001dac4:	f009 fad7 	bl	90027076 <_ZdlPvj>
9001dac8:	4620      	mov	r0, r4
9001daca:	bd10      	pop	{r4, pc}

9001dacc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
9001dacc:	b510      	push	{r4, lr}
9001dace:	4604      	mov	r4, r0
9001dad0:	2104      	movs	r1, #4
9001dad2:	f009 fad0 	bl	90027076 <_ZdlPvj>
9001dad6:	4620      	mov	r0, r4
9001dad8:	bd10      	pop	{r4, pc}

9001dada <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
9001dada:	b510      	push	{r4, lr}
9001dadc:	4604      	mov	r4, r0
9001dade:	2104      	movs	r1, #4
9001dae0:	f009 fac9 	bl	90027076 <_ZdlPvj>
9001dae4:	4620      	mov	r0, r4
9001dae6:	bd10      	pop	{r4, pc}

9001dae8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
9001dae8:	b510      	push	{r4, lr}
9001daea:	4604      	mov	r4, r0
9001daec:	2104      	movs	r1, #4
9001daee:	f009 fac2 	bl	90027076 <_ZdlPvj>
9001daf2:	4620      	mov	r0, r4
9001daf4:	bd10      	pop	{r4, pc}

9001daf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
9001daf6:	b510      	push	{r4, lr}
9001daf8:	4604      	mov	r4, r0
9001dafa:	2104      	movs	r1, #4
9001dafc:	f009 fabb 	bl	90027076 <_ZdlPvj>
9001db00:	4620      	mov	r0, r4
9001db02:	bd10      	pop	{r4, pc}

9001db04 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
9001db04:	b510      	push	{r4, lr}
9001db06:	4604      	mov	r4, r0
9001db08:	2104      	movs	r1, #4
9001db0a:	f009 fab4 	bl	90027076 <_ZdlPvj>
9001db0e:	4620      	mov	r0, r4
9001db10:	bd10      	pop	{r4, pc}

9001db12 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
9001db12:	b510      	push	{r4, lr}
9001db14:	4604      	mov	r4, r0
9001db16:	2104      	movs	r1, #4
9001db18:	f009 faad 	bl	90027076 <_ZdlPvj>
9001db1c:	4620      	mov	r0, r4
9001db1e:	bd10      	pop	{r4, pc}

9001db20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
9001db20:	b510      	push	{r4, lr}
9001db22:	4604      	mov	r4, r0
9001db24:	2104      	movs	r1, #4
9001db26:	f009 faa6 	bl	90027076 <_ZdlPvj>
9001db2a:	4620      	mov	r0, r4
9001db2c:	bd10      	pop	{r4, pc}

9001db2e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
9001db2e:	b510      	push	{r4, lr}
9001db30:	4604      	mov	r4, r0
9001db32:	2104      	movs	r1, #4
9001db34:	f009 fa9f 	bl	90027076 <_ZdlPvj>
9001db38:	4620      	mov	r0, r4
9001db3a:	bd10      	pop	{r4, pc}

9001db3c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
9001db3c:	b510      	push	{r4, lr}
9001db3e:	4604      	mov	r4, r0
9001db40:	2104      	movs	r1, #4
9001db42:	f009 fa98 	bl	90027076 <_ZdlPvj>
9001db46:	4620      	mov	r0, r4
9001db48:	bd10      	pop	{r4, pc}

9001db4a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
9001db4a:	b510      	push	{r4, lr}
9001db4c:	4604      	mov	r4, r0
9001db4e:	2104      	movs	r1, #4
9001db50:	f009 fa91 	bl	90027076 <_ZdlPvj>
9001db54:	4620      	mov	r0, r4
9001db56:	bd10      	pop	{r4, pc}

9001db58 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
9001db58:	b510      	push	{r4, lr}
9001db5a:	4604      	mov	r4, r0
9001db5c:	2104      	movs	r1, #4
9001db5e:	f009 fa8a 	bl	90027076 <_ZdlPvj>
9001db62:	4620      	mov	r0, r4
9001db64:	bd10      	pop	{r4, pc}

9001db66 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
9001db66:	b510      	push	{r4, lr}
9001db68:	4604      	mov	r4, r0
9001db6a:	2104      	movs	r1, #4
9001db6c:	f009 fa83 	bl	90027076 <_ZdlPvj>
9001db70:	4620      	mov	r0, r4
9001db72:	bd10      	pop	{r4, pc}

9001db74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
9001db74:	b510      	push	{r4, lr}
9001db76:	4604      	mov	r4, r0
9001db78:	2104      	movs	r1, #4
9001db7a:	f009 fa7c 	bl	90027076 <_ZdlPvj>
9001db7e:	4620      	mov	r0, r4
9001db80:	bd10      	pop	{r4, pc}

9001db82 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
9001db82:	b510      	push	{r4, lr}
9001db84:	4604      	mov	r4, r0
9001db86:	2104      	movs	r1, #4
9001db88:	f009 fa75 	bl	90027076 <_ZdlPvj>
9001db8c:	4620      	mov	r0, r4
9001db8e:	bd10      	pop	{r4, pc}

9001db90 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
9001db90:	b510      	push	{r4, lr}
9001db92:	4604      	mov	r4, r0
9001db94:	2104      	movs	r1, #4
9001db96:	f009 fa6e 	bl	90027076 <_ZdlPvj>
9001db9a:	4620      	mov	r0, r4
9001db9c:	bd10      	pop	{r4, pc}

9001db9e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
9001db9e:	b510      	push	{r4, lr}
9001dba0:	4604      	mov	r4, r0
9001dba2:	2104      	movs	r1, #4
9001dba4:	f009 fa67 	bl	90027076 <_ZdlPvj>
9001dba8:	4620      	mov	r0, r4
9001dbaa:	bd10      	pop	{r4, pc}

9001dbac <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
9001dbac:	b510      	push	{r4, lr}
9001dbae:	4604      	mov	r4, r0
9001dbb0:	2104      	movs	r1, #4
9001dbb2:	f009 fa60 	bl	90027076 <_ZdlPvj>
9001dbb6:	4620      	mov	r0, r4
9001dbb8:	bd10      	pop	{r4, pc}

9001dbba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
9001dbba:	b510      	push	{r4, lr}
9001dbbc:	4604      	mov	r4, r0
9001dbbe:	2104      	movs	r1, #4
9001dbc0:	f009 fa59 	bl	90027076 <_ZdlPvj>
9001dbc4:	4620      	mov	r0, r4
9001dbc6:	bd10      	pop	{r4, pc}

9001dbc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
9001dbc8:	b510      	push	{r4, lr}
9001dbca:	4604      	mov	r4, r0
9001dbcc:	2104      	movs	r1, #4
9001dbce:	f009 fa52 	bl	90027076 <_ZdlPvj>
9001dbd2:	4620      	mov	r0, r4
9001dbd4:	bd10      	pop	{r4, pc}

9001dbd6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
9001dbd6:	b510      	push	{r4, lr}
9001dbd8:	4604      	mov	r4, r0
9001dbda:	2104      	movs	r1, #4
9001dbdc:	f009 fa4b 	bl	90027076 <_ZdlPvj>
9001dbe0:	4620      	mov	r0, r4
9001dbe2:	bd10      	pop	{r4, pc}

9001dbe4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
9001dbe4:	b510      	push	{r4, lr}
9001dbe6:	4604      	mov	r4, r0
9001dbe8:	2104      	movs	r1, #4
9001dbea:	f009 fa44 	bl	90027076 <_ZdlPvj>
9001dbee:	4620      	mov	r0, r4
9001dbf0:	bd10      	pop	{r4, pc}

9001dbf2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
9001dbf2:	b510      	push	{r4, lr}
9001dbf4:	4604      	mov	r4, r0
9001dbf6:	2104      	movs	r1, #4
9001dbf8:	f009 fa3d 	bl	90027076 <_ZdlPvj>
9001dbfc:	4620      	mov	r0, r4
9001dbfe:	bd10      	pop	{r4, pc}

9001dc00 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
9001dc00:	b510      	push	{r4, lr}
9001dc02:	4604      	mov	r4, r0
9001dc04:	2104      	movs	r1, #4
9001dc06:	f009 fa36 	bl	90027076 <_ZdlPvj>
9001dc0a:	4620      	mov	r0, r4
9001dc0c:	bd10      	pop	{r4, pc}

9001dc0e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
9001dc0e:	b510      	push	{r4, lr}
9001dc10:	4604      	mov	r4, r0
9001dc12:	2104      	movs	r1, #4
9001dc14:	f009 fa2f 	bl	90027076 <_ZdlPvj>
9001dc18:	4620      	mov	r0, r4
9001dc1a:	bd10      	pop	{r4, pc}

9001dc1c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
9001dc1c:	b510      	push	{r4, lr}
9001dc1e:	4604      	mov	r4, r0
9001dc20:	2104      	movs	r1, #4
9001dc22:	f009 fa28 	bl	90027076 <_ZdlPvj>
9001dc26:	4620      	mov	r0, r4
9001dc28:	bd10      	pop	{r4, pc}
	...

9001dc2c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
9001dc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001dc30:	b091      	sub	sp, #68	; 0x44
9001dc32:	469b      	mov	fp, r3
9001dc34:	4616      	mov	r6, r2
9001dc36:	f9b3 2000 	ldrsh.w	r2, [r3]
9001dc3a:	f10d 0828 	add.w	r8, sp, #40	; 0x28
9001dc3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
9001dc42:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
9001dc46:	4604      	mov	r4, r0
9001dc48:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
9001dc4c:	4640      	mov	r0, r8
9001dc4e:	460d      	mov	r5, r1
9001dc50:	4659      	mov	r1, fp
9001dc52:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
9001dc56:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
9001dc5a:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
9001dc5e:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
9001dc62:	f7f4 fde7 	bl	90012834 <_ZN8touchgfx4RectaNERKS0_>
9001dc66:	4631      	mov	r1, r6
9001dc68:	4640      	mov	r0, r8
9001dc6a:	f7f4 fde3 	bl	90012834 <_ZN8touchgfx4RectaNERKS0_>
9001dc6e:	4b74      	ldr	r3, [pc, #464]	; (9001de40 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
9001dc70:	8818      	ldrh	r0, [r3, #0]
9001dc72:	4b74      	ldr	r3, [pc, #464]	; (9001de44 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
9001dc74:	b202      	sxth	r2, r0
9001dc76:	8819      	ldrh	r1, [r3, #0]
9001dc78:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
9001dc7c:	b20e      	sxth	r6, r1
9001dc7e:	2b00      	cmp	r3, #0
9001dc80:	da07      	bge.n	9001dc92 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
9001dc82:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
9001dc86:	4463      	add	r3, ip
9001dc88:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
9001dc8c:	2300      	movs	r3, #0
9001dc8e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
9001dc92:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
9001dc96:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
9001dc9a:	1ad2      	subs	r2, r2, r3
9001dc9c:	4594      	cmp	ip, r2
9001dc9e:	bfc4      	itt	gt
9001dca0:	1ac2      	subgt	r2, r0, r3
9001dca2:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
9001dca6:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001dcaa:	2a00      	cmp	r2, #0
9001dcac:	da07      	bge.n	9001dcbe <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
9001dcae:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
9001dcb2:	4462      	add	r2, ip
9001dcb4:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
9001dcb8:	2200      	movs	r2, #0
9001dcba:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
9001dcbe:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
9001dcc2:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
9001dcc6:	eba6 060a 	sub.w	r6, r6, sl
9001dcca:	42b2      	cmp	r2, r6
9001dccc:	bfc4      	itt	gt
9001dcce:	eba1 020a 	subgt.w	r2, r1, sl
9001dcd2:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
9001dcd6:	4a5c      	ldr	r2, [pc, #368]	; (9001de48 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
9001dcd8:	7812      	ldrb	r2, [r2, #0]
9001dcda:	b9a2      	cbnz	r2, 9001dd06 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
9001dcdc:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
9001dce0:	4286      	cmp	r6, r0
9001dce2:	4640      	mov	r0, r8
9001dce4:	9303      	str	r3, [sp, #12]
9001dce6:	bf14      	ite	ne
9001dce8:	2600      	movne	r6, #0
9001dcea:	2601      	moveq	r6, #1
9001dcec:	f7f4 fde5 	bl	900128ba <_ZNK8touchgfx4Rect7isEmptyEv>
9001dcf0:	9b03      	ldr	r3, [sp, #12]
9001dcf2:	b160      	cbz	r0, 9001dd0e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
9001dcf4:	2300      	movs	r3, #0
9001dcf6:	8023      	strh	r3, [r4, #0]
9001dcf8:	8063      	strh	r3, [r4, #2]
9001dcfa:	80a3      	strh	r3, [r4, #4]
9001dcfc:	4620      	mov	r0, r4
9001dcfe:	80e3      	strh	r3, [r4, #6]
9001dd00:	b011      	add	sp, #68	; 0x44
9001dd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001dd06:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
9001dd0a:	428e      	cmp	r6, r1
9001dd0c:	e7e9      	b.n	9001dce2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
9001dd0e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
9001dd12:	a90e      	add	r1, sp, #56	; 0x38
9001dd14:	900e      	str	r0, [sp, #56]	; 0x38
9001dd16:	a80c      	add	r0, sp, #48	; 0x30
9001dd18:	9205      	str	r2, [sp, #20]
9001dd1a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
9001dd1e:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
9001dd22:	9206      	str	r2, [sp, #24]
9001dd24:	f8bb 2000 	ldrh.w	r2, [fp]
9001dd28:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
9001dd2c:	1a9b      	subs	r3, r3, r2
9001dd2e:	b21b      	sxth	r3, r3
9001dd30:	9303      	str	r3, [sp, #12]
9001dd32:	f8bb 3002 	ldrh.w	r3, [fp, #2]
9001dd36:	f8df b118 	ldr.w	fp, [pc, #280]	; 9001de50 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
9001dd3a:	ebaa 0a03 	sub.w	sl, sl, r3
9001dd3e:	fa0f f38a 	sxth.w	r3, sl
9001dd42:	9304      	str	r3, [sp, #16]
9001dd44:	9b03      	ldr	r3, [sp, #12]
9001dd46:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
9001dd4a:	9b04      	ldr	r3, [sp, #16]
9001dd4c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001dd50:	9b05      	ldr	r3, [sp, #20]
9001dd52:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
9001dd56:	9b06      	ldr	r3, [sp, #24]
9001dd58:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
9001dd5c:	f7f9 fdfa 	bl	90017954 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001dd60:	4640      	mov	r0, r8
9001dd62:	f7f9 fdcf 	bl	90017904 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001dd66:	a80e      	add	r0, sp, #56	; 0x38
9001dd68:	f7f9 fdcc 	bl	90017904 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001dd6c:	4b37      	ldr	r3, [pc, #220]	; (9001de4c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
9001dd6e:	4628      	mov	r0, r5
9001dd70:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
9001dd74:	881b      	ldrh	r3, [r3, #0]
9001dd76:	9307      	str	r3, [sp, #28]
9001dd78:	682b      	ldr	r3, [r5, #0]
9001dd7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001dd7c:	4798      	blx	r3
9001dd7e:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
9001dd82:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
9001dd86:	4681      	mov	r9, r0
9001dd88:	f8db 0000 	ldr.w	r0, [fp]
9001dd8c:	fb1a 3305 	smlabb	r3, sl, r5, r3
9001dd90:	9d1a      	ldr	r5, [sp, #104]	; 0x68
9001dd92:	eb05 0543 	add.w	r5, r5, r3, lsl #1
9001dd96:	6803      	ldr	r3, [r0, #0]
9001dd98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001dd9a:	4798      	blx	r3
9001dd9c:	4607      	mov	r7, r0
9001dd9e:	f8db 0000 	ldr.w	r0, [fp]
9001dda2:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
9001dda6:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001ddaa:	6803      	ldr	r3, [r0, #0]
9001ddac:	9109      	str	r1, [sp, #36]	; 0x24
9001ddae:	9208      	str	r2, [sp, #32]
9001ddb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001ddb2:	4798      	blx	r3
9001ddb4:	f010 0f01 	tst.w	r0, #1
9001ddb8:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9001ddbc:	d012      	beq.n	9001dde4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
9001ddbe:	f8db 0000 	ldr.w	r0, [fp]
9001ddc2:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
9001ddc6:	6803      	ldr	r3, [r0, #0]
9001ddc8:	9200      	str	r2, [sp, #0]
9001ddca:	6ede      	ldr	r6, [r3, #108]	; 0x6c
9001ddcc:	462b      	mov	r3, r5
9001ddce:	e898 0006 	ldmia.w	r8, {r1, r2}
9001ddd2:	47b0      	blx	r6
9001ddd4:	9b03      	ldr	r3, [sp, #12]
9001ddd6:	8023      	strh	r3, [r4, #0]
9001ddd8:	9b04      	ldr	r3, [sp, #16]
9001ddda:	8063      	strh	r3, [r4, #2]
9001dddc:	9b05      	ldr	r3, [sp, #20]
9001ddde:	80a3      	strh	r3, [r4, #4]
9001dde0:	9b06      	ldr	r3, [sp, #24]
9001dde2:	e78b      	b.n	9001dcfc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
9001dde4:	fb09 f202 	mul.w	r2, r9, r2
9001dde8:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
9001ddec:	eb02 0141 	add.w	r1, r2, r1, lsl #1
9001ddf0:	440f      	add	r7, r1
9001ddf2:	b166      	cbz	r6, 9001de0e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
9001ddf4:	9a07      	ldr	r2, [sp, #28]
9001ddf6:	4592      	cmp	sl, r2
9001ddf8:	d109      	bne.n	9001de0e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
9001ddfa:	f8db 0000 	ldr.w	r0, [fp]
9001ddfe:	fb09 f303 	mul.w	r3, r9, r3
9001de02:	4629      	mov	r1, r5
9001de04:	6802      	ldr	r2, [r0, #0]
9001de06:	6b56      	ldr	r6, [r2, #52]	; 0x34
9001de08:	463a      	mov	r2, r7
9001de0a:	47b0      	blx	r6
9001de0c:	e7e2      	b.n	9001ddd4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
9001de0e:	fb0a f303 	mul.w	r3, sl, r3
9001de12:	ea4f 064a 	mov.w	r6, sl, lsl #1
9001de16:	f8df b038 	ldr.w	fp, [pc, #56]	; 9001de50 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
9001de1a:	eb05 0843 	add.w	r8, r5, r3, lsl #1
9001de1e:	4545      	cmp	r5, r8
9001de20:	d2d8      	bcs.n	9001ddd4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
9001de22:	f8db 0000 	ldr.w	r0, [fp]
9001de26:	4629      	mov	r1, r5
9001de28:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001de2c:	4435      	add	r5, r6
9001de2e:	6802      	ldr	r2, [r0, #0]
9001de30:	005b      	lsls	r3, r3, #1
9001de32:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
9001de36:	463a      	mov	r2, r7
9001de38:	47d0      	blx	sl
9001de3a:	444f      	add	r7, r9
9001de3c:	e7ef      	b.n	9001de1e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
9001de3e:	bf00      	nop
9001de40:	24028188 	.word	0x24028188
9001de44:	2402818a 	.word	0x2402818a
9001de48:	2402818c 	.word	0x2402818c
9001de4c:	2402818e 	.word	0x2402818e
9001de50:	24028194 	.word	0x24028194

9001de54 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
9001de54:	b5f0      	push	{r4, r5, r6, r7, lr}
9001de56:	4606      	mov	r6, r0
9001de58:	b087      	sub	sp, #28
9001de5a:	460c      	mov	r4, r1
9001de5c:	4617      	mov	r7, r2
9001de5e:	461d      	mov	r5, r3
9001de60:	b333      	cbz	r3, 9001deb0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001de62:	4608      	mov	r0, r1
9001de64:	f7f4 fd29 	bl	900128ba <_ZNK8touchgfx4Rect7isEmptyEv>
9001de68:	bb10      	cbnz	r0, 9001deb0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001de6a:	6820      	ldr	r0, [r4, #0]
9001de6c:	ab04      	add	r3, sp, #16
9001de6e:	6861      	ldr	r1, [r4, #4]
9001de70:	4c1b      	ldr	r4, [pc, #108]	; (9001dee0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
9001de72:	c303      	stmia	r3!, {r0, r1}
9001de74:	a804      	add	r0, sp, #16
9001de76:	f7f9 fd45 	bl	90017904 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001de7a:	6820      	ldr	r0, [r4, #0]
9001de7c:	6803      	ldr	r3, [r0, #0]
9001de7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001de80:	4798      	blx	r3
9001de82:	2dff      	cmp	r5, #255	; 0xff
9001de84:	d016      	beq.n	9001deb4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
9001de86:	f010 0f08 	tst.w	r0, #8
9001de8a:	6820      	ldr	r0, [r4, #0]
9001de8c:	d015      	beq.n	9001deba <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
9001de8e:	2400      	movs	r4, #0
9001de90:	6801      	ldr	r1, [r0, #0]
9001de92:	f8bd 3012 	ldrh.w	r3, [sp, #18]
9001de96:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001de9a:	e9cd 5402 	strd	r5, r4, [sp, #8]
9001de9e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
9001dea2:	9401      	str	r4, [sp, #4]
9001dea4:	f8bd 4014 	ldrh.w	r4, [sp, #20]
9001dea8:	9400      	str	r4, [sp, #0]
9001deaa:	6e0c      	ldr	r4, [r1, #96]	; 0x60
9001deac:	4639      	mov	r1, r7
9001deae:	47a0      	blx	r4
9001deb0:	b007      	add	sp, #28
9001deb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001deb4:	f010 0f02 	tst.w	r0, #2
9001deb8:	e7e7      	b.n	9001de8a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
9001deba:	6803      	ldr	r3, [r0, #0]
9001debc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001debe:	4798      	blx	r3
9001dec0:	4b08      	ldr	r3, [pc, #32]	; (9001dee4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
9001dec2:	4601      	mov	r1, r0
9001dec4:	4630      	mov	r0, r6
9001dec6:	881a      	ldrh	r2, [r3, #0]
9001dec8:	6833      	ldr	r3, [r6, #0]
9001deca:	e9cd 7500 	strd	r7, r5, [sp]
9001dece:	6a5d      	ldr	r5, [r3, #36]	; 0x24
9001ded0:	ab04      	add	r3, sp, #16
9001ded2:	47a8      	blx	r5
9001ded4:	6820      	ldr	r0, [r4, #0]
9001ded6:	6803      	ldr	r3, [r0, #0]
9001ded8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001deda:	4798      	blx	r3
9001dedc:	e7e8      	b.n	9001deb0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001dede:	bf00      	nop
9001dee0:	24028194 	.word	0x24028194
9001dee4:	2402818e 	.word	0x2402818e

9001dee8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
9001dee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001deec:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
9001def0:	4688      	mov	r8, r1
9001def2:	4614      	mov	r4, r2
9001def4:	461d      	mov	r5, r3
9001def6:	9e08      	ldr	r6, [sp, #32]
9001def8:	2f00      	cmp	r7, #0
9001defa:	f000 80ab 	beq.w	9001e054 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001defe:	4618      	mov	r0, r3
9001df00:	f7f4 fcdb 	bl	900128ba <_ZNK8touchgfx4Rect7isEmptyEv>
9001df04:	2800      	cmp	r0, #0
9001df06:	f040 80a5 	bne.w	9001e054 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001df0a:	f9b5 1000 	ldrsh.w	r1, [r5]
9001df0e:	2fff      	cmp	r7, #255	; 0xff
9001df10:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
9001df14:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
9001df18:	fb04 1303 	mla	r3, r4, r3, r1
9001df1c:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
9001df20:	eba4 0200 	sub.w	r2, r4, r0
9001df24:	eb08 0143 	add.w	r1, r8, r3, lsl #1
9001df28:	fb04 f505 	mul.w	r5, r4, r5
9001df2c:	ea4f 2816 	mov.w	r8, r6, lsr #8
9001df30:	eb01 0545 	add.w	r5, r1, r5, lsl #1
9001df34:	d04a      	beq.n	9001dfcc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
9001df36:	b2bc      	uxth	r4, r7
9001df38:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
9001df3c:	f3c6 4e07 	ubfx	lr, r6, #16, #8
9001df40:	fa5f f788 	uxtb.w	r7, r8
9001df44:	b2f3      	uxtb	r3, r6
9001df46:	0040      	lsls	r0, r0, #1
9001df48:	fb0e fe04 	mul.w	lr, lr, r4
9001df4c:	4367      	muls	r7, r4
9001df4e:	ea4f 0842 	mov.w	r8, r2, lsl #1
9001df52:	4363      	muls	r3, r4
9001df54:	fa1f fc8c 	uxth.w	ip, ip
9001df58:	42a9      	cmp	r1, r5
9001df5a:	d27b      	bcs.n	9001e054 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001df5c:	eb01 0900 	add.w	r9, r1, r0
9001df60:	4549      	cmp	r1, r9
9001df62:	d231      	bcs.n	9001dfc8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
9001df64:	880a      	ldrh	r2, [r1, #0]
9001df66:	1214      	asrs	r4, r2, #8
9001df68:	10d6      	asrs	r6, r2, #3
9001df6a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
9001df6e:	00d2      	lsls	r2, r2, #3
9001df70:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001df74:	b2d2      	uxtb	r2, r2
9001df76:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
9001df7a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
9001df7e:	fb14 f40c 	smulbb	r4, r4, ip
9001df82:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
9001df86:	fb12 f20c 	smulbb	r2, r2, ip
9001df8a:	fb16 f60c 	smulbb	r6, r6, ip
9001df8e:	4474      	add	r4, lr
9001df90:	441a      	add	r2, r3
9001df92:	b2a4      	uxth	r4, r4
9001df94:	443e      	add	r6, r7
9001df96:	b292      	uxth	r2, r2
9001df98:	f104 0a01 	add.w	sl, r4, #1
9001df9c:	b2b6      	uxth	r6, r6
9001df9e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
9001dfa2:	f102 0a01 	add.w	sl, r2, #1
9001dfa6:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
9001dfaa:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
9001dfae:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001dfb2:	4322      	orrs	r2, r4
9001dfb4:	1c74      	adds	r4, r6, #1
9001dfb6:	eb04 2616 	add.w	r6, r4, r6, lsr #8
9001dfba:	0976      	lsrs	r6, r6, #5
9001dfbc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001dfc0:	4332      	orrs	r2, r6
9001dfc2:	f821 2b02 	strh.w	r2, [r1], #2
9001dfc6:	e7cb      	b.n	9001df60 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
9001dfc8:	4441      	add	r1, r8
9001dfca:	e7c5      	b.n	9001df58 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
9001dfcc:	0973      	lsrs	r3, r6, #5
9001dfce:	4f22      	ldr	r7, [pc, #136]	; (9001e058 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
9001dfd0:	f3c6 06c4 	ubfx	r6, r6, #3, #5
9001dfd4:	ea08 0707 	and.w	r7, r8, r7
9001dfd8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001dfdc:	433b      	orrs	r3, r7
9001dfde:	07e7      	lsls	r7, r4, #31
9001dfe0:	ea43 0306 	orr.w	r3, r3, r6
9001dfe4:	b29b      	uxth	r3, r3
9001dfe6:	d50b      	bpl.n	9001e000 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
9001dfe8:	0040      	lsls	r0, r0, #1
9001dfea:	0052      	lsls	r2, r2, #1
9001dfec:	42a9      	cmp	r1, r5
9001dfee:	d231      	bcs.n	9001e054 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001dff0:	180c      	adds	r4, r1, r0
9001dff2:	42a1      	cmp	r1, r4
9001dff4:	d202      	bcs.n	9001dffc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
9001dff6:	f821 3b02 	strh.w	r3, [r1], #2
9001dffa:	e7fa      	b.n	9001dff2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
9001dffc:	4411      	add	r1, r2
9001dffe:	e7f5      	b.n	9001dfec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
9001e000:	078e      	lsls	r6, r1, #30
9001e002:	d008      	beq.n	9001e016 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
9001e004:	0066      	lsls	r6, r4, #1
9001e006:	460a      	mov	r2, r1
9001e008:	42aa      	cmp	r2, r5
9001e00a:	d202      	bcs.n	9001e012 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
9001e00c:	8013      	strh	r3, [r2, #0]
9001e00e:	4432      	add	r2, r6
9001e010:	e7fa      	b.n	9001e008 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
9001e012:	3102      	adds	r1, #2
9001e014:	3801      	subs	r0, #1
9001e016:	07c2      	lsls	r2, r0, #31
9001e018:	d50b      	bpl.n	9001e032 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
9001e01a:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
9001e01e:	0066      	lsls	r6, r4, #1
9001e020:	3a01      	subs	r2, #1
9001e022:	eb01 0242 	add.w	r2, r1, r2, lsl #1
9001e026:	42aa      	cmp	r2, r5
9001e028:	d202      	bcs.n	9001e030 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
9001e02a:	8013      	strh	r3, [r2, #0]
9001e02c:	4432      	add	r2, r6
9001e02e:	e7fa      	b.n	9001e026 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
9001e030:	3801      	subs	r0, #1
9001e032:	b178      	cbz	r0, 9001e054 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001e034:	1040      	asrs	r0, r0, #1
9001e036:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
9001e03a:	0080      	lsls	r0, r0, #2
9001e03c:	0064      	lsls	r4, r4, #1
9001e03e:	42a9      	cmp	r1, r5
9001e040:	d208      	bcs.n	9001e054 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001e042:	180e      	adds	r6, r1, r0
9001e044:	460a      	mov	r2, r1
9001e046:	42b2      	cmp	r2, r6
9001e048:	d202      	bcs.n	9001e050 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
9001e04a:	f842 3b04 	str.w	r3, [r2], #4
9001e04e:	e7fa      	b.n	9001e046 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
9001e050:	4421      	add	r1, r4
9001e052:	e7f4      	b.n	9001e03e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
9001e054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001e058:	00fff800 	.word	0x00fff800

9001e05c <_ZN8touchgfx8LCD16bppC1Ev>:
9001e05c:	2200      	movs	r2, #0
9001e05e:	4910      	ldr	r1, [pc, #64]	; (9001e0a0 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
9001e060:	6042      	str	r2, [r0, #4]
9001e062:	6001      	str	r1, [r0, #0]
9001e064:	e9c0 2202 	strd	r2, r2, [r0, #8]
9001e068:	e9c0 2204 	strd	r2, r2, [r0, #16]
9001e06c:	e9c0 2206 	strd	r2, r2, [r0, #24]
9001e070:	e9c0 2208 	strd	r2, r2, [r0, #32]
9001e074:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
9001e078:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
9001e07c:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
9001e080:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
9001e084:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
9001e088:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
9001e08c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
9001e090:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
9001e094:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
9001e098:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
9001e09c:	4770      	bx	lr
9001e09e:	bf00      	nop
9001e0a0:	9002c260 	.word	0x9002c260

9001e0a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
9001e0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e0a8:	b08d      	sub	sp, #52	; 0x34
9001e0aa:	460d      	mov	r5, r1
9001e0ac:	4604      	mov	r4, r0
9001e0ae:	4699      	mov	r9, r3
9001e0b0:	6808      	ldr	r0, [r1, #0]
9001e0b2:	ab08      	add	r3, sp, #32
9001e0b4:	6849      	ldr	r1, [r1, #4]
9001e0b6:	c303      	stmia	r3!, {r0, r1}
9001e0b8:	6810      	ldr	r0, [r2, #0]
9001e0ba:	ab0a      	add	r3, sp, #40	; 0x28
9001e0bc:	6851      	ldr	r1, [r2, #4]
9001e0be:	c303      	stmia	r3!, {r0, r1}
9001e0c0:	a808      	add	r0, sp, #32
9001e0c2:	f7f9 fc1f 	bl	90017904 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e0c6:	4629      	mov	r1, r5
9001e0c8:	a80a      	add	r0, sp, #40	; 0x28
9001e0ca:	4d67      	ldr	r5, [pc, #412]	; (9001e268 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
9001e0cc:	f7f9 fc42 	bl	90017954 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001e0d0:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
9001e0d4:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
9001e0d8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
9001e0dc:	6828      	ldr	r0, [r5, #0]
9001e0de:	fb11 2103 	smlabb	r1, r1, r3, r2
9001e0e2:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
9001e0e6:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
9001e0ea:	eb04 0481 	add.w	r4, r4, r1, lsl #2
9001e0ee:	f8bd 1020 	ldrh.w	r1, [sp, #32]
9001e0f2:	440a      	add	r2, r1
9001e0f4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
9001e0f8:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
9001e0fc:	4413      	add	r3, r2
9001e0fe:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
9001e102:	6803      	ldr	r3, [r0, #0]
9001e104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001e106:	4798      	blx	r3
9001e108:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001e10c:	d119      	bne.n	9001e142 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
9001e10e:	f010 0f20 	tst.w	r0, #32
9001e112:	6828      	ldr	r0, [r5, #0]
9001e114:	d018      	beq.n	9001e148 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
9001e116:	2500      	movs	r5, #0
9001e118:	6801      	ldr	r1, [r0, #0]
9001e11a:	b2b6      	uxth	r6, r6
9001e11c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
9001e120:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
9001e124:	9601      	str	r6, [sp, #4]
9001e126:	e9cd 9503 	strd	r9, r5, [sp, #12]
9001e12a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
9001e12e:	9502      	str	r5, [sp, #8]
9001e130:	fa1f f588 	uxth.w	r5, r8
9001e134:	9500      	str	r5, [sp, #0]
9001e136:	6d0d      	ldr	r5, [r1, #80]	; 0x50
9001e138:	4621      	mov	r1, r4
9001e13a:	47a8      	blx	r5
9001e13c:	b00d      	add	sp, #52	; 0x34
9001e13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001e142:	f010 0f40 	tst.w	r0, #64	; 0x40
9001e146:	e7e4      	b.n	9001e112 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
9001e148:	6803      	ldr	r3, [r0, #0]
9001e14a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001e14c:	4798      	blx	r3
9001e14e:	4947      	ldr	r1, [pc, #284]	; (9001e26c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
9001e150:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001e154:	880b      	ldrh	r3, [r1, #0]
9001e156:	468a      	mov	sl, r1
9001e158:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
9001e15c:	fb03 5202 	mla	r2, r3, r2, r5
9001e160:	4373      	muls	r3, r6
9001e162:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001e166:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001e16a:	9307      	str	r3, [sp, #28]
9001e16c:	ea4f 0348 	mov.w	r3, r8, lsl #1
9001e170:	9306      	str	r3, [sp, #24]
9001e172:	9b07      	ldr	r3, [sp, #28]
9001e174:	4298      	cmp	r0, r3
9001e176:	d270      	bcs.n	9001e25a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
9001e178:	9b06      	ldr	r3, [sp, #24]
9001e17a:	4621      	mov	r1, r4
9001e17c:	eb00 0b03 	add.w	fp, r0, r3
9001e180:	4558      	cmp	r0, fp
9001e182:	d25d      	bcs.n	9001e240 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
9001e184:	f851 4b04 	ldr.w	r4, [r1], #4
9001e188:	0e23      	lsrs	r3, r4, #24
9001e18a:	d014      	beq.n	9001e1b6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
9001e18c:	2bff      	cmp	r3, #255	; 0xff
9001e18e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
9001e192:	d112      	bne.n	9001e1ba <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
9001e194:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001e198:	d10f      	bne.n	9001e1ba <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
9001e19a:	0963      	lsrs	r3, r4, #5
9001e19c:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
9001e1a0:	f3c4 04c4 	ubfx	r4, r4, #3, #5
9001e1a4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e1a8:	f02c 0c07 	bic.w	ip, ip, #7
9001e1ac:	ea43 0c0c 	orr.w	ip, r3, ip
9001e1b0:	ea4c 0404 	orr.w	r4, ip, r4
9001e1b4:	8004      	strh	r4, [r0, #0]
9001e1b6:	3002      	adds	r0, #2
9001e1b8:	e7e2      	b.n	9001e180 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
9001e1ba:	fb09 f303 	mul.w	r3, r9, r3
9001e1be:	8807      	ldrh	r7, [r0, #0]
9001e1c0:	f3c4 4e07 	ubfx	lr, r4, #16, #8
9001e1c4:	fa5f fc8c 	uxtb.w	ip, ip
9001e1c8:	1c5a      	adds	r2, r3, #1
9001e1ca:	123e      	asrs	r6, r7, #8
9001e1cc:	10fd      	asrs	r5, r7, #3
9001e1ce:	eb02 2223 	add.w	r2, r2, r3, asr #8
9001e1d2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001e1d6:	00ff      	lsls	r7, r7, #3
9001e1d8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001e1dc:	1212      	asrs	r2, r2, #8
9001e1de:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
9001e1e2:	b293      	uxth	r3, r2
9001e1e4:	43d2      	mvns	r2, r2
9001e1e6:	b2ff      	uxtb	r7, r7
9001e1e8:	fb1e fe03 	smulbb	lr, lr, r3
9001e1ec:	b2d2      	uxtb	r2, r2
9001e1ee:	fb1c fc03 	smulbb	ip, ip, r3
9001e1f2:	b2e4      	uxtb	r4, r4
9001e1f4:	fb06 e602 	mla	r6, r6, r2, lr
9001e1f8:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
9001e1fc:	fb14 f403 	smulbb	r4, r4, r3
9001e200:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
9001e204:	b2b6      	uxth	r6, r6
9001e206:	fb05 c502 	mla	r5, r5, r2, ip
9001e20a:	fb07 4702 	mla	r7, r7, r2, r4
9001e20e:	f106 0e01 	add.w	lr, r6, #1
9001e212:	b2ad      	uxth	r5, r5
9001e214:	b2bf      	uxth	r7, r7
9001e216:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
9001e21a:	f105 0c01 	add.w	ip, r5, #1
9001e21e:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
9001e222:	1c7e      	adds	r6, r7, #1
9001e224:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001e228:	eb06 2617 	add.w	r6, r6, r7, lsr #8
9001e22c:	096d      	lsrs	r5, r5, #5
9001e22e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001e232:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001e236:	ea46 060e 	orr.w	r6, r6, lr
9001e23a:	432e      	orrs	r6, r5
9001e23c:	8006      	strh	r6, [r0, #0]
9001e23e:	e7ba      	b.n	9001e1b6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
9001e240:	f8ba 3000 	ldrh.w	r3, [sl]
9001e244:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
9001e248:	eba3 0308 	sub.w	r3, r3, r8
9001e24c:	eba4 0408 	sub.w	r4, r4, r8
9001e250:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001e254:	eb01 0484 	add.w	r4, r1, r4, lsl #2
9001e258:	e78b      	b.n	9001e172 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
9001e25a:	4b03      	ldr	r3, [pc, #12]	; (9001e268 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
9001e25c:	6818      	ldr	r0, [r3, #0]
9001e25e:	6803      	ldr	r3, [r0, #0]
9001e260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001e262:	4798      	blx	r3
9001e264:	e76a      	b.n	9001e13c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
9001e266:	bf00      	nop
9001e268:	24028194 	.word	0x24028194
9001e26c:	2402818e 	.word	0x2402818e

9001e270 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
9001e270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001e274:	b085      	sub	sp, #20
9001e276:	6810      	ldr	r0, [r2, #0]
9001e278:	460c      	mov	r4, r1
9001e27a:	6851      	ldr	r1, [r2, #4]
9001e27c:	466d      	mov	r5, sp
9001e27e:	4616      	mov	r6, r2
9001e280:	c503      	stmia	r5!, {r0, r1}
9001e282:	6818      	ldr	r0, [r3, #0]
9001e284:	6859      	ldr	r1, [r3, #4]
9001e286:	c503      	stmia	r5!, {r0, r1}
9001e288:	4668      	mov	r0, sp
9001e28a:	4d2e      	ldr	r5, [pc, #184]	; (9001e344 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
9001e28c:	f7f9 fb3a 	bl	90017904 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e290:	4631      	mov	r1, r6
9001e292:	a802      	add	r0, sp, #8
9001e294:	4e2c      	ldr	r6, [pc, #176]	; (9001e348 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
9001e296:	f7f9 fb5d 	bl	90017954 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001e29a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
9001e29e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
9001e2a2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
9001e2a6:	6828      	ldr	r0, [r5, #0]
9001e2a8:	fb11 2103 	smlabb	r1, r1, r3, r2
9001e2ac:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
9001e2b0:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
9001e2b4:	eb04 0481 	add.w	r4, r4, r1, lsl #2
9001e2b8:	f8bd 1000 	ldrh.w	r1, [sp]
9001e2bc:	440a      	add	r2, r1
9001e2be:	f8ad 2008 	strh.w	r2, [sp, #8]
9001e2c2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
9001e2c6:	4413      	add	r3, r2
9001e2c8:	f8ad 300a 	strh.w	r3, [sp, #10]
9001e2cc:	6803      	ldr	r3, [r0, #0]
9001e2ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001e2d0:	4798      	blx	r3
9001e2d2:	8833      	ldrh	r3, [r6, #0]
9001e2d4:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
9001e2d8:	ea4f 0c47 	mov.w	ip, r7, lsl #1
9001e2dc:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
9001e2e0:	f8df e068 	ldr.w	lr, [pc, #104]	; 9001e34c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
9001e2e4:	fb03 1202 	mla	r2, r3, r2, r1
9001e2e8:	fb08 f303 	mul.w	r3, r8, r3
9001e2ec:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001e2f0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001e2f4:	4298      	cmp	r0, r3
9001e2f6:	d21d      	bcs.n	9001e334 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
9001e2f8:	eb00 080c 	add.w	r8, r0, ip
9001e2fc:	4540      	cmp	r0, r8
9001e2fe:	d20f      	bcs.n	9001e320 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
9001e300:	f854 1b04 	ldr.w	r1, [r4], #4
9001e304:	ea4f 1951 	mov.w	r9, r1, lsr #5
9001e308:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
9001e30c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
9001e310:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001e314:	ea42 0209 	orr.w	r2, r2, r9
9001e318:	430a      	orrs	r2, r1
9001e31a:	f820 2b02 	strh.w	r2, [r0], #2
9001e31e:	e7ed      	b.n	9001e2fc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
9001e320:	8832      	ldrh	r2, [r6, #0]
9001e322:	1bd2      	subs	r2, r2, r7
9001e324:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001e328:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
9001e32c:	1bd2      	subs	r2, r2, r7
9001e32e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
9001e332:	e7df      	b.n	9001e2f4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
9001e334:	6828      	ldr	r0, [r5, #0]
9001e336:	6803      	ldr	r3, [r0, #0]
9001e338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001e33a:	4798      	blx	r3
9001e33c:	b005      	add	sp, #20
9001e33e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001e342:	bf00      	nop
9001e344:	24028194 	.word	0x24028194
9001e348:	2402818e 	.word	0x2402818e
9001e34c:	fffff800 	.word	0xfffff800

9001e350 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
9001e350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001e354:	b08e      	sub	sp, #56	; 0x38
9001e356:	460e      	mov	r6, r1
9001e358:	4604      	mov	r4, r0
9001e35a:	461d      	mov	r5, r3
9001e35c:	6808      	ldr	r0, [r1, #0]
9001e35e:	ab0a      	add	r3, sp, #40	; 0x28
9001e360:	6849      	ldr	r1, [r1, #4]
9001e362:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 9001e538 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
9001e366:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 9001e53c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
9001e36a:	c303      	stmia	r3!, {r0, r1}
9001e36c:	6810      	ldr	r0, [r2, #0]
9001e36e:	ab0c      	add	r3, sp, #48	; 0x30
9001e370:	6851      	ldr	r1, [r2, #4]
9001e372:	c303      	stmia	r3!, {r0, r1}
9001e374:	a80a      	add	r0, sp, #40	; 0x28
9001e376:	f7f9 fac5 	bl	90017904 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e37a:	4631      	mov	r1, r6
9001e37c:	a80c      	add	r0, sp, #48	; 0x30
9001e37e:	f7f9 fae9 	bl	90017954 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001e382:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
9001e386:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
9001e38a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
9001e38e:	f8d8 0000 	ldr.w	r0, [r8]
9001e392:	fb11 2103 	smlabb	r1, r1, r3, r2
9001e396:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
9001e39a:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
9001e39e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9001e3a2:	440c      	add	r4, r1
9001e3a4:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
9001e3a8:	440a      	add	r2, r1
9001e3aa:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
9001e3ae:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
9001e3b2:	4413      	add	r3, r2
9001e3b4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001e3b8:	6803      	ldr	r3, [r0, #0]
9001e3ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001e3bc:	4798      	blx	r3
9001e3be:	2dff      	cmp	r5, #255	; 0xff
9001e3c0:	d124      	bne.n	9001e40c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
9001e3c2:	f010 0f01 	tst.w	r0, #1
9001e3c6:	f8d8 0000 	ldr.w	r0, [r8]
9001e3ca:	d022      	beq.n	9001e412 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
9001e3cc:	2100      	movs	r1, #0
9001e3ce:	f04f 0e01 	mov.w	lr, #1
9001e3d2:	f8d0 c000 	ldr.w	ip, [r0]
9001e3d6:	b2b6      	uxth	r6, r6
9001e3d8:	f8cd e018 	str.w	lr, [sp, #24]
9001e3dc:	b2bf      	uxth	r7, r7
9001e3de:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
9001e3e2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
9001e3e6:	e9cd 1107 	strd	r1, r1, [sp, #28]
9001e3ea:	f8b9 e000 	ldrh.w	lr, [r9]
9001e3ee:	9503      	str	r5, [sp, #12]
9001e3f0:	9601      	str	r6, [sp, #4]
9001e3f2:	9700      	str	r7, [sp, #0]
9001e3f4:	e9cd 1e04 	strd	r1, lr, [sp, #16]
9001e3f8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
9001e3fc:	9102      	str	r1, [sp, #8]
9001e3fe:	4621      	mov	r1, r4
9001e400:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
9001e404:	47a8      	blx	r5
9001e406:	b00e      	add	sp, #56	; 0x38
9001e408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001e40c:	f010 0f04 	tst.w	r0, #4
9001e410:	e7d9      	b.n	9001e3c6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
9001e412:	6803      	ldr	r3, [r0, #0]
9001e414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001e416:	4798      	blx	r3
9001e418:	f8b9 3000 	ldrh.w	r3, [r9]
9001e41c:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
9001e420:	ea4f 0e47 	mov.w	lr, r7, lsl #1
9001e424:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
9001e428:	435e      	muls	r6, r3
9001e42a:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
9001e42e:	2dff      	cmp	r5, #255	; 0xff
9001e430:	fb03 1202 	mla	r2, r3, r2, r1
9001e434:	ebac 0c07 	sub.w	ip, ip, r7
9001e438:	eba3 0707 	sub.w	r7, r3, r7
9001e43c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001e440:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
9001e444:	eb00 0646 	add.w	r6, r0, r6, lsl #1
9001e448:	ea4f 0747 	mov.w	r7, r7, lsl #1
9001e44c:	d049      	beq.n	9001e4e2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
9001e44e:	43eb      	mvns	r3, r5
9001e450:	fa1f f985 	uxth.w	r9, r5
9001e454:	b2db      	uxtb	r3, r3
9001e456:	42b0      	cmp	r0, r6
9001e458:	d266      	bcs.n	9001e528 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
9001e45a:	eb00 0a0e 	add.w	sl, r0, lr
9001e45e:	4550      	cmp	r0, sl
9001e460:	4621      	mov	r1, r4
9001e462:	f104 0403 	add.w	r4, r4, #3
9001e466:	d25b      	bcs.n	9001e520 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
9001e468:	8802      	ldrh	r2, [r0, #0]
9001e46a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
9001e46e:	ea4f 2822 	mov.w	r8, r2, asr #8
9001e472:	fb11 f109 	smulbb	r1, r1, r9
9001e476:	10d5      	asrs	r5, r2, #3
9001e478:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
9001e47c:	00d2      	lsls	r2, r2, #3
9001e47e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001e482:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
9001e486:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
9001e48a:	fb08 1803 	mla	r8, r8, r3, r1
9001e48e:	f814 1c02 	ldrb.w	r1, [r4, #-2]
9001e492:	b2d2      	uxtb	r2, r2
9001e494:	fb11 f109 	smulbb	r1, r1, r9
9001e498:	fa1f f888 	uxth.w	r8, r8
9001e49c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
9001e4a0:	fb05 1503 	mla	r5, r5, r3, r1
9001e4a4:	f814 1c03 	ldrb.w	r1, [r4, #-3]
9001e4a8:	fb11 f109 	smulbb	r1, r1, r9
9001e4ac:	b2ad      	uxth	r5, r5
9001e4ae:	fb02 1203 	mla	r2, r2, r3, r1
9001e4b2:	f108 0101 	add.w	r1, r8, #1
9001e4b6:	b292      	uxth	r2, r2
9001e4b8:	eb01 2818 	add.w	r8, r1, r8, lsr #8
9001e4bc:	1c51      	adds	r1, r2, #1
9001e4be:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
9001e4c2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9001e4c6:	1c69      	adds	r1, r5, #1
9001e4c8:	eb01 2515 	add.w	r5, r1, r5, lsr #8
9001e4cc:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001e4d0:	096d      	lsrs	r5, r5, #5
9001e4d2:	ea42 0208 	orr.w	r2, r2, r8
9001e4d6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001e4da:	432a      	orrs	r2, r5
9001e4dc:	f820 2b02 	strh.w	r2, [r0], #2
9001e4e0:	e7bd      	b.n	9001e45e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
9001e4e2:	4a14      	ldr	r2, [pc, #80]	; (9001e534 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
9001e4e4:	42b0      	cmp	r0, r6
9001e4e6:	d21f      	bcs.n	9001e528 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
9001e4e8:	eb00 050e 	add.w	r5, r0, lr
9001e4ec:	42a8      	cmp	r0, r5
9001e4ee:	4621      	mov	r1, r4
9001e4f0:	f104 0403 	add.w	r4, r4, #3
9001e4f4:	d210      	bcs.n	9001e518 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
9001e4f6:	f814 3c02 	ldrb.w	r3, [r4, #-2]
9001e4fa:	f814 1c01 	ldrb.w	r1, [r4, #-1]
9001e4fe:	00db      	lsls	r3, r3, #3
9001e500:	ea02 2101 	and.w	r1, r2, r1, lsl #8
9001e504:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e508:	430b      	orrs	r3, r1
9001e50a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
9001e50e:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
9001e512:	f820 3b02 	strh.w	r3, [r0], #2
9001e516:	e7e9      	b.n	9001e4ec <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
9001e518:	4438      	add	r0, r7
9001e51a:	eb01 040c 	add.w	r4, r1, ip
9001e51e:	e7e1      	b.n	9001e4e4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
9001e520:	4438      	add	r0, r7
9001e522:	eb01 040c 	add.w	r4, r1, ip
9001e526:	e796      	b.n	9001e456 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
9001e528:	4b03      	ldr	r3, [pc, #12]	; (9001e538 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
9001e52a:	6818      	ldr	r0, [r3, #0]
9001e52c:	6803      	ldr	r3, [r0, #0]
9001e52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001e530:	4798      	blx	r3
9001e532:	e768      	b.n	9001e406 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
9001e534:	fffff800 	.word	0xfffff800
9001e538:	24028194 	.word	0x24028194
9001e53c:	2402818e 	.word	0x2402818e

9001e540 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
9001e540:	b4f0      	push	{r4, r5, r6, r7}
9001e542:	4616      	mov	r6, r2
9001e544:	461c      	mov	r4, r3
9001e546:	460d      	mov	r5, r1
9001e548:	9a04      	ldr	r2, [sp, #16]
9001e54a:	2e01      	cmp	r6, #1
9001e54c:	f89d 3014 	ldrb.w	r3, [sp, #20]
9001e550:	f89d 7018 	ldrb.w	r7, [sp, #24]
9001e554:	d012      	beq.n	9001e57c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
9001e556:	d303      	bcc.n	9001e560 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
9001e558:	2e02      	cmp	r6, #2
9001e55a:	d00a      	beq.n	9001e572 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
9001e55c:	bcf0      	pop	{r4, r5, r6, r7}
9001e55e:	4770      	bx	lr
9001e560:	6805      	ldr	r5, [r0, #0]
9001e562:	e9cd 3704 	strd	r3, r7, [sp, #16]
9001e566:	68ed      	ldr	r5, [r5, #12]
9001e568:	4613      	mov	r3, r2
9001e56a:	4622      	mov	r2, r4
9001e56c:	46ac      	mov	ip, r5
9001e56e:	bcf0      	pop	{r4, r5, r6, r7}
9001e570:	4760      	bx	ip
9001e572:	4621      	mov	r1, r4
9001e574:	4628      	mov	r0, r5
9001e576:	bcf0      	pop	{r4, r5, r6, r7}
9001e578:	f7ff bd94 	b.w	9001e0a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001e57c:	4621      	mov	r1, r4
9001e57e:	4628      	mov	r0, r5
9001e580:	bcf0      	pop	{r4, r5, r6, r7}
9001e582:	f7ff bee5 	b.w	9001e350 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

9001e588 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
9001e588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e58c:	b093      	sub	sp, #76	; 0x4c
9001e58e:	4681      	mov	r9, r0
9001e590:	4688      	mov	r8, r1
9001e592:	6810      	ldr	r0, [r2, #0]
9001e594:	6851      	ldr	r1, [r2, #4]
9001e596:	ac0e      	add	r4, sp, #56	; 0x38
9001e598:	4616      	mov	r6, r2
9001e59a:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
9001e59e:	4f6b      	ldr	r7, [pc, #428]	; (9001e74c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
9001e5a0:	c403      	stmia	r4!, {r0, r1}
9001e5a2:	6818      	ldr	r0, [r3, #0]
9001e5a4:	ac10      	add	r4, sp, #64	; 0x40
9001e5a6:	6859      	ldr	r1, [r3, #4]
9001e5a8:	c403      	stmia	r4!, {r0, r1}
9001e5aa:	a80e      	add	r0, sp, #56	; 0x38
9001e5ac:	f7f9 f9aa 	bl	90017904 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e5b0:	4631      	mov	r1, r6
9001e5b2:	a810      	add	r0, sp, #64	; 0x40
9001e5b4:	4e66      	ldr	r6, [pc, #408]	; (9001e750 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
9001e5b6:	f7f9 f9cd 	bl	90017954 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001e5ba:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
9001e5be:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
9001e5c2:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
9001e5c6:	6830      	ldr	r0, [r6, #0]
9001e5c8:	fb11 2103 	smlabb	r1, r1, r3, r2
9001e5cc:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
9001e5d0:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
9001e5d4:	4489      	add	r9, r1
9001e5d6:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
9001e5da:	440a      	add	r2, r1
9001e5dc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
9001e5e0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
9001e5e4:	4413      	add	r3, r2
9001e5e6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
9001e5ea:	6803      	ldr	r3, [r0, #0]
9001e5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001e5ee:	4798      	blx	r3
9001e5f0:	f010 0f80 	tst.w	r0, #128	; 0x80
9001e5f4:	6830      	ldr	r0, [r6, #0]
9001e5f6:	d01d      	beq.n	9001e634 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
9001e5f8:	2200      	movs	r2, #0
9001e5fa:	6801      	ldr	r1, [r0, #0]
9001e5fc:	b2a4      	uxth	r4, r4
9001e5fe:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
9001e602:	b2ad      	uxth	r5, r5
9001e604:	e9cd 2208 	strd	r2, r2, [sp, #32]
9001e608:	220b      	movs	r2, #11
9001e60a:	9207      	str	r2, [sp, #28]
9001e60c:	883a      	ldrh	r2, [r7, #0]
9001e60e:	9502      	str	r5, [sp, #8]
9001e610:	9206      	str	r2, [sp, #24]
9001e612:	2201      	movs	r2, #1
9001e614:	9401      	str	r4, [sp, #4]
9001e616:	e9cd a204 	strd	sl, r2, [sp, #16]
9001e61a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
9001e61e:	9203      	str	r2, [sp, #12]
9001e620:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
9001e624:	9200      	str	r2, [sp, #0]
9001e626:	4642      	mov	r2, r8
9001e628:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
9001e62a:	4649      	mov	r1, r9
9001e62c:	47a0      	blx	r4
9001e62e:	b013      	add	sp, #76	; 0x4c
9001e630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001e634:	6803      	ldr	r3, [r0, #0]
9001e636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001e638:	4798      	blx	r3
9001e63a:	883b      	ldrh	r3, [r7, #0]
9001e63c:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
9001e640:	f04f 0e04 	mov.w	lr, #4
9001e644:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
9001e648:	435d      	muls	r5, r3
9001e64a:	fb03 1202 	mla	r2, r3, r2, r1
9001e64e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001e652:	eb00 0245 	add.w	r2, r0, r5, lsl #1
9001e656:	920c      	str	r2, [sp, #48]	; 0x30
9001e658:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
9001e65c:	1b12      	subs	r2, r2, r4
9001e65e:	920d      	str	r2, [sp, #52]	; 0x34
9001e660:	0062      	lsls	r2, r4, #1
9001e662:	1b1c      	subs	r4, r3, r4
9001e664:	920a      	str	r2, [sp, #40]	; 0x28
9001e666:	0063      	lsls	r3, r4, #1
9001e668:	930b      	str	r3, [sp, #44]	; 0x2c
9001e66a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001e66c:	4298      	cmp	r0, r3
9001e66e:	d266      	bcs.n	9001e73e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
9001e670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001e672:	eb00 0b03 	add.w	fp, r0, r3
9001e676:	4558      	cmp	r0, fp
9001e678:	d25c      	bcs.n	9001e734 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
9001e67a:	f819 3b01 	ldrb.w	r3, [r9], #1
9001e67e:	fb1e e303 	smlabb	r3, lr, r3, lr
9001e682:	f858 2003 	ldr.w	r2, [r8, r3]
9001e686:	0e11      	lsrs	r1, r2, #24
9001e688:	d012      	beq.n	9001e6b0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
9001e68a:	29ff      	cmp	r1, #255	; 0xff
9001e68c:	ea4f 2712 	mov.w	r7, r2, lsr #8
9001e690:	d110      	bne.n	9001e6b4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
9001e692:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
9001e696:	d10d      	bne.n	9001e6b4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
9001e698:	0953      	lsrs	r3, r2, #5
9001e69a:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
9001e69e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001e6a2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e6a6:	f027 0707 	bic.w	r7, r7, #7
9001e6aa:	431f      	orrs	r7, r3
9001e6ac:	433a      	orrs	r2, r7
9001e6ae:	8002      	strh	r2, [r0, #0]
9001e6b0:	3002      	adds	r0, #2
9001e6b2:	e7e0      	b.n	9001e676 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
9001e6b4:	fb0a f101 	mul.w	r1, sl, r1
9001e6b8:	8806      	ldrh	r6, [r0, #0]
9001e6ba:	f3c2 4c07 	ubfx	ip, r2, #16, #8
9001e6be:	b2d2      	uxtb	r2, r2
9001e6c0:	1c4b      	adds	r3, r1, #1
9001e6c2:	1235      	asrs	r5, r6, #8
9001e6c4:	10f4      	asrs	r4, r6, #3
9001e6c6:	eb03 2321 	add.w	r3, r3, r1, asr #8
9001e6ca:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001e6ce:	00f6      	lsls	r6, r6, #3
9001e6d0:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
9001e6d4:	121b      	asrs	r3, r3, #8
9001e6d6:	b2f6      	uxtb	r6, r6
9001e6d8:	b299      	uxth	r1, r3
9001e6da:	43db      	mvns	r3, r3
9001e6dc:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
9001e6e0:	fb1c fc01 	smulbb	ip, ip, r1
9001e6e4:	b2db      	uxtb	r3, r3
9001e6e6:	fb12 f201 	smulbb	r2, r2, r1
9001e6ea:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
9001e6ee:	fb05 c503 	mla	r5, r5, r3, ip
9001e6f2:	b2ff      	uxtb	r7, r7
9001e6f4:	fb06 2203 	mla	r2, r6, r3, r2
9001e6f8:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
9001e6fc:	fb17 f701 	smulbb	r7, r7, r1
9001e700:	b2ad      	uxth	r5, r5
9001e702:	b292      	uxth	r2, r2
9001e704:	fb04 7403 	mla	r4, r4, r3, r7
9001e708:	f105 0c01 	add.w	ip, r5, #1
9001e70c:	1c57      	adds	r7, r2, #1
9001e70e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001e712:	eb07 2712 	add.w	r7, r7, r2, lsr #8
9001e716:	b2a4      	uxth	r4, r4
9001e718:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001e71c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001e720:	433d      	orrs	r5, r7
9001e722:	1c67      	adds	r7, r4, #1
9001e724:	eb07 2414 	add.w	r4, r7, r4, lsr #8
9001e728:	0964      	lsrs	r4, r4, #5
9001e72a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
9001e72e:	4325      	orrs	r5, r4
9001e730:	8005      	strh	r5, [r0, #0]
9001e732:	e7bd      	b.n	9001e6b0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
9001e734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001e736:	4418      	add	r0, r3
9001e738:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001e73a:	4499      	add	r9, r3
9001e73c:	e795      	b.n	9001e66a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
9001e73e:	4b04      	ldr	r3, [pc, #16]	; (9001e750 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
9001e740:	6818      	ldr	r0, [r3, #0]
9001e742:	6803      	ldr	r3, [r0, #0]
9001e744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001e746:	4798      	blx	r3
9001e748:	e771      	b.n	9001e62e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
9001e74a:	bf00      	nop
9001e74c:	2402818e 	.word	0x2402818e
9001e750:	24028194 	.word	0x24028194

9001e754 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
9001e754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e758:	b087      	sub	sp, #28
9001e75a:	4680      	mov	r8, r0
9001e75c:	460d      	mov	r5, r1
9001e75e:	4614      	mov	r4, r2
9001e760:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
9001e764:	2e00      	cmp	r6, #0
9001e766:	f000 80b9 	beq.w	9001e8dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
9001e76a:	6810      	ldr	r0, [r2, #0]
9001e76c:	af02      	add	r7, sp, #8
9001e76e:	6851      	ldr	r1, [r2, #4]
9001e770:	c703      	stmia	r7!, {r0, r1}
9001e772:	6818      	ldr	r0, [r3, #0]
9001e774:	af04      	add	r7, sp, #16
9001e776:	6859      	ldr	r1, [r3, #4]
9001e778:	c703      	stmia	r7!, {r0, r1}
9001e77a:	a802      	add	r0, sp, #8
9001e77c:	f7f9 f8c2 	bl	90017904 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e780:	4621      	mov	r1, r4
9001e782:	a804      	add	r0, sp, #16
9001e784:	f7f9 f8e6 	bl	90017954 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001e788:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001e78c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001e790:	f8bd 400c 	ldrh.w	r4, [sp, #12]
9001e794:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
9001e798:	fb14 2103 	smlabb	r1, r4, r3, r2
9001e79c:	eb08 0401 	add.w	r4, r8, r1
9001e7a0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
9001e7a4:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
9001e7a8:	440a      	add	r2, r1
9001e7aa:	ea4f 0a48 	mov.w	sl, r8, lsl #1
9001e7ae:	f8ad 2010 	strh.w	r2, [sp, #16]
9001e7b2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001e7b6:	4413      	add	r3, r2
9001e7b8:	f8ad 3012 	strh.w	r3, [sp, #18]
9001e7bc:	4b49      	ldr	r3, [pc, #292]	; (9001e8e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
9001e7be:	6818      	ldr	r0, [r3, #0]
9001e7c0:	6803      	ldr	r3, [r0, #0]
9001e7c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001e7c4:	4798      	blx	r3
9001e7c6:	4b48      	ldr	r3, [pc, #288]	; (9001e8e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
9001e7c8:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
9001e7cc:	2eff      	cmp	r6, #255	; 0xff
9001e7ce:	881a      	ldrh	r2, [r3, #0]
9001e7d0:	f9bd c010 	ldrsh.w	ip, [sp, #16]
9001e7d4:	fb02 c101 	mla	r1, r2, r1, ip
9001e7d8:	fb02 f207 	mul.w	r2, r2, r7
9001e7dc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
9001e7e0:	f105 0104 	add.w	r1, r5, #4
9001e7e4:	461d      	mov	r5, r3
9001e7e6:	d05a      	beq.n	9001e89e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
9001e7e8:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
9001e7ec:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001e7f0:	b2b6      	uxth	r6, r6
9001e7f2:	9301      	str	r3, [sp, #4]
9001e7f4:	fa1f fe8e 	uxth.w	lr, lr
9001e7f8:	4282      	cmp	r2, r0
9001e7fa:	d96a      	bls.n	9001e8d2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
9001e7fc:	eb00 0b0a 	add.w	fp, r0, sl
9001e800:	4583      	cmp	fp, r0
9001e802:	d940      	bls.n	9001e886 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
9001e804:	8805      	ldrh	r5, [r0, #0]
9001e806:	f814 3b01 	ldrb.w	r3, [r4], #1
9001e80a:	122f      	asrs	r7, r5, #8
9001e80c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
9001e810:	ea4f 09e5 	mov.w	r9, r5, asr #3
9001e814:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001e818:	00ed      	lsls	r5, r5, #3
9001e81a:	ea4f 2c23 	mov.w	ip, r3, asr #8
9001e81e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
9001e822:	fb17 f70e 	smulbb	r7, r7, lr
9001e826:	b2ed      	uxtb	r5, r5
9001e828:	fb19 f90e 	smulbb	r9, r9, lr
9001e82c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001e830:	fb15 f50e 	smulbb	r5, r5, lr
9001e834:	fb0c 7c06 	mla	ip, ip, r6, r7
9001e838:	10df      	asrs	r7, r3, #3
9001e83a:	00db      	lsls	r3, r3, #3
9001e83c:	fa1f fc8c 	uxth.w	ip, ip
9001e840:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001e844:	b2db      	uxtb	r3, r3
9001e846:	fb07 9706 	mla	r7, r7, r6, r9
9001e84a:	f10c 0901 	add.w	r9, ip, #1
9001e84e:	fb03 5306 	mla	r3, r3, r6, r5
9001e852:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
9001e856:	b29b      	uxth	r3, r3
9001e858:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
9001e85c:	b2bf      	uxth	r7, r7
9001e85e:	f103 0c01 	add.w	ip, r3, #1
9001e862:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001e866:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001e86a:	ea4c 0c09 	orr.w	ip, ip, r9
9001e86e:	f107 0901 	add.w	r9, r7, #1
9001e872:	eb09 2717 	add.w	r7, r9, r7, lsr #8
9001e876:	097f      	lsrs	r7, r7, #5
9001e878:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001e87c:	ea4c 0c07 	orr.w	ip, ip, r7
9001e880:	f820 cb02 	strh.w	ip, [r0], #2
9001e884:	e7bc      	b.n	9001e800 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
9001e886:	9b01      	ldr	r3, [sp, #4]
9001e888:	881b      	ldrh	r3, [r3, #0]
9001e88a:	eba3 0308 	sub.w	r3, r3, r8
9001e88e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001e892:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001e896:	eba3 0308 	sub.w	r3, r3, r8
9001e89a:	441c      	add	r4, r3
9001e89c:	e7ac      	b.n	9001e7f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
9001e89e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001e8a2:	4282      	cmp	r2, r0
9001e8a4:	d915      	bls.n	9001e8d2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
9001e8a6:	eb00 060a 	add.w	r6, r0, sl
9001e8aa:	4286      	cmp	r6, r0
9001e8ac:	d906      	bls.n	9001e8bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
9001e8ae:	f814 3b01 	ldrb.w	r3, [r4], #1
9001e8b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
9001e8b6:	f820 3b02 	strh.w	r3, [r0], #2
9001e8ba:	e7f6      	b.n	9001e8aa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
9001e8bc:	882b      	ldrh	r3, [r5, #0]
9001e8be:	eba3 0308 	sub.w	r3, r3, r8
9001e8c2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001e8c6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001e8ca:	eba3 0308 	sub.w	r3, r3, r8
9001e8ce:	441c      	add	r4, r3
9001e8d0:	e7e7      	b.n	9001e8a2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
9001e8d2:	4b04      	ldr	r3, [pc, #16]	; (9001e8e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
9001e8d4:	6818      	ldr	r0, [r3, #0]
9001e8d6:	6803      	ldr	r3, [r0, #0]
9001e8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001e8da:	4798      	blx	r3
9001e8dc:	b007      	add	sp, #28
9001e8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001e8e2:	bf00      	nop
9001e8e4:	24028194 	.word	0x24028194
9001e8e8:	2402818e 	.word	0x2402818e

9001e8ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
9001e8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e8f0:	b091      	sub	sp, #68	; 0x44
9001e8f2:	4680      	mov	r8, r0
9001e8f4:	460f      	mov	r7, r1
9001e8f6:	4614      	mov	r4, r2
9001e8f8:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
9001e8fc:	2d00      	cmp	r5, #0
9001e8fe:	d051      	beq.n	9001e9a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
9001e900:	6810      	ldr	r0, [r2, #0]
9001e902:	ae0c      	add	r6, sp, #48	; 0x30
9001e904:	6851      	ldr	r1, [r2, #4]
9001e906:	f8df 9200 	ldr.w	r9, [pc, #512]	; 9001eb08 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
9001e90a:	c603      	stmia	r6!, {r0, r1}
9001e90c:	6818      	ldr	r0, [r3, #0]
9001e90e:	ae0e      	add	r6, sp, #56	; 0x38
9001e910:	6859      	ldr	r1, [r3, #4]
9001e912:	c603      	stmia	r6!, {r0, r1}
9001e914:	a80c      	add	r0, sp, #48	; 0x30
9001e916:	f7f8 fff5 	bl	90017904 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e91a:	4621      	mov	r1, r4
9001e91c:	a80e      	add	r0, sp, #56	; 0x38
9001e91e:	f7f9 f819 	bl	90017954 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001e922:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
9001e926:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
9001e92a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
9001e92e:	f8d9 0000 	ldr.w	r0, [r9]
9001e932:	fb11 2103 	smlabb	r1, r1, r3, r2
9001e936:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
9001e93a:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
9001e93e:	eb08 0401 	add.w	r4, r8, r1
9001e942:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
9001e946:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 9001eb0c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
9001e94a:	440a      	add	r2, r1
9001e94c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
9001e950:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
9001e954:	4413      	add	r3, r2
9001e956:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
9001e95a:	6803      	ldr	r3, [r0, #0]
9001e95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001e95e:	4798      	blx	r3
9001e960:	f010 0f80 	tst.w	r0, #128	; 0x80
9001e964:	f8d9 0000 	ldr.w	r0, [r9]
9001e968:	d01f      	beq.n	9001e9aa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
9001e96a:	2200      	movs	r2, #0
9001e96c:	6801      	ldr	r1, [r0, #0]
9001e96e:	b2b6      	uxth	r6, r6
9001e970:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
9001e974:	e9cd 2208 	strd	r2, r2, [sp, #32]
9001e978:	220b      	movs	r2, #11
9001e97a:	9207      	str	r2, [sp, #28]
9001e97c:	f8b8 2000 	ldrh.w	r2, [r8]
9001e980:	9601      	str	r6, [sp, #4]
9001e982:	9206      	str	r2, [sp, #24]
9001e984:	2201      	movs	r2, #1
9001e986:	e9cd 5204 	strd	r5, r2, [sp, #16]
9001e98a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
9001e98e:	9203      	str	r2, [sp, #12]
9001e990:	fa1f f28a 	uxth.w	r2, sl
9001e994:	9202      	str	r2, [sp, #8]
9001e996:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
9001e99a:	9200      	str	r2, [sp, #0]
9001e99c:	463a      	mov	r2, r7
9001e99e:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
9001e9a0:	4621      	mov	r1, r4
9001e9a2:	47a8      	blx	r5
9001e9a4:	b011      	add	sp, #68	; 0x44
9001e9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001e9aa:	6803      	ldr	r3, [r0, #0]
9001e9ac:	ea4f 0946 	mov.w	r9, r6, lsl #1
9001e9b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001e9b2:	4798      	blx	r3
9001e9b4:	f8b8 2000 	ldrh.w	r2, [r8]
9001e9b8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
9001e9bc:	2dff      	cmp	r5, #255	; 0xff
9001e9be:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
9001e9c2:	fb0a fa02 	mul.w	sl, sl, r2
9001e9c6:	fb02 1303 	mla	r3, r2, r3, r1
9001e9ca:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001e9ce:	d062      	beq.n	9001ea96 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
9001e9d0:	ea6f 0c05 	mvn.w	ip, r5
9001e9d4:	eb00 034a 	add.w	r3, r0, sl, lsl #1
9001e9d8:	b2ad      	uxth	r5, r5
9001e9da:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
9001e9de:	fa5f fc8c 	uxtb.w	ip, ip
9001e9e2:	930a      	str	r3, [sp, #40]	; 0x28
9001e9e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001e9e6:	4298      	cmp	r0, r3
9001e9e8:	f080 8085 	bcs.w	9001eaf6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
9001e9ec:	eb00 0b09 	add.w	fp, r0, r9
9001e9f0:	4558      	cmp	r0, fp
9001e9f2:	d246      	bcs.n	9001ea82 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
9001e9f4:	f814 eb01 	ldrb.w	lr, [r4], #1
9001e9f8:	2303      	movs	r3, #3
9001e9fa:	2204      	movs	r2, #4
9001e9fc:	fb13 2e0e 	smlabb	lr, r3, lr, r2
9001ea00:	8803      	ldrh	r3, [r0, #0]
9001ea02:	eb07 0a0e 	add.w	sl, r7, lr
9001ea06:	1219      	asrs	r1, r3, #8
9001ea08:	10da      	asrs	r2, r3, #3
9001ea0a:	f817 e00e 	ldrb.w	lr, [r7, lr]
9001ea0e:	f89a 8002 	ldrb.w	r8, [sl, #2]
9001ea12:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001ea16:	00db      	lsls	r3, r3, #3
9001ea18:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001ea1c:	fb18 f805 	smulbb	r8, r8, r5
9001ea20:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
9001ea24:	fb1e fe05 	smulbb	lr, lr, r5
9001ea28:	b2db      	uxtb	r3, r3
9001ea2a:	fb01 810c 	mla	r1, r1, ip, r8
9001ea2e:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001ea32:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
9001ea36:	fb18 f805 	smulbb	r8, r8, r5
9001ea3a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
9001ea3e:	b289      	uxth	r1, r1
9001ea40:	fb02 820c 	mla	r2, r2, ip, r8
9001ea44:	fb03 e30c 	mla	r3, r3, ip, lr
9001ea48:	f101 0801 	add.w	r8, r1, #1
9001ea4c:	b292      	uxth	r2, r2
9001ea4e:	b29b      	uxth	r3, r3
9001ea50:	eb08 2111 	add.w	r1, r8, r1, lsr #8
9001ea54:	f102 0801 	add.w	r8, r2, #1
9001ea58:	f103 0e01 	add.w	lr, r3, #1
9001ea5c:	eb08 2812 	add.w	r8, r8, r2, lsr #8
9001ea60:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
9001ea64:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
9001ea68:	ea4f 1858 	mov.w	r8, r8, lsr #5
9001ea6c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
9001ea70:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001ea74:	ea4e 0101 	orr.w	r1, lr, r1
9001ea78:	ea41 0108 	orr.w	r1, r1, r8
9001ea7c:	f820 1b02 	strh.w	r1, [r0], #2
9001ea80:	e7b6      	b.n	9001e9f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
9001ea82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001ea84:	881b      	ldrh	r3, [r3, #0]
9001ea86:	1b9b      	subs	r3, r3, r6
9001ea88:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ea8c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001ea90:	1b9b      	subs	r3, r3, r6
9001ea92:	441c      	add	r4, r3
9001ea94:	e7a6      	b.n	9001e9e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
9001ea96:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
9001ea9a:	2203      	movs	r2, #3
9001ea9c:	2504      	movs	r5, #4
9001ea9e:	4919      	ldr	r1, [pc, #100]	; (9001eb04 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
9001eaa0:	4550      	cmp	r0, sl
9001eaa2:	d228      	bcs.n	9001eaf6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
9001eaa4:	eb00 0c09 	add.w	ip, r0, r9
9001eaa8:	4560      	cmp	r0, ip
9001eaaa:	4623      	mov	r3, r4
9001eaac:	d219      	bcs.n	9001eae2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
9001eaae:	f893 e000 	ldrb.w	lr, [r3]
9001eab2:	3401      	adds	r4, #1
9001eab4:	fb12 5e0e 	smlabb	lr, r2, lr, r5
9001eab8:	eb07 0b0e 	add.w	fp, r7, lr
9001eabc:	f817 e00e 	ldrb.w	lr, [r7, lr]
9001eac0:	f89b 3002 	ldrb.w	r3, [fp, #2]
9001eac4:	f89b b001 	ldrb.w	fp, [fp, #1]
9001eac8:	ea01 2303 	and.w	r3, r1, r3, lsl #8
9001eacc:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
9001ead0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9001ead4:	ea43 030b 	orr.w	r3, r3, fp
9001ead8:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
9001eadc:	f820 3b02 	strh.w	r3, [r0], #2
9001eae0:	e7e2      	b.n	9001eaa8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
9001eae2:	f8b8 3000 	ldrh.w	r3, [r8]
9001eae6:	1b9b      	subs	r3, r3, r6
9001eae8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001eaec:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001eaf0:	1b9b      	subs	r3, r3, r6
9001eaf2:	441c      	add	r4, r3
9001eaf4:	e7d4      	b.n	9001eaa0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
9001eaf6:	4b04      	ldr	r3, [pc, #16]	; (9001eb08 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
9001eaf8:	6818      	ldr	r0, [r3, #0]
9001eafa:	6803      	ldr	r3, [r0, #0]
9001eafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001eafe:	4798      	blx	r3
9001eb00:	e750      	b.n	9001e9a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
9001eb02:	bf00      	nop
9001eb04:	fffff800 	.word	0xfffff800
9001eb08:	24028194 	.word	0x24028194
9001eb0c:	2402818e 	.word	0x2402818e

9001eb10 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
9001eb10:	b430      	push	{r4, r5}
9001eb12:	780d      	ldrb	r5, [r1, #0]
9001eb14:	f89d 4008 	ldrb.w	r4, [sp, #8]
9001eb18:	2d01      	cmp	r5, #1
9001eb1a:	d00a      	beq.n	9001eb32 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
9001eb1c:	d305      	bcc.n	9001eb2a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
9001eb1e:	2d02      	cmp	r5, #2
9001eb20:	d10b      	bne.n	9001eb3a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
9001eb22:	9402      	str	r4, [sp, #8]
9001eb24:	bc30      	pop	{r4, r5}
9001eb26:	f7ff be15 	b.w	9001e754 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
9001eb2a:	9402      	str	r4, [sp, #8]
9001eb2c:	bc30      	pop	{r4, r5}
9001eb2e:	f7ff bd2b 	b.w	9001e588 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
9001eb32:	9402      	str	r4, [sp, #8]
9001eb34:	bc30      	pop	{r4, r5}
9001eb36:	f7ff bed9 	b.w	9001e8ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
9001eb3a:	bc30      	pop	{r4, r5}
9001eb3c:	4770      	bx	lr
	...

9001eb40 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
9001eb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001eb44:	b087      	sub	sp, #28
9001eb46:	4604      	mov	r4, r0
9001eb48:	460e      	mov	r6, r1
9001eb4a:	6810      	ldr	r0, [r2, #0]
9001eb4c:	6851      	ldr	r1, [r2, #4]
9001eb4e:	ad02      	add	r5, sp, #8
9001eb50:	4617      	mov	r7, r2
9001eb52:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
9001eb56:	f8df 9230 	ldr.w	r9, [pc, #560]	; 9001ed88 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
9001eb5a:	c503      	stmia	r5!, {r0, r1}
9001eb5c:	6818      	ldr	r0, [r3, #0]
9001eb5e:	ad04      	add	r5, sp, #16
9001eb60:	6859      	ldr	r1, [r3, #4]
9001eb62:	c503      	stmia	r5!, {r0, r1}
9001eb64:	a802      	add	r0, sp, #8
9001eb66:	f7f8 fecd 	bl	90017904 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001eb6a:	4639      	mov	r1, r7
9001eb6c:	a804      	add	r0, sp, #16
9001eb6e:	f7f8 fef1 	bl	90017954 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001eb72:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001eb76:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001eb7a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
9001eb7e:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
9001eb82:	fb11 2103 	smlabb	r1, r1, r3, r2
9001eb86:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
9001eb8a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
9001eb8e:	440e      	add	r6, r1
9001eb90:	f8bd 1008 	ldrh.w	r1, [sp, #8]
9001eb94:	440a      	add	r2, r1
9001eb96:	f8ad 2010 	strh.w	r2, [sp, #16]
9001eb9a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001eb9e:	4413      	add	r3, r2
9001eba0:	f8ad 3012 	strh.w	r3, [sp, #18]
9001eba4:	4b77      	ldr	r3, [pc, #476]	; (9001ed84 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
9001eba6:	6818      	ldr	r0, [r3, #0]
9001eba8:	6803      	ldr	r3, [r0, #0]
9001ebaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001ebac:	4798      	blx	r3
9001ebae:	f8b9 b000 	ldrh.w	fp, [r9]
9001ebb2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001ebb6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
9001ebba:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001ebbe:	fb05 f50b 	mul.w	r5, r5, fp
9001ebc2:	fb0b 2303 	mla	r3, fp, r3, r2
9001ebc6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ebca:	ea4f 0348 	mov.w	r3, r8, lsl #1
9001ebce:	9300      	str	r3, [sp, #0]
9001ebd0:	d069      	beq.n	9001eca6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
9001ebd2:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
9001ebd6:	4558      	cmp	r0, fp
9001ebd8:	f080 80cc 	bcs.w	9001ed74 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
9001ebdc:	9b00      	ldr	r3, [sp, #0]
9001ebde:	4631      	mov	r1, r6
9001ebe0:	18c3      	adds	r3, r0, r3
9001ebe2:	9301      	str	r3, [sp, #4]
9001ebe4:	9b01      	ldr	r3, [sp, #4]
9001ebe6:	4298      	cmp	r0, r3
9001ebe8:	d24f      	bcs.n	9001ec8a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
9001ebea:	f811 2b01 	ldrb.w	r2, [r1], #1
9001ebee:	2a00      	cmp	r2, #0
9001ebf0:	d048      	beq.n	9001ec84 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
9001ebf2:	fb0a f202 	mul.w	r2, sl, r2
9001ebf6:	1c53      	adds	r3, r2, #1
9001ebf8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001ebfc:	121b      	asrs	r3, r3, #8
9001ebfe:	d041      	beq.n	9001ec84 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
9001ec00:	8802      	ldrh	r2, [r0, #0]
9001ec02:	b29e      	uxth	r6, r3
9001ec04:	f8b4 c000 	ldrh.w	ip, [r4]
9001ec08:	43db      	mvns	r3, r3
9001ec0a:	1215      	asrs	r5, r2, #8
9001ec0c:	b2db      	uxtb	r3, r3
9001ec0e:	ea4f 272c 	mov.w	r7, ip, asr #8
9001ec12:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001ec16:	ea4f 0ee2 	mov.w	lr, r2, asr #3
9001ec1a:	fb15 f503 	smulbb	r5, r5, r3
9001ec1e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001ec22:	00d2      	lsls	r2, r2, #3
9001ec24:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
9001ec28:	fb07 5706 	mla	r7, r7, r6, r5
9001ec2c:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001ec30:	b2d2      	uxtb	r2, r2
9001ec32:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001ec36:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001ec3a:	fb1e fe03 	smulbb	lr, lr, r3
9001ec3e:	b2bf      	uxth	r7, r7
9001ec40:	fb12 f203 	smulbb	r2, r2, r3
9001ec44:	fa5f fc8c 	uxtb.w	ip, ip
9001ec48:	fb05 e506 	mla	r5, r5, r6, lr
9001ec4c:	f107 0e01 	add.w	lr, r7, #1
9001ec50:	fb0c 2c06 	mla	ip, ip, r6, r2
9001ec54:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
9001ec58:	fa1f fc8c 	uxth.w	ip, ip
9001ec5c:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
9001ec60:	b2ad      	uxth	r5, r5
9001ec62:	f10c 0701 	add.w	r7, ip, #1
9001ec66:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001ec6a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001ec6e:	ea47 070e 	orr.w	r7, r7, lr
9001ec72:	f105 0e01 	add.w	lr, r5, #1
9001ec76:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
9001ec7a:	096d      	lsrs	r5, r5, #5
9001ec7c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001ec80:	432f      	orrs	r7, r5
9001ec82:	8007      	strh	r7, [r0, #0]
9001ec84:	3002      	adds	r0, #2
9001ec86:	3402      	adds	r4, #2
9001ec88:	e7ac      	b.n	9001ebe4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
9001ec8a:	f8b9 3000 	ldrh.w	r3, [r9]
9001ec8e:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
9001ec92:	eba3 0308 	sub.w	r3, r3, r8
9001ec96:	eba6 0608 	sub.w	r6, r6, r8
9001ec9a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ec9e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
9001eca2:	440e      	add	r6, r1
9001eca4:	e797      	b.n	9001ebd6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
9001eca6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
9001ecaa:	42a8      	cmp	r0, r5
9001ecac:	d262      	bcs.n	9001ed74 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
9001ecae:	9b00      	ldr	r3, [sp, #0]
9001ecb0:	4631      	mov	r1, r6
9001ecb2:	eb00 0b03 	add.w	fp, r0, r3
9001ecb6:	4558      	cmp	r0, fp
9001ecb8:	d24e      	bcs.n	9001ed58 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
9001ecba:	f811 3b01 	ldrb.w	r3, [r1], #1
9001ecbe:	b12b      	cbz	r3, 9001eccc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
9001ecc0:	2bff      	cmp	r3, #255	; 0xff
9001ecc2:	f8b4 e000 	ldrh.w	lr, [r4]
9001ecc6:	d104      	bne.n	9001ecd2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
9001ecc8:	f8a0 e000 	strh.w	lr, [r0]
9001eccc:	3002      	adds	r0, #2
9001ecce:	3402      	adds	r4, #2
9001ecd0:	e7f1      	b.n	9001ecb6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
9001ecd2:	8802      	ldrh	r2, [r0, #0]
9001ecd4:	b29f      	uxth	r7, r3
9001ecd6:	43db      	mvns	r3, r3
9001ecd8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001ecdc:	1216      	asrs	r6, r2, #8
9001ecde:	b2db      	uxtb	r3, r3
9001ece0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001ece4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001ece8:	ea4f 0ae2 	mov.w	sl, r2, asr #3
9001ecec:	00d2      	lsls	r2, r2, #3
9001ecee:	fb16 f603 	smulbb	r6, r6, r3
9001ecf2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001ecf6:	b2d2      	uxtb	r2, r2
9001ecf8:	fb0c 6c07 	mla	ip, ip, r7, r6
9001ecfc:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001ed00:	fb1a fa03 	smulbb	sl, sl, r3
9001ed04:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001ed08:	fa1f fc8c 	uxth.w	ip, ip
9001ed0c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001ed10:	fb12 f303 	smulbb	r3, r2, r3
9001ed14:	fa5f fe8e 	uxtb.w	lr, lr
9001ed18:	fb06 a607 	mla	r6, r6, r7, sl
9001ed1c:	f10c 0201 	add.w	r2, ip, #1
9001ed20:	fb0e 3307 	mla	r3, lr, r7, r3
9001ed24:	b2b6      	uxth	r6, r6
9001ed26:	b29b      	uxth	r3, r3
9001ed28:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
9001ed2c:	f106 0a01 	add.w	sl, r6, #1
9001ed30:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
9001ed34:	f103 0c01 	add.w	ip, r3, #1
9001ed38:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
9001ed3c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001ed40:	0976      	lsrs	r6, r6, #5
9001ed42:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001ed46:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001ed4a:	ea4c 0c02 	orr.w	ip, ip, r2
9001ed4e:	ea4c 0c06 	orr.w	ip, ip, r6
9001ed52:	f8a0 c000 	strh.w	ip, [r0]
9001ed56:	e7b9      	b.n	9001eccc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
9001ed58:	f8b9 3000 	ldrh.w	r3, [r9]
9001ed5c:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
9001ed60:	eba3 0308 	sub.w	r3, r3, r8
9001ed64:	eba6 0608 	sub.w	r6, r6, r8
9001ed68:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ed6c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
9001ed70:	440e      	add	r6, r1
9001ed72:	e79a      	b.n	9001ecaa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
9001ed74:	4b03      	ldr	r3, [pc, #12]	; (9001ed84 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
9001ed76:	6818      	ldr	r0, [r3, #0]
9001ed78:	6803      	ldr	r3, [r0, #0]
9001ed7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001ed7c:	4798      	blx	r3
9001ed7e:	b007      	add	sp, #28
9001ed80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ed84:	24028194 	.word	0x24028194
9001ed88:	2402818e 	.word	0x2402818e

9001ed8c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
9001ed8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ed90:	b089      	sub	sp, #36	; 0x24
9001ed92:	4682      	mov	sl, r0
9001ed94:	460f      	mov	r7, r1
9001ed96:	4691      	mov	r9, r2
9001ed98:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
9001ed9c:	4698      	mov	r8, r3
9001ed9e:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001eda0:	2e00      	cmp	r6, #0
9001eda2:	d036      	beq.n	9001ee12 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001eda4:	4608      	mov	r0, r1
9001eda6:	f7fc f863 	bl	9001ae70 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001edaa:	4605      	mov	r5, r0
9001edac:	4638      	mov	r0, r7
9001edae:	f7fc f893 	bl	9001aed8 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001edb2:	f8ad 000e 	strh.w	r0, [sp, #14]
9001edb6:	4638      	mov	r0, r7
9001edb8:	f8ad 9008 	strh.w	r9, [sp, #8]
9001edbc:	f8ad 500c 	strh.w	r5, [sp, #12]
9001edc0:	f8ad 800a 	strh.w	r8, [sp, #10]
9001edc4:	f7fc f940 	bl	9001b048 <_ZNK8touchgfx6Bitmap7getDataEv>
9001edc8:	4605      	mov	r5, r0
9001edca:	4638      	mov	r0, r7
9001edcc:	f7fc f96c 	bl	9001b0a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
9001edd0:	4681      	mov	r9, r0
9001edd2:	4638      	mov	r0, r7
9001edd4:	f7fc f9bc 	bl	9001b150 <_ZNK8touchgfx6Bitmap9getFormatEv>
9001edd8:	280b      	cmp	r0, #11
9001edda:	d81a      	bhi.n	9001ee12 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001eddc:	e8df f000 	tbb	[pc, r0]
9001ede0:	1906aebd 	.word	0x1906aebd
9001ede4:	19191919 	.word	0x19191919
9001ede8:	b5191919 	.word	0xb5191919
9001edec:	4bb0      	ldr	r3, [pc, #704]	; (9001f0b0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
9001edee:	6818      	ldr	r0, [r3, #0]
9001edf0:	6803      	ldr	r3, [r0, #0]
9001edf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001edf4:	4798      	blx	r3
9001edf6:	2eff      	cmp	r6, #255	; 0xff
9001edf8:	d121      	bne.n	9001ee3e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
9001edfa:	0683      	lsls	r3, r0, #26
9001edfc:	d41f      	bmi.n	9001ee3e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
9001edfe:	4638      	mov	r0, r7
9001ee00:	f7fc f8ea 	bl	9001afd8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
9001ee04:	b940      	cbnz	r0, 9001ee18 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
9001ee06:	4623      	mov	r3, r4
9001ee08:	aa02      	add	r2, sp, #8
9001ee0a:	4629      	mov	r1, r5
9001ee0c:	4650      	mov	r0, sl
9001ee0e:	f7ff fa2f 	bl	9001e270 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
9001ee12:	b009      	add	sp, #36	; 0x24
9001ee14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ee18:	f10d 0818 	add.w	r8, sp, #24
9001ee1c:	4639      	mov	r1, r7
9001ee1e:	af04      	add	r7, sp, #16
9001ee20:	4640      	mov	r0, r8
9001ee22:	f7fc f88d 	bl	9001af40 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
9001ee26:	e898 0003 	ldmia.w	r8, {r0, r1}
9001ee2a:	e887 0003 	stmia.w	r7, {r0, r1}
9001ee2e:	4638      	mov	r0, r7
9001ee30:	4621      	mov	r1, r4
9001ee32:	f7f3 fcff 	bl	90012834 <_ZN8touchgfx4RectaNERKS0_>
9001ee36:	4638      	mov	r0, r7
9001ee38:	f7f3 fd3f 	bl	900128ba <_ZNK8touchgfx4Rect7isEmptyEv>
9001ee3c:	b130      	cbz	r0, 9001ee4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
9001ee3e:	4633      	mov	r3, r6
9001ee40:	4622      	mov	r2, r4
9001ee42:	a902      	add	r1, sp, #8
9001ee44:	4628      	mov	r0, r5
9001ee46:	f7ff f92d 	bl	9001e0a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001ee4a:	e7e2      	b.n	9001ee12 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001ee4c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001ee50:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001ee54:	4293      	cmp	r3, r2
9001ee56:	dd12      	ble.n	9001ee7e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
9001ee58:	1a9b      	subs	r3, r3, r2
9001ee5a:	f9b4 0000 	ldrsh.w	r0, [r4]
9001ee5e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001ee62:	f8ad 0018 	strh.w	r0, [sp, #24]
9001ee66:	4628      	mov	r0, r5
9001ee68:	f8ad 201a 	strh.w	r2, [sp, #26]
9001ee6c:	4642      	mov	r2, r8
9001ee6e:	f8ad 101c 	strh.w	r1, [sp, #28]
9001ee72:	a902      	add	r1, sp, #8
9001ee74:	f8ad 301e 	strh.w	r3, [sp, #30]
9001ee78:	4633      	mov	r3, r6
9001ee7a:	f7ff f913 	bl	9001e0a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001ee7e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
9001ee82:	f9b4 2000 	ldrsh.w	r2, [r4]
9001ee86:	4293      	cmp	r3, r2
9001ee88:	dd12      	ble.n	9001eeb0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
9001ee8a:	1a9b      	subs	r3, r3, r2
9001ee8c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
9001ee90:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
9001ee94:	f8ad 2018 	strh.w	r2, [sp, #24]
9001ee98:	4642      	mov	r2, r8
9001ee9a:	f8ad 001a 	strh.w	r0, [sp, #26]
9001ee9e:	4628      	mov	r0, r5
9001eea0:	f8ad 301c 	strh.w	r3, [sp, #28]
9001eea4:	23ff      	movs	r3, #255	; 0xff
9001eea6:	f8ad 101e 	strh.w	r1, [sp, #30]
9001eeaa:	a902      	add	r1, sp, #8
9001eeac:	f7ff f8fa 	bl	9001e0a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001eeb0:	463b      	mov	r3, r7
9001eeb2:	aa02      	add	r2, sp, #8
9001eeb4:	4629      	mov	r1, r5
9001eeb6:	4650      	mov	r0, sl
9001eeb8:	f7ff f9da 	bl	9001e270 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
9001eebc:	88a2      	ldrh	r2, [r4, #4]
9001eebe:	8823      	ldrh	r3, [r4, #0]
9001eec0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
9001eec4:	4413      	add	r3, r2
9001eec6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001eeca:	440a      	add	r2, r1
9001eecc:	b29b      	uxth	r3, r3
9001eece:	b292      	uxth	r2, r2
9001eed0:	b218      	sxth	r0, r3
9001eed2:	b211      	sxth	r1, r2
9001eed4:	4288      	cmp	r0, r1
9001eed6:	dd12      	ble.n	9001eefe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
9001eed8:	1a9b      	subs	r3, r3, r2
9001eeda:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
9001eede:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
9001eee2:	4642      	mov	r2, r8
9001eee4:	f8ad 1018 	strh.w	r1, [sp, #24]
9001eee8:	a902      	add	r1, sp, #8
9001eeea:	f8ad 301c 	strh.w	r3, [sp, #28]
9001eeee:	23ff      	movs	r3, #255	; 0xff
9001eef0:	f8ad 001e 	strh.w	r0, [sp, #30]
9001eef4:	4628      	mov	r0, r5
9001eef6:	f8ad 601a 	strh.w	r6, [sp, #26]
9001eefa:	f7ff f8d3 	bl	9001e0a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001eefe:	88e2      	ldrh	r2, [r4, #6]
9001ef00:	8863      	ldrh	r3, [r4, #2]
9001ef02:	f8bd 1016 	ldrh.w	r1, [sp, #22]
9001ef06:	4413      	add	r3, r2
9001ef08:	f8bd 2012 	ldrh.w	r2, [sp, #18]
9001ef0c:	440a      	add	r2, r1
9001ef0e:	b29b      	uxth	r3, r3
9001ef10:	b292      	uxth	r2, r2
9001ef12:	b218      	sxth	r0, r3
9001ef14:	b211      	sxth	r1, r2
9001ef16:	4288      	cmp	r0, r1
9001ef18:	f77f af7b 	ble.w	9001ee12 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001ef1c:	1a9b      	subs	r3, r3, r2
9001ef1e:	f9b4 6000 	ldrsh.w	r6, [r4]
9001ef22:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
9001ef26:	4642      	mov	r2, r8
9001ef28:	f8ad 301e 	strh.w	r3, [sp, #30]
9001ef2c:	23ff      	movs	r3, #255	; 0xff
9001ef2e:	f8ad 6018 	strh.w	r6, [sp, #24]
9001ef32:	f8ad 101a 	strh.w	r1, [sp, #26]
9001ef36:	f8ad 001c 	strh.w	r0, [sp, #28]
9001ef3a:	e782      	b.n	9001ee42 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
9001ef3c:	4633      	mov	r3, r6
9001ef3e:	4622      	mov	r2, r4
9001ef40:	a902      	add	r1, sp, #8
9001ef42:	4628      	mov	r0, r5
9001ef44:	f7ff fa04 	bl	9001e350 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
9001ef48:	e763      	b.n	9001ee12 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001ef4a:	9600      	str	r6, [sp, #0]
9001ef4c:	4623      	mov	r3, r4
9001ef4e:	aa02      	add	r2, sp, #8
9001ef50:	4649      	mov	r1, r9
9001ef52:	4628      	mov	r0, r5
9001ef54:	f7ff fddc 	bl	9001eb10 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
9001ef58:	e75b      	b.n	9001ee12 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001ef5a:	4638      	mov	r0, r7
9001ef5c:	f7fc f83c 	bl	9001afd8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
9001ef60:	b950      	cbnz	r0, 9001ef78 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
9001ef62:	f8da 3000 	ldr.w	r3, [sl]
9001ef66:	aa02      	add	r2, sp, #8
9001ef68:	4629      	mov	r1, r5
9001ef6a:	e9cd 6000 	strd	r6, r0, [sp]
9001ef6e:	4650      	mov	r0, sl
9001ef70:	68de      	ldr	r6, [r3, #12]
9001ef72:	4623      	mov	r3, r4
9001ef74:	47b0      	blx	r6
9001ef76:	e74c      	b.n	9001ee12 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001ef78:	f10d 0818 	add.w	r8, sp, #24
9001ef7c:	4639      	mov	r1, r7
9001ef7e:	af04      	add	r7, sp, #16
9001ef80:	4640      	mov	r0, r8
9001ef82:	f7fb ffdd 	bl	9001af40 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
9001ef86:	e898 0003 	ldmia.w	r8, {r0, r1}
9001ef8a:	e887 0003 	stmia.w	r7, {r0, r1}
9001ef8e:	4638      	mov	r0, r7
9001ef90:	4621      	mov	r1, r4
9001ef92:	f7f3 fc4f 	bl	90012834 <_ZN8touchgfx4RectaNERKS0_>
9001ef96:	4638      	mov	r0, r7
9001ef98:	f7f3 fc8f 	bl	900128ba <_ZNK8touchgfx4Rect7isEmptyEv>
9001ef9c:	b138      	cbz	r0, 9001efae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
9001ef9e:	4623      	mov	r3, r4
9001efa0:	9600      	str	r6, [sp, #0]
9001efa2:	aa02      	add	r2, sp, #8
9001efa4:	4649      	mov	r1, r9
9001efa6:	4628      	mov	r0, r5
9001efa8:	f7ff fdca 	bl	9001eb40 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001efac:	e731      	b.n	9001ee12 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001efae:	f8da 3000 	ldr.w	r3, [sl]
9001efb2:	aa02      	add	r2, sp, #8
9001efb4:	4629      	mov	r1, r5
9001efb6:	e9cd 6000 	strd	r6, r0, [sp]
9001efba:	4650      	mov	r0, sl
9001efbc:	f8d3 b00c 	ldr.w	fp, [r3, #12]
9001efc0:	463b      	mov	r3, r7
9001efc2:	47d8      	blx	fp
9001efc4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001efc8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001efcc:	4293      	cmp	r3, r2
9001efce:	dd13      	ble.n	9001eff8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
9001efd0:	f9b4 0000 	ldrsh.w	r0, [r4]
9001efd4:	1a9b      	subs	r3, r3, r2
9001efd6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001efda:	f8ad 0018 	strh.w	r0, [sp, #24]
9001efde:	4628      	mov	r0, r5
9001efe0:	f8ad 201a 	strh.w	r2, [sp, #26]
9001efe4:	aa02      	add	r2, sp, #8
9001efe6:	f8ad 101c 	strh.w	r1, [sp, #28]
9001efea:	4649      	mov	r1, r9
9001efec:	f8ad 301e 	strh.w	r3, [sp, #30]
9001eff0:	4643      	mov	r3, r8
9001eff2:	9600      	str	r6, [sp, #0]
9001eff4:	f7ff fda4 	bl	9001eb40 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001eff8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
9001effc:	f9b4 2000 	ldrsh.w	r2, [r4]
9001f000:	4293      	cmp	r3, r2
9001f002:	dd13      	ble.n	9001f02c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
9001f004:	1a9b      	subs	r3, r3, r2
9001f006:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
9001f00a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
9001f00e:	f8ad 2018 	strh.w	r2, [sp, #24]
9001f012:	aa02      	add	r2, sp, #8
9001f014:	f8ad 001a 	strh.w	r0, [sp, #26]
9001f018:	4628      	mov	r0, r5
9001f01a:	f8ad 301c 	strh.w	r3, [sp, #28]
9001f01e:	4643      	mov	r3, r8
9001f020:	f8ad 101e 	strh.w	r1, [sp, #30]
9001f024:	4649      	mov	r1, r9
9001f026:	9600      	str	r6, [sp, #0]
9001f028:	f7ff fd8a 	bl	9001eb40 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001f02c:	88a2      	ldrh	r2, [r4, #4]
9001f02e:	8823      	ldrh	r3, [r4, #0]
9001f030:	f8bd 1014 	ldrh.w	r1, [sp, #20]
9001f034:	4413      	add	r3, r2
9001f036:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001f03a:	440a      	add	r2, r1
9001f03c:	b29b      	uxth	r3, r3
9001f03e:	b292      	uxth	r2, r2
9001f040:	b218      	sxth	r0, r3
9001f042:	b211      	sxth	r1, r2
9001f044:	4288      	cmp	r0, r1
9001f046:	dd13      	ble.n	9001f070 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
9001f048:	1a9b      	subs	r3, r3, r2
9001f04a:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
9001f04e:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
9001f052:	aa02      	add	r2, sp, #8
9001f054:	f8ad 1018 	strh.w	r1, [sp, #24]
9001f058:	4649      	mov	r1, r9
9001f05a:	f8ad 301c 	strh.w	r3, [sp, #28]
9001f05e:	4643      	mov	r3, r8
9001f060:	f8ad 001e 	strh.w	r0, [sp, #30]
9001f064:	4628      	mov	r0, r5
9001f066:	9600      	str	r6, [sp, #0]
9001f068:	f8ad 701a 	strh.w	r7, [sp, #26]
9001f06c:	f7ff fd68 	bl	9001eb40 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001f070:	88e2      	ldrh	r2, [r4, #6]
9001f072:	8863      	ldrh	r3, [r4, #2]
9001f074:	f8bd 1016 	ldrh.w	r1, [sp, #22]
9001f078:	4413      	add	r3, r2
9001f07a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
9001f07e:	440a      	add	r2, r1
9001f080:	b29b      	uxth	r3, r3
9001f082:	b292      	uxth	r2, r2
9001f084:	b218      	sxth	r0, r3
9001f086:	b211      	sxth	r1, r2
9001f088:	4288      	cmp	r0, r1
9001f08a:	f77f aec2 	ble.w	9001ee12 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f08e:	f9b4 7000 	ldrsh.w	r7, [r4]
9001f092:	1a9b      	subs	r3, r3, r2
9001f094:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
9001f098:	f8ad 301e 	strh.w	r3, [sp, #30]
9001f09c:	4643      	mov	r3, r8
9001f09e:	f8ad 7018 	strh.w	r7, [sp, #24]
9001f0a2:	f8ad 101a 	strh.w	r1, [sp, #26]
9001f0a6:	f8ad 001c 	strh.w	r0, [sp, #28]
9001f0aa:	9600      	str	r6, [sp, #0]
9001f0ac:	e779      	b.n	9001efa2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
9001f0ae:	bf00      	nop
9001f0b0:	24028194 	.word	0x24028194

9001f0b4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
9001f0b4:	b180      	cbz	r0, 9001f0d8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
9001f0b6:	2903      	cmp	r1, #3
9001f0b8:	d81c      	bhi.n	9001f0f4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
9001f0ba:	e8df f001 	tbb	[pc, r1]
9001f0be:	1d02      	.short	0x1d02
9001f0c0:	1f08      	.short	0x1f08
9001f0c2:	4b10      	ldr	r3, [pc, #64]	; (9001f104 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
9001f0c4:	8818      	ldrh	r0, [r3, #0]
9001f0c6:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001f0ca:	4240      	negs	r0, r0
9001f0cc:	4770      	bx	lr
9001f0ce:	4b0d      	ldr	r3, [pc, #52]	; (9001f104 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
9001f0d0:	8818      	ldrh	r0, [r3, #0]
9001f0d2:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001f0d6:	4770      	bx	lr
9001f0d8:	2903      	cmp	r1, #3
9001f0da:	d80b      	bhi.n	9001f0f4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
9001f0dc:	a301      	add	r3, pc, #4	; (adr r3, 9001f0e4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
9001f0de:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
9001f0e2:	bf00      	nop
9001f0e4:	9001f0f9 	.word	0x9001f0f9
9001f0e8:	9001f0cf 	.word	0x9001f0cf
9001f0ec:	9001f0fd 	.word	0x9001f0fd
9001f0f0:	9001f0c3 	.word	0x9001f0c3
9001f0f4:	2000      	movs	r0, #0
9001f0f6:	4770      	bx	lr
9001f0f8:	2001      	movs	r0, #1
9001f0fa:	4770      	bx	lr
9001f0fc:	f04f 30ff 	mov.w	r0, #4294967295
9001f100:	4770      	bx	lr
9001f102:	bf00      	nop
9001f104:	2402818e 	.word	0x2402818e

9001f108 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
9001f108:	b180      	cbz	r0, 9001f12c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
9001f10a:	2903      	cmp	r1, #3
9001f10c:	d81c      	bhi.n	9001f148 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
9001f10e:	e8df f001 	tbb	[pc, r1]
9001f112:	021d      	.short	0x021d
9001f114:	071f      	.short	0x071f
9001f116:	4b10      	ldr	r3, [pc, #64]	; (9001f158 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
9001f118:	8818      	ldrh	r0, [r3, #0]
9001f11a:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001f11e:	4770      	bx	lr
9001f120:	4b0d      	ldr	r3, [pc, #52]	; (9001f158 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
9001f122:	8818      	ldrh	r0, [r3, #0]
9001f124:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001f128:	4240      	negs	r0, r0
9001f12a:	4770      	bx	lr
9001f12c:	2903      	cmp	r1, #3
9001f12e:	d80b      	bhi.n	9001f148 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
9001f130:	a301      	add	r3, pc, #4	; (adr r3, 9001f138 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
9001f132:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
9001f136:	bf00      	nop
9001f138:	9001f117 	.word	0x9001f117
9001f13c:	9001f151 	.word	0x9001f151
9001f140:	9001f121 	.word	0x9001f121
9001f144:	9001f14d 	.word	0x9001f14d
9001f148:	2000      	movs	r0, #0
9001f14a:	4770      	bx	lr
9001f14c:	2001      	movs	r0, #1
9001f14e:	4770      	bx	lr
9001f150:	f04f 30ff 	mov.w	r0, #4294967295
9001f154:	4770      	bx	lr
9001f156:	bf00      	nop
9001f158:	2402818e 	.word	0x2402818e

9001f15c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
9001f15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f160:	b099      	sub	sp, #100	; 0x64
9001f162:	910b      	str	r1, [sp, #44]	; 0x2c
9001f164:	a914      	add	r1, sp, #80	; 0x50
9001f166:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
9001f16a:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
9001f16e:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
9001f172:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
9001f176:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
9001f17a:	e881 000c 	stmia.w	r1, {r2, r3}
9001f17e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
9001f182:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
9001f186:	9309      	str	r3, [sp, #36]	; 0x24
9001f188:	f891 900d 	ldrb.w	r9, [r1, #13]
9001f18c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
9001f190:	ea4f 1749 	mov.w	r7, r9, lsl #5
9001f194:	9310      	str	r3, [sp, #64]	; 0x40
9001f196:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
9001f19a:	930c      	str	r3, [sp, #48]	; 0x30
9001f19c:	f407 7380 	and.w	r3, r7, #256	; 0x100
9001f1a0:	798f      	ldrb	r7, [r1, #6]
9001f1a2:	431f      	orrs	r7, r3
9001f1a4:	f000 8195 	beq.w	9001f4d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001f1a8:	ea4f 1909 	mov.w	r9, r9, lsl #4
9001f1ac:	f409 7380 	and.w	r3, r9, #256	; 0x100
9001f1b0:	f891 9007 	ldrb.w	r9, [r1, #7]
9001f1b4:	ea59 0903 	orrs.w	r9, r9, r3
9001f1b8:	f000 818b 	beq.w	9001f4d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001f1bc:	f991 3009 	ldrsb.w	r3, [r1, #9]
9001f1c0:	b29b      	uxth	r3, r3
9001f1c2:	2d00      	cmp	r5, #0
9001f1c4:	f000 812e 	beq.w	9001f424 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
9001f1c8:	1aed      	subs	r5, r5, r3
9001f1ca:	b2ad      	uxth	r5, r5
9001f1cc:	042b      	lsls	r3, r5, #16
9001f1ce:	d502      	bpl.n	9001f1d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
9001f1d0:	1b64      	subs	r4, r4, r5
9001f1d2:	2500      	movs	r5, #0
9001f1d4:	b224      	sxth	r4, r4
9001f1d6:	f9b2 1000 	ldrsh.w	r1, [r2]
9001f1da:	a814      	add	r0, sp, #80	; 0x50
9001f1dc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
9001f1e0:	428c      	cmp	r4, r1
9001f1e2:	b28b      	uxth	r3, r1
9001f1e4:	bfbf      	itttt	lt
9001f1e6:	18ed      	addlt	r5, r5, r3
9001f1e8:	1b2c      	sublt	r4, r5, r4
9001f1ea:	b2a5      	uxthlt	r5, r4
9001f1ec:	460c      	movlt	r4, r1
9001f1ee:	8891      	ldrh	r1, [r2, #4]
9001f1f0:	440b      	add	r3, r1
9001f1f2:	4621      	mov	r1, r4
9001f1f4:	b21b      	sxth	r3, r3
9001f1f6:	930f      	str	r3, [sp, #60]	; 0x3c
9001f1f8:	88d3      	ldrh	r3, [r2, #6]
9001f1fa:	8852      	ldrh	r2, [r2, #2]
9001f1fc:	4413      	add	r3, r2
9001f1fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001f200:	b21b      	sxth	r3, r3
9001f202:	930d      	str	r3, [sp, #52]	; 0x34
9001f204:	4bbd      	ldr	r3, [pc, #756]	; (9001f4fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
9001f206:	f893 b000 	ldrb.w	fp, [r3]
9001f20a:	f10b 3cff 	add.w	ip, fp, #4294967295
9001f20e:	f1dc 0300 	rsbs	r3, ip, #0
9001f212:	eb43 030c 	adc.w	r3, r3, ip
9001f216:	930e      	str	r3, [sp, #56]	; 0x38
9001f218:	4653      	mov	r3, sl
9001f21a:	f7f8 f9ed 	bl	900175f8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
9001f21e:	4621      	mov	r1, r4
9001f220:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
9001f224:	4653      	mov	r3, sl
9001f226:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001f228:	a814      	add	r0, sp, #80	; 0x50
9001f22a:	f7f8 fa02 	bl	90017632 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
9001f22e:	a918      	add	r1, sp, #96	; 0x60
9001f230:	f821 0d02 	strh.w	r0, [r1, #-2]!
9001f234:	a817      	add	r0, sp, #92	; 0x5c
9001f236:	f7f8 fb23 	bl	90017880 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
9001f23a:	f1ba 0f00 	cmp.w	sl, #0
9001f23e:	f040 80f4 	bne.w	9001f42a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
9001f242:	f1bb 0f01 	cmp.w	fp, #1
9001f246:	f040 80f8 	bne.w	9001f43a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
9001f24a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001f24c:	2b00      	cmp	r3, #0
9001f24e:	f040 8145 	bne.w	9001f4dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
9001f252:	b2ba      	uxth	r2, r7
9001f254:	b905      	cbnz	r5, 9001f258 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
9001f256:	b16e      	cbz	r6, 9001f274 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
9001f258:	fb06 5302 	mla	r3, r6, r2, r5
9001f25c:	9828      	ldr	r0, [sp, #160]	; 0xa0
9001f25e:	4631      	mov	r1, r6
9001f260:	fb08 f303 	mul.w	r3, r8, r3
9001f264:	f003 0607 	and.w	r6, r3, #7
9001f268:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
9001f26c:	9328      	str	r3, [sp, #160]	; 0xa0
9001f26e:	eba9 0301 	sub.w	r3, r9, r1
9001f272:	930a      	str	r3, [sp, #40]	; 0x28
9001f274:	4651      	mov	r1, sl
9001f276:	980e      	ldr	r0, [sp, #56]	; 0x38
9001f278:	f7ff ff1c 	bl	9001f0b4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
9001f27c:	4681      	mov	r9, r0
9001f27e:	980e      	ldr	r0, [sp, #56]	; 0x38
9001f280:	f7ff ff42 	bl	9001f108 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
9001f284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001f286:	9909      	ldr	r1, [sp, #36]	; 0x24
9001f288:	4683      	mov	fp, r0
9001f28a:	eba3 0a01 	sub.w	sl, r3, r1
9001f28e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001f290:	459a      	cmp	sl, r3
9001f292:	bfa8      	it	ge
9001f294:	469a      	movge	sl, r3
9001f296:	f1ba 0f00 	cmp.w	sl, #0
9001f29a:	f340 811a 	ble.w	9001f4d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001f29e:	1b64      	subs	r4, r4, r5
9001f2a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001f2a2:	1b1c      	subs	r4, r3, r4
9001f2a4:	42bc      	cmp	r4, r7
9001f2a6:	bfd4      	ite	le
9001f2a8:	ebc5 0504 	rsble	r5, r5, r4
9001f2ac:	ebc5 0507 	rsbgt	r5, r5, r7
9001f2b0:	2d00      	cmp	r5, #0
9001f2b2:	f340 810e 	ble.w	9001f4d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001f2b6:	1b52      	subs	r2, r2, r5
9001f2b8:	fb08 f302 	mul.w	r3, r8, r2
9001f2bc:	930f      	str	r3, [sp, #60]	; 0x3c
9001f2be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001f2c0:	2b00      	cmp	r3, #0
9001f2c2:	f040 8116 	bne.w	9001f4f2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
9001f2c6:	4b8e      	ldr	r3, [pc, #568]	; (9001f500 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
9001f2c8:	6818      	ldr	r0, [r3, #0]
9001f2ca:	6803      	ldr	r3, [r0, #0]
9001f2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001f2ce:	4798      	blx	r3
9001f2d0:	2301      	movs	r3, #1
9001f2d2:	4a8c      	ldr	r2, [pc, #560]	; (9001f504 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
9001f2d4:	fa03 f308 	lsl.w	r3, r3, r8
9001f2d8:	8811      	ldrh	r1, [r2, #0]
9001f2da:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
9001f2de:	3b01      	subs	r3, #1
9001f2e0:	b2db      	uxtb	r3, r3
9001f2e2:	930e      	str	r3, [sp, #56]	; 0x38
9001f2e4:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
9001f2e8:	fb01 2303 	mla	r3, r1, r3, r2
9001f2ec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001f2f0:	930a      	str	r3, [sp, #40]	; 0x28
9001f2f2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001f2f4:	f3c3 4307 	ubfx	r3, r3, #16, #8
9001f2f8:	9313      	str	r3, [sp, #76]	; 0x4c
9001f2fa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001f2fc:	0a19      	lsrs	r1, r3, #8
9001f2fe:	b2cb      	uxtb	r3, r1
9001f300:	9312      	str	r3, [sp, #72]	; 0x48
9001f302:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001f304:	b2db      	uxtb	r3, r3
9001f306:	9311      	str	r3, [sp, #68]	; 0x44
9001f308:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001f30a:	095a      	lsrs	r2, r3, #5
9001f30c:	4b7e      	ldr	r3, [pc, #504]	; (9001f508 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
9001f30e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001f312:	400b      	ands	r3, r1
9001f314:	4313      	orrs	r3, r2
9001f316:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
9001f318:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001f31c:	4313      	orrs	r3, r2
9001f31e:	b29b      	uxth	r3, r3
9001f320:	9310      	str	r3, [sp, #64]	; 0x40
9001f322:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001f324:	781a      	ldrb	r2, [r3, #0]
9001f326:	ea4f 0349 	mov.w	r3, r9, lsl #1
9001f32a:	fb05 b919 	mls	r9, r5, r9, fp
9001f32e:	4132      	asrs	r2, r6
9001f330:	fb03 fb05 	mul.w	fp, r3, r5
9001f334:	930d      	str	r3, [sp, #52]	; 0x34
9001f336:	b2d2      	uxtb	r2, r2
9001f338:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
9001f33c:	f11a 3aff 	adds.w	sl, sl, #4294967295
9001f340:	f0c0 80f5 	bcc.w	9001f52e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
9001f344:	46ae      	mov	lr, r5
9001f346:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
9001f34a:	f11e 3eff 	adds.w	lr, lr, #4294967295
9001f34e:	f0c0 80dd 	bcc.w	9001f50c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
9001f352:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001f354:	4013      	ands	r3, r2
9001f356:	d055      	beq.n	9001f404 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
9001f358:	20ff      	movs	r0, #255	; 0xff
9001f35a:	990e      	ldr	r1, [sp, #56]	; 0x38
9001f35c:	fb90 f1f1 	sdiv	r1, r0, r1
9001f360:	434b      	muls	r3, r1
9001f362:	2bfe      	cmp	r3, #254	; 0xfe
9001f364:	dd03      	ble.n	9001f36e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
9001f366:	990c      	ldr	r1, [sp, #48]	; 0x30
9001f368:	4281      	cmp	r1, r0
9001f36a:	f000 80c4 	beq.w	9001f4f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
9001f36e:	990c      	ldr	r1, [sp, #48]	; 0x30
9001f370:	f8bc 4000 	ldrh.w	r4, [ip]
9001f374:	fb11 f303 	smulbb	r3, r1, r3
9001f378:	1220      	asrs	r0, r4, #8
9001f37a:	b29b      	uxth	r3, r3
9001f37c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001f380:	1c59      	adds	r1, r3, #1
9001f382:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
9001f386:	eb01 2313 	add.w	r3, r1, r3, lsr #8
9001f38a:	10e1      	asrs	r1, r4, #3
9001f38c:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001f390:	00e4      	lsls	r4, r4, #3
9001f392:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001f396:	b29f      	uxth	r7, r3
9001f398:	43db      	mvns	r3, r3
9001f39a:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
9001f39e:	b2db      	uxtb	r3, r3
9001f3a0:	b2e4      	uxtb	r4, r4
9001f3a2:	9309      	str	r3, [sp, #36]	; 0x24
9001f3a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001f3a6:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
9001f3aa:	fb13 f907 	smulbb	r9, r3, r7
9001f3ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f3b0:	fb00 9003 	mla	r0, r0, r3, r9
9001f3b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001f3b6:	fb13 f907 	smulbb	r9, r3, r7
9001f3ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f3bc:	b280      	uxth	r0, r0
9001f3be:	fb01 9103 	mla	r1, r1, r3, r9
9001f3c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001f3c4:	fb13 f707 	smulbb	r7, r3, r7
9001f3c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f3ca:	b289      	uxth	r1, r1
9001f3cc:	fb04 7403 	mla	r4, r4, r3, r7
9001f3d0:	1c43      	adds	r3, r0, #1
9001f3d2:	b2a4      	uxth	r4, r4
9001f3d4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9001f3d8:	f104 0901 	add.w	r9, r4, #1
9001f3dc:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9001f3e0:	eb09 2914 	add.w	r9, r9, r4, lsr #8
9001f3e4:	f3c9 29c4 	ubfx	r9, r9, #11, #5
9001f3e8:	ea49 0000 	orr.w	r0, r9, r0
9001f3ec:	f101 0901 	add.w	r9, r1, #1
9001f3f0:	eb09 2911 	add.w	r9, r9, r1, lsr #8
9001f3f4:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001f3f8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001f3fc:	ea40 0009 	orr.w	r0, r0, r9
9001f400:	f8ac 0000 	strh.w	r0, [ip]
9001f404:	4446      	add	r6, r8
9001f406:	b2b6      	uxth	r6, r6
9001f408:	2e07      	cmp	r6, #7
9001f40a:	bf89      	itett	hi
9001f40c:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
9001f40e:	fa42 f208 	asrls.w	r2, r2, r8
9001f412:	2600      	movhi	r6, #0
9001f414:	785a      	ldrbhi	r2, [r3, #1]
9001f416:	bf8a      	itet	hi
9001f418:	3301      	addhi	r3, #1
9001f41a:	b2d2      	uxtbls	r2, r2
9001f41c:	9328      	strhi	r3, [sp, #160]	; 0xa0
9001f41e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001f420:	449c      	add	ip, r3
9001f422:	e792      	b.n	9001f34a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
9001f424:	441c      	add	r4, r3
9001f426:	b224      	sxth	r4, r4
9001f428:	e6d5      	b.n	9001f1d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
9001f42a:	f1ba 0f01 	cmp.w	sl, #1
9001f42e:	f47f af0c 	bne.w	9001f24a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001f432:	f1bb 0f01 	cmp.w	fp, #1
9001f436:	f47f af08 	bne.w	9001f24a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001f43a:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 9001f500 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
9001f43e:	f8db 0000 	ldr.w	r0, [fp]
9001f442:	6803      	ldr	r3, [r0, #0]
9001f444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001f446:	4798      	blx	r3
9001f448:	f410 7380 	ands.w	r3, r0, #256	; 0x100
9001f44c:	465a      	mov	r2, fp
9001f44e:	d006      	beq.n	9001f45e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
9001f450:	f1b8 0f04 	cmp.w	r8, #4
9001f454:	d140      	bne.n	9001f4d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
9001f456:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001f458:	3300      	adds	r3, #0
9001f45a:	bf18      	it	ne
9001f45c:	2301      	movne	r3, #1
9001f45e:	0580      	lsls	r0, r0, #22
9001f460:	d56e      	bpl.n	9001f540 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
9001f462:	f1b8 0f08 	cmp.w	r8, #8
9001f466:	d16b      	bne.n	9001f540 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
9001f468:	2b00      	cmp	r3, #0
9001f46a:	bf0c      	ite	eq
9001f46c:	f44f 7100 	moveq.w	r1, #512	; 0x200
9001f470:	f44f 7180 	movne.w	r1, #256	; 0x100
9001f474:	2d00      	cmp	r5, #0
9001f476:	f47f aee8 	bne.w	9001f24a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001f47a:	2e00      	cmp	r6, #0
9001f47c:	f47f aee5 	bne.w	9001f24a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001f480:	19e3      	adds	r3, r4, r7
9001f482:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001f484:	4283      	cmp	r3, r0
9001f486:	f73f aee0 	bgt.w	9001f24a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001f48a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f48c:	980d      	ldr	r0, [sp, #52]	; 0x34
9001f48e:	444b      	add	r3, r9
9001f490:	4283      	cmp	r3, r0
9001f492:	f73f aeda 	bgt.w	9001f24a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001f496:	b2bf      	uxth	r7, r7
9001f498:	f1b8 0f08 	cmp.w	r8, #8
9001f49c:	6810      	ldr	r0, [r2, #0]
9001f49e:	f04f 0500 	mov.w	r5, #0
9001f4a2:	bf18      	it	ne
9001f4a4:	3701      	addne	r7, #1
9001f4a6:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
9001f4aa:	6804      	ldr	r4, [r0, #0]
9001f4ac:	bf18      	it	ne
9001f4ae:	f027 0701 	bicne.w	r7, r7, #1
9001f4b2:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
9001f4b6:	e9cd 1505 	strd	r1, r5, [sp, #20]
9001f4ba:	990c      	ldr	r1, [sp, #48]	; 0x30
9001f4bc:	bf18      	it	ne
9001f4be:	b2bf      	uxthne	r7, r7
9001f4c0:	9104      	str	r1, [sp, #16]
9001f4c2:	992a      	ldr	r1, [sp, #168]	; 0xa8
9001f4c4:	e9cd 7900 	strd	r7, r9, [sp]
9001f4c8:	e9cd 7102 	strd	r7, r1, [sp, #8]
9001f4cc:	9928      	ldr	r1, [sp, #160]	; 0xa0
9001f4ce:	6d64      	ldr	r4, [r4, #84]	; 0x54
9001f4d0:	47a0      	blx	r4
9001f4d2:	b019      	add	sp, #100	; 0x64
9001f4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001f4d8:	2300      	movs	r3, #0
9001f4da:	e7c0      	b.n	9001f45e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
9001f4dc:	2208      	movs	r2, #8
9001f4de:	fb92 f3f8 	sdiv	r3, r2, r8
9001f4e2:	1e5a      	subs	r2, r3, #1
9001f4e4:	443a      	add	r2, r7
9001f4e6:	fb92 f2f3 	sdiv	r2, r2, r3
9001f4ea:	fb12 f203 	smulbb	r2, r2, r3
9001f4ee:	b292      	uxth	r2, r2
9001f4f0:	e6b0      	b.n	9001f254 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
9001f4f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
9001f4f4:	e6ec      	b.n	9001f2d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
9001f4f6:	9810      	ldr	r0, [sp, #64]	; 0x40
9001f4f8:	e782      	b.n	9001f400 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
9001f4fa:	bf00      	nop
9001f4fc:	2402818c 	.word	0x2402818c
9001f500:	24028194 	.word	0x24028194
9001f504:	2402818e 	.word	0x2402818e
9001f508:	00fff800 	.word	0x00fff800
9001f50c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001f50e:	b153      	cbz	r3, 9001f526 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
9001f510:	441e      	add	r6, r3
9001f512:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001f514:	b2b6      	uxth	r6, r6
9001f516:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
9001f51a:	f006 0607 	and.w	r6, r6, #7
9001f51e:	781a      	ldrb	r2, [r3, #0]
9001f520:	9328      	str	r3, [sp, #160]	; 0xa0
9001f522:	4132      	asrs	r2, r6
9001f524:	b2d2      	uxtb	r2, r2
9001f526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001f528:	445b      	add	r3, fp
9001f52a:	930a      	str	r3, [sp, #40]	; 0x28
9001f52c:	e706      	b.n	9001f33c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
9001f52e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001f530:	2b00      	cmp	r3, #0
9001f532:	d1ce      	bne.n	9001f4d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001f534:	4b05      	ldr	r3, [pc, #20]	; (9001f54c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
9001f536:	6818      	ldr	r0, [r3, #0]
9001f538:	6803      	ldr	r3, [r0, #0]
9001f53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001f53c:	4798      	blx	r3
9001f53e:	e7c8      	b.n	9001f4d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001f540:	2b00      	cmp	r3, #0
9001f542:	f43f ae82 	beq.w	9001f24a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001f546:	f44f 7180 	mov.w	r1, #256	; 0x100
9001f54a:	e793      	b.n	9001f474 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
9001f54c:	24028194 	.word	0x24028194

9001f550 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
9001f550:	b538      	push	{r3, r4, r5, lr}
9001f552:	4c15      	ldr	r4, [pc, #84]	; (9001f5a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
9001f554:	4605      	mov	r5, r0
9001f556:	7823      	ldrb	r3, [r4, #0]
9001f558:	f3bf 8f5b 	dmb	ish
9001f55c:	07da      	lsls	r2, r3, #31
9001f55e:	d40b      	bmi.n	9001f578 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
9001f560:	4620      	mov	r0, r4
9001f562:	f007 fd8a 	bl	9002707a <__cxa_guard_acquire>
9001f566:	b138      	cbz	r0, 9001f578 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
9001f568:	4620      	mov	r0, r4
9001f56a:	f007 fd92 	bl	90027092 <__cxa_guard_release>
9001f56e:	4a0f      	ldr	r2, [pc, #60]	; (9001f5ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
9001f570:	490f      	ldr	r1, [pc, #60]	; (9001f5b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
9001f572:	4810      	ldr	r0, [pc, #64]	; (9001f5b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
9001f574:	f007 fd7a 	bl	9002706c <__aeabi_atexit>
9001f578:	4c0f      	ldr	r4, [pc, #60]	; (9001f5b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
9001f57a:	7823      	ldrb	r3, [r4, #0]
9001f57c:	f3bf 8f5b 	dmb	ish
9001f580:	07db      	lsls	r3, r3, #31
9001f582:	d40b      	bmi.n	9001f59c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
9001f584:	4620      	mov	r0, r4
9001f586:	f007 fd78 	bl	9002707a <__cxa_guard_acquire>
9001f58a:	b138      	cbz	r0, 9001f59c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
9001f58c:	4620      	mov	r0, r4
9001f58e:	f007 fd80 	bl	90027092 <__cxa_guard_release>
9001f592:	4a06      	ldr	r2, [pc, #24]	; (9001f5ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
9001f594:	4909      	ldr	r1, [pc, #36]	; (9001f5bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
9001f596:	480a      	ldr	r0, [pc, #40]	; (9001f5c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
9001f598:	f007 fd68 	bl	9002706c <__aeabi_atexit>
9001f59c:	4b05      	ldr	r3, [pc, #20]	; (9001f5b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
9001f59e:	612b      	str	r3, [r5, #16]
9001f5a0:	4b07      	ldr	r3, [pc, #28]	; (9001f5c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
9001f5a2:	616b      	str	r3, [r5, #20]
9001f5a4:	bd38      	pop	{r3, r4, r5, pc}
9001f5a6:	bf00      	nop
9001f5a8:	24028268 	.word	0x24028268
9001f5ac:	24000000 	.word	0x24000000
9001f5b0:	9001d75d 	.word	0x9001d75d
9001f5b4:	240000ac 	.word	0x240000ac
9001f5b8:	2402826c 	.word	0x2402826c
9001f5bc:	9001d75b 	.word	0x9001d75b
9001f5c0:	240000b0 	.word	0x240000b0

9001f5c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
9001f5c4:	b538      	push	{r3, r4, r5, lr}
9001f5c6:	4c15      	ldr	r4, [pc, #84]	; (9001f61c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
9001f5c8:	4605      	mov	r5, r0
9001f5ca:	7823      	ldrb	r3, [r4, #0]
9001f5cc:	f3bf 8f5b 	dmb	ish
9001f5d0:	07da      	lsls	r2, r3, #31
9001f5d2:	d40b      	bmi.n	9001f5ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
9001f5d4:	4620      	mov	r0, r4
9001f5d6:	f007 fd50 	bl	9002707a <__cxa_guard_acquire>
9001f5da:	b138      	cbz	r0, 9001f5ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
9001f5dc:	4620      	mov	r0, r4
9001f5de:	f007 fd58 	bl	90027092 <__cxa_guard_release>
9001f5e2:	4a0f      	ldr	r2, [pc, #60]	; (9001f620 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
9001f5e4:	490f      	ldr	r1, [pc, #60]	; (9001f624 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
9001f5e6:	4810      	ldr	r0, [pc, #64]	; (9001f628 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
9001f5e8:	f007 fd40 	bl	9002706c <__aeabi_atexit>
9001f5ec:	4c0f      	ldr	r4, [pc, #60]	; (9001f62c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
9001f5ee:	7823      	ldrb	r3, [r4, #0]
9001f5f0:	f3bf 8f5b 	dmb	ish
9001f5f4:	07db      	lsls	r3, r3, #31
9001f5f6:	d40b      	bmi.n	9001f610 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
9001f5f8:	4620      	mov	r0, r4
9001f5fa:	f007 fd3e 	bl	9002707a <__cxa_guard_acquire>
9001f5fe:	b138      	cbz	r0, 9001f610 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
9001f600:	4620      	mov	r0, r4
9001f602:	f007 fd46 	bl	90027092 <__cxa_guard_release>
9001f606:	4a06      	ldr	r2, [pc, #24]	; (9001f620 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
9001f608:	4909      	ldr	r1, [pc, #36]	; (9001f630 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
9001f60a:	480a      	ldr	r0, [pc, #40]	; (9001f634 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
9001f60c:	f007 fd2e 	bl	9002706c <__aeabi_atexit>
9001f610:	4b05      	ldr	r3, [pc, #20]	; (9001f628 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
9001f612:	60ab      	str	r3, [r5, #8]
9001f614:	4b07      	ldr	r3, [pc, #28]	; (9001f634 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
9001f616:	60eb      	str	r3, [r5, #12]
9001f618:	bd38      	pop	{r3, r4, r5, pc}
9001f61a:	bf00      	nop
9001f61c:	24028240 	.word	0x24028240
9001f620:	24000000 	.word	0x24000000
9001f624:	9001d761 	.word	0x9001d761
9001f628:	24000084 	.word	0x24000084
9001f62c:	24028244 	.word	0x24028244
9001f630:	9001d75f 	.word	0x9001d75f
9001f634:	24000088 	.word	0x24000088

9001f638 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
9001f638:	b510      	push	{r4, lr}
9001f63a:	4604      	mov	r4, r0
9001f63c:	f7ff ff88 	bl	9001f550 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
9001f640:	4620      	mov	r0, r4
9001f642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001f646:	f7ff bfbd 	b.w	9001f5c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

9001f64c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
9001f64c:	b538      	push	{r3, r4, r5, lr}
9001f64e:	4c15      	ldr	r4, [pc, #84]	; (9001f6a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
9001f650:	4605      	mov	r5, r0
9001f652:	7823      	ldrb	r3, [r4, #0]
9001f654:	f3bf 8f5b 	dmb	ish
9001f658:	07da      	lsls	r2, r3, #31
9001f65a:	d40b      	bmi.n	9001f674 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
9001f65c:	4620      	mov	r0, r4
9001f65e:	f007 fd0c 	bl	9002707a <__cxa_guard_acquire>
9001f662:	b138      	cbz	r0, 9001f674 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
9001f664:	4620      	mov	r0, r4
9001f666:	f007 fd14 	bl	90027092 <__cxa_guard_release>
9001f66a:	4a0f      	ldr	r2, [pc, #60]	; (9001f6a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
9001f66c:	490f      	ldr	r1, [pc, #60]	; (9001f6ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
9001f66e:	4810      	ldr	r0, [pc, #64]	; (9001f6b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
9001f670:	f007 fcfc 	bl	9002706c <__aeabi_atexit>
9001f674:	4c0f      	ldr	r4, [pc, #60]	; (9001f6b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
9001f676:	7823      	ldrb	r3, [r4, #0]
9001f678:	f3bf 8f5b 	dmb	ish
9001f67c:	07db      	lsls	r3, r3, #31
9001f67e:	d40b      	bmi.n	9001f698 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
9001f680:	4620      	mov	r0, r4
9001f682:	f007 fcfa 	bl	9002707a <__cxa_guard_acquire>
9001f686:	b138      	cbz	r0, 9001f698 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
9001f688:	4620      	mov	r0, r4
9001f68a:	f007 fd02 	bl	90027092 <__cxa_guard_release>
9001f68e:	4a06      	ldr	r2, [pc, #24]	; (9001f6a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
9001f690:	4909      	ldr	r1, [pc, #36]	; (9001f6b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
9001f692:	480a      	ldr	r0, [pc, #40]	; (9001f6bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
9001f694:	f007 fcea 	bl	9002706c <__aeabi_atexit>
9001f698:	4b05      	ldr	r3, [pc, #20]	; (9001f6b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
9001f69a:	622b      	str	r3, [r5, #32]
9001f69c:	4b07      	ldr	r3, [pc, #28]	; (9001f6bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
9001f69e:	626b      	str	r3, [r5, #36]	; 0x24
9001f6a0:	bd38      	pop	{r3, r4, r5, pc}
9001f6a2:	bf00      	nop
9001f6a4:	24028270 	.word	0x24028270
9001f6a8:	24000000 	.word	0x24000000
9001f6ac:	9001d755 	.word	0x9001d755
9001f6b0:	240000b4 	.word	0x240000b4
9001f6b4:	24028274 	.word	0x24028274
9001f6b8:	9001d753 	.word	0x9001d753
9001f6bc:	240000b8 	.word	0x240000b8

9001f6c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
9001f6c0:	b538      	push	{r3, r4, r5, lr}
9001f6c2:	4c15      	ldr	r4, [pc, #84]	; (9001f718 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
9001f6c4:	4605      	mov	r5, r0
9001f6c6:	7823      	ldrb	r3, [r4, #0]
9001f6c8:	f3bf 8f5b 	dmb	ish
9001f6cc:	07da      	lsls	r2, r3, #31
9001f6ce:	d40b      	bmi.n	9001f6e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
9001f6d0:	4620      	mov	r0, r4
9001f6d2:	f007 fcd2 	bl	9002707a <__cxa_guard_acquire>
9001f6d6:	b138      	cbz	r0, 9001f6e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
9001f6d8:	4620      	mov	r0, r4
9001f6da:	f007 fcda 	bl	90027092 <__cxa_guard_release>
9001f6de:	4a0f      	ldr	r2, [pc, #60]	; (9001f71c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
9001f6e0:	490f      	ldr	r1, [pc, #60]	; (9001f720 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
9001f6e2:	4810      	ldr	r0, [pc, #64]	; (9001f724 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
9001f6e4:	f007 fcc2 	bl	9002706c <__aeabi_atexit>
9001f6e8:	4c0f      	ldr	r4, [pc, #60]	; (9001f728 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
9001f6ea:	7823      	ldrb	r3, [r4, #0]
9001f6ec:	f3bf 8f5b 	dmb	ish
9001f6f0:	07db      	lsls	r3, r3, #31
9001f6f2:	d40b      	bmi.n	9001f70c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
9001f6f4:	4620      	mov	r0, r4
9001f6f6:	f007 fcc0 	bl	9002707a <__cxa_guard_acquire>
9001f6fa:	b138      	cbz	r0, 9001f70c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
9001f6fc:	4620      	mov	r0, r4
9001f6fe:	f007 fcc8 	bl	90027092 <__cxa_guard_release>
9001f702:	4a06      	ldr	r2, [pc, #24]	; (9001f71c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
9001f704:	4909      	ldr	r1, [pc, #36]	; (9001f72c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
9001f706:	480a      	ldr	r0, [pc, #40]	; (9001f730 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
9001f708:	f007 fcb0 	bl	9002706c <__aeabi_atexit>
9001f70c:	4b05      	ldr	r3, [pc, #20]	; (9001f724 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
9001f70e:	61ab      	str	r3, [r5, #24]
9001f710:	4b07      	ldr	r3, [pc, #28]	; (9001f730 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
9001f712:	61eb      	str	r3, [r5, #28]
9001f714:	bd38      	pop	{r3, r4, r5, pc}
9001f716:	bf00      	nop
9001f718:	24028248 	.word	0x24028248
9001f71c:	24000000 	.word	0x24000000
9001f720:	9001d759 	.word	0x9001d759
9001f724:	2400008c 	.word	0x2400008c
9001f728:	2402824c 	.word	0x2402824c
9001f72c:	9001d757 	.word	0x9001d757
9001f730:	24000090 	.word	0x24000090

9001f734 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
9001f734:	b510      	push	{r4, lr}
9001f736:	4604      	mov	r4, r0
9001f738:	f7ff ff88 	bl	9001f64c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
9001f73c:	4620      	mov	r0, r4
9001f73e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001f742:	f7ff bfbd 	b.w	9001f6c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

9001f748 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
9001f748:	b538      	push	{r3, r4, r5, lr}
9001f74a:	4c15      	ldr	r4, [pc, #84]	; (9001f7a0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
9001f74c:	4605      	mov	r5, r0
9001f74e:	7823      	ldrb	r3, [r4, #0]
9001f750:	f3bf 8f5b 	dmb	ish
9001f754:	07da      	lsls	r2, r3, #31
9001f756:	d40b      	bmi.n	9001f770 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
9001f758:	4620      	mov	r0, r4
9001f75a:	f007 fc8e 	bl	9002707a <__cxa_guard_acquire>
9001f75e:	b138      	cbz	r0, 9001f770 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
9001f760:	4620      	mov	r0, r4
9001f762:	f007 fc96 	bl	90027092 <__cxa_guard_release>
9001f766:	4a0f      	ldr	r2, [pc, #60]	; (9001f7a4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
9001f768:	490f      	ldr	r1, [pc, #60]	; (9001f7a8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
9001f76a:	4810      	ldr	r0, [pc, #64]	; (9001f7ac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
9001f76c:	f007 fc7e 	bl	9002706c <__aeabi_atexit>
9001f770:	4c0f      	ldr	r4, [pc, #60]	; (9001f7b0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
9001f772:	7823      	ldrb	r3, [r4, #0]
9001f774:	f3bf 8f5b 	dmb	ish
9001f778:	07db      	lsls	r3, r3, #31
9001f77a:	d40b      	bmi.n	9001f794 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
9001f77c:	4620      	mov	r0, r4
9001f77e:	f007 fc7c 	bl	9002707a <__cxa_guard_acquire>
9001f782:	b138      	cbz	r0, 9001f794 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
9001f784:	4620      	mov	r0, r4
9001f786:	f007 fc84 	bl	90027092 <__cxa_guard_release>
9001f78a:	4a06      	ldr	r2, [pc, #24]	; (9001f7a4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
9001f78c:	4909      	ldr	r1, [pc, #36]	; (9001f7b4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
9001f78e:	480a      	ldr	r0, [pc, #40]	; (9001f7b8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
9001f790:	f007 fc6c 	bl	9002706c <__aeabi_atexit>
9001f794:	4b05      	ldr	r3, [pc, #20]	; (9001f7ac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
9001f796:	632b      	str	r3, [r5, #48]	; 0x30
9001f798:	4b07      	ldr	r3, [pc, #28]	; (9001f7b8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
9001f79a:	636b      	str	r3, [r5, #52]	; 0x34
9001f79c:	bd38      	pop	{r3, r4, r5, pc}
9001f79e:	bf00      	nop
9001f7a0:	24028280 	.word	0x24028280
9001f7a4:	24000000 	.word	0x24000000
9001f7a8:	9001d74d 	.word	0x9001d74d
9001f7ac:	240000c4 	.word	0x240000c4
9001f7b0:	24028284 	.word	0x24028284
9001f7b4:	9001d74b 	.word	0x9001d74b
9001f7b8:	240000c8 	.word	0x240000c8

9001f7bc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
9001f7bc:	b538      	push	{r3, r4, r5, lr}
9001f7be:	4c15      	ldr	r4, [pc, #84]	; (9001f814 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
9001f7c0:	4605      	mov	r5, r0
9001f7c2:	7823      	ldrb	r3, [r4, #0]
9001f7c4:	f3bf 8f5b 	dmb	ish
9001f7c8:	07da      	lsls	r2, r3, #31
9001f7ca:	d40b      	bmi.n	9001f7e4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
9001f7cc:	4620      	mov	r0, r4
9001f7ce:	f007 fc54 	bl	9002707a <__cxa_guard_acquire>
9001f7d2:	b138      	cbz	r0, 9001f7e4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
9001f7d4:	4620      	mov	r0, r4
9001f7d6:	f007 fc5c 	bl	90027092 <__cxa_guard_release>
9001f7da:	4a0f      	ldr	r2, [pc, #60]	; (9001f818 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
9001f7dc:	490f      	ldr	r1, [pc, #60]	; (9001f81c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
9001f7de:	4810      	ldr	r0, [pc, #64]	; (9001f820 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
9001f7e0:	f007 fc44 	bl	9002706c <__aeabi_atexit>
9001f7e4:	4c0f      	ldr	r4, [pc, #60]	; (9001f824 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
9001f7e6:	7823      	ldrb	r3, [r4, #0]
9001f7e8:	f3bf 8f5b 	dmb	ish
9001f7ec:	07db      	lsls	r3, r3, #31
9001f7ee:	d40b      	bmi.n	9001f808 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
9001f7f0:	4620      	mov	r0, r4
9001f7f2:	f007 fc42 	bl	9002707a <__cxa_guard_acquire>
9001f7f6:	b138      	cbz	r0, 9001f808 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
9001f7f8:	4620      	mov	r0, r4
9001f7fa:	f007 fc4a 	bl	90027092 <__cxa_guard_release>
9001f7fe:	4a06      	ldr	r2, [pc, #24]	; (9001f818 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
9001f800:	4909      	ldr	r1, [pc, #36]	; (9001f828 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
9001f802:	480a      	ldr	r0, [pc, #40]	; (9001f82c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
9001f804:	f007 fc32 	bl	9002706c <__aeabi_atexit>
9001f808:	4b05      	ldr	r3, [pc, #20]	; (9001f820 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
9001f80a:	62ab      	str	r3, [r5, #40]	; 0x28
9001f80c:	4b07      	ldr	r3, [pc, #28]	; (9001f82c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
9001f80e:	62eb      	str	r3, [r5, #44]	; 0x2c
9001f810:	bd38      	pop	{r3, r4, r5, pc}
9001f812:	bf00      	nop
9001f814:	24028250 	.word	0x24028250
9001f818:	24000000 	.word	0x24000000
9001f81c:	9001d751 	.word	0x9001d751
9001f820:	24000094 	.word	0x24000094
9001f824:	24028254 	.word	0x24028254
9001f828:	9001d74f 	.word	0x9001d74f
9001f82c:	24000098 	.word	0x24000098

9001f830 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
9001f830:	b510      	push	{r4, lr}
9001f832:	4604      	mov	r4, r0
9001f834:	f7ff ff88 	bl	9001f748 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
9001f838:	4620      	mov	r0, r4
9001f83a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001f83e:	f7ff bfbd 	b.w	9001f7bc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

9001f844 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
9001f844:	b538      	push	{r3, r4, r5, lr}
9001f846:	4c15      	ldr	r4, [pc, #84]	; (9001f89c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
9001f848:	4605      	mov	r5, r0
9001f84a:	7823      	ldrb	r3, [r4, #0]
9001f84c:	f3bf 8f5b 	dmb	ish
9001f850:	07da      	lsls	r2, r3, #31
9001f852:	d40b      	bmi.n	9001f86c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
9001f854:	4620      	mov	r0, r4
9001f856:	f007 fc10 	bl	9002707a <__cxa_guard_acquire>
9001f85a:	b138      	cbz	r0, 9001f86c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
9001f85c:	4620      	mov	r0, r4
9001f85e:	f007 fc18 	bl	90027092 <__cxa_guard_release>
9001f862:	4a0f      	ldr	r2, [pc, #60]	; (9001f8a0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
9001f864:	490f      	ldr	r1, [pc, #60]	; (9001f8a4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
9001f866:	4810      	ldr	r0, [pc, #64]	; (9001f8a8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
9001f868:	f007 fc00 	bl	9002706c <__aeabi_atexit>
9001f86c:	4c0f      	ldr	r4, [pc, #60]	; (9001f8ac <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
9001f86e:	7823      	ldrb	r3, [r4, #0]
9001f870:	f3bf 8f5b 	dmb	ish
9001f874:	07db      	lsls	r3, r3, #31
9001f876:	d40b      	bmi.n	9001f890 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
9001f878:	4620      	mov	r0, r4
9001f87a:	f007 fbfe 	bl	9002707a <__cxa_guard_acquire>
9001f87e:	b138      	cbz	r0, 9001f890 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
9001f880:	4620      	mov	r0, r4
9001f882:	f007 fc06 	bl	90027092 <__cxa_guard_release>
9001f886:	4a06      	ldr	r2, [pc, #24]	; (9001f8a0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
9001f888:	4909      	ldr	r1, [pc, #36]	; (9001f8b0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
9001f88a:	480a      	ldr	r0, [pc, #40]	; (9001f8b4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
9001f88c:	f007 fbee 	bl	9002706c <__aeabi_atexit>
9001f890:	4b05      	ldr	r3, [pc, #20]	; (9001f8a8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
9001f892:	652b      	str	r3, [r5, #80]	; 0x50
9001f894:	4b07      	ldr	r3, [pc, #28]	; (9001f8b4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
9001f896:	656b      	str	r3, [r5, #84]	; 0x54
9001f898:	bd38      	pop	{r3, r4, r5, pc}
9001f89a:	bf00      	nop
9001f89c:	24028288 	.word	0x24028288
9001f8a0:	24000000 	.word	0x24000000
9001f8a4:	9001d73d 	.word	0x9001d73d
9001f8a8:	240000cc 	.word	0x240000cc
9001f8ac:	2402828c 	.word	0x2402828c
9001f8b0:	9001d73b 	.word	0x9001d73b
9001f8b4:	240000d0 	.word	0x240000d0

9001f8b8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
9001f8b8:	b538      	push	{r3, r4, r5, lr}
9001f8ba:	4c15      	ldr	r4, [pc, #84]	; (9001f910 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
9001f8bc:	4605      	mov	r5, r0
9001f8be:	7823      	ldrb	r3, [r4, #0]
9001f8c0:	f3bf 8f5b 	dmb	ish
9001f8c4:	07da      	lsls	r2, r3, #31
9001f8c6:	d40b      	bmi.n	9001f8e0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
9001f8c8:	4620      	mov	r0, r4
9001f8ca:	f007 fbd6 	bl	9002707a <__cxa_guard_acquire>
9001f8ce:	b138      	cbz	r0, 9001f8e0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
9001f8d0:	4620      	mov	r0, r4
9001f8d2:	f007 fbde 	bl	90027092 <__cxa_guard_release>
9001f8d6:	4a0f      	ldr	r2, [pc, #60]	; (9001f914 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
9001f8d8:	490f      	ldr	r1, [pc, #60]	; (9001f918 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
9001f8da:	4810      	ldr	r0, [pc, #64]	; (9001f91c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
9001f8dc:	f007 fbc6 	bl	9002706c <__aeabi_atexit>
9001f8e0:	4c0f      	ldr	r4, [pc, #60]	; (9001f920 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
9001f8e2:	7823      	ldrb	r3, [r4, #0]
9001f8e4:	f3bf 8f5b 	dmb	ish
9001f8e8:	07db      	lsls	r3, r3, #31
9001f8ea:	d40b      	bmi.n	9001f904 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
9001f8ec:	4620      	mov	r0, r4
9001f8ee:	f007 fbc4 	bl	9002707a <__cxa_guard_acquire>
9001f8f2:	b138      	cbz	r0, 9001f904 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
9001f8f4:	4620      	mov	r0, r4
9001f8f6:	f007 fbcc 	bl	90027092 <__cxa_guard_release>
9001f8fa:	4a06      	ldr	r2, [pc, #24]	; (9001f914 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
9001f8fc:	4909      	ldr	r1, [pc, #36]	; (9001f924 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
9001f8fe:	480a      	ldr	r0, [pc, #40]	; (9001f928 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
9001f900:	f007 fbb4 	bl	9002706c <__aeabi_atexit>
9001f904:	4b05      	ldr	r3, [pc, #20]	; (9001f91c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
9001f906:	64ab      	str	r3, [r5, #72]	; 0x48
9001f908:	4b07      	ldr	r3, [pc, #28]	; (9001f928 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
9001f90a:	64eb      	str	r3, [r5, #76]	; 0x4c
9001f90c:	bd38      	pop	{r3, r4, r5, pc}
9001f90e:	bf00      	nop
9001f910:	24028290 	.word	0x24028290
9001f914:	24000000 	.word	0x24000000
9001f918:	9001d741 	.word	0x9001d741
9001f91c:	240000d4 	.word	0x240000d4
9001f920:	24028294 	.word	0x24028294
9001f924:	9001d73f 	.word	0x9001d73f
9001f928:	240000d8 	.word	0x240000d8

9001f92c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
9001f92c:	b538      	push	{r3, r4, r5, lr}
9001f92e:	4c15      	ldr	r4, [pc, #84]	; (9001f984 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
9001f930:	4605      	mov	r5, r0
9001f932:	7823      	ldrb	r3, [r4, #0]
9001f934:	f3bf 8f5b 	dmb	ish
9001f938:	07da      	lsls	r2, r3, #31
9001f93a:	d40b      	bmi.n	9001f954 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
9001f93c:	4620      	mov	r0, r4
9001f93e:	f007 fb9c 	bl	9002707a <__cxa_guard_acquire>
9001f942:	b138      	cbz	r0, 9001f954 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
9001f944:	4620      	mov	r0, r4
9001f946:	f007 fba4 	bl	90027092 <__cxa_guard_release>
9001f94a:	4a0f      	ldr	r2, [pc, #60]	; (9001f988 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
9001f94c:	490f      	ldr	r1, [pc, #60]	; (9001f98c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
9001f94e:	4810      	ldr	r0, [pc, #64]	; (9001f990 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
9001f950:	f007 fb8c 	bl	9002706c <__aeabi_atexit>
9001f954:	4c0f      	ldr	r4, [pc, #60]	; (9001f994 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
9001f956:	7823      	ldrb	r3, [r4, #0]
9001f958:	f3bf 8f5b 	dmb	ish
9001f95c:	07db      	lsls	r3, r3, #31
9001f95e:	d40b      	bmi.n	9001f978 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
9001f960:	4620      	mov	r0, r4
9001f962:	f007 fb8a 	bl	9002707a <__cxa_guard_acquire>
9001f966:	b138      	cbz	r0, 9001f978 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
9001f968:	4620      	mov	r0, r4
9001f96a:	f007 fb92 	bl	90027092 <__cxa_guard_release>
9001f96e:	4a06      	ldr	r2, [pc, #24]	; (9001f988 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
9001f970:	4909      	ldr	r1, [pc, #36]	; (9001f998 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
9001f972:	480a      	ldr	r0, [pc, #40]	; (9001f99c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
9001f974:	f007 fb7a 	bl	9002706c <__aeabi_atexit>
9001f978:	4b05      	ldr	r3, [pc, #20]	; (9001f990 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
9001f97a:	642b      	str	r3, [r5, #64]	; 0x40
9001f97c:	4b07      	ldr	r3, [pc, #28]	; (9001f99c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
9001f97e:	646b      	str	r3, [r5, #68]	; 0x44
9001f980:	bd38      	pop	{r3, r4, r5, pc}
9001f982:	bf00      	nop
9001f984:	24028258 	.word	0x24028258
9001f988:	24000000 	.word	0x24000000
9001f98c:	9001d745 	.word	0x9001d745
9001f990:	2400009c 	.word	0x2400009c
9001f994:	2402825c 	.word	0x2402825c
9001f998:	9001d743 	.word	0x9001d743
9001f99c:	240000a0 	.word	0x240000a0

9001f9a0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
9001f9a0:	b538      	push	{r3, r4, r5, lr}
9001f9a2:	4c15      	ldr	r4, [pc, #84]	; (9001f9f8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
9001f9a4:	4605      	mov	r5, r0
9001f9a6:	7823      	ldrb	r3, [r4, #0]
9001f9a8:	f3bf 8f5b 	dmb	ish
9001f9ac:	07da      	lsls	r2, r3, #31
9001f9ae:	d40b      	bmi.n	9001f9c8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
9001f9b0:	4620      	mov	r0, r4
9001f9b2:	f007 fb62 	bl	9002707a <__cxa_guard_acquire>
9001f9b6:	b138      	cbz	r0, 9001f9c8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
9001f9b8:	4620      	mov	r0, r4
9001f9ba:	f007 fb6a 	bl	90027092 <__cxa_guard_release>
9001f9be:	4a0f      	ldr	r2, [pc, #60]	; (9001f9fc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
9001f9c0:	490f      	ldr	r1, [pc, #60]	; (9001fa00 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
9001f9c2:	4810      	ldr	r0, [pc, #64]	; (9001fa04 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
9001f9c4:	f007 fb52 	bl	9002706c <__aeabi_atexit>
9001f9c8:	4c0f      	ldr	r4, [pc, #60]	; (9001fa08 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
9001f9ca:	7823      	ldrb	r3, [r4, #0]
9001f9cc:	f3bf 8f5b 	dmb	ish
9001f9d0:	07db      	lsls	r3, r3, #31
9001f9d2:	d40b      	bmi.n	9001f9ec <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
9001f9d4:	4620      	mov	r0, r4
9001f9d6:	f007 fb50 	bl	9002707a <__cxa_guard_acquire>
9001f9da:	b138      	cbz	r0, 9001f9ec <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
9001f9dc:	4620      	mov	r0, r4
9001f9de:	f007 fb58 	bl	90027092 <__cxa_guard_release>
9001f9e2:	4a06      	ldr	r2, [pc, #24]	; (9001f9fc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
9001f9e4:	4909      	ldr	r1, [pc, #36]	; (9001fa0c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
9001f9e6:	480a      	ldr	r0, [pc, #40]	; (9001fa10 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
9001f9e8:	f007 fb40 	bl	9002706c <__aeabi_atexit>
9001f9ec:	4b05      	ldr	r3, [pc, #20]	; (9001fa04 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
9001f9ee:	63ab      	str	r3, [r5, #56]	; 0x38
9001f9f0:	4b07      	ldr	r3, [pc, #28]	; (9001fa10 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
9001f9f2:	63eb      	str	r3, [r5, #60]	; 0x3c
9001f9f4:	bd38      	pop	{r3, r4, r5, pc}
9001f9f6:	bf00      	nop
9001f9f8:	24028278 	.word	0x24028278
9001f9fc:	24000000 	.word	0x24000000
9001fa00:	9001d749 	.word	0x9001d749
9001fa04:	240000bc 	.word	0x240000bc
9001fa08:	2402827c 	.word	0x2402827c
9001fa0c:	9001d747 	.word	0x9001d747
9001fa10:	240000c0 	.word	0x240000c0

9001fa14 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
9001fa14:	b510      	push	{r4, lr}
9001fa16:	4604      	mov	r4, r0
9001fa18:	f7ff ff14 	bl	9001f844 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
9001fa1c:	4620      	mov	r0, r4
9001fa1e:	f7ff ff85 	bl	9001f92c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
9001fa22:	4620      	mov	r0, r4
9001fa24:	f7ff ff48 	bl	9001f8b8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
9001fa28:	4620      	mov	r0, r4
9001fa2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001fa2e:	f7ff bfb7 	b.w	9001f9a0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

9001fa34 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
9001fa34:	b538      	push	{r3, r4, r5, lr}
9001fa36:	4c15      	ldr	r4, [pc, #84]	; (9001fa8c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
9001fa38:	4605      	mov	r5, r0
9001fa3a:	7823      	ldrb	r3, [r4, #0]
9001fa3c:	f3bf 8f5b 	dmb	ish
9001fa40:	07da      	lsls	r2, r3, #31
9001fa42:	d40b      	bmi.n	9001fa5c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
9001fa44:	4620      	mov	r0, r4
9001fa46:	f007 fb18 	bl	9002707a <__cxa_guard_acquire>
9001fa4a:	b138      	cbz	r0, 9001fa5c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
9001fa4c:	4620      	mov	r0, r4
9001fa4e:	f007 fb20 	bl	90027092 <__cxa_guard_release>
9001fa52:	4a0f      	ldr	r2, [pc, #60]	; (9001fa90 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
9001fa54:	490f      	ldr	r1, [pc, #60]	; (9001fa94 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
9001fa56:	4810      	ldr	r0, [pc, #64]	; (9001fa98 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
9001fa58:	f007 fb08 	bl	9002706c <__aeabi_atexit>
9001fa5c:	4c0f      	ldr	r4, [pc, #60]	; (9001fa9c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
9001fa5e:	7823      	ldrb	r3, [r4, #0]
9001fa60:	f3bf 8f5b 	dmb	ish
9001fa64:	07db      	lsls	r3, r3, #31
9001fa66:	d40b      	bmi.n	9001fa80 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
9001fa68:	4620      	mov	r0, r4
9001fa6a:	f007 fb06 	bl	9002707a <__cxa_guard_acquire>
9001fa6e:	b138      	cbz	r0, 9001fa80 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
9001fa70:	4620      	mov	r0, r4
9001fa72:	f007 fb0e 	bl	90027092 <__cxa_guard_release>
9001fa76:	4a06      	ldr	r2, [pc, #24]	; (9001fa90 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
9001fa78:	4909      	ldr	r1, [pc, #36]	; (9001faa0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
9001fa7a:	480a      	ldr	r0, [pc, #40]	; (9001faa4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
9001fa7c:	f007 faf6 	bl	9002706c <__aeabi_atexit>
9001fa80:	4b05      	ldr	r3, [pc, #20]	; (9001fa98 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
9001fa82:	662b      	str	r3, [r5, #96]	; 0x60
9001fa84:	4b07      	ldr	r3, [pc, #28]	; (9001faa4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
9001fa86:	666b      	str	r3, [r5, #100]	; 0x64
9001fa88:	bd38      	pop	{r3, r4, r5, pc}
9001fa8a:	bf00      	nop
9001fa8c:	24028260 	.word	0x24028260
9001fa90:	24000000 	.word	0x24000000
9001fa94:	9001d735 	.word	0x9001d735
9001fa98:	240000a4 	.word	0x240000a4
9001fa9c:	24028264 	.word	0x24028264
9001faa0:	9001d733 	.word	0x9001d733
9001faa4:	240000a8 	.word	0x240000a8

9001faa8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
9001faa8:	b538      	push	{r3, r4, r5, lr}
9001faaa:	4c15      	ldr	r4, [pc, #84]	; (9001fb00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
9001faac:	4605      	mov	r5, r0
9001faae:	7823      	ldrb	r3, [r4, #0]
9001fab0:	f3bf 8f5b 	dmb	ish
9001fab4:	07da      	lsls	r2, r3, #31
9001fab6:	d40b      	bmi.n	9001fad0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
9001fab8:	4620      	mov	r0, r4
9001faba:	f007 fade 	bl	9002707a <__cxa_guard_acquire>
9001fabe:	b138      	cbz	r0, 9001fad0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
9001fac0:	4620      	mov	r0, r4
9001fac2:	f007 fae6 	bl	90027092 <__cxa_guard_release>
9001fac6:	4a0f      	ldr	r2, [pc, #60]	; (9001fb04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
9001fac8:	490f      	ldr	r1, [pc, #60]	; (9001fb08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
9001faca:	4810      	ldr	r0, [pc, #64]	; (9001fb0c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
9001facc:	f007 face 	bl	9002706c <__aeabi_atexit>
9001fad0:	4c0f      	ldr	r4, [pc, #60]	; (9001fb10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
9001fad2:	7823      	ldrb	r3, [r4, #0]
9001fad4:	f3bf 8f5b 	dmb	ish
9001fad8:	07db      	lsls	r3, r3, #31
9001fada:	d40b      	bmi.n	9001faf4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
9001fadc:	4620      	mov	r0, r4
9001fade:	f007 facc 	bl	9002707a <__cxa_guard_acquire>
9001fae2:	b138      	cbz	r0, 9001faf4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
9001fae4:	4620      	mov	r0, r4
9001fae6:	f007 fad4 	bl	90027092 <__cxa_guard_release>
9001faea:	4a06      	ldr	r2, [pc, #24]	; (9001fb04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
9001faec:	4909      	ldr	r1, [pc, #36]	; (9001fb14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
9001faee:	480a      	ldr	r0, [pc, #40]	; (9001fb18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
9001faf0:	f007 fabc 	bl	9002706c <__aeabi_atexit>
9001faf4:	4b05      	ldr	r3, [pc, #20]	; (9001fb0c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
9001faf6:	65ab      	str	r3, [r5, #88]	; 0x58
9001faf8:	4b07      	ldr	r3, [pc, #28]	; (9001fb18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
9001fafa:	65eb      	str	r3, [r5, #92]	; 0x5c
9001fafc:	bd38      	pop	{r3, r4, r5, pc}
9001fafe:	bf00      	nop
9001fb00:	24028238 	.word	0x24028238
9001fb04:	24000000 	.word	0x24000000
9001fb08:	9001d739 	.word	0x9001d739
9001fb0c:	2400007c 	.word	0x2400007c
9001fb10:	2402823c 	.word	0x2402823c
9001fb14:	9001d737 	.word	0x9001d737
9001fb18:	24000080 	.word	0x24000080

9001fb1c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
9001fb1c:	b510      	push	{r4, lr}
9001fb1e:	4604      	mov	r4, r0
9001fb20:	f7ff ff88 	bl	9001fa34 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
9001fb24:	4620      	mov	r0, r4
9001fb26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001fb2a:	f7ff bfbd 	b.w	9001faa8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

9001fb30 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
9001fb30:	b538      	push	{r3, r4, r5, lr}
9001fb32:	4c15      	ldr	r4, [pc, #84]	; (9001fb88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
9001fb34:	4605      	mov	r5, r0
9001fb36:	7823      	ldrb	r3, [r4, #0]
9001fb38:	f3bf 8f5b 	dmb	ish
9001fb3c:	07da      	lsls	r2, r3, #31
9001fb3e:	d40b      	bmi.n	9001fb58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
9001fb40:	4620      	mov	r0, r4
9001fb42:	f007 fa9a 	bl	9002707a <__cxa_guard_acquire>
9001fb46:	b138      	cbz	r0, 9001fb58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
9001fb48:	4620      	mov	r0, r4
9001fb4a:	f007 faa2 	bl	90027092 <__cxa_guard_release>
9001fb4e:	4a0f      	ldr	r2, [pc, #60]	; (9001fb8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
9001fb50:	490f      	ldr	r1, [pc, #60]	; (9001fb90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
9001fb52:	4810      	ldr	r0, [pc, #64]	; (9001fb94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
9001fb54:	f007 fa8a 	bl	9002706c <__aeabi_atexit>
9001fb58:	4c0f      	ldr	r4, [pc, #60]	; (9001fb98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
9001fb5a:	7823      	ldrb	r3, [r4, #0]
9001fb5c:	f3bf 8f5b 	dmb	ish
9001fb60:	07db      	lsls	r3, r3, #31
9001fb62:	d40b      	bmi.n	9001fb7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
9001fb64:	4620      	mov	r0, r4
9001fb66:	f007 fa88 	bl	9002707a <__cxa_guard_acquire>
9001fb6a:	b138      	cbz	r0, 9001fb7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
9001fb6c:	4620      	mov	r0, r4
9001fb6e:	f007 fa90 	bl	90027092 <__cxa_guard_release>
9001fb72:	4a06      	ldr	r2, [pc, #24]	; (9001fb8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
9001fb74:	4909      	ldr	r1, [pc, #36]	; (9001fb9c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
9001fb76:	480a      	ldr	r0, [pc, #40]	; (9001fba0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
9001fb78:	f007 fa78 	bl	9002706c <__aeabi_atexit>
9001fb7c:	4b05      	ldr	r3, [pc, #20]	; (9001fb94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
9001fb7e:	672b      	str	r3, [r5, #112]	; 0x70
9001fb80:	4b07      	ldr	r3, [pc, #28]	; (9001fba0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
9001fb82:	676b      	str	r3, [r5, #116]	; 0x74
9001fb84:	bd38      	pop	{r3, r4, r5, pc}
9001fb86:	bf00      	nop
9001fb88:	24028230 	.word	0x24028230
9001fb8c:	24000000 	.word	0x24000000
9001fb90:	9001d72d 	.word	0x9001d72d
9001fb94:	24000074 	.word	0x24000074
9001fb98:	24028234 	.word	0x24028234
9001fb9c:	9001d72b 	.word	0x9001d72b
9001fba0:	24000078 	.word	0x24000078

9001fba4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
9001fba4:	b538      	push	{r3, r4, r5, lr}
9001fba6:	4c15      	ldr	r4, [pc, #84]	; (9001fbfc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
9001fba8:	4605      	mov	r5, r0
9001fbaa:	7823      	ldrb	r3, [r4, #0]
9001fbac:	f3bf 8f5b 	dmb	ish
9001fbb0:	07da      	lsls	r2, r3, #31
9001fbb2:	d40b      	bmi.n	9001fbcc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
9001fbb4:	4620      	mov	r0, r4
9001fbb6:	f007 fa60 	bl	9002707a <__cxa_guard_acquire>
9001fbba:	b138      	cbz	r0, 9001fbcc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
9001fbbc:	4620      	mov	r0, r4
9001fbbe:	f007 fa68 	bl	90027092 <__cxa_guard_release>
9001fbc2:	4a0f      	ldr	r2, [pc, #60]	; (9001fc00 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
9001fbc4:	490f      	ldr	r1, [pc, #60]	; (9001fc04 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
9001fbc6:	4810      	ldr	r0, [pc, #64]	; (9001fc08 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
9001fbc8:	f007 fa50 	bl	9002706c <__aeabi_atexit>
9001fbcc:	4c0f      	ldr	r4, [pc, #60]	; (9001fc0c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
9001fbce:	7823      	ldrb	r3, [r4, #0]
9001fbd0:	f3bf 8f5b 	dmb	ish
9001fbd4:	07db      	lsls	r3, r3, #31
9001fbd6:	d40b      	bmi.n	9001fbf0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
9001fbd8:	4620      	mov	r0, r4
9001fbda:	f007 fa4e 	bl	9002707a <__cxa_guard_acquire>
9001fbde:	b138      	cbz	r0, 9001fbf0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
9001fbe0:	4620      	mov	r0, r4
9001fbe2:	f007 fa56 	bl	90027092 <__cxa_guard_release>
9001fbe6:	4a06      	ldr	r2, [pc, #24]	; (9001fc00 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
9001fbe8:	4909      	ldr	r1, [pc, #36]	; (9001fc10 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
9001fbea:	480a      	ldr	r0, [pc, #40]	; (9001fc14 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
9001fbec:	f007 fa3e 	bl	9002706c <__aeabi_atexit>
9001fbf0:	4b05      	ldr	r3, [pc, #20]	; (9001fc08 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
9001fbf2:	66ab      	str	r3, [r5, #104]	; 0x68
9001fbf4:	4b07      	ldr	r3, [pc, #28]	; (9001fc14 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
9001fbf6:	66eb      	str	r3, [r5, #108]	; 0x6c
9001fbf8:	bd38      	pop	{r3, r4, r5, pc}
9001fbfa:	bf00      	nop
9001fbfc:	24028228 	.word	0x24028228
9001fc00:	24000000 	.word	0x24000000
9001fc04:	9001d731 	.word	0x9001d731
9001fc08:	2400006c 	.word	0x2400006c
9001fc0c:	2402822c 	.word	0x2402822c
9001fc10:	9001d72f 	.word	0x9001d72f
9001fc14:	24000070 	.word	0x24000070

9001fc18 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
9001fc18:	b510      	push	{r4, lr}
9001fc1a:	4604      	mov	r4, r0
9001fc1c:	f7ff ff88 	bl	9001fb30 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
9001fc20:	4620      	mov	r0, r4
9001fc22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001fc26:	f7ff bfbd 	b.w	9001fba4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

9001fc2a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
9001fc2a:	b510      	push	{r4, lr}
9001fc2c:	4604      	mov	r4, r0
9001fc2e:	f7ff fff3 	bl	9001fc18 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
9001fc32:	4620      	mov	r0, r4
9001fc34:	f7ff ff72 	bl	9001fb1c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
9001fc38:	4620      	mov	r0, r4
9001fc3a:	f7ff fdf9 	bl	9001f830 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
9001fc3e:	4620      	mov	r0, r4
9001fc40:	f7ff fcfa 	bl	9001f638 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
9001fc44:	4620      	mov	r0, r4
9001fc46:	f7ff fd75 	bl	9001f734 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
9001fc4a:	4620      	mov	r0, r4
9001fc4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001fc50:	f7ff bee0 	b.w	9001fa14 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

9001fc54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
9001fc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001fc58:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
9001fc5c:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
9001fc60:	2d00      	cmp	r5, #0
9001fc62:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
9001fc66:	fb05 4c0e 	mla	ip, r5, lr, r4
9001fc6a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
9001fc6e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
9001fc72:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
9001fc76:	eb02 0a0c 	add.w	sl, r2, ip
9001fc7a:	8808      	ldrh	r0, [r1, #0]
9001fc7c:	f2c0 80b0 	blt.w	9001fde0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
9001fc80:	45ab      	cmp	fp, r5
9001fc82:	f340 80ad 	ble.w	9001fde0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
9001fc86:	2c00      	cmp	r4, #0
9001fc88:	f2c0 80a8 	blt.w	9001fddc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
9001fc8c:	45a6      	cmp	lr, r4
9001fc8e:	f340 80a5 	ble.w	9001fddc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
9001fc92:	f812 200c 	ldrb.w	r2, [r2, ip]
9001fc96:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
9001fc9a:	1c62      	adds	r2, r4, #1
9001fc9c:	f100 80a3 	bmi.w	9001fde6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001fca0:	4596      	cmp	lr, r2
9001fca2:	f340 80a0 	ble.w	9001fde6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001fca6:	f1b9 0f00 	cmp.w	r9, #0
9001fcaa:	f000 809c 	beq.w	9001fde6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001fcae:	f89a 2001 	ldrb.w	r2, [sl, #1]
9001fcb2:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
9001fcb6:	3501      	adds	r5, #1
9001fcb8:	f100 8099 	bmi.w	9001fdee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001fcbc:	45ab      	cmp	fp, r5
9001fcbe:	f340 8096 	ble.w	9001fdee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001fcc2:	2f00      	cmp	r7, #0
9001fcc4:	f000 8093 	beq.w	9001fdee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001fcc8:	2c00      	cmp	r4, #0
9001fcca:	f2c0 808e 	blt.w	9001fdea <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
9001fcce:	45a6      	cmp	lr, r4
9001fcd0:	f340 808b 	ble.w	9001fdea <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
9001fcd4:	f81a 200e 	ldrb.w	r2, [sl, lr]
9001fcd8:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
9001fcdc:	3401      	adds	r4, #1
9001fcde:	f100 8089 	bmi.w	9001fdf4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001fce2:	45a6      	cmp	lr, r4
9001fce4:	f340 8086 	ble.w	9001fdf4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001fce8:	f1b9 0f00 	cmp.w	r9, #0
9001fcec:	f000 8082 	beq.w	9001fdf4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001fcf0:	44d6      	add	lr, sl
9001fcf2:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001fcf6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
9001fcfa:	ea4f 4408 	mov.w	r4, r8, lsl #16
9001fcfe:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
9001fd02:	fb19 fe07 	smulbb	lr, r9, r7
9001fd06:	f1c7 0210 	rsb	r2, r7, #16
9001fd0a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001fd0e:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
9001fd12:	eba2 0209 	sub.w	r2, r2, r9
9001fd16:	ea44 0808 	orr.w	r8, r4, r8
9001fd1a:	ea4f 440c 	mov.w	r4, ip, lsl #16
9001fd1e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001fd22:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
9001fd26:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001fd2a:	ebce 0747 	rsb	r7, lr, r7, lsl #1
9001fd2e:	ea44 0c0c 	orr.w	ip, r4, ip
9001fd32:	ebce 0449 	rsb	r4, lr, r9, lsl #1
9001fd36:	fb04 f40c 	mul.w	r4, r4, ip
9001fd3a:	fb02 4808 	mla	r8, r2, r8, r4
9001fd3e:	041a      	lsls	r2, r3, #16
9001fd40:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001fd44:	b2b4      	uxth	r4, r6
9001fd46:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001fd4a:	43f6      	mvns	r6, r6
9001fd4c:	4313      	orrs	r3, r2
9001fd4e:	042a      	lsls	r2, r5, #16
9001fd50:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001fd54:	b2f6      	uxtb	r6, r6
9001fd56:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001fd5a:	fb0e 8303 	mla	r3, lr, r3, r8
9001fd5e:	432a      	orrs	r2, r5
9001fd60:	fb07 3202 	mla	r2, r7, r2, r3
9001fd64:	10c7      	asrs	r7, r0, #3
9001fd66:	0d53      	lsrs	r3, r2, #21
9001fd68:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001fd6c:	0952      	lsrs	r2, r2, #5
9001fd6e:	fb17 f706 	smulbb	r7, r7, r6
9001fd72:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001fd76:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001fd7a:	431a      	orrs	r2, r3
9001fd7c:	b293      	uxth	r3, r2
9001fd7e:	1202      	asrs	r2, r0, #8
9001fd80:	121d      	asrs	r5, r3, #8
9001fd82:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9001fd86:	00c0      	lsls	r0, r0, #3
9001fd88:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001fd8c:	fb12 f206 	smulbb	r2, r2, r6
9001fd90:	b2c0      	uxtb	r0, r0
9001fd92:	fb05 2504 	mla	r5, r5, r4, r2
9001fd96:	10da      	asrs	r2, r3, #3
9001fd98:	fb10 f006 	smulbb	r0, r0, r6
9001fd9c:	00db      	lsls	r3, r3, #3
9001fd9e:	b2ad      	uxth	r5, r5
9001fda0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001fda4:	b2db      	uxtb	r3, r3
9001fda6:	fb02 7204 	mla	r2, r2, r4, r7
9001fdaa:	fb03 0004 	mla	r0, r3, r4, r0
9001fdae:	1c6b      	adds	r3, r5, #1
9001fdb0:	b292      	uxth	r2, r2
9001fdb2:	b280      	uxth	r0, r0
9001fdb4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001fdb8:	1c43      	adds	r3, r0, #1
9001fdba:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001fdbe:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001fdc2:	1c50      	adds	r0, r2, #1
9001fdc4:	eb00 2212 	add.w	r2, r0, r2, lsr #8
9001fdc8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001fdcc:	0952      	lsrs	r2, r2, #5
9001fdce:	432b      	orrs	r3, r5
9001fdd0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001fdd4:	4313      	orrs	r3, r2
9001fdd6:	800b      	strh	r3, [r1, #0]
9001fdd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001fddc:	4680      	mov	r8, r0
9001fdde:	e75c      	b.n	9001fc9a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
9001fde0:	4684      	mov	ip, r0
9001fde2:	4680      	mov	r8, r0
9001fde4:	e767      	b.n	9001fcb6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
9001fde6:	4684      	mov	ip, r0
9001fde8:	e765      	b.n	9001fcb6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
9001fdea:	4605      	mov	r5, r0
9001fdec:	e776      	b.n	9001fcdc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
9001fdee:	4603      	mov	r3, r0
9001fdf0:	4605      	mov	r5, r0
9001fdf2:	e782      	b.n	9001fcfa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
9001fdf4:	4603      	mov	r3, r0
9001fdf6:	e780      	b.n	9001fcfa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

9001fdf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001fdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001fdfc:	b099      	sub	sp, #100	; 0x64
9001fdfe:	9215      	str	r2, [sp, #84]	; 0x54
9001fe00:	9309      	str	r3, [sp, #36]	; 0x24
9001fe02:	9a27      	ldr	r2, [sp, #156]	; 0x9c
9001fe04:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
9001fe08:	9016      	str	r0, [sp, #88]	; 0x58
9001fe0a:	930d      	str	r3, [sp, #52]	; 0x34
9001fe0c:	6850      	ldr	r0, [r2, #4]
9001fe0e:	910c      	str	r1, [sp, #48]	; 0x30
9001fe10:	6812      	ldr	r2, [r2, #0]
9001fe12:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
9001fe16:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
9001fe1a:	fb00 1303 	mla	r3, r0, r3, r1
9001fe1e:	eb02 0843 	add.w	r8, r2, r3, lsl #1
9001fe22:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001fe24:	681b      	ldr	r3, [r3, #0]
9001fe26:	930b      	str	r3, [sp, #44]	; 0x2c
9001fe28:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001fe2a:	685e      	ldr	r6, [r3, #4]
9001fe2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001fe2e:	3604      	adds	r6, #4
9001fe30:	43db      	mvns	r3, r3
9001fe32:	b2db      	uxtb	r3, r3
9001fe34:	930a      	str	r3, [sp, #40]	; 0x28
9001fe36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001fe38:	2b00      	cmp	r3, #0
9001fe3a:	dc03      	bgt.n	9001fe44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001fe3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
9001fe3e:	2b00      	cmp	r3, #0
9001fe40:	f340 8225 	ble.w	9002028e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
9001fe44:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001fe46:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001fe4a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001fe4e:	1e48      	subs	r0, r1, #1
9001fe50:	1e57      	subs	r7, r2, #1
9001fe52:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001fe54:	2b00      	cmp	r3, #0
9001fe56:	f340 80e3 	ble.w	90020020 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
9001fe5a:	ea5f 4c2a 	movs.w	ip, sl, asr #16
9001fe5e:	ea4f 4325 	mov.w	r3, r5, asr #16
9001fe62:	d406      	bmi.n	9001fe72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001fe64:	4584      	cmp	ip, r0
9001fe66:	da04      	bge.n	9001fe72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001fe68:	2b00      	cmp	r3, #0
9001fe6a:	db02      	blt.n	9001fe72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001fe6c:	42bb      	cmp	r3, r7
9001fe6e:	f2c0 80d8 	blt.w	90020022 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9001fe72:	f11c 0c01 	adds.w	ip, ip, #1
9001fe76:	f100 80c9 	bmi.w	9002000c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001fe7a:	4561      	cmp	r1, ip
9001fe7c:	f2c0 80c6 	blt.w	9002000c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001fe80:	3301      	adds	r3, #1
9001fe82:	f100 80c3 	bmi.w	9002000c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001fe86:	429a      	cmp	r2, r3
9001fe88:	f2c0 80c0 	blt.w	9002000c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001fe8c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
9001fe90:	4647      	mov	r7, r8
9001fe92:	f1bb 0f00 	cmp.w	fp, #0
9001fe96:	f340 80e3 	ble.w	90020060 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
9001fe9a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
9001fe9c:	ea4f 4c25 	mov.w	ip, r5, asr #16
9001fea0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001fea2:	f3ca 3003 	ubfx	r0, sl, #12, #4
9001fea6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
9001feaa:	ea5f 422a 	movs.w	r2, sl, asr #16
9001feae:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001feb2:	689b      	ldr	r3, [r3, #8]
9001feb4:	f100 8121 	bmi.w	900200fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001feb8:	f103 39ff 	add.w	r9, r3, #4294967295
9001febc:	454a      	cmp	r2, r9
9001febe:	f280 811c 	bge.w	900200fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001fec2:	f1bc 0f00 	cmp.w	ip, #0
9001fec6:	f2c0 8118 	blt.w	900200fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001feca:	f10e 39ff 	add.w	r9, lr, #4294967295
9001fece:	45cc      	cmp	ip, r9
9001fed0:	f280 8113 	bge.w	900200fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001fed4:	b21b      	sxth	r3, r3
9001fed6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001fed8:	fb0c 2203 	mla	r2, ip, r3, r2
9001fedc:	eb04 0902 	add.w	r9, r4, r2
9001fee0:	5ca2      	ldrb	r2, [r4, r2]
9001fee2:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
9001fee6:	2800      	cmp	r0, #0
9001fee8:	f000 80fe 	beq.w	900200e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
9001feec:	f899 2001 	ldrb.w	r2, [r9, #1]
9001fef0:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
9001fef4:	9211      	str	r2, [sp, #68]	; 0x44
9001fef6:	b151      	cbz	r1, 9001ff0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001fef8:	eb09 0203 	add.w	r2, r9, r3
9001fefc:	f819 3003 	ldrb.w	r3, [r9, r3]
9001ff00:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001ff04:	930f      	str	r3, [sp, #60]	; 0x3c
9001ff06:	7853      	ldrb	r3, [r2, #1]
9001ff08:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001ff0c:	9312      	str	r3, [sp, #72]	; 0x48
9001ff0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001ff10:	fb10 f201 	smulbb	r2, r0, r1
9001ff14:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001ff16:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001ff1a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001ff1e:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
9001ff22:	10d2      	asrs	r2, r2, #3
9001ff24:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001ff28:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
9001ff2c:	ea4c 0c03 	orr.w	ip, ip, r3
9001ff30:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001ff32:	041b      	lsls	r3, r3, #16
9001ff34:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001ff38:	4323      	orrs	r3, r4
9001ff3a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001ff3c:	4353      	muls	r3, r2
9001ff3e:	fb09 330c 	mla	r3, r9, ip, r3
9001ff42:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
9001ff46:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001ff4a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001ff4e:	ea4c 0e0e 	orr.w	lr, ip, lr
9001ff52:	f1c1 0c10 	rsb	ip, r1, #16
9001ff56:	ebac 0c00 	sub.w	ip, ip, r0
9001ff5a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9001ff5e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
9001ff62:	fb0c 3c0e 	mla	ip, ip, lr, r3
9001ff66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001ff68:	0418      	lsls	r0, r3, #16
9001ff6a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001ff6e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9001ff72:	4318      	orrs	r0, r3
9001ff74:	fb02 c200 	mla	r2, r2, r0, ip
9001ff78:	8838      	ldrh	r0, [r7, #0]
9001ff7a:	0d53      	lsrs	r3, r2, #21
9001ff7c:	0952      	lsrs	r2, r2, #5
9001ff7e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001ff82:	1201      	asrs	r1, r0, #8
9001ff84:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001ff88:	ea4f 0ee0 	mov.w	lr, r0, asr #3
9001ff8c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001ff90:	00c0      	lsls	r0, r0, #3
9001ff92:	431a      	orrs	r2, r3
9001ff94:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
9001ff98:	fb11 f104 	smulbb	r1, r1, r4
9001ff9c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
9001ffa0:	b292      	uxth	r2, r2
9001ffa2:	fb1e fe04 	smulbb	lr, lr, r4
9001ffa6:	b2c0      	uxtb	r0, r0
9001ffa8:	ea4f 2c22 	mov.w	ip, r2, asr #8
9001ffac:	fb10 f004 	smulbb	r0, r0, r4
9001ffb0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001ffb4:	fb0c 1c03 	mla	ip, ip, r3, r1
9001ffb8:	10d1      	asrs	r1, r2, #3
9001ffba:	00d2      	lsls	r2, r2, #3
9001ffbc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001ffc0:	fa1f fc8c 	uxth.w	ip, ip
9001ffc4:	b2d2      	uxtb	r2, r2
9001ffc6:	fb01 e103 	mla	r1, r1, r3, lr
9001ffca:	fb02 0303 	mla	r3, r2, r3, r0
9001ffce:	b289      	uxth	r1, r1
9001ffd0:	b29a      	uxth	r2, r3
9001ffd2:	f10c 0301 	add.w	r3, ip, #1
9001ffd6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
9001ffda:	1c53      	adds	r3, r2, #1
9001ffdc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001ffe0:	1c4a      	adds	r2, r1, #1
9001ffe2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001ffe6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001ffea:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001ffee:	0949      	lsrs	r1, r1, #5
9001fff0:	ea43 030c 	orr.w	r3, r3, ip
9001fff4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001fff8:	430b      	orrs	r3, r1
9001fffa:	803b      	strh	r3, [r7, #0]
9001fffc:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001fffe:	3702      	adds	r7, #2
90020000:	f10b 3bff 	add.w	fp, fp, #4294967295
90020004:	449a      	add	sl, r3
90020006:	9b26      	ldr	r3, [sp, #152]	; 0x98
90020008:	441d      	add	r5, r3
9002000a:	e742      	b.n	9001fe92 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9002000c:	9b25      	ldr	r3, [sp, #148]	; 0x94
9002000e:	f108 0802 	add.w	r8, r8, #2
90020012:	449a      	add	sl, r3
90020014:	9b26      	ldr	r3, [sp, #152]	; 0x98
90020016:	441d      	add	r5, r3
90020018:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002001a:	3b01      	subs	r3, #1
9002001c:	9309      	str	r3, [sp, #36]	; 0x24
9002001e:	e718      	b.n	9001fe52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
90020020:	d023      	beq.n	9002006a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
90020022:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020024:	9825      	ldr	r0, [sp, #148]	; 0x94
90020026:	3b01      	subs	r3, #1
90020028:	fb00 a003 	mla	r0, r0, r3, sl
9002002c:	1400      	asrs	r0, r0, #16
9002002e:	f53f af2d 	bmi.w	9001fe8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
90020032:	3901      	subs	r1, #1
90020034:	4288      	cmp	r0, r1
90020036:	f6bf af29 	bge.w	9001fe8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9002003a:	9926      	ldr	r1, [sp, #152]	; 0x98
9002003c:	fb01 5303 	mla	r3, r1, r3, r5
90020040:	141b      	asrs	r3, r3, #16
90020042:	f53f af23 	bmi.w	9001fe8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
90020046:	3a01      	subs	r2, #1
90020048:	4293      	cmp	r3, r2
9002004a:	f6bf af1f 	bge.w	9001fe8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9002004e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
90020052:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
90020056:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
9002005a:	f1be 0f00 	cmp.w	lr, #0
9002005e:	dc6c      	bgt.n	9002013a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
90020060:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020062:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
90020066:	eb08 0844 	add.w	r8, r8, r4, lsl #1
9002006a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9002006c:	2b00      	cmp	r3, #0
9002006e:	f340 810e 	ble.w	9002028e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
90020072:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90020076:	9b22      	ldr	r3, [sp, #136]	; 0x88
90020078:	ee30 0a04 	vadd.f32	s0, s0, s8
9002007c:	ee70 0aa4 	vadd.f32	s1, s1, s9
90020080:	eef0 6a62 	vmov.f32	s13, s5
90020084:	eec7 7a00 	vdiv.f32	s15, s14, s0
90020088:	ee31 1a05 	vadd.f32	s2, s2, s10
9002008c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90020090:	ee16 aa90 	vmov	sl, s13
90020094:	eef0 6a43 	vmov.f32	s13, s6
90020098:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002009c:	ee16 5a90 	vmov	r5, s13
900200a0:	ee20 7aa7 	vmul.f32	s14, s1, s15
900200a4:	ee61 7a27 	vmul.f32	s15, s2, s15
900200a8:	ee77 2a62 	vsub.f32	s5, s14, s5
900200ac:	ee37 3ac3 	vsub.f32	s6, s15, s6
900200b0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900200b4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900200b8:	ee12 2a90 	vmov	r2, s5
900200bc:	eef0 2a47 	vmov.f32	s5, s14
900200c0:	fb92 f3f3 	sdiv	r3, r2, r3
900200c4:	ee13 2a10 	vmov	r2, s6
900200c8:	9325      	str	r3, [sp, #148]	; 0x94
900200ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
900200cc:	eeb0 3a67 	vmov.f32	s6, s15
900200d0:	fb92 f3f3 	sdiv	r3, r2, r3
900200d4:	9326      	str	r3, [sp, #152]	; 0x98
900200d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900200d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
900200da:	3b01      	subs	r3, #1
900200dc:	930c      	str	r3, [sp, #48]	; 0x30
900200de:	9b22      	ldr	r3, [sp, #136]	; 0x88
900200e0:	bf08      	it	eq
900200e2:	4613      	moveq	r3, r2
900200e4:	9309      	str	r3, [sp, #36]	; 0x24
900200e6:	e6a6      	b.n	9001fe36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
900200e8:	2900      	cmp	r1, #0
900200ea:	f43f af10 	beq.w	9001ff0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
900200ee:	f819 3003 	ldrb.w	r3, [r9, r3]
900200f2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
900200f6:	930f      	str	r3, [sp, #60]	; 0x3c
900200f8:	e709      	b.n	9001ff0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
900200fa:	f112 0901 	adds.w	r9, r2, #1
900200fe:	f53f af7d 	bmi.w	9001fffc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90020102:	454b      	cmp	r3, r9
90020104:	f6ff af7a 	blt.w	9001fffc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90020108:	f11c 0901 	adds.w	r9, ip, #1
9002010c:	f53f af76 	bmi.w	9001fffc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90020110:	45ce      	cmp	lr, r9
90020112:	f6ff af73 	blt.w	9001fffc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90020116:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90020118:	b21b      	sxth	r3, r3
9002011a:	9202      	str	r2, [sp, #8]
9002011c:	fa0f f28e 	sxth.w	r2, lr
90020120:	9300      	str	r3, [sp, #0]
90020122:	4633      	mov	r3, r6
90020124:	9201      	str	r2, [sp, #4]
90020126:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90020128:	e9cd 1405 	strd	r1, r4, [sp, #20]
9002012c:	e9cd c003 	strd	ip, r0, [sp, #12]
90020130:	4639      	mov	r1, r7
90020132:	9816      	ldr	r0, [sp, #88]	; 0x58
90020134:	f7ff fd8e 	bl	9001fc54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
90020138:	e760      	b.n	9001fffc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9002013a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9002013c:	ea4f 422a 	mov.w	r2, sl, asr #16
90020140:	1429      	asrs	r1, r5, #16
90020142:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90020144:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
90020148:	f3ca 3c03 	ubfx	ip, sl, #12, #4
9002014c:	f3c5 3003 	ubfx	r0, r5, #12, #4
90020150:	fb03 2101 	mla	r1, r3, r1, r2
90020154:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90020156:	440a      	add	r2, r1
90020158:	5c61      	ldrb	r1, [r4, r1]
9002015a:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
9002015e:	f1bc 0f00 	cmp.w	ip, #0
90020162:	f000 808c 	beq.w	9002027e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
90020166:	7857      	ldrb	r7, [r2, #1]
90020168:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
9002016c:	9413      	str	r4, [sp, #76]	; 0x4c
9002016e:	b140      	cbz	r0, 90020182 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
90020170:	18d7      	adds	r7, r2, r3
90020172:	5cd3      	ldrb	r3, [r2, r3]
90020174:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
90020178:	9310      	str	r3, [sp, #64]	; 0x40
9002017a:	787b      	ldrb	r3, [r7, #1]
9002017c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
90020180:	9314      	str	r3, [sp, #80]	; 0x50
90020182:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90020184:	fb1c f200 	smulbb	r2, ip, r0
90020188:	9c14      	ldr	r4, [sp, #80]	; 0x50
9002018a:	f10e 3eff 	add.w	lr, lr, #4294967295
9002018e:	041f      	lsls	r7, r3, #16
90020190:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90020194:	10d2      	asrs	r2, r2, #3
90020196:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
9002019a:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
9002019e:	431f      	orrs	r7, r3
900201a0:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
900201a4:	9317      	str	r3, [sp, #92]	; 0x5c
900201a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
900201a8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
900201aa:	041b      	lsls	r3, r3, #16
900201ac:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
900201b0:	ea43 030b 	orr.w	r3, r3, fp
900201b4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
900201b8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
900201bc:	4353      	muls	r3, r2
900201be:	fb04 3707 	mla	r7, r4, r7, r3
900201c2:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
900201c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
900201c8:	ea43 0b01 	orr.w	fp, r3, r1
900201cc:	f1c0 0110 	rsb	r1, r0, #16
900201d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
900201d2:	eba1 0c0c 	sub.w	ip, r1, ip
900201d6:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
900201da:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
900201de:	fb0c 770b 	mla	r7, ip, fp, r7
900201e2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
900201e6:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
900201ea:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
900201ee:	ea4c 0c0b 	orr.w	ip, ip, fp
900201f2:	fb02 770c 	mla	r7, r2, ip, r7
900201f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
900201f8:	0d79      	lsrs	r1, r7, #21
900201fa:	8812      	ldrh	r2, [r2, #0]
900201fc:	097f      	lsrs	r7, r7, #5
900201fe:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90020202:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
90020206:	430f      	orrs	r7, r1
90020208:	1211      	asrs	r1, r2, #8
9002020a:	b2bb      	uxth	r3, r7
9002020c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90020210:	10d7      	asrs	r7, r2, #3
90020212:	fb11 f104 	smulbb	r1, r1, r4
90020216:	1218      	asrs	r0, r3, #8
90020218:	00d2      	lsls	r2, r2, #3
9002021a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9002021e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90020222:	fb17 f704 	smulbb	r7, r7, r4
90020226:	b2d2      	uxtb	r2, r2
90020228:	fb00 1009 	mla	r0, r0, r9, r1
9002022c:	10d9      	asrs	r1, r3, #3
9002022e:	fb12 f204 	smulbb	r2, r2, r4
90020232:	00db      	lsls	r3, r3, #3
90020234:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90020238:	b280      	uxth	r0, r0
9002023a:	b2db      	uxtb	r3, r3
9002023c:	fb01 7109 	mla	r1, r1, r9, r7
90020240:	fb03 2309 	mla	r3, r3, r9, r2
90020244:	1c42      	adds	r2, r0, #1
90020246:	b289      	uxth	r1, r1
90020248:	b29b      	uxth	r3, r3
9002024a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9002024e:	1c4f      	adds	r7, r1, #1
90020250:	1c5a      	adds	r2, r3, #1
90020252:	eb07 2111 	add.w	r1, r7, r1, lsr #8
90020256:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9002025a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
9002025e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90020260:	0949      	lsrs	r1, r1, #5
90020262:	f3c2 22c4 	ubfx	r2, r2, #11, #5
90020266:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9002026a:	4310      	orrs	r0, r2
9002026c:	4308      	orrs	r0, r1
9002026e:	f823 0b02 	strh.w	r0, [r3], #2
90020272:	930e      	str	r3, [sp, #56]	; 0x38
90020274:	9b25      	ldr	r3, [sp, #148]	; 0x94
90020276:	449a      	add	sl, r3
90020278:	9b26      	ldr	r3, [sp, #152]	; 0x98
9002027a:	441d      	add	r5, r3
9002027c:	e6ed      	b.n	9002005a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
9002027e:	2800      	cmp	r0, #0
90020280:	f43f af7f 	beq.w	90020182 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
90020284:	5cd3      	ldrb	r3, [r2, r3]
90020286:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9002028a:	9310      	str	r3, [sp, #64]	; 0x40
9002028c:	e779      	b.n	90020182 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9002028e:	b019      	add	sp, #100	; 0x64
90020290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90020294 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
90020294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90020298:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
9002029c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
900202a0:	f1b8 0f00 	cmp.w	r8, #0
900202a4:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
900202a8:	fb08 470e 	mla	r7, r8, lr, r4
900202ac:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
900202b0:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
900202b4:	eb02 0907 	add.w	r9, r2, r7
900202b8:	8808      	ldrh	r0, [r1, #0]
900202ba:	db67      	blt.n	9002038c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
900202bc:	45c2      	cmp	sl, r8
900202be:	dd65      	ble.n	9002038c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
900202c0:	2c00      	cmp	r4, #0
900202c2:	db61      	blt.n	90020388 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
900202c4:	45a6      	cmp	lr, r4
900202c6:	dd5f      	ble.n	90020388 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
900202c8:	5dd2      	ldrb	r2, [r2, r7]
900202ca:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
900202ce:	1c62      	adds	r2, r4, #1
900202d0:	d45f      	bmi.n	90020392 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
900202d2:	4596      	cmp	lr, r2
900202d4:	dd5d      	ble.n	90020392 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
900202d6:	2d00      	cmp	r5, #0
900202d8:	d05b      	beq.n	90020392 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
900202da:	f899 2001 	ldrb.w	r2, [r9, #1]
900202de:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
900202e2:	f118 0801 	adds.w	r8, r8, #1
900202e6:	d458      	bmi.n	9002039a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
900202e8:	45c2      	cmp	sl, r8
900202ea:	dd56      	ble.n	9002039a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
900202ec:	2e00      	cmp	r6, #0
900202ee:	d054      	beq.n	9002039a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
900202f0:	2c00      	cmp	r4, #0
900202f2:	db50      	blt.n	90020396 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
900202f4:	45a6      	cmp	lr, r4
900202f6:	dd4e      	ble.n	90020396 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
900202f8:	f819 200e 	ldrb.w	r2, [r9, lr]
900202fc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
90020300:	3401      	adds	r4, #1
90020302:	d407      	bmi.n	90020314 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
90020304:	45a6      	cmp	lr, r4
90020306:	dd05      	ble.n	90020314 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
90020308:	b125      	cbz	r5, 90020314 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9002030a:	44ce      	add	lr, r9
9002030c:	f89e 0001 	ldrb.w	r0, [lr, #1]
90020310:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
90020314:	fb15 f406 	smulbb	r4, r5, r6
90020318:	ea4f 430c 	mov.w	r3, ip, lsl #16
9002031c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
90020320:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90020324:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90020328:	f3c4 04c7 	ubfx	r4, r4, #3, #8
9002032c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
90020330:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
90020334:	ea43 0c0c 	orr.w	ip, r3, ip
90020338:	f1c6 0310 	rsb	r3, r6, #16
9002033c:	ea4e 0707 	orr.w	r7, lr, r7
90020340:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
90020344:	1b5b      	subs	r3, r3, r5
90020346:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
9002034a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9002034e:	437d      	muls	r5, r7
90020350:	fb03 5c0c 	mla	ip, r3, ip, r5
90020354:	0403      	lsls	r3, r0, #16
90020356:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9002035a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9002035e:	4318      	orrs	r0, r3
90020360:	0413      	lsls	r3, r2, #16
90020362:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90020366:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9002036a:	fb04 c000 	mla	r0, r4, r0, ip
9002036e:	4313      	orrs	r3, r2
90020370:	fb06 0003 	mla	r0, r6, r3, r0
90020374:	0d43      	lsrs	r3, r0, #21
90020376:	0940      	lsrs	r0, r0, #5
90020378:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002037c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90020380:	4318      	orrs	r0, r3
90020382:	8008      	strh	r0, [r1, #0]
90020384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90020388:	4684      	mov	ip, r0
9002038a:	e7a0      	b.n	900202ce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
9002038c:	4607      	mov	r7, r0
9002038e:	4684      	mov	ip, r0
90020390:	e7a7      	b.n	900202e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
90020392:	4607      	mov	r7, r0
90020394:	e7a5      	b.n	900202e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
90020396:	4602      	mov	r2, r0
90020398:	e7b2      	b.n	90020300 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
9002039a:	4602      	mov	r2, r0
9002039c:	e7ba      	b.n	90020314 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

9002039e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9002039e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900203a2:	b093      	sub	sp, #76	; 0x4c
900203a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900203a8:	920f      	str	r2, [sp, #60]	; 0x3c
900203aa:	9a21      	ldr	r2, [sp, #132]	; 0x84
900203ac:	9010      	str	r0, [sp, #64]	; 0x40
900203ae:	9108      	str	r1, [sp, #32]
900203b0:	6850      	ldr	r0, [r2, #4]
900203b2:	9306      	str	r3, [sp, #24]
900203b4:	6812      	ldr	r2, [r2, #0]
900203b6:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
900203ba:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
900203be:	fb00 1303 	mla	r3, r0, r3, r1
900203c2:	eb02 0943 	add.w	r9, r2, r3, lsl #1
900203c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
900203c8:	681b      	ldr	r3, [r3, #0]
900203ca:	9307      	str	r3, [sp, #28]
900203cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
900203ce:	685f      	ldr	r7, [r3, #4]
900203d0:	3704      	adds	r7, #4
900203d2:	9b08      	ldr	r3, [sp, #32]
900203d4:	2b00      	cmp	r3, #0
900203d6:	dc03      	bgt.n	900203e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
900203d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
900203da:	2b00      	cmp	r3, #0
900203dc:	f340 81b2 	ble.w	90020744 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
900203e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
900203e2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900203e6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
900203ea:	1e48      	subs	r0, r1, #1
900203ec:	f102 3cff 	add.w	ip, r2, #4294967295
900203f0:	9b06      	ldr	r3, [sp, #24]
900203f2:	2b00      	cmp	r3, #0
900203f4:	f340 80a9 	ble.w	9002054a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
900203f8:	ea5f 4e24 	movs.w	lr, r4, asr #16
900203fc:	ea4f 4326 	mov.w	r3, r6, asr #16
90020400:	d406      	bmi.n	90020410 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90020402:	4586      	cmp	lr, r0
90020404:	da04      	bge.n	90020410 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90020406:	2b00      	cmp	r3, #0
90020408:	db02      	blt.n	90020410 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9002040a:	4563      	cmp	r3, ip
9002040c:	f2c0 809e 	blt.w	9002054c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
90020410:	f11e 0e01 	adds.w	lr, lr, #1
90020414:	f100 808f 	bmi.w	90020536 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
90020418:	4571      	cmp	r1, lr
9002041a:	f2c0 808c 	blt.w	90020536 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9002041e:	3301      	adds	r3, #1
90020420:	f100 8089 	bmi.w	90020536 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
90020424:	429a      	cmp	r2, r3
90020426:	f2c0 8086 	blt.w	90020536 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9002042a:	f8dd b018 	ldr.w	fp, [sp, #24]
9002042e:	46c8      	mov	r8, r9
90020430:	f1bb 0f00 	cmp.w	fp, #0
90020434:	f340 80a6 	ble.w	90020584 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
90020438:	9a24      	ldr	r2, [sp, #144]	; 0x90
9002043a:	ea4f 4c26 	mov.w	ip, r6, asr #16
9002043e:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020440:	f3c4 3003 	ubfx	r0, r4, #12, #4
90020444:	f8d2 e00c 	ldr.w	lr, [r2, #12]
90020448:	1422      	asrs	r2, r4, #16
9002044a:	f3c6 3103 	ubfx	r1, r6, #12, #4
9002044e:	689b      	ldr	r3, [r3, #8]
90020450:	f100 80e3 	bmi.w	9002061a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
90020454:	f103 3aff 	add.w	sl, r3, #4294967295
90020458:	4552      	cmp	r2, sl
9002045a:	f280 80de 	bge.w	9002061a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9002045e:	f1bc 0f00 	cmp.w	ip, #0
90020462:	f2c0 80da 	blt.w	9002061a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
90020466:	f10e 3aff 	add.w	sl, lr, #4294967295
9002046a:	45d4      	cmp	ip, sl
9002046c:	f280 80d5 	bge.w	9002061a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
90020470:	b21b      	sxth	r3, r3
90020472:	9d07      	ldr	r5, [sp, #28]
90020474:	fb0c 2203 	mla	r2, ip, r3, r2
90020478:	eb05 0a02 	add.w	sl, r5, r2
9002047c:	5caa      	ldrb	r2, [r5, r2]
9002047e:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
90020482:	2800      	cmp	r0, #0
90020484:	f000 80c0 	beq.w	90020608 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
90020488:	f89a 2001 	ldrb.w	r2, [sl, #1]
9002048c:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
90020490:	920b      	str	r2, [sp, #44]	; 0x2c
90020492:	b151      	cbz	r1, 900204aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
90020494:	eb0a 0203 	add.w	r2, sl, r3
90020498:	f81a 3003 	ldrb.w	r3, [sl, r3]
9002049c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
900204a0:	9309      	str	r3, [sp, #36]	; 0x24
900204a2:	7853      	ldrb	r3, [r2, #1]
900204a4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
900204a8:	930c      	str	r3, [sp, #48]	; 0x30
900204aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
900204ac:	fb10 f201 	smulbb	r2, r0, r1
900204b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900204b2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
900204b6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
900204ba:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
900204be:	10d2      	asrs	r2, r2, #3
900204c0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
900204c4:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
900204c8:	ea4c 0c03 	orr.w	ip, ip, r3
900204cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900204ce:	041b      	lsls	r3, r3, #16
900204d0:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
900204d4:	432b      	orrs	r3, r5
900204d6:	4353      	muls	r3, r2
900204d8:	fb0a 330c 	mla	r3, sl, ip, r3
900204dc:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
900204e0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
900204e4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
900204e8:	ea4c 0e0e 	orr.w	lr, ip, lr
900204ec:	f1c1 0c10 	rsb	ip, r1, #16
900204f0:	ebac 0c00 	sub.w	ip, ip, r0
900204f4:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
900204f8:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
900204fc:	fb0c 3c0e 	mla	ip, ip, lr, r3
90020500:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020502:	0418      	lsls	r0, r3, #16
90020504:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90020508:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9002050c:	4318      	orrs	r0, r3
9002050e:	fb02 c200 	mla	r2, r2, r0, ip
90020512:	0d53      	lsrs	r3, r2, #21
90020514:	0952      	lsrs	r2, r2, #5
90020516:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002051a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9002051e:	431a      	orrs	r2, r3
90020520:	f8a8 2000 	strh.w	r2, [r8]
90020524:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020526:	f108 0802 	add.w	r8, r8, #2
9002052a:	f10b 3bff 	add.w	fp, fp, #4294967295
9002052e:	441c      	add	r4, r3
90020530:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020532:	441e      	add	r6, r3
90020534:	e77c      	b.n	90020430 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90020536:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020538:	f109 0902 	add.w	r9, r9, #2
9002053c:	441c      	add	r4, r3
9002053e:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020540:	441e      	add	r6, r3
90020542:	9b06      	ldr	r3, [sp, #24]
90020544:	3b01      	subs	r3, #1
90020546:	9306      	str	r3, [sp, #24]
90020548:	e752      	b.n	900203f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9002054a:	d020      	beq.n	9002058e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9002054c:	9b06      	ldr	r3, [sp, #24]
9002054e:	981f      	ldr	r0, [sp, #124]	; 0x7c
90020550:	3b01      	subs	r3, #1
90020552:	fb00 4003 	mla	r0, r0, r3, r4
90020556:	1400      	asrs	r0, r0, #16
90020558:	f53f af67 	bmi.w	9002042a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9002055c:	3901      	subs	r1, #1
9002055e:	4288      	cmp	r0, r1
90020560:	f6bf af63 	bge.w	9002042a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
90020564:	9920      	ldr	r1, [sp, #128]	; 0x80
90020566:	fb01 6303 	mla	r3, r1, r3, r6
9002056a:	141b      	asrs	r3, r3, #16
9002056c:	f53f af5d 	bmi.w	9002042a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
90020570:	3a01      	subs	r2, #1
90020572:	4293      	cmp	r3, r2
90020574:	f6bf af59 	bge.w	9002042a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
90020578:	f8dd 8018 	ldr.w	r8, [sp, #24]
9002057c:	46ca      	mov	sl, r9
9002057e:	f1b8 0f00 	cmp.w	r8, #0
90020582:	dc67      	bgt.n	90020654 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
90020584:	9b06      	ldr	r3, [sp, #24]
90020586:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
9002058a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
9002058e:	9b08      	ldr	r3, [sp, #32]
90020590:	2b00      	cmp	r3, #0
90020592:	f340 80d7 	ble.w	90020744 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
90020596:	ee30 0a04 	vadd.f32	s0, s0, s8
9002059a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9002059c:	ee70 0aa4 	vadd.f32	s1, s1, s9
900205a0:	eeb0 6a62 	vmov.f32	s12, s5
900205a4:	eec6 7a80 	vdiv.f32	s15, s13, s0
900205a8:	ee31 1a05 	vadd.f32	s2, s2, s10
900205ac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900205b0:	ee16 4a10 	vmov	r4, s12
900205b4:	eeb0 6a43 	vmov.f32	s12, s6
900205b8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900205bc:	ee16 6a10 	vmov	r6, s12
900205c0:	ee20 7aa7 	vmul.f32	s14, s1, s15
900205c4:	ee61 7a27 	vmul.f32	s15, s2, s15
900205c8:	ee77 2a62 	vsub.f32	s5, s14, s5
900205cc:	ee37 3ac3 	vsub.f32	s6, s15, s6
900205d0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900205d4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900205d8:	ee12 2a90 	vmov	r2, s5
900205dc:	eef0 2a47 	vmov.f32	s5, s14
900205e0:	fb92 f3f3 	sdiv	r3, r2, r3
900205e4:	ee13 2a10 	vmov	r2, s6
900205e8:	931f      	str	r3, [sp, #124]	; 0x7c
900205ea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900205ec:	eeb0 3a67 	vmov.f32	s6, s15
900205f0:	fb92 f3f3 	sdiv	r3, r2, r3
900205f4:	9320      	str	r3, [sp, #128]	; 0x80
900205f6:	9b08      	ldr	r3, [sp, #32]
900205f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900205fa:	3b01      	subs	r3, #1
900205fc:	9308      	str	r3, [sp, #32]
900205fe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90020600:	bf08      	it	eq
90020602:	4613      	moveq	r3, r2
90020604:	9306      	str	r3, [sp, #24]
90020606:	e6e4      	b.n	900203d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
90020608:	2900      	cmp	r1, #0
9002060a:	f43f af4e 	beq.w	900204aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9002060e:	f81a 3003 	ldrb.w	r3, [sl, r3]
90020612:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
90020616:	9309      	str	r3, [sp, #36]	; 0x24
90020618:	e747      	b.n	900204aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9002061a:	f112 0a01 	adds.w	sl, r2, #1
9002061e:	d481      	bmi.n	90020524 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90020620:	4553      	cmp	r3, sl
90020622:	f6ff af7f 	blt.w	90020524 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90020626:	f11c 0a01 	adds.w	sl, ip, #1
9002062a:	f53f af7b 	bmi.w	90020524 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9002062e:	45d6      	cmp	lr, sl
90020630:	f6ff af78 	blt.w	90020524 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90020634:	b21b      	sxth	r3, r3
90020636:	e9cd 2c02 	strd	r2, ip, [sp, #8]
9002063a:	fa0f f28e 	sxth.w	r2, lr
9002063e:	9300      	str	r3, [sp, #0]
90020640:	463b      	mov	r3, r7
90020642:	9201      	str	r2, [sp, #4]
90020644:	9a07      	ldr	r2, [sp, #28]
90020646:	e9cd 0104 	strd	r0, r1, [sp, #16]
9002064a:	4641      	mov	r1, r8
9002064c:	9810      	ldr	r0, [sp, #64]	; 0x40
9002064e:	f7ff fe21 	bl	90020294 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
90020652:	e767      	b.n	90020524 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90020654:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020656:	1422      	asrs	r2, r4, #16
90020658:	1431      	asrs	r1, r6, #16
9002065a:	9d07      	ldr	r5, [sp, #28]
9002065c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
90020660:	f3c4 3e03 	ubfx	lr, r4, #12, #4
90020664:	f3c6 3003 	ubfx	r0, r6, #12, #4
90020668:	fb03 2101 	mla	r1, r3, r1, r2
9002066c:	9a07      	ldr	r2, [sp, #28]
9002066e:	440a      	add	r2, r1
90020670:	5c69      	ldrb	r1, [r5, r1]
90020672:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
90020676:	f1be 0f00 	cmp.w	lr, #0
9002067a:	d05c      	beq.n	90020736 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
9002067c:	f892 c001 	ldrb.w	ip, [r2, #1]
90020680:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
90020684:	950d      	str	r5, [sp, #52]	; 0x34
90020686:	b150      	cbz	r0, 9002069e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
90020688:	eb02 0c03 	add.w	ip, r2, r3
9002068c:	5cd3      	ldrb	r3, [r2, r3]
9002068e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
90020692:	930a      	str	r3, [sp, #40]	; 0x28
90020694:	f89c 3001 	ldrb.w	r3, [ip, #1]
90020698:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9002069c:	930e      	str	r3, [sp, #56]	; 0x38
9002069e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900206a0:	fb1e f200 	smulbb	r2, lr, r0
900206a4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
900206a6:	f108 38ff 	add.w	r8, r8, #4294967295
900206aa:	ea4f 4c03 	mov.w	ip, r3, lsl #16
900206ae:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
900206b2:	10d2      	asrs	r2, r2, #3
900206b4:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
900206b8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
900206bc:	ea4c 0c03 	orr.w	ip, ip, r3
900206c0:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
900206c4:	9311      	str	r3, [sp, #68]	; 0x44
900206c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900206c8:	9d11      	ldr	r5, [sp, #68]	; 0x44
900206ca:	041b      	lsls	r3, r3, #16
900206cc:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
900206d0:	ea43 030b 	orr.w	r3, r3, fp
900206d4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
900206d8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
900206dc:	4353      	muls	r3, r2
900206de:	fb05 3c0c 	mla	ip, r5, ip, r3
900206e2:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
900206e6:	ea43 0b01 	orr.w	fp, r3, r1
900206ea:	f1c0 0110 	rsb	r1, r0, #16
900206ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900206f0:	eba1 0e0e 	sub.w	lr, r1, lr
900206f4:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
900206f8:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
900206fc:	fb0e cc0b 	mla	ip, lr, fp, ip
90020700:	ea4f 4b03 	mov.w	fp, r3, lsl #16
90020704:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
90020708:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9002070c:	ea4b 0e0e 	orr.w	lr, fp, lr
90020710:	fb02 cc0e 	mla	ip, r2, lr, ip
90020714:	ea4f 535c 	mov.w	r3, ip, lsr #21
90020718:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
9002071c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90020720:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90020724:	ea43 0c0c 	orr.w	ip, r3, ip
90020728:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9002072a:	441c      	add	r4, r3
9002072c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002072e:	f82a cb02 	strh.w	ip, [sl], #2
90020732:	441e      	add	r6, r3
90020734:	e723      	b.n	9002057e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
90020736:	2800      	cmp	r0, #0
90020738:	d0b1      	beq.n	9002069e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
9002073a:	5cd3      	ldrb	r3, [r2, r3]
9002073c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
90020740:	930a      	str	r3, [sp, #40]	; 0x28
90020742:	e7ac      	b.n	9002069e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
90020744:	b013      	add	sp, #76	; 0x4c
90020746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9002074a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
9002074a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9002074e:	880d      	ldrh	r5, [r1, #0]
90020750:	b087      	sub	sp, #28
90020752:	10ef      	asrs	r7, r5, #3
90020754:	9103      	str	r1, [sp, #12]
90020756:	ea4f 2a25 	mov.w	sl, r5, asr #8
9002075a:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
9002075e:	00ed      	lsls	r5, r5, #3
90020760:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90020764:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
90020768:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
9002076c:	b2ed      	uxtb	r5, r5
9002076e:	9701      	str	r7, [sp, #4]
90020770:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
90020774:	9502      	str	r5, [sp, #8]
90020776:	9d01      	ldr	r5, [sp, #4]
90020778:	9902      	ldr	r1, [sp, #8]
9002077a:	022d      	lsls	r5, r5, #8
9002077c:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
90020780:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
90020784:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
90020788:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
9002078c:	430d      	orrs	r5, r1
9002078e:	fb06 0709 	mla	r7, r6, r9, r0
90020792:	2e00      	cmp	r6, #0
90020794:	9505      	str	r5, [sp, #20]
90020796:	eb02 0c07 	add.w	ip, r2, r7
9002079a:	f2c0 80b6 	blt.w	9002090a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
9002079e:	45b3      	cmp	fp, r6
900207a0:	f340 80b3 	ble.w	9002090a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
900207a4:	2800      	cmp	r0, #0
900207a6:	f2c0 80ae 	blt.w	90020906 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
900207aa:	4581      	cmp	r9, r0
900207ac:	f340 80ab 	ble.w	90020906 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
900207b0:	5dd7      	ldrb	r7, [r2, r7]
900207b2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
900207b6:	441f      	add	r7, r3
900207b8:	1c42      	adds	r2, r0, #1
900207ba:	f100 80a9 	bmi.w	90020910 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
900207be:	4591      	cmp	r9, r2
900207c0:	f340 80a6 	ble.w	90020910 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
900207c4:	2c00      	cmp	r4, #0
900207c6:	f000 80a3 	beq.w	90020910 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
900207ca:	f89c 5001 	ldrb.w	r5, [ip, #1]
900207ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
900207d2:	441d      	add	r5, r3
900207d4:	3601      	adds	r6, #1
900207d6:	f100 809f 	bmi.w	90020918 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
900207da:	45b3      	cmp	fp, r6
900207dc:	f340 809c 	ble.w	90020918 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
900207e0:	f1be 0f00 	cmp.w	lr, #0
900207e4:	f000 8098 	beq.w	90020918 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
900207e8:	2800      	cmp	r0, #0
900207ea:	f2c0 8093 	blt.w	90020914 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
900207ee:	4581      	cmp	r9, r0
900207f0:	f340 8090 	ble.w	90020914 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
900207f4:	f81c 6009 	ldrb.w	r6, [ip, r9]
900207f8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
900207fc:	441e      	add	r6, r3
900207fe:	3001      	adds	r0, #1
90020800:	f100 808d 	bmi.w	9002091e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
90020804:	4581      	cmp	r9, r0
90020806:	f340 808a 	ble.w	9002091e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
9002080a:	2c00      	cmp	r4, #0
9002080c:	f000 8087 	beq.w	9002091e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
90020810:	44e1      	add	r9, ip
90020812:	f899 2001 	ldrb.w	r2, [r9, #1]
90020816:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9002081a:	4413      	add	r3, r2
9002081c:	b2a4      	uxth	r4, r4
9002081e:	f897 c002 	ldrb.w	ip, [r7, #2]
90020822:	fa1f fe8e 	uxth.w	lr, lr
90020826:	9901      	ldr	r1, [sp, #4]
90020828:	fb04 fb0e 	mul.w	fp, r4, lr
9002082c:	0124      	lsls	r4, r4, #4
9002082e:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
90020832:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
90020836:	eba4 040b 	sub.w	r4, r4, fp
9002083a:	fa1f f08e 	uxth.w	r0, lr
9002083e:	b2a2      	uxth	r2, r4
90020840:	78ac      	ldrb	r4, [r5, #2]
90020842:	eba9 0900 	sub.w	r9, r9, r0
90020846:	fa1f fe88 	uxth.w	lr, r8
9002084a:	4354      	muls	r4, r2
9002084c:	ea6f 0808 	mvn.w	r8, r8
90020850:	fa1f f989 	uxth.w	r9, r9
90020854:	fa5f f888 	uxtb.w	r8, r8
90020858:	fb09 440c 	mla	r4, r9, ip, r4
9002085c:	f896 c002 	ldrb.w	ip, [r6, #2]
90020860:	fb1a fa08 	smulbb	sl, sl, r8
90020864:	fb00 440c 	mla	r4, r0, ip, r4
90020868:	f893 c002 	ldrb.w	ip, [r3, #2]
9002086c:	fb0b 4c0c 	mla	ip, fp, ip, r4
90020870:	787c      	ldrb	r4, [r7, #1]
90020872:	783f      	ldrb	r7, [r7, #0]
90020874:	f3cc 2c07 	ubfx	ip, ip, #8, #8
90020878:	fb0c ac0e 	mla	ip, ip, lr, sl
9002087c:	f895 a001 	ldrb.w	sl, [r5, #1]
90020880:	782d      	ldrb	r5, [r5, #0]
90020882:	fb02 fa0a 	mul.w	sl, r2, sl
90020886:	fa1f fc8c 	uxth.w	ip, ip
9002088a:	436a      	muls	r2, r5
9002088c:	7835      	ldrb	r5, [r6, #0]
9002088e:	fb09 aa04 	mla	sl, r9, r4, sl
90020892:	7874      	ldrb	r4, [r6, #1]
90020894:	fb09 2207 	mla	r2, r9, r7, r2
90020898:	fb00 aa04 	mla	sl, r0, r4, sl
9002089c:	785c      	ldrb	r4, [r3, #1]
9002089e:	fb00 2005 	mla	r0, r0, r5, r2
900208a2:	781b      	ldrb	r3, [r3, #0]
900208a4:	fb0b a404 	mla	r4, fp, r4, sl
900208a8:	fb11 fa08 	smulbb	sl, r1, r8
900208ac:	fb0b 0b03 	mla	fp, fp, r3, r0
900208b0:	9b02      	ldr	r3, [sp, #8]
900208b2:	f3c4 2407 	ubfx	r4, r4, #8, #8
900208b6:	fb13 f808 	smulbb	r8, r3, r8
900208ba:	f3cb 2b07 	ubfx	fp, fp, #8, #8
900208be:	fb04 a40e 	mla	r4, r4, lr, sl
900208c2:	f10c 0301 	add.w	r3, ip, #1
900208c6:	fb0b 8e0e 	mla	lr, fp, lr, r8
900208ca:	b2a4      	uxth	r4, r4
900208cc:	fa1f fe8e 	uxth.w	lr, lr
900208d0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
900208d4:	f104 0a01 	add.w	sl, r4, #1
900208d8:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
900208dc:	f10e 0c01 	add.w	ip, lr, #1
900208e0:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
900208e4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
900208e8:	0964      	lsrs	r4, r4, #5
900208ea:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
900208ee:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
900208f2:	ea4c 0c03 	orr.w	ip, ip, r3
900208f6:	9b03      	ldr	r3, [sp, #12]
900208f8:	ea4c 0c04 	orr.w	ip, ip, r4
900208fc:	f8a3 c000 	strh.w	ip, [r3]
90020900:	b007      	add	sp, #28
90020902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90020906:	af05      	add	r7, sp, #20
90020908:	e756      	b.n	900207b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
9002090a:	ad05      	add	r5, sp, #20
9002090c:	462f      	mov	r7, r5
9002090e:	e761      	b.n	900207d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
90020910:	ad05      	add	r5, sp, #20
90020912:	e75f      	b.n	900207d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
90020914:	ae05      	add	r6, sp, #20
90020916:	e772      	b.n	900207fe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
90020918:	ab05      	add	r3, sp, #20
9002091a:	461e      	mov	r6, r3
9002091c:	e77e      	b.n	9002081c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
9002091e:	ab05      	add	r3, sp, #20
90020920:	e77c      	b.n	9002081c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

90020922 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90020922:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020926:	b095      	sub	sp, #84	; 0x54
90020928:	9212      	str	r2, [sp, #72]	; 0x48
9002092a:	9309      	str	r3, [sp, #36]	; 0x24
9002092c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
9002092e:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
90020932:	9013      	str	r0, [sp, #76]	; 0x4c
90020934:	930f      	str	r3, [sp, #60]	; 0x3c
90020936:	6850      	ldr	r0, [r2, #4]
90020938:	910e      	str	r1, [sp, #56]	; 0x38
9002093a:	6812      	ldr	r2, [r2, #0]
9002093c:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
90020940:	fb00 1303 	mla	r3, r0, r3, r1
90020944:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90020948:	930a      	str	r3, [sp, #40]	; 0x28
9002094a:	9b26      	ldr	r3, [sp, #152]	; 0x98
9002094c:	681b      	ldr	r3, [r3, #0]
9002094e:	930d      	str	r3, [sp, #52]	; 0x34
90020950:	9b26      	ldr	r3, [sp, #152]	; 0x98
90020952:	685c      	ldr	r4, [r3, #4]
90020954:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90020956:	3404      	adds	r4, #4
90020958:	43db      	mvns	r3, r3
9002095a:	b2db      	uxtb	r3, r3
9002095c:	930b      	str	r3, [sp, #44]	; 0x2c
9002095e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90020960:	2b00      	cmp	r3, #0
90020962:	dc03      	bgt.n	9002096c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
90020964:	9b12      	ldr	r3, [sp, #72]	; 0x48
90020966:	2b00      	cmp	r3, #0
90020968:	f340 8255 	ble.w	90020e16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
9002096c:	9b26      	ldr	r3, [sp, #152]	; 0x98
9002096e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90020972:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90020976:	1e48      	subs	r0, r1, #1
90020978:	1e55      	subs	r5, r2, #1
9002097a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002097c:	2b00      	cmp	r3, #0
9002097e:	f340 80f9 	ble.w	90020b74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
90020982:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
90020984:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020986:	1436      	asrs	r6, r6, #16
90020988:	ea4f 4323 	mov.w	r3, r3, asr #16
9002098c:	d406      	bmi.n	9002099c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9002098e:	4286      	cmp	r6, r0
90020990:	da04      	bge.n	9002099c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
90020992:	2b00      	cmp	r3, #0
90020994:	db02      	blt.n	9002099c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
90020996:	42ab      	cmp	r3, r5
90020998:	f2c0 80ed 	blt.w	90020b76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
9002099c:	3601      	adds	r6, #1
9002099e:	f100 80da 	bmi.w	90020b56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
900209a2:	42b1      	cmp	r1, r6
900209a4:	f2c0 80d7 	blt.w	90020b56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
900209a8:	3301      	adds	r3, #1
900209aa:	f100 80d4 	bmi.w	90020b56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
900209ae:	429a      	cmp	r2, r3
900209b0:	f2c0 80d1 	blt.w	90020b56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
900209b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
900209b6:	9311      	str	r3, [sp, #68]	; 0x44
900209b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900209ba:	930c      	str	r3, [sp, #48]	; 0x30
900209bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
900209be:	2b00      	cmp	r3, #0
900209c0:	f340 80fa 	ble.w	90020bb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
900209c4:	9826      	ldr	r0, [sp, #152]	; 0x98
900209c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
900209c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
900209ca:	68c6      	ldr	r6, [r0, #12]
900209cc:	141d      	asrs	r5, r3, #16
900209ce:	981f      	ldr	r0, [sp, #124]	; 0x7c
900209d0:	f3c2 3103 	ubfx	r1, r2, #12, #4
900209d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900209d6:	9a26      	ldr	r2, [sp, #152]	; 0x98
900209d8:	1400      	asrs	r0, r0, #16
900209da:	f3c3 3303 	ubfx	r3, r3, #12, #4
900209de:	6892      	ldr	r2, [r2, #8]
900209e0:	f100 813e 	bmi.w	90020c60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
900209e4:	1e57      	subs	r7, r2, #1
900209e6:	42b8      	cmp	r0, r7
900209e8:	f280 813a 	bge.w	90020c60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
900209ec:	2d00      	cmp	r5, #0
900209ee:	f2c0 8137 	blt.w	90020c60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
900209f2:	1e77      	subs	r7, r6, #1
900209f4:	42bd      	cmp	r5, r7
900209f6:	f280 8133 	bge.w	90020c60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
900209fa:	b212      	sxth	r2, r2
900209fc:	fb05 0002 	mla	r0, r5, r2, r0
90020a00:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90020a02:	f815 a000 	ldrb.w	sl, [r5, r0]
90020a06:	182e      	adds	r6, r5, r0
90020a08:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
90020a0c:	eb04 050a 	add.w	r5, r4, sl
90020a10:	2b00      	cmp	r3, #0
90020a12:	f000 8117 	beq.w	90020c44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
90020a16:	f896 c001 	ldrb.w	ip, [r6, #1]
90020a1a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
90020a1e:	44a4      	add	ip, r4
90020a20:	2900      	cmp	r1, #0
90020a22:	f000 8117 	beq.w	90020c54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
90020a26:	18b0      	adds	r0, r6, r2
90020a28:	5cb2      	ldrb	r2, [r6, r2]
90020a2a:	7840      	ldrb	r0, [r0, #1]
90020a2c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90020a30:	eb00 0040 	add.w	r0, r0, r0, lsl #1
90020a34:	4422      	add	r2, r4
90020a36:	4420      	add	r0, r4
90020a38:	b29b      	uxth	r3, r3
90020a3a:	f89c 7002 	ldrb.w	r7, [ip, #2]
90020a3e:	b289      	uxth	r1, r1
90020a40:	f895 b002 	ldrb.w	fp, [r5, #2]
90020a44:	9e0c      	ldr	r6, [sp, #48]	; 0x30
90020a46:	fb03 f901 	mul.w	r9, r3, r1
90020a4a:	011b      	lsls	r3, r3, #4
90020a4c:	f8b6 e000 	ldrh.w	lr, [r6]
90020a50:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
90020a54:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
90020a58:	eba3 0309 	sub.w	r3, r3, r9
90020a5c:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
90020a60:	b289      	uxth	r1, r1
90020a62:	f814 a00a 	ldrb.w	sl, [r4, sl]
90020a66:	b29b      	uxth	r3, r3
90020a68:	eba8 0801 	sub.w	r8, r8, r1
90020a6c:	435f      	muls	r7, r3
90020a6e:	fa1f f888 	uxth.w	r8, r8
90020a72:	9310      	str	r3, [sp, #64]	; 0x40
90020a74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90020a76:	fb08 770b 	mla	r7, r8, fp, r7
90020a7a:	f892 b002 	ldrb.w	fp, [r2, #2]
90020a7e:	fb01 770b 	mla	r7, r1, fp, r7
90020a82:	f890 b002 	ldrb.w	fp, [r0, #2]
90020a86:	fb09 770b 	mla	r7, r9, fp, r7
90020a8a:	ea4f 2b2e 	mov.w	fp, lr, asr #8
90020a8e:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
90020a92:	f3c7 2707 	ubfx	r7, r7, #8, #8
90020a96:	fb1b fb03 	smulbb	fp, fp, r3
90020a9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
90020a9c:	fb07 b706 	mla	r7, r7, r6, fp
90020aa0:	f895 b001 	ldrb.w	fp, [r5, #1]
90020aa4:	f89c 5001 	ldrb.w	r5, [ip, #1]
90020aa8:	f89c c000 	ldrb.w	ip, [ip]
90020aac:	b2bf      	uxth	r7, r7
90020aae:	435d      	muls	r5, r3
90020ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90020ab2:	fb08 550b 	mla	r5, r8, fp, r5
90020ab6:	f892 b001 	ldrb.w	fp, [r2, #1]
90020aba:	fb01 550b 	mla	r5, r1, fp, r5
90020abe:	f890 b001 	ldrb.w	fp, [r0, #1]
90020ac2:	fb09 550b 	mla	r5, r9, fp, r5
90020ac6:	ea4f 0bee 	mov.w	fp, lr, asr #3
90020aca:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90020ace:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
90020ad2:	f3c5 2507 	ubfx	r5, r5, #8, #8
90020ad6:	fa5f fe8e 	uxtb.w	lr, lr
90020ada:	fb1b fb03 	smulbb	fp, fp, r3
90020ade:	9b10      	ldr	r3, [sp, #64]	; 0x40
90020ae0:	fb03 f30c 	mul.w	r3, r3, ip
90020ae4:	f892 c000 	ldrb.w	ip, [r2]
90020ae8:	fb05 b506 	mla	r5, r5, r6, fp
90020aec:	fb08 330a 	mla	r3, r8, sl, r3
90020af0:	b2ad      	uxth	r5, r5
90020af2:	fb01 330c 	mla	r3, r1, ip, r3
90020af6:	f890 c000 	ldrb.w	ip, [r0]
90020afa:	f105 0b01 	add.w	fp, r5, #1
90020afe:	fb09 3c0c 	mla	ip, r9, ip, r3
90020b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90020b04:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
90020b08:	fb1e fe03 	smulbb	lr, lr, r3
90020b0c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
90020b10:	1c7b      	adds	r3, r7, #1
90020b12:	096d      	lsrs	r5, r5, #5
90020b14:	fb0c e606 	mla	r6, ip, r6, lr
90020b18:	eb03 2717 	add.w	r7, r3, r7, lsr #8
90020b1c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90020b20:	b2b6      	uxth	r6, r6
90020b22:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
90020b26:	1c77      	adds	r7, r6, #1
90020b28:	eb07 2716 	add.w	r7, r7, r6, lsr #8
90020b2c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
90020b30:	431f      	orrs	r7, r3
90020b32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90020b34:	433d      	orrs	r5, r7
90020b36:	801d      	strh	r5, [r3, #0]
90020b38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90020b3a:	9a21      	ldr	r2, [sp, #132]	; 0x84
90020b3c:	3302      	adds	r3, #2
90020b3e:	930c      	str	r3, [sp, #48]	; 0x30
90020b40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020b42:	4413      	add	r3, r2
90020b44:	9a22      	ldr	r2, [sp, #136]	; 0x88
90020b46:	931f      	str	r3, [sp, #124]	; 0x7c
90020b48:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020b4a:	4413      	add	r3, r2
90020b4c:	9320      	str	r3, [sp, #128]	; 0x80
90020b4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
90020b50:	3b01      	subs	r3, #1
90020b52:	9311      	str	r3, [sp, #68]	; 0x44
90020b54:	e732      	b.n	900209bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
90020b56:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020b58:	9e21      	ldr	r6, [sp, #132]	; 0x84
90020b5a:	4433      	add	r3, r6
90020b5c:	9e22      	ldr	r6, [sp, #136]	; 0x88
90020b5e:	931f      	str	r3, [sp, #124]	; 0x7c
90020b60:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020b62:	4433      	add	r3, r6
90020b64:	9320      	str	r3, [sp, #128]	; 0x80
90020b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020b68:	3b01      	subs	r3, #1
90020b6a:	9309      	str	r3, [sp, #36]	; 0x24
90020b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90020b6e:	3302      	adds	r3, #2
90020b70:	930a      	str	r3, [sp, #40]	; 0x28
90020b72:	e702      	b.n	9002097a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
90020b74:	d027      	beq.n	90020bc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
90020b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020b78:	9821      	ldr	r0, [sp, #132]	; 0x84
90020b7a:	3b01      	subs	r3, #1
90020b7c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
90020b7e:	fb00 5003 	mla	r0, r0, r3, r5
90020b82:	1400      	asrs	r0, r0, #16
90020b84:	f53f af16 	bmi.w	900209b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90020b88:	3901      	subs	r1, #1
90020b8a:	4288      	cmp	r0, r1
90020b8c:	f6bf af12 	bge.w	900209b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90020b90:	9922      	ldr	r1, [sp, #136]	; 0x88
90020b92:	9820      	ldr	r0, [sp, #128]	; 0x80
90020b94:	fb01 0303 	mla	r3, r1, r3, r0
90020b98:	141b      	asrs	r3, r3, #16
90020b9a:	f53f af0b 	bmi.w	900209b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90020b9e:	3a01      	subs	r2, #1
90020ba0:	4293      	cmp	r3, r2
90020ba2:	f6bf af07 	bge.w	900209b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90020ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020ba8:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
90020bac:	9311      	str	r3, [sp, #68]	; 0x44
90020bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90020bb0:	930c      	str	r3, [sp, #48]	; 0x30
90020bb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
90020bb4:	2b00      	cmp	r3, #0
90020bb6:	dc70      	bgt.n	90020c9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
90020bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020bba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90020bbc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90020bc0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90020bc4:	930a      	str	r3, [sp, #40]	; 0x28
90020bc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90020bc8:	2b00      	cmp	r3, #0
90020bca:	f340 8124 	ble.w	90020e16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
90020bce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90020bd2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90020bd4:	ee30 0a04 	vadd.f32	s0, s0, s8
90020bd8:	ee70 0aa4 	vadd.f32	s1, s1, s9
90020bdc:	eef0 6a62 	vmov.f32	s13, s5
90020be0:	eec7 7a00 	vdiv.f32	s15, s14, s0
90020be4:	ee31 1a05 	vadd.f32	s2, s2, s10
90020be8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90020bec:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
90020bf0:	eef0 6a43 	vmov.f32	s13, s6
90020bf4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90020bf8:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
90020bfc:	ee20 7aa7 	vmul.f32	s14, s1, s15
90020c00:	ee61 7a27 	vmul.f32	s15, s2, s15
90020c04:	ee77 2a62 	vsub.f32	s5, s14, s5
90020c08:	ee37 3ac3 	vsub.f32	s6, s15, s6
90020c0c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90020c10:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90020c14:	ee12 2a90 	vmov	r2, s5
90020c18:	eef0 2a47 	vmov.f32	s5, s14
90020c1c:	fb92 f3f3 	sdiv	r3, r2, r3
90020c20:	ee13 2a10 	vmov	r2, s6
90020c24:	9321      	str	r3, [sp, #132]	; 0x84
90020c26:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90020c28:	eeb0 3a67 	vmov.f32	s6, s15
90020c2c:	fb92 f3f3 	sdiv	r3, r2, r3
90020c30:	9322      	str	r3, [sp, #136]	; 0x88
90020c32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90020c34:	9a12      	ldr	r2, [sp, #72]	; 0x48
90020c36:	3b01      	subs	r3, #1
90020c38:	930e      	str	r3, [sp, #56]	; 0x38
90020c3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90020c3c:	bf08      	it	eq
90020c3e:	4613      	moveq	r3, r2
90020c40:	9309      	str	r3, [sp, #36]	; 0x24
90020c42:	e68c      	b.n	9002095e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
90020c44:	b149      	cbz	r1, 90020c5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
90020c46:	5cb2      	ldrb	r2, [r6, r2]
90020c48:	4628      	mov	r0, r5
90020c4a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90020c4e:	4422      	add	r2, r4
90020c50:	46ac      	mov	ip, r5
90020c52:	e6f1      	b.n	90020a38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
90020c54:	4628      	mov	r0, r5
90020c56:	462a      	mov	r2, r5
90020c58:	e6ee      	b.n	90020a38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
90020c5a:	4628      	mov	r0, r5
90020c5c:	462a      	mov	r2, r5
90020c5e:	e7f7      	b.n	90020c50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
90020c60:	1c47      	adds	r7, r0, #1
90020c62:	f53f af69 	bmi.w	90020b38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
90020c66:	42ba      	cmp	r2, r7
90020c68:	f6ff af66 	blt.w	90020b38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
90020c6c:	1c6f      	adds	r7, r5, #1
90020c6e:	f53f af63 	bmi.w	90020b38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
90020c72:	42be      	cmp	r6, r7
90020c74:	f6ff af60 	blt.w	90020b38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
90020c78:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
90020c7a:	b236      	sxth	r6, r6
90020c7c:	b212      	sxth	r2, r2
90020c7e:	9002      	str	r0, [sp, #8]
90020c80:	9601      	str	r6, [sp, #4]
90020c82:	9200      	str	r2, [sp, #0]
90020c84:	9813      	ldr	r0, [sp, #76]	; 0x4c
90020c86:	e9cd 1705 	strd	r1, r7, [sp, #20]
90020c8a:	e9cd 5303 	strd	r5, r3, [sp, #12]
90020c8e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
90020c92:	4623      	mov	r3, r4
90020c94:	f7ff fd59 	bl	9002074a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
90020c98:	e74e      	b.n	90020b38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
90020c9a:	9a20      	ldr	r2, [sp, #128]	; 0x80
90020c9c:	9820      	ldr	r0, [sp, #128]	; 0x80
90020c9e:	f3c2 3103 	ubfx	r1, r2, #12, #4
90020ca2:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
90020ca4:	9a26      	ldr	r2, [sp, #152]	; 0x98
90020ca6:	1400      	asrs	r0, r0, #16
90020ca8:	142d      	asrs	r5, r5, #16
90020caa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020cac:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
90020cb0:	f3c3 3303 	ubfx	r3, r3, #12, #4
90020cb4:	fb02 5000 	mla	r0, r2, r0, r5
90020cb8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90020cba:	f815 9000 	ldrb.w	r9, [r5, r0]
90020cbe:	182e      	adds	r6, r5, r0
90020cc0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
90020cc4:	eb04 0509 	add.w	r5, r4, r9
90020cc8:	2b00      	cmp	r3, #0
90020cca:	f000 8096 	beq.w	90020dfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
90020cce:	7877      	ldrb	r7, [r6, #1]
90020cd0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
90020cd4:	4427      	add	r7, r4
90020cd6:	2900      	cmp	r1, #0
90020cd8:	f000 8097 	beq.w	90020e0a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
90020cdc:	18b0      	adds	r0, r6, r2
90020cde:	5cb2      	ldrb	r2, [r6, r2]
90020ce0:	7840      	ldrb	r0, [r0, #1]
90020ce2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90020ce6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
90020cea:	4422      	add	r2, r4
90020cec:	4420      	add	r0, r4
90020cee:	b29b      	uxth	r3, r3
90020cf0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
90020cf2:	b289      	uxth	r1, r1
90020cf4:	f895 b002 	ldrb.w	fp, [r5, #2]
90020cf8:	f8b6 c000 	ldrh.w	ip, [r6]
90020cfc:	fb03 f801 	mul.w	r8, r3, r1
90020d00:	011b      	lsls	r3, r3, #4
90020d02:	78be      	ldrb	r6, [r7, #2]
90020d04:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
90020d08:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
90020d0c:	eba3 0308 	sub.w	r3, r3, r8
90020d10:	f814 9009 	ldrb.w	r9, [r4, r9]
90020d14:	b289      	uxth	r1, r1
90020d16:	b29b      	uxth	r3, r3
90020d18:	ebae 0e01 	sub.w	lr, lr, r1
90020d1c:	435e      	muls	r6, r3
90020d1e:	fa1f fe8e 	uxth.w	lr, lr
90020d22:	9310      	str	r3, [sp, #64]	; 0x40
90020d24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90020d26:	fb0e 660b 	mla	r6, lr, fp, r6
90020d2a:	f892 b002 	ldrb.w	fp, [r2, #2]
90020d2e:	fb01 660b 	mla	r6, r1, fp, r6
90020d32:	f890 b002 	ldrb.w	fp, [r0, #2]
90020d36:	fb08 660b 	mla	r6, r8, fp, r6
90020d3a:	ea4f 2b2c 	mov.w	fp, ip, asr #8
90020d3e:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
90020d42:	f3c6 2607 	ubfx	r6, r6, #8, #8
90020d46:	fb1b fb03 	smulbb	fp, fp, r3
90020d4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
90020d4c:	fb06 b60a 	mla	r6, r6, sl, fp
90020d50:	f895 b001 	ldrb.w	fp, [r5, #1]
90020d54:	787d      	ldrb	r5, [r7, #1]
90020d56:	783f      	ldrb	r7, [r7, #0]
90020d58:	b2b6      	uxth	r6, r6
90020d5a:	435d      	muls	r5, r3
90020d5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90020d5e:	fb0e 550b 	mla	r5, lr, fp, r5
90020d62:	f892 b001 	ldrb.w	fp, [r2, #1]
90020d66:	fb01 550b 	mla	r5, r1, fp, r5
90020d6a:	f890 b001 	ldrb.w	fp, [r0, #1]
90020d6e:	fb08 550b 	mla	r5, r8, fp, r5
90020d72:	ea4f 0bec 	mov.w	fp, ip, asr #3
90020d76:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90020d7a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
90020d7e:	f3c5 2507 	ubfx	r5, r5, #8, #8
90020d82:	fa5f fc8c 	uxtb.w	ip, ip
90020d86:	fb1b fb03 	smulbb	fp, fp, r3
90020d8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
90020d8c:	437b      	muls	r3, r7
90020d8e:	7817      	ldrb	r7, [r2, #0]
90020d90:	fb05 b50a 	mla	r5, r5, sl, fp
90020d94:	fb0e 3309 	mla	r3, lr, r9, r3
90020d98:	b2ad      	uxth	r5, r5
90020d9a:	fb01 3307 	mla	r3, r1, r7, r3
90020d9e:	7807      	ldrb	r7, [r0, #0]
90020da0:	f105 0b01 	add.w	fp, r5, #1
90020da4:	fb08 3707 	mla	r7, r8, r7, r3
90020da8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90020daa:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
90020dae:	fb1c fc03 	smulbb	ip, ip, r3
90020db2:	f3c7 2707 	ubfx	r7, r7, #8, #8
90020db6:	1c73      	adds	r3, r6, #1
90020db8:	096d      	lsrs	r5, r5, #5
90020dba:	fb07 c70a 	mla	r7, r7, sl, ip
90020dbe:	eb03 2616 	add.w	r6, r3, r6, lsr #8
90020dc2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90020dc6:	b2bf      	uxth	r7, r7
90020dc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90020dca:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
90020dce:	1c7a      	adds	r2, r7, #1
90020dd0:	eb02 2217 	add.w	r2, r2, r7, lsr #8
90020dd4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
90020dd8:	4316      	orrs	r6, r2
90020dda:	9a21      	ldr	r2, [sp, #132]	; 0x84
90020ddc:	432e      	orrs	r6, r5
90020dde:	f823 6b02 	strh.w	r6, [r3], #2
90020de2:	930c      	str	r3, [sp, #48]	; 0x30
90020de4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020de6:	4413      	add	r3, r2
90020de8:	9a22      	ldr	r2, [sp, #136]	; 0x88
90020dea:	931f      	str	r3, [sp, #124]	; 0x7c
90020dec:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020dee:	4413      	add	r3, r2
90020df0:	9320      	str	r3, [sp, #128]	; 0x80
90020df2:	9b11      	ldr	r3, [sp, #68]	; 0x44
90020df4:	3b01      	subs	r3, #1
90020df6:	9311      	str	r3, [sp, #68]	; 0x44
90020df8:	e6db      	b.n	90020bb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
90020dfa:	b149      	cbz	r1, 90020e10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
90020dfc:	5cb2      	ldrb	r2, [r6, r2]
90020dfe:	4628      	mov	r0, r5
90020e00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90020e04:	4422      	add	r2, r4
90020e06:	462f      	mov	r7, r5
90020e08:	e771      	b.n	90020cee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
90020e0a:	4628      	mov	r0, r5
90020e0c:	462a      	mov	r2, r5
90020e0e:	e76e      	b.n	90020cee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
90020e10:	4628      	mov	r0, r5
90020e12:	462a      	mov	r2, r5
90020e14:	e7f7      	b.n	90020e06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90020e16:	b015      	add	sp, #84	; 0x54
90020e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90020e1c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
90020e1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020e20:	880f      	ldrh	r7, [r1, #0]
90020e22:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
90020e26:	023c      	lsls	r4, r7, #8
90020e28:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
90020e2c:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
90020e30:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
90020e34:	017c      	lsls	r4, r7, #5
90020e36:	00ff      	lsls	r7, r7, #3
90020e38:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
90020e3c:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
90020e40:	b2ff      	uxtb	r7, r7
90020e42:	ea4b 0404 	orr.w	r4, fp, r4
90020e46:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
90020e4a:	4327      	orrs	r7, r4
90020e4c:	fb05 ca0e 	mla	sl, r5, lr, ip
90020e50:	2d00      	cmp	r5, #0
90020e52:	9701      	str	r7, [sp, #4]
90020e54:	eb02 080a 	add.w	r8, r2, sl
90020e58:	db7e      	blt.n	90020f58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
90020e5a:	45a9      	cmp	r9, r5
90020e5c:	dd7c      	ble.n	90020f58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
90020e5e:	f1bc 0f00 	cmp.w	ip, #0
90020e62:	db77      	blt.n	90020f54 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
90020e64:	45e6      	cmp	lr, ip
90020e66:	dd75      	ble.n	90020f54 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
90020e68:	f812 700a 	ldrb.w	r7, [r2, sl]
90020e6c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
90020e70:	441f      	add	r7, r3
90020e72:	f11c 0201 	adds.w	r2, ip, #1
90020e76:	d472      	bmi.n	90020f5e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
90020e78:	4596      	cmp	lr, r2
90020e7a:	dd70      	ble.n	90020f5e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
90020e7c:	2800      	cmp	r0, #0
90020e7e:	d06e      	beq.n	90020f5e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
90020e80:	f898 4001 	ldrb.w	r4, [r8, #1]
90020e84:	eb04 0444 	add.w	r4, r4, r4, lsl #1
90020e88:	441c      	add	r4, r3
90020e8a:	3501      	adds	r5, #1
90020e8c:	d46b      	bmi.n	90020f66 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
90020e8e:	45a9      	cmp	r9, r5
90020e90:	dd69      	ble.n	90020f66 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
90020e92:	2e00      	cmp	r6, #0
90020e94:	d067      	beq.n	90020f66 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
90020e96:	f1bc 0f00 	cmp.w	ip, #0
90020e9a:	db62      	blt.n	90020f62 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
90020e9c:	45e6      	cmp	lr, ip
90020e9e:	dd60      	ble.n	90020f62 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
90020ea0:	f818 500e 	ldrb.w	r5, [r8, lr]
90020ea4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
90020ea8:	441d      	add	r5, r3
90020eaa:	f11c 0201 	adds.w	r2, ip, #1
90020eae:	d45d      	bmi.n	90020f6c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
90020eb0:	4596      	cmp	lr, r2
90020eb2:	dd5b      	ble.n	90020f6c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
90020eb4:	2800      	cmp	r0, #0
90020eb6:	d059      	beq.n	90020f6c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
90020eb8:	44c6      	add	lr, r8
90020eba:	f89e 2001 	ldrb.w	r2, [lr, #1]
90020ebe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90020ec2:	4413      	add	r3, r2
90020ec4:	b280      	uxth	r0, r0
90020ec6:	f897 e002 	ldrb.w	lr, [r7, #2]
90020eca:	b2b2      	uxth	r2, r6
90020ecc:	f897 9000 	ldrb.w	r9, [r7]
90020ed0:	787f      	ldrb	r7, [r7, #1]
90020ed2:	fb00 f602 	mul.w	r6, r0, r2
90020ed6:	0100      	lsls	r0, r0, #4
90020ed8:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
90020edc:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
90020ee0:	1b80      	subs	r0, r0, r6
90020ee2:	fa1f fc82 	uxth.w	ip, r2
90020ee6:	b282      	uxth	r2, r0
90020ee8:	78a0      	ldrb	r0, [r4, #2]
90020eea:	eba8 080c 	sub.w	r8, r8, ip
90020eee:	4350      	muls	r0, r2
90020ef0:	fa1f f888 	uxth.w	r8, r8
90020ef4:	fb08 0e0e 	mla	lr, r8, lr, r0
90020ef8:	78a8      	ldrb	r0, [r5, #2]
90020efa:	fb0c e000 	mla	r0, ip, r0, lr
90020efe:	f893 e002 	ldrb.w	lr, [r3, #2]
90020f02:	fb06 0e0e 	mla	lr, r6, lr, r0
90020f06:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
90020f0a:	f894 e000 	ldrb.w	lr, [r4]
90020f0e:	fb02 fe0e 	mul.w	lr, r2, lr
90020f12:	fb08 e909 	mla	r9, r8, r9, lr
90020f16:	f895 e000 	ldrb.w	lr, [r5]
90020f1a:	fb0c 990e 	mla	r9, ip, lr, r9
90020f1e:	f893 e000 	ldrb.w	lr, [r3]
90020f22:	785b      	ldrb	r3, [r3, #1]
90020f24:	fb06 9e0e 	mla	lr, r6, lr, r9
90020f28:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
90020f2c:	ea4e 0e00 	orr.w	lr, lr, r0
90020f30:	7860      	ldrb	r0, [r4, #1]
90020f32:	4350      	muls	r0, r2
90020f34:	786a      	ldrb	r2, [r5, #1]
90020f36:	fb08 0007 	mla	r0, r8, r7, r0
90020f3a:	fb0c 0202 	mla	r2, ip, r2, r0
90020f3e:	fb06 2303 	mla	r3, r6, r3, r2
90020f42:	095b      	lsrs	r3, r3, #5
90020f44:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90020f48:	ea4e 0303 	orr.w	r3, lr, r3
90020f4c:	800b      	strh	r3, [r1, #0]
90020f4e:	b003      	add	sp, #12
90020f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90020f54:	af01      	add	r7, sp, #4
90020f56:	e78c      	b.n	90020e72 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
90020f58:	ac01      	add	r4, sp, #4
90020f5a:	4627      	mov	r7, r4
90020f5c:	e795      	b.n	90020e8a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
90020f5e:	ac01      	add	r4, sp, #4
90020f60:	e793      	b.n	90020e8a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
90020f62:	ad01      	add	r5, sp, #4
90020f64:	e7a1      	b.n	90020eaa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
90020f66:	ab01      	add	r3, sp, #4
90020f68:	461d      	mov	r5, r3
90020f6a:	e7ab      	b.n	90020ec4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
90020f6c:	ab01      	add	r3, sp, #4
90020f6e:	e7a9      	b.n	90020ec4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

90020f70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90020f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020f74:	b08f      	sub	sp, #60	; 0x3c
90020f76:	920c      	str	r2, [sp, #48]	; 0x30
90020f78:	9a1d      	ldr	r2, [sp, #116]	; 0x74
90020f7a:	900d      	str	r0, [sp, #52]	; 0x34
90020f7c:	910a      	str	r1, [sp, #40]	; 0x28
90020f7e:	6850      	ldr	r0, [r2, #4]
90020f80:	9306      	str	r3, [sp, #24]
90020f82:	6812      	ldr	r2, [r2, #0]
90020f84:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
90020f88:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
90020f8c:	fb00 1303 	mla	r3, r0, r3, r1
90020f90:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90020f94:	9307      	str	r3, [sp, #28]
90020f96:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020f98:	681b      	ldr	r3, [r3, #0]
90020f9a:	9308      	str	r3, [sp, #32]
90020f9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020f9e:	685c      	ldr	r4, [r3, #4]
90020fa0:	3404      	adds	r4, #4
90020fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90020fa4:	2b00      	cmp	r3, #0
90020fa6:	dc03      	bgt.n	90020fb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
90020fa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90020faa:	2b00      	cmp	r3, #0
90020fac:	f340 81d5 	ble.w	9002135a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
90020fb0:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020fb2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90020fb6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90020fba:	1e48      	subs	r0, r1, #1
90020fbc:	1e56      	subs	r6, r2, #1
90020fbe:	9b06      	ldr	r3, [sp, #24]
90020fc0:	2b00      	cmp	r3, #0
90020fc2:	f340 80b6 	ble.w	90021132 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90020fc6:	ea5f 472b 	movs.w	r7, fp, asr #16
90020fca:	ea4f 4325 	mov.w	r3, r5, asr #16
90020fce:	d406      	bmi.n	90020fde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90020fd0:	4287      	cmp	r7, r0
90020fd2:	da04      	bge.n	90020fde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90020fd4:	2b00      	cmp	r3, #0
90020fd6:	db02      	blt.n	90020fde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90020fd8:	42b3      	cmp	r3, r6
90020fda:	f2c0 80ab 	blt.w	90021134 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
90020fde:	3701      	adds	r7, #1
90020fe0:	f100 809c 	bmi.w	9002111c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
90020fe4:	42b9      	cmp	r1, r7
90020fe6:	f2c0 8099 	blt.w	9002111c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
90020fea:	3301      	adds	r3, #1
90020fec:	f100 8096 	bmi.w	9002111c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
90020ff0:	429a      	cmp	r2, r3
90020ff2:	f2c0 8093 	blt.w	9002111c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
90020ff6:	9b06      	ldr	r3, [sp, #24]
90020ff8:	930b      	str	r3, [sp, #44]	; 0x2c
90020ffa:	9b07      	ldr	r3, [sp, #28]
90020ffc:	9309      	str	r3, [sp, #36]	; 0x24
90020ffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90021000:	2b00      	cmp	r3, #0
90021002:	f340 80b4 	ble.w	9002116e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
90021006:	9820      	ldr	r0, [sp, #128]	; 0x80
90021008:	142e      	asrs	r6, r5, #16
9002100a:	9a20      	ldr	r2, [sp, #128]	; 0x80
9002100c:	f3cb 3303 	ubfx	r3, fp, #12, #4
90021010:	68c7      	ldr	r7, [r0, #12]
90021012:	ea5f 402b 	movs.w	r0, fp, asr #16
90021016:	f3c5 3103 	ubfx	r1, r5, #12, #4
9002101a:	6892      	ldr	r2, [r2, #8]
9002101c:	f100 80fb 	bmi.w	90021216 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
90021020:	f102 3cff 	add.w	ip, r2, #4294967295
90021024:	4560      	cmp	r0, ip
90021026:	f280 80f6 	bge.w	90021216 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9002102a:	2e00      	cmp	r6, #0
9002102c:	f2c0 80f3 	blt.w	90021216 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
90021030:	f107 3cff 	add.w	ip, r7, #4294967295
90021034:	4566      	cmp	r6, ip
90021036:	f280 80ee 	bge.w	90021216 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9002103a:	b212      	sxth	r2, r2
9002103c:	fb06 0002 	mla	r0, r6, r2, r0
90021040:	9e08      	ldr	r6, [sp, #32]
90021042:	1837      	adds	r7, r6, r0
90021044:	5c30      	ldrb	r0, [r6, r0]
90021046:	eb00 0840 	add.w	r8, r0, r0, lsl #1
9002104a:	eb04 0c08 	add.w	ip, r4, r8
9002104e:	2b00      	cmp	r3, #0
90021050:	f000 80d3 	beq.w	900211fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
90021054:	787e      	ldrb	r6, [r7, #1]
90021056:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9002105a:	4426      	add	r6, r4
9002105c:	2900      	cmp	r1, #0
9002105e:	f000 80d4 	beq.w	9002120a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
90021062:	18b8      	adds	r0, r7, r2
90021064:	5cba      	ldrb	r2, [r7, r2]
90021066:	7840      	ldrb	r0, [r0, #1]
90021068:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9002106c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
90021070:	4422      	add	r2, r4
90021072:	4420      	add	r0, r4
90021074:	b29b      	uxth	r3, r3
90021076:	78b7      	ldrb	r7, [r6, #2]
90021078:	b289      	uxth	r1, r1
9002107a:	f89c a002 	ldrb.w	sl, [ip, #2]
9002107e:	f89c c001 	ldrb.w	ip, [ip, #1]
90021082:	fb03 f901 	mul.w	r9, r3, r1
90021086:	011b      	lsls	r3, r3, #4
90021088:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9002108c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
90021090:	eba3 0309 	sub.w	r3, r3, r9
90021094:	b289      	uxth	r1, r1
90021096:	b29b      	uxth	r3, r3
90021098:	ebae 0e01 	sub.w	lr, lr, r1
9002109c:	435f      	muls	r7, r3
9002109e:	fa1f fe8e 	uxth.w	lr, lr
900210a2:	fb0e 770a 	mla	r7, lr, sl, r7
900210a6:	f892 a002 	ldrb.w	sl, [r2, #2]
900210aa:	fb01 770a 	mla	r7, r1, sl, r7
900210ae:	f890 a002 	ldrb.w	sl, [r0, #2]
900210b2:	fb09 7a0a 	mla	sl, r9, sl, r7
900210b6:	f814 7008 	ldrb.w	r7, [r4, r8]
900210ba:	f896 8000 	ldrb.w	r8, [r6]
900210be:	7876      	ldrb	r6, [r6, #1]
900210c0:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
900210c4:	fb03 f808 	mul.w	r8, r3, r8
900210c8:	4373      	muls	r3, r6
900210ca:	fb0e 8807 	mla	r8, lr, r7, r8
900210ce:	7817      	ldrb	r7, [r2, #0]
900210d0:	fb0e 330c 	mla	r3, lr, ip, r3
900210d4:	fb01 8807 	mla	r8, r1, r7, r8
900210d8:	7807      	ldrb	r7, [r0, #0]
900210da:	fb09 8707 	mla	r7, r9, r7, r8
900210de:	f3c7 27c4 	ubfx	r7, r7, #11, #5
900210e2:	ea47 070a 	orr.w	r7, r7, sl
900210e6:	f892 a001 	ldrb.w	sl, [r2, #1]
900210ea:	fb01 310a 	mla	r1, r1, sl, r3
900210ee:	f890 a001 	ldrb.w	sl, [r0, #1]
900210f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
900210f4:	fb09 1a0a 	mla	sl, r9, sl, r1
900210f8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900210fc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90021100:	ea47 070a 	orr.w	r7, r7, sl
90021104:	801f      	strh	r7, [r3, #0]
90021106:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021108:	3302      	adds	r3, #2
9002110a:	9309      	str	r3, [sp, #36]	; 0x24
9002110c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9002110e:	449b      	add	fp, r3
90021110:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90021112:	441d      	add	r5, r3
90021114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90021116:	3b01      	subs	r3, #1
90021118:	930b      	str	r3, [sp, #44]	; 0x2c
9002111a:	e770      	b.n	90020ffe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9002111c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9002111e:	449b      	add	fp, r3
90021120:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90021122:	441d      	add	r5, r3
90021124:	9b06      	ldr	r3, [sp, #24]
90021126:	3b01      	subs	r3, #1
90021128:	9306      	str	r3, [sp, #24]
9002112a:	9b07      	ldr	r3, [sp, #28]
9002112c:	3302      	adds	r3, #2
9002112e:	9307      	str	r3, [sp, #28]
90021130:	e745      	b.n	90020fbe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
90021132:	d023      	beq.n	9002117c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
90021134:	9b06      	ldr	r3, [sp, #24]
90021136:	981b      	ldr	r0, [sp, #108]	; 0x6c
90021138:	3b01      	subs	r3, #1
9002113a:	fb00 b003 	mla	r0, r0, r3, fp
9002113e:	1400      	asrs	r0, r0, #16
90021140:	f53f af59 	bmi.w	90020ff6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
90021144:	3901      	subs	r1, #1
90021146:	4288      	cmp	r0, r1
90021148:	f6bf af55 	bge.w	90020ff6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9002114c:	991c      	ldr	r1, [sp, #112]	; 0x70
9002114e:	fb01 5303 	mla	r3, r1, r3, r5
90021152:	141b      	asrs	r3, r3, #16
90021154:	f53f af4f 	bmi.w	90020ff6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
90021158:	3a01      	subs	r2, #1
9002115a:	4293      	cmp	r3, r2
9002115c:	f6bf af4b 	bge.w	90020ff6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
90021160:	9b06      	ldr	r3, [sp, #24]
90021162:	9309      	str	r3, [sp, #36]	; 0x24
90021164:	9b07      	ldr	r3, [sp, #28]
90021166:	930b      	str	r3, [sp, #44]	; 0x2c
90021168:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002116a:	2b00      	cmp	r3, #0
9002116c:	dc70      	bgt.n	90021250 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
9002116e:	9b06      	ldr	r3, [sp, #24]
90021170:	9a07      	ldr	r2, [sp, #28]
90021172:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90021176:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9002117a:	9307      	str	r3, [sp, #28]
9002117c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002117e:	2b00      	cmp	r3, #0
90021180:	f340 80eb 	ble.w	9002135a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
90021184:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90021188:	9b18      	ldr	r3, [sp, #96]	; 0x60
9002118a:	ee30 0a04 	vadd.f32	s0, s0, s8
9002118e:	ee70 0aa4 	vadd.f32	s1, s1, s9
90021192:	eef0 6a62 	vmov.f32	s13, s5
90021196:	eec7 7a00 	vdiv.f32	s15, s14, s0
9002119a:	ee31 1a05 	vadd.f32	s2, s2, s10
9002119e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900211a2:	ee16 ba90 	vmov	fp, s13
900211a6:	eef0 6a43 	vmov.f32	s13, s6
900211aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900211ae:	ee16 5a90 	vmov	r5, s13
900211b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
900211b6:	ee61 7a27 	vmul.f32	s15, s2, s15
900211ba:	ee77 2a62 	vsub.f32	s5, s14, s5
900211be:	ee37 3ac3 	vsub.f32	s6, s15, s6
900211c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900211c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900211ca:	ee12 2a90 	vmov	r2, s5
900211ce:	eef0 2a47 	vmov.f32	s5, s14
900211d2:	fb92 f3f3 	sdiv	r3, r2, r3
900211d6:	ee13 2a10 	vmov	r2, s6
900211da:	931b      	str	r3, [sp, #108]	; 0x6c
900211dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
900211de:	eeb0 3a67 	vmov.f32	s6, s15
900211e2:	fb92 f3f3 	sdiv	r3, r2, r3
900211e6:	931c      	str	r3, [sp, #112]	; 0x70
900211e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900211ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
900211ec:	3b01      	subs	r3, #1
900211ee:	930a      	str	r3, [sp, #40]	; 0x28
900211f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
900211f2:	bf08      	it	eq
900211f4:	4613      	moveq	r3, r2
900211f6:	9306      	str	r3, [sp, #24]
900211f8:	e6d3      	b.n	90020fa2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
900211fa:	b149      	cbz	r1, 90021210 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
900211fc:	5cba      	ldrb	r2, [r7, r2]
900211fe:	4660      	mov	r0, ip
90021200:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90021204:	4422      	add	r2, r4
90021206:	4666      	mov	r6, ip
90021208:	e734      	b.n	90021074 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
9002120a:	4660      	mov	r0, ip
9002120c:	4662      	mov	r2, ip
9002120e:	e731      	b.n	90021074 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
90021210:	4660      	mov	r0, ip
90021212:	4662      	mov	r2, ip
90021214:	e7f7      	b.n	90021206 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
90021216:	f110 0c01 	adds.w	ip, r0, #1
9002121a:	f53f af74 	bmi.w	90021106 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9002121e:	4562      	cmp	r2, ip
90021220:	f6ff af71 	blt.w	90021106 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
90021224:	f116 0c01 	adds.w	ip, r6, #1
90021228:	f53f af6d 	bmi.w	90021106 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9002122c:	4567      	cmp	r7, ip
9002122e:	f6ff af6a 	blt.w	90021106 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
90021232:	b23f      	sxth	r7, r7
90021234:	b212      	sxth	r2, r2
90021236:	9701      	str	r7, [sp, #4]
90021238:	9200      	str	r2, [sp, #0]
9002123a:	e9cd 3104 	strd	r3, r1, [sp, #16]
9002123e:	e9cd 0602 	strd	r0, r6, [sp, #8]
90021242:	4623      	mov	r3, r4
90021244:	980d      	ldr	r0, [sp, #52]	; 0x34
90021246:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9002124a:	f7ff fde7 	bl	90020e1c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
9002124e:	e75a      	b.n	90021106 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
90021250:	9a20      	ldr	r2, [sp, #128]	; 0x80
90021252:	ea4f 462b 	mov.w	r6, fp, asr #16
90021256:	1428      	asrs	r0, r5, #16
90021258:	f3cb 3303 	ubfx	r3, fp, #12, #4
9002125c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
90021260:	f3c5 3103 	ubfx	r1, r5, #12, #4
90021264:	fb02 6000 	mla	r0, r2, r0, r6
90021268:	9e08      	ldr	r6, [sp, #32]
9002126a:	f816 8000 	ldrb.w	r8, [r6, r0]
9002126e:	1837      	adds	r7, r6, r0
90021270:	eb08 0848 	add.w	r8, r8, r8, lsl #1
90021274:	eb04 0c08 	add.w	ip, r4, r8
90021278:	2b00      	cmp	r3, #0
9002127a:	d060      	beq.n	9002133e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
9002127c:	787e      	ldrb	r6, [r7, #1]
9002127e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
90021282:	4426      	add	r6, r4
90021284:	2900      	cmp	r1, #0
90021286:	d062      	beq.n	9002134e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
90021288:	18b8      	adds	r0, r7, r2
9002128a:	5cba      	ldrb	r2, [r7, r2]
9002128c:	7840      	ldrb	r0, [r0, #1]
9002128e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90021292:	eb00 0040 	add.w	r0, r0, r0, lsl #1
90021296:	4422      	add	r2, r4
90021298:	4420      	add	r0, r4
9002129a:	b29b      	uxth	r3, r3
9002129c:	78b7      	ldrb	r7, [r6, #2]
9002129e:	b289      	uxth	r1, r1
900212a0:	f89c a002 	ldrb.w	sl, [ip, #2]
900212a4:	f89c c001 	ldrb.w	ip, [ip, #1]
900212a8:	fb03 f901 	mul.w	r9, r3, r1
900212ac:	011b      	lsls	r3, r3, #4
900212ae:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
900212b2:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
900212b6:	eba3 0309 	sub.w	r3, r3, r9
900212ba:	b289      	uxth	r1, r1
900212bc:	b29b      	uxth	r3, r3
900212be:	ebae 0e01 	sub.w	lr, lr, r1
900212c2:	435f      	muls	r7, r3
900212c4:	fa1f fe8e 	uxth.w	lr, lr
900212c8:	fb0e 770a 	mla	r7, lr, sl, r7
900212cc:	f892 a002 	ldrb.w	sl, [r2, #2]
900212d0:	fb01 770a 	mla	r7, r1, sl, r7
900212d4:	f890 a002 	ldrb.w	sl, [r0, #2]
900212d8:	fb09 7a0a 	mla	sl, r9, sl, r7
900212dc:	f814 7008 	ldrb.w	r7, [r4, r8]
900212e0:	f896 8000 	ldrb.w	r8, [r6]
900212e4:	7876      	ldrb	r6, [r6, #1]
900212e6:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
900212ea:	fb03 f808 	mul.w	r8, r3, r8
900212ee:	4373      	muls	r3, r6
900212f0:	7856      	ldrb	r6, [r2, #1]
900212f2:	fb0e 8807 	mla	r8, lr, r7, r8
900212f6:	7817      	ldrb	r7, [r2, #0]
900212f8:	fb0e 330c 	mla	r3, lr, ip, r3
900212fc:	fb01 8807 	mla	r8, r1, r7, r8
90021300:	7807      	ldrb	r7, [r0, #0]
90021302:	fb01 3306 	mla	r3, r1, r6, r3
90021306:	fb09 8707 	mla	r7, r9, r7, r8
9002130a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9002130e:	ea47 070a 	orr.w	r7, r7, sl
90021312:	f890 a001 	ldrb.w	sl, [r0, #1]
90021316:	fb09 3a0a 	mla	sl, r9, sl, r3
9002131a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9002131c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90021320:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90021324:	ea47 070a 	orr.w	r7, r7, sl
90021328:	f823 7b02 	strh.w	r7, [r3], #2
9002132c:	930b      	str	r3, [sp, #44]	; 0x2c
9002132e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
90021330:	449b      	add	fp, r3
90021332:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90021334:	441d      	add	r5, r3
90021336:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021338:	3b01      	subs	r3, #1
9002133a:	9309      	str	r3, [sp, #36]	; 0x24
9002133c:	e714      	b.n	90021168 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
9002133e:	b149      	cbz	r1, 90021354 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
90021340:	5cba      	ldrb	r2, [r7, r2]
90021342:	4660      	mov	r0, ip
90021344:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90021348:	4422      	add	r2, r4
9002134a:	4666      	mov	r6, ip
9002134c:	e7a5      	b.n	9002129a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
9002134e:	4660      	mov	r0, ip
90021350:	4662      	mov	r2, ip
90021352:	e7a2      	b.n	9002129a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
90021354:	4660      	mov	r0, ip
90021356:	4662      	mov	r2, ip
90021358:	e7f7      	b.n	9002134a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
9002135a:	b00f      	add	sp, #60	; 0x3c
9002135c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90021360 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
90021360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90021364:	b085      	sub	sp, #20
90021366:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
9002136a:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
9002136e:	9102      	str	r1, [sp, #8]
90021370:	2c00      	cmp	r4, #0
90021372:	fb04 710c 	mla	r1, r4, ip, r7
90021376:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
9002137a:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
9002137e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
90021382:	eb02 0e01 	add.w	lr, r2, r1
90021386:	f2c0 8122 	blt.w	900215ce <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
9002138a:	45a0      	cmp	r8, r4
9002138c:	f340 811f 	ble.w	900215ce <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
90021390:	2f00      	cmp	r7, #0
90021392:	f2c0 811a 	blt.w	900215ca <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
90021396:	45bc      	cmp	ip, r7
90021398:	f340 8117 	ble.w	900215ca <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
9002139c:	5c52      	ldrb	r2, [r2, r1]
9002139e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
900213a2:	1c7a      	adds	r2, r7, #1
900213a4:	f100 8116 	bmi.w	900215d4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
900213a8:	4594      	cmp	ip, r2
900213aa:	f340 8113 	ble.w	900215d4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
900213ae:	2e00      	cmp	r6, #0
900213b0:	f000 8112 	beq.w	900215d8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
900213b4:	f89e 2001 	ldrb.w	r2, [lr, #1]
900213b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
900213bc:	3401      	adds	r4, #1
900213be:	f100 810f 	bmi.w	900215e0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
900213c2:	45a0      	cmp	r8, r4
900213c4:	f340 810c 	ble.w	900215e0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
900213c8:	2800      	cmp	r0, #0
900213ca:	f000 810c 	beq.w	900215e6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
900213ce:	2f00      	cmp	r7, #0
900213d0:	f2c0 8104 	blt.w	900215dc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
900213d4:	45bc      	cmp	ip, r7
900213d6:	f340 8101 	ble.w	900215dc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
900213da:	f81e 200c 	ldrb.w	r2, [lr, ip]
900213de:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
900213e2:	3701      	adds	r7, #1
900213e4:	f100 8102 	bmi.w	900215ec <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
900213e8:	45bc      	cmp	ip, r7
900213ea:	f340 80ff 	ble.w	900215ec <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
900213ee:	2e00      	cmp	r6, #0
900213f0:	f000 80fe 	beq.w	900215f0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
900213f4:	44f4      	add	ip, lr
900213f6:	f89c 2001 	ldrb.w	r2, [ip, #1]
900213fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
900213fe:	b2b6      	uxth	r6, r6
90021400:	b280      	uxth	r0, r0
90021402:	ea4f 6a11 	mov.w	sl, r1, lsr #24
90021406:	fb00 fe06 	mul.w	lr, r0, r6
9002140a:	0136      	lsls	r6, r6, #4
9002140c:	ea4f 6b15 	mov.w	fp, r5, lsr #24
90021410:	ebce 1000 	rsb	r0, lr, r0, lsl #4
90021414:	eba6 070e 	sub.w	r7, r6, lr
90021418:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
9002141c:	ea4f 6914 	mov.w	r9, r4, lsr #24
90021420:	b280      	uxth	r0, r0
90021422:	b2bf      	uxth	r7, r7
90021424:	1a1b      	subs	r3, r3, r0
90021426:	ea4f 6812 	mov.w	r8, r2, lsr #24
9002142a:	fb0a f607 	mul.w	r6, sl, r7
9002142e:	b29b      	uxth	r3, r3
90021430:	fb0b 6603 	mla	r6, fp, r3, r6
90021434:	fb00 6609 	mla	r6, r0, r9, r6
90021438:	fb0e 6608 	mla	r6, lr, r8, r6
9002143c:	f3c6 2607 	ubfx	r6, r6, #8, #8
90021440:	9600      	str	r6, [sp, #0]
90021442:	2e00      	cmp	r6, #0
90021444:	f000 80be 	beq.w	900215c4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
90021448:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9002144c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
90021450:	9e02      	ldr	r6, [sp, #8]
90021452:	fb0b fc0c 	mul.w	ip, fp, ip
90021456:	fb0b f505 	mul.w	r5, fp, r5
9002145a:	8836      	ldrh	r6, [r6, #0]
9002145c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
90021460:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90021464:	9501      	str	r5, [sp, #4]
90021466:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
9002146a:	44dc      	add	ip, fp
9002146c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021470:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
90021474:	9503      	str	r5, [sp, #12]
90021476:	9d01      	ldr	r5, [sp, #4]
90021478:	f505 7c80 	add.w	ip, r5, #256	; 0x100
9002147c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
90021480:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
90021484:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90021488:	fb0a fc0c 	mul.w	ip, sl, ip
9002148c:	ea4f 2b15 	mov.w	fp, r5, lsr #8
90021490:	fb0a fa01 	mul.w	sl, sl, r1
90021494:	ea4f 251c 	mov.w	r5, ip, lsr #8
90021498:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9002149c:	f50a 7180 	add.w	r1, sl, #256	; 0x100
900214a0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
900214a4:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
900214a8:	4465      	add	r5, ip
900214aa:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
900214ae:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
900214b2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900214b6:	fb09 fc0c 	mul.w	ip, r9, ip
900214ba:	0a2d      	lsrs	r5, r5, #8
900214bc:	fb09 f904 	mul.w	r9, r9, r4
900214c0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900214c4:	ea4f 211c 	mov.w	r1, ip, lsr #8
900214c8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
900214cc:	f509 7480 	add.w	r4, r9, #256	; 0x100
900214d0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
900214d4:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
900214d8:	437d      	muls	r5, r7
900214da:	eb04 2919 	add.w	r9, r4, r9, lsr #8
900214de:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
900214e2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
900214e6:	4461      	add	r1, ip
900214e8:	fb08 f404 	mul.w	r4, r8, r4
900214ec:	ea4f 2919 	mov.w	r9, r9, lsr #8
900214f0:	fb08 f802 	mul.w	r8, r8, r2
900214f4:	0a09      	lsrs	r1, r1, #8
900214f6:	0a22      	lsrs	r2, r4, #8
900214f8:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
900214fc:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90021500:	fb07 f70a 	mul.w	r7, r7, sl
90021504:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90021508:	4414      	add	r4, r2
9002150a:	f508 7280 	add.w	r2, r8, #256	; 0x100
9002150e:	0a24      	lsrs	r4, r4, #8
90021510:	eb02 2818 	add.w	r8, r2, r8, lsr #8
90021514:	9a03      	ldr	r2, [sp, #12]
90021516:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
9002151a:	fb02 5503 	mla	r5, r2, r3, r5
9002151e:	ea4f 2818 	mov.w	r8, r8, lsr #8
90021522:	9a00      	ldr	r2, [sp, #0]
90021524:	fb04 540e 	mla	r4, r4, lr, r5
90021528:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
9002152c:	1235      	asrs	r5, r6, #8
9002152e:	fb01 4100 	mla	r1, r1, r0, r4
90021532:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90021536:	0a09      	lsrs	r1, r1, #8
90021538:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
9002153c:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
90021540:	fb03 7101 	mla	r1, r3, r1, r7
90021544:	fb0e 1e08 	mla	lr, lr, r8, r1
90021548:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
9002154c:	fb00 e101 	mla	r1, r0, r1, lr
90021550:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
90021554:	b287      	uxth	r7, r0
90021556:	0a09      	lsrs	r1, r1, #8
90021558:	437a      	muls	r2, r7
9002155a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9002155e:	1c53      	adds	r3, r2, #1
90021560:	4321      	orrs	r1, r4
90021562:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90021566:	0c0a      	lsrs	r2, r1, #16
90021568:	f3c1 2407 	ubfx	r4, r1, #8, #8
9002156c:	ea6f 2313 	mvn.w	r3, r3, lsr #8
90021570:	b2c8      	uxtb	r0, r1
90021572:	fb12 f207 	smulbb	r2, r2, r7
90021576:	fb14 f407 	smulbb	r4, r4, r7
9002157a:	b2db      	uxtb	r3, r3
9002157c:	fb10 f007 	smulbb	r0, r0, r7
90021580:	fb05 2503 	mla	r5, r5, r3, r2
90021584:	10f2      	asrs	r2, r6, #3
90021586:	00f6      	lsls	r6, r6, #3
90021588:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9002158c:	b2ad      	uxth	r5, r5
9002158e:	b2f6      	uxtb	r6, r6
90021590:	fb02 4203 	mla	r2, r2, r3, r4
90021594:	fb06 0303 	mla	r3, r6, r3, r0
90021598:	b294      	uxth	r4, r2
9002159a:	b299      	uxth	r1, r3
9002159c:	1c6b      	adds	r3, r5, #1
9002159e:	1c62      	adds	r2, r4, #1
900215a0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
900215a4:	1c4b      	adds	r3, r1, #1
900215a6:	eb02 2214 	add.w	r2, r2, r4, lsr #8
900215aa:	eb03 2311 	add.w	r3, r3, r1, lsr #8
900215ae:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
900215b2:	0952      	lsrs	r2, r2, #5
900215b4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
900215b8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900215bc:	432b      	orrs	r3, r5
900215be:	4313      	orrs	r3, r2
900215c0:	9a02      	ldr	r2, [sp, #8]
900215c2:	8013      	strh	r3, [r2, #0]
900215c4:	b005      	add	sp, #20
900215c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900215ca:	2500      	movs	r5, #0
900215cc:	e6e9      	b.n	900213a2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
900215ce:	2100      	movs	r1, #0
900215d0:	460d      	mov	r5, r1
900215d2:	e6f3      	b.n	900213bc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
900215d4:	2100      	movs	r1, #0
900215d6:	e6f1      	b.n	900213bc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
900215d8:	4631      	mov	r1, r6
900215da:	e6ef      	b.n	900213bc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
900215dc:	2400      	movs	r4, #0
900215de:	e700      	b.n	900213e2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
900215e0:	2200      	movs	r2, #0
900215e2:	4614      	mov	r4, r2
900215e4:	e70b      	b.n	900213fe <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
900215e6:	4602      	mov	r2, r0
900215e8:	4604      	mov	r4, r0
900215ea:	e708      	b.n	900213fe <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
900215ec:	2200      	movs	r2, #0
900215ee:	e706      	b.n	900213fe <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
900215f0:	4632      	mov	r2, r6
900215f2:	e704      	b.n	900213fe <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

900215f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900215f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900215f8:	b09f      	sub	sp, #124	; 0x7c
900215fa:	921b      	str	r2, [sp, #108]	; 0x6c
900215fc:	9309      	str	r3, [sp, #36]	; 0x24
900215fe:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
90021600:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
90021604:	901d      	str	r0, [sp, #116]	; 0x74
90021606:	931c      	str	r3, [sp, #112]	; 0x70
90021608:	6850      	ldr	r0, [r2, #4]
9002160a:	9119      	str	r1, [sp, #100]	; 0x64
9002160c:	6812      	ldr	r2, [r2, #0]
9002160e:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
90021610:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
90021614:	fb00 1303 	mla	r3, r0, r3, r1
90021618:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9002161c:	930c      	str	r3, [sp, #48]	; 0x30
9002161e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90021620:	681b      	ldr	r3, [r3, #0]
90021622:	9312      	str	r3, [sp, #72]	; 0x48
90021624:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90021626:	685e      	ldr	r6, [r3, #4]
90021628:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
9002162c:	3604      	adds	r6, #4
9002162e:	930d      	str	r3, [sp, #52]	; 0x34
90021630:	9b19      	ldr	r3, [sp, #100]	; 0x64
90021632:	2b00      	cmp	r3, #0
90021634:	dc03      	bgt.n	9002163e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
90021636:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
90021638:	2b00      	cmp	r3, #0
9002163a:	f340 8387 	ble.w	90021d4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
9002163e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90021640:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90021644:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90021648:	1e48      	subs	r0, r1, #1
9002164a:	1e57      	subs	r7, r2, #1
9002164c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002164e:	2b00      	cmp	r3, #0
90021650:	f340 8194 	ble.w	9002197c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
90021654:	9c29      	ldr	r4, [sp, #164]	; 0xa4
90021656:	142b      	asrs	r3, r5, #16
90021658:	ea5f 4c24 	movs.w	ip, r4, asr #16
9002165c:	d406      	bmi.n	9002166c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9002165e:	4584      	cmp	ip, r0
90021660:	da04      	bge.n	9002166c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90021662:	2b00      	cmp	r3, #0
90021664:	db02      	blt.n	9002166c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90021666:	42bb      	cmp	r3, r7
90021668:	f2c0 8189 	blt.w	9002197e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9002166c:	f11c 0c01 	adds.w	ip, ip, #1
90021670:	f100 8177 	bmi.w	90021962 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
90021674:	4561      	cmp	r1, ip
90021676:	f2c0 8174 	blt.w	90021962 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9002167a:	3301      	adds	r3, #1
9002167c:	f100 8171 	bmi.w	90021962 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
90021680:	429a      	cmp	r2, r3
90021682:	f2c0 816e 	blt.w	90021962 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
90021686:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021688:	9f0c      	ldr	r7, [sp, #48]	; 0x30
9002168a:	931a      	str	r3, [sp, #104]	; 0x68
9002168c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
9002168e:	2b00      	cmp	r3, #0
90021690:	f340 8193 	ble.w	900219ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
90021694:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90021696:	ea4f 4c25 	mov.w	ip, r5, asr #16
9002169a:	f3c5 3103 	ubfx	r1, r5, #12, #4
9002169e:	f3c3 3203 	ubfx	r2, r3, #12, #4
900216a2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
900216a4:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
900216a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
900216aa:	141b      	asrs	r3, r3, #16
900216ac:	f100 81d6 	bmi.w	90021a5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
900216b0:	f100 38ff 	add.w	r8, r0, #4294967295
900216b4:	4543      	cmp	r3, r8
900216b6:	f280 81d1 	bge.w	90021a5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
900216ba:	f1bc 0f00 	cmp.w	ip, #0
900216be:	f2c0 81cd 	blt.w	90021a5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
900216c2:	f10e 38ff 	add.w	r8, lr, #4294967295
900216c6:	45c4      	cmp	ip, r8
900216c8:	f280 81c8 	bge.w	90021a5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
900216cc:	b200      	sxth	r0, r0
900216ce:	9c12      	ldr	r4, [sp, #72]	; 0x48
900216d0:	fb0c 3300 	mla	r3, ip, r0, r3
900216d4:	eb04 0803 	add.w	r8, r4, r3
900216d8:	5ce3      	ldrb	r3, [r4, r3]
900216da:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
900216de:	ea4f 6e13 	mov.w	lr, r3, lsr #24
900216e2:	2a00      	cmp	r2, #0
900216e4:	f000 81af 	beq.w	90021a46 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
900216e8:	f898 c001 	ldrb.w	ip, [r8, #1]
900216ec:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
900216f0:	940e      	str	r4, [sp, #56]	; 0x38
900216f2:	0e24      	lsrs	r4, r4, #24
900216f4:	9415      	str	r4, [sp, #84]	; 0x54
900216f6:	b179      	cbz	r1, 90021718 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
900216f8:	eb08 0c00 	add.w	ip, r8, r0
900216fc:	f818 0000 	ldrb.w	r0, [r8, r0]
90021700:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
90021704:	900a      	str	r0, [sp, #40]	; 0x28
90021706:	0e00      	lsrs	r0, r0, #24
90021708:	9013      	str	r0, [sp, #76]	; 0x4c
9002170a:	f89c 0001 	ldrb.w	r0, [ip, #1]
9002170e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
90021712:	900f      	str	r0, [sp, #60]	; 0x3c
90021714:	0e00      	lsrs	r0, r0, #24
90021716:	9016      	str	r0, [sp, #88]	; 0x58
90021718:	b292      	uxth	r2, r2
9002171a:	9815      	ldr	r0, [sp, #84]	; 0x54
9002171c:	b289      	uxth	r1, r1
9002171e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90021720:	fb02 f901 	mul.w	r9, r2, r1
90021724:	0112      	lsls	r2, r2, #4
90021726:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9002172a:	eba2 0809 	sub.w	r8, r2, r9
9002172e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
90021732:	b289      	uxth	r1, r1
90021734:	fa1f f888 	uxth.w	r8, r8
90021738:	1a52      	subs	r2, r2, r1
9002173a:	fb08 f000 	mul.w	r0, r8, r0
9002173e:	b292      	uxth	r2, r2
90021740:	fb02 000e 	mla	r0, r2, lr, r0
90021744:	fb01 0004 	mla	r0, r1, r4, r0
90021748:	9c16      	ldr	r4, [sp, #88]	; 0x58
9002174a:	fb09 0004 	mla	r0, r9, r4, r0
9002174e:	f3c0 2007 	ubfx	r0, r0, #8, #8
90021752:	2800      	cmp	r0, #0
90021754:	f000 80fa 	beq.w	9002194c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021758:	f1be 0fff 	cmp.w	lr, #255	; 0xff
9002175c:	d01b      	beq.n	90021796 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
9002175e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90021762:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021766:	fb0e fa0a 	mul.w	sl, lr, sl
9002176a:	fb0e fe03 	mul.w	lr, lr, r3
9002176e:	ea4f 231a 	mov.w	r3, sl, lsr #8
90021772:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90021776:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
9002177a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9002177e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
90021782:	4453      	add	r3, sl
90021784:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021788:	0a1b      	lsrs	r3, r3, #8
9002178a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9002178e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90021792:	ea43 030c 	orr.w	r3, r3, ip
90021796:	9c15      	ldr	r4, [sp, #84]	; 0x54
90021798:	2cff      	cmp	r4, #255	; 0xff
9002179a:	d021      	beq.n	900217e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
9002179c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9002179e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
900217a2:	9c15      	ldr	r4, [sp, #84]	; 0x54
900217a4:	fb04 fb0b 	mul.w	fp, r4, fp
900217a8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
900217aa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
900217ae:	9c15      	ldr	r4, [sp, #84]	; 0x54
900217b0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
900217b4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
900217b8:	fb04 fa0a 	mul.w	sl, r4, sl
900217bc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900217c0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
900217c4:	44de      	add	lr, fp
900217c6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
900217ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900217ce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900217d2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900217d6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900217da:	ea4e 040a 	orr.w	r4, lr, sl
900217de:	940e      	str	r4, [sp, #56]	; 0x38
900217e0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
900217e2:	2cff      	cmp	r4, #255	; 0xff
900217e4:	d021      	beq.n	9002182a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
900217e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
900217e8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
900217ec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
900217ee:	fb04 fb0b 	mul.w	fp, r4, fp
900217f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
900217f4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
900217f8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
900217fa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
900217fe:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90021802:	fb04 fa0a 	mul.w	sl, r4, sl
90021806:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002180a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9002180e:	44de      	add	lr, fp
90021810:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90021814:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90021818:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002181c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021820:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021824:	ea4e 040a 	orr.w	r4, lr, sl
90021828:	940a      	str	r4, [sp, #40]	; 0x28
9002182a:	9c16      	ldr	r4, [sp, #88]	; 0x58
9002182c:	2cff      	cmp	r4, #255	; 0xff
9002182e:	d021      	beq.n	90021874 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
90021830:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
90021832:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
90021836:	9c16      	ldr	r4, [sp, #88]	; 0x58
90021838:	fb04 fb0b 	mul.w	fp, r4, fp
9002183c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9002183e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90021842:	9c16      	ldr	r4, [sp, #88]	; 0x58
90021844:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90021848:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9002184c:	fb04 fa0a 	mul.w	sl, r4, sl
90021850:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021854:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90021858:	44de      	add	lr, fp
9002185a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9002185e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90021862:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021866:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002186a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002186e:	ea4e 040a 	orr.w	r4, lr, sl
90021872:	940f      	str	r4, [sp, #60]	; 0x3c
90021874:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90021876:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
9002187a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9002187e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90021882:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90021884:	fb08 fc0c 	mul.w	ip, r8, ip
90021888:	fb02 cc0e 	mla	ip, r2, lr, ip
9002188c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
90021890:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
90021892:	fb01 cc0e 	mla	ip, r1, lr, ip
90021896:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9002189a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9002189c:	fb09 cc0e 	mla	ip, r9, lr, ip
900218a0:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
900218a4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
900218a6:	fb08 f80e 	mul.w	r8, r8, lr
900218aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900218ae:	fb02 8303 	mla	r3, r2, r3, r8
900218b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
900218b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900218b8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
900218bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900218be:	fb01 330a 	mla	r3, r1, sl, r3
900218c2:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
900218c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
900218c8:	fb09 3901 	mla	r9, r9, r1, r3
900218cc:	883b      	ldrh	r3, [r7, #0]
900218ce:	4342      	muls	r2, r0
900218d0:	ea4f 2919 	mov.w	r9, r9, lsr #8
900218d4:	1c50      	adds	r0, r2, #1
900218d6:	1219      	asrs	r1, r3, #8
900218d8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
900218dc:	eb00 2012 	add.w	r0, r0, r2, lsr #8
900218e0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
900218e4:	ea4c 0c09 	orr.w	ip, ip, r9
900218e8:	ea6f 2010 	mvn.w	r0, r0, lsr #8
900218ec:	ea4f 421c 	mov.w	r2, ip, lsr #16
900218f0:	f3cc 2e07 	ubfx	lr, ip, #8, #8
900218f4:	b2c0      	uxtb	r0, r0
900218f6:	fb12 f204 	smulbb	r2, r2, r4
900218fa:	fa5f fc8c 	uxtb.w	ip, ip
900218fe:	fb1e fe04 	smulbb	lr, lr, r4
90021902:	fb01 2100 	mla	r1, r1, r0, r2
90021906:	10da      	asrs	r2, r3, #3
90021908:	fb1c fc04 	smulbb	ip, ip, r4
9002190c:	00db      	lsls	r3, r3, #3
9002190e:	b289      	uxth	r1, r1
90021910:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90021914:	b2db      	uxtb	r3, r3
90021916:	fb02 e200 	mla	r2, r2, r0, lr
9002191a:	fb03 c300 	mla	r3, r3, r0, ip
9002191e:	b292      	uxth	r2, r2
90021920:	fa1f fc83 	uxth.w	ip, r3
90021924:	1c4b      	adds	r3, r1, #1
90021926:	eb03 2111 	add.w	r1, r3, r1, lsr #8
9002192a:	f10c 0301 	add.w	r3, ip, #1
9002192e:	eb03 231c 	add.w	r3, r3, ip, lsr #8
90021932:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
90021936:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9002193a:	430b      	orrs	r3, r1
9002193c:	1c51      	adds	r1, r2, #1
9002193e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90021942:	0952      	lsrs	r2, r2, #5
90021944:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90021948:	4313      	orrs	r3, r2
9002194a:	803b      	strh	r3, [r7, #0]
9002194c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
9002194e:	3702      	adds	r7, #2
90021950:	9a29      	ldr	r2, [sp, #164]	; 0xa4
90021952:	441a      	add	r2, r3
90021954:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90021956:	441d      	add	r5, r3
90021958:	9b1a      	ldr	r3, [sp, #104]	; 0x68
9002195a:	9229      	str	r2, [sp, #164]	; 0xa4
9002195c:	3b01      	subs	r3, #1
9002195e:	931a      	str	r3, [sp, #104]	; 0x68
90021960:	e694      	b.n	9002168c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90021962:	9b2b      	ldr	r3, [sp, #172]	; 0xac
90021964:	9c29      	ldr	r4, [sp, #164]	; 0xa4
90021966:	441c      	add	r4, r3
90021968:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9002196a:	441d      	add	r5, r3
9002196c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002196e:	9429      	str	r4, [sp, #164]	; 0xa4
90021970:	3b01      	subs	r3, #1
90021972:	9309      	str	r3, [sp, #36]	; 0x24
90021974:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90021976:	3302      	adds	r3, #2
90021978:	930c      	str	r3, [sp, #48]	; 0x30
9002197a:	e667      	b.n	9002164c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9002197c:	d024      	beq.n	900219c8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
9002197e:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021980:	982b      	ldr	r0, [sp, #172]	; 0xac
90021982:	3b01      	subs	r3, #1
90021984:	9c29      	ldr	r4, [sp, #164]	; 0xa4
90021986:	fb00 4003 	mla	r0, r0, r3, r4
9002198a:	1400      	asrs	r0, r0, #16
9002198c:	f53f ae7b 	bmi.w	90021686 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021990:	3901      	subs	r1, #1
90021992:	4288      	cmp	r0, r1
90021994:	f6bf ae77 	bge.w	90021686 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021998:	992c      	ldr	r1, [sp, #176]	; 0xb0
9002199a:	fb01 5303 	mla	r3, r1, r3, r5
9002199e:	141b      	asrs	r3, r3, #16
900219a0:	f53f ae71 	bmi.w	90021686 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900219a4:	3a01      	subs	r2, #1
900219a6:	4293      	cmp	r3, r2
900219a8:	f6bf ae6d 	bge.w	90021686 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900219ac:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
900219b0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
900219b4:	f1bb 0f00 	cmp.w	fp, #0
900219b8:	dc70      	bgt.n	90021a9c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
900219ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
900219bc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
900219c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900219c2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
900219c6:	930c      	str	r3, [sp, #48]	; 0x30
900219c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
900219ca:	2b00      	cmp	r3, #0
900219cc:	f340 81be 	ble.w	90021d4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
900219d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900219d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900219d6:	ee30 0a04 	vadd.f32	s0, s0, s8
900219da:	ee70 0aa4 	vadd.f32	s1, s1, s9
900219de:	eef0 6a62 	vmov.f32	s13, s5
900219e2:	eec7 7a00 	vdiv.f32	s15, s14, s0
900219e6:	ee31 1a05 	vadd.f32	s2, s2, s10
900219ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900219ee:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
900219f2:	eef0 6a43 	vmov.f32	s13, s6
900219f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900219fa:	ee16 5a90 	vmov	r5, s13
900219fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
90021a02:	ee61 7a27 	vmul.f32	s15, s2, s15
90021a06:	ee77 2a62 	vsub.f32	s5, s14, s5
90021a0a:	ee37 3ac3 	vsub.f32	s6, s15, s6
90021a0e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90021a12:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90021a16:	ee12 2a90 	vmov	r2, s5
90021a1a:	eef0 2a47 	vmov.f32	s5, s14
90021a1e:	fb92 f3f3 	sdiv	r3, r2, r3
90021a22:	ee13 2a10 	vmov	r2, s6
90021a26:	932b      	str	r3, [sp, #172]	; 0xac
90021a28:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021a2a:	eeb0 3a67 	vmov.f32	s6, s15
90021a2e:	fb92 f3f3 	sdiv	r3, r2, r3
90021a32:	932c      	str	r3, [sp, #176]	; 0xb0
90021a34:	9b19      	ldr	r3, [sp, #100]	; 0x64
90021a36:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
90021a38:	3b01      	subs	r3, #1
90021a3a:	9319      	str	r3, [sp, #100]	; 0x64
90021a3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021a3e:	bf08      	it	eq
90021a40:	4613      	moveq	r3, r2
90021a42:	9309      	str	r3, [sp, #36]	; 0x24
90021a44:	e5f4      	b.n	90021630 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
90021a46:	2900      	cmp	r1, #0
90021a48:	f43f ae66 	beq.w	90021718 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
90021a4c:	f818 0000 	ldrb.w	r0, [r8, r0]
90021a50:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
90021a54:	900a      	str	r0, [sp, #40]	; 0x28
90021a56:	0e00      	lsrs	r0, r0, #24
90021a58:	9013      	str	r0, [sp, #76]	; 0x4c
90021a5a:	e65d      	b.n	90021718 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
90021a5c:	f113 0801 	adds.w	r8, r3, #1
90021a60:	f53f af74 	bmi.w	9002194c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021a64:	4540      	cmp	r0, r8
90021a66:	f6ff af71 	blt.w	9002194c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021a6a:	f11c 0801 	adds.w	r8, ip, #1
90021a6e:	f53f af6d 	bmi.w	9002194c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021a72:	45c6      	cmp	lr, r8
90021a74:	f6ff af6a 	blt.w	9002194c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021a78:	9c1c      	ldr	r4, [sp, #112]	; 0x70
90021a7a:	b200      	sxth	r0, r0
90021a7c:	9302      	str	r3, [sp, #8]
90021a7e:	fa0f f38e 	sxth.w	r3, lr
90021a82:	9000      	str	r0, [sp, #0]
90021a84:	9301      	str	r3, [sp, #4]
90021a86:	4633      	mov	r3, r6
90021a88:	981d      	ldr	r0, [sp, #116]	; 0x74
90021a8a:	e9cd 1405 	strd	r1, r4, [sp, #20]
90021a8e:	e9cd c203 	strd	ip, r2, [sp, #12]
90021a92:	4639      	mov	r1, r7
90021a94:	9a12      	ldr	r2, [sp, #72]	; 0x48
90021a96:	f7ff fc63 	bl	90021360 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
90021a9a:	e757      	b.n	9002194c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021a9c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90021a9e:	f3c5 3003 	ubfx	r0, r5, #12, #4
90021aa2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
90021aa4:	f3c3 3203 	ubfx	r2, r3, #12, #4
90021aa8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90021aaa:	1427      	asrs	r7, r4, #16
90021aac:	9c12      	ldr	r4, [sp, #72]	; 0x48
90021aae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90021ab2:	142b      	asrs	r3, r5, #16
90021ab4:	fb01 7303 	mla	r3, r1, r3, r7
90021ab8:	18e7      	adds	r7, r4, r3
90021aba:	5ce3      	ldrb	r3, [r4, r3]
90021abc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
90021ac0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
90021ac4:	2a00      	cmp	r2, #0
90021ac6:	f000 8137 	beq.w	90021d38 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
90021aca:	f897 e001 	ldrb.w	lr, [r7, #1]
90021ace:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
90021ad2:	9410      	str	r4, [sp, #64]	; 0x40
90021ad4:	0e24      	lsrs	r4, r4, #24
90021ad6:	9417      	str	r4, [sp, #92]	; 0x5c
90021ad8:	b170      	cbz	r0, 90021af8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
90021ada:	eb07 0e01 	add.w	lr, r7, r1
90021ade:	5c79      	ldrb	r1, [r7, r1]
90021ae0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90021ae4:	910b      	str	r1, [sp, #44]	; 0x2c
90021ae6:	0e09      	lsrs	r1, r1, #24
90021ae8:	9114      	str	r1, [sp, #80]	; 0x50
90021aea:	f89e 1001 	ldrb.w	r1, [lr, #1]
90021aee:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90021af2:	9111      	str	r1, [sp, #68]	; 0x44
90021af4:	0e09      	lsrs	r1, r1, #24
90021af6:	9118      	str	r1, [sp, #96]	; 0x60
90021af8:	b292      	uxth	r2, r2
90021afa:	9917      	ldr	r1, [sp, #92]	; 0x5c
90021afc:	b280      	uxth	r0, r0
90021afe:	9c14      	ldr	r4, [sp, #80]	; 0x50
90021b00:	fb02 f800 	mul.w	r8, r2, r0
90021b04:	0112      	lsls	r2, r2, #4
90021b06:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
90021b0a:	eba2 0e08 	sub.w	lr, r2, r8
90021b0e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
90021b12:	b280      	uxth	r0, r0
90021b14:	fa1f fe8e 	uxth.w	lr, lr
90021b18:	1a12      	subs	r2, r2, r0
90021b1a:	fb0e f101 	mul.w	r1, lr, r1
90021b1e:	b292      	uxth	r2, r2
90021b20:	fb02 110c 	mla	r1, r2, ip, r1
90021b24:	fb00 1104 	mla	r1, r0, r4, r1
90021b28:	9c18      	ldr	r4, [sp, #96]	; 0x60
90021b2a:	fb08 1104 	mla	r1, r8, r4, r1
90021b2e:	f3c1 2107 	ubfx	r1, r1, #8, #8
90021b32:	2900      	cmp	r1, #0
90021b34:	f000 80f5 	beq.w	90021d22 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
90021b38:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
90021b3c:	d019      	beq.n	90021b72 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
90021b3e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90021b42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021b46:	fb0c fa0a 	mul.w	sl, ip, sl
90021b4a:	fb0c fc03 	mul.w	ip, ip, r3
90021b4e:	ea4f 231a 	mov.w	r3, sl, lsr #8
90021b52:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90021b56:	f50c 7780 	add.w	r7, ip, #256	; 0x100
90021b5a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90021b5e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
90021b62:	4453      	add	r3, sl
90021b64:	0a3f      	lsrs	r7, r7, #8
90021b66:	0a1b      	lsrs	r3, r3, #8
90021b68:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90021b6c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90021b70:	433b      	orrs	r3, r7
90021b72:	9c17      	ldr	r4, [sp, #92]	; 0x5c
90021b74:	2cff      	cmp	r4, #255	; 0xff
90021b76:	d020      	beq.n	90021bba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
90021b78:	9c10      	ldr	r4, [sp, #64]	; 0x40
90021b7a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90021b7e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
90021b80:	4367      	muls	r7, r4
90021b82:	9c10      	ldr	r4, [sp, #64]	; 0x40
90021b84:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021b88:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90021b8c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
90021b8e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90021b92:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021b96:	fb04 fa0a 	mul.w	sl, r4, sl
90021b9a:	44bc      	add	ip, r7
90021b9c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90021ba0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021ba4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021ba8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021bac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021bb0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021bb4:	ea4c 040a 	orr.w	r4, ip, sl
90021bb8:	9410      	str	r4, [sp, #64]	; 0x40
90021bba:	9c14      	ldr	r4, [sp, #80]	; 0x50
90021bbc:	2cff      	cmp	r4, #255	; 0xff
90021bbe:	d020      	beq.n	90021c02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
90021bc0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90021bc2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90021bc6:	9c14      	ldr	r4, [sp, #80]	; 0x50
90021bc8:	4367      	muls	r7, r4
90021bca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90021bcc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021bd0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90021bd4:	9c14      	ldr	r4, [sp, #80]	; 0x50
90021bd6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90021bda:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021bde:	fb04 fa0a 	mul.w	sl, r4, sl
90021be2:	44bc      	add	ip, r7
90021be4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90021be8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021bec:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021bf0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021bf4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021bf8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021bfc:	ea4c 040a 	orr.w	r4, ip, sl
90021c00:	940b      	str	r4, [sp, #44]	; 0x2c
90021c02:	9c18      	ldr	r4, [sp, #96]	; 0x60
90021c04:	2cff      	cmp	r4, #255	; 0xff
90021c06:	d020      	beq.n	90021c4a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
90021c08:	9c11      	ldr	r4, [sp, #68]	; 0x44
90021c0a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90021c0e:	9c18      	ldr	r4, [sp, #96]	; 0x60
90021c10:	4367      	muls	r7, r4
90021c12:	9c11      	ldr	r4, [sp, #68]	; 0x44
90021c14:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021c18:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90021c1c:	9c18      	ldr	r4, [sp, #96]	; 0x60
90021c1e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90021c22:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021c26:	fb04 fa0a 	mul.w	sl, r4, sl
90021c2a:	44bc      	add	ip, r7
90021c2c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90021c30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021c34:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021c38:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021c3c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021c40:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021c44:	ea4c 040a 	orr.w	r4, ip, sl
90021c48:	9411      	str	r4, [sp, #68]	; 0x44
90021c4a:	9c10      	ldr	r4, [sp, #64]	; 0x40
90021c4c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
90021c50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021c54:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90021c58:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90021c5a:	fb0e f707 	mul.w	r7, lr, r7
90021c5e:	fb02 770c 	mla	r7, r2, ip, r7
90021c62:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90021c66:	9c11      	ldr	r4, [sp, #68]	; 0x44
90021c68:	fb00 770c 	mla	r7, r0, ip, r7
90021c6c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90021c70:	9c10      	ldr	r4, [sp, #64]	; 0x40
90021c72:	fb08 770c 	mla	r7, r8, ip, r7
90021c76:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
90021c7a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90021c7c:	fb0e fe0c 	mul.w	lr, lr, ip
90021c80:	0a3f      	lsrs	r7, r7, #8
90021c82:	fb02 e303 	mla	r3, r2, r3, lr
90021c86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90021c88:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
90021c8c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
90021c90:	9a11      	ldr	r2, [sp, #68]	; 0x44
90021c92:	fb00 330a 	mla	r3, r0, sl, r3
90021c96:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
90021c9a:	f8b9 0000 	ldrh.w	r0, [r9]
90021c9e:	fb08 3c0c 	mla	ip, r8, ip, r3
90021ca2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90021ca4:	1202      	asrs	r2, r0, #8
90021ca6:	434b      	muls	r3, r1
90021ca8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021cac:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
90021cb0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90021cb4:	1c59      	adds	r1, r3, #1
90021cb6:	ea47 070c 	orr.w	r7, r7, ip
90021cba:	eb01 2113 	add.w	r1, r1, r3, lsr #8
90021cbe:	0c3b      	lsrs	r3, r7, #16
90021cc0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
90021cc4:	f3c7 2c07 	ubfx	ip, r7, #8, #8
90021cc8:	b2ff      	uxtb	r7, r7
90021cca:	fb13 f304 	smulbb	r3, r3, r4
90021cce:	b2c9      	uxtb	r1, r1
90021cd0:	fb1c fc04 	smulbb	ip, ip, r4
90021cd4:	fb02 3201 	mla	r2, r2, r1, r3
90021cd8:	10c3      	asrs	r3, r0, #3
90021cda:	fb17 f704 	smulbb	r7, r7, r4
90021cde:	00c0      	lsls	r0, r0, #3
90021ce0:	b292      	uxth	r2, r2
90021ce2:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
90021ce6:	b2c0      	uxtb	r0, r0
90021ce8:	fb03 c301 	mla	r3, r3, r1, ip
90021cec:	f102 0c01 	add.w	ip, r2, #1
90021cf0:	fb00 7001 	mla	r0, r0, r1, r7
90021cf4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
90021cf8:	b280      	uxth	r0, r0
90021cfa:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
90021cfe:	b29b      	uxth	r3, r3
90021d00:	1c42      	adds	r2, r0, #1
90021d02:	eb02 2210 	add.w	r2, r2, r0, lsr #8
90021d06:	f3c2 22c4 	ubfx	r2, r2, #11, #5
90021d0a:	ea42 020c 	orr.w	r2, r2, ip
90021d0e:	f103 0c01 	add.w	ip, r3, #1
90021d12:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
90021d16:	095b      	lsrs	r3, r3, #5
90021d18:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90021d1c:	431a      	orrs	r2, r3
90021d1e:	f8a9 2000 	strh.w	r2, [r9]
90021d22:	9b2b      	ldr	r3, [sp, #172]	; 0xac
90021d24:	f109 0902 	add.w	r9, r9, #2
90021d28:	9a29      	ldr	r2, [sp, #164]	; 0xa4
90021d2a:	f10b 3bff 	add.w	fp, fp, #4294967295
90021d2e:	441a      	add	r2, r3
90021d30:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90021d32:	9229      	str	r2, [sp, #164]	; 0xa4
90021d34:	441d      	add	r5, r3
90021d36:	e63d      	b.n	900219b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
90021d38:	2800      	cmp	r0, #0
90021d3a:	f43f aedd 	beq.w	90021af8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
90021d3e:	5c79      	ldrb	r1, [r7, r1]
90021d40:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90021d44:	910b      	str	r1, [sp, #44]	; 0x2c
90021d46:	0e09      	lsrs	r1, r1, #24
90021d48:	9114      	str	r1, [sp, #80]	; 0x50
90021d4a:	e6d5      	b.n	90021af8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
90021d4c:	b01f      	add	sp, #124	; 0x7c
90021d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90021d52 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
90021d52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90021d56:	b089      	sub	sp, #36	; 0x24
90021d58:	9101      	str	r1, [sp, #4]
90021d5a:	9801      	ldr	r0, [sp, #4]
90021d5c:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
90021d60:	8800      	ldrh	r0, [r0, #0]
90021d62:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
90021d66:	1206      	asrs	r6, r0, #8
90021d68:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
90021d6c:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
90021d70:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90021d74:	9602      	str	r6, [sp, #8]
90021d76:	10c6      	asrs	r6, r0, #3
90021d78:	00c0      	lsls	r0, r0, #3
90021d7a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90021d7e:	b2c0      	uxtb	r0, r0
90021d80:	9603      	str	r6, [sp, #12]
90021d82:	9004      	str	r0, [sp, #16]
90021d84:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
90021d88:	fb07 100c 	mla	r0, r7, ip, r1
90021d8c:	2f00      	cmp	r7, #0
90021d8e:	eb02 0e00 	add.w	lr, r2, r0
90021d92:	f2c0 810a 	blt.w	90021faa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
90021d96:	45b8      	cmp	r8, r7
90021d98:	f340 8107 	ble.w	90021faa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
90021d9c:	2900      	cmp	r1, #0
90021d9e:	f2c0 8102 	blt.w	90021fa6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
90021da2:	458c      	cmp	ip, r1
90021da4:	f340 80ff 	ble.w	90021fa6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
90021da8:	5c12      	ldrb	r2, [r2, r0]
90021daa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
90021dae:	1c4a      	adds	r2, r1, #1
90021db0:	f100 80fe 	bmi.w	90021fb0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
90021db4:	4594      	cmp	ip, r2
90021db6:	f340 80fb 	ble.w	90021fb0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
90021dba:	2d00      	cmp	r5, #0
90021dbc:	f000 80fa 	beq.w	90021fb4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
90021dc0:	f89e 2001 	ldrb.w	r2, [lr, #1]
90021dc4:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
90021dc8:	3701      	adds	r7, #1
90021dca:	f100 80f7 	bmi.w	90021fbc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
90021dce:	45b8      	cmp	r8, r7
90021dd0:	f340 80f4 	ble.w	90021fbc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
90021dd4:	2c00      	cmp	r4, #0
90021dd6:	f000 80f4 	beq.w	90021fc2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
90021dda:	2900      	cmp	r1, #0
90021ddc:	eb0e 020c 	add.w	r2, lr, ip
90021de0:	f2c0 80ea 	blt.w	90021fb8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
90021de4:	458c      	cmp	ip, r1
90021de6:	f340 80e7 	ble.w	90021fb8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
90021dea:	f81e 700c 	ldrb.w	r7, [lr, ip]
90021dee:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
90021df2:	3101      	adds	r1, #1
90021df4:	f100 80e8 	bmi.w	90021fc8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
90021df8:	458c      	cmp	ip, r1
90021dfa:	f340 80e5 	ble.w	90021fc8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
90021dfe:	2d00      	cmp	r5, #0
90021e00:	f000 80e4 	beq.w	90021fcc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
90021e04:	7852      	ldrb	r2, [r2, #1]
90021e06:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
90021e0a:	0e0b      	lsrs	r3, r1, #24
90021e0c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
90021e10:	ea4f 6a10 	mov.w	sl, r0, lsr #24
90021e14:	9300      	str	r3, [sp, #0]
90021e16:	b2a4      	uxth	r4, r4
90021e18:	b2ab      	uxth	r3, r5
90021e1a:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
90021e1e:	ea4f 6b16 	mov.w	fp, r6, lsr #24
90021e22:	fb03 f904 	mul.w	r9, r3, r4
90021e26:	011b      	lsls	r3, r3, #4
90021e28:	fb0a f505 	mul.w	r5, sl, r5
90021e2c:	ea4f 6817 	mov.w	r8, r7, lsr #24
90021e30:	eba3 0e09 	sub.w	lr, r3, r9
90021e34:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
90021e38:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
90021e3c:	0a28      	lsrs	r0, r5, #8
90021e3e:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
90021e42:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90021e46:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
90021e4a:	fb0a f303 	mul.w	r3, sl, r3
90021e4e:	fb08 f707 	mul.w	r7, r8, r7
90021e52:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
90021e56:	4405      	add	r5, r0
90021e58:	fb08 fc0c 	mul.w	ip, r8, ip
90021e5c:	b2a4      	uxth	r4, r4
90021e5e:	0a2d      	lsrs	r5, r5, #8
90021e60:	fa1f fe8e 	uxth.w	lr, lr
90021e64:	1b12      	subs	r2, r2, r4
90021e66:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
90021e6a:	b292      	uxth	r2, r2
90021e6c:	9005      	str	r0, [sp, #20]
90021e6e:	f503 7080 	add.w	r0, r3, #256	; 0x100
90021e72:	eb00 2313 	add.w	r3, r0, r3, lsr #8
90021e76:	ea4f 201c 	mov.w	r0, ip, lsr #8
90021e7a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90021e7e:	0a1b      	lsrs	r3, r3, #8
90021e80:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
90021e84:	9306      	str	r3, [sp, #24]
90021e86:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
90021e8a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
90021e8e:	4460      	add	r0, ip
90021e90:	fb0b f303 	mul.w	r3, fp, r3
90021e94:	fb0b f606 	mul.w	r6, fp, r6
90021e98:	0a00      	lsrs	r0, r0, #8
90021e9a:	0a1d      	lsrs	r5, r3, #8
90021e9c:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
90021ea0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
90021ea4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90021ea8:	441d      	add	r5, r3
90021eaa:	f506 7380 	add.w	r3, r6, #256	; 0x100
90021eae:	eb03 2616 	add.w	r6, r3, r6, lsr #8
90021eb2:	f507 7380 	add.w	r3, r7, #256	; 0x100
90021eb6:	0a2d      	lsrs	r5, r5, #8
90021eb8:	eb03 2317 	add.w	r3, r3, r7, lsr #8
90021ebc:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
90021ec0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90021ec4:	0a36      	lsrs	r6, r6, #8
90021ec6:	0a1b      	lsrs	r3, r3, #8
90021ec8:	fb05 f50e 	mul.w	r5, r5, lr
90021ecc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
90021ed0:	9307      	str	r3, [sp, #28]
90021ed2:	0e0b      	lsrs	r3, r1, #24
90021ed4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90021ed8:	fb0e f606 	mul.w	r6, lr, r6
90021edc:	435f      	muls	r7, r3
90021ede:	4359      	muls	r1, r3
90021ee0:	9b05      	ldr	r3, [sp, #20]
90021ee2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021ee6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90021eea:	fb03 5502 	mla	r5, r3, r2, r5
90021eee:	9b06      	ldr	r3, [sp, #24]
90021ef0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021ef4:	fb0e fe0b 	mul.w	lr, lr, fp
90021ef8:	44bc      	add	ip, r7
90021efa:	f501 7780 	add.w	r7, r1, #256	; 0x100
90021efe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021f02:	eb07 2111 	add.w	r1, r7, r1, lsr #8
90021f06:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021f0a:	0a09      	lsrs	r1, r1, #8
90021f0c:	fb0c 5509 	mla	r5, ip, r9, r5
90021f10:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90021f14:	fb00 5504 	mla	r5, r0, r4, r5
90021f18:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
90021f1c:	9b07      	ldr	r3, [sp, #28]
90021f1e:	fb02 6000 	mla	r0, r2, r0, r6
90021f22:	0a2d      	lsrs	r5, r5, #8
90021f24:	fb02 e20a 	mla	r2, r2, sl, lr
90021f28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021f2c:	fb09 0001 	mla	r0, r9, r1, r0
90021f30:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90021f34:	fb04 0003 	mla	r0, r4, r3, r0
90021f38:	9b00      	ldr	r3, [sp, #0]
90021f3a:	fb04 2408 	mla	r4, r4, r8, r2
90021f3e:	9a04      	ldr	r2, [sp, #16]
90021f40:	0a00      	lsrs	r0, r0, #8
90021f42:	fb09 4903 	mla	r9, r9, r3, r4
90021f46:	9b02      	ldr	r3, [sp, #8]
90021f48:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
90021f4c:	ea6f 2929 	mvn.w	r9, r9, asr #8
90021f50:	4305      	orrs	r5, r0
90021f52:	fa5f f989 	uxtb.w	r9, r9
90021f56:	fb03 f109 	mul.w	r1, r3, r9
90021f5a:	9b03      	ldr	r3, [sp, #12]
90021f5c:	fb03 f309 	mul.w	r3, r3, r9
90021f60:	fb02 f909 	mul.w	r9, r2, r9
90021f64:	1c4a      	adds	r2, r1, #1
90021f66:	1c58      	adds	r0, r3, #1
90021f68:	eb02 2111 	add.w	r1, r2, r1, lsr #8
90021f6c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
90021f70:	0c2a      	lsrs	r2, r5, #16
90021f72:	0a2b      	lsrs	r3, r5, #8
90021f74:	eb02 2211 	add.w	r2, r2, r1, lsr #8
90021f78:	eb03 2310 	add.w	r3, r3, r0, lsr #8
90021f7c:	0212      	lsls	r2, r2, #8
90021f7e:	00db      	lsls	r3, r3, #3
90021f80:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
90021f84:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90021f88:	4313      	orrs	r3, r2
90021f8a:	f109 0201 	add.w	r2, r9, #1
90021f8e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
90021f92:	eb05 2519 	add.w	r5, r5, r9, lsr #8
90021f96:	f3c5 05c4 	ubfx	r5, r5, #3, #5
90021f9a:	431d      	orrs	r5, r3
90021f9c:	9b01      	ldr	r3, [sp, #4]
90021f9e:	801d      	strh	r5, [r3, #0]
90021fa0:	b009      	add	sp, #36	; 0x24
90021fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90021fa6:	2000      	movs	r0, #0
90021fa8:	e701      	b.n	90021dae <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
90021faa:	2600      	movs	r6, #0
90021fac:	4630      	mov	r0, r6
90021fae:	e70b      	b.n	90021dc8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
90021fb0:	2600      	movs	r6, #0
90021fb2:	e709      	b.n	90021dc8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
90021fb4:	462e      	mov	r6, r5
90021fb6:	e707      	b.n	90021dc8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
90021fb8:	2700      	movs	r7, #0
90021fba:	e71a      	b.n	90021df2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
90021fbc:	2100      	movs	r1, #0
90021fbe:	460f      	mov	r7, r1
90021fc0:	e723      	b.n	90021e0a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
90021fc2:	4621      	mov	r1, r4
90021fc4:	4627      	mov	r7, r4
90021fc6:	e720      	b.n	90021e0a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
90021fc8:	2100      	movs	r1, #0
90021fca:	e71e      	b.n	90021e0a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
90021fcc:	4629      	mov	r1, r5
90021fce:	e71c      	b.n	90021e0a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

90021fd0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90021fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90021fd4:	b09b      	sub	sp, #108	; 0x6c
90021fd6:	9218      	str	r2, [sp, #96]	; 0x60
90021fd8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
90021fda:	9019      	str	r0, [sp, #100]	; 0x64
90021fdc:	9116      	str	r1, [sp, #88]	; 0x58
90021fde:	6850      	ldr	r0, [r2, #4]
90021fe0:	9307      	str	r3, [sp, #28]
90021fe2:	6812      	ldr	r2, [r2, #0]
90021fe4:	9d26      	ldr	r5, [sp, #152]	; 0x98
90021fe6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
90021fea:	fb00 1303 	mla	r3, r0, r3, r1
90021fee:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90021ff2:	930a      	str	r3, [sp, #40]	; 0x28
90021ff4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90021ff6:	681b      	ldr	r3, [r3, #0]
90021ff8:	930f      	str	r3, [sp, #60]	; 0x3c
90021ffa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90021ffc:	685e      	ldr	r6, [r3, #4]
90021ffe:	3604      	adds	r6, #4
90022000:	9b16      	ldr	r3, [sp, #88]	; 0x58
90022002:	2b00      	cmp	r3, #0
90022004:	dc03      	bgt.n	9002200e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
90022006:	9b18      	ldr	r3, [sp, #96]	; 0x60
90022008:	2b00      	cmp	r3, #0
9002200a:	f340 8373 	ble.w	900226f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
9002200e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90022010:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90022014:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90022018:	1e48      	subs	r0, r1, #1
9002201a:	1e57      	subs	r7, r2, #1
9002201c:	9b07      	ldr	r3, [sp, #28]
9002201e:	2b00      	cmp	r3, #0
90022020:	f340 818f 	ble.w	90022342 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
90022024:	9c25      	ldr	r4, [sp, #148]	; 0x94
90022026:	142b      	asrs	r3, r5, #16
90022028:	ea5f 4c24 	movs.w	ip, r4, asr #16
9002202c:	d406      	bmi.n	9002203c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9002202e:	4584      	cmp	ip, r0
90022030:	da04      	bge.n	9002203c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90022032:	2b00      	cmp	r3, #0
90022034:	db02      	blt.n	9002203c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90022036:	42bb      	cmp	r3, r7
90022038:	f2c0 8184 	blt.w	90022344 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
9002203c:	f11c 0c01 	adds.w	ip, ip, #1
90022040:	f100 8172 	bmi.w	90022328 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90022044:	4561      	cmp	r1, ip
90022046:	f2c0 816f 	blt.w	90022328 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9002204a:	3301      	adds	r3, #1
9002204c:	f100 816c 	bmi.w	90022328 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90022050:	429a      	cmp	r2, r3
90022052:	f2c0 8169 	blt.w	90022328 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90022056:	9b07      	ldr	r3, [sp, #28]
90022058:	9f0a      	ldr	r7, [sp, #40]	; 0x28
9002205a:	9317      	str	r3, [sp, #92]	; 0x5c
9002205c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9002205e:	2b00      	cmp	r3, #0
90022060:	f340 818e 	ble.w	90022380 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
90022064:	9b25      	ldr	r3, [sp, #148]	; 0x94
90022066:	ea4f 4c25 	mov.w	ip, r5, asr #16
9002206a:	f3c5 3003 	ubfx	r0, r5, #12, #4
9002206e:	f3c3 3203 	ubfx	r2, r3, #12, #4
90022072:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90022074:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
90022078:	9b25      	ldr	r3, [sp, #148]	; 0x94
9002207a:	141b      	asrs	r3, r3, #16
9002207c:	f100 81d1 	bmi.w	90022422 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90022080:	f101 38ff 	add.w	r8, r1, #4294967295
90022084:	4543      	cmp	r3, r8
90022086:	f280 81cc 	bge.w	90022422 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9002208a:	f1bc 0f00 	cmp.w	ip, #0
9002208e:	f2c0 81c8 	blt.w	90022422 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90022092:	f10e 38ff 	add.w	r8, lr, #4294967295
90022096:	45c4      	cmp	ip, r8
90022098:	f280 81c3 	bge.w	90022422 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9002209c:	b209      	sxth	r1, r1
9002209e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
900220a0:	fb0c 3301 	mla	r3, ip, r1, r3
900220a4:	eb04 0803 	add.w	r8, r4, r3
900220a8:	5ce3      	ldrb	r3, [r4, r3]
900220aa:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
900220ae:	ea4f 6e13 	mov.w	lr, r3, lsr #24
900220b2:	2a00      	cmp	r2, #0
900220b4:	f000 81aa 	beq.w	9002240c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
900220b8:	f898 c001 	ldrb.w	ip, [r8, #1]
900220bc:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
900220c0:	940b      	str	r4, [sp, #44]	; 0x2c
900220c2:	0e24      	lsrs	r4, r4, #24
900220c4:	9412      	str	r4, [sp, #72]	; 0x48
900220c6:	b178      	cbz	r0, 900220e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
900220c8:	eb08 0c01 	add.w	ip, r8, r1
900220cc:	f818 1001 	ldrb.w	r1, [r8, r1]
900220d0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
900220d4:	9108      	str	r1, [sp, #32]
900220d6:	0e09      	lsrs	r1, r1, #24
900220d8:	9110      	str	r1, [sp, #64]	; 0x40
900220da:	f89c 1001 	ldrb.w	r1, [ip, #1]
900220de:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
900220e2:	910c      	str	r1, [sp, #48]	; 0x30
900220e4:	0e09      	lsrs	r1, r1, #24
900220e6:	9113      	str	r1, [sp, #76]	; 0x4c
900220e8:	b292      	uxth	r2, r2
900220ea:	9912      	ldr	r1, [sp, #72]	; 0x48
900220ec:	b280      	uxth	r0, r0
900220ee:	9c10      	ldr	r4, [sp, #64]	; 0x40
900220f0:	fb02 f900 	mul.w	r9, r2, r0
900220f4:	0112      	lsls	r2, r2, #4
900220f6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
900220fa:	eba2 0809 	sub.w	r8, r2, r9
900220fe:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
90022102:	b280      	uxth	r0, r0
90022104:	fa1f f888 	uxth.w	r8, r8
90022108:	1a12      	subs	r2, r2, r0
9002210a:	fb08 f101 	mul.w	r1, r8, r1
9002210e:	b292      	uxth	r2, r2
90022110:	fb02 110e 	mla	r1, r2, lr, r1
90022114:	fb00 1104 	mla	r1, r0, r4, r1
90022118:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9002211a:	fb09 1104 	mla	r1, r9, r4, r1
9002211e:	f3c1 2107 	ubfx	r1, r1, #8, #8
90022122:	2900      	cmp	r1, #0
90022124:	f000 80f5 	beq.w	90022312 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
90022128:	f1be 0fff 	cmp.w	lr, #255	; 0xff
9002212c:	d01b      	beq.n	90022166 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9002212e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90022132:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90022136:	fb0e fa0a 	mul.w	sl, lr, sl
9002213a:	fb0e fe03 	mul.w	lr, lr, r3
9002213e:	ea4f 231a 	mov.w	r3, sl, lsr #8
90022142:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90022146:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
9002214a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9002214e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
90022152:	4453      	add	r3, sl
90022154:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022158:	0a1b      	lsrs	r3, r3, #8
9002215a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9002215e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90022162:	ea43 030c 	orr.w	r3, r3, ip
90022166:	9c12      	ldr	r4, [sp, #72]	; 0x48
90022168:	2cff      	cmp	r4, #255	; 0xff
9002216a:	d021      	beq.n	900221b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9002216c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9002216e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
90022172:	9c12      	ldr	r4, [sp, #72]	; 0x48
90022174:	fb04 fb0b 	mul.w	fp, r4, fp
90022178:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9002217a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9002217e:	9c12      	ldr	r4, [sp, #72]	; 0x48
90022180:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90022184:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90022188:	fb04 fa0a 	mul.w	sl, r4, sl
9002218c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90022190:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90022194:	44de      	add	lr, fp
90022196:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9002219a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9002219e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900221a2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900221a6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900221aa:	ea4e 040a 	orr.w	r4, lr, sl
900221ae:	940b      	str	r4, [sp, #44]	; 0x2c
900221b0:	9c10      	ldr	r4, [sp, #64]	; 0x40
900221b2:	2cff      	cmp	r4, #255	; 0xff
900221b4:	d021      	beq.n	900221fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
900221b6:	9c08      	ldr	r4, [sp, #32]
900221b8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
900221bc:	9c10      	ldr	r4, [sp, #64]	; 0x40
900221be:	fb04 fb0b 	mul.w	fp, r4, fp
900221c2:	9c08      	ldr	r4, [sp, #32]
900221c4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
900221c8:	9c10      	ldr	r4, [sp, #64]	; 0x40
900221ca:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
900221ce:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
900221d2:	fb04 fa0a 	mul.w	sl, r4, sl
900221d6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900221da:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
900221de:	44de      	add	lr, fp
900221e0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
900221e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900221e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900221ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900221f0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900221f4:	ea4e 040a 	orr.w	r4, lr, sl
900221f8:	9408      	str	r4, [sp, #32]
900221fa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
900221fc:	2cff      	cmp	r4, #255	; 0xff
900221fe:	d021      	beq.n	90022244 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
90022200:	9c0c      	ldr	r4, [sp, #48]	; 0x30
90022202:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
90022206:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90022208:	fb04 fb0b 	mul.w	fp, r4, fp
9002220c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9002220e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90022212:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90022214:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90022218:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9002221c:	fb04 fa0a 	mul.w	sl, r4, sl
90022220:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90022224:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90022228:	44de      	add	lr, fp
9002222a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9002222e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90022232:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022236:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002223a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002223e:	ea4e 040a 	orr.w	r4, lr, sl
90022242:	940c      	str	r4, [sp, #48]	; 0x30
90022244:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90022246:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
9002224a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9002224e:	43c9      	mvns	r1, r1
90022250:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90022254:	9c08      	ldr	r4, [sp, #32]
90022256:	fb08 fc0c 	mul.w	ip, r8, ip
9002225a:	fb02 cc0e 	mla	ip, r2, lr, ip
9002225e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
90022262:	9c0c      	ldr	r4, [sp, #48]	; 0x30
90022264:	fb00 cc0e 	mla	ip, r0, lr, ip
90022268:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9002226c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9002226e:	fb09 cc0e 	mla	ip, r9, lr, ip
90022272:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
90022276:	fb08 f80e 	mul.w	r8, r8, lr
9002227a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002227e:	fa5f fe81 	uxtb.w	lr, r1
90022282:	fb02 8303 	mla	r3, r2, r3, r8
90022286:	9a08      	ldr	r2, [sp, #32]
90022288:	f8b7 8000 	ldrh.w	r8, [r7]
9002228c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022290:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
90022294:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90022296:	ea4f 01c8 	mov.w	r1, r8, lsl #3
9002229a:	fb00 330a 	mla	r3, r0, sl, r3
9002229e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
900222a2:	ea4f 2228 	mov.w	r2, r8, asr #8
900222a6:	fb09 3900 	mla	r9, r9, r0, r3
900222aa:	ea4f 00e8 	mov.w	r0, r8, asr #3
900222ae:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
900222b2:	b2c9      	uxtb	r1, r1
900222b4:	ea4f 2919 	mov.w	r9, r9, lsr #8
900222b8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
900222bc:	fb02 f20e 	mul.w	r2, r2, lr
900222c0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
900222c4:	fb00 f00e 	mul.w	r0, r0, lr
900222c8:	1c53      	adds	r3, r2, #1
900222ca:	fb01 f10e 	mul.w	r1, r1, lr
900222ce:	ea4c 0c09 	orr.w	ip, ip, r9
900222d2:	eb03 2212 	add.w	r2, r3, r2, lsr #8
900222d6:	ea4f 431c 	mov.w	r3, ip, lsr #16
900222da:	eb03 2312 	add.w	r3, r3, r2, lsr #8
900222de:	4a60      	ldr	r2, [pc, #384]	; (90022460 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
900222e0:	b2db      	uxtb	r3, r3
900222e2:	ea02 2203 	and.w	r2, r2, r3, lsl #8
900222e6:	1c43      	adds	r3, r0, #1
900222e8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
900222ec:	ea4f 231c 	mov.w	r3, ip, lsr #8
900222f0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
900222f4:	00db      	lsls	r3, r3, #3
900222f6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900222fa:	4313      	orrs	r3, r2
900222fc:	1c4a      	adds	r2, r1, #1
900222fe:	eb02 2111 	add.w	r1, r2, r1, lsr #8
90022302:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
90022306:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
9002230a:	ea4c 0c03 	orr.w	ip, ip, r3
9002230e:	f8a7 c000 	strh.w	ip, [r7]
90022312:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90022314:	3702      	adds	r7, #2
90022316:	9a25      	ldr	r2, [sp, #148]	; 0x94
90022318:	441a      	add	r2, r3
9002231a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9002231c:	441d      	add	r5, r3
9002231e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90022320:	9225      	str	r2, [sp, #148]	; 0x94
90022322:	3b01      	subs	r3, #1
90022324:	9317      	str	r3, [sp, #92]	; 0x5c
90022326:	e699      	b.n	9002205c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
90022328:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9002232a:	9c25      	ldr	r4, [sp, #148]	; 0x94
9002232c:	441c      	add	r4, r3
9002232e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022330:	441d      	add	r5, r3
90022332:	9b07      	ldr	r3, [sp, #28]
90022334:	9425      	str	r4, [sp, #148]	; 0x94
90022336:	3b01      	subs	r3, #1
90022338:	9307      	str	r3, [sp, #28]
9002233a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002233c:	3302      	adds	r3, #2
9002233e:	930a      	str	r3, [sp, #40]	; 0x28
90022340:	e66c      	b.n	9002201c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
90022342:	d024      	beq.n	9002238e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
90022344:	9b07      	ldr	r3, [sp, #28]
90022346:	9827      	ldr	r0, [sp, #156]	; 0x9c
90022348:	3b01      	subs	r3, #1
9002234a:	9c25      	ldr	r4, [sp, #148]	; 0x94
9002234c:	fb00 4003 	mla	r0, r0, r3, r4
90022350:	1400      	asrs	r0, r0, #16
90022352:	f53f ae80 	bmi.w	90022056 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
90022356:	3901      	subs	r1, #1
90022358:	4288      	cmp	r0, r1
9002235a:	f6bf ae7c 	bge.w	90022056 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9002235e:	9928      	ldr	r1, [sp, #160]	; 0xa0
90022360:	fb01 5303 	mla	r3, r1, r3, r5
90022364:	141b      	asrs	r3, r3, #16
90022366:	f53f ae76 	bmi.w	90022056 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9002236a:	3a01      	subs	r2, #1
9002236c:	4293      	cmp	r3, r2
9002236e:	f6bf ae72 	bge.w	90022056 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
90022372:	f8dd b01c 	ldr.w	fp, [sp, #28]
90022376:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
9002237a:	f1bb 0f00 	cmp.w	fp, #0
9002237e:	dc71      	bgt.n	90022464 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
90022380:	9b07      	ldr	r3, [sp, #28]
90022382:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
90022386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90022388:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9002238c:	930a      	str	r3, [sp, #40]	; 0x28
9002238e:	9b16      	ldr	r3, [sp, #88]	; 0x58
90022390:	2b00      	cmp	r3, #0
90022392:	f340 81af 	ble.w	900226f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
90022396:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9002239a:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002239c:	ee30 0a04 	vadd.f32	s0, s0, s8
900223a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
900223a4:	eef0 6a62 	vmov.f32	s13, s5
900223a8:	eec7 7a00 	vdiv.f32	s15, s14, s0
900223ac:	ee31 1a05 	vadd.f32	s2, s2, s10
900223b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900223b4:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
900223b8:	eef0 6a43 	vmov.f32	s13, s6
900223bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900223c0:	ee16 5a90 	vmov	r5, s13
900223c4:	ee20 7aa7 	vmul.f32	s14, s1, s15
900223c8:	ee61 7a27 	vmul.f32	s15, s2, s15
900223cc:	ee77 2a62 	vsub.f32	s5, s14, s5
900223d0:	ee37 3ac3 	vsub.f32	s6, s15, s6
900223d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900223d8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900223dc:	ee12 2a90 	vmov	r2, s5
900223e0:	eef0 2a47 	vmov.f32	s5, s14
900223e4:	fb92 f3f3 	sdiv	r3, r2, r3
900223e8:	ee13 2a10 	vmov	r2, s6
900223ec:	9327      	str	r3, [sp, #156]	; 0x9c
900223ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
900223f0:	eeb0 3a67 	vmov.f32	s6, s15
900223f4:	fb92 f3f3 	sdiv	r3, r2, r3
900223f8:	9328      	str	r3, [sp, #160]	; 0xa0
900223fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
900223fc:	9a18      	ldr	r2, [sp, #96]	; 0x60
900223fe:	3b01      	subs	r3, #1
90022400:	9316      	str	r3, [sp, #88]	; 0x58
90022402:	9b24      	ldr	r3, [sp, #144]	; 0x90
90022404:	bf08      	it	eq
90022406:	4613      	moveq	r3, r2
90022408:	9307      	str	r3, [sp, #28]
9002240a:	e5f9      	b.n	90022000 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9002240c:	2800      	cmp	r0, #0
9002240e:	f43f ae6b 	beq.w	900220e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
90022412:	f818 1001 	ldrb.w	r1, [r8, r1]
90022416:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9002241a:	9108      	str	r1, [sp, #32]
9002241c:	0e09      	lsrs	r1, r1, #24
9002241e:	9110      	str	r1, [sp, #64]	; 0x40
90022420:	e662      	b.n	900220e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
90022422:	f113 0801 	adds.w	r8, r3, #1
90022426:	f53f af74 	bmi.w	90022312 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9002242a:	4541      	cmp	r1, r8
9002242c:	f6ff af71 	blt.w	90022312 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
90022430:	f11c 0801 	adds.w	r8, ip, #1
90022434:	f53f af6d 	bmi.w	90022312 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
90022438:	45c6      	cmp	lr, r8
9002243a:	f6ff af6a 	blt.w	90022312 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9002243e:	b209      	sxth	r1, r1
90022440:	e9cd 3c02 	strd	r3, ip, [sp, #8]
90022444:	fa0f f38e 	sxth.w	r3, lr
90022448:	9100      	str	r1, [sp, #0]
9002244a:	4639      	mov	r1, r7
9002244c:	9301      	str	r3, [sp, #4]
9002244e:	4633      	mov	r3, r6
90022450:	e9cd 2004 	strd	r2, r0, [sp, #16]
90022454:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90022456:	9819      	ldr	r0, [sp, #100]	; 0x64
90022458:	f7ff fc7b 	bl	90021d52 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
9002245c:	e759      	b.n	90022312 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9002245e:	bf00      	nop
90022460:	fffff800 	.word	0xfffff800
90022464:	9b25      	ldr	r3, [sp, #148]	; 0x94
90022466:	f3c5 3003 	ubfx	r0, r5, #12, #4
9002246a:	9c25      	ldr	r4, [sp, #148]	; 0x94
9002246c:	f3c3 3203 	ubfx	r2, r3, #12, #4
90022470:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90022472:	1427      	asrs	r7, r4, #16
90022474:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
90022476:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9002247a:	142b      	asrs	r3, r5, #16
9002247c:	fb01 7303 	mla	r3, r1, r3, r7
90022480:	18e7      	adds	r7, r4, r3
90022482:	5ce3      	ldrb	r3, [r4, r3]
90022484:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
90022488:	ea4f 6c13 	mov.w	ip, r3, lsr #24
9002248c:	2a00      	cmp	r2, #0
9002248e:	f000 8127 	beq.w	900226e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
90022492:	f897 e001 	ldrb.w	lr, [r7, #1]
90022496:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
9002249a:	940d      	str	r4, [sp, #52]	; 0x34
9002249c:	0e24      	lsrs	r4, r4, #24
9002249e:	9414      	str	r4, [sp, #80]	; 0x50
900224a0:	b170      	cbz	r0, 900224c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
900224a2:	eb07 0e01 	add.w	lr, r7, r1
900224a6:	5c79      	ldrb	r1, [r7, r1]
900224a8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
900224ac:	9109      	str	r1, [sp, #36]	; 0x24
900224ae:	0e09      	lsrs	r1, r1, #24
900224b0:	9111      	str	r1, [sp, #68]	; 0x44
900224b2:	f89e 1001 	ldrb.w	r1, [lr, #1]
900224b6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
900224ba:	910e      	str	r1, [sp, #56]	; 0x38
900224bc:	0e09      	lsrs	r1, r1, #24
900224be:	9115      	str	r1, [sp, #84]	; 0x54
900224c0:	b292      	uxth	r2, r2
900224c2:	9c11      	ldr	r4, [sp, #68]	; 0x44
900224c4:	b280      	uxth	r0, r0
900224c6:	fb02 f800 	mul.w	r8, r2, r0
900224ca:	0112      	lsls	r2, r2, #4
900224cc:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
900224d0:	eba2 0e08 	sub.w	lr, r2, r8
900224d4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
900224d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
900224da:	b280      	uxth	r0, r0
900224dc:	fa1f fe8e 	uxth.w	lr, lr
900224e0:	1a09      	subs	r1, r1, r0
900224e2:	fb0e f202 	mul.w	r2, lr, r2
900224e6:	b289      	uxth	r1, r1
900224e8:	fb01 220c 	mla	r2, r1, ip, r2
900224ec:	fb00 2204 	mla	r2, r0, r4, r2
900224f0:	9c15      	ldr	r4, [sp, #84]	; 0x54
900224f2:	fb08 2204 	mla	r2, r8, r4, r2
900224f6:	f3c2 2207 	ubfx	r2, r2, #8, #8
900224fa:	2a00      	cmp	r2, #0
900224fc:	f000 80e5 	beq.w	900226ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
90022500:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
90022504:	d019      	beq.n	9002253a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
90022506:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9002250a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9002250e:	fb0c fa0a 	mul.w	sl, ip, sl
90022512:	fb0c fc03 	mul.w	ip, ip, r3
90022516:	ea4f 231a 	mov.w	r3, sl, lsr #8
9002251a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9002251e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
90022522:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90022526:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9002252a:	4453      	add	r3, sl
9002252c:	0a3f      	lsrs	r7, r7, #8
9002252e:	0a1b      	lsrs	r3, r3, #8
90022530:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90022534:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90022538:	433b      	orrs	r3, r7
9002253a:	9c14      	ldr	r4, [sp, #80]	; 0x50
9002253c:	2cff      	cmp	r4, #255	; 0xff
9002253e:	d020      	beq.n	90022582 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
90022540:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90022542:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90022546:	9c14      	ldr	r4, [sp, #80]	; 0x50
90022548:	4367      	muls	r7, r4
9002254a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9002254c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90022550:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90022554:	9c14      	ldr	r4, [sp, #80]	; 0x50
90022556:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9002255a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002255e:	fb04 fa0a 	mul.w	sl, r4, sl
90022562:	44bc      	add	ip, r7
90022564:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90022568:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002256c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90022570:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022574:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022578:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002257c:	ea4c 040a 	orr.w	r4, ip, sl
90022580:	940d      	str	r4, [sp, #52]	; 0x34
90022582:	9c11      	ldr	r4, [sp, #68]	; 0x44
90022584:	2cff      	cmp	r4, #255	; 0xff
90022586:	d020      	beq.n	900225ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
90022588:	9c09      	ldr	r4, [sp, #36]	; 0x24
9002258a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9002258e:	9c11      	ldr	r4, [sp, #68]	; 0x44
90022590:	4367      	muls	r7, r4
90022592:	9c09      	ldr	r4, [sp, #36]	; 0x24
90022594:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90022598:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9002259c:	9c11      	ldr	r4, [sp, #68]	; 0x44
9002259e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
900225a2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900225a6:	fb04 fa0a 	mul.w	sl, r4, sl
900225aa:	44bc      	add	ip, r7
900225ac:	f50a 7780 	add.w	r7, sl, #256	; 0x100
900225b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900225b4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
900225b8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900225bc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900225c0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900225c4:	ea4c 040a 	orr.w	r4, ip, sl
900225c8:	9409      	str	r4, [sp, #36]	; 0x24
900225ca:	9c15      	ldr	r4, [sp, #84]	; 0x54
900225cc:	2cff      	cmp	r4, #255	; 0xff
900225ce:	d020      	beq.n	90022612 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
900225d0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
900225d2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
900225d6:	9c15      	ldr	r4, [sp, #84]	; 0x54
900225d8:	4367      	muls	r7, r4
900225da:	9c0e      	ldr	r4, [sp, #56]	; 0x38
900225dc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
900225e0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
900225e4:	9c15      	ldr	r4, [sp, #84]	; 0x54
900225e6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
900225ea:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900225ee:	fb04 fa0a 	mul.w	sl, r4, sl
900225f2:	44bc      	add	ip, r7
900225f4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
900225f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900225fc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90022600:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022604:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022608:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002260c:	ea4c 040a 	orr.w	r4, ip, sl
90022610:	940e      	str	r4, [sp, #56]	; 0x38
90022612:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90022614:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
90022618:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9002261c:	43d2      	mvns	r2, r2
9002261e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90022622:	9c09      	ldr	r4, [sp, #36]	; 0x24
90022624:	b2d2      	uxtb	r2, r2
90022626:	fb0e f707 	mul.w	r7, lr, r7
9002262a:	fb01 770c 	mla	r7, r1, ip, r7
9002262e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90022632:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90022634:	fb00 770c 	mla	r7, r0, ip, r7
90022638:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9002263c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9002263e:	fb08 770c 	mla	r7, r8, ip, r7
90022642:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
90022646:	fb0e fe0c 	mul.w	lr, lr, ip
9002264a:	0a3f      	lsrs	r7, r7, #8
9002264c:	fb01 e303 	mla	r3, r1, r3, lr
90022650:	9909      	ldr	r1, [sp, #36]	; 0x24
90022652:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
90022656:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
9002265a:	990e      	ldr	r1, [sp, #56]	; 0x38
9002265c:	fb00 330a 	mla	r3, r0, sl, r3
90022660:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
90022664:	fb08 3c0c 	mla	ip, r8, ip, r3
90022668:	f8b9 3000 	ldrh.w	r3, [r9]
9002266c:	1218      	asrs	r0, r3, #8
9002266e:	10d9      	asrs	r1, r3, #3
90022670:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022674:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90022678:	00db      	lsls	r3, r3, #3
9002267a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9002267e:	4350      	muls	r0, r2
90022680:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90022684:	b2db      	uxtb	r3, r3
90022686:	4351      	muls	r1, r2
90022688:	ea47 070c 	orr.w	r7, r7, ip
9002268c:	4353      	muls	r3, r2
9002268e:	1c42      	adds	r2, r0, #1
90022690:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90022694:	0c3a      	lsrs	r2, r7, #16
90022696:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9002269a:	4a18      	ldr	r2, [pc, #96]	; (900226fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
9002269c:	b2c0      	uxtb	r0, r0
9002269e:	ea02 2000 	and.w	r0, r2, r0, lsl #8
900226a2:	1c4a      	adds	r2, r1, #1
900226a4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
900226a8:	0a3a      	lsrs	r2, r7, #8
900226aa:	eb02 2111 	add.w	r1, r2, r1, lsr #8
900226ae:	00c9      	lsls	r1, r1, #3
900226b0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
900226b4:	4301      	orrs	r1, r0
900226b6:	1c58      	adds	r0, r3, #1
900226b8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
900226bc:	eb07 2710 	add.w	r7, r7, r0, lsr #8
900226c0:	f3c7 00c4 	ubfx	r0, r7, #3, #5
900226c4:	4308      	orrs	r0, r1
900226c6:	f8a9 0000 	strh.w	r0, [r9]
900226ca:	9b27      	ldr	r3, [sp, #156]	; 0x9c
900226cc:	f109 0902 	add.w	r9, r9, #2
900226d0:	9a25      	ldr	r2, [sp, #148]	; 0x94
900226d2:	f10b 3bff 	add.w	fp, fp, #4294967295
900226d6:	441a      	add	r2, r3
900226d8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900226da:	9225      	str	r2, [sp, #148]	; 0x94
900226dc:	441d      	add	r5, r3
900226de:	e64c      	b.n	9002237a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
900226e0:	2800      	cmp	r0, #0
900226e2:	f43f aeed 	beq.w	900224c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
900226e6:	5c79      	ldrb	r1, [r7, r1]
900226e8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
900226ec:	9109      	str	r1, [sp, #36]	; 0x24
900226ee:	0e09      	lsrs	r1, r1, #24
900226f0:	9111      	str	r1, [sp, #68]	; 0x44
900226f2:	e6e5      	b.n	900224c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
900226f4:	b01b      	add	sp, #108	; 0x6c
900226f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900226fa:	bf00      	nop
900226fc:	fffff800 	.word	0xfffff800

90022700 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
90022700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90022704:	b085      	sub	sp, #20
90022706:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
9002270a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
9002270e:	2800      	cmp	r0, #0
90022710:	9103      	str	r1, [sp, #12]
90022712:	fb00 7406 	mla	r4, r0, r6, r7
90022716:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
9002271a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
9002271e:	eb02 0544 	add.w	r5, r2, r4, lsl #1
90022722:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
90022726:	eb03 0904 	add.w	r9, r3, r4
9002272a:	9501      	str	r5, [sp, #4]
9002272c:	f2c0 8150 	blt.w	900229d0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
90022730:	4583      	cmp	fp, r0
90022732:	f340 814d 	ble.w	900229d0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
90022736:	2f00      	cmp	r7, #0
90022738:	f2c0 8146 	blt.w	900229c8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
9002273c:	42be      	cmp	r6, r7
9002273e:	f340 8143 	ble.w	900229c8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
90022742:	f813 c004 	ldrb.w	ip, [r3, r4]
90022746:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
9002274a:	f64f 041f 	movw	r4, #63519	; 0xf81f
9002274e:	ea4f 02ec 	mov.w	r2, ip, asr #3
90022752:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
90022756:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002275a:	4355      	muls	r5, r2
9002275c:	fb0c f203 	mul.w	r2, ip, r3
90022760:	ea04 1355 	and.w	r3, r4, r5, lsr #5
90022764:	f605 0501 	addw	r5, r5, #2049	; 0x801
90022768:	441d      	add	r5, r3
9002276a:	f102 0320 	add.w	r3, r2, #32
9002276e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90022772:	ea04 1455 	and.w	r4, r4, r5, lsr #5
90022776:	0a1b      	lsrs	r3, r3, #8
90022778:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002277c:	431c      	orrs	r4, r3
9002277e:	1c7b      	adds	r3, r7, #1
90022780:	f100 812b 	bmi.w	900229da <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
90022784:	429e      	cmp	r6, r3
90022786:	f340 8128 	ble.w	900229da <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
9002278a:	2900      	cmp	r1, #0
9002278c:	f000 8128 	beq.w	900229e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
90022790:	9a01      	ldr	r2, [sp, #4]
90022792:	f899 3001 	ldrb.w	r3, [r9, #1]
90022796:	8855      	ldrh	r5, [r2, #2]
90022798:	ea4f 08e3 	mov.w	r8, r3, asr #3
9002279c:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
900227a0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
900227a4:	fb08 f802 	mul.w	r8, r8, r2
900227a8:	f64f 021f 	movw	r2, #63519	; 0xf81f
900227ac:	435d      	muls	r5, r3
900227ae:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
900227b2:	f608 0801 	addw	r8, r8, #2049	; 0x801
900227b6:	44d0      	add	r8, sl
900227b8:	f105 0a20 	add.w	sl, r5, #32
900227bc:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
900227c0:	ea02 1258 	and.w	r2, r2, r8, lsr #5
900227c4:	0a2d      	lsrs	r5, r5, #8
900227c6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
900227ca:	432a      	orrs	r2, r5
900227cc:	3001      	adds	r0, #1
900227ce:	f100 810d 	bmi.w	900229ec <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
900227d2:	4583      	cmp	fp, r0
900227d4:	f340 810a 	ble.w	900229ec <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
900227d8:	f1be 0f00 	cmp.w	lr, #0
900227dc:	f000 810b 	beq.w	900229f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
900227e0:	2f00      	cmp	r7, #0
900227e2:	f2c0 8100 	blt.w	900229e6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
900227e6:	42be      	cmp	r6, r7
900227e8:	f340 80fd 	ble.w	900229e6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
900227ec:	9801      	ldr	r0, [sp, #4]
900227ee:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
900227f2:	f819 5006 	ldrb.w	r5, [r9, r6]
900227f6:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
900227fa:	ea4f 0ae5 	mov.w	sl, r5, asr #3
900227fe:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
90022802:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
90022806:	fb0a fa00 	mul.w	sl, sl, r0
9002280a:	fb05 f808 	mul.w	r8, r5, r8
9002280e:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
90022812:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
90022816:	4482      	add	sl, r0
90022818:	f108 0020 	add.w	r0, r8, #32
9002281c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
90022820:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
90022824:	0a00      	lsrs	r0, r0, #8
90022826:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002282a:	ea4b 0b00 	orr.w	fp, fp, r0
9002282e:	3701      	adds	r7, #1
90022830:	f100 80e6 	bmi.w	90022a00 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
90022834:	42be      	cmp	r6, r7
90022836:	f340 80e3 	ble.w	90022a00 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
9002283a:	2900      	cmp	r1, #0
9002283c:	f000 80e3 	beq.w	90022a06 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
90022840:	3601      	adds	r6, #1
90022842:	9801      	ldr	r0, [sp, #4]
90022844:	f819 7006 	ldrb.w	r7, [r9, r6]
90022848:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
9002284c:	ea4f 09e7 	mov.w	r9, r7, asr #3
90022850:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
90022854:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90022858:	fb09 f906 	mul.w	r9, r9, r6
9002285c:	fb07 f800 	mul.w	r8, r7, r0
90022860:	f64f 001f 	movw	r0, #63519	; 0xf81f
90022864:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
90022868:	f609 0901 	addw	r9, r9, #2049	; 0x801
9002286c:	44d1      	add	r9, sl
9002286e:	ea00 1659 	and.w	r6, r0, r9, lsr #5
90022872:	f108 0020 	add.w	r0, r8, #32
90022876:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9002287a:	0a00      	lsrs	r0, r0, #8
9002287c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90022880:	4330      	orrs	r0, r6
90022882:	b28e      	uxth	r6, r1
90022884:	fa1f f98e 	uxth.w	r9, lr
90022888:	ea4f 4a04 	mov.w	sl, r4, lsl #16
9002288c:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
90022890:	fb06 f809 	mul.w	r8, r6, r9
90022894:	0136      	lsls	r6, r6, #4
90022896:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9002289a:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
9002289e:	9601      	str	r6, [sp, #4]
900228a0:	ea4a 0404 	orr.w	r4, sl, r4
900228a4:	ea4f 4a02 	mov.w	sl, r2, lsl #16
900228a8:	fa1f f689 	uxth.w	r6, r9
900228ac:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900228b0:	fb11 f90e 	smulbb	r9, r1, lr
900228b4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
900228b8:	9602      	str	r6, [sp, #8]
900228ba:	4626      	mov	r6, r4
900228bc:	f3c9 09c7 	ubfx	r9, r9, #3, #8
900228c0:	f1ce 0410 	rsb	r4, lr, #16
900228c4:	ea4a 0202 	orr.w	r2, sl, r2
900228c8:	ea4f 4a00 	mov.w	sl, r0, lsl #16
900228cc:	1a64      	subs	r4, r4, r1
900228ce:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
900228d2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
900228d6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
900228da:	434a      	muls	r2, r1
900228dc:	eb09 0444 	add.w	r4, r9, r4, lsl #1
900228e0:	ea4a 0000 	orr.w	r0, sl, r0
900228e4:	9903      	ldr	r1, [sp, #12]
900228e6:	fb04 2406 	mla	r4, r4, r6, r2
900228ea:	9e02      	ldr	r6, [sp, #8]
900228ec:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
900228f0:	fb09 4200 	mla	r2, r9, r0, r4
900228f4:	ea4f 440b 	mov.w	r4, fp, lsl #16
900228f8:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
900228fc:	8808      	ldrh	r0, [r1, #0]
900228fe:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
90022902:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
90022906:	ea44 0b0b 	orr.w	fp, r4, fp
9002290a:	9c01      	ldr	r4, [sp, #4]
9002290c:	b289      	uxth	r1, r1
9002290e:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
90022912:	fb0e 2e0b 	mla	lr, lr, fp, r2
90022916:	1ba4      	subs	r4, r4, r6
90022918:	9e01      	ldr	r6, [sp, #4]
9002291a:	ea4f 525e 	mov.w	r2, lr, lsr #21
9002291e:	eba6 0608 	sub.w	r6, r6, r8
90022922:	b2a4      	uxth	r4, r4
90022924:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
90022928:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9002292c:	b2b6      	uxth	r6, r6
9002292e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
90022932:	4373      	muls	r3, r6
90022934:	ea42 0e0e 	orr.w	lr, r2, lr
90022938:	fb0c 3304 	mla	r3, ip, r4, r3
9002293c:	9c02      	ldr	r4, [sp, #8]
9002293e:	fa1f f28e 	uxth.w	r2, lr
90022942:	fb04 3505 	mla	r5, r4, r5, r3
90022946:	10d4      	asrs	r4, r2, #3
90022948:	fb08 5707 	mla	r7, r8, r7, r5
9002294c:	1215      	asrs	r5, r2, #8
9002294e:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
90022952:	00d2      	lsls	r2, r2, #3
90022954:	f3c7 2707 	ubfx	r7, r7, #8, #8
90022958:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9002295c:	b2d2      	uxtb	r2, r2
9002295e:	434f      	muls	r7, r1
90022960:	1c7b      	adds	r3, r7, #1
90022962:	eb03 2717 	add.w	r7, r3, r7, lsr #8
90022966:	1203      	asrs	r3, r0, #8
90022968:	ea6f 2717 	mvn.w	r7, r7, lsr #8
9002296c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
90022970:	b2ff      	uxtb	r7, r7
90022972:	fb13 f307 	smulbb	r3, r3, r7
90022976:	fb05 3501 	mla	r5, r5, r1, r3
9002297a:	10c3      	asrs	r3, r0, #3
9002297c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
90022980:	b2ad      	uxth	r5, r5
90022982:	fb13 f307 	smulbb	r3, r3, r7
90022986:	fb04 3401 	mla	r4, r4, r1, r3
9002298a:	00c3      	lsls	r3, r0, #3
9002298c:	b2db      	uxtb	r3, r3
9002298e:	b2a4      	uxth	r4, r4
90022990:	fb13 f307 	smulbb	r3, r3, r7
90022994:	fb02 3101 	mla	r1, r2, r1, r3
90022998:	1c6b      	adds	r3, r5, #1
9002299a:	1c62      	adds	r2, r4, #1
9002299c:	b289      	uxth	r1, r1
9002299e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
900229a2:	1c4b      	adds	r3, r1, #1
900229a4:	eb02 2414 	add.w	r4, r2, r4, lsr #8
900229a8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
900229ac:	9a03      	ldr	r2, [sp, #12]
900229ae:	eb03 2311 	add.w	r3, r3, r1, lsr #8
900229b2:	0964      	lsrs	r4, r4, #5
900229b4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
900229b8:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
900229bc:	432b      	orrs	r3, r5
900229be:	4323      	orrs	r3, r4
900229c0:	8013      	strh	r3, [r2, #0]
900229c2:	b005      	add	sp, #20
900229c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900229c8:	f04f 0c00 	mov.w	ip, #0
900229cc:	4664      	mov	r4, ip
900229ce:	e6d6      	b.n	9002277e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
900229d0:	2300      	movs	r3, #0
900229d2:	469c      	mov	ip, r3
900229d4:	461a      	mov	r2, r3
900229d6:	461c      	mov	r4, r3
900229d8:	e6f8      	b.n	900227cc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
900229da:	2300      	movs	r3, #0
900229dc:	461a      	mov	r2, r3
900229de:	e6f5      	b.n	900227cc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
900229e0:	460b      	mov	r3, r1
900229e2:	460a      	mov	r2, r1
900229e4:	e6f2      	b.n	900227cc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
900229e6:	2500      	movs	r5, #0
900229e8:	46ab      	mov	fp, r5
900229ea:	e720      	b.n	9002282e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
900229ec:	2700      	movs	r7, #0
900229ee:	463d      	mov	r5, r7
900229f0:	4638      	mov	r0, r7
900229f2:	46bb      	mov	fp, r7
900229f4:	e745      	b.n	90022882 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
900229f6:	4677      	mov	r7, lr
900229f8:	4675      	mov	r5, lr
900229fa:	4670      	mov	r0, lr
900229fc:	46f3      	mov	fp, lr
900229fe:	e740      	b.n	90022882 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
90022a00:	2700      	movs	r7, #0
90022a02:	4638      	mov	r0, r7
90022a04:	e73d      	b.n	90022882 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
90022a06:	460f      	mov	r7, r1
90022a08:	4608      	mov	r0, r1
90022a0a:	e73a      	b.n	90022882 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

90022a0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90022a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90022a10:	b097      	sub	sp, #92	; 0x5c
90022a12:	9214      	str	r2, [sp, #80]	; 0x50
90022a14:	9308      	str	r3, [sp, #32]
90022a16:	9a25      	ldr	r2, [sp, #148]	; 0x94
90022a18:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
90022a1c:	9015      	str	r0, [sp, #84]	; 0x54
90022a1e:	9312      	str	r3, [sp, #72]	; 0x48
90022a20:	6850      	ldr	r0, [r2, #4]
90022a22:	9111      	str	r1, [sp, #68]	; 0x44
90022a24:	6812      	ldr	r2, [r2, #0]
90022a26:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
90022a2a:	fb00 1303 	mla	r3, r0, r3, r1
90022a2e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90022a32:	9309      	str	r3, [sp, #36]	; 0x24
90022a34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022a36:	681b      	ldr	r3, [r3, #0]
90022a38:	930b      	str	r3, [sp, #44]	; 0x2c
90022a3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022a3c:	685b      	ldr	r3, [r3, #4]
90022a3e:	930c      	str	r3, [sp, #48]	; 0x30
90022a40:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90022a44:	930a      	str	r3, [sp, #40]	; 0x28
90022a46:	9b11      	ldr	r3, [sp, #68]	; 0x44
90022a48:	2b00      	cmp	r3, #0
90022a4a:	dc03      	bgt.n	90022a54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90022a4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
90022a4e:	2b00      	cmp	r3, #0
90022a50:	f340 83cd 	ble.w	900231ee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
90022a54:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022a56:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90022a5a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90022a5e:	1e48      	subs	r0, r1, #1
90022a60:	1e55      	subs	r5, r2, #1
90022a62:	9b08      	ldr	r3, [sp, #32]
90022a64:	2b00      	cmp	r3, #0
90022a66:	f340 81a5 	ble.w	90022db4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
90022a6a:	9e21      	ldr	r6, [sp, #132]	; 0x84
90022a6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
90022a6e:	1436      	asrs	r6, r6, #16
90022a70:	ea4f 4323 	mov.w	r3, r3, asr #16
90022a74:	d406      	bmi.n	90022a84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90022a76:	4286      	cmp	r6, r0
90022a78:	da04      	bge.n	90022a84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90022a7a:	2b00      	cmp	r3, #0
90022a7c:	db02      	blt.n	90022a84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90022a7e:	42ab      	cmp	r3, r5
90022a80:	f2c0 8199 	blt.w	90022db6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
90022a84:	3601      	adds	r6, #1
90022a86:	f100 8186 	bmi.w	90022d96 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
90022a8a:	42b1      	cmp	r1, r6
90022a8c:	f2c0 8183 	blt.w	90022d96 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
90022a90:	3301      	adds	r3, #1
90022a92:	f100 8180 	bmi.w	90022d96 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
90022a96:	429a      	cmp	r2, r3
90022a98:	f2c0 817d 	blt.w	90022d96 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
90022a9c:	9b08      	ldr	r3, [sp, #32]
90022a9e:	f64f 061f 	movw	r6, #63519	; 0xf81f
90022aa2:	9f09      	ldr	r7, [sp, #36]	; 0x24
90022aa4:	9313      	str	r3, [sp, #76]	; 0x4c
90022aa6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90022aa8:	2b00      	cmp	r3, #0
90022aaa:	f340 81a6 	ble.w	90022dfa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
90022aae:	9b22      	ldr	r3, [sp, #136]	; 0x88
90022ab0:	9d21      	ldr	r5, [sp, #132]	; 0x84
90022ab2:	1418      	asrs	r0, r3, #16
90022ab4:	9b21      	ldr	r3, [sp, #132]	; 0x84
90022ab6:	142d      	asrs	r5, r5, #16
90022ab8:	f3c3 3103 	ubfx	r1, r3, #12, #4
90022abc:	9b22      	ldr	r3, [sp, #136]	; 0x88
90022abe:	f3c3 3c03 	ubfx	ip, r3, #12, #4
90022ac2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022ac4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
90022ac8:	f100 81fa 	bmi.w	90022ec0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
90022acc:	f102 3eff 	add.w	lr, r2, #4294967295
90022ad0:	4575      	cmp	r5, lr
90022ad2:	f280 81f5 	bge.w	90022ec0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
90022ad6:	2800      	cmp	r0, #0
90022ad8:	f2c0 81f2 	blt.w	90022ec0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
90022adc:	f103 3eff 	add.w	lr, r3, #4294967295
90022ae0:	4570      	cmp	r0, lr
90022ae2:	f280 81ed 	bge.w	90022ec0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
90022ae6:	b212      	sxth	r2, r2
90022ae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90022aea:	fa1f fe81 	uxth.w	lr, r1
90022aee:	fb00 5002 	mla	r0, r0, r2, r5
90022af2:	ea4f 150e 	mov.w	r5, lr, lsl #4
90022af6:	eb03 0a00 	add.w	sl, r3, r0
90022afa:	f813 9000 	ldrb.w	r9, [r3, r0]
90022afe:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
90022b02:	f89a 8001 	ldrb.w	r8, [sl, #1]
90022b06:	b29b      	uxth	r3, r3
90022b08:	f1bc 0f00 	cmp.w	ip, #0
90022b0c:	f000 81bb 	beq.w	90022e86 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
90022b10:	f81a 4002 	ldrb.w	r4, [sl, r2]
90022b14:	eb0a 0b02 	add.w	fp, sl, r2
90022b18:	fa1f fa8c 	uxth.w	sl, ip
90022b1c:	940d      	str	r4, [sp, #52]	; 0x34
90022b1e:	fb0a fe0e 	mul.w	lr, sl, lr
90022b22:	f89b 4001 	ldrb.w	r4, [fp, #1]
90022b26:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
90022b2a:	eba5 050e 	sub.w	r5, r5, lr
90022b2e:	940e      	str	r4, [sp, #56]	; 0x38
90022b30:	fa1f fa8a 	uxth.w	sl, sl
90022b34:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90022b36:	b2ad      	uxth	r5, r5
90022b38:	eba3 030a 	sub.w	r3, r3, sl
90022b3c:	fb08 f505 	mul.w	r5, r8, r5
90022b40:	b29b      	uxth	r3, r3
90022b42:	fb09 5303 	mla	r3, r9, r3, r5
90022b46:	fb0a 3304 	mla	r3, sl, r4, r3
90022b4a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90022b4c:	fb0e 3304 	mla	r3, lr, r4, r3
90022b50:	f3c3 2307 	ubfx	r3, r3, #8, #8
90022b54:	2b00      	cmp	r3, #0
90022b56:	f000 8111 	beq.w	90022d7c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90022b5a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90022b5c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90022b60:	eb04 0540 	add.w	r5, r4, r0, lsl #1
90022b64:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
90022b68:	f000 8192 	beq.w	90022e90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
90022b6c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
90022b70:	ea4f 0ae9 	mov.w	sl, r9, asr #3
90022b74:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90022b78:	fb0a fe0e 	mul.w	lr, sl, lr
90022b7c:	fb09 f000 	mul.w	r0, r9, r0
90022b80:	ea06 195e 	and.w	r9, r6, lr, lsr #5
90022b84:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
90022b88:	f100 0b20 	add.w	fp, r0, #32
90022b8c:	44ce      	add	lr, r9
90022b8e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
90022b92:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
90022b96:	ea4f 2919 	mov.w	r9, r9, lsr #8
90022b9a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90022b9e:	ea4e 0909 	orr.w	r9, lr, r9
90022ba2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
90022ba6:	8868      	ldrh	r0, [r5, #2]
90022ba8:	d019      	beq.n	90022bde <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
90022baa:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
90022bae:	ea4f 0ae8 	mov.w	sl, r8, asr #3
90022bb2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90022bb6:	fb0a fe0e 	mul.w	lr, sl, lr
90022bba:	fb08 f800 	mul.w	r8, r8, r0
90022bbe:	ea06 105e 	and.w	r0, r6, lr, lsr #5
90022bc2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
90022bc6:	f108 0b20 	add.w	fp, r8, #32
90022bca:	4486      	add	lr, r0
90022bcc:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
90022bd0:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
90022bd4:	0a00      	lsrs	r0, r0, #8
90022bd6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90022bda:	ea4e 0000 	orr.w	r0, lr, r0
90022bde:	ea4f 4e09 	mov.w	lr, r9, lsl #16
90022be2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90022be6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
90022bea:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90022bee:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
90022bf2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90022bf6:	ea4e 0909 	orr.w	r9, lr, r9
90022bfa:	ea4a 0000 	orr.w	r0, sl, r0
90022bfe:	f1bc 0f00 	cmp.w	ip, #0
90022c02:	f000 8147 	beq.w	90022e94 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
90022c06:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
90022c0a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90022c0c:	3a01      	subs	r2, #1
90022c0e:	2cff      	cmp	r4, #255	; 0xff
90022c10:	ea4f 0242 	mov.w	r2, r2, lsl #1
90022c14:	f102 0202 	add.w	r2, r2, #2
90022c18:	eb05 0e02 	add.w	lr, r5, r2
90022c1c:	5aaa      	ldrh	r2, [r5, r2]
90022c1e:	d018      	beq.n	90022c52 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
90022c20:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
90022c24:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90022c28:	ea4f 08e4 	mov.w	r8, r4, asr #3
90022c2c:	fb04 fa02 	mul.w	sl, r4, r2
90022c30:	fb08 f805 	mul.w	r8, r8, r5
90022c34:	f10a 0520 	add.w	r5, sl, #32
90022c38:	ea06 1258 	and.w	r2, r6, r8, lsr #5
90022c3c:	f608 0801 	addw	r8, r8, #2049	; 0x801
90022c40:	eb05 251a 	add.w	r5, r5, sl, lsr #8
90022c44:	4442      	add	r2, r8
90022c46:	0a2d      	lsrs	r5, r5, #8
90022c48:	ea06 1252 	and.w	r2, r6, r2, lsr #5
90022c4c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90022c50:	432a      	orrs	r2, r5
90022c52:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90022c54:	f8be 5002 	ldrh.w	r5, [lr, #2]
90022c58:	2cff      	cmp	r4, #255	; 0xff
90022c5a:	d01a      	beq.n	90022c92 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
90022c5c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
90022c60:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90022c64:	ea4f 08e4 	mov.w	r8, r4, asr #3
90022c68:	fb04 fa05 	mul.w	sl, r4, r5
90022c6c:	fb08 f80e 	mul.w	r8, r8, lr
90022c70:	f10a 0e20 	add.w	lr, sl, #32
90022c74:	ea06 1558 	and.w	r5, r6, r8, lsr #5
90022c78:	f608 0801 	addw	r8, r8, #2049	; 0x801
90022c7c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
90022c80:	4445      	add	r5, r8
90022c82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90022c86:	ea06 1555 	and.w	r5, r6, r5, lsr #5
90022c8a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
90022c8e:	ea45 050e 	orr.w	r5, r5, lr
90022c92:	fb1c fe01 	smulbb	lr, ip, r1
90022c96:	f1cc 0810 	rsb	r8, ip, #16
90022c9a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
90022c9e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90022ca2:	ea4f 0eee 	mov.w	lr, lr, asr #3
90022ca6:	eba8 0801 	sub.w	r8, r8, r1
90022caa:	ea4f 4b05 	mov.w	fp, r5, lsl #16
90022cae:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90022cb2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
90022cb6:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
90022cba:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
90022cbe:	ea4a 0202 	orr.w	r2, sl, r2
90022cc2:	4341      	muls	r1, r0
90022cc4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
90022cc8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90022ccc:	fb09 1108 	mla	r1, r9, r8, r1
90022cd0:	ea4b 0505 	orr.w	r5, fp, r5
90022cd4:	fb0c 1102 	mla	r1, ip, r2, r1
90022cd8:	fb0e 1e05 	mla	lr, lr, r5, r1
90022cdc:	ea4f 525e 	mov.w	r2, lr, lsr #21
90022ce0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
90022ce4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90022ce8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
90022cec:	ea42 0e0e 	orr.w	lr, r2, lr
90022cf0:	fa1f f28e 	uxth.w	r2, lr
90022cf4:	2bff      	cmp	r3, #255	; 0xff
90022cf6:	d103      	bne.n	90022d00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90022cf8:	9912      	ldr	r1, [sp, #72]	; 0x48
90022cfa:	29ff      	cmp	r1, #255	; 0xff
90022cfc:	f000 80de 	beq.w	90022ebc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
90022d00:	990a      	ldr	r1, [sp, #40]	; 0x28
90022d02:	1215      	asrs	r5, r2, #8
90022d04:	8838      	ldrh	r0, [r7, #0]
90022d06:	434b      	muls	r3, r1
90022d08:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90022d0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90022d0e:	f103 0c01 	add.w	ip, r3, #1
90022d12:	eb0c 2323 	add.w	r3, ip, r3, asr #8
90022d16:	ea6f 2323 	mvn.w	r3, r3, asr #8
90022d1a:	fa5f fc83 	uxtb.w	ip, r3
90022d1e:	1203      	asrs	r3, r0, #8
90022d20:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
90022d24:	fb13 f30c 	smulbb	r3, r3, ip
90022d28:	fb05 3501 	mla	r5, r5, r1, r3
90022d2c:	10c3      	asrs	r3, r0, #3
90022d2e:	10d1      	asrs	r1, r2, #3
90022d30:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
90022d34:	00d2      	lsls	r2, r2, #3
90022d36:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90022d3a:	b2ad      	uxth	r5, r5
90022d3c:	fb13 f30c 	smulbb	r3, r3, ip
90022d40:	b2d2      	uxtb	r2, r2
90022d42:	fb01 3104 	mla	r1, r1, r4, r3
90022d46:	00c3      	lsls	r3, r0, #3
90022d48:	b2db      	uxtb	r3, r3
90022d4a:	b289      	uxth	r1, r1
90022d4c:	fb13 f30c 	smulbb	r3, r3, ip
90022d50:	fb02 3304 	mla	r3, r2, r4, r3
90022d54:	b29a      	uxth	r2, r3
90022d56:	1c6b      	adds	r3, r5, #1
90022d58:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90022d5c:	1c53      	adds	r3, r2, #1
90022d5e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90022d62:	1c4a      	adds	r2, r1, #1
90022d64:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
90022d68:	eb02 2111 	add.w	r1, r2, r1, lsr #8
90022d6c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90022d70:	0949      	lsrs	r1, r1, #5
90022d72:	432b      	orrs	r3, r5
90022d74:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90022d78:	430b      	orrs	r3, r1
90022d7a:	803b      	strh	r3, [r7, #0]
90022d7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
90022d7e:	3702      	adds	r7, #2
90022d80:	9a23      	ldr	r2, [sp, #140]	; 0x8c
90022d82:	4413      	add	r3, r2
90022d84:	9a22      	ldr	r2, [sp, #136]	; 0x88
90022d86:	9321      	str	r3, [sp, #132]	; 0x84
90022d88:	9b24      	ldr	r3, [sp, #144]	; 0x90
90022d8a:	441a      	add	r2, r3
90022d8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90022d8e:	3b01      	subs	r3, #1
90022d90:	9222      	str	r2, [sp, #136]	; 0x88
90022d92:	9313      	str	r3, [sp, #76]	; 0x4c
90022d94:	e687      	b.n	90022aa6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
90022d96:	9b21      	ldr	r3, [sp, #132]	; 0x84
90022d98:	9e23      	ldr	r6, [sp, #140]	; 0x8c
90022d9a:	9c22      	ldr	r4, [sp, #136]	; 0x88
90022d9c:	4433      	add	r3, r6
90022d9e:	9321      	str	r3, [sp, #132]	; 0x84
90022da0:	9b24      	ldr	r3, [sp, #144]	; 0x90
90022da2:	441c      	add	r4, r3
90022da4:	9b08      	ldr	r3, [sp, #32]
90022da6:	3b01      	subs	r3, #1
90022da8:	9422      	str	r4, [sp, #136]	; 0x88
90022daa:	9308      	str	r3, [sp, #32]
90022dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
90022dae:	3302      	adds	r3, #2
90022db0:	9309      	str	r3, [sp, #36]	; 0x24
90022db2:	e656      	b.n	90022a62 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
90022db4:	d028      	beq.n	90022e08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
90022db6:	9b08      	ldr	r3, [sp, #32]
90022db8:	9823      	ldr	r0, [sp, #140]	; 0x8c
90022dba:	3b01      	subs	r3, #1
90022dbc:	9d21      	ldr	r5, [sp, #132]	; 0x84
90022dbe:	fb00 5003 	mla	r0, r0, r3, r5
90022dc2:	1400      	asrs	r0, r0, #16
90022dc4:	f53f ae6a 	bmi.w	90022a9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90022dc8:	3901      	subs	r1, #1
90022dca:	4288      	cmp	r0, r1
90022dcc:	f6bf ae66 	bge.w	90022a9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90022dd0:	9924      	ldr	r1, [sp, #144]	; 0x90
90022dd2:	9822      	ldr	r0, [sp, #136]	; 0x88
90022dd4:	fb01 0303 	mla	r3, r1, r3, r0
90022dd8:	141b      	asrs	r3, r3, #16
90022dda:	f53f ae5f 	bmi.w	90022a9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90022dde:	3a01      	subs	r2, #1
90022de0:	4293      	cmp	r3, r2
90022de2:	f6bf ae5b 	bge.w	90022a9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90022de6:	9b08      	ldr	r3, [sp, #32]
90022de8:	f64f 061f 	movw	r6, #63519	; 0xf81f
90022dec:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
90022df0:	9313      	str	r3, [sp, #76]	; 0x4c
90022df2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90022df4:	2b00      	cmp	r3, #0
90022df6:	f300 8082 	bgt.w	90022efe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
90022dfa:	9b08      	ldr	r3, [sp, #32]
90022dfc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
90022e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
90022e02:	eb03 0344 	add.w	r3, r3, r4, lsl #1
90022e06:	9309      	str	r3, [sp, #36]	; 0x24
90022e08:	9b11      	ldr	r3, [sp, #68]	; 0x44
90022e0a:	2b00      	cmp	r3, #0
90022e0c:	f340 81ef 	ble.w	900231ee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
90022e10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90022e14:	9b20      	ldr	r3, [sp, #128]	; 0x80
90022e16:	ee30 0a04 	vadd.f32	s0, s0, s8
90022e1a:	ee70 0aa4 	vadd.f32	s1, s1, s9
90022e1e:	eef0 6a62 	vmov.f32	s13, s5
90022e22:	eec7 7a00 	vdiv.f32	s15, s14, s0
90022e26:	ee31 1a05 	vadd.f32	s2, s2, s10
90022e2a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90022e2e:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
90022e32:	eef0 6a43 	vmov.f32	s13, s6
90022e36:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90022e3a:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
90022e3e:	ee20 7aa7 	vmul.f32	s14, s1, s15
90022e42:	ee61 7a27 	vmul.f32	s15, s2, s15
90022e46:	ee77 2a62 	vsub.f32	s5, s14, s5
90022e4a:	ee37 3ac3 	vsub.f32	s6, s15, s6
90022e4e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90022e52:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90022e56:	ee12 2a90 	vmov	r2, s5
90022e5a:	eef0 2a47 	vmov.f32	s5, s14
90022e5e:	fb92 f3f3 	sdiv	r3, r2, r3
90022e62:	ee13 2a10 	vmov	r2, s6
90022e66:	9323      	str	r3, [sp, #140]	; 0x8c
90022e68:	9b20      	ldr	r3, [sp, #128]	; 0x80
90022e6a:	eeb0 3a67 	vmov.f32	s6, s15
90022e6e:	fb92 f3f3 	sdiv	r3, r2, r3
90022e72:	9324      	str	r3, [sp, #144]	; 0x90
90022e74:	9b11      	ldr	r3, [sp, #68]	; 0x44
90022e76:	9a14      	ldr	r2, [sp, #80]	; 0x50
90022e78:	3b01      	subs	r3, #1
90022e7a:	9311      	str	r3, [sp, #68]	; 0x44
90022e7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
90022e7e:	bf08      	it	eq
90022e80:	4613      	moveq	r3, r2
90022e82:	9308      	str	r3, [sp, #32]
90022e84:	e5df      	b.n	90022a46 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90022e86:	fb08 f505 	mul.w	r5, r8, r5
90022e8a:	fb09 5303 	mla	r3, r9, r3, r5
90022e8e:	e65f      	b.n	90022b50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
90022e90:	4681      	mov	r9, r0
90022e92:	e686      	b.n	90022ba2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
90022e94:	f1c1 0210 	rsb	r2, r1, #16
90022e98:	4341      	muls	r1, r0
90022e9a:	fb09 1902 	mla	r9, r9, r2, r1
90022e9e:	ea4f 0949 	mov.w	r9, r9, lsl #1
90022ea2:	ea4f 5259 	mov.w	r2, r9, lsr #21
90022ea6:	ea4f 1959 	mov.w	r9, r9, lsr #5
90022eaa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90022eae:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90022eb2:	ea42 0909 	orr.w	r9, r2, r9
90022eb6:	fa1f f289 	uxth.w	r2, r9
90022eba:	e71b      	b.n	90022cf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
90022ebc:	803a      	strh	r2, [r7, #0]
90022ebe:	e75d      	b.n	90022d7c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90022ec0:	f115 0e01 	adds.w	lr, r5, #1
90022ec4:	f53f af5a 	bmi.w	90022d7c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90022ec8:	4572      	cmp	r2, lr
90022eca:	f6ff af57 	blt.w	90022d7c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90022ece:	f110 0e01 	adds.w	lr, r0, #1
90022ed2:	f53f af53 	bmi.w	90022d7c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90022ed6:	4573      	cmp	r3, lr
90022ed8:	f6ff af50 	blt.w	90022d7c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90022edc:	9c12      	ldr	r4, [sp, #72]	; 0x48
90022ede:	b21b      	sxth	r3, r3
90022ee0:	b212      	sxth	r2, r2
90022ee2:	9502      	str	r5, [sp, #8]
90022ee4:	9301      	str	r3, [sp, #4]
90022ee6:	9200      	str	r2, [sp, #0]
90022ee8:	e9cd 0103 	strd	r0, r1, [sp, #12]
90022eec:	e9cd c405 	strd	ip, r4, [sp, #20]
90022ef0:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
90022ef4:	4639      	mov	r1, r7
90022ef6:	9815      	ldr	r0, [sp, #84]	; 0x54
90022ef8:	f7ff fc02 	bl	90022700 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
90022efc:	e73e      	b.n	90022d7c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90022efe:	9b21      	ldr	r3, [sp, #132]	; 0x84
90022f00:	f3c3 3203 	ubfx	r2, r3, #12, #4
90022f04:	9b22      	ldr	r3, [sp, #136]	; 0x88
90022f06:	f3c3 3503 	ubfx	r5, r3, #12, #4
90022f0a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022f0c:	fa1f fc82 	uxth.w	ip, r2
90022f10:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90022f14:	9b22      	ldr	r3, [sp, #136]	; 0x88
90022f16:	ea4f 100c 	mov.w	r0, ip, lsl #4
90022f1a:	141f      	asrs	r7, r3, #16
90022f1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
90022f1e:	141b      	asrs	r3, r3, #16
90022f20:	fb01 3707 	mla	r7, r1, r7, r3
90022f24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90022f26:	eb03 0a07 	add.w	sl, r3, r7
90022f2a:	f813 9007 	ldrb.w	r9, [r3, r7]
90022f2e:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
90022f32:	f89a 8001 	ldrb.w	r8, [sl, #1]
90022f36:	b29b      	uxth	r3, r3
90022f38:	2d00      	cmp	r5, #0
90022f3a:	f000 813d 	beq.w	900231b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
90022f3e:	f81a 4001 	ldrb.w	r4, [sl, r1]
90022f42:	eb0a 0b01 	add.w	fp, sl, r1
90022f46:	fa1f fa85 	uxth.w	sl, r5
90022f4a:	940f      	str	r4, [sp, #60]	; 0x3c
90022f4c:	fb0a fc0c 	mul.w	ip, sl, ip
90022f50:	f89b 4001 	ldrb.w	r4, [fp, #1]
90022f54:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
90022f58:	eba0 000c 	sub.w	r0, r0, ip
90022f5c:	9410      	str	r4, [sp, #64]	; 0x40
90022f5e:	fa1f fa8a 	uxth.w	sl, sl
90022f62:	b280      	uxth	r0, r0
90022f64:	eba3 030a 	sub.w	r3, r3, sl
90022f68:	fb08 f000 	mul.w	r0, r8, r0
90022f6c:	b29b      	uxth	r3, r3
90022f6e:	fb09 0303 	mla	r3, r9, r3, r0
90022f72:	980f      	ldr	r0, [sp, #60]	; 0x3c
90022f74:	fb0a 3300 	mla	r3, sl, r0, r3
90022f78:	fb0c 3304 	mla	r3, ip, r4, r3
90022f7c:	f3c3 2307 	ubfx	r3, r3, #8, #8
90022f80:	2b00      	cmp	r3, #0
90022f82:	f000 810b 	beq.w	9002319c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
90022f86:	980b      	ldr	r0, [sp, #44]	; 0x2c
90022f88:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90022f8c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90022f8e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
90022f92:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
90022f96:	f000 8114 	beq.w	900231c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
90022f9a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
90022f9e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
90022fa2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90022fa6:	fb0a fc0c 	mul.w	ip, sl, ip
90022faa:	fb09 f707 	mul.w	r7, r9, r7
90022fae:	ea06 195c 	and.w	r9, r6, ip, lsr #5
90022fb2:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
90022fb6:	f107 0b20 	add.w	fp, r7, #32
90022fba:	44cc      	add	ip, r9
90022fbc:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
90022fc0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
90022fc4:	ea4f 2919 	mov.w	r9, r9, lsr #8
90022fc8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90022fcc:	ea4c 0909 	orr.w	r9, ip, r9
90022fd0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
90022fd4:	8847      	ldrh	r7, [r0, #2]
90022fd6:	d019      	beq.n	9002300c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
90022fd8:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
90022fdc:	ea4f 0ae8 	mov.w	sl, r8, asr #3
90022fe0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90022fe4:	fb0a fc0c 	mul.w	ip, sl, ip
90022fe8:	fb08 f807 	mul.w	r8, r8, r7
90022fec:	ea06 175c 	and.w	r7, r6, ip, lsr #5
90022ff0:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
90022ff4:	f108 0b20 	add.w	fp, r8, #32
90022ff8:	44bc      	add	ip, r7
90022ffa:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
90022ffe:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
90023002:	0a3f      	lsrs	r7, r7, #8
90023004:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90023008:	ea4c 0707 	orr.w	r7, ip, r7
9002300c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
90023010:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90023014:	ea4f 4a07 	mov.w	sl, r7, lsl #16
90023018:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9002301c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
90023020:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90023024:	ea4c 0909 	orr.w	r9, ip, r9
90023028:	ea4a 0707 	orr.w	r7, sl, r7
9002302c:	2d00      	cmp	r5, #0
9002302e:	f000 80ca 	beq.w	900231c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
90023032:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
90023036:	3901      	subs	r1, #1
90023038:	0049      	lsls	r1, r1, #1
9002303a:	3102      	adds	r1, #2
9002303c:	eb00 0c01 	add.w	ip, r0, r1
90023040:	5a41      	ldrh	r1, [r0, r1]
90023042:	980f      	ldr	r0, [sp, #60]	; 0x3c
90023044:	28ff      	cmp	r0, #255	; 0xff
90023046:	d019      	beq.n	9002307c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
90023048:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
9002304c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9002304e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90023052:	ea4f 08e4 	mov.w	r8, r4, asr #3
90023056:	fb04 fa01 	mul.w	sl, r4, r1
9002305a:	fb08 f800 	mul.w	r8, r8, r0
9002305e:	f10a 0020 	add.w	r0, sl, #32
90023062:	ea06 1158 	and.w	r1, r6, r8, lsr #5
90023066:	f608 0801 	addw	r8, r8, #2049	; 0x801
9002306a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
9002306e:	4441      	add	r1, r8
90023070:	0a00      	lsrs	r0, r0, #8
90023072:	ea06 1151 	and.w	r1, r6, r1, lsr #5
90023076:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002307a:	4301      	orrs	r1, r0
9002307c:	9c10      	ldr	r4, [sp, #64]	; 0x40
9002307e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
90023082:	2cff      	cmp	r4, #255	; 0xff
90023084:	d01a      	beq.n	900230bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
90023086:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
9002308a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002308e:	ea4f 08e4 	mov.w	r8, r4, asr #3
90023092:	fb04 fa00 	mul.w	sl, r4, r0
90023096:	fb08 f80c 	mul.w	r8, r8, ip
9002309a:	f10a 0c20 	add.w	ip, sl, #32
9002309e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
900230a2:	f608 0801 	addw	r8, r8, #2049	; 0x801
900230a6:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
900230aa:	4440      	add	r0, r8
900230ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900230b0:	ea06 1050 	and.w	r0, r6, r0, lsr #5
900230b4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
900230b8:	ea40 000c 	orr.w	r0, r0, ip
900230bc:	fb15 fc02 	smulbb	ip, r5, r2
900230c0:	f1c5 0810 	rsb	r8, r5, #16
900230c4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
900230c8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
900230cc:	ea4f 0cec 	mov.w	ip, ip, asr #3
900230d0:	eba8 0802 	sub.w	r8, r8, r2
900230d4:	ea4f 4b00 	mov.w	fp, r0, lsl #16
900230d8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
900230dc:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
900230e0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
900230e4:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
900230e8:	ea4a 0101 	orr.w	r1, sl, r1
900230ec:	437a      	muls	r2, r7
900230ee:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
900230f2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
900230f6:	fb09 2208 	mla	r2, r9, r8, r2
900230fa:	ea4b 0000 	orr.w	r0, fp, r0
900230fe:	fb05 2201 	mla	r2, r5, r1, r2
90023102:	fb0c 2200 	mla	r2, ip, r0, r2
90023106:	0d57      	lsrs	r7, r2, #21
90023108:	0952      	lsrs	r2, r2, #5
9002310a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9002310e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90023112:	433a      	orrs	r2, r7
90023114:	2bff      	cmp	r3, #255	; 0xff
90023116:	b292      	uxth	r2, r2
90023118:	d102      	bne.n	90023120 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
9002311a:	9912      	ldr	r1, [sp, #72]	; 0x48
9002311c:	29ff      	cmp	r1, #255	; 0xff
9002311e:	d063      	beq.n	900231e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
90023120:	980a      	ldr	r0, [sp, #40]	; 0x28
90023122:	1215      	asrs	r5, r2, #8
90023124:	f8be 1000 	ldrh.w	r1, [lr]
90023128:	4343      	muls	r3, r0
9002312a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9002312c:	10cf      	asrs	r7, r1, #3
9002312e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90023132:	1c58      	adds	r0, r3, #1
90023134:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90023138:	eb00 2323 	add.w	r3, r0, r3, asr #8
9002313c:	1208      	asrs	r0, r1, #8
9002313e:	ea6f 2323 	mvn.w	r3, r3, asr #8
90023142:	00c9      	lsls	r1, r1, #3
90023144:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90023148:	b2db      	uxtb	r3, r3
9002314a:	b2c9      	uxtb	r1, r1
9002314c:	fb10 f003 	smulbb	r0, r0, r3
90023150:	fb11 f103 	smulbb	r1, r1, r3
90023154:	fb05 0504 	mla	r5, r5, r4, r0
90023158:	10d0      	asrs	r0, r2, #3
9002315a:	fb17 f703 	smulbb	r7, r7, r3
9002315e:	00d2      	lsls	r2, r2, #3
90023160:	b2ad      	uxth	r5, r5
90023162:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90023166:	b2d2      	uxtb	r2, r2
90023168:	fb00 7004 	mla	r0, r0, r4, r7
9002316c:	1c6b      	adds	r3, r5, #1
9002316e:	fb02 1204 	mla	r2, r2, r4, r1
90023172:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90023176:	b292      	uxth	r2, r2
90023178:	b280      	uxth	r0, r0
9002317a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9002317e:	1c57      	adds	r7, r2, #1
90023180:	eb07 2712 	add.w	r7, r7, r2, lsr #8
90023184:	f3c7 27c4 	ubfx	r7, r7, #11, #5
90023188:	433d      	orrs	r5, r7
9002318a:	1c47      	adds	r7, r0, #1
9002318c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
90023190:	097f      	lsrs	r7, r7, #5
90023192:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90023196:	433d      	orrs	r5, r7
90023198:	f8ae 5000 	strh.w	r5, [lr]
9002319c:	9b21      	ldr	r3, [sp, #132]	; 0x84
9002319e:	f10e 0e02 	add.w	lr, lr, #2
900231a2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
900231a4:	4413      	add	r3, r2
900231a6:	9a22      	ldr	r2, [sp, #136]	; 0x88
900231a8:	9321      	str	r3, [sp, #132]	; 0x84
900231aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
900231ac:	441a      	add	r2, r3
900231ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
900231b0:	3b01      	subs	r3, #1
900231b2:	9222      	str	r2, [sp, #136]	; 0x88
900231b4:	9313      	str	r3, [sp, #76]	; 0x4c
900231b6:	e61c      	b.n	90022df2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
900231b8:	fb08 f000 	mul.w	r0, r8, r0
900231bc:	fb09 0303 	mla	r3, r9, r3, r0
900231c0:	e6dc      	b.n	90022f7c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
900231c2:	46b9      	mov	r9, r7
900231c4:	e704      	b.n	90022fd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
900231c6:	f1c2 0110 	rsb	r1, r2, #16
900231ca:	437a      	muls	r2, r7
900231cc:	fb09 2901 	mla	r9, r9, r1, r2
900231d0:	ea4f 0949 	mov.w	r9, r9, lsl #1
900231d4:	ea4f 5059 	mov.w	r0, r9, lsr #21
900231d8:	ea4f 1259 	mov.w	r2, r9, lsr #5
900231dc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900231e0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900231e4:	4302      	orrs	r2, r0
900231e6:	e795      	b.n	90023114 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
900231e8:	f8ae 2000 	strh.w	r2, [lr]
900231ec:	e7d6      	b.n	9002319c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
900231ee:	b017      	add	sp, #92	; 0x5c
900231f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900231f4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
900231f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900231f8:	b085      	sub	sp, #20
900231fa:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
900231fe:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
90023202:	2800      	cmp	r0, #0
90023204:	9103      	str	r1, [sp, #12]
90023206:	fb00 7406 	mla	r4, r0, r6, r7
9002320a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
9002320e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
90023212:	eb03 0544 	add.w	r5, r3, r4, lsl #1
90023216:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
9002321a:	eb02 0904 	add.w	r9, r2, r4
9002321e:	9501      	str	r5, [sp, #4]
90023220:	f2c0 8141 	blt.w	900234a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
90023224:	4583      	cmp	fp, r0
90023226:	f340 813e 	ble.w	900234a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
9002322a:	2f00      	cmp	r7, #0
9002322c:	f2c0 8137 	blt.w	9002349e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
90023230:	42be      	cmp	r6, r7
90023232:	f340 8134 	ble.w	9002349e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
90023236:	f812 c004 	ldrb.w	ip, [r2, r4]
9002323a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
9002323e:	f64f 041f 	movw	r4, #63519	; 0xf81f
90023242:	ea4f 02ec 	mov.w	r2, ip, asr #3
90023246:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
9002324a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002324e:	4355      	muls	r5, r2
90023250:	fb0c f203 	mul.w	r2, ip, r3
90023254:	ea04 1355 	and.w	r3, r4, r5, lsr #5
90023258:	f605 0501 	addw	r5, r5, #2049	; 0x801
9002325c:	441d      	add	r5, r3
9002325e:	f102 0320 	add.w	r3, r2, #32
90023262:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90023266:	ea04 1455 	and.w	r4, r4, r5, lsr #5
9002326a:	0a1b      	lsrs	r3, r3, #8
9002326c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90023270:	431c      	orrs	r4, r3
90023272:	1c7b      	adds	r3, r7, #1
90023274:	f100 811c 	bmi.w	900234b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
90023278:	429e      	cmp	r6, r3
9002327a:	f340 8119 	ble.w	900234b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
9002327e:	2900      	cmp	r1, #0
90023280:	f000 8119 	beq.w	900234b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
90023284:	9a01      	ldr	r2, [sp, #4]
90023286:	f899 3001 	ldrb.w	r3, [r9, #1]
9002328a:	8855      	ldrh	r5, [r2, #2]
9002328c:	ea4f 08e3 	mov.w	r8, r3, asr #3
90023290:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
90023294:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90023298:	fb08 f802 	mul.w	r8, r8, r2
9002329c:	f64f 021f 	movw	r2, #63519	; 0xf81f
900232a0:	435d      	muls	r5, r3
900232a2:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
900232a6:	f608 0801 	addw	r8, r8, #2049	; 0x801
900232aa:	44d0      	add	r8, sl
900232ac:	f105 0a20 	add.w	sl, r5, #32
900232b0:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
900232b4:	ea02 1258 	and.w	r2, r2, r8, lsr #5
900232b8:	0a2d      	lsrs	r5, r5, #8
900232ba:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
900232be:	432a      	orrs	r2, r5
900232c0:	3001      	adds	r0, #1
900232c2:	f100 80fe 	bmi.w	900234c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
900232c6:	4583      	cmp	fp, r0
900232c8:	f340 80fb 	ble.w	900234c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
900232cc:	f1be 0f00 	cmp.w	lr, #0
900232d0:	f000 80fc 	beq.w	900234cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
900232d4:	2f00      	cmp	r7, #0
900232d6:	f2c0 80f1 	blt.w	900234bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
900232da:	42be      	cmp	r6, r7
900232dc:	f340 80ee 	ble.w	900234bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
900232e0:	9801      	ldr	r0, [sp, #4]
900232e2:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
900232e6:	f819 5006 	ldrb.w	r5, [r9, r6]
900232ea:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
900232ee:	ea4f 0ae5 	mov.w	sl, r5, asr #3
900232f2:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
900232f6:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
900232fa:	fb0a fa00 	mul.w	sl, sl, r0
900232fe:	fb05 f808 	mul.w	r8, r5, r8
90023302:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
90023306:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
9002330a:	4482      	add	sl, r0
9002330c:	f108 0020 	add.w	r0, r8, #32
90023310:	eb00 2018 	add.w	r0, r0, r8, lsr #8
90023314:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
90023318:	0a00      	lsrs	r0, r0, #8
9002331a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002331e:	ea4b 0b00 	orr.w	fp, fp, r0
90023322:	3701      	adds	r7, #1
90023324:	f100 80d7 	bmi.w	900234d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
90023328:	42be      	cmp	r6, r7
9002332a:	f340 80d4 	ble.w	900234d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
9002332e:	2900      	cmp	r1, #0
90023330:	f000 80d4 	beq.w	900234dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
90023334:	3601      	adds	r6, #1
90023336:	9801      	ldr	r0, [sp, #4]
90023338:	f819 7006 	ldrb.w	r7, [r9, r6]
9002333c:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
90023340:	ea4f 09e7 	mov.w	r9, r7, asr #3
90023344:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
90023348:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002334c:	fb09 f906 	mul.w	r9, r9, r6
90023350:	fb07 f800 	mul.w	r8, r7, r0
90023354:	f64f 001f 	movw	r0, #63519	; 0xf81f
90023358:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
9002335c:	f609 0901 	addw	r9, r9, #2049	; 0x801
90023360:	44d1      	add	r9, sl
90023362:	ea00 1659 	and.w	r6, r0, r9, lsr #5
90023366:	f108 0020 	add.w	r0, r8, #32
9002336a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9002336e:	0a00      	lsrs	r0, r0, #8
90023370:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023374:	4330      	orrs	r0, r6
90023376:	b28e      	uxth	r6, r1
90023378:	fa1f f98e 	uxth.w	r9, lr
9002337c:	ea4f 4a04 	mov.w	sl, r4, lsl #16
90023380:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
90023384:	fb06 f809 	mul.w	r8, r6, r9
90023388:	0136      	lsls	r6, r6, #4
9002338a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9002338e:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
90023392:	9601      	str	r6, [sp, #4]
90023394:	ea4a 0404 	orr.w	r4, sl, r4
90023398:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9002339c:	fa1f f689 	uxth.w	r6, r9
900233a0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900233a4:	fb11 f90e 	smulbb	r9, r1, lr
900233a8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
900233ac:	9602      	str	r6, [sp, #8]
900233ae:	4626      	mov	r6, r4
900233b0:	f3c9 09c7 	ubfx	r9, r9, #3, #8
900233b4:	f1ce 0410 	rsb	r4, lr, #16
900233b8:	ea4a 0202 	orr.w	r2, sl, r2
900233bc:	ea4f 4a00 	mov.w	sl, r0, lsl #16
900233c0:	1a64      	subs	r4, r4, r1
900233c2:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
900233c6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
900233ca:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
900233ce:	434a      	muls	r2, r1
900233d0:	eb09 0444 	add.w	r4, r9, r4, lsl #1
900233d4:	ea4a 0000 	orr.w	r0, sl, r0
900233d8:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
900233dc:	fb04 2406 	mla	r4, r4, r6, r2
900233e0:	9903      	ldr	r1, [sp, #12]
900233e2:	fb09 4200 	mla	r2, r9, r0, r4
900233e6:	ea4f 440b 	mov.w	r4, fp, lsl #16
900233ea:	9801      	ldr	r0, [sp, #4]
900233ec:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
900233f0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
900233f4:	8809      	ldrh	r1, [r1, #0]
900233f6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
900233fa:	ea44 0b0b 	orr.w	fp, r4, fp
900233fe:	9c02      	ldr	r4, [sp, #8]
90023400:	1b00      	subs	r0, r0, r4
90023402:	9c01      	ldr	r4, [sp, #4]
90023404:	fb0e 2e0b 	mla	lr, lr, fp, r2
90023408:	eba4 0608 	sub.w	r6, r4, r8
9002340c:	b280      	uxth	r0, r0
9002340e:	ea4f 525e 	mov.w	r2, lr, lsr #21
90023412:	b2b6      	uxth	r6, r6
90023414:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
90023418:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9002341c:	4373      	muls	r3, r6
9002341e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
90023422:	fb0c 3300 	mla	r3, ip, r0, r3
90023426:	9802      	ldr	r0, [sp, #8]
90023428:	ea42 0e0e 	orr.w	lr, r2, lr
9002342c:	fb00 3505 	mla	r5, r0, r5, r3
90023430:	120b      	asrs	r3, r1, #8
90023432:	10c8      	asrs	r0, r1, #3
90023434:	fb08 5707 	mla	r7, r8, r7, r5
90023438:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
9002343c:	00c9      	lsls	r1, r1, #3
9002343e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90023442:	ea6f 2727 	mvn.w	r7, r7, asr #8
90023446:	fa1f f28e 	uxth.w	r2, lr
9002344a:	b2c9      	uxtb	r1, r1
9002344c:	b2ff      	uxtb	r7, r7
9002344e:	437b      	muls	r3, r7
90023450:	4378      	muls	r0, r7
90023452:	434f      	muls	r7, r1
90023454:	1c59      	adds	r1, r3, #1
90023456:	eb01 2113 	add.w	r1, r1, r3, lsr #8
9002345a:	1213      	asrs	r3, r2, #8
9002345c:	f023 0307 	bic.w	r3, r3, #7
90023460:	eb03 2311 	add.w	r3, r3, r1, lsr #8
90023464:	1c41      	adds	r1, r0, #1
90023466:	eb01 2010 	add.w	r0, r1, r0, lsr #8
9002346a:	10d1      	asrs	r1, r2, #3
9002346c:	021b      	lsls	r3, r3, #8
9002346e:	f021 0103 	bic.w	r1, r1, #3
90023472:	00d2      	lsls	r2, r2, #3
90023474:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
90023478:	eb01 2110 	add.w	r1, r1, r0, lsr #8
9002347c:	00c9      	lsls	r1, r1, #3
9002347e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90023482:	430b      	orrs	r3, r1
90023484:	1c79      	adds	r1, r7, #1
90023486:	eb01 2717 	add.w	r7, r1, r7, lsr #8
9002348a:	eb02 2217 	add.w	r2, r2, r7, lsr #8
9002348e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90023492:	431a      	orrs	r2, r3
90023494:	9b03      	ldr	r3, [sp, #12]
90023496:	801a      	strh	r2, [r3, #0]
90023498:	b005      	add	sp, #20
9002349a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9002349e:	f04f 0c00 	mov.w	ip, #0
900234a2:	4664      	mov	r4, ip
900234a4:	e6e5      	b.n	90023272 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
900234a6:	2300      	movs	r3, #0
900234a8:	469c      	mov	ip, r3
900234aa:	461a      	mov	r2, r3
900234ac:	461c      	mov	r4, r3
900234ae:	e707      	b.n	900232c0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
900234b0:	2300      	movs	r3, #0
900234b2:	461a      	mov	r2, r3
900234b4:	e704      	b.n	900232c0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
900234b6:	460b      	mov	r3, r1
900234b8:	460a      	mov	r2, r1
900234ba:	e701      	b.n	900232c0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
900234bc:	2500      	movs	r5, #0
900234be:	46ab      	mov	fp, r5
900234c0:	e72f      	b.n	90023322 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
900234c2:	2700      	movs	r7, #0
900234c4:	463d      	mov	r5, r7
900234c6:	4638      	mov	r0, r7
900234c8:	46bb      	mov	fp, r7
900234ca:	e754      	b.n	90023376 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
900234cc:	4677      	mov	r7, lr
900234ce:	4675      	mov	r5, lr
900234d0:	4670      	mov	r0, lr
900234d2:	46f3      	mov	fp, lr
900234d4:	e74f      	b.n	90023376 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
900234d6:	2700      	movs	r7, #0
900234d8:	4638      	mov	r0, r7
900234da:	e74c      	b.n	90023376 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
900234dc:	460f      	mov	r7, r1
900234de:	4608      	mov	r0, r1
900234e0:	e749      	b.n	90023376 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

900234e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900234e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900234e8:	b093      	sub	sp, #76	; 0x4c
900234ea:	9210      	str	r2, [sp, #64]	; 0x40
900234ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
900234ee:	9011      	str	r0, [sp, #68]	; 0x44
900234f0:	910e      	str	r1, [sp, #56]	; 0x38
900234f2:	6850      	ldr	r0, [r2, #4]
900234f4:	9306      	str	r3, [sp, #24]
900234f6:	6812      	ldr	r2, [r2, #0]
900234f8:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
900234fc:	fb00 1303 	mla	r3, r0, r3, r1
90023500:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90023504:	9307      	str	r3, [sp, #28]
90023506:	9b24      	ldr	r3, [sp, #144]	; 0x90
90023508:	681b      	ldr	r3, [r3, #0]
9002350a:	9308      	str	r3, [sp, #32]
9002350c:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002350e:	685b      	ldr	r3, [r3, #4]
90023510:	9309      	str	r3, [sp, #36]	; 0x24
90023512:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90023514:	2b00      	cmp	r3, #0
90023516:	dc03      	bgt.n	90023520 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
90023518:	9b10      	ldr	r3, [sp, #64]	; 0x40
9002351a:	2b00      	cmp	r3, #0
9002351c:	f340 83b6 	ble.w	90023c8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
90023520:	9b24      	ldr	r3, [sp, #144]	; 0x90
90023522:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90023526:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9002352a:	1e48      	subs	r0, r1, #1
9002352c:	1e55      	subs	r5, r2, #1
9002352e:	9b06      	ldr	r3, [sp, #24]
90023530:	2b00      	cmp	r3, #0
90023532:	f340 8165 	ble.w	90023800 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
90023536:	9e1d      	ldr	r6, [sp, #116]	; 0x74
90023538:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9002353a:	1436      	asrs	r6, r6, #16
9002353c:	ea4f 4323 	mov.w	r3, r3, asr #16
90023540:	d406      	bmi.n	90023550 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90023542:	4286      	cmp	r6, r0
90023544:	da04      	bge.n	90023550 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90023546:	2b00      	cmp	r3, #0
90023548:	db02      	blt.n	90023550 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9002354a:	42ab      	cmp	r3, r5
9002354c:	f2c0 8159 	blt.w	90023802 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
90023550:	3601      	adds	r6, #1
90023552:	f100 8146 	bmi.w	900237e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
90023556:	42b1      	cmp	r1, r6
90023558:	f2c0 8143 	blt.w	900237e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9002355c:	3301      	adds	r3, #1
9002355e:	f100 8140 	bmi.w	900237e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
90023562:	429a      	cmp	r2, r3
90023564:	f2c0 813d 	blt.w	900237e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
90023568:	9b06      	ldr	r3, [sp, #24]
9002356a:	f64f 061f 	movw	r6, #63519	; 0xf81f
9002356e:	9f07      	ldr	r7, [sp, #28]
90023570:	930f      	str	r3, [sp, #60]	; 0x3c
90023572:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90023574:	2b00      	cmp	r3, #0
90023576:	f340 8166 	ble.w	90023846 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
9002357a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9002357c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
9002357e:	1418      	asrs	r0, r3, #16
90023580:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90023582:	142d      	asrs	r5, r5, #16
90023584:	f3c3 3103 	ubfx	r1, r3, #12, #4
90023588:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9002358a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
9002358e:	9b24      	ldr	r3, [sp, #144]	; 0x90
90023590:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
90023594:	f100 81f0 	bmi.w	90023978 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
90023598:	f102 3eff 	add.w	lr, r2, #4294967295
9002359c:	4575      	cmp	r5, lr
9002359e:	f280 81eb 	bge.w	90023978 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
900235a2:	2800      	cmp	r0, #0
900235a4:	f2c0 81e8 	blt.w	90023978 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
900235a8:	f103 3eff 	add.w	lr, r3, #4294967295
900235ac:	4570      	cmp	r0, lr
900235ae:	f280 81e3 	bge.w	90023978 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
900235b2:	b212      	sxth	r2, r2
900235b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
900235b6:	fa1f fe81 	uxth.w	lr, r1
900235ba:	fb00 5002 	mla	r0, r0, r2, r5
900235be:	ea4f 150e 	mov.w	r5, lr, lsl #4
900235c2:	eb03 0a00 	add.w	sl, r3, r0
900235c6:	f813 9000 	ldrb.w	r9, [r3, r0]
900235ca:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
900235ce:	f89a 8001 	ldrb.w	r8, [sl, #1]
900235d2:	b29b      	uxth	r3, r3
900235d4:	f1bc 0f00 	cmp.w	ip, #0
900235d8:	f000 817b 	beq.w	900238d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
900235dc:	f81a 4002 	ldrb.w	r4, [sl, r2]
900235e0:	eb0a 0b02 	add.w	fp, sl, r2
900235e4:	fa1f fa8c 	uxth.w	sl, ip
900235e8:	940a      	str	r4, [sp, #40]	; 0x28
900235ea:	fb0a fe0e 	mul.w	lr, sl, lr
900235ee:	f89b 4001 	ldrb.w	r4, [fp, #1]
900235f2:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
900235f6:	eba5 050e 	sub.w	r5, r5, lr
900235fa:	940b      	str	r4, [sp, #44]	; 0x2c
900235fc:	fa1f fa8a 	uxth.w	sl, sl
90023600:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90023602:	b2ad      	uxth	r5, r5
90023604:	eba3 030a 	sub.w	r3, r3, sl
90023608:	fb08 f505 	mul.w	r5, r8, r5
9002360c:	b29b      	uxth	r3, r3
9002360e:	fb09 5303 	mla	r3, r9, r3, r5
90023612:	fb0a 3304 	mla	r3, sl, r4, r3
90023616:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90023618:	fb0e 3304 	mla	r3, lr, r4, r3
9002361c:	f3c3 2307 	ubfx	r3, r3, #8, #8
90023620:	2b00      	cmp	r3, #0
90023622:	f000 80d1 	beq.w	900237c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90023626:	9c08      	ldr	r4, [sp, #32]
90023628:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9002362c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
90023630:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
90023634:	f000 8152 	beq.w	900238dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
90023638:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9002363c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
90023640:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023644:	fb0a fe0e 	mul.w	lr, sl, lr
90023648:	fb09 f000 	mul.w	r0, r9, r0
9002364c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
90023650:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
90023654:	f100 0b20 	add.w	fp, r0, #32
90023658:	44ce      	add	lr, r9
9002365a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
9002365e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
90023662:	ea4f 2919 	mov.w	r9, r9, lsr #8
90023666:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9002366a:	ea4e 0909 	orr.w	r9, lr, r9
9002366e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
90023672:	8868      	ldrh	r0, [r5, #2]
90023674:	d019      	beq.n	900236aa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
90023676:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9002367a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9002367e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023682:	fb0a fe0e 	mul.w	lr, sl, lr
90023686:	fb08 f800 	mul.w	r8, r8, r0
9002368a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
9002368e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
90023692:	f108 0b20 	add.w	fp, r8, #32
90023696:	4486      	add	lr, r0
90023698:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
9002369c:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
900236a0:	0a00      	lsrs	r0, r0, #8
900236a2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900236a6:	ea4e 0000 	orr.w	r0, lr, r0
900236aa:	ea4f 4e09 	mov.w	lr, r9, lsl #16
900236ae:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
900236b2:	ea4f 4a00 	mov.w	sl, r0, lsl #16
900236b6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
900236ba:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
900236be:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
900236c2:	ea4e 0909 	orr.w	r9, lr, r9
900236c6:	ea4a 0000 	orr.w	r0, sl, r0
900236ca:	f1bc 0f00 	cmp.w	ip, #0
900236ce:	f000 8107 	beq.w	900238e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
900236d2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
900236d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
900236d8:	3a01      	subs	r2, #1
900236da:	2cff      	cmp	r4, #255	; 0xff
900236dc:	ea4f 0242 	mov.w	r2, r2, lsl #1
900236e0:	f102 0202 	add.w	r2, r2, #2
900236e4:	eb05 0e02 	add.w	lr, r5, r2
900236e8:	5aaa      	ldrh	r2, [r5, r2]
900236ea:	d018      	beq.n	9002371e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
900236ec:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
900236f0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900236f4:	ea4f 08e4 	mov.w	r8, r4, asr #3
900236f8:	fb04 fa02 	mul.w	sl, r4, r2
900236fc:	fb08 f805 	mul.w	r8, r8, r5
90023700:	f10a 0520 	add.w	r5, sl, #32
90023704:	ea06 1258 	and.w	r2, r6, r8, lsr #5
90023708:	f608 0801 	addw	r8, r8, #2049	; 0x801
9002370c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
90023710:	4442      	add	r2, r8
90023712:	0a2d      	lsrs	r5, r5, #8
90023714:	ea06 1252 	and.w	r2, r6, r2, lsr #5
90023718:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9002371c:	432a      	orrs	r2, r5
9002371e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90023720:	f8be 5002 	ldrh.w	r5, [lr, #2]
90023724:	2cff      	cmp	r4, #255	; 0xff
90023726:	d01a      	beq.n	9002375e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
90023728:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
9002372c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90023730:	ea4f 08e4 	mov.w	r8, r4, asr #3
90023734:	fb04 fa05 	mul.w	sl, r4, r5
90023738:	fb08 f80e 	mul.w	r8, r8, lr
9002373c:	f10a 0e20 	add.w	lr, sl, #32
90023740:	ea06 1558 	and.w	r5, r6, r8, lsr #5
90023744:	f608 0801 	addw	r8, r8, #2049	; 0x801
90023748:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
9002374c:	4445      	add	r5, r8
9002374e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90023752:	ea06 1555 	and.w	r5, r6, r5, lsr #5
90023756:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
9002375a:	ea45 050e 	orr.w	r5, r5, lr
9002375e:	fb1c fe01 	smulbb	lr, ip, r1
90023762:	f1cc 0810 	rsb	r8, ip, #16
90023766:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9002376a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9002376e:	ea4f 0eee 	mov.w	lr, lr, asr #3
90023772:	eba8 0801 	sub.w	r8, r8, r1
90023776:	ea4f 4b05 	mov.w	fp, r5, lsl #16
9002377a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9002377e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
90023782:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
90023786:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
9002378a:	ea4a 0202 	orr.w	r2, sl, r2
9002378e:	4341      	muls	r1, r0
90023790:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
90023794:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90023798:	fb09 1108 	mla	r1, r9, r8, r1
9002379c:	ea4b 0505 	orr.w	r5, fp, r5
900237a0:	fb0c 1102 	mla	r1, ip, r2, r1
900237a4:	fb0e 1e05 	mla	lr, lr, r5, r1
900237a8:	ea4f 525e 	mov.w	r2, lr, lsr #21
900237ac:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
900237b0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900237b4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
900237b8:	ea42 0e0e 	orr.w	lr, r2, lr
900237bc:	fa1f f28e 	uxth.w	r2, lr
900237c0:	2bff      	cmp	r3, #255	; 0xff
900237c2:	f040 80a1 	bne.w	90023908 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
900237c6:	803a      	strh	r2, [r7, #0]
900237c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
900237ca:	3702      	adds	r7, #2
900237cc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
900237ce:	4413      	add	r3, r2
900237d0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
900237d2:	931d      	str	r3, [sp, #116]	; 0x74
900237d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
900237d6:	441a      	add	r2, r3
900237d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
900237da:	3b01      	subs	r3, #1
900237dc:	921e      	str	r2, [sp, #120]	; 0x78
900237de:	930f      	str	r3, [sp, #60]	; 0x3c
900237e0:	e6c7      	b.n	90023572 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
900237e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
900237e4:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
900237e6:	9c1e      	ldr	r4, [sp, #120]	; 0x78
900237e8:	4433      	add	r3, r6
900237ea:	931d      	str	r3, [sp, #116]	; 0x74
900237ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
900237ee:	441c      	add	r4, r3
900237f0:	9b06      	ldr	r3, [sp, #24]
900237f2:	3b01      	subs	r3, #1
900237f4:	941e      	str	r4, [sp, #120]	; 0x78
900237f6:	9306      	str	r3, [sp, #24]
900237f8:	9b07      	ldr	r3, [sp, #28]
900237fa:	3302      	adds	r3, #2
900237fc:	9307      	str	r3, [sp, #28]
900237fe:	e696      	b.n	9002352e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
90023800:	d028      	beq.n	90023854 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90023802:	9b06      	ldr	r3, [sp, #24]
90023804:	981f      	ldr	r0, [sp, #124]	; 0x7c
90023806:	3b01      	subs	r3, #1
90023808:	9d1d      	ldr	r5, [sp, #116]	; 0x74
9002380a:	fb00 5003 	mla	r0, r0, r3, r5
9002380e:	1400      	asrs	r0, r0, #16
90023810:	f53f aeaa 	bmi.w	90023568 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90023814:	3901      	subs	r1, #1
90023816:	4288      	cmp	r0, r1
90023818:	f6bf aea6 	bge.w	90023568 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9002381c:	9920      	ldr	r1, [sp, #128]	; 0x80
9002381e:	981e      	ldr	r0, [sp, #120]	; 0x78
90023820:	fb01 0303 	mla	r3, r1, r3, r0
90023824:	141b      	asrs	r3, r3, #16
90023826:	f53f ae9f 	bmi.w	90023568 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9002382a:	3a01      	subs	r2, #1
9002382c:	4293      	cmp	r3, r2
9002382e:	f6bf ae9b 	bge.w	90023568 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90023832:	9b06      	ldr	r3, [sp, #24]
90023834:	f64f 061f 	movw	r6, #63519	; 0xf81f
90023838:	f8dd e01c 	ldr.w	lr, [sp, #28]
9002383c:	930f      	str	r3, [sp, #60]	; 0x3c
9002383e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90023840:	2b00      	cmp	r3, #0
90023842:	f300 80b6 	bgt.w	900239b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
90023846:	9b06      	ldr	r3, [sp, #24]
90023848:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9002384c:	9b07      	ldr	r3, [sp, #28]
9002384e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
90023852:	9307      	str	r3, [sp, #28]
90023854:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90023856:	2b00      	cmp	r3, #0
90023858:	f340 8218 	ble.w	90023c8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
9002385c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90023860:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90023862:	ee30 0a04 	vadd.f32	s0, s0, s8
90023866:	ee70 0aa4 	vadd.f32	s1, s1, s9
9002386a:	eef0 6a62 	vmov.f32	s13, s5
9002386e:	eec7 7a00 	vdiv.f32	s15, s14, s0
90023872:	ee31 1a05 	vadd.f32	s2, s2, s10
90023876:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002387a:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
9002387e:	eef0 6a43 	vmov.f32	s13, s6
90023882:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90023886:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
9002388a:	ee20 7aa7 	vmul.f32	s14, s1, s15
9002388e:	ee61 7a27 	vmul.f32	s15, s2, s15
90023892:	ee77 2a62 	vsub.f32	s5, s14, s5
90023896:	ee37 3ac3 	vsub.f32	s6, s15, s6
9002389a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9002389e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900238a2:	ee12 2a90 	vmov	r2, s5
900238a6:	eef0 2a47 	vmov.f32	s5, s14
900238aa:	fb92 f3f3 	sdiv	r3, r2, r3
900238ae:	ee13 2a10 	vmov	r2, s6
900238b2:	931f      	str	r3, [sp, #124]	; 0x7c
900238b4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900238b6:	eeb0 3a67 	vmov.f32	s6, s15
900238ba:	fb92 f3f3 	sdiv	r3, r2, r3
900238be:	9320      	str	r3, [sp, #128]	; 0x80
900238c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900238c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
900238c4:	3b01      	subs	r3, #1
900238c6:	930e      	str	r3, [sp, #56]	; 0x38
900238c8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900238ca:	bf08      	it	eq
900238cc:	4613      	moveq	r3, r2
900238ce:	9306      	str	r3, [sp, #24]
900238d0:	e61f      	b.n	90023512 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
900238d2:	fb08 f505 	mul.w	r5, r8, r5
900238d6:	fb09 5303 	mla	r3, r9, r3, r5
900238da:	e69f      	b.n	9002361c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
900238dc:	4681      	mov	r9, r0
900238de:	e6c6      	b.n	9002366e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
900238e0:	f1c1 0210 	rsb	r2, r1, #16
900238e4:	4341      	muls	r1, r0
900238e6:	fb09 1902 	mla	r9, r9, r2, r1
900238ea:	ea4f 0949 	mov.w	r9, r9, lsl #1
900238ee:	ea4f 5259 	mov.w	r2, r9, lsr #21
900238f2:	ea4f 1959 	mov.w	r9, r9, lsr #5
900238f6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900238fa:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
900238fe:	ea42 0909 	orr.w	r9, r2, r9
90023902:	fa1f f289 	uxth.w	r2, r9
90023906:	e75b      	b.n	900237c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
90023908:	f8b7 c000 	ldrh.w	ip, [r7]
9002390c:	43db      	mvns	r3, r3
9002390e:	ea4f 202c 	mov.w	r0, ip, asr #8
90023912:	fa5f fe83 	uxtb.w	lr, r3
90023916:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9002391a:	ea4f 05ec 	mov.w	r5, ip, asr #3
9002391e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
90023922:	fb00 f00e 	mul.w	r0, r0, lr
90023926:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9002392a:	b2db      	uxtb	r3, r3
9002392c:	1c41      	adds	r1, r0, #1
9002392e:	fb05 f50e 	mul.w	r5, r5, lr
90023932:	fb03 f30e 	mul.w	r3, r3, lr
90023936:	eb01 2010 	add.w	r0, r1, r0, lsr #8
9002393a:	1211      	asrs	r1, r2, #8
9002393c:	f021 0107 	bic.w	r1, r1, #7
90023940:	eb01 2110 	add.w	r1, r1, r0, lsr #8
90023944:	48d3      	ldr	r0, [pc, #844]	; (90023c94 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
90023946:	b2c9      	uxtb	r1, r1
90023948:	ea00 2001 	and.w	r0, r0, r1, lsl #8
9002394c:	1c69      	adds	r1, r5, #1
9002394e:	eb01 2515 	add.w	r5, r1, r5, lsr #8
90023952:	10d1      	asrs	r1, r2, #3
90023954:	00d2      	lsls	r2, r2, #3
90023956:	f021 0103 	bic.w	r1, r1, #3
9002395a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
9002395e:	00c9      	lsls	r1, r1, #3
90023960:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90023964:	4301      	orrs	r1, r0
90023966:	1c58      	adds	r0, r3, #1
90023968:	eb00 2313 	add.w	r3, r0, r3, lsr #8
9002396c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
90023970:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90023974:	430a      	orrs	r2, r1
90023976:	e726      	b.n	900237c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
90023978:	f115 0e01 	adds.w	lr, r5, #1
9002397c:	f53f af24 	bmi.w	900237c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90023980:	4572      	cmp	r2, lr
90023982:	f6ff af21 	blt.w	900237c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90023986:	f110 0e01 	adds.w	lr, r0, #1
9002398a:	f53f af1d 	bmi.w	900237c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9002398e:	4573      	cmp	r3, lr
90023990:	f6ff af1a 	blt.w	900237c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90023994:	b21b      	sxth	r3, r3
90023996:	b212      	sxth	r2, r2
90023998:	9301      	str	r3, [sp, #4]
9002399a:	9200      	str	r2, [sp, #0]
9002399c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
900239a0:	e9cd 5002 	strd	r5, r0, [sp, #8]
900239a4:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
900239a8:	4639      	mov	r1, r7
900239aa:	9811      	ldr	r0, [sp, #68]	; 0x44
900239ac:	f7ff fc22 	bl	900231f4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
900239b0:	e70a      	b.n	900237c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
900239b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
900239b4:	f3c3 3203 	ubfx	r2, r3, #12, #4
900239b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
900239ba:	f3c3 3503 	ubfx	r5, r3, #12, #4
900239be:	9b24      	ldr	r3, [sp, #144]	; 0x90
900239c0:	fa1f fc82 	uxth.w	ip, r2
900239c4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900239c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
900239ca:	ea4f 100c 	mov.w	r0, ip, lsl #4
900239ce:	141f      	asrs	r7, r3, #16
900239d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
900239d2:	141b      	asrs	r3, r3, #16
900239d4:	fb01 3707 	mla	r7, r1, r7, r3
900239d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
900239da:	eb03 0a07 	add.w	sl, r3, r7
900239de:	f813 9007 	ldrb.w	r9, [r3, r7]
900239e2:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
900239e6:	f89a 8001 	ldrb.w	r8, [sl, #1]
900239ea:	b29b      	uxth	r3, r3
900239ec:	2d00      	cmp	r5, #0
900239ee:	f000 80fe 	beq.w	90023bee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
900239f2:	f81a 4001 	ldrb.w	r4, [sl, r1]
900239f6:	eb0a 0b01 	add.w	fp, sl, r1
900239fa:	fa1f fa85 	uxth.w	sl, r5
900239fe:	940c      	str	r4, [sp, #48]	; 0x30
90023a00:	fb0a fc0c 	mul.w	ip, sl, ip
90023a04:	f89b 4001 	ldrb.w	r4, [fp, #1]
90023a08:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
90023a0c:	eba0 000c 	sub.w	r0, r0, ip
90023a10:	940d      	str	r4, [sp, #52]	; 0x34
90023a12:	fa1f fa8a 	uxth.w	sl, sl
90023a16:	b280      	uxth	r0, r0
90023a18:	eba3 030a 	sub.w	r3, r3, sl
90023a1c:	fb08 f000 	mul.w	r0, r8, r0
90023a20:	b29b      	uxth	r3, r3
90023a22:	fb09 0303 	mla	r3, r9, r3, r0
90023a26:	980c      	ldr	r0, [sp, #48]	; 0x30
90023a28:	fb0a 3300 	mla	r3, sl, r0, r3
90023a2c:	fb0c 3304 	mla	r3, ip, r4, r3
90023a30:	f3c3 2307 	ubfx	r3, r3, #8, #8
90023a34:	2b00      	cmp	r3, #0
90023a36:	f000 80cc 	beq.w	90023bd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
90023a3a:	9808      	ldr	r0, [sp, #32]
90023a3c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90023a40:	9c08      	ldr	r4, [sp, #32]
90023a42:	eb00 0047 	add.w	r0, r0, r7, lsl #1
90023a46:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
90023a4a:	f000 80d5 	beq.w	90023bf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
90023a4e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
90023a52:	ea4f 0ae9 	mov.w	sl, r9, asr #3
90023a56:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90023a5a:	fb0a fc0c 	mul.w	ip, sl, ip
90023a5e:	fb09 f707 	mul.w	r7, r9, r7
90023a62:	ea06 195c 	and.w	r9, r6, ip, lsr #5
90023a66:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
90023a6a:	f107 0b20 	add.w	fp, r7, #32
90023a6e:	44cc      	add	ip, r9
90023a70:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
90023a74:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
90023a78:	ea4f 2919 	mov.w	r9, r9, lsr #8
90023a7c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90023a80:	ea4c 0909 	orr.w	r9, ip, r9
90023a84:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
90023a88:	8847      	ldrh	r7, [r0, #2]
90023a8a:	d019      	beq.n	90023ac0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
90023a8c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
90023a90:	ea4f 0ae8 	mov.w	sl, r8, asr #3
90023a94:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90023a98:	fb0a fc0c 	mul.w	ip, sl, ip
90023a9c:	fb08 f807 	mul.w	r8, r8, r7
90023aa0:	ea06 175c 	and.w	r7, r6, ip, lsr #5
90023aa4:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
90023aa8:	f108 0b20 	add.w	fp, r8, #32
90023aac:	44bc      	add	ip, r7
90023aae:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
90023ab2:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
90023ab6:	0a3f      	lsrs	r7, r7, #8
90023ab8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90023abc:	ea4c 0707 	orr.w	r7, ip, r7
90023ac0:	ea4f 4c09 	mov.w	ip, r9, lsl #16
90023ac4:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90023ac8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
90023acc:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
90023ad0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
90023ad4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90023ad8:	ea4c 0909 	orr.w	r9, ip, r9
90023adc:	ea4a 0707 	orr.w	r7, sl, r7
90023ae0:	2d00      	cmp	r5, #0
90023ae2:	f000 808b 	beq.w	90023bfc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
90023ae6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
90023aea:	3901      	subs	r1, #1
90023aec:	0049      	lsls	r1, r1, #1
90023aee:	3102      	adds	r1, #2
90023af0:	eb00 0c01 	add.w	ip, r0, r1
90023af4:	5a41      	ldrh	r1, [r0, r1]
90023af6:	980c      	ldr	r0, [sp, #48]	; 0x30
90023af8:	28ff      	cmp	r0, #255	; 0xff
90023afa:	d019      	beq.n	90023b30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
90023afc:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
90023b00:	9c0c      	ldr	r4, [sp, #48]	; 0x30
90023b02:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90023b06:	ea4f 08e4 	mov.w	r8, r4, asr #3
90023b0a:	fb04 fa01 	mul.w	sl, r4, r1
90023b0e:	fb08 f800 	mul.w	r8, r8, r0
90023b12:	f10a 0020 	add.w	r0, sl, #32
90023b16:	ea06 1158 	and.w	r1, r6, r8, lsr #5
90023b1a:	f608 0801 	addw	r8, r8, #2049	; 0x801
90023b1e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
90023b22:	4441      	add	r1, r8
90023b24:	0a00      	lsrs	r0, r0, #8
90023b26:	ea06 1151 	and.w	r1, r6, r1, lsr #5
90023b2a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023b2e:	4301      	orrs	r1, r0
90023b30:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90023b32:	f8bc 0002 	ldrh.w	r0, [ip, #2]
90023b36:	2cff      	cmp	r4, #255	; 0xff
90023b38:	d01a      	beq.n	90023b70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
90023b3a:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
90023b3e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023b42:	ea4f 08e4 	mov.w	r8, r4, asr #3
90023b46:	fb04 fa00 	mul.w	sl, r4, r0
90023b4a:	fb08 f80c 	mul.w	r8, r8, ip
90023b4e:	f10a 0c20 	add.w	ip, sl, #32
90023b52:	ea06 1058 	and.w	r0, r6, r8, lsr #5
90023b56:	f608 0801 	addw	r8, r8, #2049	; 0x801
90023b5a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
90023b5e:	4440      	add	r0, r8
90023b60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90023b64:	ea06 1050 	and.w	r0, r6, r0, lsr #5
90023b68:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90023b6c:	ea40 000c 	orr.w	r0, r0, ip
90023b70:	fb15 fc02 	smulbb	ip, r5, r2
90023b74:	f1c5 0810 	rsb	r8, r5, #16
90023b78:	ea4f 4a01 	mov.w	sl, r1, lsl #16
90023b7c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90023b80:	ea4f 0cec 	mov.w	ip, ip, asr #3
90023b84:	eba8 0802 	sub.w	r8, r8, r2
90023b88:	ea4f 4b00 	mov.w	fp, r0, lsl #16
90023b8c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90023b90:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
90023b94:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90023b98:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
90023b9c:	ea4a 0101 	orr.w	r1, sl, r1
90023ba0:	437a      	muls	r2, r7
90023ba2:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
90023ba6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90023baa:	fb09 2208 	mla	r2, r9, r8, r2
90023bae:	ea4b 0000 	orr.w	r0, fp, r0
90023bb2:	fb05 2201 	mla	r2, r5, r1, r2
90023bb6:	fb0c 2200 	mla	r2, ip, r0, r2
90023bba:	0d57      	lsrs	r7, r2, #21
90023bbc:	0952      	lsrs	r2, r2, #5
90023bbe:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90023bc2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90023bc6:	433a      	orrs	r2, r7
90023bc8:	2bff      	cmp	r3, #255	; 0xff
90023bca:	b292      	uxth	r2, r2
90023bcc:	d127      	bne.n	90023c1e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
90023bce:	f8ae 2000 	strh.w	r2, [lr]
90023bd2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90023bd4:	f10e 0e02 	add.w	lr, lr, #2
90023bd8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
90023bda:	4413      	add	r3, r2
90023bdc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
90023bde:	931d      	str	r3, [sp, #116]	; 0x74
90023be0:	9b20      	ldr	r3, [sp, #128]	; 0x80
90023be2:	441a      	add	r2, r3
90023be4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90023be6:	3b01      	subs	r3, #1
90023be8:	921e      	str	r2, [sp, #120]	; 0x78
90023bea:	930f      	str	r3, [sp, #60]	; 0x3c
90023bec:	e627      	b.n	9002383e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
90023bee:	fb08 f000 	mul.w	r0, r8, r0
90023bf2:	fb09 0303 	mla	r3, r9, r3, r0
90023bf6:	e71b      	b.n	90023a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
90023bf8:	46b9      	mov	r9, r7
90023bfa:	e743      	b.n	90023a84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
90023bfc:	f1c2 0110 	rsb	r1, r2, #16
90023c00:	437a      	muls	r2, r7
90023c02:	fb09 2901 	mla	r9, r9, r1, r2
90023c06:	ea4f 0949 	mov.w	r9, r9, lsl #1
90023c0a:	ea4f 5059 	mov.w	r0, r9, lsr #21
90023c0e:	ea4f 1259 	mov.w	r2, r9, lsr #5
90023c12:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023c16:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90023c1a:	4302      	orrs	r2, r0
90023c1c:	e7d4      	b.n	90023bc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
90023c1e:	f8be 7000 	ldrh.w	r7, [lr]
90023c22:	43db      	mvns	r3, r3
90023c24:	4c1b      	ldr	r4, [pc, #108]	; (90023c94 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
90023c26:	1238      	asrs	r0, r7, #8
90023c28:	fa5f fc83 	uxtb.w	ip, r3
90023c2c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90023c30:	10fd      	asrs	r5, r7, #3
90023c32:	00fb      	lsls	r3, r7, #3
90023c34:	fb00 f00c 	mul.w	r0, r0, ip
90023c38:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
90023c3c:	b2db      	uxtb	r3, r3
90023c3e:	fb05 f10c 	mul.w	r1, r5, ip
90023c42:	1c45      	adds	r5, r0, #1
90023c44:	fb03 f30c 	mul.w	r3, r3, ip
90023c48:	eb05 2010 	add.w	r0, r5, r0, lsr #8
90023c4c:	1215      	asrs	r5, r2, #8
90023c4e:	f025 0507 	bic.w	r5, r5, #7
90023c52:	eb05 2010 	add.w	r0, r5, r0, lsr #8
90023c56:	1c4d      	adds	r5, r1, #1
90023c58:	eb05 2511 	add.w	r5, r5, r1, lsr #8
90023c5c:	10d1      	asrs	r1, r2, #3
90023c5e:	b2c0      	uxtb	r0, r0
90023c60:	f021 0103 	bic.w	r1, r1, #3
90023c64:	00d2      	lsls	r2, r2, #3
90023c66:	ea04 2000 	and.w	r0, r4, r0, lsl #8
90023c6a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
90023c6e:	00c9      	lsls	r1, r1, #3
90023c70:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90023c74:	4308      	orrs	r0, r1
90023c76:	1c59      	adds	r1, r3, #1
90023c78:	eb01 2313 	add.w	r3, r1, r3, lsr #8
90023c7c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
90023c80:	f3c3 03c4 	ubfx	r3, r3, #3, #5
90023c84:	4318      	orrs	r0, r3
90023c86:	f8ae 0000 	strh.w	r0, [lr]
90023c8a:	e7a2      	b.n	90023bd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
90023c8c:	b013      	add	sp, #76	; 0x4c
90023c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90023c92:	bf00      	nop
90023c94:	fffff800 	.word	0xfffff800

90023c98 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
90023c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90023c9c:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
90023ca0:	f9bd a020 	ldrsh.w	sl, [sp, #32]
90023ca4:	fb05 4c03 	mla	ip, r5, r3, r4
90023ca8:	2d00      	cmp	r5, #0
90023caa:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
90023cae:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
90023cb2:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
90023cb6:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
90023cba:	8808      	ldrh	r0, [r1, #0]
90023cbc:	f2c0 80a7 	blt.w	90023e0e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
90023cc0:	45aa      	cmp	sl, r5
90023cc2:	f340 80a4 	ble.w	90023e0e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
90023cc6:	2c00      	cmp	r4, #0
90023cc8:	f2c0 809f 	blt.w	90023e0a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
90023ccc:	42a3      	cmp	r3, r4
90023cce:	f340 809c 	ble.w	90023e0a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
90023cd2:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
90023cd6:	1c62      	adds	r2, r4, #1
90023cd8:	f100 809c 	bmi.w	90023e14 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
90023cdc:	4293      	cmp	r3, r2
90023cde:	f340 8099 	ble.w	90023e14 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
90023ce2:	f1b9 0f00 	cmp.w	r9, #0
90023ce6:	f000 8095 	beq.w	90023e14 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
90023cea:	f8be c002 	ldrh.w	ip, [lr, #2]
90023cee:	3501      	adds	r5, #1
90023cf0:	f100 8094 	bmi.w	90023e1c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
90023cf4:	45aa      	cmp	sl, r5
90023cf6:	f340 8091 	ble.w	90023e1c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
90023cfa:	2f00      	cmp	r7, #0
90023cfc:	f000 808e 	beq.w	90023e1c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
90023d00:	2c00      	cmp	r4, #0
90023d02:	f2c0 8089 	blt.w	90023e18 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
90023d06:	42a3      	cmp	r3, r4
90023d08:	f340 8086 	ble.w	90023e18 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
90023d0c:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
90023d10:	3401      	adds	r4, #1
90023d12:	f100 8086 	bmi.w	90023e22 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
90023d16:	42a3      	cmp	r3, r4
90023d18:	f340 8083 	ble.w	90023e22 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
90023d1c:	f1b9 0f00 	cmp.w	r9, #0
90023d20:	d07f      	beq.n	90023e22 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
90023d22:	3301      	adds	r3, #1
90023d24:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
90023d28:	ea4f 4408 	mov.w	r4, r8, lsl #16
90023d2c:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
90023d30:	fb19 fe07 	smulbb	lr, r9, r7
90023d34:	f1c7 0210 	rsb	r2, r7, #16
90023d38:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
90023d3c:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
90023d40:	eba2 0209 	sub.w	r2, r2, r9
90023d44:	ea44 0808 	orr.w	r8, r4, r8
90023d48:	ea4f 440c 	mov.w	r4, ip, lsl #16
90023d4c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90023d50:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
90023d54:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
90023d58:	ebce 0747 	rsb	r7, lr, r7, lsl #1
90023d5c:	ea44 0c0c 	orr.w	ip, r4, ip
90023d60:	ebce 0449 	rsb	r4, lr, r9, lsl #1
90023d64:	fb04 f40c 	mul.w	r4, r4, ip
90023d68:	fb02 4808 	mla	r8, r2, r8, r4
90023d6c:	041a      	lsls	r2, r3, #16
90023d6e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90023d72:	b2b4      	uxth	r4, r6
90023d74:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90023d78:	43f6      	mvns	r6, r6
90023d7a:	4313      	orrs	r3, r2
90023d7c:	042a      	lsls	r2, r5, #16
90023d7e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
90023d82:	b2f6      	uxtb	r6, r6
90023d84:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90023d88:	fb0e 8303 	mla	r3, lr, r3, r8
90023d8c:	432a      	orrs	r2, r5
90023d8e:	fb07 3202 	mla	r2, r7, r2, r3
90023d92:	10c7      	asrs	r7, r0, #3
90023d94:	0d53      	lsrs	r3, r2, #21
90023d96:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90023d9a:	0952      	lsrs	r2, r2, #5
90023d9c:	fb17 f706 	smulbb	r7, r7, r6
90023da0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90023da4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90023da8:	431a      	orrs	r2, r3
90023daa:	b293      	uxth	r3, r2
90023dac:	1202      	asrs	r2, r0, #8
90023dae:	121d      	asrs	r5, r3, #8
90023db0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
90023db4:	00c0      	lsls	r0, r0, #3
90023db6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90023dba:	fb12 f206 	smulbb	r2, r2, r6
90023dbe:	b2c0      	uxtb	r0, r0
90023dc0:	fb05 2504 	mla	r5, r5, r4, r2
90023dc4:	10da      	asrs	r2, r3, #3
90023dc6:	fb10 f006 	smulbb	r0, r0, r6
90023dca:	00db      	lsls	r3, r3, #3
90023dcc:	b2ad      	uxth	r5, r5
90023dce:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90023dd2:	b2db      	uxtb	r3, r3
90023dd4:	fb02 7204 	mla	r2, r2, r4, r7
90023dd8:	fb03 0004 	mla	r0, r3, r4, r0
90023ddc:	1c6b      	adds	r3, r5, #1
90023dde:	b292      	uxth	r2, r2
90023de0:	b280      	uxth	r0, r0
90023de2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90023de6:	1c43      	adds	r3, r0, #1
90023de8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
90023dec:	eb03 2310 	add.w	r3, r3, r0, lsr #8
90023df0:	1c50      	adds	r0, r2, #1
90023df2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
90023df6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90023dfa:	0952      	lsrs	r2, r2, #5
90023dfc:	432b      	orrs	r3, r5
90023dfe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90023e02:	4313      	orrs	r3, r2
90023e04:	800b      	strh	r3, [r1, #0]
90023e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90023e0a:	4680      	mov	r8, r0
90023e0c:	e763      	b.n	90023cd6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
90023e0e:	4684      	mov	ip, r0
90023e10:	4680      	mov	r8, r0
90023e12:	e76c      	b.n	90023cee <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
90023e14:	4684      	mov	ip, r0
90023e16:	e76a      	b.n	90023cee <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
90023e18:	4605      	mov	r5, r0
90023e1a:	e779      	b.n	90023d10 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
90023e1c:	4603      	mov	r3, r0
90023e1e:	4605      	mov	r5, r0
90023e20:	e782      	b.n	90023d28 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
90023e22:	4603      	mov	r3, r0
90023e24:	e780      	b.n	90023d28 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

90023e26 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90023e26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90023e2a:	b093      	sub	sp, #76	; 0x4c
90023e2c:	461d      	mov	r5, r3
90023e2e:	9210      	str	r2, [sp, #64]	; 0x40
90023e30:	9b21      	ldr	r3, [sp, #132]	; 0x84
90023e32:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
90023e36:	910a      	str	r1, [sp, #40]	; 0x28
90023e38:	920b      	str	r2, [sp, #44]	; 0x2c
90023e3a:	6859      	ldr	r1, [r3, #4]
90023e3c:	681b      	ldr	r3, [r3, #0]
90023e3e:	9011      	str	r0, [sp, #68]	; 0x44
90023e40:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
90023e44:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
90023e48:	fb01 2707 	mla	r7, r1, r7, r2
90023e4c:	eb03 0347 	add.w	r3, r3, r7, lsl #1
90023e50:	9307      	str	r3, [sp, #28]
90023e52:	9b24      	ldr	r3, [sp, #144]	; 0x90
90023e54:	681b      	ldr	r3, [r3, #0]
90023e56:	9309      	str	r3, [sp, #36]	; 0x24
90023e58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90023e5a:	43db      	mvns	r3, r3
90023e5c:	b2db      	uxtb	r3, r3
90023e5e:	9308      	str	r3, [sp, #32]
90023e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90023e62:	2b00      	cmp	r3, #0
90023e64:	dc03      	bgt.n	90023e6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90023e66:	9b10      	ldr	r3, [sp, #64]	; 0x40
90023e68:	2b00      	cmp	r3, #0
90023e6a:	f340 8205 	ble.w	90024278 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90023e6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
90023e70:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90023e74:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90023e78:	1e48      	subs	r0, r1, #1
90023e7a:	f102 3cff 	add.w	ip, r2, #4294967295
90023e7e:	2d00      	cmp	r5, #0
90023e80:	f340 80da 	ble.w	90024038 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
90023e84:	ea5f 4e24 	movs.w	lr, r4, asr #16
90023e88:	ea4f 4326 	mov.w	r3, r6, asr #16
90023e8c:	d406      	bmi.n	90023e9c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90023e8e:	4586      	cmp	lr, r0
90023e90:	da04      	bge.n	90023e9c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90023e92:	2b00      	cmp	r3, #0
90023e94:	db02      	blt.n	90023e9c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90023e96:	4563      	cmp	r3, ip
90023e98:	f2c0 80cf 	blt.w	9002403a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
90023e9c:	f11e 0e01 	adds.w	lr, lr, #1
90023ea0:	f100 80c1 	bmi.w	90024026 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90023ea4:	4571      	cmp	r1, lr
90023ea6:	f2c0 80be 	blt.w	90024026 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90023eaa:	3301      	adds	r3, #1
90023eac:	f100 80bb 	bmi.w	90024026 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90023eb0:	429a      	cmp	r2, r3
90023eb2:	f2c0 80b8 	blt.w	90024026 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90023eb6:	46a9      	mov	r9, r5
90023eb8:	f8dd 801c 	ldr.w	r8, [sp, #28]
90023ebc:	f1b9 0f00 	cmp.w	r9, #0
90023ec0:	f340 80d8 	ble.w	90024074 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
90023ec4:	9b24      	ldr	r3, [sp, #144]	; 0x90
90023ec6:	1421      	asrs	r1, r4, #16
90023ec8:	ea4f 4026 	mov.w	r0, r6, asr #16
90023ecc:	f3c4 3203 	ubfx	r2, r4, #12, #4
90023ed0:	f3c6 3c03 	ubfx	ip, r6, #12, #4
90023ed4:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
90023ed8:	f100 8112 	bmi.w	90024100 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
90023edc:	f10e 3aff 	add.w	sl, lr, #4294967295
90023ee0:	4551      	cmp	r1, sl
90023ee2:	f280 810d 	bge.w	90024100 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
90023ee6:	2800      	cmp	r0, #0
90023ee8:	f2c0 810a 	blt.w	90024100 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
90023eec:	f103 3aff 	add.w	sl, r3, #4294967295
90023ef0:	4550      	cmp	r0, sl
90023ef2:	f280 8105 	bge.w	90024100 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
90023ef6:	fa0f f38e 	sxth.w	r3, lr
90023efa:	fb00 1103 	mla	r1, r0, r3, r1
90023efe:	9809      	ldr	r0, [sp, #36]	; 0x24
90023f00:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
90023f04:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
90023f08:	f8ba 1002 	ldrh.w	r1, [sl, #2]
90023f0c:	f1bc 0f00 	cmp.w	ip, #0
90023f10:	d007      	beq.n	90023f22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
90023f12:	005b      	lsls	r3, r3, #1
90023f14:	eb0a 0003 	add.w	r0, sl, r3
90023f18:	f83a 3003 	ldrh.w	r3, [sl, r3]
90023f1c:	930c      	str	r3, [sp, #48]	; 0x30
90023f1e:	8843      	ldrh	r3, [r0, #2]
90023f20:	930d      	str	r3, [sp, #52]	; 0x34
90023f22:	ea4f 400e 	mov.w	r0, lr, lsl #16
90023f26:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
90023f2a:	fb12 f30c 	smulbb	r3, r2, ip
90023f2e:	ea4f 4a01 	mov.w	sl, r1, lsl #16
90023f32:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90023f36:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90023f3a:	10db      	asrs	r3, r3, #3
90023f3c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90023f40:	ea40 000e 	orr.w	r0, r0, lr
90023f44:	f1cc 0e10 	rsb	lr, ip, #16
90023f48:	ea4a 0101 	orr.w	r1, sl, r1
90023f4c:	9f08      	ldr	r7, [sp, #32]
90023f4e:	ebae 0e02 	sub.w	lr, lr, r2
90023f52:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
90023f56:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
90023f5a:	4351      	muls	r1, r2
90023f5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90023f5e:	fb0e 1e00 	mla	lr, lr, r0, r1
90023f62:	990c      	ldr	r1, [sp, #48]	; 0x30
90023f64:	0410      	lsls	r0, r2, #16
90023f66:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90023f6a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90023f6e:	4310      	orrs	r0, r2
90023f70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90023f72:	0412      	lsls	r2, r2, #16
90023f74:	fb03 e000 	mla	r0, r3, r0, lr
90023f78:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
90023f7c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
90023f80:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90023f84:	ea42 020e 	orr.w	r2, r2, lr
90023f88:	fb03 0302 	mla	r3, r3, r2, r0
90023f8c:	f8b8 0000 	ldrh.w	r0, [r8]
90023f90:	0d5a      	lsrs	r2, r3, #21
90023f92:	095b      	lsrs	r3, r3, #5
90023f94:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90023f98:	1201      	asrs	r1, r0, #8
90023f9a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90023f9e:	ea4f 0ee0 	mov.w	lr, r0, asr #3
90023fa2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90023fa6:	00c0      	lsls	r0, r0, #3
90023fa8:	4313      	orrs	r3, r2
90023faa:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
90023fae:	fb11 f107 	smulbb	r1, r1, r7
90023fb2:	b2c0      	uxtb	r0, r0
90023fb4:	b29b      	uxth	r3, r3
90023fb6:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
90023fba:	fb10 f007 	smulbb	r0, r0, r7
90023fbe:	fb1e fe07 	smulbb	lr, lr, r7
90023fc2:	ea4f 2c23 	mov.w	ip, r3, asr #8
90023fc6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90023fca:	fb0c 1c02 	mla	ip, ip, r2, r1
90023fce:	10d9      	asrs	r1, r3, #3
90023fd0:	00db      	lsls	r3, r3, #3
90023fd2:	fa1f fc8c 	uxth.w	ip, ip
90023fd6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90023fda:	b2db      	uxtb	r3, r3
90023fdc:	fb01 e102 	mla	r1, r1, r2, lr
90023fe0:	fb03 0302 	mla	r3, r3, r2, r0
90023fe4:	b289      	uxth	r1, r1
90023fe6:	b29a      	uxth	r2, r3
90023fe8:	f10c 0301 	add.w	r3, ip, #1
90023fec:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
90023ff0:	1c53      	adds	r3, r2, #1
90023ff2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90023ff6:	1c4a      	adds	r2, r1, #1
90023ff8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90023ffc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
90024000:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90024004:	0949      	lsrs	r1, r1, #5
90024006:	ea43 030c 	orr.w	r3, r3, ip
9002400a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9002400e:	430b      	orrs	r3, r1
90024010:	f8a8 3000 	strh.w	r3, [r8]
90024014:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90024016:	f108 0802 	add.w	r8, r8, #2
9002401a:	f109 39ff 	add.w	r9, r9, #4294967295
9002401e:	441c      	add	r4, r3
90024020:	9b20      	ldr	r3, [sp, #128]	; 0x80
90024022:	441e      	add	r6, r3
90024024:	e74a      	b.n	90023ebc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90024026:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90024028:	3d01      	subs	r5, #1
9002402a:	441c      	add	r4, r3
9002402c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002402e:	441e      	add	r6, r3
90024030:	9b07      	ldr	r3, [sp, #28]
90024032:	3302      	adds	r3, #2
90024034:	9307      	str	r3, [sp, #28]
90024036:	e722      	b.n	90023e7e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
90024038:	d022      	beq.n	90024080 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
9002403a:	1e6b      	subs	r3, r5, #1
9002403c:	981f      	ldr	r0, [sp, #124]	; 0x7c
9002403e:	fb00 4003 	mla	r0, r0, r3, r4
90024042:	1400      	asrs	r0, r0, #16
90024044:	f53f af37 	bmi.w	90023eb6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90024048:	3901      	subs	r1, #1
9002404a:	4288      	cmp	r0, r1
9002404c:	f6bf af33 	bge.w	90023eb6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90024050:	9920      	ldr	r1, [sp, #128]	; 0x80
90024052:	fb01 6303 	mla	r3, r1, r3, r6
90024056:	141b      	asrs	r3, r3, #16
90024058:	f53f af2d 	bmi.w	90023eb6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9002405c:	3a01      	subs	r2, #1
9002405e:	4293      	cmp	r3, r2
90024060:	f6bf af29 	bge.w	90023eb6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90024064:	46a8      	mov	r8, r5
90024066:	f8dd 901c 	ldr.w	r9, [sp, #28]
9002406a:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
9002406e:	f1b8 0f00 	cmp.w	r8, #0
90024072:	dc60      	bgt.n	90024136 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
90024074:	9b07      	ldr	r3, [sp, #28]
90024076:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
9002407a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
9002407e:	9307      	str	r3, [sp, #28]
90024080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90024082:	2b00      	cmp	r3, #0
90024084:	f340 80f8 	ble.w	90024278 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90024088:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9002408c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9002408e:	ee30 0a04 	vadd.f32	s0, s0, s8
90024092:	ee70 0aa4 	vadd.f32	s1, s1, s9
90024096:	eef0 6a62 	vmov.f32	s13, s5
9002409a:	eec7 7a00 	vdiv.f32	s15, s14, s0
9002409e:	ee31 1a05 	vadd.f32	s2, s2, s10
900240a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900240a6:	ee16 4a90 	vmov	r4, s13
900240aa:	eef0 6a43 	vmov.f32	s13, s6
900240ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900240b2:	ee16 6a90 	vmov	r6, s13
900240b6:	ee20 7aa7 	vmul.f32	s14, s1, s15
900240ba:	ee61 7a27 	vmul.f32	s15, s2, s15
900240be:	ee77 2a62 	vsub.f32	s5, s14, s5
900240c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
900240c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900240ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900240ce:	ee12 2a90 	vmov	r2, s5
900240d2:	eef0 2a47 	vmov.f32	s5, s14
900240d6:	fb92 f3f3 	sdiv	r3, r2, r3
900240da:	ee13 2a10 	vmov	r2, s6
900240de:	931f      	str	r3, [sp, #124]	; 0x7c
900240e0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900240e2:	eeb0 3a67 	vmov.f32	s6, s15
900240e6:	fb92 f3f3 	sdiv	r3, r2, r3
900240ea:	9320      	str	r3, [sp, #128]	; 0x80
900240ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900240ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
900240f0:	3b01      	subs	r3, #1
900240f2:	930a      	str	r3, [sp, #40]	; 0x28
900240f4:	bf08      	it	eq
900240f6:	4615      	moveq	r5, r2
900240f8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900240fa:	bf18      	it	ne
900240fc:	461d      	movne	r5, r3
900240fe:	e6af      	b.n	90023e60 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90024100:	f111 0a01 	adds.w	sl, r1, #1
90024104:	d486      	bmi.n	90024014 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
90024106:	45d6      	cmp	lr, sl
90024108:	db84      	blt.n	90024014 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
9002410a:	f110 0a01 	adds.w	sl, r0, #1
9002410e:	d481      	bmi.n	90024014 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
90024110:	4553      	cmp	r3, sl
90024112:	f6ff af7f 	blt.w	90024014 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
90024116:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
90024118:	b21b      	sxth	r3, r3
9002411a:	9101      	str	r1, [sp, #4]
9002411c:	4641      	mov	r1, r8
9002411e:	9300      	str	r3, [sp, #0]
90024120:	fa0f f38e 	sxth.w	r3, lr
90024124:	e9cd 0202 	strd	r0, r2, [sp, #8]
90024128:	e9cd c704 	strd	ip, r7, [sp, #16]
9002412c:	9a09      	ldr	r2, [sp, #36]	; 0x24
9002412e:	9811      	ldr	r0, [sp, #68]	; 0x44
90024130:	f7ff fdb2 	bl	90023c98 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
90024134:	e76e      	b.n	90024014 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
90024136:	9b24      	ldr	r3, [sp, #144]	; 0x90
90024138:	1430      	asrs	r0, r6, #16
9002413a:	9f09      	ldr	r7, [sp, #36]	; 0x24
9002413c:	f3c6 3e03 	ubfx	lr, r6, #12, #4
90024140:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90024144:	1423      	asrs	r3, r4, #16
90024146:	f3c4 3203 	ubfx	r2, r4, #12, #4
9002414a:	fb01 3000 	mla	r0, r1, r0, r3
9002414e:	9b09      	ldr	r3, [sp, #36]	; 0x24
90024150:	eb03 0340 	add.w	r3, r3, r0, lsl #1
90024154:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
90024158:	8858      	ldrh	r0, [r3, #2]
9002415a:	f1be 0f00 	cmp.w	lr, #0
9002415e:	d00b      	beq.n	90024178 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
90024160:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
90024164:	3901      	subs	r1, #1
90024166:	0049      	lsls	r1, r1, #1
90024168:	3102      	adds	r1, #2
9002416a:	eb03 0b01 	add.w	fp, r3, r1
9002416e:	5a5b      	ldrh	r3, [r3, r1]
90024170:	930e      	str	r3, [sp, #56]	; 0x38
90024172:	f8bb 3002 	ldrh.w	r3, [fp, #2]
90024176:	930f      	str	r3, [sp, #60]	; 0x3c
90024178:	ea4f 410c 	mov.w	r1, ip, lsl #16
9002417c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90024180:	fb12 f30e 	smulbb	r3, r2, lr
90024184:	ea4f 4b00 	mov.w	fp, r0, lsl #16
90024188:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
9002418c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90024190:	10db      	asrs	r3, r3, #3
90024192:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90024196:	ea41 010c 	orr.w	r1, r1, ip
9002419a:	f1ce 0c10 	rsb	ip, lr, #16
9002419e:	ea4b 0000 	orr.w	r0, fp, r0
900241a2:	9f08      	ldr	r7, [sp, #32]
900241a4:	ebac 0c02 	sub.w	ip, ip, r2
900241a8:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
900241ac:	f108 38ff 	add.w	r8, r8, #4294967295
900241b0:	4350      	muls	r0, r2
900241b2:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
900241b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900241b8:	fb0c 0c01 	mla	ip, ip, r1, r0
900241bc:	980e      	ldr	r0, [sp, #56]	; 0x38
900241be:	ea4f 4b02 	mov.w	fp, r2, lsl #16
900241c2:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
900241c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
900241c8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
900241cc:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
900241d0:	0412      	lsls	r2, r2, #16
900241d2:	ea4b 0101 	orr.w	r1, fp, r1
900241d6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
900241da:	fb03 c101 	mla	r1, r3, r1, ip
900241de:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
900241e2:	4302      	orrs	r2, r0
900241e4:	fb03 1202 	mla	r2, r3, r2, r1
900241e8:	ea4f 5b52 	mov.w	fp, r2, lsr #21
900241ec:	0952      	lsrs	r2, r2, #5
900241ee:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
900241f2:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
900241f6:	f8b9 2000 	ldrh.w	r2, [r9]
900241fa:	ea4b 0303 	orr.w	r3, fp, r3
900241fe:	1211      	asrs	r1, r2, #8
90024200:	ea4f 0ce2 	mov.w	ip, r2, asr #3
90024204:	b29b      	uxth	r3, r3
90024206:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9002420a:	00d2      	lsls	r2, r2, #3
9002420c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
90024210:	fb11 f107 	smulbb	r1, r1, r7
90024214:	1218      	asrs	r0, r3, #8
90024216:	fb1c fc07 	smulbb	ip, ip, r7
9002421a:	b2d2      	uxtb	r2, r2
9002421c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90024220:	fb12 f207 	smulbb	r2, r2, r7
90024224:	fb00 100a 	mla	r0, r0, sl, r1
90024228:	10d9      	asrs	r1, r3, #3
9002422a:	00db      	lsls	r3, r3, #3
9002422c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90024230:	b280      	uxth	r0, r0
90024232:	b2db      	uxtb	r3, r3
90024234:	fb01 c10a 	mla	r1, r1, sl, ip
90024238:	fb03 230a 	mla	r3, r3, sl, r2
9002423c:	1c42      	adds	r2, r0, #1
9002423e:	b289      	uxth	r1, r1
90024240:	b29b      	uxth	r3, r3
90024242:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90024246:	f101 0c01 	add.w	ip, r1, #1
9002424a:	1c5a      	adds	r2, r3, #1
9002424c:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
90024250:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
90024254:	eb02 2213 	add.w	r2, r2, r3, lsr #8
90024258:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9002425a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
9002425e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
90024262:	441c      	add	r4, r3
90024264:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90024268:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002426a:	4310      	orrs	r0, r2
9002426c:	441e      	add	r6, r3
9002426e:	ea40 000c 	orr.w	r0, r0, ip
90024272:	f829 0b02 	strh.w	r0, [r9], #2
90024276:	e6fa      	b.n	9002406e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
90024278:	b013      	add	sp, #76	; 0x4c
9002427a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9002427e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
9002427e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90024282:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
90024286:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
9002428a:	fb0e 4703 	mla	r7, lr, r3, r4
9002428e:	f1be 0f00 	cmp.w	lr, #0
90024292:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
90024296:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
9002429a:	eb02 0847 	add.w	r8, r2, r7, lsl #1
9002429e:	8808      	ldrh	r0, [r1, #0]
900242a0:	db60      	blt.n	90024364 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
900242a2:	45f1      	cmp	r9, lr
900242a4:	dd5e      	ble.n	90024364 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
900242a6:	2c00      	cmp	r4, #0
900242a8:	db5a      	blt.n	90024360 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
900242aa:	42a3      	cmp	r3, r4
900242ac:	dd58      	ble.n	90024360 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
900242ae:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
900242b2:	1c62      	adds	r2, r4, #1
900242b4:	d459      	bmi.n	9002436a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
900242b6:	4293      	cmp	r3, r2
900242b8:	dd57      	ble.n	9002436a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
900242ba:	2d00      	cmp	r5, #0
900242bc:	d055      	beq.n	9002436a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
900242be:	f8b8 7002 	ldrh.w	r7, [r8, #2]
900242c2:	f11e 0e01 	adds.w	lr, lr, #1
900242c6:	d454      	bmi.n	90024372 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
900242c8:	45f1      	cmp	r9, lr
900242ca:	dd52      	ble.n	90024372 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
900242cc:	2e00      	cmp	r6, #0
900242ce:	d050      	beq.n	90024372 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
900242d0:	2c00      	cmp	r4, #0
900242d2:	db4c      	blt.n	9002436e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
900242d4:	42a3      	cmp	r3, r4
900242d6:	dd4a      	ble.n	9002436e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
900242d8:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
900242dc:	3401      	adds	r4, #1
900242de:	d405      	bmi.n	900242ec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
900242e0:	42a3      	cmp	r3, r4
900242e2:	dd03      	ble.n	900242ec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
900242e4:	b115      	cbz	r5, 900242ec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
900242e6:	3301      	adds	r3, #1
900242e8:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
900242ec:	fb15 f406 	smulbb	r4, r5, r6
900242f0:	ea4f 430c 	mov.w	r3, ip, lsl #16
900242f4:	ea4f 4e07 	mov.w	lr, r7, lsl #16
900242f8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
900242fc:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90024300:	f3c4 04c7 	ubfx	r4, r4, #3, #8
90024304:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
90024308:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9002430c:	ea43 0c0c 	orr.w	ip, r3, ip
90024310:	f1c6 0310 	rsb	r3, r6, #16
90024314:	ea4e 0707 	orr.w	r7, lr, r7
90024318:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
9002431c:	1b5b      	subs	r3, r3, r5
9002431e:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
90024322:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90024326:	437d      	muls	r5, r7
90024328:	fb03 5c0c 	mla	ip, r3, ip, r5
9002432c:	0403      	lsls	r3, r0, #16
9002432e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90024332:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90024336:	4318      	orrs	r0, r3
90024338:	0413      	lsls	r3, r2, #16
9002433a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9002433e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90024342:	fb04 c000 	mla	r0, r4, r0, ip
90024346:	4313      	orrs	r3, r2
90024348:	fb06 0003 	mla	r0, r6, r3, r0
9002434c:	0d43      	lsrs	r3, r0, #21
9002434e:	0940      	lsrs	r0, r0, #5
90024350:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90024354:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90024358:	4318      	orrs	r0, r3
9002435a:	8008      	strh	r0, [r1, #0]
9002435c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90024360:	4684      	mov	ip, r0
90024362:	e7a6      	b.n	900242b2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
90024364:	4607      	mov	r7, r0
90024366:	4684      	mov	ip, r0
90024368:	e7ab      	b.n	900242c2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
9002436a:	4607      	mov	r7, r0
9002436c:	e7a9      	b.n	900242c2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
9002436e:	4602      	mov	r2, r0
90024370:	e7b4      	b.n	900242dc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
90024372:	4602      	mov	r2, r0
90024374:	e7ba      	b.n	900242ec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

90024376 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90024376:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9002437a:	b08f      	sub	sp, #60	; 0x3c
9002437c:	461d      	mov	r5, r3
9002437e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90024380:	9107      	str	r1, [sp, #28]
90024382:	920c      	str	r2, [sp, #48]	; 0x30
90024384:	6859      	ldr	r1, [r3, #4]
90024386:	681b      	ldr	r3, [r3, #0]
90024388:	900d      	str	r0, [sp, #52]	; 0x34
9002438a:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
9002438e:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
90024392:	fb01 2707 	mla	r7, r1, r7, r2
90024396:	eb03 0747 	add.w	r7, r3, r7, lsl #1
9002439a:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002439c:	f8d3 8000 	ldr.w	r8, [r3]
900243a0:	9b07      	ldr	r3, [sp, #28]
900243a2:	2b00      	cmp	r3, #0
900243a4:	dc03      	bgt.n	900243ae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
900243a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900243a8:	2b00      	cmp	r3, #0
900243aa:	f340 8182 	ble.w	900246b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
900243ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
900243b0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900243b4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
900243b8:	1e48      	subs	r0, r1, #1
900243ba:	f102 3cff 	add.w	ip, r2, #4294967295
900243be:	2d00      	cmp	r5, #0
900243c0:	f340 809b 	ble.w	900244fa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
900243c4:	ea5f 4e24 	movs.w	lr, r4, asr #16
900243c8:	ea4f 4326 	mov.w	r3, r6, asr #16
900243cc:	d406      	bmi.n	900243dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
900243ce:	4586      	cmp	lr, r0
900243d0:	da04      	bge.n	900243dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
900243d2:	2b00      	cmp	r3, #0
900243d4:	db02      	blt.n	900243dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
900243d6:	4563      	cmp	r3, ip
900243d8:	f2c0 8090 	blt.w	900244fc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
900243dc:	f11e 0e01 	adds.w	lr, lr, #1
900243e0:	f100 8084 	bmi.w	900244ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
900243e4:	4571      	cmp	r1, lr
900243e6:	f2c0 8081 	blt.w	900244ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
900243ea:	3301      	adds	r3, #1
900243ec:	d47e      	bmi.n	900244ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
900243ee:	429a      	cmp	r2, r3
900243f0:	db7c      	blt.n	900244ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
900243f2:	46aa      	mov	sl, r5
900243f4:	46b9      	mov	r9, r7
900243f6:	f1ba 0f00 	cmp.w	sl, #0
900243fa:	f340 8099 	ble.w	90024530 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
900243fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
90024400:	1421      	asrs	r1, r4, #16
90024402:	ea4f 4026 	mov.w	r0, r6, asr #16
90024406:	f3c4 3203 	ubfx	r2, r4, #12, #4
9002440a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
9002440e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
90024412:	f100 80d1 	bmi.w	900245b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
90024416:	f10e 3bff 	add.w	fp, lr, #4294967295
9002441a:	4559      	cmp	r1, fp
9002441c:	f280 80cc 	bge.w	900245b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
90024420:	2800      	cmp	r0, #0
90024422:	f2c0 80c9 	blt.w	900245b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
90024426:	f103 3bff 	add.w	fp, r3, #4294967295
9002442a:	4558      	cmp	r0, fp
9002442c:	f280 80c4 	bge.w	900245b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
90024430:	fa0f fe8e 	sxth.w	lr, lr
90024434:	fb00 110e 	mla	r1, r0, lr, r1
90024438:	eb08 0041 	add.w	r0, r8, r1, lsl #1
9002443c:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
90024440:	8841      	ldrh	r1, [r0, #2]
90024442:	f1bc 0f00 	cmp.w	ip, #0
90024446:	d00b      	beq.n	90024460 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
90024448:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
9002444c:	3b01      	subs	r3, #1
9002444e:	005b      	lsls	r3, r3, #1
90024450:	3302      	adds	r3, #2
90024452:	eb00 0e03 	add.w	lr, r0, r3
90024456:	5ac3      	ldrh	r3, [r0, r3]
90024458:	9308      	str	r3, [sp, #32]
9002445a:	f8be 3002 	ldrh.w	r3, [lr, #2]
9002445e:	9309      	str	r3, [sp, #36]	; 0x24
90024460:	ea4f 400b 	mov.w	r0, fp, lsl #16
90024464:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
90024468:	fb12 f30c 	smulbb	r3, r2, ip
9002446c:	f1cc 0e10 	rsb	lr, ip, #16
90024470:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90024474:	10db      	asrs	r3, r3, #3
90024476:	ebae 0e02 	sub.w	lr, lr, r2
9002447a:	ea40 000b 	orr.w	r0, r0, fp
9002447e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
90024482:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90024486:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
9002448a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9002448e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
90024492:	ea4b 0101 	orr.w	r1, fp, r1
90024496:	4351      	muls	r1, r2
90024498:	9a09      	ldr	r2, [sp, #36]	; 0x24
9002449a:	fb0e 1e00 	mla	lr, lr, r0, r1
9002449e:	0410      	lsls	r0, r2, #16
900244a0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900244a4:	9908      	ldr	r1, [sp, #32]
900244a6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
900244aa:	4310      	orrs	r0, r2
900244ac:	9a08      	ldr	r2, [sp, #32]
900244ae:	0412      	lsls	r2, r2, #16
900244b0:	fb03 e000 	mla	r0, r3, r0, lr
900244b4:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
900244b8:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
900244bc:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
900244c0:	ea42 020e 	orr.w	r2, r2, lr
900244c4:	fb03 0302 	mla	r3, r3, r2, r0
900244c8:	0d5a      	lsrs	r2, r3, #21
900244ca:	095b      	lsrs	r3, r3, #5
900244cc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900244d0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
900244d4:	4313      	orrs	r3, r2
900244d6:	f8a9 3000 	strh.w	r3, [r9]
900244da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
900244dc:	f109 0902 	add.w	r9, r9, #2
900244e0:	f10a 3aff 	add.w	sl, sl, #4294967295
900244e4:	441c      	add	r4, r3
900244e6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900244e8:	441e      	add	r6, r3
900244ea:	e784      	b.n	900243f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
900244ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
900244ee:	3d01      	subs	r5, #1
900244f0:	3702      	adds	r7, #2
900244f2:	441c      	add	r4, r3
900244f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900244f6:	441e      	add	r6, r3
900244f8:	e761      	b.n	900243be <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
900244fa:	d01d      	beq.n	90024538 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900244fc:	1e6b      	subs	r3, r5, #1
900244fe:	981b      	ldr	r0, [sp, #108]	; 0x6c
90024500:	fb00 4003 	mla	r0, r0, r3, r4
90024504:	1400      	asrs	r0, r0, #16
90024506:	f53f af74 	bmi.w	900243f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9002450a:	3901      	subs	r1, #1
9002450c:	4288      	cmp	r0, r1
9002450e:	f6bf af70 	bge.w	900243f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90024512:	991c      	ldr	r1, [sp, #112]	; 0x70
90024514:	fb01 6303 	mla	r3, r1, r3, r6
90024518:	141b      	asrs	r3, r3, #16
9002451a:	f53f af6a 	bmi.w	900243f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9002451e:	3a01      	subs	r2, #1
90024520:	4293      	cmp	r3, r2
90024522:	f6bf af66 	bge.w	900243f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90024526:	46a9      	mov	r9, r5
90024528:	46ba      	mov	sl, r7
9002452a:	f1b9 0f00 	cmp.w	r9, #0
9002452e:	dc5b      	bgt.n	900245e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
90024530:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
90024534:	eb07 0745 	add.w	r7, r7, r5, lsl #1
90024538:	9b07      	ldr	r3, [sp, #28]
9002453a:	2b00      	cmp	r3, #0
9002453c:	f340 80b9 	ble.w	900246b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
90024540:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90024544:	9b18      	ldr	r3, [sp, #96]	; 0x60
90024546:	ee30 0a04 	vadd.f32	s0, s0, s8
9002454a:	ee70 0aa4 	vadd.f32	s1, s1, s9
9002454e:	eef0 6a62 	vmov.f32	s13, s5
90024552:	eec7 7a00 	vdiv.f32	s15, s14, s0
90024556:	ee31 1a05 	vadd.f32	s2, s2, s10
9002455a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002455e:	ee16 4a90 	vmov	r4, s13
90024562:	eef0 6a43 	vmov.f32	s13, s6
90024566:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002456a:	ee16 6a90 	vmov	r6, s13
9002456e:	ee20 7aa7 	vmul.f32	s14, s1, s15
90024572:	ee61 7a27 	vmul.f32	s15, s2, s15
90024576:	ee77 2a62 	vsub.f32	s5, s14, s5
9002457a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9002457e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90024582:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90024586:	ee12 2a90 	vmov	r2, s5
9002458a:	eef0 2a47 	vmov.f32	s5, s14
9002458e:	fb92 f3f3 	sdiv	r3, r2, r3
90024592:	ee13 2a10 	vmov	r2, s6
90024596:	931b      	str	r3, [sp, #108]	; 0x6c
90024598:	9b18      	ldr	r3, [sp, #96]	; 0x60
9002459a:	eeb0 3a67 	vmov.f32	s6, s15
9002459e:	fb92 f3f3 	sdiv	r3, r2, r3
900245a2:	931c      	str	r3, [sp, #112]	; 0x70
900245a4:	9b07      	ldr	r3, [sp, #28]
900245a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
900245a8:	3b01      	subs	r3, #1
900245aa:	9307      	str	r3, [sp, #28]
900245ac:	bf08      	it	eq
900245ae:	4615      	moveq	r5, r2
900245b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
900245b2:	bf18      	it	ne
900245b4:	461d      	movne	r5, r3
900245b6:	e6f3      	b.n	900243a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
900245b8:	f111 0b01 	adds.w	fp, r1, #1
900245bc:	d48d      	bmi.n	900244da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900245be:	45de      	cmp	lr, fp
900245c0:	db8b      	blt.n	900244da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900245c2:	f110 0b01 	adds.w	fp, r0, #1
900245c6:	d488      	bmi.n	900244da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900245c8:	455b      	cmp	r3, fp
900245ca:	db86      	blt.n	900244da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900245cc:	b21b      	sxth	r3, r3
900245ce:	e9cd 1001 	strd	r1, r0, [sp, #4]
900245d2:	e9cd 2c03 	strd	r2, ip, [sp, #12]
900245d6:	9300      	str	r3, [sp, #0]
900245d8:	4642      	mov	r2, r8
900245da:	fa0f f38e 	sxth.w	r3, lr
900245de:	4649      	mov	r1, r9
900245e0:	980d      	ldr	r0, [sp, #52]	; 0x34
900245e2:	f7ff fe4c 	bl	9002427e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
900245e6:	e778      	b.n	900244da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900245e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
900245ea:	1420      	asrs	r0, r4, #16
900245ec:	1431      	asrs	r1, r6, #16
900245ee:	f3c6 3e03 	ubfx	lr, r6, #12, #4
900245f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
900245f6:	f3c4 3203 	ubfx	r2, r4, #12, #4
900245fa:	fb03 0101 	mla	r1, r3, r1, r0
900245fe:	eb08 0041 	add.w	r0, r8, r1, lsl #1
90024602:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
90024606:	8841      	ldrh	r1, [r0, #2]
90024608:	f1be 0f00 	cmp.w	lr, #0
9002460c:	d00b      	beq.n	90024626 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
9002460e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
90024612:	3b01      	subs	r3, #1
90024614:	005b      	lsls	r3, r3, #1
90024616:	3302      	adds	r3, #2
90024618:	eb00 0b03 	add.w	fp, r0, r3
9002461c:	5ac3      	ldrh	r3, [r0, r3]
9002461e:	930a      	str	r3, [sp, #40]	; 0x28
90024620:	f8bb 3002 	ldrh.w	r3, [fp, #2]
90024624:	930b      	str	r3, [sp, #44]	; 0x2c
90024626:	ea4f 400c 	mov.w	r0, ip, lsl #16
9002462a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9002462e:	fb12 f30e 	smulbb	r3, r2, lr
90024632:	ea4f 4b01 	mov.w	fp, r1, lsl #16
90024636:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9002463a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9002463e:	10db      	asrs	r3, r3, #3
90024640:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90024644:	ea40 000c 	orr.w	r0, r0, ip
90024648:	f1ce 0c10 	rsb	ip, lr, #16
9002464c:	ea4b 0101 	orr.w	r1, fp, r1
90024650:	f109 39ff 	add.w	r9, r9, #4294967295
90024654:	ebac 0c02 	sub.w	ip, ip, r2
90024658:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
9002465c:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
90024660:	4351      	muls	r1, r2
90024662:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90024664:	fb0c 1c00 	mla	ip, ip, r0, r1
90024668:	990a      	ldr	r1, [sp, #40]	; 0x28
9002466a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
9002466e:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
90024672:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90024674:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90024678:	0412      	lsls	r2, r2, #16
9002467a:	ea4b 0000 	orr.w	r0, fp, r0
9002467e:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
90024682:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90024686:	fb03 c000 	mla	r0, r3, r0, ip
9002468a:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
9002468e:	ea42 0b0b 	orr.w	fp, r2, fp
90024692:	fb03 000b 	mla	r0, r3, fp, r0
90024696:	0d43      	lsrs	r3, r0, #21
90024698:	0940      	lsrs	r0, r0, #5
9002469a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002469e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
900246a2:	4318      	orrs	r0, r3
900246a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
900246a6:	441c      	add	r4, r3
900246a8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900246aa:	f82a 0b02 	strh.w	r0, [sl], #2
900246ae:	441e      	add	r6, r3
900246b0:	e73b      	b.n	9002452a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
900246b2:	b00f      	add	sp, #60	; 0x3c
900246b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900246b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
900246b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900246bc:	b085      	sub	sp, #20
900246be:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
900246c2:	9102      	str	r1, [sp, #8]
900246c4:	2c00      	cmp	r4, #0
900246c6:	fb04 7103 	mla	r1, r4, r3, r7
900246ca:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
900246ce:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
900246d2:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
900246d6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
900246da:	f2c0 811b 	blt.w	90024914 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
900246de:	45a6      	cmp	lr, r4
900246e0:	f340 8118 	ble.w	90024914 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
900246e4:	2f00      	cmp	r7, #0
900246e6:	f2c0 8113 	blt.w	90024910 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
900246ea:	42bb      	cmp	r3, r7
900246ec:	f340 8110 	ble.w	90024910 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
900246f0:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
900246f4:	1c7a      	adds	r2, r7, #1
900246f6:	f100 8110 	bmi.w	9002491a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
900246fa:	4293      	cmp	r3, r2
900246fc:	f340 810d 	ble.w	9002491a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
90024700:	2e00      	cmp	r6, #0
90024702:	f000 810c 	beq.w	9002491e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
90024706:	f8dc 1004 	ldr.w	r1, [ip, #4]
9002470a:	3401      	adds	r4, #1
9002470c:	f100 810b 	bmi.w	90024926 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
90024710:	45a6      	cmp	lr, r4
90024712:	f340 8108 	ble.w	90024926 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
90024716:	2800      	cmp	r0, #0
90024718:	f000 8108 	beq.w	9002492c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
9002471c:	2f00      	cmp	r7, #0
9002471e:	f2c0 8100 	blt.w	90024922 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
90024722:	42bb      	cmp	r3, r7
90024724:	f340 80fd 	ble.w	90024922 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
90024728:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
9002472c:	3701      	adds	r7, #1
9002472e:	f100 8100 	bmi.w	90024932 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
90024732:	42bb      	cmp	r3, r7
90024734:	f340 80fd 	ble.w	90024932 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
90024738:	2e00      	cmp	r6, #0
9002473a:	f000 80fc 	beq.w	90024936 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
9002473e:	3301      	adds	r3, #1
90024740:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
90024744:	b2b6      	uxth	r6, r6
90024746:	b280      	uxth	r0, r0
90024748:	ea4f 6a11 	mov.w	sl, r1, lsr #24
9002474c:	fb00 fe06 	mul.w	lr, r0, r6
90024750:	0136      	lsls	r6, r6, #4
90024752:	ea4f 6b15 	mov.w	fp, r5, lsr #24
90024756:	ebce 1000 	rsb	r0, lr, r0, lsl #4
9002475a:	eba6 070e 	sub.w	r7, r6, lr
9002475e:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
90024762:	ea4f 6914 	mov.w	r9, r4, lsr #24
90024766:	b280      	uxth	r0, r0
90024768:	b2bf      	uxth	r7, r7
9002476a:	1a1b      	subs	r3, r3, r0
9002476c:	ea4f 6812 	mov.w	r8, r2, lsr #24
90024770:	fb0a f607 	mul.w	r6, sl, r7
90024774:	b29b      	uxth	r3, r3
90024776:	fb0b 6603 	mla	r6, fp, r3, r6
9002477a:	fb00 6609 	mla	r6, r0, r9, r6
9002477e:	fb0e 6608 	mla	r6, lr, r8, r6
90024782:	f3c6 2607 	ubfx	r6, r6, #8, #8
90024786:	9600      	str	r6, [sp, #0]
90024788:	2e00      	cmp	r6, #0
9002478a:	f000 80be 	beq.w	9002490a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
9002478e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90024792:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
90024796:	9e02      	ldr	r6, [sp, #8]
90024798:	fb0b fc0c 	mul.w	ip, fp, ip
9002479c:	fb0b f505 	mul.w	r5, fp, r5
900247a0:	8836      	ldrh	r6, [r6, #0]
900247a2:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
900247a6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
900247aa:	9501      	str	r5, [sp, #4]
900247ac:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
900247b0:	44dc      	add	ip, fp
900247b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900247b6:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
900247ba:	9503      	str	r5, [sp, #12]
900247bc:	9d01      	ldr	r5, [sp, #4]
900247be:	f505 7c80 	add.w	ip, r5, #256	; 0x100
900247c2:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
900247c6:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
900247ca:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
900247ce:	fb0a fc0c 	mul.w	ip, sl, ip
900247d2:	ea4f 2b15 	mov.w	fp, r5, lsr #8
900247d6:	fb0a fa01 	mul.w	sl, sl, r1
900247da:	ea4f 251c 	mov.w	r5, ip, lsr #8
900247de:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
900247e2:	f50a 7180 	add.w	r1, sl, #256	; 0x100
900247e6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
900247ea:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
900247ee:	4465      	add	r5, ip
900247f0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
900247f4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
900247f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900247fc:	fb09 fc0c 	mul.w	ip, r9, ip
90024800:	0a2d      	lsrs	r5, r5, #8
90024802:	fb09 f904 	mul.w	r9, r9, r4
90024806:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002480a:	ea4f 211c 	mov.w	r1, ip, lsr #8
9002480e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90024812:	f509 7480 	add.w	r4, r9, #256	; 0x100
90024816:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9002481a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9002481e:	437d      	muls	r5, r7
90024820:	eb04 2919 	add.w	r9, r4, r9, lsr #8
90024824:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
90024828:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
9002482c:	4461      	add	r1, ip
9002482e:	fb08 f404 	mul.w	r4, r8, r4
90024832:	ea4f 2919 	mov.w	r9, r9, lsr #8
90024836:	fb08 f802 	mul.w	r8, r8, r2
9002483a:	0a09      	lsrs	r1, r1, #8
9002483c:	0a22      	lsrs	r2, r4, #8
9002483e:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
90024842:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90024846:	fb07 f70a 	mul.w	r7, r7, sl
9002484a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9002484e:	4414      	add	r4, r2
90024850:	f508 7280 	add.w	r2, r8, #256	; 0x100
90024854:	0a24      	lsrs	r4, r4, #8
90024856:	eb02 2818 	add.w	r8, r2, r8, lsr #8
9002485a:	9a03      	ldr	r2, [sp, #12]
9002485c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
90024860:	fb02 5503 	mla	r5, r2, r3, r5
90024864:	ea4f 2818 	mov.w	r8, r8, lsr #8
90024868:	9a00      	ldr	r2, [sp, #0]
9002486a:	fb04 540e 	mla	r4, r4, lr, r5
9002486e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
90024872:	1235      	asrs	r5, r6, #8
90024874:	fb01 4100 	mla	r1, r1, r0, r4
90024878:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9002487c:	0a09      	lsrs	r1, r1, #8
9002487e:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
90024882:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
90024886:	fb03 7101 	mla	r1, r3, r1, r7
9002488a:	fb0e 1e08 	mla	lr, lr, r8, r1
9002488e:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
90024892:	fb00 e101 	mla	r1, r0, r1, lr
90024896:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
9002489a:	b287      	uxth	r7, r0
9002489c:	0a09      	lsrs	r1, r1, #8
9002489e:	437a      	muls	r2, r7
900248a0:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
900248a4:	1c53      	adds	r3, r2, #1
900248a6:	4321      	orrs	r1, r4
900248a8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
900248ac:	0c0a      	lsrs	r2, r1, #16
900248ae:	f3c1 2407 	ubfx	r4, r1, #8, #8
900248b2:	ea6f 2313 	mvn.w	r3, r3, lsr #8
900248b6:	b2c8      	uxtb	r0, r1
900248b8:	fb12 f207 	smulbb	r2, r2, r7
900248bc:	fb14 f407 	smulbb	r4, r4, r7
900248c0:	b2db      	uxtb	r3, r3
900248c2:	fb10 f007 	smulbb	r0, r0, r7
900248c6:	fb05 2503 	mla	r5, r5, r3, r2
900248ca:	10f2      	asrs	r2, r6, #3
900248cc:	00f6      	lsls	r6, r6, #3
900248ce:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
900248d2:	b2ad      	uxth	r5, r5
900248d4:	b2f6      	uxtb	r6, r6
900248d6:	fb02 4203 	mla	r2, r2, r3, r4
900248da:	fb06 0303 	mla	r3, r6, r3, r0
900248de:	b294      	uxth	r4, r2
900248e0:	b299      	uxth	r1, r3
900248e2:	1c6b      	adds	r3, r5, #1
900248e4:	1c62      	adds	r2, r4, #1
900248e6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
900248ea:	1c4b      	adds	r3, r1, #1
900248ec:	eb02 2214 	add.w	r2, r2, r4, lsr #8
900248f0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
900248f4:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
900248f8:	0952      	lsrs	r2, r2, #5
900248fa:	f3c3 23c4 	ubfx	r3, r3, #11, #5
900248fe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90024902:	432b      	orrs	r3, r5
90024904:	4313      	orrs	r3, r2
90024906:	9a02      	ldr	r2, [sp, #8]
90024908:	8013      	strh	r3, [r2, #0]
9002490a:	b005      	add	sp, #20
9002490c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90024910:	2500      	movs	r5, #0
90024912:	e6ef      	b.n	900246f4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
90024914:	2100      	movs	r1, #0
90024916:	460d      	mov	r5, r1
90024918:	e6f7      	b.n	9002470a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
9002491a:	2100      	movs	r1, #0
9002491c:	e6f5      	b.n	9002470a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
9002491e:	4631      	mov	r1, r6
90024920:	e6f3      	b.n	9002470a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
90024922:	2400      	movs	r4, #0
90024924:	e702      	b.n	9002472c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
90024926:	2200      	movs	r2, #0
90024928:	4614      	mov	r4, r2
9002492a:	e70b      	b.n	90024744 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
9002492c:	4602      	mov	r2, r0
9002492e:	4604      	mov	r4, r0
90024930:	e708      	b.n	90024744 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
90024932:	2200      	movs	r2, #0
90024934:	e706      	b.n	90024744 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
90024936:	4632      	mov	r2, r6
90024938:	e704      	b.n	90024744 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

9002493a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9002493a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9002493e:	b09d      	sub	sp, #116	; 0x74
90024940:	9219      	str	r2, [sp, #100]	; 0x64
90024942:	9307      	str	r3, [sp, #28]
90024944:	9a2b      	ldr	r2, [sp, #172]	; 0xac
90024946:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
9002494a:	901b      	str	r0, [sp, #108]	; 0x6c
9002494c:	931a      	str	r3, [sp, #104]	; 0x68
9002494e:	6850      	ldr	r0, [r2, #4]
90024950:	9117      	str	r1, [sp, #92]	; 0x5c
90024952:	6812      	ldr	r2, [r2, #0]
90024954:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
90024958:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
9002495c:	fb00 1303 	mla	r3, r0, r3, r1
90024960:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90024964:	930a      	str	r3, [sp, #40]	; 0x28
90024966:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90024968:	681b      	ldr	r3, [r3, #0]
9002496a:	9310      	str	r3, [sp, #64]	; 0x40
9002496c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
90024970:	930b      	str	r3, [sp, #44]	; 0x2c
90024972:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90024974:	2b00      	cmp	r3, #0
90024976:	dc03      	bgt.n	90024980 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
90024978:	9b19      	ldr	r3, [sp, #100]	; 0x64
9002497a:	2b00      	cmp	r3, #0
9002497c:	f340 8375 	ble.w	9002506a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
90024980:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90024982:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90024986:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9002498a:	1e48      	subs	r0, r1, #1
9002498c:	1e57      	subs	r7, r2, #1
9002498e:	9b07      	ldr	r3, [sp, #28]
90024990:	2b00      	cmp	r3, #0
90024992:	f340 818e 	ble.w	90024cb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
90024996:	ea5f 4c24 	movs.w	ip, r4, asr #16
9002499a:	ea4f 4326 	mov.w	r3, r6, asr #16
9002499e:	d406      	bmi.n	900249ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
900249a0:	4584      	cmp	ip, r0
900249a2:	da04      	bge.n	900249ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
900249a4:	2b00      	cmp	r3, #0
900249a6:	db02      	blt.n	900249ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
900249a8:	42bb      	cmp	r3, r7
900249aa:	f2c0 8183 	blt.w	90024cb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
900249ae:	f11c 0c01 	adds.w	ip, ip, #1
900249b2:	f100 8173 	bmi.w	90024c9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
900249b6:	4561      	cmp	r1, ip
900249b8:	f2c0 8170 	blt.w	90024c9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
900249bc:	3301      	adds	r3, #1
900249be:	f100 816d 	bmi.w	90024c9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
900249c2:	429a      	cmp	r2, r3
900249c4:	f2c0 816a 	blt.w	90024c9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
900249c8:	9b07      	ldr	r3, [sp, #28]
900249ca:	9f0a      	ldr	r7, [sp, #40]	; 0x28
900249cc:	9318      	str	r3, [sp, #96]	; 0x60
900249ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
900249d0:	2b00      	cmp	r3, #0
900249d2:	f340 818c 	ble.w	90024cee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
900249d6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
900249d8:	ea4f 4c26 	mov.w	ip, r6, asr #16
900249dc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
900249de:	f3c4 3003 	ubfx	r0, r4, #12, #4
900249e2:	f8d2 e00c 	ldr.w	lr, [r2, #12]
900249e6:	1422      	asrs	r2, r4, #16
900249e8:	f3c6 3103 	ubfx	r1, r6, #12, #4
900249ec:	689b      	ldr	r3, [r3, #8]
900249ee:	f100 81cd 	bmi.w	90024d8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
900249f2:	f103 38ff 	add.w	r8, r3, #4294967295
900249f6:	4542      	cmp	r2, r8
900249f8:	f280 81c8 	bge.w	90024d8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
900249fc:	f1bc 0f00 	cmp.w	ip, #0
90024a00:	f2c0 81c4 	blt.w	90024d8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90024a04:	f10e 38ff 	add.w	r8, lr, #4294967295
90024a08:	45c4      	cmp	ip, r8
90024a0a:	f280 81bf 	bge.w	90024d8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90024a0e:	b21b      	sxth	r3, r3
90024a10:	9d10      	ldr	r5, [sp, #64]	; 0x40
90024a12:	fb0c 2203 	mla	r2, ip, r3, r2
90024a16:	eb05 0882 	add.w	r8, r5, r2, lsl #2
90024a1a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
90024a1e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
90024a22:	2800      	cmp	r0, #0
90024a24:	f000 81a9 	beq.w	90024d7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
90024a28:	f8d8 5004 	ldr.w	r5, [r8, #4]
90024a2c:	950c      	str	r5, [sp, #48]	; 0x30
90024a2e:	0e2d      	lsrs	r5, r5, #24
90024a30:	9513      	str	r5, [sp, #76]	; 0x4c
90024a32:	b181      	cbz	r1, 90024a56 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90024a34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
90024a38:	3b01      	subs	r3, #1
90024a3a:	009b      	lsls	r3, r3, #2
90024a3c:	3304      	adds	r3, #4
90024a3e:	eb08 0c03 	add.w	ip, r8, r3
90024a42:	f858 3003 	ldr.w	r3, [r8, r3]
90024a46:	9308      	str	r3, [sp, #32]
90024a48:	0e1b      	lsrs	r3, r3, #24
90024a4a:	9311      	str	r3, [sp, #68]	; 0x44
90024a4c:	f8dc 3004 	ldr.w	r3, [ip, #4]
90024a50:	930d      	str	r3, [sp, #52]	; 0x34
90024a52:	0e1b      	lsrs	r3, r3, #24
90024a54:	9314      	str	r3, [sp, #80]	; 0x50
90024a56:	b280      	uxth	r0, r0
90024a58:	9d11      	ldr	r5, [sp, #68]	; 0x44
90024a5a:	b289      	uxth	r1, r1
90024a5c:	fb00 f901 	mul.w	r9, r0, r1
90024a60:	0100      	lsls	r0, r0, #4
90024a62:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
90024a66:	eba0 0809 	sub.w	r8, r0, r9
90024a6a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
90024a6e:	9813      	ldr	r0, [sp, #76]	; 0x4c
90024a70:	b289      	uxth	r1, r1
90024a72:	fa1f f888 	uxth.w	r8, r8
90024a76:	1a5b      	subs	r3, r3, r1
90024a78:	fb08 f000 	mul.w	r0, r8, r0
90024a7c:	b29b      	uxth	r3, r3
90024a7e:	fb03 000e 	mla	r0, r3, lr, r0
90024a82:	fb01 0005 	mla	r0, r1, r5, r0
90024a86:	9d14      	ldr	r5, [sp, #80]	; 0x50
90024a88:	fb09 0005 	mla	r0, r9, r5, r0
90024a8c:	f3c0 2007 	ubfx	r0, r0, #8, #8
90024a90:	2800      	cmp	r0, #0
90024a92:	f000 80fa 	beq.w	90024c8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90024a96:	f1be 0fff 	cmp.w	lr, #255	; 0xff
90024a9a:	d01b      	beq.n	90024ad4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
90024a9c:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
90024aa0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90024aa4:	fb0e fa0a 	mul.w	sl, lr, sl
90024aa8:	fb0e fe02 	mul.w	lr, lr, r2
90024aac:	ea4f 221a 	mov.w	r2, sl, lsr #8
90024ab0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90024ab4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
90024ab8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90024abc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
90024ac0:	4452      	add	r2, sl
90024ac2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90024ac6:	0a12      	lsrs	r2, r2, #8
90024ac8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90024acc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90024ad0:	ea42 020c 	orr.w	r2, r2, ip
90024ad4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90024ad6:	2dff      	cmp	r5, #255	; 0xff
90024ad8:	d021      	beq.n	90024b1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
90024ada:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90024adc:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90024ae0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90024ae2:	fb05 fb0b 	mul.w	fp, r5, fp
90024ae6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90024ae8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90024aec:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90024aee:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90024af2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90024af6:	fb05 fa0a 	mul.w	sl, r5, sl
90024afa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90024afe:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90024b02:	44de      	add	lr, fp
90024b04:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90024b08:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90024b0c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90024b10:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90024b14:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90024b18:	ea4e 050a 	orr.w	r5, lr, sl
90024b1c:	950c      	str	r5, [sp, #48]	; 0x30
90024b1e:	9d11      	ldr	r5, [sp, #68]	; 0x44
90024b20:	2dff      	cmp	r5, #255	; 0xff
90024b22:	d021      	beq.n	90024b68 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
90024b24:	9d08      	ldr	r5, [sp, #32]
90024b26:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90024b2a:	9d11      	ldr	r5, [sp, #68]	; 0x44
90024b2c:	fb05 fb0b 	mul.w	fp, r5, fp
90024b30:	9d08      	ldr	r5, [sp, #32]
90024b32:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90024b36:	9d11      	ldr	r5, [sp, #68]	; 0x44
90024b38:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90024b3c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90024b40:	fb05 fa0a 	mul.w	sl, r5, sl
90024b44:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90024b48:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90024b4c:	44de      	add	lr, fp
90024b4e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90024b52:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90024b56:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90024b5a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90024b5e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90024b62:	ea4e 050a 	orr.w	r5, lr, sl
90024b66:	9508      	str	r5, [sp, #32]
90024b68:	9d14      	ldr	r5, [sp, #80]	; 0x50
90024b6a:	2dff      	cmp	r5, #255	; 0xff
90024b6c:	d021      	beq.n	90024bb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
90024b6e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90024b70:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90024b74:	9d14      	ldr	r5, [sp, #80]	; 0x50
90024b76:	fb05 fb0b 	mul.w	fp, r5, fp
90024b7a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90024b7c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90024b80:	9d14      	ldr	r5, [sp, #80]	; 0x50
90024b82:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90024b86:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90024b8a:	fb05 fa0a 	mul.w	sl, r5, sl
90024b8e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90024b92:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90024b96:	44de      	add	lr, fp
90024b98:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90024b9c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90024ba0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90024ba4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90024ba8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90024bac:	ea4e 050a 	orr.w	r5, lr, sl
90024bb0:	950d      	str	r5, [sp, #52]	; 0x34
90024bb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90024bb4:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
90024bb8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90024bbc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90024bc0:	9d08      	ldr	r5, [sp, #32]
90024bc2:	fb08 fc0c 	mul.w	ip, r8, ip
90024bc6:	fb03 cc0e 	mla	ip, r3, lr, ip
90024bca:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90024bce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90024bd0:	fb01 cc0e 	mla	ip, r1, lr, ip
90024bd4:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90024bd8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90024bda:	fb09 cc0e 	mla	ip, r9, lr, ip
90024bde:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
90024be2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90024be4:	fb08 f80e 	mul.w	r8, r8, lr
90024be8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90024bec:	fb03 8202 	mla	r2, r3, r2, r8
90024bf0:	9b08      	ldr	r3, [sp, #32]
90024bf2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90024bf6:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
90024bfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90024bfc:	fb01 220a 	mla	r2, r1, sl, r2
90024c00:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
90024c04:	883b      	ldrh	r3, [r7, #0]
90024c06:	fb09 2901 	mla	r9, r9, r1, r2
90024c0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90024c0c:	1219      	asrs	r1, r3, #8
90024c0e:	4342      	muls	r2, r0
90024c10:	ea4f 2919 	mov.w	r9, r9, lsr #8
90024c14:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90024c18:	1c50      	adds	r0, r2, #1
90024c1a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
90024c1e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
90024c22:	ea4c 0c09 	orr.w	ip, ip, r9
90024c26:	ea6f 2010 	mvn.w	r0, r0, lsr #8
90024c2a:	ea4f 421c 	mov.w	r2, ip, lsr #16
90024c2e:	f3cc 2e07 	ubfx	lr, ip, #8, #8
90024c32:	fa5f fc8c 	uxtb.w	ip, ip
90024c36:	fb12 f205 	smulbb	r2, r2, r5
90024c3a:	b2c0      	uxtb	r0, r0
90024c3c:	fb1c fc05 	smulbb	ip, ip, r5
90024c40:	fb01 2100 	mla	r1, r1, r0, r2
90024c44:	10da      	asrs	r2, r3, #3
90024c46:	fb1e fe05 	smulbb	lr, lr, r5
90024c4a:	00db      	lsls	r3, r3, #3
90024c4c:	b289      	uxth	r1, r1
90024c4e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90024c52:	b2db      	uxtb	r3, r3
90024c54:	fb02 e200 	mla	r2, r2, r0, lr
90024c58:	fb03 c300 	mla	r3, r3, r0, ip
90024c5c:	b292      	uxth	r2, r2
90024c5e:	fa1f fc83 	uxth.w	ip, r3
90024c62:	1c4b      	adds	r3, r1, #1
90024c64:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90024c68:	f10c 0301 	add.w	r3, ip, #1
90024c6c:	eb03 231c 	add.w	r3, r3, ip, lsr #8
90024c70:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
90024c74:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90024c78:	430b      	orrs	r3, r1
90024c7a:	1c51      	adds	r1, r2, #1
90024c7c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90024c80:	0952      	lsrs	r2, r2, #5
90024c82:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90024c86:	4313      	orrs	r3, r2
90024c88:	803b      	strh	r3, [r7, #0]
90024c8a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90024c8c:	3702      	adds	r7, #2
90024c8e:	441c      	add	r4, r3
90024c90:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90024c92:	441e      	add	r6, r3
90024c94:	9b18      	ldr	r3, [sp, #96]	; 0x60
90024c96:	3b01      	subs	r3, #1
90024c98:	9318      	str	r3, [sp, #96]	; 0x60
90024c9a:	e698      	b.n	900249ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
90024c9c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90024c9e:	441c      	add	r4, r3
90024ca0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90024ca2:	441e      	add	r6, r3
90024ca4:	9b07      	ldr	r3, [sp, #28]
90024ca6:	3b01      	subs	r3, #1
90024ca8:	9307      	str	r3, [sp, #28]
90024caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90024cac:	3302      	adds	r3, #2
90024cae:	930a      	str	r3, [sp, #40]	; 0x28
90024cb0:	e66d      	b.n	9002498e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
90024cb2:	d023      	beq.n	90024cfc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
90024cb4:	9b07      	ldr	r3, [sp, #28]
90024cb6:	9829      	ldr	r0, [sp, #164]	; 0xa4
90024cb8:	3b01      	subs	r3, #1
90024cba:	fb00 4003 	mla	r0, r0, r3, r4
90024cbe:	1400      	asrs	r0, r0, #16
90024cc0:	f53f ae82 	bmi.w	900249c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90024cc4:	3901      	subs	r1, #1
90024cc6:	4288      	cmp	r0, r1
90024cc8:	f6bf ae7e 	bge.w	900249c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90024ccc:	992a      	ldr	r1, [sp, #168]	; 0xa8
90024cce:	fb01 6303 	mla	r3, r1, r3, r6
90024cd2:	141b      	asrs	r3, r3, #16
90024cd4:	f53f ae78 	bmi.w	900249c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90024cd8:	3a01      	subs	r2, #1
90024cda:	4293      	cmp	r3, r2
90024cdc:	f6bf ae74 	bge.w	900249c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90024ce0:	f8dd b01c 	ldr.w	fp, [sp, #28]
90024ce4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
90024ce8:	f1bb 0f00 	cmp.w	fp, #0
90024cec:	dc6c      	bgt.n	90024dc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
90024cee:	9b07      	ldr	r3, [sp, #28]
90024cf0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
90024cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90024cf6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
90024cfa:	930a      	str	r3, [sp, #40]	; 0x28
90024cfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90024cfe:	2b00      	cmp	r3, #0
90024d00:	f340 81b3 	ble.w	9002506a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
90024d04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90024d08:	9b26      	ldr	r3, [sp, #152]	; 0x98
90024d0a:	ee30 0a04 	vadd.f32	s0, s0, s8
90024d0e:	ee70 0aa4 	vadd.f32	s1, s1, s9
90024d12:	eef0 6a62 	vmov.f32	s13, s5
90024d16:	eec7 7a00 	vdiv.f32	s15, s14, s0
90024d1a:	ee31 1a05 	vadd.f32	s2, s2, s10
90024d1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90024d22:	ee16 4a90 	vmov	r4, s13
90024d26:	eef0 6a43 	vmov.f32	s13, s6
90024d2a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90024d2e:	ee16 6a90 	vmov	r6, s13
90024d32:	ee20 7aa7 	vmul.f32	s14, s1, s15
90024d36:	ee61 7a27 	vmul.f32	s15, s2, s15
90024d3a:	ee77 2a62 	vsub.f32	s5, s14, s5
90024d3e:	ee37 3ac3 	vsub.f32	s6, s15, s6
90024d42:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90024d46:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90024d4a:	ee12 2a90 	vmov	r2, s5
90024d4e:	eef0 2a47 	vmov.f32	s5, s14
90024d52:	fb92 f3f3 	sdiv	r3, r2, r3
90024d56:	ee13 2a10 	vmov	r2, s6
90024d5a:	9329      	str	r3, [sp, #164]	; 0xa4
90024d5c:	9b26      	ldr	r3, [sp, #152]	; 0x98
90024d5e:	eeb0 3a67 	vmov.f32	s6, s15
90024d62:	fb92 f3f3 	sdiv	r3, r2, r3
90024d66:	932a      	str	r3, [sp, #168]	; 0xa8
90024d68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90024d6a:	9a19      	ldr	r2, [sp, #100]	; 0x64
90024d6c:	3b01      	subs	r3, #1
90024d6e:	9317      	str	r3, [sp, #92]	; 0x5c
90024d70:	9b26      	ldr	r3, [sp, #152]	; 0x98
90024d72:	bf08      	it	eq
90024d74:	4613      	moveq	r3, r2
90024d76:	9307      	str	r3, [sp, #28]
90024d78:	e5fb      	b.n	90024972 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
90024d7a:	2900      	cmp	r1, #0
90024d7c:	f43f ae6b 	beq.w	90024a56 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90024d80:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
90024d84:	9308      	str	r3, [sp, #32]
90024d86:	0e1b      	lsrs	r3, r3, #24
90024d88:	9311      	str	r3, [sp, #68]	; 0x44
90024d8a:	e664      	b.n	90024a56 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90024d8c:	f112 0801 	adds.w	r8, r2, #1
90024d90:	f53f af7b 	bmi.w	90024c8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90024d94:	4543      	cmp	r3, r8
90024d96:	f6ff af78 	blt.w	90024c8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90024d9a:	f11c 0801 	adds.w	r8, ip, #1
90024d9e:	f53f af74 	bmi.w	90024c8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90024da2:	45c6      	cmp	lr, r8
90024da4:	f6ff af71 	blt.w	90024c8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90024da8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
90024daa:	b21b      	sxth	r3, r3
90024dac:	9201      	str	r2, [sp, #4]
90024dae:	fa0f f28e 	sxth.w	r2, lr
90024db2:	e9cd 1504 	strd	r1, r5, [sp, #16]
90024db6:	e9cd c002 	strd	ip, r0, [sp, #8]
90024dba:	9200      	str	r2, [sp, #0]
90024dbc:	4639      	mov	r1, r7
90024dbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
90024dc0:	981b      	ldr	r0, [sp, #108]	; 0x6c
90024dc2:	f7ff fc79 	bl	900246b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
90024dc6:	e760      	b.n	90024c8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90024dc8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90024dca:	1427      	asrs	r7, r4, #16
90024dcc:	9d10      	ldr	r5, [sp, #64]	; 0x40
90024dce:	f3c4 3203 	ubfx	r2, r4, #12, #4
90024dd2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90024dd6:	1433      	asrs	r3, r6, #16
90024dd8:	f3c6 3003 	ubfx	r0, r6, #12, #4
90024ddc:	fb01 7303 	mla	r3, r1, r3, r7
90024de0:	eb05 0783 	add.w	r7, r5, r3, lsl #2
90024de4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
90024de8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
90024dec:	2a00      	cmp	r2, #0
90024dee:	f000 8133 	beq.w	90025058 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
90024df2:	687d      	ldr	r5, [r7, #4]
90024df4:	950e      	str	r5, [sp, #56]	; 0x38
90024df6:	0e2d      	lsrs	r5, r5, #24
90024df8:	9515      	str	r5, [sp, #84]	; 0x54
90024dfa:	b178      	cbz	r0, 90024e1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
90024dfc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
90024e00:	3901      	subs	r1, #1
90024e02:	0089      	lsls	r1, r1, #2
90024e04:	3104      	adds	r1, #4
90024e06:	eb07 0e01 	add.w	lr, r7, r1
90024e0a:	5879      	ldr	r1, [r7, r1]
90024e0c:	9109      	str	r1, [sp, #36]	; 0x24
90024e0e:	0e09      	lsrs	r1, r1, #24
90024e10:	9112      	str	r1, [sp, #72]	; 0x48
90024e12:	f8de 1004 	ldr.w	r1, [lr, #4]
90024e16:	910f      	str	r1, [sp, #60]	; 0x3c
90024e18:	0e09      	lsrs	r1, r1, #24
90024e1a:	9116      	str	r1, [sp, #88]	; 0x58
90024e1c:	b292      	uxth	r2, r2
90024e1e:	9915      	ldr	r1, [sp, #84]	; 0x54
90024e20:	b280      	uxth	r0, r0
90024e22:	9d12      	ldr	r5, [sp, #72]	; 0x48
90024e24:	fb02 f800 	mul.w	r8, r2, r0
90024e28:	0112      	lsls	r2, r2, #4
90024e2a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
90024e2e:	eba2 0e08 	sub.w	lr, r2, r8
90024e32:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
90024e36:	b280      	uxth	r0, r0
90024e38:	fa1f fe8e 	uxth.w	lr, lr
90024e3c:	1a12      	subs	r2, r2, r0
90024e3e:	fb0e f101 	mul.w	r1, lr, r1
90024e42:	b292      	uxth	r2, r2
90024e44:	fb02 110c 	mla	r1, r2, ip, r1
90024e48:	fb00 1105 	mla	r1, r0, r5, r1
90024e4c:	9d16      	ldr	r5, [sp, #88]	; 0x58
90024e4e:	fb08 1105 	mla	r1, r8, r5, r1
90024e52:	f3c1 2107 	ubfx	r1, r1, #8, #8
90024e56:	2900      	cmp	r1, #0
90024e58:	f000 80f5 	beq.w	90025046 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
90024e5c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
90024e60:	d019      	beq.n	90024e96 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
90024e62:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90024e66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90024e6a:	fb0c fa0a 	mul.w	sl, ip, sl
90024e6e:	fb0c fc03 	mul.w	ip, ip, r3
90024e72:	ea4f 231a 	mov.w	r3, sl, lsr #8
90024e76:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90024e7a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
90024e7e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90024e82:	eb07 271c 	add.w	r7, r7, ip, lsr #8
90024e86:	4453      	add	r3, sl
90024e88:	0a3f      	lsrs	r7, r7, #8
90024e8a:	0a1b      	lsrs	r3, r3, #8
90024e8c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90024e90:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90024e94:	433b      	orrs	r3, r7
90024e96:	9d15      	ldr	r5, [sp, #84]	; 0x54
90024e98:	2dff      	cmp	r5, #255	; 0xff
90024e9a:	d020      	beq.n	90024ede <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
90024e9c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90024e9e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90024ea2:	9d15      	ldr	r5, [sp, #84]	; 0x54
90024ea4:	436f      	muls	r7, r5
90024ea6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90024ea8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90024eac:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90024eb0:	9d15      	ldr	r5, [sp, #84]	; 0x54
90024eb2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90024eb6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90024eba:	fb05 fa0a 	mul.w	sl, r5, sl
90024ebe:	44bc      	add	ip, r7
90024ec0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90024ec4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90024ec8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90024ecc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90024ed0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90024ed4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90024ed8:	ea4c 050a 	orr.w	r5, ip, sl
90024edc:	950e      	str	r5, [sp, #56]	; 0x38
90024ede:	9d12      	ldr	r5, [sp, #72]	; 0x48
90024ee0:	2dff      	cmp	r5, #255	; 0xff
90024ee2:	d020      	beq.n	90024f26 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
90024ee4:	9d09      	ldr	r5, [sp, #36]	; 0x24
90024ee6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90024eea:	9d12      	ldr	r5, [sp, #72]	; 0x48
90024eec:	436f      	muls	r7, r5
90024eee:	9d09      	ldr	r5, [sp, #36]	; 0x24
90024ef0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90024ef4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90024ef8:	9d12      	ldr	r5, [sp, #72]	; 0x48
90024efa:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90024efe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90024f02:	fb05 fa0a 	mul.w	sl, r5, sl
90024f06:	44bc      	add	ip, r7
90024f08:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90024f0c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90024f10:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90024f14:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90024f18:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90024f1c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90024f20:	ea4c 050a 	orr.w	r5, ip, sl
90024f24:	9509      	str	r5, [sp, #36]	; 0x24
90024f26:	9d16      	ldr	r5, [sp, #88]	; 0x58
90024f28:	2dff      	cmp	r5, #255	; 0xff
90024f2a:	d020      	beq.n	90024f6e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
90024f2c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90024f2e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90024f32:	9d16      	ldr	r5, [sp, #88]	; 0x58
90024f34:	436f      	muls	r7, r5
90024f36:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90024f38:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90024f3c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90024f40:	9d16      	ldr	r5, [sp, #88]	; 0x58
90024f42:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90024f46:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90024f4a:	fb05 fa0a 	mul.w	sl, r5, sl
90024f4e:	44bc      	add	ip, r7
90024f50:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90024f54:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90024f58:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90024f5c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90024f60:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90024f64:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90024f68:	ea4c 050a 	orr.w	r5, ip, sl
90024f6c:	950f      	str	r5, [sp, #60]	; 0x3c
90024f6e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90024f70:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
90024f74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90024f78:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90024f7c:	9d09      	ldr	r5, [sp, #36]	; 0x24
90024f7e:	fb0e f707 	mul.w	r7, lr, r7
90024f82:	fb02 770c 	mla	r7, r2, ip, r7
90024f86:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90024f8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90024f8c:	fb00 770c 	mla	r7, r0, ip, r7
90024f90:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90024f94:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90024f96:	fb08 770c 	mla	r7, r8, ip, r7
90024f9a:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
90024f9e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90024fa0:	fb0e fe0c 	mul.w	lr, lr, ip
90024fa4:	0a3f      	lsrs	r7, r7, #8
90024fa6:	fb02 e303 	mla	r3, r2, r3, lr
90024faa:	9a09      	ldr	r2, [sp, #36]	; 0x24
90024fac:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
90024fb0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
90024fb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90024fb6:	fb00 330a 	mla	r3, r0, sl, r3
90024fba:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
90024fbe:	f8b9 0000 	ldrh.w	r0, [r9]
90024fc2:	fb08 3c0c 	mla	ip, r8, ip, r3
90024fc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90024fc8:	1202      	asrs	r2, r0, #8
90024fca:	4359      	muls	r1, r3
90024fcc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90024fd0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
90024fd4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90024fd8:	1c4b      	adds	r3, r1, #1
90024fda:	ea47 070c 	orr.w	r7, r7, ip
90024fde:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90024fe2:	0c3b      	lsrs	r3, r7, #16
90024fe4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
90024fe8:	f3c7 2c07 	ubfx	ip, r7, #8, #8
90024fec:	b2ff      	uxtb	r7, r7
90024fee:	fb13 f305 	smulbb	r3, r3, r5
90024ff2:	b2c9      	uxtb	r1, r1
90024ff4:	fb17 f705 	smulbb	r7, r7, r5
90024ff8:	fb02 3201 	mla	r2, r2, r1, r3
90024ffc:	10c3      	asrs	r3, r0, #3
90024ffe:	fb1c fc05 	smulbb	ip, ip, r5
90025002:	00c0      	lsls	r0, r0, #3
90025004:	b292      	uxth	r2, r2
90025006:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9002500a:	b2c0      	uxtb	r0, r0
9002500c:	fb03 c301 	mla	r3, r3, r1, ip
90025010:	fb00 7001 	mla	r0, r0, r1, r7
90025014:	1c51      	adds	r1, r2, #1
90025016:	b29b      	uxth	r3, r3
90025018:	b280      	uxth	r0, r0
9002501a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9002501e:	f100 0c01 	add.w	ip, r0, #1
90025022:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
90025026:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
9002502a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9002502e:	ea4c 0202 	orr.w	r2, ip, r2
90025032:	f103 0c01 	add.w	ip, r3, #1
90025036:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
9002503a:	095b      	lsrs	r3, r3, #5
9002503c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90025040:	431a      	orrs	r2, r3
90025042:	f8a9 2000 	strh.w	r2, [r9]
90025046:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90025048:	f109 0902 	add.w	r9, r9, #2
9002504c:	f10b 3bff 	add.w	fp, fp, #4294967295
90025050:	441c      	add	r4, r3
90025052:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90025054:	441e      	add	r6, r3
90025056:	e647      	b.n	90024ce8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
90025058:	2800      	cmp	r0, #0
9002505a:	f43f aedf 	beq.w	90024e1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
9002505e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
90025062:	9109      	str	r1, [sp, #36]	; 0x24
90025064:	0e09      	lsrs	r1, r1, #24
90025066:	9112      	str	r1, [sp, #72]	; 0x48
90025068:	e6d8      	b.n	90024e1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
9002506a:	b01d      	add	sp, #116	; 0x74
9002506c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90025070 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
90025070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90025074:	b085      	sub	sp, #20
90025076:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
9002507a:	9102      	str	r1, [sp, #8]
9002507c:	2c00      	cmp	r4, #0
9002507e:	fb04 7103 	mla	r1, r4, r3, r7
90025082:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
90025086:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
9002508a:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
9002508e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
90025092:	f2c0 810c 	blt.w	900252ae <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
90025096:	45a6      	cmp	lr, r4
90025098:	f340 8109 	ble.w	900252ae <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
9002509c:	2f00      	cmp	r7, #0
9002509e:	f2c0 8104 	blt.w	900252aa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
900250a2:	42bb      	cmp	r3, r7
900250a4:	f340 8101 	ble.w	900252aa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
900250a8:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
900250ac:	1c7a      	adds	r2, r7, #1
900250ae:	f100 8101 	bmi.w	900252b4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
900250b2:	4293      	cmp	r3, r2
900250b4:	f340 80fe 	ble.w	900252b4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
900250b8:	2e00      	cmp	r6, #0
900250ba:	f000 80fd 	beq.w	900252b8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
900250be:	f8dc 1004 	ldr.w	r1, [ip, #4]
900250c2:	3401      	adds	r4, #1
900250c4:	f100 80fc 	bmi.w	900252c0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
900250c8:	45a6      	cmp	lr, r4
900250ca:	f340 80f9 	ble.w	900252c0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
900250ce:	2800      	cmp	r0, #0
900250d0:	f000 80f9 	beq.w	900252c6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
900250d4:	2f00      	cmp	r7, #0
900250d6:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
900250da:	f2c0 80ef 	blt.w	900252bc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
900250de:	42bb      	cmp	r3, r7
900250e0:	f340 80ec 	ble.w	900252bc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
900250e4:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
900250e8:	3701      	adds	r7, #1
900250ea:	f100 80ef 	bmi.w	900252cc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
900250ee:	42bb      	cmp	r3, r7
900250f0:	f340 80ec 	ble.w	900252cc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
900250f4:	2e00      	cmp	r6, #0
900250f6:	f000 80eb 	beq.w	900252d0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
900250fa:	6852      	ldr	r2, [r2, #4]
900250fc:	b2b6      	uxth	r6, r6
900250fe:	b280      	uxth	r0, r0
90025100:	ea4f 6a11 	mov.w	sl, r1, lsr #24
90025104:	fb00 fe06 	mul.w	lr, r0, r6
90025108:	0136      	lsls	r6, r6, #4
9002510a:	ea4f 6b15 	mov.w	fp, r5, lsr #24
9002510e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
90025112:	eba6 070e 	sub.w	r7, r6, lr
90025116:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
9002511a:	ea4f 6914 	mov.w	r9, r4, lsr #24
9002511e:	b280      	uxth	r0, r0
90025120:	b2bf      	uxth	r7, r7
90025122:	1a1b      	subs	r3, r3, r0
90025124:	ea4f 6812 	mov.w	r8, r2, lsr #24
90025128:	fb07 f60a 	mul.w	r6, r7, sl
9002512c:	b29b      	uxth	r3, r3
9002512e:	fb0b 6603 	mla	r6, fp, r3, r6
90025132:	fb00 6609 	mla	r6, r0, r9, r6
90025136:	fb0e 6608 	mla	r6, lr, r8, r6
9002513a:	f3c6 2607 	ubfx	r6, r6, #8, #8
9002513e:	9600      	str	r6, [sp, #0]
90025140:	2e00      	cmp	r6, #0
90025142:	f000 80af 	beq.w	900252a4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
90025146:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9002514a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
9002514e:	9e02      	ldr	r6, [sp, #8]
90025150:	fb0b fc0c 	mul.w	ip, fp, ip
90025154:	fb0b f505 	mul.w	r5, fp, r5
90025158:	8836      	ldrh	r6, [r6, #0]
9002515a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
9002515e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90025162:	9501      	str	r5, [sp, #4]
90025164:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
90025168:	44dc      	add	ip, fp
9002516a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002516e:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
90025172:	9503      	str	r5, [sp, #12]
90025174:	9d01      	ldr	r5, [sp, #4]
90025176:	f505 7c80 	add.w	ip, r5, #256	; 0x100
9002517a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9002517e:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
90025182:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90025186:	fb0a fc0c 	mul.w	ip, sl, ip
9002518a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
9002518e:	fb0a fa01 	mul.w	sl, sl, r1
90025192:	ea4f 251c 	mov.w	r5, ip, lsr #8
90025196:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9002519a:	f50a 7180 	add.w	r1, sl, #256	; 0x100
9002519e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
900251a2:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
900251a6:	4465      	add	r5, ip
900251a8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
900251ac:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
900251b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900251b4:	fb09 fc0c 	mul.w	ip, r9, ip
900251b8:	0a2d      	lsrs	r5, r5, #8
900251ba:	fb09 f904 	mul.w	r9, r9, r4
900251be:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900251c2:	ea4f 211c 	mov.w	r1, ip, lsr #8
900251c6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
900251ca:	f509 7480 	add.w	r4, r9, #256	; 0x100
900251ce:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
900251d2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
900251d6:	437d      	muls	r5, r7
900251d8:	eb04 2919 	add.w	r9, r4, r9, lsr #8
900251dc:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
900251e0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
900251e4:	4461      	add	r1, ip
900251e6:	fb08 f404 	mul.w	r4, r8, r4
900251ea:	ea4f 2919 	mov.w	r9, r9, lsr #8
900251ee:	fb08 f802 	mul.w	r8, r8, r2
900251f2:	0a09      	lsrs	r1, r1, #8
900251f4:	0a22      	lsrs	r2, r4, #8
900251f6:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
900251fa:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
900251fe:	fb07 f70a 	mul.w	r7, r7, sl
90025202:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90025206:	4414      	add	r4, r2
90025208:	f508 7280 	add.w	r2, r8, #256	; 0x100
9002520c:	0a24      	lsrs	r4, r4, #8
9002520e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
90025212:	9a03      	ldr	r2, [sp, #12]
90025214:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
90025218:	fb02 5503 	mla	r5, r2, r3, r5
9002521c:	ea4f 2818 	mov.w	r8, r8, lsr #8
90025220:	fb04 540e 	mla	r4, r4, lr, r5
90025224:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
90025228:	fb01 4100 	mla	r1, r1, r0, r4
9002522c:	0a09      	lsrs	r1, r1, #8
9002522e:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
90025232:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
90025236:	fb03 7101 	mla	r1, r3, r1, r7
9002523a:	9b00      	ldr	r3, [sp, #0]
9002523c:	fb0e 1e08 	mla	lr, lr, r8, r1
90025240:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
90025244:	43da      	mvns	r2, r3
90025246:	1233      	asrs	r3, r6, #8
90025248:	fb00 e101 	mla	r1, r0, r1, lr
9002524c:	10f0      	asrs	r0, r6, #3
9002524e:	b2d2      	uxtb	r2, r2
90025250:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
90025254:	0a09      	lsrs	r1, r1, #8
90025256:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9002525a:	00f6      	lsls	r6, r6, #3
9002525c:	4353      	muls	r3, r2
9002525e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90025262:	4350      	muls	r0, r2
90025264:	b2f6      	uxtb	r6, r6
90025266:	4321      	orrs	r1, r4
90025268:	4356      	muls	r6, r2
9002526a:	1c5a      	adds	r2, r3, #1
9002526c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
90025270:	0c0b      	lsrs	r3, r1, #16
90025272:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90025276:	1c42      	adds	r2, r0, #1
90025278:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9002527c:	0a0a      	lsrs	r2, r1, #8
9002527e:	021b      	lsls	r3, r3, #8
90025280:	eb02 2210 	add.w	r2, r2, r0, lsr #8
90025284:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
90025288:	00d2      	lsls	r2, r2, #3
9002528a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9002528e:	4313      	orrs	r3, r2
90025290:	1c72      	adds	r2, r6, #1
90025292:	eb02 2616 	add.w	r6, r2, r6, lsr #8
90025296:	eb01 2116 	add.w	r1, r1, r6, lsr #8
9002529a:	f3c1 01c4 	ubfx	r1, r1, #3, #5
9002529e:	4319      	orrs	r1, r3
900252a0:	9b02      	ldr	r3, [sp, #8]
900252a2:	8019      	strh	r1, [r3, #0]
900252a4:	b005      	add	sp, #20
900252a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900252aa:	2500      	movs	r5, #0
900252ac:	e6fe      	b.n	900250ac <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
900252ae:	2100      	movs	r1, #0
900252b0:	460d      	mov	r5, r1
900252b2:	e706      	b.n	900250c2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
900252b4:	2100      	movs	r1, #0
900252b6:	e704      	b.n	900250c2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
900252b8:	4631      	mov	r1, r6
900252ba:	e702      	b.n	900250c2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
900252bc:	2400      	movs	r4, #0
900252be:	e713      	b.n	900250e8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
900252c0:	2200      	movs	r2, #0
900252c2:	4614      	mov	r4, r2
900252c4:	e71a      	b.n	900250fc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
900252c6:	4602      	mov	r2, r0
900252c8:	4604      	mov	r4, r0
900252ca:	e717      	b.n	900250fc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
900252cc:	2200      	movs	r2, #0
900252ce:	e715      	b.n	900250fc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
900252d0:	4632      	mov	r2, r6
900252d2:	e713      	b.n	900250fc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

900252d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900252d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900252d8:	b09b      	sub	sp, #108	; 0x6c
900252da:	9218      	str	r2, [sp, #96]	; 0x60
900252dc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
900252de:	9019      	str	r0, [sp, #100]	; 0x64
900252e0:	9116      	str	r1, [sp, #88]	; 0x58
900252e2:	6850      	ldr	r0, [r2, #4]
900252e4:	9307      	str	r3, [sp, #28]
900252e6:	6812      	ldr	r2, [r2, #0]
900252e8:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
900252ec:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
900252f0:	fb00 1303 	mla	r3, r0, r3, r1
900252f4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
900252f8:	930a      	str	r3, [sp, #40]	; 0x28
900252fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900252fc:	681b      	ldr	r3, [r3, #0]
900252fe:	930f      	str	r3, [sp, #60]	; 0x3c
90025300:	9b16      	ldr	r3, [sp, #88]	; 0x58
90025302:	2b00      	cmp	r3, #0
90025304:	dc03      	bgt.n	9002530e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90025306:	9b18      	ldr	r3, [sp, #96]	; 0x60
90025308:	2b00      	cmp	r3, #0
9002530a:	f340 8387 	ble.w	90025a1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
9002530e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90025310:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90025314:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90025318:	1e48      	subs	r0, r1, #1
9002531a:	1e57      	subs	r7, r2, #1
9002531c:	9b07      	ldr	r3, [sp, #28]
9002531e:	2b00      	cmp	r3, #0
90025320:	f340 8166 	ble.w	900255f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
90025324:	ea5f 4c24 	movs.w	ip, r4, asr #16
90025328:	ea4f 4326 	mov.w	r3, r6, asr #16
9002532c:	d406      	bmi.n	9002533c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9002532e:	4584      	cmp	ip, r0
90025330:	da04      	bge.n	9002533c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90025332:	2b00      	cmp	r3, #0
90025334:	db02      	blt.n	9002533c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90025336:	42bb      	cmp	r3, r7
90025338:	f2c0 815b 	blt.w	900255f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
9002533c:	f11c 0c01 	adds.w	ip, ip, #1
90025340:	f100 814b 	bmi.w	900255da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
90025344:	4561      	cmp	r1, ip
90025346:	f2c0 8148 	blt.w	900255da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
9002534a:	3301      	adds	r3, #1
9002534c:	f100 8145 	bmi.w	900255da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
90025350:	429a      	cmp	r2, r3
90025352:	f2c0 8142 	blt.w	900255da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
90025356:	9b07      	ldr	r3, [sp, #28]
90025358:	9f0a      	ldr	r7, [sp, #40]	; 0x28
9002535a:	9317      	str	r3, [sp, #92]	; 0x5c
9002535c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9002535e:	2b00      	cmp	r3, #0
90025360:	f340 8165 	ble.w	9002562e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
90025364:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
90025366:	ea4f 4c26 	mov.w	ip, r6, asr #16
9002536a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9002536c:	f3c4 3103 	ubfx	r1, r4, #12, #4
90025370:	f8d2 e00c 	ldr.w	lr, [r2, #12]
90025374:	1422      	asrs	r2, r4, #16
90025376:	f3c6 3003 	ubfx	r0, r6, #12, #4
9002537a:	689b      	ldr	r3, [r3, #8]
9002537c:	f100 81d5 	bmi.w	9002572a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
90025380:	f103 38ff 	add.w	r8, r3, #4294967295
90025384:	4542      	cmp	r2, r8
90025386:	f280 81d0 	bge.w	9002572a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
9002538a:	f1bc 0f00 	cmp.w	ip, #0
9002538e:	f2c0 81cc 	blt.w	9002572a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
90025392:	f10e 38ff 	add.w	r8, lr, #4294967295
90025396:	45c4      	cmp	ip, r8
90025398:	f280 81c7 	bge.w	9002572a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
9002539c:	b21b      	sxth	r3, r3
9002539e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
900253a0:	fb0c 2203 	mla	r2, ip, r3, r2
900253a4:	eb05 0882 	add.w	r8, r5, r2, lsl #2
900253a8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
900253ac:	ea4f 6e12 	mov.w	lr, r2, lsr #24
900253b0:	2900      	cmp	r1, #0
900253b2:	f000 8182 	beq.w	900256ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
900253b6:	f8d8 5004 	ldr.w	r5, [r8, #4]
900253ba:	950b      	str	r5, [sp, #44]	; 0x2c
900253bc:	0e2d      	lsrs	r5, r5, #24
900253be:	9512      	str	r5, [sp, #72]	; 0x48
900253c0:	b180      	cbz	r0, 900253e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
900253c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
900253c6:	3b01      	subs	r3, #1
900253c8:	009b      	lsls	r3, r3, #2
900253ca:	3304      	adds	r3, #4
900253cc:	eb08 0c03 	add.w	ip, r8, r3
900253d0:	f858 3003 	ldr.w	r3, [r8, r3]
900253d4:	9308      	str	r3, [sp, #32]
900253d6:	0e1b      	lsrs	r3, r3, #24
900253d8:	9310      	str	r3, [sp, #64]	; 0x40
900253da:	f8dc 3004 	ldr.w	r3, [ip, #4]
900253de:	930c      	str	r3, [sp, #48]	; 0x30
900253e0:	0e1b      	lsrs	r3, r3, #24
900253e2:	9313      	str	r3, [sp, #76]	; 0x4c
900253e4:	b289      	uxth	r1, r1
900253e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
900253e8:	b280      	uxth	r0, r0
900253ea:	9d10      	ldr	r5, [sp, #64]	; 0x40
900253ec:	fb01 f900 	mul.w	r9, r1, r0
900253f0:	0109      	lsls	r1, r1, #4
900253f2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
900253f6:	eba1 0809 	sub.w	r8, r1, r9
900253fa:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
900253fe:	b280      	uxth	r0, r0
90025400:	fa1f f888 	uxth.w	r8, r8
90025404:	1a09      	subs	r1, r1, r0
90025406:	fb08 f303 	mul.w	r3, r8, r3
9002540a:	b289      	uxth	r1, r1
9002540c:	fb01 330e 	mla	r3, r1, lr, r3
90025410:	fb00 3305 	mla	r3, r0, r5, r3
90025414:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90025416:	fb09 3305 	mla	r3, r9, r5, r3
9002541a:	f3c3 2307 	ubfx	r3, r3, #8, #8
9002541e:	2b00      	cmp	r3, #0
90025420:	f000 80d2 	beq.w	900255c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90025424:	f1be 0fff 	cmp.w	lr, #255	; 0xff
90025428:	d01b      	beq.n	90025462 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
9002542a:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
9002542e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90025432:	fb0e fa0a 	mul.w	sl, lr, sl
90025436:	fb0e fe02 	mul.w	lr, lr, r2
9002543a:	ea4f 221a 	mov.w	r2, sl, lsr #8
9002543e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90025442:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
90025446:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9002544a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9002544e:	4452      	add	r2, sl
90025450:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025454:	0a12      	lsrs	r2, r2, #8
90025456:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9002545a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9002545e:	ea42 020c 	orr.w	r2, r2, ip
90025462:	9d12      	ldr	r5, [sp, #72]	; 0x48
90025464:	2dff      	cmp	r5, #255	; 0xff
90025466:	d021      	beq.n	900254ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
90025468:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
9002546a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
9002546e:	9d12      	ldr	r5, [sp, #72]	; 0x48
90025470:	fb05 fb0b 	mul.w	fp, r5, fp
90025474:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90025476:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9002547a:	9d12      	ldr	r5, [sp, #72]	; 0x48
9002547c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90025480:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90025484:	fb05 fa0a 	mul.w	sl, r5, sl
90025488:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002548c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90025490:	44de      	add	lr, fp
90025492:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90025496:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9002549a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002549e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900254a2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900254a6:	ea4e 050a 	orr.w	r5, lr, sl
900254aa:	950b      	str	r5, [sp, #44]	; 0x2c
900254ac:	9d10      	ldr	r5, [sp, #64]	; 0x40
900254ae:	2dff      	cmp	r5, #255	; 0xff
900254b0:	d021      	beq.n	900254f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
900254b2:	9d08      	ldr	r5, [sp, #32]
900254b4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
900254b8:	9d10      	ldr	r5, [sp, #64]	; 0x40
900254ba:	fb05 fb0b 	mul.w	fp, r5, fp
900254be:	9d08      	ldr	r5, [sp, #32]
900254c0:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
900254c4:	9d10      	ldr	r5, [sp, #64]	; 0x40
900254c6:	fb05 fa0e 	mul.w	sl, r5, lr
900254ca:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
900254ce:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
900254d2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900254d6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
900254da:	44de      	add	lr, fp
900254dc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
900254e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900254e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900254e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900254ec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900254f0:	ea4e 050a 	orr.w	r5, lr, sl
900254f4:	9508      	str	r5, [sp, #32]
900254f6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900254f8:	2dff      	cmp	r5, #255	; 0xff
900254fa:	d021      	beq.n	90025540 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
900254fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900254fe:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90025502:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90025504:	fb05 fb0b 	mul.w	fp, r5, fp
90025508:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9002550a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9002550e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90025510:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90025514:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90025518:	fb05 fa0a 	mul.w	sl, r5, sl
9002551c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90025520:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90025524:	44de      	add	lr, fp
90025526:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9002552a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9002552e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025532:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90025536:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002553a:	ea4e 050a 	orr.w	r5, lr, sl
9002553e:	950c      	str	r5, [sp, #48]	; 0x30
90025540:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90025542:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
90025546:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
9002554a:	2bff      	cmp	r3, #255	; 0xff
9002554c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90025550:	9d08      	ldr	r5, [sp, #32]
90025552:	fb08 fc0c 	mul.w	ip, r8, ip
90025556:	fb01 cc0e 	mla	ip, r1, lr, ip
9002555a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
9002555e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90025560:	fb00 cc0e 	mla	ip, r0, lr, ip
90025564:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90025568:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
9002556a:	fb09 cc0e 	mla	ip, r9, lr, ip
9002556e:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
90025572:	fb08 f80e 	mul.w	r8, r8, lr
90025576:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002557a:	fb01 8202 	mla	r2, r1, r2, r8
9002557e:	9908      	ldr	r1, [sp, #32]
90025580:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025584:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
90025588:	990c      	ldr	r1, [sp, #48]	; 0x30
9002558a:	fb00 220a 	mla	r2, r0, sl, r2
9002558e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
90025592:	fb09 2900 	mla	r9, r9, r0, r2
90025596:	ea4f 2919 	mov.w	r9, r9, lsr #8
9002559a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
9002559e:	ea4c 0c09 	orr.w	ip, ip, r9
900255a2:	ea4f 221c 	mov.w	r2, ip, lsr #8
900255a6:	f040 8091 	bne.w	900256cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
900255aa:	ea4f 135c 	mov.w	r3, ip, lsr #5
900255ae:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
900255b2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900255b6:	f022 0207 	bic.w	r2, r2, #7
900255ba:	431a      	orrs	r2, r3
900255bc:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
900255c0:	ea4c 0c02 	orr.w	ip, ip, r2
900255c4:	f8a7 c000 	strh.w	ip, [r7]
900255c8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
900255ca:	3702      	adds	r7, #2
900255cc:	441c      	add	r4, r3
900255ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900255d0:	441e      	add	r6, r3
900255d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
900255d4:	3b01      	subs	r3, #1
900255d6:	9317      	str	r3, [sp, #92]	; 0x5c
900255d8:	e6c0      	b.n	9002535c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
900255da:	9b27      	ldr	r3, [sp, #156]	; 0x9c
900255dc:	441c      	add	r4, r3
900255de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900255e0:	441e      	add	r6, r3
900255e2:	9b07      	ldr	r3, [sp, #28]
900255e4:	3b01      	subs	r3, #1
900255e6:	9307      	str	r3, [sp, #28]
900255e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900255ea:	3302      	adds	r3, #2
900255ec:	930a      	str	r3, [sp, #40]	; 0x28
900255ee:	e695      	b.n	9002531c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
900255f0:	d024      	beq.n	9002563c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
900255f2:	9b07      	ldr	r3, [sp, #28]
900255f4:	9827      	ldr	r0, [sp, #156]	; 0x9c
900255f6:	3b01      	subs	r3, #1
900255f8:	fb00 4003 	mla	r0, r0, r3, r4
900255fc:	1400      	asrs	r0, r0, #16
900255fe:	f53f aeaa 	bmi.w	90025356 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90025602:	3901      	subs	r1, #1
90025604:	4288      	cmp	r0, r1
90025606:	f6bf aea6 	bge.w	90025356 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
9002560a:	9928      	ldr	r1, [sp, #160]	; 0xa0
9002560c:	fb01 6303 	mla	r3, r1, r3, r6
90025610:	141b      	asrs	r3, r3, #16
90025612:	f53f aea0 	bmi.w	90025356 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90025616:	3a01      	subs	r2, #1
90025618:	4293      	cmp	r3, r2
9002561a:	f6bf ae9c 	bge.w	90025356 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
9002561e:	f8dd b01c 	ldr.w	fp, [sp, #28]
90025622:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
90025626:	f1bb 0f00 	cmp.w	fp, #0
9002562a:	f300 809a 	bgt.w	90025762 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
9002562e:	9b07      	ldr	r3, [sp, #28]
90025630:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
90025634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90025636:	eb03 0345 	add.w	r3, r3, r5, lsl #1
9002563a:	930a      	str	r3, [sp, #40]	; 0x28
9002563c:	9b16      	ldr	r3, [sp, #88]	; 0x58
9002563e:	2b00      	cmp	r3, #0
90025640:	f340 81ec 	ble.w	90025a1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
90025644:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90025648:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002564a:	ee30 0a04 	vadd.f32	s0, s0, s8
9002564e:	ee70 0aa4 	vadd.f32	s1, s1, s9
90025652:	eef0 6a62 	vmov.f32	s13, s5
90025656:	eec7 7a00 	vdiv.f32	s15, s14, s0
9002565a:	ee31 1a05 	vadd.f32	s2, s2, s10
9002565e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90025662:	ee16 4a90 	vmov	r4, s13
90025666:	eef0 6a43 	vmov.f32	s13, s6
9002566a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002566e:	ee16 6a90 	vmov	r6, s13
90025672:	ee20 7aa7 	vmul.f32	s14, s1, s15
90025676:	ee61 7a27 	vmul.f32	s15, s2, s15
9002567a:	ee77 2a62 	vsub.f32	s5, s14, s5
9002567e:	ee37 3ac3 	vsub.f32	s6, s15, s6
90025682:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90025686:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002568a:	ee12 2a90 	vmov	r2, s5
9002568e:	eef0 2a47 	vmov.f32	s5, s14
90025692:	fb92 f3f3 	sdiv	r3, r2, r3
90025696:	ee13 2a10 	vmov	r2, s6
9002569a:	9327      	str	r3, [sp, #156]	; 0x9c
9002569c:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002569e:	eeb0 3a67 	vmov.f32	s6, s15
900256a2:	fb92 f3f3 	sdiv	r3, r2, r3
900256a6:	9328      	str	r3, [sp, #160]	; 0xa0
900256a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
900256aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
900256ac:	3b01      	subs	r3, #1
900256ae:	9316      	str	r3, [sp, #88]	; 0x58
900256b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
900256b2:	bf08      	it	eq
900256b4:	4613      	moveq	r3, r2
900256b6:	9307      	str	r3, [sp, #28]
900256b8:	e622      	b.n	90025300 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
900256ba:	2800      	cmp	r0, #0
900256bc:	f43f ae92 	beq.w	900253e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
900256c0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
900256c4:	9308      	str	r3, [sp, #32]
900256c6:	0e1b      	lsrs	r3, r3, #24
900256c8:	9310      	str	r3, [sp, #64]	; 0x40
900256ca:	e68b      	b.n	900253e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
900256cc:	8839      	ldrh	r1, [r7, #0]
900256ce:	43db      	mvns	r3, r3
900256d0:	4dd4      	ldr	r5, [pc, #848]	; (90025a24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
900256d2:	ea4f 2e21 	mov.w	lr, r1, asr #8
900256d6:	fa5f f883 	uxtb.w	r8, r3
900256da:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
900256de:	10c8      	asrs	r0, r1, #3
900256e0:	00cb      	lsls	r3, r1, #3
900256e2:	fb0e fe08 	mul.w	lr, lr, r8
900256e6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
900256ea:	b2db      	uxtb	r3, r3
900256ec:	f10e 0101 	add.w	r1, lr, #1
900256f0:	fb00 f008 	mul.w	r0, r0, r8
900256f4:	fb03 f308 	mul.w	r3, r3, r8
900256f8:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
900256fc:	ea4f 411c 	mov.w	r1, ip, lsr #16
90025700:	eb01 211e 	add.w	r1, r1, lr, lsr #8
90025704:	f100 0e01 	add.w	lr, r0, #1
90025708:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
9002570c:	b2c9      	uxtb	r1, r1
9002570e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
90025712:	ea05 2101 	and.w	r1, r5, r1, lsl #8
90025716:	00d2      	lsls	r2, r2, #3
90025718:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9002571c:	430a      	orrs	r2, r1
9002571e:	1c59      	adds	r1, r3, #1
90025720:	eb01 2313 	add.w	r3, r1, r3, lsr #8
90025724:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
90025728:	e748      	b.n	900255bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
9002572a:	f112 0801 	adds.w	r8, r2, #1
9002572e:	f53f af4b 	bmi.w	900255c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90025732:	4543      	cmp	r3, r8
90025734:	f6ff af48 	blt.w	900255c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90025738:	f11c 0801 	adds.w	r8, ip, #1
9002573c:	f53f af44 	bmi.w	900255c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90025740:	45c6      	cmp	lr, r8
90025742:	f6ff af41 	blt.w	900255c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90025746:	b21b      	sxth	r3, r3
90025748:	e9cd 2c01 	strd	r2, ip, [sp, #4]
9002574c:	fa0f f28e 	sxth.w	r2, lr
90025750:	e9cd 1003 	strd	r1, r0, [sp, #12]
90025754:	9200      	str	r2, [sp, #0]
90025756:	4639      	mov	r1, r7
90025758:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9002575a:	9819      	ldr	r0, [sp, #100]	; 0x64
9002575c:	f7ff fc88 	bl	90025070 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
90025760:	e732      	b.n	900255c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90025762:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90025764:	1421      	asrs	r1, r4, #16
90025766:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90025768:	f3c4 3203 	ubfx	r2, r4, #12, #4
9002576c:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
90025770:	1433      	asrs	r3, r6, #16
90025772:	f3c6 3003 	ubfx	r0, r6, #12, #4
90025776:	fb07 1303 	mla	r3, r7, r3, r1
9002577a:	990f      	ldr	r1, [sp, #60]	; 0x3c
9002577c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
90025780:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
90025784:	ea4f 6c13 	mov.w	ip, r3, lsr #24
90025788:	2a00      	cmp	r2, #0
9002578a:	f000 8108 	beq.w	9002599e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
9002578e:	684d      	ldr	r5, [r1, #4]
90025790:	950d      	str	r5, [sp, #52]	; 0x34
90025792:	0e2d      	lsrs	r5, r5, #24
90025794:	9514      	str	r5, [sp, #80]	; 0x50
90025796:	b178      	cbz	r0, 900257b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90025798:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
9002579c:	3f01      	subs	r7, #1
9002579e:	00bf      	lsls	r7, r7, #2
900257a0:	3704      	adds	r7, #4
900257a2:	eb01 0e07 	add.w	lr, r1, r7
900257a6:	59c9      	ldr	r1, [r1, r7]
900257a8:	9109      	str	r1, [sp, #36]	; 0x24
900257aa:	0e09      	lsrs	r1, r1, #24
900257ac:	9111      	str	r1, [sp, #68]	; 0x44
900257ae:	f8de 1004 	ldr.w	r1, [lr, #4]
900257b2:	910e      	str	r1, [sp, #56]	; 0x38
900257b4:	0e09      	lsrs	r1, r1, #24
900257b6:	9115      	str	r1, [sp, #84]	; 0x54
900257b8:	b292      	uxth	r2, r2
900257ba:	9d11      	ldr	r5, [sp, #68]	; 0x44
900257bc:	b280      	uxth	r0, r0
900257be:	fb02 f900 	mul.w	r9, r2, r0
900257c2:	0112      	lsls	r2, r2, #4
900257c4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
900257c8:	eba2 0e09 	sub.w	lr, r2, r9
900257cc:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
900257d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
900257d2:	b280      	uxth	r0, r0
900257d4:	fa1f fe8e 	uxth.w	lr, lr
900257d8:	1a09      	subs	r1, r1, r0
900257da:	fb0e f202 	mul.w	r2, lr, r2
900257de:	b289      	uxth	r1, r1
900257e0:	fb01 220c 	mla	r2, r1, ip, r2
900257e4:	fb00 2205 	mla	r2, r0, r5, r2
900257e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
900257ea:	fb09 2205 	mla	r2, r9, r5, r2
900257ee:	f3c2 2207 	ubfx	r2, r2, #8, #8
900257f2:	2a00      	cmp	r2, #0
900257f4:	f000 80ca 	beq.w	9002598c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
900257f8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
900257fc:	d019      	beq.n	90025832 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
900257fe:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90025802:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90025806:	fb0c fa0a 	mul.w	sl, ip, sl
9002580a:	fb0c fc03 	mul.w	ip, ip, r3
9002580e:	ea4f 231a 	mov.w	r3, sl, lsr #8
90025812:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90025816:	f50c 7780 	add.w	r7, ip, #256	; 0x100
9002581a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9002581e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
90025822:	4453      	add	r3, sl
90025824:	0a3f      	lsrs	r7, r7, #8
90025826:	0a1b      	lsrs	r3, r3, #8
90025828:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
9002582c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90025830:	433b      	orrs	r3, r7
90025832:	9d14      	ldr	r5, [sp, #80]	; 0x50
90025834:	2dff      	cmp	r5, #255	; 0xff
90025836:	d020      	beq.n	9002587a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
90025838:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9002583a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9002583e:	9d14      	ldr	r5, [sp, #80]	; 0x50
90025840:	436f      	muls	r7, r5
90025842:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90025844:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90025848:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9002584c:	9d14      	ldr	r5, [sp, #80]	; 0x50
9002584e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90025852:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025856:	fb05 fa0a 	mul.w	sl, r5, sl
9002585a:	44bc      	add	ip, r7
9002585c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90025860:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025864:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90025868:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002586c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025870:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025874:	ea4c 050a 	orr.w	r5, ip, sl
90025878:	950d      	str	r5, [sp, #52]	; 0x34
9002587a:	9d11      	ldr	r5, [sp, #68]	; 0x44
9002587c:	2dff      	cmp	r5, #255	; 0xff
9002587e:	d020      	beq.n	900258c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
90025880:	9d09      	ldr	r5, [sp, #36]	; 0x24
90025882:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90025886:	9d11      	ldr	r5, [sp, #68]	; 0x44
90025888:	436f      	muls	r7, r5
9002588a:	9d09      	ldr	r5, [sp, #36]	; 0x24
9002588c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
90025890:	9d11      	ldr	r5, [sp, #68]	; 0x44
90025892:	fb05 fa0c 	mul.w	sl, r5, ip
90025896:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9002589a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9002589e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900258a2:	44bc      	add	ip, r7
900258a4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
900258a8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
900258ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900258b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900258b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900258b8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900258bc:	ea4c 050a 	orr.w	r5, ip, sl
900258c0:	9509      	str	r5, [sp, #36]	; 0x24
900258c2:	9d15      	ldr	r5, [sp, #84]	; 0x54
900258c4:	2dff      	cmp	r5, #255	; 0xff
900258c6:	d020      	beq.n	9002590a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
900258c8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
900258ca:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
900258ce:	9d15      	ldr	r5, [sp, #84]	; 0x54
900258d0:	436f      	muls	r7, r5
900258d2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
900258d4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
900258d8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
900258dc:	9d15      	ldr	r5, [sp, #84]	; 0x54
900258de:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
900258e2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900258e6:	fb05 fa0a 	mul.w	sl, r5, sl
900258ea:	44bc      	add	ip, r7
900258ec:	f50a 7780 	add.w	r7, sl, #256	; 0x100
900258f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900258f4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
900258f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900258fc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025900:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025904:	ea4c 050a 	orr.w	r5, ip, sl
90025908:	950e      	str	r5, [sp, #56]	; 0x38
9002590a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9002590c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
90025910:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90025914:	2aff      	cmp	r2, #255	; 0xff
90025916:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9002591a:	9d09      	ldr	r5, [sp, #36]	; 0x24
9002591c:	fb0e f707 	mul.w	r7, lr, r7
90025920:	fb01 770c 	mla	r7, r1, ip, r7
90025924:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90025928:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9002592a:	fb00 770c 	mla	r7, r0, ip, r7
9002592e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90025932:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90025934:	fb09 770c 	mla	r7, r9, ip, r7
90025938:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
9002593c:	fb0e fe0c 	mul.w	lr, lr, ip
90025940:	ea4f 2717 	mov.w	r7, r7, lsr #8
90025944:	fb01 e303 	mla	r3, r1, r3, lr
90025948:	9909      	ldr	r1, [sp, #36]	; 0x24
9002594a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
9002594e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
90025952:	990e      	ldr	r1, [sp, #56]	; 0x38
90025954:	fb00 330a 	mla	r3, r0, sl, r3
90025958:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
9002595c:	fb09 3c0c 	mla	ip, r9, ip, r3
90025960:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025964:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90025968:	ea47 070c 	orr.w	r7, r7, ip
9002596c:	ea4f 2317 	mov.w	r3, r7, lsr #8
90025970:	d11e      	bne.n	900259b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
90025972:	097a      	lsrs	r2, r7, #5
90025974:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
90025978:	f3c7 07c4 	ubfx	r7, r7, #3, #5
9002597c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90025980:	f023 0307 	bic.w	r3, r3, #7
90025984:	4313      	orrs	r3, r2
90025986:	431f      	orrs	r7, r3
90025988:	f8a8 7000 	strh.w	r7, [r8]
9002598c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9002598e:	f108 0802 	add.w	r8, r8, #2
90025992:	f10b 3bff 	add.w	fp, fp, #4294967295
90025996:	441c      	add	r4, r3
90025998:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9002599a:	441e      	add	r6, r3
9002599c:	e643      	b.n	90025626 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
9002599e:	2800      	cmp	r0, #0
900259a0:	f43f af0a 	beq.w	900257b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
900259a4:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
900259a8:	9109      	str	r1, [sp, #36]	; 0x24
900259aa:	0e09      	lsrs	r1, r1, #24
900259ac:	9111      	str	r1, [sp, #68]	; 0x44
900259ae:	e703      	b.n	900257b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
900259b0:	f8b8 1000 	ldrh.w	r1, [r8]
900259b4:	43d2      	mvns	r2, r2
900259b6:	ea4f 2c21 	mov.w	ip, r1, asr #8
900259ba:	fa5f fe82 	uxtb.w	lr, r2
900259be:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900259c2:	10c8      	asrs	r0, r1, #3
900259c4:	00ca      	lsls	r2, r1, #3
900259c6:	fb0c fc0e 	mul.w	ip, ip, lr
900259ca:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
900259ce:	b2d2      	uxtb	r2, r2
900259d0:	f10c 0101 	add.w	r1, ip, #1
900259d4:	fb00 f00e 	mul.w	r0, r0, lr
900259d8:	fb02 f20e 	mul.w	r2, r2, lr
900259dc:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
900259e0:	0c39      	lsrs	r1, r7, #16
900259e2:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
900259e6:	490f      	ldr	r1, [pc, #60]	; (90025a24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
900259e8:	fa5f fc8c 	uxtb.w	ip, ip
900259ec:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
900259f0:	1c41      	adds	r1, r0, #1
900259f2:	eb01 2010 	add.w	r0, r1, r0, lsr #8
900259f6:	1c51      	adds	r1, r2, #1
900259f8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
900259fc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90025a00:	00c0      	lsls	r0, r0, #3
90025a02:	eb07 2712 	add.w	r7, r7, r2, lsr #8
90025a06:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90025a0a:	f3c7 07c4 	ubfx	r7, r7, #3, #5
90025a0e:	ea4c 0c00 	orr.w	ip, ip, r0
90025a12:	ea47 0c0c 	orr.w	ip, r7, ip
90025a16:	f8a8 c000 	strh.w	ip, [r8]
90025a1a:	e7b7      	b.n	9002598c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
90025a1c:	b01b      	add	sp, #108	; 0x6c
90025a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90025a22:	bf00      	nop
90025a24:	fffff800 	.word	0xfffff800

90025a28 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
90025a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90025a2c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
90025a30:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
90025a34:	2d00      	cmp	r5, #0
90025a36:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
90025a3a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
90025a3e:	fb05 0e03 	mla	lr, r5, r3, r0
90025a42:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
90025a46:	f2c0 808c 	blt.w	90025b62 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
90025a4a:	45a9      	cmp	r9, r5
90025a4c:	f340 8089 	ble.w	90025b62 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
90025a50:	2800      	cmp	r0, #0
90025a52:	f2c0 8084 	blt.w	90025b5e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
90025a56:	4580      	cmp	r8, r0
90025a58:	f340 8081 	ble.w	90025b5e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
90025a5c:	ea4f 045e 	mov.w	r4, lr, lsr #1
90025a60:	f01e 0f01 	tst.w	lr, #1
90025a64:	5d16      	ldrb	r6, [r2, r4]
90025a66:	bf0c      	ite	eq
90025a68:	f006 060f 	andeq.w	r6, r6, #15
90025a6c:	1136      	asrne	r6, r6, #4
90025a6e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
90025a72:	b2f6      	uxtb	r6, r6
90025a74:	1c44      	adds	r4, r0, #1
90025a76:	d477      	bmi.n	90025b68 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
90025a78:	45a0      	cmp	r8, r4
90025a7a:	dd75      	ble.n	90025b68 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
90025a7c:	2f00      	cmp	r7, #0
90025a7e:	d075      	beq.n	90025b6c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
90025a80:	f10e 0a01 	add.w	sl, lr, #1
90025a84:	ea4f 045a 	mov.w	r4, sl, lsr #1
90025a88:	f01a 0f01 	tst.w	sl, #1
90025a8c:	5d14      	ldrb	r4, [r2, r4]
90025a8e:	bf0c      	ite	eq
90025a90:	f004 040f 	andeq.w	r4, r4, #15
90025a94:	1124      	asrne	r4, r4, #4
90025a96:	eb04 1404 	add.w	r4, r4, r4, lsl #4
90025a9a:	b2e4      	uxtb	r4, r4
90025a9c:	3501      	adds	r5, #1
90025a9e:	d469      	bmi.n	90025b74 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
90025aa0:	45a9      	cmp	r9, r5
90025aa2:	dd67      	ble.n	90025b74 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
90025aa4:	f1bc 0f00 	cmp.w	ip, #0
90025aa8:	d067      	beq.n	90025b7a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
90025aaa:	2800      	cmp	r0, #0
90025aac:	db60      	blt.n	90025b70 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
90025aae:	4580      	cmp	r8, r0
90025ab0:	dd5e      	ble.n	90025b70 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
90025ab2:	eb03 090e 	add.w	r9, r3, lr
90025ab6:	ea4f 0559 	mov.w	r5, r9, lsr #1
90025aba:	f019 0f01 	tst.w	r9, #1
90025abe:	5d55      	ldrb	r5, [r2, r5]
90025ac0:	bf0c      	ite	eq
90025ac2:	f005 050f 	andeq.w	r5, r5, #15
90025ac6:	112d      	asrne	r5, r5, #4
90025ac8:	eb05 1505 	add.w	r5, r5, r5, lsl #4
90025acc:	b2ed      	uxtb	r5, r5
90025ace:	3001      	adds	r0, #1
90025ad0:	d456      	bmi.n	90025b80 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
90025ad2:	4580      	cmp	r8, r0
90025ad4:	dd54      	ble.n	90025b80 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
90025ad6:	2f00      	cmp	r7, #0
90025ad8:	d054      	beq.n	90025b84 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
90025ada:	3301      	adds	r3, #1
90025adc:	449e      	add	lr, r3
90025ade:	ea4f 035e 	mov.w	r3, lr, lsr #1
90025ae2:	f01e 0f01 	tst.w	lr, #1
90025ae6:	5cd0      	ldrb	r0, [r2, r3]
90025ae8:	bf0c      	ite	eq
90025aea:	f000 000f 	andeq.w	r0, r0, #15
90025aee:	1100      	asrne	r0, r0, #4
90025af0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90025af4:	b2c3      	uxtb	r3, r0
90025af6:	b2ba      	uxth	r2, r7
90025af8:	fa1f fc8c 	uxth.w	ip, ip
90025afc:	fb02 f00c 	mul.w	r0, r2, ip
90025b00:	0112      	lsls	r2, r2, #4
90025b02:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
90025b06:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
90025b0a:	1a12      	subs	r2, r2, r0
90025b0c:	fa1f fc8c 	uxth.w	ip, ip
90025b10:	b292      	uxth	r2, r2
90025b12:	eba7 070c 	sub.w	r7, r7, ip
90025b16:	4362      	muls	r2, r4
90025b18:	b2bf      	uxth	r7, r7
90025b1a:	fb06 2207 	mla	r2, r6, r7, r2
90025b1e:	fb0c 2505 	mla	r5, ip, r5, r2
90025b22:	fb00 5303 	mla	r3, r0, r3, r5
90025b26:	f3c3 2307 	ubfx	r3, r3, #8, #8
90025b2a:	b1b3      	cbz	r3, 90025b5a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
90025b2c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
90025b30:	435a      	muls	r2, r3
90025b32:	1c53      	adds	r3, r2, #1
90025b34:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90025b38:	4a2d      	ldr	r2, [pc, #180]	; (90025bf0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
90025b3a:	121b      	asrs	r3, r3, #8
90025b3c:	6812      	ldr	r2, [r2, #0]
90025b3e:	2bff      	cmp	r3, #255	; 0xff
90025b40:	ea4f 2612 	mov.w	r6, r2, lsr #8
90025b44:	d120      	bne.n	90025b88 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
90025b46:	0950      	lsrs	r0, r2, #5
90025b48:	4b2a      	ldr	r3, [pc, #168]	; (90025bf4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
90025b4a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90025b4e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90025b52:	4033      	ands	r3, r6
90025b54:	4318      	orrs	r0, r3
90025b56:	4302      	orrs	r2, r0
90025b58:	800a      	strh	r2, [r1, #0]
90025b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90025b5e:	2600      	movs	r6, #0
90025b60:	e788      	b.n	90025a74 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
90025b62:	2400      	movs	r4, #0
90025b64:	4626      	mov	r6, r4
90025b66:	e799      	b.n	90025a9c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90025b68:	2400      	movs	r4, #0
90025b6a:	e797      	b.n	90025a9c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90025b6c:	463c      	mov	r4, r7
90025b6e:	e795      	b.n	90025a9c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90025b70:	2500      	movs	r5, #0
90025b72:	e7ac      	b.n	90025ace <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
90025b74:	2300      	movs	r3, #0
90025b76:	461d      	mov	r5, r3
90025b78:	e7bd      	b.n	90025af6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90025b7a:	4663      	mov	r3, ip
90025b7c:	4665      	mov	r5, ip
90025b7e:	e7ba      	b.n	90025af6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90025b80:	2300      	movs	r3, #0
90025b82:	e7b8      	b.n	90025af6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90025b84:	463b      	mov	r3, r7
90025b86:	e7b6      	b.n	90025af6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90025b88:	880d      	ldrh	r5, [r1, #0]
90025b8a:	b29f      	uxth	r7, r3
90025b8c:	f3c2 4007 	ubfx	r0, r2, #16, #8
90025b90:	43db      	mvns	r3, r3
90025b92:	122c      	asrs	r4, r5, #8
90025b94:	fb10 f007 	smulbb	r0, r0, r7
90025b98:	b2db      	uxtb	r3, r3
90025b9a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
90025b9e:	b2f6      	uxtb	r6, r6
90025ba0:	b2d2      	uxtb	r2, r2
90025ba2:	fb04 0403 	mla	r4, r4, r3, r0
90025ba6:	10e8      	asrs	r0, r5, #3
90025ba8:	fb12 f207 	smulbb	r2, r2, r7
90025bac:	00ed      	lsls	r5, r5, #3
90025bae:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90025bb2:	b2a4      	uxth	r4, r4
90025bb4:	fb16 f607 	smulbb	r6, r6, r7
90025bb8:	b2ed      	uxtb	r5, r5
90025bba:	fb00 6603 	mla	r6, r0, r3, r6
90025bbe:	fb05 2303 	mla	r3, r5, r3, r2
90025bc2:	b2b0      	uxth	r0, r6
90025bc4:	b29a      	uxth	r2, r3
90025bc6:	1c63      	adds	r3, r4, #1
90025bc8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
90025bcc:	1c53      	adds	r3, r2, #1
90025bce:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90025bd2:	1c42      	adds	r2, r0, #1
90025bd4:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
90025bd8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90025bdc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90025be0:	0940      	lsrs	r0, r0, #5
90025be2:	4323      	orrs	r3, r4
90025be4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90025be8:	4303      	orrs	r3, r0
90025bea:	800b      	strh	r3, [r1, #0]
90025bec:	e7b5      	b.n	90025b5a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
90025bee:	bf00      	nop
90025bf0:	240281a4 	.word	0x240281a4
90025bf4:	00fff800 	.word	0x00fff800

90025bf8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90025bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90025bfc:	b097      	sub	sp, #92	; 0x5c
90025bfe:	9214      	str	r2, [sp, #80]	; 0x50
90025c00:	9309      	str	r3, [sp, #36]	; 0x24
90025c02:	9a25      	ldr	r2, [sp, #148]	; 0x94
90025c04:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
90025c08:	9015      	str	r0, [sp, #84]	; 0x54
90025c0a:	910d      	str	r1, [sp, #52]	; 0x34
90025c0c:	6850      	ldr	r0, [r2, #4]
90025c0e:	930f      	str	r3, [sp, #60]	; 0x3c
90025c10:	6812      	ldr	r2, [r2, #0]
90025c12:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
90025c16:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
90025c1a:	fb00 1303 	mla	r3, r0, r3, r1
90025c1e:	eb02 0943 	add.w	r9, r2, r3, lsl #1
90025c22:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90025c24:	689b      	ldr	r3, [r3, #8]
90025c26:	3301      	adds	r3, #1
90025c28:	f023 0301 	bic.w	r3, r3, #1
90025c2c:	930a      	str	r3, [sp, #40]	; 0x28
90025c2e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90025c30:	681f      	ldr	r7, [r3, #0]
90025c32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90025c34:	2b00      	cmp	r3, #0
90025c36:	dc03      	bgt.n	90025c40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90025c38:	9b14      	ldr	r3, [sp, #80]	; 0x50
90025c3a:	2b00      	cmp	r3, #0
90025c3c:	f340 8289 	ble.w	90026152 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
90025c40:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90025c42:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90025c46:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90025c4a:	1e48      	subs	r0, r1, #1
90025c4c:	f102 3cff 	add.w	ip, r2, #4294967295
90025c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
90025c52:	2b00      	cmp	r3, #0
90025c54:	f340 80c5 	ble.w	90025de2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
90025c58:	ea5f 4e24 	movs.w	lr, r4, asr #16
90025c5c:	ea4f 4326 	mov.w	r3, r6, asr #16
90025c60:	d406      	bmi.n	90025c70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90025c62:	4586      	cmp	lr, r0
90025c64:	da04      	bge.n	90025c70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90025c66:	2b00      	cmp	r3, #0
90025c68:	db02      	blt.n	90025c70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90025c6a:	4563      	cmp	r3, ip
90025c6c:	f2c0 80ba 	blt.w	90025de4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
90025c70:	f11e 0e01 	adds.w	lr, lr, #1
90025c74:	f100 80ab 	bmi.w	90025dce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90025c78:	4571      	cmp	r1, lr
90025c7a:	f2c0 80a8 	blt.w	90025dce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90025c7e:	3301      	adds	r3, #1
90025c80:	f100 80a5 	bmi.w	90025dce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90025c84:	429a      	cmp	r2, r3
90025c86:	f2c0 80a2 	blt.w	90025dce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90025c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
90025c8c:	46c8      	mov	r8, r9
90025c8e:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
90025c92:	930e      	str	r3, [sp, #56]	; 0x38
90025c94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90025c96:	2b00      	cmp	r3, #0
90025c98:	f340 80c4 	ble.w	90025e24 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
90025c9c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90025c9e:	1430      	asrs	r0, r6, #16
90025ca0:	f3c4 3203 	ubfx	r2, r4, #12, #4
90025ca4:	f3c6 3103 	ubfx	r1, r6, #12, #4
90025ca8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
90025cac:	1423      	asrs	r3, r4, #16
90025cae:	f100 814f 	bmi.w	90025f50 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90025cb2:	f10c 3bff 	add.w	fp, ip, #4294967295
90025cb6:	455b      	cmp	r3, fp
90025cb8:	f280 814a 	bge.w	90025f50 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90025cbc:	2800      	cmp	r0, #0
90025cbe:	f2c0 8147 	blt.w	90025f50 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90025cc2:	f10e 3bff 	add.w	fp, lr, #4294967295
90025cc6:	4558      	cmp	r0, fp
90025cc8:	f280 8142 	bge.w	90025f50 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90025ccc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
90025cce:	fb00 3305 	mla	r3, r0, r5, r3
90025cd2:	0858      	lsrs	r0, r3, #1
90025cd4:	07dd      	lsls	r5, r3, #31
90025cd6:	f817 c000 	ldrb.w	ip, [r7, r0]
90025cda:	bf54      	ite	pl
90025cdc:	f00c 0c0f 	andpl.w	ip, ip, #15
90025ce0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90025ce4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90025ce8:	fa5f fc8c 	uxtb.w	ip, ip
90025cec:	2a00      	cmp	r2, #0
90025cee:	f000 80dd 	beq.w	90025eac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
90025cf2:	1c58      	adds	r0, r3, #1
90025cf4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
90025cf8:	07c0      	lsls	r0, r0, #31
90025cfa:	f817 e00e 	ldrb.w	lr, [r7, lr]
90025cfe:	bf54      	ite	pl
90025d00:	f00e 0e0f 	andpl.w	lr, lr, #15
90025d04:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
90025d08:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
90025d0c:	fa5f f08e 	uxtb.w	r0, lr
90025d10:	9010      	str	r0, [sp, #64]	; 0x40
90025d12:	b1d9      	cbz	r1, 90025d4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90025d14:	4453      	add	r3, sl
90025d16:	0858      	lsrs	r0, r3, #1
90025d18:	07dd      	lsls	r5, r3, #31
90025d1a:	f103 0301 	add.w	r3, r3, #1
90025d1e:	5c38      	ldrb	r0, [r7, r0]
90025d20:	bf54      	ite	pl
90025d22:	f000 000f 	andpl.w	r0, r0, #15
90025d26:	1100      	asrmi	r0, r0, #4
90025d28:	07dd      	lsls	r5, r3, #31
90025d2a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90025d2e:	b2c0      	uxtb	r0, r0
90025d30:	900b      	str	r0, [sp, #44]	; 0x2c
90025d32:	ea4f 0053 	mov.w	r0, r3, lsr #1
90025d36:	f817 e000 	ldrb.w	lr, [r7, r0]
90025d3a:	bf54      	ite	pl
90025d3c:	f00e 030f 	andpl.w	r3, lr, #15
90025d40:	ea4f 132e 	movmi.w	r3, lr, asr #4
90025d44:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90025d48:	b2db      	uxtb	r3, r3
90025d4a:	9311      	str	r3, [sp, #68]	; 0x44
90025d4c:	b292      	uxth	r2, r2
90025d4e:	9d10      	ldr	r5, [sp, #64]	; 0x40
90025d50:	b289      	uxth	r1, r1
90025d52:	fb02 f301 	mul.w	r3, r2, r1
90025d56:	0112      	lsls	r2, r2, #4
90025d58:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
90025d5c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
90025d60:	1ad2      	subs	r2, r2, r3
90025d62:	b289      	uxth	r1, r1
90025d64:	b292      	uxth	r2, r2
90025d66:	1a40      	subs	r0, r0, r1
90025d68:	436a      	muls	r2, r5
90025d6a:	b280      	uxth	r0, r0
90025d6c:	fb0c 2c00 	mla	ip, ip, r0, r2
90025d70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90025d72:	fb01 c102 	mla	r1, r1, r2, ip
90025d76:	9a11      	ldr	r2, [sp, #68]	; 0x44
90025d78:	fb03 1302 	mla	r3, r3, r2, r1
90025d7c:	f3c3 2307 	ubfx	r3, r3, #8, #8
90025d80:	b1db      	cbz	r3, 90025dba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90025d82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90025d84:	4353      	muls	r3, r2
90025d86:	1c5a      	adds	r2, r3, #1
90025d88:	eb02 2313 	add.w	r3, r2, r3, lsr #8
90025d8c:	4ac6      	ldr	r2, [pc, #792]	; (900260a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
90025d8e:	121b      	asrs	r3, r3, #8
90025d90:	6812      	ldr	r2, [r2, #0]
90025d92:	2bff      	cmp	r3, #255	; 0xff
90025d94:	ea4f 2c12 	mov.w	ip, r2, lsr #8
90025d98:	f040 8099 	bne.w	90025ece <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
90025d9c:	0953      	lsrs	r3, r2, #5
90025d9e:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
90025da2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90025da6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90025daa:	f02c 0c07 	bic.w	ip, ip, #7
90025dae:	ea43 0c0c 	orr.w	ip, r3, ip
90025db2:	ea4c 0202 	orr.w	r2, ip, r2
90025db6:	f8a8 2000 	strh.w	r2, [r8]
90025dba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
90025dbc:	f108 0802 	add.w	r8, r8, #2
90025dc0:	441c      	add	r4, r3
90025dc2:	9b24      	ldr	r3, [sp, #144]	; 0x90
90025dc4:	441e      	add	r6, r3
90025dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90025dc8:	3b01      	subs	r3, #1
90025dca:	930e      	str	r3, [sp, #56]	; 0x38
90025dcc:	e762      	b.n	90025c94 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
90025dce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
90025dd0:	f109 0902 	add.w	r9, r9, #2
90025dd4:	441c      	add	r4, r3
90025dd6:	9b24      	ldr	r3, [sp, #144]	; 0x90
90025dd8:	441e      	add	r6, r3
90025dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
90025ddc:	3b01      	subs	r3, #1
90025dde:	9309      	str	r3, [sp, #36]	; 0x24
90025de0:	e736      	b.n	90025c50 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
90025de2:	d024      	beq.n	90025e2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
90025de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
90025de6:	9823      	ldr	r0, [sp, #140]	; 0x8c
90025de8:	3b01      	subs	r3, #1
90025dea:	fb00 4003 	mla	r0, r0, r3, r4
90025dee:	1400      	asrs	r0, r0, #16
90025df0:	f53f af4b 	bmi.w	90025c8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90025df4:	3901      	subs	r1, #1
90025df6:	4288      	cmp	r0, r1
90025df8:	f6bf af47 	bge.w	90025c8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90025dfc:	9924      	ldr	r1, [sp, #144]	; 0x90
90025dfe:	fb01 6303 	mla	r3, r1, r3, r6
90025e02:	141b      	asrs	r3, r3, #16
90025e04:	f53f af41 	bmi.w	90025c8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90025e08:	3a01      	subs	r2, #1
90025e0a:	4293      	cmp	r3, r2
90025e0c:	f6bf af3d 	bge.w	90025c8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90025e10:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
90025e14:	46c8      	mov	r8, r9
90025e16:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
90025e1a:	930e      	str	r3, [sp, #56]	; 0x38
90025e1c:	f1bb 0f00 	cmp.w	fp, #0
90025e20:	f300 80b7 	bgt.w	90025f92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
90025e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
90025e26:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
90025e2a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
90025e2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90025e30:	2b00      	cmp	r3, #0
90025e32:	f340 818e 	ble.w	90026152 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
90025e36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90025e3a:	9b20      	ldr	r3, [sp, #128]	; 0x80
90025e3c:	ee30 0a04 	vadd.f32	s0, s0, s8
90025e40:	ee70 0aa4 	vadd.f32	s1, s1, s9
90025e44:	eef0 6a62 	vmov.f32	s13, s5
90025e48:	eec7 7a00 	vdiv.f32	s15, s14, s0
90025e4c:	ee31 1a05 	vadd.f32	s2, s2, s10
90025e50:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90025e54:	ee16 4a90 	vmov	r4, s13
90025e58:	eef0 6a43 	vmov.f32	s13, s6
90025e5c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90025e60:	ee16 6a90 	vmov	r6, s13
90025e64:	ee20 7aa7 	vmul.f32	s14, s1, s15
90025e68:	ee61 7a27 	vmul.f32	s15, s2, s15
90025e6c:	ee77 2a62 	vsub.f32	s5, s14, s5
90025e70:	ee37 3ac3 	vsub.f32	s6, s15, s6
90025e74:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90025e78:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90025e7c:	ee12 2a90 	vmov	r2, s5
90025e80:	eef0 2a47 	vmov.f32	s5, s14
90025e84:	fb92 f3f3 	sdiv	r3, r2, r3
90025e88:	ee13 2a10 	vmov	r2, s6
90025e8c:	9323      	str	r3, [sp, #140]	; 0x8c
90025e8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
90025e90:	eeb0 3a67 	vmov.f32	s6, s15
90025e94:	fb92 f3f3 	sdiv	r3, r2, r3
90025e98:	9324      	str	r3, [sp, #144]	; 0x90
90025e9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90025e9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
90025e9e:	3b01      	subs	r3, #1
90025ea0:	930d      	str	r3, [sp, #52]	; 0x34
90025ea2:	9b20      	ldr	r3, [sp, #128]	; 0x80
90025ea4:	bf08      	it	eq
90025ea6:	4613      	moveq	r3, r2
90025ea8:	9309      	str	r3, [sp, #36]	; 0x24
90025eaa:	e6c2      	b.n	90025c32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90025eac:	2900      	cmp	r1, #0
90025eae:	f43f af4d 	beq.w	90025d4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90025eb2:	eb0a 0003 	add.w	r0, sl, r3
90025eb6:	0843      	lsrs	r3, r0, #1
90025eb8:	07c0      	lsls	r0, r0, #31
90025eba:	5cfb      	ldrb	r3, [r7, r3]
90025ebc:	bf54      	ite	pl
90025ebe:	f003 030f 	andpl.w	r3, r3, #15
90025ec2:	111b      	asrmi	r3, r3, #4
90025ec4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90025ec8:	b2db      	uxtb	r3, r3
90025eca:	930b      	str	r3, [sp, #44]	; 0x2c
90025ecc:	e73e      	b.n	90025d4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90025ece:	f8b8 e000 	ldrh.w	lr, [r8]
90025ed2:	fa1f fb83 	uxth.w	fp, r3
90025ed6:	f3c2 4107 	ubfx	r1, r2, #16, #8
90025eda:	43db      	mvns	r3, r3
90025edc:	ea4f 202e 	mov.w	r0, lr, asr #8
90025ee0:	fb11 f10b 	smulbb	r1, r1, fp
90025ee4:	b2db      	uxtb	r3, r3
90025ee6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90025eea:	fa5f fc8c 	uxtb.w	ip, ip
90025eee:	b2d2      	uxtb	r2, r2
90025ef0:	fb00 1003 	mla	r0, r0, r3, r1
90025ef4:	ea4f 01ee 	mov.w	r1, lr, asr #3
90025ef8:	fb1c fc0b 	smulbb	ip, ip, fp
90025efc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90025f00:	b280      	uxth	r0, r0
90025f02:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90025f06:	fb12 fb0b 	smulbb	fp, r2, fp
90025f0a:	fa5f fe8e 	uxtb.w	lr, lr
90025f0e:	fb01 cc03 	mla	ip, r1, r3, ip
90025f12:	fb0e bb03 	mla	fp, lr, r3, fp
90025f16:	1c43      	adds	r3, r0, #1
90025f18:	fa1f fc8c 	uxth.w	ip, ip
90025f1c:	fa1f fb8b 	uxth.w	fp, fp
90025f20:	eb03 2010 	add.w	r0, r3, r0, lsr #8
90025f24:	f10c 0101 	add.w	r1, ip, #1
90025f28:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
90025f2c:	f10b 0001 	add.w	r0, fp, #1
90025f30:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90025f34:	eb00 201b 	add.w	r0, r0, fp, lsr #8
90025f38:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
90025f3c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
90025f40:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90025f44:	4318      	orrs	r0, r3
90025f46:	ea40 000c 	orr.w	r0, r0, ip
90025f4a:	f8a8 0000 	strh.w	r0, [r8]
90025f4e:	e734      	b.n	90025dba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90025f50:	f113 0b01 	adds.w	fp, r3, #1
90025f54:	f53f af31 	bmi.w	90025dba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90025f58:	45dc      	cmp	ip, fp
90025f5a:	f6ff af2e 	blt.w	90025dba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90025f5e:	f110 0b01 	adds.w	fp, r0, #1
90025f62:	f53f af2a 	bmi.w	90025dba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90025f66:	45de      	cmp	lr, fp
90025f68:	f6ff af27 	blt.w	90025dba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90025f6c:	9302      	str	r3, [sp, #8]
90025f6e:	fa0f f38e 	sxth.w	r3, lr
90025f72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90025f74:	9301      	str	r3, [sp, #4]
90025f76:	fa0f f38c 	sxth.w	r3, ip
90025f7a:	e9cd 0203 	strd	r0, r2, [sp, #12]
90025f7e:	e9cd 1505 	strd	r1, r5, [sp, #20]
90025f82:	9300      	str	r3, [sp, #0]
90025f84:	463a      	mov	r2, r7
90025f86:	4653      	mov	r3, sl
90025f88:	4641      	mov	r1, r8
90025f8a:	9815      	ldr	r0, [sp, #84]	; 0x54
90025f8c:	f7ff fd4c 	bl	90025a28 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
90025f90:	e713      	b.n	90025dba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90025f92:	1422      	asrs	r2, r4, #16
90025f94:	9d0a      	ldr	r5, [sp, #40]	; 0x28
90025f96:	1433      	asrs	r3, r6, #16
90025f98:	f3c4 3103 	ubfx	r1, r4, #12, #4
90025f9c:	f3c6 3003 	ubfx	r0, r6, #12, #4
90025fa0:	fb05 2303 	mla	r3, r5, r3, r2
90025fa4:	085a      	lsrs	r2, r3, #1
90025fa6:	07dd      	lsls	r5, r3, #31
90025fa8:	5cba      	ldrb	r2, [r7, r2]
90025faa:	bf54      	ite	pl
90025fac:	f002 020f 	andpl.w	r2, r2, #15
90025fb0:	1112      	asrmi	r2, r2, #4
90025fb2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90025fb6:	b2d2      	uxtb	r2, r2
90025fb8:	2900      	cmp	r1, #0
90025fba:	d077      	beq.n	900260ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
90025fbc:	f103 0e01 	add.w	lr, r3, #1
90025fc0:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
90025fc4:	f01e 0f01 	tst.w	lr, #1
90025fc8:	f817 c00c 	ldrb.w	ip, [r7, ip]
90025fcc:	bf0c      	ite	eq
90025fce:	f00c 0c0f 	andeq.w	ip, ip, #15
90025fd2:	ea4f 1c2c 	movne.w	ip, ip, asr #4
90025fd6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90025fda:	fa5f f58c 	uxtb.w	r5, ip
90025fde:	9512      	str	r5, [sp, #72]	; 0x48
90025fe0:	b308      	cbz	r0, 90026026 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
90025fe2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90025fe4:	442b      	add	r3, r5
90025fe6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
90025fea:	07dd      	lsls	r5, r3, #31
90025fec:	f103 0301 	add.w	r3, r3, #1
90025ff0:	f817 c00c 	ldrb.w	ip, [r7, ip]
90025ff4:	bf54      	ite	pl
90025ff6:	f00c 0c0f 	andpl.w	ip, ip, #15
90025ffa:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90025ffe:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90026002:	fa5f f58c 	uxtb.w	r5, ip
90026006:	ea4f 0c53 	mov.w	ip, r3, lsr #1
9002600a:	950c      	str	r5, [sp, #48]	; 0x30
9002600c:	07dd      	lsls	r5, r3, #31
9002600e:	f817 c00c 	ldrb.w	ip, [r7, ip]
90026012:	bf54      	ite	pl
90026014:	f00c 0c0f 	andpl.w	ip, ip, #15
90026018:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
9002601c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90026020:	fa5f f38c 	uxtb.w	r3, ip
90026024:	9313      	str	r3, [sp, #76]	; 0x4c
90026026:	b289      	uxth	r1, r1
90026028:	9d12      	ldr	r5, [sp, #72]	; 0x48
9002602a:	b280      	uxth	r0, r0
9002602c:	fb01 f300 	mul.w	r3, r1, r0
90026030:	0109      	lsls	r1, r1, #4
90026032:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
90026036:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
9002603a:	1ac9      	subs	r1, r1, r3
9002603c:	b280      	uxth	r0, r0
9002603e:	b289      	uxth	r1, r1
90026040:	ebac 0c00 	sub.w	ip, ip, r0
90026044:	4369      	muls	r1, r5
90026046:	fa1f fc8c 	uxth.w	ip, ip
9002604a:	fb02 120c 	mla	r2, r2, ip, r1
9002604e:	990c      	ldr	r1, [sp, #48]	; 0x30
90026050:	fb00 2001 	mla	r0, r0, r1, r2
90026054:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90026056:	fb03 0302 	mla	r3, r3, r2, r0
9002605a:	f3c3 2307 	ubfx	r3, r3, #8, #8
9002605e:	b1d3      	cbz	r3, 90026096 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
90026060:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90026062:	4353      	muls	r3, r2
90026064:	1c5a      	adds	r2, r3, #1
90026066:	eb02 2313 	add.w	r3, r2, r3, lsr #8
9002606a:	4a0f      	ldr	r2, [pc, #60]	; (900260a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
9002606c:	121b      	asrs	r3, r3, #8
9002606e:	6812      	ldr	r2, [r2, #0]
90026070:	2bff      	cmp	r3, #255	; 0xff
90026072:	ea4f 2c12 	mov.w	ip, r2, lsr #8
90026076:	d12d      	bne.n	900260d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
90026078:	0953      	lsrs	r3, r2, #5
9002607a:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
9002607e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90026082:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90026086:	f02c 0c07 	bic.w	ip, ip, #7
9002608a:	ea43 0c0c 	orr.w	ip, r3, ip
9002608e:	ea4c 0202 	orr.w	r2, ip, r2
90026092:	f8a8 2000 	strh.w	r2, [r8]
90026096:	9b23      	ldr	r3, [sp, #140]	; 0x8c
90026098:	f108 0802 	add.w	r8, r8, #2
9002609c:	f10b 3bff 	add.w	fp, fp, #4294967295
900260a0:	441c      	add	r4, r3
900260a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
900260a4:	441e      	add	r6, r3
900260a6:	e6b9      	b.n	90025e1c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
900260a8:	240281a4 	.word	0x240281a4
900260ac:	2800      	cmp	r0, #0
900260ae:	d0ba      	beq.n	90026026 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
900260b0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
900260b2:	442b      	add	r3, r5
900260b4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
900260b8:	07db      	lsls	r3, r3, #31
900260ba:	f817 c00c 	ldrb.w	ip, [r7, ip]
900260be:	bf54      	ite	pl
900260c0:	f00c 0c0f 	andpl.w	ip, ip, #15
900260c4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
900260c8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900260cc:	fa5f f38c 	uxtb.w	r3, ip
900260d0:	930c      	str	r3, [sp, #48]	; 0x30
900260d2:	e7a8      	b.n	90026026 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
900260d4:	f8b8 e000 	ldrh.w	lr, [r8]
900260d8:	fa1f fa83 	uxth.w	sl, r3
900260dc:	f3c2 4107 	ubfx	r1, r2, #16, #8
900260e0:	43db      	mvns	r3, r3
900260e2:	ea4f 202e 	mov.w	r0, lr, asr #8
900260e6:	fb11 f10a 	smulbb	r1, r1, sl
900260ea:	b2db      	uxtb	r3, r3
900260ec:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
900260f0:	b2d2      	uxtb	r2, r2
900260f2:	fa5f fc8c 	uxtb.w	ip, ip
900260f6:	fb00 1003 	mla	r0, r0, r3, r1
900260fa:	ea4f 01ee 	mov.w	r1, lr, asr #3
900260fe:	fb12 f20a 	smulbb	r2, r2, sl
90026102:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90026106:	b280      	uxth	r0, r0
90026108:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9002610c:	fb1c fc0a 	smulbb	ip, ip, sl
90026110:	fa5f fe8e 	uxtb.w	lr, lr
90026114:	fb0e 2203 	mla	r2, lr, r3, r2
90026118:	fb01 cc03 	mla	ip, r1, r3, ip
9002611c:	1c43      	adds	r3, r0, #1
9002611e:	b292      	uxth	r2, r2
90026120:	eb03 2010 	add.w	r0, r3, r0, lsr #8
90026124:	1c51      	adds	r1, r2, #1
90026126:	fa1f fc8c 	uxth.w	ip, ip
9002612a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9002612e:	eb01 2112 	add.w	r1, r1, r2, lsr #8
90026132:	f3c1 21c4 	ubfx	r1, r1, #11, #5
90026136:	4308      	orrs	r0, r1
90026138:	f10c 0101 	add.w	r1, ip, #1
9002613c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90026140:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
90026144:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90026148:	ea40 000c 	orr.w	r0, r0, ip
9002614c:	f8a8 0000 	strh.w	r0, [r8]
90026150:	e7a1      	b.n	90026096 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
90026152:	b017      	add	sp, #92	; 0x5c
90026154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90026158 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
90026158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9002615c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
90026160:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
90026164:	2d00      	cmp	r5, #0
90026166:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
9002616a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
9002616e:	fb05 0e03 	mla	lr, r5, r3, r0
90026172:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
90026176:	f2c0 80b0 	blt.w	900262da <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
9002617a:	45a9      	cmp	r9, r5
9002617c:	f340 80ad 	ble.w	900262da <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
90026180:	2800      	cmp	r0, #0
90026182:	f2c0 80a8 	blt.w	900262d6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
90026186:	4580      	cmp	r8, r0
90026188:	f340 80a5 	ble.w	900262d6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
9002618c:	ea4f 045e 	mov.w	r4, lr, lsr #1
90026190:	f01e 0f01 	tst.w	lr, #1
90026194:	5d16      	ldrb	r6, [r2, r4]
90026196:	bf0c      	ite	eq
90026198:	f006 060f 	andeq.w	r6, r6, #15
9002619c:	1136      	asrne	r6, r6, #4
9002619e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
900261a2:	b2f6      	uxtb	r6, r6
900261a4:	1c44      	adds	r4, r0, #1
900261a6:	f100 809b 	bmi.w	900262e0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
900261aa:	45a0      	cmp	r8, r4
900261ac:	f340 8098 	ble.w	900262e0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
900261b0:	2f00      	cmp	r7, #0
900261b2:	f000 8097 	beq.w	900262e4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
900261b6:	f10e 0a01 	add.w	sl, lr, #1
900261ba:	ea4f 045a 	mov.w	r4, sl, lsr #1
900261be:	f01a 0f01 	tst.w	sl, #1
900261c2:	5d14      	ldrb	r4, [r2, r4]
900261c4:	bf0c      	ite	eq
900261c6:	f004 040f 	andeq.w	r4, r4, #15
900261ca:	1124      	asrne	r4, r4, #4
900261cc:	eb04 1404 	add.w	r4, r4, r4, lsl #4
900261d0:	b2e4      	uxtb	r4, r4
900261d2:	3501      	adds	r5, #1
900261d4:	f100 808a 	bmi.w	900262ec <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
900261d8:	45a9      	cmp	r9, r5
900261da:	f340 8087 	ble.w	900262ec <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
900261de:	f1bc 0f00 	cmp.w	ip, #0
900261e2:	f000 8086 	beq.w	900262f2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
900261e6:	2800      	cmp	r0, #0
900261e8:	db7e      	blt.n	900262e8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
900261ea:	4580      	cmp	r8, r0
900261ec:	dd7c      	ble.n	900262e8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
900261ee:	eb03 090e 	add.w	r9, r3, lr
900261f2:	ea4f 0559 	mov.w	r5, r9, lsr #1
900261f6:	f019 0f01 	tst.w	r9, #1
900261fa:	5d55      	ldrb	r5, [r2, r5]
900261fc:	bf0c      	ite	eq
900261fe:	f005 050f 	andeq.w	r5, r5, #15
90026202:	112d      	asrne	r5, r5, #4
90026204:	eb05 1505 	add.w	r5, r5, r5, lsl #4
90026208:	b2ed      	uxtb	r5, r5
9002620a:	3001      	adds	r0, #1
9002620c:	d474      	bmi.n	900262f8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
9002620e:	4580      	cmp	r8, r0
90026210:	dd72      	ble.n	900262f8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
90026212:	2f00      	cmp	r7, #0
90026214:	d072      	beq.n	900262fc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
90026216:	3301      	adds	r3, #1
90026218:	449e      	add	lr, r3
9002621a:	ea4f 035e 	mov.w	r3, lr, lsr #1
9002621e:	f01e 0f01 	tst.w	lr, #1
90026222:	5cd0      	ldrb	r0, [r2, r3]
90026224:	bf0c      	ite	eq
90026226:	f000 000f 	andeq.w	r0, r0, #15
9002622a:	1100      	asrne	r0, r0, #4
9002622c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90026230:	b2c3      	uxtb	r3, r0
90026232:	b2ba      	uxth	r2, r7
90026234:	fa1f fc8c 	uxth.w	ip, ip
90026238:	fb02 f00c 	mul.w	r0, r2, ip
9002623c:	0112      	lsls	r2, r2, #4
9002623e:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
90026242:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
90026246:	1a12      	subs	r2, r2, r0
90026248:	fa1f fc8c 	uxth.w	ip, ip
9002624c:	b292      	uxth	r2, r2
9002624e:	eba7 070c 	sub.w	r7, r7, ip
90026252:	4362      	muls	r2, r4
90026254:	b2bf      	uxth	r7, r7
90026256:	fb06 2207 	mla	r2, r6, r7, r2
9002625a:	fb0c 2505 	mla	r5, ip, r5, r2
9002625e:	fb00 5303 	mla	r3, r0, r3, r5
90026262:	f3c3 2307 	ubfx	r3, r3, #8, #8
90026266:	b3a3      	cbz	r3, 900262d2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
90026268:	4a25      	ldr	r2, [pc, #148]	; (90026300 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
9002626a:	880e      	ldrh	r6, [r1, #0]
9002626c:	6815      	ldr	r5, [r2, #0]
9002626e:	b29a      	uxth	r2, r3
90026270:	1234      	asrs	r4, r6, #8
90026272:	43db      	mvns	r3, r3
90026274:	f3c5 4007 	ubfx	r0, r5, #16, #8
90026278:	f3c5 2707 	ubfx	r7, r5, #8, #8
9002627c:	b2db      	uxtb	r3, r3
9002627e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
90026282:	fb10 f002 	smulbb	r0, r0, r2
90026286:	b2ed      	uxtb	r5, r5
90026288:	fb17 f702 	smulbb	r7, r7, r2
9002628c:	fb04 0403 	mla	r4, r4, r3, r0
90026290:	10f0      	asrs	r0, r6, #3
90026292:	fb15 f202 	smulbb	r2, r5, r2
90026296:	00f6      	lsls	r6, r6, #3
90026298:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9002629c:	b2a4      	uxth	r4, r4
9002629e:	b2f6      	uxtb	r6, r6
900262a0:	fb00 7003 	mla	r0, r0, r3, r7
900262a4:	fb06 2303 	mla	r3, r6, r3, r2
900262a8:	b280      	uxth	r0, r0
900262aa:	b29a      	uxth	r2, r3
900262ac:	1c63      	adds	r3, r4, #1
900262ae:	eb03 2414 	add.w	r4, r3, r4, lsr #8
900262b2:	1c53      	adds	r3, r2, #1
900262b4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
900262b8:	1c42      	adds	r2, r0, #1
900262ba:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
900262be:	eb02 2010 	add.w	r0, r2, r0, lsr #8
900262c2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
900262c6:	0940      	lsrs	r0, r0, #5
900262c8:	4323      	orrs	r3, r4
900262ca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900262ce:	4303      	orrs	r3, r0
900262d0:	800b      	strh	r3, [r1, #0]
900262d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900262d6:	2600      	movs	r6, #0
900262d8:	e764      	b.n	900261a4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
900262da:	2400      	movs	r4, #0
900262dc:	4626      	mov	r6, r4
900262de:	e778      	b.n	900261d2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
900262e0:	2400      	movs	r4, #0
900262e2:	e776      	b.n	900261d2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
900262e4:	463c      	mov	r4, r7
900262e6:	e774      	b.n	900261d2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
900262e8:	2500      	movs	r5, #0
900262ea:	e78e      	b.n	9002620a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
900262ec:	2300      	movs	r3, #0
900262ee:	461d      	mov	r5, r3
900262f0:	e79f      	b.n	90026232 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
900262f2:	4663      	mov	r3, ip
900262f4:	4665      	mov	r5, ip
900262f6:	e79c      	b.n	90026232 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
900262f8:	2300      	movs	r3, #0
900262fa:	e79a      	b.n	90026232 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
900262fc:	463b      	mov	r3, r7
900262fe:	e798      	b.n	90026232 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
90026300:	240281a4 	.word	0x240281a4

90026304 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90026304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90026308:	b093      	sub	sp, #76	; 0x4c
9002630a:	461d      	mov	r5, r3
9002630c:	920c      	str	r2, [sp, #48]	; 0x30
9002630e:	9a21      	ldr	r2, [sp, #132]	; 0x84
90026310:	9011      	str	r0, [sp, #68]	; 0x44
90026312:	9107      	str	r1, [sp, #28]
90026314:	6850      	ldr	r0, [r2, #4]
90026316:	6812      	ldr	r2, [r2, #0]
90026318:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
9002631c:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
90026320:	fb00 1303 	mla	r3, r0, r3, r1
90026324:	eb02 0943 	add.w	r9, r2, r3, lsl #1
90026328:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002632a:	689b      	ldr	r3, [r3, #8]
9002632c:	3301      	adds	r3, #1
9002632e:	f023 0301 	bic.w	r3, r3, #1
90026332:	9306      	str	r3, [sp, #24]
90026334:	9b24      	ldr	r3, [sp, #144]	; 0x90
90026336:	681f      	ldr	r7, [r3, #0]
90026338:	9b07      	ldr	r3, [sp, #28]
9002633a:	2b00      	cmp	r3, #0
9002633c:	dc03      	bgt.n	90026346 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
9002633e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90026340:	2b00      	cmp	r3, #0
90026342:	f340 8267 	ble.w	90026814 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
90026346:	9b24      	ldr	r3, [sp, #144]	; 0x90
90026348:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9002634c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90026350:	1e48      	subs	r0, r1, #1
90026352:	f102 3cff 	add.w	ip, r2, #4294967295
90026356:	2d00      	cmp	r5, #0
90026358:	f340 80b7 	ble.w	900264ca <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
9002635c:	ea5f 4e24 	movs.w	lr, r4, asr #16
90026360:	ea4f 4326 	mov.w	r3, r6, asr #16
90026364:	d406      	bmi.n	90026374 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90026366:	4586      	cmp	lr, r0
90026368:	da04      	bge.n	90026374 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9002636a:	2b00      	cmp	r3, #0
9002636c:	db02      	blt.n	90026374 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9002636e:	4563      	cmp	r3, ip
90026370:	f2c0 80ac 	blt.w	900264cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90026374:	f11e 0e01 	adds.w	lr, lr, #1
90026378:	f100 809f 	bmi.w	900264ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
9002637c:	4571      	cmp	r1, lr
9002637e:	f2c0 809c 	blt.w	900264ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90026382:	3301      	adds	r3, #1
90026384:	f100 8099 	bmi.w	900264ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90026388:	429a      	cmp	r2, r3
9002638a:	f2c0 8096 	blt.w	900264ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
9002638e:	46c8      	mov	r8, r9
90026390:	f9bd a018 	ldrsh.w	sl, [sp, #24]
90026394:	9509      	str	r5, [sp, #36]	; 0x24
90026396:	9b09      	ldr	r3, [sp, #36]	; 0x24
90026398:	2b00      	cmp	r3, #0
9002639a:	f340 80b5 	ble.w	90026508 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9002639e:	f3c4 3303 	ubfx	r3, r4, #12, #4
900263a2:	1430      	asrs	r0, r6, #16
900263a4:	f3c6 3103 	ubfx	r1, r6, #12, #4
900263a8:	9308      	str	r3, [sp, #32]
900263aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
900263ac:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
900263b0:	1423      	asrs	r3, r4, #16
900263b2:	f100 813f 	bmi.w	90026634 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
900263b6:	f10c 3bff 	add.w	fp, ip, #4294967295
900263ba:	455b      	cmp	r3, fp
900263bc:	f280 813a 	bge.w	90026634 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
900263c0:	2800      	cmp	r0, #0
900263c2:	f2c0 8137 	blt.w	90026634 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
900263c6:	f10e 3bff 	add.w	fp, lr, #4294967295
900263ca:	4558      	cmp	r0, fp
900263cc:	f280 8132 	bge.w	90026634 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
900263d0:	9a06      	ldr	r2, [sp, #24]
900263d2:	fb00 3302 	mla	r3, r0, r2, r3
900263d6:	0858      	lsrs	r0, r3, #1
900263d8:	07da      	lsls	r2, r3, #31
900263da:	9a08      	ldr	r2, [sp, #32]
900263dc:	f817 c000 	ldrb.w	ip, [r7, r0]
900263e0:	bf54      	ite	pl
900263e2:	f00c 0c0f 	andpl.w	ip, ip, #15
900263e6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
900263ea:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900263ee:	fa5f fc8c 	uxtb.w	ip, ip
900263f2:	2a00      	cmp	r2, #0
900263f4:	f000 80cc 	beq.w	90026590 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
900263f8:	1c58      	adds	r0, r3, #1
900263fa:	ea4f 0e50 	mov.w	lr, r0, lsr #1
900263fe:	07c0      	lsls	r0, r0, #31
90026400:	f817 e00e 	ldrb.w	lr, [r7, lr]
90026404:	bf54      	ite	pl
90026406:	f00e 0e0f 	andpl.w	lr, lr, #15
9002640a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
9002640e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
90026412:	fa5f fe8e 	uxtb.w	lr, lr
90026416:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
9002641a:	b1b9      	cbz	r1, 9002644c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
9002641c:	4453      	add	r3, sl
9002641e:	0858      	lsrs	r0, r3, #1
90026420:	07da      	lsls	r2, r3, #31
90026422:	5c38      	ldrb	r0, [r7, r0]
90026424:	bf54      	ite	pl
90026426:	f000 000f 	andpl.w	r0, r0, #15
9002642a:	1100      	asrmi	r0, r0, #4
9002642c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90026430:	b2c0      	uxtb	r0, r0
90026432:	900a      	str	r0, [sp, #40]	; 0x28
90026434:	1c58      	adds	r0, r3, #1
90026436:	0843      	lsrs	r3, r0, #1
90026438:	07c2      	lsls	r2, r0, #31
9002643a:	5cfb      	ldrb	r3, [r7, r3]
9002643c:	bf54      	ite	pl
9002643e:	f003 030f 	andpl.w	r3, r3, #15
90026442:	111b      	asrmi	r3, r3, #4
90026444:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90026448:	b2db      	uxtb	r3, r3
9002644a:	930e      	str	r3, [sp, #56]	; 0x38
9002644c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
90026450:	b289      	uxth	r1, r1
90026452:	fb02 f301 	mul.w	r3, r2, r1
90026456:	0112      	lsls	r2, r2, #4
90026458:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
9002645c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
90026460:	1ad2      	subs	r2, r2, r3
90026462:	b289      	uxth	r1, r1
90026464:	b292      	uxth	r2, r2
90026466:	1a40      	subs	r0, r0, r1
90026468:	fa1f fe80 	uxth.w	lr, r0
9002646c:	980d      	ldr	r0, [sp, #52]	; 0x34
9002646e:	4342      	muls	r2, r0
90026470:	fb0c 2c0e 	mla	ip, ip, lr, r2
90026474:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90026476:	fb01 c102 	mla	r1, r1, r2, ip
9002647a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
9002647c:	fb03 1302 	mla	r3, r3, r2, r1
90026480:	f3c3 2307 	ubfx	r3, r3, #8, #8
90026484:	2bff      	cmp	r3, #255	; 0xff
90026486:	f040 8094 	bne.w	900265b2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
9002648a:	4bbf      	ldr	r3, [pc, #764]	; (90026788 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
9002648c:	681a      	ldr	r2, [r3, #0]
9002648e:	4bbf      	ldr	r3, [pc, #764]	; (9002678c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
90026490:	0951      	lsrs	r1, r2, #5
90026492:	ea03 2312 	and.w	r3, r3, r2, lsr #8
90026496:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9002649a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9002649e:	430b      	orrs	r3, r1
900264a0:	4313      	orrs	r3, r2
900264a2:	f8a8 3000 	strh.w	r3, [r8]
900264a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900264a8:	f108 0802 	add.w	r8, r8, #2
900264ac:	441c      	add	r4, r3
900264ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
900264b0:	441e      	add	r6, r3
900264b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
900264b4:	3b01      	subs	r3, #1
900264b6:	9309      	str	r3, [sp, #36]	; 0x24
900264b8:	e76d      	b.n	90026396 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900264ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900264bc:	3d01      	subs	r5, #1
900264be:	f109 0902 	add.w	r9, r9, #2
900264c2:	441c      	add	r4, r3
900264c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
900264c6:	441e      	add	r6, r3
900264c8:	e745      	b.n	90026356 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
900264ca:	d021      	beq.n	90026510 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
900264cc:	1e6b      	subs	r3, r5, #1
900264ce:	981f      	ldr	r0, [sp, #124]	; 0x7c
900264d0:	fb00 4003 	mla	r0, r0, r3, r4
900264d4:	1400      	asrs	r0, r0, #16
900264d6:	f53f af5a 	bmi.w	9002638e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900264da:	3901      	subs	r1, #1
900264dc:	4288      	cmp	r0, r1
900264de:	f6bf af56 	bge.w	9002638e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900264e2:	9920      	ldr	r1, [sp, #128]	; 0x80
900264e4:	fb01 6303 	mla	r3, r1, r3, r6
900264e8:	141b      	asrs	r3, r3, #16
900264ea:	f53f af50 	bmi.w	9002638e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900264ee:	3a01      	subs	r2, #1
900264f0:	4293      	cmp	r3, r2
900264f2:	f6bf af4c 	bge.w	9002638e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900264f6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
900264fa:	46a8      	mov	r8, r5
900264fc:	46ce      	mov	lr, r9
900264fe:	9308      	str	r3, [sp, #32]
90026500:	f1b8 0f00 	cmp.w	r8, #0
90026504:	f300 80b6 	bgt.w	90026674 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90026508:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
9002650c:	eb09 0945 	add.w	r9, r9, r5, lsl #1
90026510:	9b07      	ldr	r3, [sp, #28]
90026512:	2b00      	cmp	r3, #0
90026514:	f340 817e 	ble.w	90026814 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
90026518:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9002651c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9002651e:	ee30 0a04 	vadd.f32	s0, s0, s8
90026522:	ee70 0aa4 	vadd.f32	s1, s1, s9
90026526:	eef0 6a62 	vmov.f32	s13, s5
9002652a:	eec7 7a00 	vdiv.f32	s15, s14, s0
9002652e:	ee31 1a05 	vadd.f32	s2, s2, s10
90026532:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90026536:	ee16 4a90 	vmov	r4, s13
9002653a:	eef0 6a43 	vmov.f32	s13, s6
9002653e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90026542:	ee16 6a90 	vmov	r6, s13
90026546:	ee20 7aa7 	vmul.f32	s14, s1, s15
9002654a:	ee61 7a27 	vmul.f32	s15, s2, s15
9002654e:	ee77 2a62 	vsub.f32	s5, s14, s5
90026552:	ee37 3ac3 	vsub.f32	s6, s15, s6
90026556:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9002655a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002655e:	ee12 2a90 	vmov	r2, s5
90026562:	eef0 2a47 	vmov.f32	s5, s14
90026566:	fb92 f3f3 	sdiv	r3, r2, r3
9002656a:	ee13 2a10 	vmov	r2, s6
9002656e:	931f      	str	r3, [sp, #124]	; 0x7c
90026570:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90026572:	eeb0 3a67 	vmov.f32	s6, s15
90026576:	fb92 f3f3 	sdiv	r3, r2, r3
9002657a:	9320      	str	r3, [sp, #128]	; 0x80
9002657c:	9b07      	ldr	r3, [sp, #28]
9002657e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90026580:	3b01      	subs	r3, #1
90026582:	9307      	str	r3, [sp, #28]
90026584:	bf08      	it	eq
90026586:	4615      	moveq	r5, r2
90026588:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9002658a:	bf18      	it	ne
9002658c:	461d      	movne	r5, r3
9002658e:	e6d3      	b.n	90026338 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
90026590:	2900      	cmp	r1, #0
90026592:	f43f af5b 	beq.w	9002644c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
90026596:	eb0a 0003 	add.w	r0, sl, r3
9002659a:	0843      	lsrs	r3, r0, #1
9002659c:	07c0      	lsls	r0, r0, #31
9002659e:	5cfb      	ldrb	r3, [r7, r3]
900265a0:	bf54      	ite	pl
900265a2:	f003 030f 	andpl.w	r3, r3, #15
900265a6:	111b      	asrmi	r3, r3, #4
900265a8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
900265ac:	b2db      	uxtb	r3, r3
900265ae:	930a      	str	r3, [sp, #40]	; 0x28
900265b0:	e74c      	b.n	9002644c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
900265b2:	2b00      	cmp	r3, #0
900265b4:	f43f af77 	beq.w	900264a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
900265b8:	4a73      	ldr	r2, [pc, #460]	; (90026788 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
900265ba:	fa1f fe83 	uxth.w	lr, r3
900265be:	f8b8 c000 	ldrh.w	ip, [r8]
900265c2:	43db      	mvns	r3, r3
900265c4:	6810      	ldr	r0, [r2, #0]
900265c6:	ea4f 212c 	mov.w	r1, ip, asr #8
900265ca:	f3c0 4207 	ubfx	r2, r0, #16, #8
900265ce:	b2db      	uxtb	r3, r3
900265d0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
900265d4:	f3c0 2b07 	ubfx	fp, r0, #8, #8
900265d8:	fb12 f20e 	smulbb	r2, r2, lr
900265dc:	b2c0      	uxtb	r0, r0
900265de:	fb1b fb0e 	smulbb	fp, fp, lr
900265e2:	fb01 2103 	mla	r1, r1, r3, r2
900265e6:	ea4f 02ec 	mov.w	r2, ip, asr #3
900265ea:	fb10 fe0e 	smulbb	lr, r0, lr
900265ee:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
900265f2:	b289      	uxth	r1, r1
900265f4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
900265f8:	fa5f fc8c 	uxtb.w	ip, ip
900265fc:	fb02 b203 	mla	r2, r2, r3, fp
90026600:	1c48      	adds	r0, r1, #1
90026602:	fb0c e303 	mla	r3, ip, r3, lr
90026606:	b292      	uxth	r2, r2
90026608:	b29b      	uxth	r3, r3
9002660a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
9002660e:	f102 0b01 	add.w	fp, r2, #1
90026612:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
90026616:	1c59      	adds	r1, r3, #1
90026618:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
9002661c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
90026620:	0952      	lsrs	r2, r2, #5
90026622:	f3c1 21c4 	ubfx	r1, r1, #11, #5
90026626:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9002662a:	4301      	orrs	r1, r0
9002662c:	4311      	orrs	r1, r2
9002662e:	f8a8 1000 	strh.w	r1, [r8]
90026632:	e738      	b.n	900264a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90026634:	f113 0b01 	adds.w	fp, r3, #1
90026638:	f53f af35 	bmi.w	900264a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
9002663c:	45dc      	cmp	ip, fp
9002663e:	f6ff af32 	blt.w	900264a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90026642:	f110 0b01 	adds.w	fp, r0, #1
90026646:	f53f af2e 	bmi.w	900264a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
9002664a:	45de      	cmp	lr, fp
9002664c:	f6ff af2b 	blt.w	900264a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90026650:	9302      	str	r3, [sp, #8]
90026652:	fa0f f38e 	sxth.w	r3, lr
90026656:	9a08      	ldr	r2, [sp, #32]
90026658:	9301      	str	r3, [sp, #4]
9002665a:	fa0f f38c 	sxth.w	r3, ip
9002665e:	9105      	str	r1, [sp, #20]
90026660:	4641      	mov	r1, r8
90026662:	9300      	str	r3, [sp, #0]
90026664:	4653      	mov	r3, sl
90026666:	e9cd 0203 	strd	r0, r2, [sp, #12]
9002666a:	463a      	mov	r2, r7
9002666c:	9811      	ldr	r0, [sp, #68]	; 0x44
9002666e:	f7ff fd73 	bl	90026158 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
90026672:	e718      	b.n	900264a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90026674:	1422      	asrs	r2, r4, #16
90026676:	9906      	ldr	r1, [sp, #24]
90026678:	1433      	asrs	r3, r6, #16
9002667a:	f3c4 3003 	ubfx	r0, r4, #12, #4
9002667e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
90026682:	fb01 2303 	mla	r3, r1, r3, r2
90026686:	085a      	lsrs	r2, r3, #1
90026688:	07d9      	lsls	r1, r3, #31
9002668a:	5cba      	ldrb	r2, [r7, r2]
9002668c:	bf54      	ite	pl
9002668e:	f002 020f 	andpl.w	r2, r2, #15
90026692:	1112      	asrmi	r2, r2, #4
90026694:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90026698:	b2d2      	uxtb	r2, r2
9002669a:	2800      	cmp	r0, #0
9002669c:	d063      	beq.n	90026766 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
9002669e:	f103 0a01 	add.w	sl, r3, #1
900266a2:	ea4f 015a 	mov.w	r1, sl, lsr #1
900266a6:	f01a 0f01 	tst.w	sl, #1
900266aa:	5c79      	ldrb	r1, [r7, r1]
900266ac:	bf0c      	ite	eq
900266ae:	f001 010f 	andeq.w	r1, r1, #15
900266b2:	1109      	asrne	r1, r1, #4
900266b4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
900266b8:	b2c9      	uxtb	r1, r1
900266ba:	910f      	str	r1, [sp, #60]	; 0x3c
900266bc:	f1bc 0f00 	cmp.w	ip, #0
900266c0:	d01a      	beq.n	900266f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
900266c2:	9908      	ldr	r1, [sp, #32]
900266c4:	440b      	add	r3, r1
900266c6:	0859      	lsrs	r1, r3, #1
900266c8:	f013 0f01 	tst.w	r3, #1
900266cc:	f103 0301 	add.w	r3, r3, #1
900266d0:	5c79      	ldrb	r1, [r7, r1]
900266d2:	bf0c      	ite	eq
900266d4:	f001 010f 	andeq.w	r1, r1, #15
900266d8:	1109      	asrne	r1, r1, #4
900266da:	eb01 1101 	add.w	r1, r1, r1, lsl #4
900266de:	b2c9      	uxtb	r1, r1
900266e0:	910b      	str	r1, [sp, #44]	; 0x2c
900266e2:	0859      	lsrs	r1, r3, #1
900266e4:	07db      	lsls	r3, r3, #31
900266e6:	5c79      	ldrb	r1, [r7, r1]
900266e8:	bf54      	ite	pl
900266ea:	f001 010f 	andpl.w	r1, r1, #15
900266ee:	1109      	asrmi	r1, r1, #4
900266f0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
900266f4:	b2c9      	uxtb	r1, r1
900266f6:	9110      	str	r1, [sp, #64]	; 0x40
900266f8:	b280      	uxth	r0, r0
900266fa:	fa1f fc8c 	uxth.w	ip, ip
900266fe:	fb00 f30c 	mul.w	r3, r0, ip
90026702:	0100      	lsls	r0, r0, #4
90026704:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
90026708:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
9002670c:	1ac0      	subs	r0, r0, r3
9002670e:	fa1f fc8c 	uxth.w	ip, ip
90026712:	b280      	uxth	r0, r0
90026714:	eba1 010c 	sub.w	r1, r1, ip
90026718:	fa1f fa81 	uxth.w	sl, r1
9002671c:	990f      	ldr	r1, [sp, #60]	; 0x3c
9002671e:	4348      	muls	r0, r1
90026720:	990b      	ldr	r1, [sp, #44]	; 0x2c
90026722:	fb02 020a 	mla	r2, r2, sl, r0
90026726:	fb0c 2c01 	mla	ip, ip, r1, r2
9002672a:	9a10      	ldr	r2, [sp, #64]	; 0x40
9002672c:	fb03 c302 	mla	r3, r3, r2, ip
90026730:	f3c3 2307 	ubfx	r3, r3, #8, #8
90026734:	2bff      	cmp	r3, #255	; 0xff
90026736:	d12b      	bne.n	90026790 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
90026738:	4b13      	ldr	r3, [pc, #76]	; (90026788 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
9002673a:	681a      	ldr	r2, [r3, #0]
9002673c:	4b13      	ldr	r3, [pc, #76]	; (9002678c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
9002673e:	0951      	lsrs	r1, r2, #5
90026740:	ea03 2312 	and.w	r3, r3, r2, lsr #8
90026744:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90026748:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9002674c:	430b      	orrs	r3, r1
9002674e:	4313      	orrs	r3, r2
90026750:	f8ae 3000 	strh.w	r3, [lr]
90026754:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90026756:	f10e 0e02 	add.w	lr, lr, #2
9002675a:	f108 38ff 	add.w	r8, r8, #4294967295
9002675e:	441c      	add	r4, r3
90026760:	9b20      	ldr	r3, [sp, #128]	; 0x80
90026762:	441e      	add	r6, r3
90026764:	e6cc      	b.n	90026500 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
90026766:	f1bc 0f00 	cmp.w	ip, #0
9002676a:	d0c5      	beq.n	900266f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
9002676c:	9908      	ldr	r1, [sp, #32]
9002676e:	440b      	add	r3, r1
90026770:	0859      	lsrs	r1, r3, #1
90026772:	07db      	lsls	r3, r3, #31
90026774:	5c79      	ldrb	r1, [r7, r1]
90026776:	bf54      	ite	pl
90026778:	f001 010f 	andpl.w	r1, r1, #15
9002677c:	1109      	asrmi	r1, r1, #4
9002677e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90026782:	b2c9      	uxtb	r1, r1
90026784:	910b      	str	r1, [sp, #44]	; 0x2c
90026786:	e7b7      	b.n	900266f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90026788:	240281a4 	.word	0x240281a4
9002678c:	fffff800 	.word	0xfffff800
90026790:	2b00      	cmp	r3, #0
90026792:	d0df      	beq.n	90026754 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
90026794:	4a21      	ldr	r2, [pc, #132]	; (9002681c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
90026796:	fa1f fa83 	uxth.w	sl, r3
9002679a:	f8be c000 	ldrh.w	ip, [lr]
9002679e:	43db      	mvns	r3, r3
900267a0:	6810      	ldr	r0, [r2, #0]
900267a2:	ea4f 212c 	mov.w	r1, ip, asr #8
900267a6:	f3c0 4207 	ubfx	r2, r0, #16, #8
900267aa:	b2db      	uxtb	r3, r3
900267ac:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
900267b0:	f3c0 2b07 	ubfx	fp, r0, #8, #8
900267b4:	fb12 f20a 	smulbb	r2, r2, sl
900267b8:	b2c0      	uxtb	r0, r0
900267ba:	fb1b fb0a 	smulbb	fp, fp, sl
900267be:	fb01 2103 	mla	r1, r1, r3, r2
900267c2:	ea4f 02ec 	mov.w	r2, ip, asr #3
900267c6:	fb10 f00a 	smulbb	r0, r0, sl
900267ca:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
900267ce:	b289      	uxth	r1, r1
900267d0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
900267d4:	fa5f fc8c 	uxtb.w	ip, ip
900267d8:	fb02 b203 	mla	r2, r2, r3, fp
900267dc:	fb0c 0003 	mla	r0, ip, r3, r0
900267e0:	1c4b      	adds	r3, r1, #1
900267e2:	b292      	uxth	r2, r2
900267e4:	b280      	uxth	r0, r0
900267e6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
900267ea:	f100 0b01 	add.w	fp, r0, #1
900267ee:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
900267f2:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
900267f6:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
900267fa:	ea4b 0101 	orr.w	r1, fp, r1
900267fe:	f102 0b01 	add.w	fp, r2, #1
90026802:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
90026806:	0952      	lsrs	r2, r2, #5
90026808:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9002680c:	4311      	orrs	r1, r2
9002680e:	f8ae 1000 	strh.w	r1, [lr]
90026812:	e79f      	b.n	90026754 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
90026814:	b013      	add	sp, #76	; 0x4c
90026816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9002681a:	bf00      	nop
9002681c:	240281a4 	.word	0x240281a4

90026820 <CRC_Lock>:
90026820:	4a20      	ldr	r2, [pc, #128]	; (900268a4 <CRC_Lock+0x84>)
90026822:	b530      	push	{r4, r5, lr}
90026824:	6813      	ldr	r3, [r2, #0]
90026826:	f64f 74f0 	movw	r4, #65520	; 0xfff0
9002682a:	f24c 2540 	movw	r5, #49728	; 0xc240
9002682e:	f023 0301 	bic.w	r3, r3, #1
90026832:	6013      	str	r3, [r2, #0]
90026834:	4b1c      	ldr	r3, [pc, #112]	; (900268a8 <CRC_Lock+0x88>)
90026836:	681a      	ldr	r2, [r3, #0]
90026838:	4022      	ands	r2, r4
9002683a:	42aa      	cmp	r2, r5
9002683c:	d005      	beq.n	9002684a <CRC_Lock+0x2a>
9002683e:	681b      	ldr	r3, [r3, #0]
90026840:	f24c 2270 	movw	r2, #49776	; 0xc270
90026844:	4023      	ands	r3, r4
90026846:	4293      	cmp	r3, r2
90026848:	d124      	bne.n	90026894 <CRC_Lock+0x74>
9002684a:	4b18      	ldr	r3, [pc, #96]	; (900268ac <CRC_Lock+0x8c>)
9002684c:	681b      	ldr	r3, [r3, #0]
9002684e:	bb0b      	cbnz	r3, 90026894 <CRC_Lock+0x74>
90026850:	4b17      	ldr	r3, [pc, #92]	; (900268b0 <CRC_Lock+0x90>)
90026852:	681a      	ldr	r2, [r3, #0]
90026854:	f3c2 020b 	ubfx	r2, r2, #0, #12
90026858:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
9002685c:	d00d      	beq.n	9002687a <CRC_Lock+0x5a>
9002685e:	681a      	ldr	r2, [r3, #0]
90026860:	f240 4483 	movw	r4, #1155	; 0x483
90026864:	f3c2 020b 	ubfx	r2, r2, #0, #12
90026868:	42a2      	cmp	r2, r4
9002686a:	d006      	beq.n	9002687a <CRC_Lock+0x5a>
9002686c:	681b      	ldr	r3, [r3, #0]
9002686e:	f240 4285 	movw	r2, #1157	; 0x485
90026872:	f3c3 030b 	ubfx	r3, r3, #0, #12
90026876:	4293      	cmp	r3, r2
90026878:	d10c      	bne.n	90026894 <CRC_Lock+0x74>
9002687a:	4b0e      	ldr	r3, [pc, #56]	; (900268b4 <CRC_Lock+0x94>)
9002687c:	2201      	movs	r2, #1
9002687e:	601a      	str	r2, [r3, #0]
90026880:	681a      	ldr	r2, [r3, #0]
90026882:	2a00      	cmp	r2, #0
90026884:	d1fc      	bne.n	90026880 <CRC_Lock+0x60>
90026886:	4b0c      	ldr	r3, [pc, #48]	; (900268b8 <CRC_Lock+0x98>)
90026888:	6018      	str	r0, [r3, #0]
9002688a:	6818      	ldr	r0, [r3, #0]
9002688c:	1a43      	subs	r3, r0, r1
9002688e:	4258      	negs	r0, r3
90026890:	4158      	adcs	r0, r3
90026892:	bd30      	pop	{r4, r5, pc}
90026894:	4b09      	ldr	r3, [pc, #36]	; (900268bc <CRC_Lock+0x9c>)
90026896:	2201      	movs	r2, #1
90026898:	601a      	str	r2, [r3, #0]
9002689a:	681a      	ldr	r2, [r3, #0]
9002689c:	2a00      	cmp	r2, #0
9002689e:	d1fc      	bne.n	9002689a <CRC_Lock+0x7a>
900268a0:	4b07      	ldr	r3, [pc, #28]	; (900268c0 <CRC_Lock+0xa0>)
900268a2:	e7f1      	b.n	90026888 <CRC_Lock+0x68>
900268a4:	e0002000 	.word	0xe0002000
900268a8:	e000ed00 	.word	0xe000ed00
900268ac:	e0042000 	.word	0xe0042000
900268b0:	5c001000 	.word	0x5c001000
900268b4:	58024c08 	.word	0x58024c08
900268b8:	58024c00 	.word	0x58024c00
900268bc:	40023008 	.word	0x40023008
900268c0:	40023000 	.word	0x40023000

900268c4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
900268c4:	6101      	str	r1, [r0, #16]
900268c6:	4770      	bx	lr

900268c8 <_ZN8touchgfx8Gestures4tickEv>:
900268c8:	7b83      	ldrb	r3, [r0, #14]
900268ca:	b14b      	cbz	r3, 900268e0 <_ZN8touchgfx8Gestures4tickEv+0x18>
900268cc:	8903      	ldrh	r3, [r0, #8]
900268ce:	3301      	adds	r3, #1
900268d0:	b29b      	uxth	r3, r3
900268d2:	2b07      	cmp	r3, #7
900268d4:	8103      	strh	r3, [r0, #8]
900268d6:	bf81      	itttt	hi
900268d8:	2300      	movhi	r3, #0
900268da:	8143      	strhhi	r3, [r0, #10]
900268dc:	8183      	strhhi	r3, [r0, #12]
900268de:	7383      	strbhi	r3, [r0, #14]
900268e0:	4770      	bx	lr
	...

900268e4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
900268e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
900268e8:	4698      	mov	r8, r3
900268ea:	8883      	ldrh	r3, [r0, #4]
900268ec:	4604      	mov	r4, r0
900268ee:	4617      	mov	r7, r2
900268f0:	f8ad 3006 	strh.w	r3, [sp, #6]
900268f4:	eba8 0303 	sub.w	r3, r8, r3
900268f8:	4a19      	ldr	r2, [pc, #100]	; (90026960 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
900268fa:	460e      	mov	r6, r1
900268fc:	b21b      	sxth	r3, r3
900268fe:	88c1      	ldrh	r1, [r0, #6]
90026900:	9200      	str	r2, [sp, #0]
90026902:	2000      	movs	r0, #0
90026904:	2b00      	cmp	r3, #0
90026906:	8aa2      	ldrh	r2, [r4, #20]
90026908:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
9002690c:	bfb8      	it	lt
9002690e:	425b      	neglt	r3, r3
90026910:	f88d 0004 	strb.w	r0, [sp, #4]
90026914:	f8ad 1008 	strh.w	r1, [sp, #8]
90026918:	b21b      	sxth	r3, r3
9002691a:	f8ad 800a 	strh.w	r8, [sp, #10]
9002691e:	f8ad 500c 	strh.w	r5, [sp, #12]
90026922:	4293      	cmp	r3, r2
90026924:	dc07      	bgt.n	90026936 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
90026926:	1a69      	subs	r1, r5, r1
90026928:	b209      	sxth	r1, r1
9002692a:	2900      	cmp	r1, #0
9002692c:	bfb8      	it	lt
9002692e:	4249      	neglt	r1, r1
90026930:	b209      	sxth	r1, r1
90026932:	428a      	cmp	r2, r1
90026934:	da10      	bge.n	90026958 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
90026936:	6920      	ldr	r0, [r4, #16]
90026938:	4669      	mov	r1, sp
9002693a:	eba8 0606 	sub.w	r6, r8, r6
9002693e:	1bef      	subs	r7, r5, r7
90026940:	6803      	ldr	r3, [r0, #0]
90026942:	685b      	ldr	r3, [r3, #4]
90026944:	4798      	blx	r3
90026946:	2300      	movs	r3, #0
90026948:	2001      	movs	r0, #1
9002694a:	8166      	strh	r6, [r4, #10]
9002694c:	8123      	strh	r3, [r4, #8]
9002694e:	81a7      	strh	r7, [r4, #12]
90026950:	f8a4 8004 	strh.w	r8, [r4, #4]
90026954:	80e5      	strh	r5, [r4, #6]
90026956:	73a0      	strb	r0, [r4, #14]
90026958:	b004      	add	sp, #16
9002695a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9002695e:	bf00      	nop
90026960:	9002bfd4 	.word	0x9002bfd4

90026964 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
90026964:	b5f0      	push	{r4, r5, r6, r7, lr}
90026966:	461e      	mov	r6, r3
90026968:	1e4b      	subs	r3, r1, #1
9002696a:	b085      	sub	sp, #20
9002696c:	4604      	mov	r4, r0
9002696e:	2b01      	cmp	r3, #1
90026970:	460d      	mov	r5, r1
90026972:	4617      	mov	r7, r2
90026974:	d84b      	bhi.n	90026a0e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
90026976:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
9002697a:	1cd3      	adds	r3, r2, #3
9002697c:	b29b      	uxth	r3, r3
9002697e:	2b06      	cmp	r3, #6
90026980:	d916      	bls.n	900269b0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
90026982:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 90026a24 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
90026986:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9002698a:	f8cd c004 	str.w	ip, [sp, #4]
9002698e:	f04f 0c00 	mov.w	ip, #0
90026992:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90026996:	6900      	ldr	r0, [r0, #16]
90026998:	f8ad 100c 	strh.w	r1, [sp, #12]
9002699c:	a901      	add	r1, sp, #4
9002699e:	f88d c008 	strb.w	ip, [sp, #8]
900269a2:	f8ad 200a 	strh.w	r2, [sp, #10]
900269a6:	f8ad 300e 	strh.w	r3, [sp, #14]
900269aa:	6803      	ldr	r3, [r0, #0]
900269ac:	689b      	ldr	r3, [r3, #8]
900269ae:	4798      	blx	r3
900269b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
900269b4:	1cd3      	adds	r3, r2, #3
900269b6:	b29b      	uxth	r3, r3
900269b8:	2b06      	cmp	r3, #6
900269ba:	d916      	bls.n	900269ea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
900269bc:	f8df c064 	ldr.w	ip, [pc, #100]	; 90026a24 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
900269c0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
900269c4:	f8cd c004 	str.w	ip, [sp, #4]
900269c8:	f04f 0c01 	mov.w	ip, #1
900269cc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
900269d0:	6920      	ldr	r0, [r4, #16]
900269d2:	f8ad 100c 	strh.w	r1, [sp, #12]
900269d6:	a901      	add	r1, sp, #4
900269d8:	f88d c008 	strb.w	ip, [sp, #8]
900269dc:	f8ad 200a 	strh.w	r2, [sp, #10]
900269e0:	f8ad 300e 	strh.w	r3, [sp, #14]
900269e4:	6803      	ldr	r3, [r0, #0]
900269e6:	689b      	ldr	r3, [r3, #8]
900269e8:	4798      	blx	r3
900269ea:	4b0d      	ldr	r3, [pc, #52]	; (90026a20 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
900269ec:	a901      	add	r1, sp, #4
900269ee:	6920      	ldr	r0, [r4, #16]
900269f0:	9301      	str	r3, [sp, #4]
900269f2:	2300      	movs	r3, #0
900269f4:	f88d 5008 	strb.w	r5, [sp, #8]
900269f8:	f8ad 700a 	strh.w	r7, [sp, #10]
900269fc:	f8ad 600c 	strh.w	r6, [sp, #12]
90026a00:	f8ad 300e 	strh.w	r3, [sp, #14]
90026a04:	6803      	ldr	r3, [r0, #0]
90026a06:	681b      	ldr	r3, [r3, #0]
90026a08:	4798      	blx	r3
90026a0a:	b005      	add	sp, #20
90026a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
90026a0e:	2900      	cmp	r1, #0
90026a10:	d1eb      	bne.n	900269ea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
90026a12:	80a2      	strh	r2, [r4, #4]
90026a14:	80c6      	strh	r6, [r0, #6]
90026a16:	60a1      	str	r1, [r4, #8]
90026a18:	81a1      	strh	r1, [r4, #12]
90026a1a:	73a1      	strb	r1, [r4, #14]
90026a1c:	e7e5      	b.n	900269ea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
90026a1e:	bf00      	nop
90026a20:	9002bfc0 	.word	0x9002bfc0
90026a24:	9002bfe8 	.word	0x9002bfe8

90026a28 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
90026a28:	10c9      	asrs	r1, r1, #3
90026a2a:	2900      	cmp	r1, #0
90026a2c:	bfb8      	it	lt
90026a2e:	4249      	neglt	r1, r1
90026a30:	2801      	cmp	r0, #1
90026a32:	d108      	bne.n	90026a46 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
90026a34:	f3c1 0008 	ubfx	r0, r1, #0, #9
90026a38:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
90026a3c:	4601      	mov	r1, r0
90026a3e:	dd02      	ble.n	90026a46 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
90026a40:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
90026a44:	4770      	bx	lr
90026a46:	29ff      	cmp	r1, #255	; 0xff
90026a48:	bfa8      	it	ge
90026a4a:	21ff      	movge	r1, #255	; 0xff
90026a4c:	4608      	mov	r0, r1
90026a4e:	4770      	bx	lr

90026a50 <_ZN8touchgfx10Rasterizer6lineToEii>:
90026a50:	b410      	push	{r4}
90026a52:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
90026a56:	429c      	cmp	r4, r3
90026a58:	d803      	bhi.n	90026a62 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
90026a5a:	f85d 4b04 	ldr.w	r4, [sp], #4
90026a5e:	f7ef ba63 	b.w	90015f28 <_ZN8touchgfx7Outline6lineToEii>
90026a62:	f85d 4b04 	ldr.w	r4, [sp], #4
90026a66:	4770      	bx	lr

90026a68 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
90026a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90026a6c:	b08b      	sub	sp, #44	; 0x2c
90026a6e:	4606      	mov	r6, r0
90026a70:	468a      	mov	sl, r1
90026a72:	e9cd 2306 	strd	r2, r3, [sp, #24]
90026a76:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
90026a7a:	9308      	str	r3, [sp, #32]
90026a7c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
90026a80:	9309      	str	r3, [sp, #36]	; 0x24
90026a82:	f7ef fbbc 	bl	900161fe <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
90026a86:	68b5      	ldr	r5, [r6, #8]
90026a88:	4604      	mov	r4, r0
90026a8a:	2d00      	cmp	r5, #0
90026a8c:	d044      	beq.n	90026b18 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
90026a8e:	6873      	ldr	r3, [r6, #4]
90026a90:	42ab      	cmp	r3, r5
90026a92:	d33d      	bcc.n	90026b10 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
90026a94:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
90026a98:	f04f 0800 	mov.w	r8, #0
90026a9c:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
90026aa0:	eb02 0b03 	add.w	fp, r2, r3
90026aa4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
90026aa8:	fb02 1203 	mla	r2, r2, r3, r1
90026aac:	9205      	str	r2, [sp, #20]
90026aae:	1e6a      	subs	r2, r5, #1
90026ab0:	9204      	str	r2, [sp, #16]
90026ab2:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
90026ab6:	f9b4 7000 	ldrsh.w	r7, [r4]
90026aba:	454b      	cmp	r3, r9
90026abc:	463a      	mov	r2, r7
90026abe:	d008      	beq.n	90026ad2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
90026ac0:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
90026ac4:	eb03 0b09 	add.w	fp, r3, r9
90026ac8:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
90026acc:	fb03 1309 	mla	r3, r3, r9, r1
90026ad0:	9305      	str	r3, [sp, #20]
90026ad2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
90026ad6:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
90026ada:	4498      	add	r8, r3
90026adc:	9b04      	ldr	r3, [sp, #16]
90026ade:	3b01      	subs	r3, #1
90026ae0:	9304      	str	r3, [sp, #16]
90026ae2:	9b04      	ldr	r3, [sp, #16]
90026ae4:	3301      	adds	r3, #1
90026ae6:	d015      	beq.n	90026b14 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
90026ae8:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
90026aec:	42bb      	cmp	r3, r7
90026aee:	d117      	bne.n	90026b20 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
90026af0:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
90026af4:	9b04      	ldr	r3, [sp, #16]
90026af6:	4548      	cmp	r0, r9
90026af8:	f103 33ff 	add.w	r3, r3, #4294967295
90026afc:	d17d      	bne.n	90026bfa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
90026afe:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
90026b02:	4401      	add	r1, r0
90026b04:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
90026b08:	4480      	add	r8, r0
90026b0a:	e7e9      	b.n	90026ae0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
90026b0c:	461f      	mov	r7, r3
90026b0e:	e042      	b.n	90026b96 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
90026b10:	2000      	movs	r0, #0
90026b12:	e002      	b.n	90026b1a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
90026b14:	2900      	cmp	r1, #0
90026b16:	d16d      	bne.n	90026bf4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
90026b18:	2001      	movs	r0, #1
90026b1a:	b00b      	add	sp, #44	; 0x2c
90026b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90026b20:	b379      	cbz	r1, 90026b82 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
90026b22:	2f00      	cmp	r7, #0
90026b24:	db29      	blt.n	90026b7a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
90026b26:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
90026b2a:	42bb      	cmp	r3, r7
90026b2c:	dd25      	ble.n	90026b7a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
90026b2e:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
90026b32:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
90026b36:	f7ff ff77 	bl	90026a28 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
90026b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
90026b3c:	fb10 f003 	smulbb	r0, r0, r3
90026b40:	b280      	uxth	r0, r0
90026b42:	1c41      	adds	r1, r0, #1
90026b44:	eb01 2110 	add.w	r1, r1, r0, lsr #8
90026b48:	1209      	asrs	r1, r1, #8
90026b4a:	f011 0fff 	tst.w	r1, #255	; 0xff
90026b4e:	d014      	beq.n	90026b7a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
90026b50:	b2c9      	uxtb	r1, r1
90026b52:	9808      	ldr	r0, [sp, #32]
90026b54:	b2ba      	uxth	r2, r7
90026b56:	8e73      	ldrh	r3, [r6, #50]	; 0x32
90026b58:	9102      	str	r1, [sp, #8]
90026b5a:	2101      	movs	r1, #1
90026b5c:	4413      	add	r3, r2
90026b5e:	4402      	add	r2, r0
90026b60:	9101      	str	r1, [sp, #4]
90026b62:	fa0f f18b 	sxth.w	r1, fp
90026b66:	f8da 0000 	ldr.w	r0, [sl]
90026b6a:	b21b      	sxth	r3, r3
90026b6c:	9100      	str	r1, [sp, #0]
90026b6e:	b212      	sxth	r2, r2
90026b70:	6941      	ldr	r1, [r0, #20]
90026b72:	4650      	mov	r0, sl
90026b74:	460d      	mov	r5, r1
90026b76:	9905      	ldr	r1, [sp, #20]
90026b78:	47a8      	blx	r5
90026b7a:	9b04      	ldr	r3, [sp, #16]
90026b7c:	1c7a      	adds	r2, r7, #1
90026b7e:	3301      	adds	r3, #1
90026b80:	d0ca      	beq.n	90026b18 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
90026b82:	f9b4 7000 	ldrsh.w	r7, [r4]
90026b86:	1abb      	subs	r3, r7, r2
90026b88:	2b00      	cmp	r3, #0
90026b8a:	dd31      	ble.n	90026bf0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
90026b8c:	2a00      	cmp	r2, #0
90026b8e:	dabd      	bge.n	90026b0c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
90026b90:	2f00      	cmp	r7, #0
90026b92:	dd2d      	ble.n	90026bf0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
90026b94:	2200      	movs	r2, #0
90026b96:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
90026b9a:	19d1      	adds	r1, r2, r7
90026b9c:	4299      	cmp	r1, r3
90026b9e:	db02      	blt.n	90026ba6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
90026ba0:	1a9f      	subs	r7, r3, r2
90026ba2:	2f00      	cmp	r7, #0
90026ba4:	dd24      	ble.n	90026bf0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
90026ba6:	ea4f 1188 	mov.w	r1, r8, lsl #6
90026baa:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
90026bae:	f7ff ff3b 	bl	90026a28 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
90026bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
90026bb4:	fb10 f003 	smulbb	r0, r0, r3
90026bb8:	b280      	uxth	r0, r0
90026bba:	1c41      	adds	r1, r0, #1
90026bbc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
90026bc0:	1209      	asrs	r1, r1, #8
90026bc2:	f011 0fff 	tst.w	r1, #255	; 0xff
90026bc6:	d013      	beq.n	90026bf0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
90026bc8:	b292      	uxth	r2, r2
90026bca:	9808      	ldr	r0, [sp, #32]
90026bcc:	b2c9      	uxtb	r1, r1
90026bce:	8e73      	ldrh	r3, [r6, #50]	; 0x32
90026bd0:	b23f      	sxth	r7, r7
90026bd2:	4413      	add	r3, r2
90026bd4:	9102      	str	r1, [sp, #8]
90026bd6:	4402      	add	r2, r0
90026bd8:	fa0f f18b 	sxth.w	r1, fp
90026bdc:	f8da 0000 	ldr.w	r0, [sl]
90026be0:	b21b      	sxth	r3, r3
90026be2:	9100      	str	r1, [sp, #0]
90026be4:	b212      	sxth	r2, r2
90026be6:	9701      	str	r7, [sp, #4]
90026be8:	9905      	ldr	r1, [sp, #20]
90026bea:	6947      	ldr	r7, [r0, #20]
90026bec:	4650      	mov	r0, sl
90026bee:	47b8      	blx	r7
90026bf0:	464b      	mov	r3, r9
90026bf2:	e75e      	b.n	90026ab2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
90026bf4:	2f00      	cmp	r7, #0
90026bf6:	da96      	bge.n	90026b26 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
90026bf8:	e78e      	b.n	90026b18 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
90026bfa:	2900      	cmp	r1, #0
90026bfc:	d0f8      	beq.n	90026bf0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
90026bfe:	e790      	b.n	90026b22 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

90026c00 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
90026c00:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
90026c04:	4b4a      	ldr	r3, [pc, #296]	; (90026d30 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x130>)
90026c06:	2500      	movs	r5, #0
90026c08:	f100 0620 	add.w	r6, r0, #32
90026c0c:	4604      	mov	r4, r0
90026c0e:	4690      	mov	r8, r2
90026c10:	f100 0718 	add.w	r7, r0, #24
90026c14:	e9c0 3100 	strd	r3, r1, [r0]
90026c18:	e9c0 5502 	strd	r5, r5, [r0, #8]
90026c1c:	e9c0 5504 	strd	r5, r5, [r0, #16]
90026c20:	e9c0 5506 	strd	r5, r5, [r0, #24]
90026c24:	4630      	mov	r0, r6
90026c26:	f7ee fcc5 	bl	900155b4 <_ZN8touchgfx7OutlineC1Ev>
90026c2a:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
90026c2e:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
90026c32:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
90026c36:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
90026c3a:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
90026c3e:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
90026c42:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
90026c46:	f8d4 c004 	ldr.w	ip, [r4, #4]
90026c4a:	9500      	str	r5, [sp, #0]
90026c4c:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
90026c50:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
90026c54:	f9b8 2000 	ldrsh.w	r2, [r8]
90026c58:	f8b8 0004 	ldrh.w	r0, [r8, #4]
90026c5c:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
90026c60:	4410      	add	r0, r2
90026c62:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
90026c66:	b280      	uxth	r0, r0
90026c68:	fa0f fa80 	sxth.w	sl, r0
90026c6c:	45aa      	cmp	sl, r5
90026c6e:	dd5c      	ble.n	90026d2a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
90026c70:	4591      	cmp	r9, r2
90026c72:	dd5a      	ble.n	90026d2a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
90026c74:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
90026c78:	f8b8 3006 	ldrh.w	r3, [r8, #6]
90026c7c:	440b      	add	r3, r1
90026c7e:	b29b      	uxth	r3, r3
90026c80:	b21d      	sxth	r5, r3
90026c82:	2d00      	cmp	r5, #0
90026c84:	dd51      	ble.n	90026d2a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
90026c86:	458e      	cmp	lr, r1
90026c88:	dd4f      	ble.n	90026d2a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
90026c8a:	45d1      	cmp	r9, sl
90026c8c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
90026c90:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
90026c94:	bfb8      	it	lt
90026c96:	fa1f f089 	uxthlt.w	r0, r9
90026c9a:	45ae      	cmp	lr, r5
90026c9c:	f8ad 2000 	strh.w	r2, [sp]
90026ca0:	bfb8      	it	lt
90026ca2:	fa1f f38e 	uxthlt.w	r3, lr
90026ca6:	1a80      	subs	r0, r0, r2
90026ca8:	f8ad 1002 	strh.w	r1, [sp, #2]
90026cac:	1a5b      	subs	r3, r3, r1
90026cae:	f8ad 0004 	strh.w	r0, [sp, #4]
90026cb2:	f8ad 3006 	strh.w	r3, [sp, #6]
90026cb6:	466d      	mov	r5, sp
90026cb8:	e895 0003 	ldmia.w	r5, {r0, r1}
90026cbc:	e887 0003 	stmia.w	r7, {r0, r1}
90026cc0:	f8dc 3000 	ldr.w	r3, [ip]
90026cc4:	4660      	mov	r0, ip
90026cc6:	4639      	mov	r1, r7
90026cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90026cca:	4798      	blx	r3
90026ccc:	6861      	ldr	r1, [r4, #4]
90026cce:	4628      	mov	r0, r5
90026cd0:	3104      	adds	r1, #4
90026cd2:	f7f0 fe3f 	bl	90017954 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90026cd6:	4638      	mov	r0, r7
90026cd8:	f7f0 fe14 	bl	90017904 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90026cdc:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
90026ce0:	f8bd 2000 	ldrh.w	r2, [sp]
90026ce4:	4630      	mov	r0, r6
90026ce6:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
90026cea:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
90026cee:	f7ee fc45 	bl	9001557c <_ZN8touchgfx7Outline5resetEv>
90026cf2:	f9bd 3000 	ldrsh.w	r3, [sp]
90026cf6:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
90026cfa:	4620      	mov	r0, r4
90026cfc:	015b      	lsls	r3, r3, #5
90026cfe:	60a3      	str	r3, [r4, #8]
90026d00:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
90026d04:	015b      	lsls	r3, r3, #5
90026d06:	60e3      	str	r3, [r4, #12]
90026d08:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
90026d0c:	015b      	lsls	r3, r3, #5
90026d0e:	6123      	str	r3, [r4, #16]
90026d10:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
90026d14:	015b      	lsls	r3, r3, #5
90026d16:	6163      	str	r3, [r4, #20]
90026d18:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
90026d1c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
90026d20:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
90026d24:	b002      	add	sp, #8
90026d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90026d2a:	2300      	movs	r3, #0
90026d2c:	9301      	str	r3, [sp, #4]
90026d2e:	e7c2      	b.n	90026cb6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb6>
90026d30:	9002c2b8 	.word	0x9002c2b8

90026d34 <_ZN8touchgfx6Canvas5closeEv>:
90026d34:	b538      	push	{r3, r4, r5, lr}
90026d36:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
90026d3a:	4604      	mov	r4, r0
90026d3c:	b193      	cbz	r3, 90026d64 <_ZN8touchgfx6Canvas5closeEv+0x30>
90026d3e:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
90026d42:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
90026d46:	4213      	tst	r3, r2
90026d48:	d10c      	bne.n	90026d64 <_ZN8touchgfx6Canvas5closeEv+0x30>
90026d4a:	f100 0520 	add.w	r5, r0, #32
90026d4e:	b123      	cbz	r3, 90026d5a <_ZN8touchgfx6Canvas5closeEv+0x26>
90026d50:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
90026d54:	4628      	mov	r0, r5
90026d56:	f7ff fe7b 	bl	90026a50 <_ZN8touchgfx10Rasterizer6lineToEii>
90026d5a:	4628      	mov	r0, r5
90026d5c:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
90026d60:	f7ff fe76 	bl	90026a50 <_ZN8touchgfx10Rasterizer6lineToEii>
90026d64:	2300      	movs	r3, #0
90026d66:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
90026d6a:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
90026d6e:	4298      	cmp	r0, r3
90026d70:	bf34      	ite	cc
90026d72:	2000      	movcc	r0, #0
90026d74:	2001      	movcs	r0, #1
90026d76:	bd38      	pop	{r3, r4, r5, pc}

90026d78 <_ZN8touchgfx6Canvas6renderEh>:
90026d78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90026d7c:	4604      	mov	r4, r0
90026d7e:	6840      	ldr	r0, [r0, #4]
90026d80:	460d      	mov	r5, r1
90026d82:	6803      	ldr	r3, [r0, #0]
90026d84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90026d86:	4798      	blx	r3
90026d88:	fb10 f105 	smulbb	r1, r0, r5
90026d8c:	b289      	uxth	r1, r1
90026d8e:	1c4d      	adds	r5, r1, #1
90026d90:	eb05 2511 	add.w	r5, r5, r1, lsr #8
90026d94:	122d      	asrs	r5, r5, #8
90026d96:	f000 8097 	beq.w	90026ec8 <_ZN8touchgfx6Canvas6renderEh+0x150>
90026d9a:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
90026d9e:	2b00      	cmp	r3, #0
90026da0:	f000 8092 	beq.w	90026ec8 <_ZN8touchgfx6Canvas6renderEh+0x150>
90026da4:	4620      	mov	r0, r4
90026da6:	f7ff ffc5 	bl	90026d34 <_ZN8touchgfx6Canvas5closeEv>
90026daa:	4607      	mov	r7, r0
90026dac:	2800      	cmp	r0, #0
90026dae:	d043      	beq.n	90026e38 <_ZN8touchgfx6Canvas6renderEh+0xc0>
90026db0:	6863      	ldr	r3, [r4, #4]
90026db2:	4e46      	ldr	r6, [pc, #280]	; (90026ecc <_ZN8touchgfx6Canvas6renderEh+0x154>)
90026db4:	6a98      	ldr	r0, [r3, #40]	; 0x28
90026db6:	6837      	ldr	r7, [r6, #0]
90026db8:	6803      	ldr	r3, [r0, #0]
90026dba:	689b      	ldr	r3, [r3, #8]
90026dbc:	4798      	blx	r3
90026dbe:	4601      	mov	r1, r0
90026dc0:	4638      	mov	r0, r7
90026dc2:	f7ec fc51 	bl	90013668 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
90026dc6:	4607      	mov	r7, r0
90026dc8:	f7ec f812 	bl	90012df0 <_ZN8touchgfx3HAL3lcdEv>
90026dcc:	6803      	ldr	r3, [r0, #0]
90026dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90026dd0:	4798      	blx	r3
90026dd2:	4680      	mov	r8, r0
90026dd4:	f7ec f80c 	bl	90012df0 <_ZN8touchgfx3HAL3lcdEv>
90026dd8:	6803      	ldr	r3, [r0, #0]
90026dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90026ddc:	4798      	blx	r3
90026dde:	280b      	cmp	r0, #11
90026de0:	d857      	bhi.n	90026e92 <_ZN8touchgfx6Canvas6renderEh+0x11a>
90026de2:	e8df f000 	tbb	[pc, r0]
90026de6:	584d      	.short	0x584d
90026de8:	2d560668 	.word	0x2d560668
90026dec:	6161613d 	.word	0x6161613d
90026df0:	6161      	.short	0x6161
90026df2:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
90026df6:	2208      	movs	r2, #8
90026df8:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
90026dfc:	fb91 f2f2 	sdiv	r2, r1, r2
90026e00:	fb08 2303 	mla	r3, r8, r3, r2
90026e04:	441f      	add	r7, r3
90026e06:	424b      	negs	r3, r1
90026e08:	f001 0107 	and.w	r1, r1, #7
90026e0c:	f003 0307 	and.w	r3, r3, #7
90026e10:	bf58      	it	pl
90026e12:	4259      	negpl	r1, r3
90026e14:	b2c9      	uxtb	r1, r1
90026e16:	6860      	ldr	r0, [r4, #4]
90026e18:	b2ed      	uxtb	r5, r5
90026e1a:	fa0f f388 	sxth.w	r3, r8
90026e1e:	463a      	mov	r2, r7
90026e20:	e9cd 1500 	strd	r1, r5, [sp]
90026e24:	6a81      	ldr	r1, [r0, #40]	; 0x28
90026e26:	f104 0020 	add.w	r0, r4, #32
90026e2a:	f7ff fe1d 	bl	90026a68 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
90026e2e:	4607      	mov	r7, r0
90026e30:	6830      	ldr	r0, [r6, #0]
90026e32:	6803      	ldr	r3, [r0, #0]
90026e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90026e36:	4798      	blx	r3
90026e38:	4638      	mov	r0, r7
90026e3a:	b002      	add	sp, #8
90026e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90026e40:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
90026e44:	2204      	movs	r2, #4
90026e46:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
90026e4a:	fb91 f2f2 	sdiv	r2, r1, r2
90026e4e:	fb08 2303 	mla	r3, r8, r3, r2
90026e52:	441f      	add	r7, r3
90026e54:	424b      	negs	r3, r1
90026e56:	f001 0103 	and.w	r1, r1, #3
90026e5a:	f003 0303 	and.w	r3, r3, #3
90026e5e:	e7d7      	b.n	90026e10 <_ZN8touchgfx6Canvas6renderEh+0x98>
90026e60:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
90026e64:	2202      	movs	r2, #2
90026e66:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
90026e6a:	2900      	cmp	r1, #0
90026e6c:	fb91 f2f2 	sdiv	r2, r1, r2
90026e70:	f001 0101 	and.w	r1, r1, #1
90026e74:	fb08 2303 	mla	r3, r8, r3, r2
90026e78:	bfb8      	it	lt
90026e7a:	4249      	neglt	r1, r1
90026e7c:	441f      	add	r7, r3
90026e7e:	e7c9      	b.n	90026e14 <_ZN8touchgfx6Canvas6renderEh+0x9c>
90026e80:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
90026e84:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
90026e88:	fb08 f303 	mul.w	r3, r8, r3
90026e8c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
90026e90:	441f      	add	r7, r3
90026e92:	2100      	movs	r1, #0
90026e94:	e7bf      	b.n	90026e16 <_ZN8touchgfx6Canvas6renderEh+0x9e>
90026e96:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
90026e9a:	2103      	movs	r1, #3
90026e9c:	fb08 f203 	mul.w	r2, r8, r3
90026ea0:	8b23      	ldrh	r3, [r4, #24]
90026ea2:	fb13 2301 	smlabb	r3, r3, r1, r2
90026ea6:	e7f3      	b.n	90026e90 <_ZN8touchgfx6Canvas6renderEh+0x118>
90026ea8:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
90026eac:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
90026eb0:	fb08 2303 	mla	r3, r8, r3, r2
90026eb4:	e7ec      	b.n	90026e90 <_ZN8touchgfx6Canvas6renderEh+0x118>
90026eb6:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
90026eba:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
90026ebe:	fb08 f303 	mul.w	r3, r8, r3
90026ec2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
90026ec6:	e7e3      	b.n	90026e90 <_ZN8touchgfx6Canvas6renderEh+0x118>
90026ec8:	2701      	movs	r7, #1
90026eca:	e7b5      	b.n	90026e38 <_ZN8touchgfx6Canvas6renderEh+0xc0>
90026ecc:	24028194 	.word	0x24028194

90026ed0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
90026ed0:	4b07      	ldr	r3, [pc, #28]	; (90026ef0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
90026ed2:	b510      	push	{r4, lr}
90026ed4:	781b      	ldrb	r3, [r3, #0]
90026ed6:	2b01      	cmp	r3, #1
90026ed8:	d108      	bne.n	90026eec <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
90026eda:	6843      	ldr	r3, [r0, #4]
90026edc:	6814      	ldr	r4, [r2, #0]
90026ede:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
90026ee2:	680b      	ldr	r3, [r1, #0]
90026ee4:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
90026ee8:	6013      	str	r3, [r2, #0]
90026eea:	600c      	str	r4, [r1, #0]
90026eec:	bd10      	pop	{r4, pc}
90026eee:	bf00      	nop
90026ef0:	2402818c 	.word	0x2402818c

90026ef4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
90026ef4:	b513      	push	{r0, r1, r4, lr}
90026ef6:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
90026efa:	4604      	mov	r4, r0
90026efc:	e9cd 2100 	strd	r2, r1, [sp]
90026f00:	b9a3      	cbnz	r3, 90026f2c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
90026f02:	466a      	mov	r2, sp
90026f04:	a901      	add	r1, sp, #4
90026f06:	4620      	mov	r0, r4
90026f08:	f7ff ffe2 	bl	90026ed0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
90026f0c:	68a3      	ldr	r3, [r4, #8]
90026f0e:	9901      	ldr	r1, [sp, #4]
90026f10:	9a00      	ldr	r2, [sp, #0]
90026f12:	1ac9      	subs	r1, r1, r3
90026f14:	68e3      	ldr	r3, [r4, #12]
90026f16:	1ad2      	subs	r2, r2, r3
90026f18:	9101      	str	r1, [sp, #4]
90026f1a:	2a00      	cmp	r2, #0
90026f1c:	9200      	str	r2, [sp, #0]
90026f1e:	da0b      	bge.n	90026f38 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
90026f20:	2301      	movs	r3, #1
90026f22:	2900      	cmp	r1, #0
90026f24:	da0e      	bge.n	90026f44 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
90026f26:	f043 0304 	orr.w	r3, r3, #4
90026f2a:	e013      	b.n	90026f54 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
90026f2c:	f7ff ff02 	bl	90026d34 <_ZN8touchgfx6Canvas5closeEv>
90026f30:	2800      	cmp	r0, #0
90026f32:	d1e6      	bne.n	90026f02 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
90026f34:	b002      	add	sp, #8
90026f36:	bd10      	pop	{r4, pc}
90026f38:	6963      	ldr	r3, [r4, #20]
90026f3a:	429a      	cmp	r2, r3
90026f3c:	bfac      	ite	ge
90026f3e:	2302      	movge	r3, #2
90026f40:	2300      	movlt	r3, #0
90026f42:	e7ee      	b.n	90026f22 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
90026f44:	6920      	ldr	r0, [r4, #16]
90026f46:	4281      	cmp	r1, r0
90026f48:	bfac      	ite	ge
90026f4a:	2008      	movge	r0, #8
90026f4c:	2000      	movlt	r0, #0
90026f4e:	4318      	orrs	r0, r3
90026f50:	b2c3      	uxtb	r3, r0
90026f52:	b158      	cbz	r0, 90026f6c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
90026f54:	2200      	movs	r2, #0
90026f56:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
90026f5a:	9901      	ldr	r1, [sp, #4]
90026f5c:	9a00      	ldr	r2, [sp, #0]
90026f5e:	66a1      	str	r1, [r4, #104]	; 0x68
90026f60:	66e2      	str	r2, [r4, #108]	; 0x6c
90026f62:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
90026f66:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
90026f6a:	e7e3      	b.n	90026f34 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
90026f6c:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
90026f70:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
90026f74:	4298      	cmp	r0, r3
90026f76:	d803      	bhi.n	90026f80 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
90026f78:	f104 0020 	add.w	r0, r4, #32
90026f7c:	f7ee ffee 	bl	90015f5c <_ZN8touchgfx7Outline6moveToEii>
90026f80:	2301      	movs	r3, #1
90026f82:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
90026f86:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
90026f8a:	2300      	movs	r3, #0
90026f8c:	e7e5      	b.n	90026f5a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

90026f8e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
90026f8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
90026f90:	ab02      	add	r3, sp, #8
90026f92:	4604      	mov	r4, r0
90026f94:	9101      	str	r1, [sp, #4]
90026f96:	a901      	add	r1, sp, #4
90026f98:	f843 2d08 	str.w	r2, [r3, #-8]!
90026f9c:	461a      	mov	r2, r3
90026f9e:	f7ff ff97 	bl	90026ed0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
90026fa2:	68a3      	ldr	r3, [r4, #8]
90026fa4:	9901      	ldr	r1, [sp, #4]
90026fa6:	9a00      	ldr	r2, [sp, #0]
90026fa8:	1ac9      	subs	r1, r1, r3
90026faa:	68e3      	ldr	r3, [r4, #12]
90026fac:	1ad2      	subs	r2, r2, r3
90026fae:	9101      	str	r1, [sp, #4]
90026fb0:	2a00      	cmp	r2, #0
90026fb2:	9200      	str	r2, [sp, #0]
90026fb4:	db1c      	blt.n	90026ff0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
90026fb6:	6963      	ldr	r3, [r4, #20]
90026fb8:	429a      	cmp	r2, r3
90026fba:	bfac      	ite	ge
90026fbc:	2002      	movge	r0, #2
90026fbe:	2000      	movlt	r0, #0
90026fc0:	2900      	cmp	r1, #0
90026fc2:	db17      	blt.n	90026ff4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
90026fc4:	6923      	ldr	r3, [r4, #16]
90026fc6:	4299      	cmp	r1, r3
90026fc8:	bfac      	ite	ge
90026fca:	2308      	movge	r3, #8
90026fcc:	2300      	movlt	r3, #0
90026fce:	4303      	orrs	r3, r0
90026fd0:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
90026fd4:	b2dd      	uxtb	r5, r3
90026fd6:	b978      	cbnz	r0, 90026ff8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
90026fd8:	f104 0020 	add.w	r0, r4, #32
90026fdc:	f7ff fd38 	bl	90026a50 <_ZN8touchgfx10Rasterizer6lineToEii>
90026fe0:	9b01      	ldr	r3, [sp, #4]
90026fe2:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
90026fe6:	65e3      	str	r3, [r4, #92]	; 0x5c
90026fe8:	9b00      	ldr	r3, [sp, #0]
90026fea:	6623      	str	r3, [r4, #96]	; 0x60
90026fec:	b002      	add	sp, #8
90026fee:	bd70      	pop	{r4, r5, r6, pc}
90026ff0:	2001      	movs	r0, #1
90026ff2:	e7e5      	b.n	90026fc0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
90026ff4:	2304      	movs	r3, #4
90026ff6:	e7ea      	b.n	90026fce <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
90026ff8:	b113      	cbz	r3, 90027000 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
90026ffa:	ea10 0305 	ands.w	r3, r0, r5
90026ffe:	d11c      	bne.n	9002703a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
90027000:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
90027004:	f104 0620 	add.w	r6, r4, #32
90027008:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
9002700c:	b98b      	cbnz	r3, 90027032 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
9002700e:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
90027012:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
90027016:	4298      	cmp	r0, r3
90027018:	d802      	bhi.n	90027020 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
9002701a:	4630      	mov	r0, r6
9002701c:	f7ee ff9e 	bl	90015f5c <_ZN8touchgfx7Outline6moveToEii>
90027020:	2301      	movs	r3, #1
90027022:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
90027026:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
9002702a:	4630      	mov	r0, r6
9002702c:	e9dd 2100 	ldrd	r2, r1, [sp]
90027030:	e7d4      	b.n	90026fdc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
90027032:	4630      	mov	r0, r6
90027034:	f7ff fd0c 	bl	90026a50 <_ZN8touchgfx10Rasterizer6lineToEii>
90027038:	e7f7      	b.n	9002702a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
9002703a:	461d      	mov	r5, r3
9002703c:	e7d0      	b.n	90026fe0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

90027040 <_ZN8touchgfx6CanvasD1Ev>:
90027040:	4b04      	ldr	r3, [pc, #16]	; (90027054 <_ZN8touchgfx6CanvasD1Ev+0x14>)
90027042:	b510      	push	{r4, lr}
90027044:	4604      	mov	r4, r0
90027046:	f840 3b20 	str.w	r3, [r0], #32
9002704a:	f7ee fa8f 	bl	9001556c <_ZN8touchgfx7OutlineD1Ev>
9002704e:	4620      	mov	r0, r4
90027050:	bd10      	pop	{r4, pc}
90027052:	bf00      	nop
90027054:	9002c2b8 	.word	0x9002c2b8

90027058 <_ZN8touchgfx6CanvasD0Ev>:
90027058:	b510      	push	{r4, lr}
9002705a:	4604      	mov	r4, r0
9002705c:	f7ff fff0 	bl	90027040 <_ZN8touchgfx6CanvasD1Ev>
90027060:	2170      	movs	r1, #112	; 0x70
90027062:	4620      	mov	r0, r4
90027064:	f000 f807 	bl	90027076 <_ZdlPvj>
90027068:	4620      	mov	r0, r4
9002706a:	bd10      	pop	{r4, pc}

9002706c <__aeabi_atexit>:
9002706c:	460b      	mov	r3, r1
9002706e:	4601      	mov	r1, r0
90027070:	4618      	mov	r0, r3
90027072:	f000 b90f 	b.w	90027294 <__cxa_atexit>

90027076 <_ZdlPvj>:
90027076:	f000 b812 	b.w	9002709e <_ZdlPv>

9002707a <__cxa_guard_acquire>:
9002707a:	6803      	ldr	r3, [r0, #0]
9002707c:	07db      	lsls	r3, r3, #31
9002707e:	d406      	bmi.n	9002708e <__cxa_guard_acquire+0x14>
90027080:	7843      	ldrb	r3, [r0, #1]
90027082:	b103      	cbz	r3, 90027086 <__cxa_guard_acquire+0xc>
90027084:	deff      	udf	#255	; 0xff
90027086:	2301      	movs	r3, #1
90027088:	7043      	strb	r3, [r0, #1]
9002708a:	4618      	mov	r0, r3
9002708c:	4770      	bx	lr
9002708e:	2000      	movs	r0, #0
90027090:	4770      	bx	lr

90027092 <__cxa_guard_release>:
90027092:	2301      	movs	r3, #1
90027094:	6003      	str	r3, [r0, #0]
90027096:	4770      	bx	lr

90027098 <__cxa_pure_virtual>:
90027098:	b508      	push	{r3, lr}
9002709a:	f000 f80f 	bl	900270bc <_ZSt9terminatev>

9002709e <_ZdlPv>:
9002709e:	f000 b845 	b.w	9002712c <free>

900270a2 <_ZN10__cxxabiv111__terminateEPFvvE>:
900270a2:	b508      	push	{r3, lr}
900270a4:	4780      	blx	r0
900270a6:	f000 f80e 	bl	900270c6 <abort>
	...

900270ac <_ZSt13get_terminatev>:
900270ac:	4b02      	ldr	r3, [pc, #8]	; (900270b8 <_ZSt13get_terminatev+0xc>)
900270ae:	6818      	ldr	r0, [r3, #0]
900270b0:	f3bf 8f5b 	dmb	ish
900270b4:	4770      	bx	lr
900270b6:	bf00      	nop
900270b8:	240000dc 	.word	0x240000dc

900270bc <_ZSt9terminatev>:
900270bc:	b508      	push	{r3, lr}
900270be:	f7ff fff5 	bl	900270ac <_ZSt13get_terminatev>
900270c2:	f7ff ffee 	bl	900270a2 <_ZN10__cxxabiv111__terminateEPFvvE>

900270c6 <abort>:
900270c6:	b508      	push	{r3, lr}
900270c8:	2006      	movs	r0, #6
900270ca:	f000 faf9 	bl	900276c0 <raise>
900270ce:	2001      	movs	r0, #1
900270d0:	f7dd fe62 	bl	90004d98 <_exit>

900270d4 <__assert_func>:
900270d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
900270d6:	4614      	mov	r4, r2
900270d8:	461a      	mov	r2, r3
900270da:	4b09      	ldr	r3, [pc, #36]	; (90027100 <__assert_func+0x2c>)
900270dc:	681b      	ldr	r3, [r3, #0]
900270de:	4605      	mov	r5, r0
900270e0:	68d8      	ldr	r0, [r3, #12]
900270e2:	b14c      	cbz	r4, 900270f8 <__assert_func+0x24>
900270e4:	4b07      	ldr	r3, [pc, #28]	; (90027104 <__assert_func+0x30>)
900270e6:	9100      	str	r1, [sp, #0]
900270e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
900270ec:	4906      	ldr	r1, [pc, #24]	; (90027108 <__assert_func+0x34>)
900270ee:	462b      	mov	r3, r5
900270f0:	f000 f982 	bl	900273f8 <fiprintf>
900270f4:	f7ff ffe7 	bl	900270c6 <abort>
900270f8:	4b04      	ldr	r3, [pc, #16]	; (9002710c <__assert_func+0x38>)
900270fa:	461c      	mov	r4, r3
900270fc:	e7f3      	b.n	900270e6 <__assert_func+0x12>
900270fe:	bf00      	nop
90027100:	24000138 	.word	0x24000138
90027104:	9002c2c4 	.word	0x9002c2c4
90027108:	9002c2d1 	.word	0x9002c2d1
9002710c:	9002c2ff 	.word	0x9002c2ff

90027110 <atexit>:
90027110:	2300      	movs	r3, #0
90027112:	4601      	mov	r1, r0
90027114:	461a      	mov	r2, r3
90027116:	4618      	mov	r0, r3
90027118:	f000 bb80 	b.w	9002781c <__register_exitproc>

9002711c <malloc>:
9002711c:	4b02      	ldr	r3, [pc, #8]	; (90027128 <malloc+0xc>)
9002711e:	4601      	mov	r1, r0
90027120:	6818      	ldr	r0, [r3, #0]
90027122:	f000 b82b 	b.w	9002717c <_malloc_r>
90027126:	bf00      	nop
90027128:	24000138 	.word	0x24000138

9002712c <free>:
9002712c:	4b02      	ldr	r3, [pc, #8]	; (90027138 <free+0xc>)
9002712e:	4601      	mov	r1, r0
90027130:	6818      	ldr	r0, [r3, #0]
90027132:	f000 bbd1 	b.w	900278d8 <_free_r>
90027136:	bf00      	nop
90027138:	24000138 	.word	0x24000138

9002713c <sbrk_aligned>:
9002713c:	b570      	push	{r4, r5, r6, lr}
9002713e:	4e0e      	ldr	r6, [pc, #56]	; (90027178 <sbrk_aligned+0x3c>)
90027140:	460c      	mov	r4, r1
90027142:	6831      	ldr	r1, [r6, #0]
90027144:	4605      	mov	r5, r0
90027146:	b911      	cbnz	r1, 9002714e <sbrk_aligned+0x12>
90027148:	f000 fb0a 	bl	90027760 <_sbrk_r>
9002714c:	6030      	str	r0, [r6, #0]
9002714e:	4621      	mov	r1, r4
90027150:	4628      	mov	r0, r5
90027152:	f000 fb05 	bl	90027760 <_sbrk_r>
90027156:	1c43      	adds	r3, r0, #1
90027158:	d00a      	beq.n	90027170 <sbrk_aligned+0x34>
9002715a:	1cc4      	adds	r4, r0, #3
9002715c:	f024 0403 	bic.w	r4, r4, #3
90027160:	42a0      	cmp	r0, r4
90027162:	d007      	beq.n	90027174 <sbrk_aligned+0x38>
90027164:	1a21      	subs	r1, r4, r0
90027166:	4628      	mov	r0, r5
90027168:	f000 fafa 	bl	90027760 <_sbrk_r>
9002716c:	3001      	adds	r0, #1
9002716e:	d101      	bne.n	90027174 <sbrk_aligned+0x38>
90027170:	f04f 34ff 	mov.w	r4, #4294967295
90027174:	4620      	mov	r0, r4
90027176:	bd70      	pop	{r4, r5, r6, pc}
90027178:	2402829c 	.word	0x2402829c

9002717c <_malloc_r>:
9002717c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90027180:	1ccd      	adds	r5, r1, #3
90027182:	f025 0503 	bic.w	r5, r5, #3
90027186:	3508      	adds	r5, #8
90027188:	2d0c      	cmp	r5, #12
9002718a:	bf38      	it	cc
9002718c:	250c      	movcc	r5, #12
9002718e:	2d00      	cmp	r5, #0
90027190:	4607      	mov	r7, r0
90027192:	db01      	blt.n	90027198 <_malloc_r+0x1c>
90027194:	42a9      	cmp	r1, r5
90027196:	d905      	bls.n	900271a4 <_malloc_r+0x28>
90027198:	230c      	movs	r3, #12
9002719a:	603b      	str	r3, [r7, #0]
9002719c:	2600      	movs	r6, #0
9002719e:	4630      	mov	r0, r6
900271a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
900271a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 90027278 <_malloc_r+0xfc>
900271a8:	f000 f868 	bl	9002727c <__malloc_lock>
900271ac:	f8d8 3000 	ldr.w	r3, [r8]
900271b0:	461c      	mov	r4, r3
900271b2:	bb5c      	cbnz	r4, 9002720c <_malloc_r+0x90>
900271b4:	4629      	mov	r1, r5
900271b6:	4638      	mov	r0, r7
900271b8:	f7ff ffc0 	bl	9002713c <sbrk_aligned>
900271bc:	1c43      	adds	r3, r0, #1
900271be:	4604      	mov	r4, r0
900271c0:	d155      	bne.n	9002726e <_malloc_r+0xf2>
900271c2:	f8d8 4000 	ldr.w	r4, [r8]
900271c6:	4626      	mov	r6, r4
900271c8:	2e00      	cmp	r6, #0
900271ca:	d145      	bne.n	90027258 <_malloc_r+0xdc>
900271cc:	2c00      	cmp	r4, #0
900271ce:	d048      	beq.n	90027262 <_malloc_r+0xe6>
900271d0:	6823      	ldr	r3, [r4, #0]
900271d2:	4631      	mov	r1, r6
900271d4:	4638      	mov	r0, r7
900271d6:	eb04 0903 	add.w	r9, r4, r3
900271da:	f000 fac1 	bl	90027760 <_sbrk_r>
900271de:	4581      	cmp	r9, r0
900271e0:	d13f      	bne.n	90027262 <_malloc_r+0xe6>
900271e2:	6821      	ldr	r1, [r4, #0]
900271e4:	1a6d      	subs	r5, r5, r1
900271e6:	4629      	mov	r1, r5
900271e8:	4638      	mov	r0, r7
900271ea:	f7ff ffa7 	bl	9002713c <sbrk_aligned>
900271ee:	3001      	adds	r0, #1
900271f0:	d037      	beq.n	90027262 <_malloc_r+0xe6>
900271f2:	6823      	ldr	r3, [r4, #0]
900271f4:	442b      	add	r3, r5
900271f6:	6023      	str	r3, [r4, #0]
900271f8:	f8d8 3000 	ldr.w	r3, [r8]
900271fc:	2b00      	cmp	r3, #0
900271fe:	d038      	beq.n	90027272 <_malloc_r+0xf6>
90027200:	685a      	ldr	r2, [r3, #4]
90027202:	42a2      	cmp	r2, r4
90027204:	d12b      	bne.n	9002725e <_malloc_r+0xe2>
90027206:	2200      	movs	r2, #0
90027208:	605a      	str	r2, [r3, #4]
9002720a:	e00f      	b.n	9002722c <_malloc_r+0xb0>
9002720c:	6822      	ldr	r2, [r4, #0]
9002720e:	1b52      	subs	r2, r2, r5
90027210:	d41f      	bmi.n	90027252 <_malloc_r+0xd6>
90027212:	2a0b      	cmp	r2, #11
90027214:	d917      	bls.n	90027246 <_malloc_r+0xca>
90027216:	1961      	adds	r1, r4, r5
90027218:	42a3      	cmp	r3, r4
9002721a:	6025      	str	r5, [r4, #0]
9002721c:	bf18      	it	ne
9002721e:	6059      	strne	r1, [r3, #4]
90027220:	6863      	ldr	r3, [r4, #4]
90027222:	bf08      	it	eq
90027224:	f8c8 1000 	streq.w	r1, [r8]
90027228:	5162      	str	r2, [r4, r5]
9002722a:	604b      	str	r3, [r1, #4]
9002722c:	4638      	mov	r0, r7
9002722e:	f104 060b 	add.w	r6, r4, #11
90027232:	f000 f829 	bl	90027288 <__malloc_unlock>
90027236:	f026 0607 	bic.w	r6, r6, #7
9002723a:	1d23      	adds	r3, r4, #4
9002723c:	1af2      	subs	r2, r6, r3
9002723e:	d0ae      	beq.n	9002719e <_malloc_r+0x22>
90027240:	1b9b      	subs	r3, r3, r6
90027242:	50a3      	str	r3, [r4, r2]
90027244:	e7ab      	b.n	9002719e <_malloc_r+0x22>
90027246:	42a3      	cmp	r3, r4
90027248:	6862      	ldr	r2, [r4, #4]
9002724a:	d1dd      	bne.n	90027208 <_malloc_r+0x8c>
9002724c:	f8c8 2000 	str.w	r2, [r8]
90027250:	e7ec      	b.n	9002722c <_malloc_r+0xb0>
90027252:	4623      	mov	r3, r4
90027254:	6864      	ldr	r4, [r4, #4]
90027256:	e7ac      	b.n	900271b2 <_malloc_r+0x36>
90027258:	4634      	mov	r4, r6
9002725a:	6876      	ldr	r6, [r6, #4]
9002725c:	e7b4      	b.n	900271c8 <_malloc_r+0x4c>
9002725e:	4613      	mov	r3, r2
90027260:	e7cc      	b.n	900271fc <_malloc_r+0x80>
90027262:	230c      	movs	r3, #12
90027264:	603b      	str	r3, [r7, #0]
90027266:	4638      	mov	r0, r7
90027268:	f000 f80e 	bl	90027288 <__malloc_unlock>
9002726c:	e797      	b.n	9002719e <_malloc_r+0x22>
9002726e:	6025      	str	r5, [r4, #0]
90027270:	e7dc      	b.n	9002722c <_malloc_r+0xb0>
90027272:	605b      	str	r3, [r3, #4]
90027274:	deff      	udf	#255	; 0xff
90027276:	bf00      	nop
90027278:	24028298 	.word	0x24028298

9002727c <__malloc_lock>:
9002727c:	4801      	ldr	r0, [pc, #4]	; (90027284 <__malloc_lock+0x8>)
9002727e:	f000 babc 	b.w	900277fa <__retarget_lock_acquire_recursive>
90027282:	bf00      	nop
90027284:	240283e1 	.word	0x240283e1

90027288 <__malloc_unlock>:
90027288:	4801      	ldr	r0, [pc, #4]	; (90027290 <__malloc_unlock+0x8>)
9002728a:	f000 bab7 	b.w	900277fc <__retarget_lock_release_recursive>
9002728e:	bf00      	nop
90027290:	240283e1 	.word	0x240283e1

90027294 <__cxa_atexit>:
90027294:	b510      	push	{r4, lr}
90027296:	4c05      	ldr	r4, [pc, #20]	; (900272ac <__cxa_atexit+0x18>)
90027298:	4613      	mov	r3, r2
9002729a:	b12c      	cbz	r4, 900272a8 <__cxa_atexit+0x14>
9002729c:	460a      	mov	r2, r1
9002729e:	4601      	mov	r1, r0
900272a0:	2002      	movs	r0, #2
900272a2:	f000 fabb 	bl	9002781c <__register_exitproc>
900272a6:	bd10      	pop	{r4, pc}
900272a8:	4620      	mov	r0, r4
900272aa:	e7fc      	b.n	900272a6 <__cxa_atexit+0x12>
900272ac:	9002781d 	.word	0x9002781d

900272b0 <std>:
900272b0:	2300      	movs	r3, #0
900272b2:	b510      	push	{r4, lr}
900272b4:	4604      	mov	r4, r0
900272b6:	e9c0 3300 	strd	r3, r3, [r0]
900272ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
900272be:	6083      	str	r3, [r0, #8]
900272c0:	8181      	strh	r1, [r0, #12]
900272c2:	6643      	str	r3, [r0, #100]	; 0x64
900272c4:	81c2      	strh	r2, [r0, #14]
900272c6:	6183      	str	r3, [r0, #24]
900272c8:	4619      	mov	r1, r3
900272ca:	2208      	movs	r2, #8
900272cc:	305c      	adds	r0, #92	; 0x5c
900272ce:	f000 f9b5 	bl	9002763c <memset>
900272d2:	4b0d      	ldr	r3, [pc, #52]	; (90027308 <std+0x58>)
900272d4:	6263      	str	r3, [r4, #36]	; 0x24
900272d6:	4b0d      	ldr	r3, [pc, #52]	; (9002730c <std+0x5c>)
900272d8:	62a3      	str	r3, [r4, #40]	; 0x28
900272da:	4b0d      	ldr	r3, [pc, #52]	; (90027310 <std+0x60>)
900272dc:	62e3      	str	r3, [r4, #44]	; 0x2c
900272de:	4b0d      	ldr	r3, [pc, #52]	; (90027314 <std+0x64>)
900272e0:	6323      	str	r3, [r4, #48]	; 0x30
900272e2:	4b0d      	ldr	r3, [pc, #52]	; (90027318 <std+0x68>)
900272e4:	6224      	str	r4, [r4, #32]
900272e6:	429c      	cmp	r4, r3
900272e8:	d006      	beq.n	900272f8 <std+0x48>
900272ea:	f103 0268 	add.w	r2, r3, #104	; 0x68
900272ee:	4294      	cmp	r4, r2
900272f0:	d002      	beq.n	900272f8 <std+0x48>
900272f2:	33d0      	adds	r3, #208	; 0xd0
900272f4:	429c      	cmp	r4, r3
900272f6:	d105      	bne.n	90027304 <std+0x54>
900272f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
900272fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90027300:	f000 ba7a 	b.w	900277f8 <__retarget_lock_init_recursive>
90027304:	bd10      	pop	{r4, pc}
90027306:	bf00      	nop
90027308:	90027459 	.word	0x90027459
9002730c:	9002747b 	.word	0x9002747b
90027310:	900274b3 	.word	0x900274b3
90027314:	900274d7 	.word	0x900274d7
90027318:	240282a0 	.word	0x240282a0

9002731c <stdio_exit_handler>:
9002731c:	4a02      	ldr	r2, [pc, #8]	; (90027328 <stdio_exit_handler+0xc>)
9002731e:	4903      	ldr	r1, [pc, #12]	; (9002732c <stdio_exit_handler+0x10>)
90027320:	4803      	ldr	r0, [pc, #12]	; (90027330 <stdio_exit_handler+0x14>)
90027322:	f000 b87b 	b.w	9002741c <_fwalk_sglue>
90027326:	bf00      	nop
90027328:	240000e0 	.word	0x240000e0
9002732c:	90028025 	.word	0x90028025
90027330:	240000ec 	.word	0x240000ec

90027334 <cleanup_stdio>:
90027334:	6841      	ldr	r1, [r0, #4]
90027336:	4b0c      	ldr	r3, [pc, #48]	; (90027368 <cleanup_stdio+0x34>)
90027338:	4299      	cmp	r1, r3
9002733a:	b510      	push	{r4, lr}
9002733c:	4604      	mov	r4, r0
9002733e:	d001      	beq.n	90027344 <cleanup_stdio+0x10>
90027340:	f000 fe70 	bl	90028024 <_fflush_r>
90027344:	68a1      	ldr	r1, [r4, #8]
90027346:	4b09      	ldr	r3, [pc, #36]	; (9002736c <cleanup_stdio+0x38>)
90027348:	4299      	cmp	r1, r3
9002734a:	d002      	beq.n	90027352 <cleanup_stdio+0x1e>
9002734c:	4620      	mov	r0, r4
9002734e:	f000 fe69 	bl	90028024 <_fflush_r>
90027352:	68e1      	ldr	r1, [r4, #12]
90027354:	4b06      	ldr	r3, [pc, #24]	; (90027370 <cleanup_stdio+0x3c>)
90027356:	4299      	cmp	r1, r3
90027358:	d004      	beq.n	90027364 <cleanup_stdio+0x30>
9002735a:	4620      	mov	r0, r4
9002735c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90027360:	f000 be60 	b.w	90028024 <_fflush_r>
90027364:	bd10      	pop	{r4, pc}
90027366:	bf00      	nop
90027368:	240282a0 	.word	0x240282a0
9002736c:	24028308 	.word	0x24028308
90027370:	24028370 	.word	0x24028370

90027374 <global_stdio_init.part.0>:
90027374:	b510      	push	{r4, lr}
90027376:	4b0b      	ldr	r3, [pc, #44]	; (900273a4 <global_stdio_init.part.0+0x30>)
90027378:	4c0b      	ldr	r4, [pc, #44]	; (900273a8 <global_stdio_init.part.0+0x34>)
9002737a:	4a0c      	ldr	r2, [pc, #48]	; (900273ac <global_stdio_init.part.0+0x38>)
9002737c:	601a      	str	r2, [r3, #0]
9002737e:	4620      	mov	r0, r4
90027380:	2200      	movs	r2, #0
90027382:	2104      	movs	r1, #4
90027384:	f7ff ff94 	bl	900272b0 <std>
90027388:	f104 0068 	add.w	r0, r4, #104	; 0x68
9002738c:	2201      	movs	r2, #1
9002738e:	2109      	movs	r1, #9
90027390:	f7ff ff8e 	bl	900272b0 <std>
90027394:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
90027398:	2202      	movs	r2, #2
9002739a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9002739e:	2112      	movs	r1, #18
900273a0:	f7ff bf86 	b.w	900272b0 <std>
900273a4:	240283d8 	.word	0x240283d8
900273a8:	240282a0 	.word	0x240282a0
900273ac:	9002731d 	.word	0x9002731d

900273b0 <__sfp_lock_acquire>:
900273b0:	4801      	ldr	r0, [pc, #4]	; (900273b8 <__sfp_lock_acquire+0x8>)
900273b2:	f000 ba22 	b.w	900277fa <__retarget_lock_acquire_recursive>
900273b6:	bf00      	nop
900273b8:	240283e2 	.word	0x240283e2

900273bc <__sfp_lock_release>:
900273bc:	4801      	ldr	r0, [pc, #4]	; (900273c4 <__sfp_lock_release+0x8>)
900273be:	f000 ba1d 	b.w	900277fc <__retarget_lock_release_recursive>
900273c2:	bf00      	nop
900273c4:	240283e2 	.word	0x240283e2

900273c8 <__sinit>:
900273c8:	b510      	push	{r4, lr}
900273ca:	4604      	mov	r4, r0
900273cc:	f7ff fff0 	bl	900273b0 <__sfp_lock_acquire>
900273d0:	6a23      	ldr	r3, [r4, #32]
900273d2:	b11b      	cbz	r3, 900273dc <__sinit+0x14>
900273d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900273d8:	f7ff bff0 	b.w	900273bc <__sfp_lock_release>
900273dc:	4b04      	ldr	r3, [pc, #16]	; (900273f0 <__sinit+0x28>)
900273de:	6223      	str	r3, [r4, #32]
900273e0:	4b04      	ldr	r3, [pc, #16]	; (900273f4 <__sinit+0x2c>)
900273e2:	681b      	ldr	r3, [r3, #0]
900273e4:	2b00      	cmp	r3, #0
900273e6:	d1f5      	bne.n	900273d4 <__sinit+0xc>
900273e8:	f7ff ffc4 	bl	90027374 <global_stdio_init.part.0>
900273ec:	e7f2      	b.n	900273d4 <__sinit+0xc>
900273ee:	bf00      	nop
900273f0:	90027335 	.word	0x90027335
900273f4:	240283d8 	.word	0x240283d8

900273f8 <fiprintf>:
900273f8:	b40e      	push	{r1, r2, r3}
900273fa:	b503      	push	{r0, r1, lr}
900273fc:	4601      	mov	r1, r0
900273fe:	ab03      	add	r3, sp, #12
90027400:	4805      	ldr	r0, [pc, #20]	; (90027418 <fiprintf+0x20>)
90027402:	f853 2b04 	ldr.w	r2, [r3], #4
90027406:	6800      	ldr	r0, [r0, #0]
90027408:	9301      	str	r3, [sp, #4]
9002740a:	f000 fadb 	bl	900279c4 <_vfiprintf_r>
9002740e:	b002      	add	sp, #8
90027410:	f85d eb04 	ldr.w	lr, [sp], #4
90027414:	b003      	add	sp, #12
90027416:	4770      	bx	lr
90027418:	24000138 	.word	0x24000138

9002741c <_fwalk_sglue>:
9002741c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90027420:	4607      	mov	r7, r0
90027422:	4688      	mov	r8, r1
90027424:	4614      	mov	r4, r2
90027426:	2600      	movs	r6, #0
90027428:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
9002742c:	f1b9 0901 	subs.w	r9, r9, #1
90027430:	d505      	bpl.n	9002743e <_fwalk_sglue+0x22>
90027432:	6824      	ldr	r4, [r4, #0]
90027434:	2c00      	cmp	r4, #0
90027436:	d1f7      	bne.n	90027428 <_fwalk_sglue+0xc>
90027438:	4630      	mov	r0, r6
9002743a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9002743e:	89ab      	ldrh	r3, [r5, #12]
90027440:	2b01      	cmp	r3, #1
90027442:	d907      	bls.n	90027454 <_fwalk_sglue+0x38>
90027444:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
90027448:	3301      	adds	r3, #1
9002744a:	d003      	beq.n	90027454 <_fwalk_sglue+0x38>
9002744c:	4629      	mov	r1, r5
9002744e:	4638      	mov	r0, r7
90027450:	47c0      	blx	r8
90027452:	4306      	orrs	r6, r0
90027454:	3568      	adds	r5, #104	; 0x68
90027456:	e7e9      	b.n	9002742c <_fwalk_sglue+0x10>

90027458 <__sread>:
90027458:	b510      	push	{r4, lr}
9002745a:	460c      	mov	r4, r1
9002745c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90027460:	f000 f958 	bl	90027714 <_read_r>
90027464:	2800      	cmp	r0, #0
90027466:	bfab      	itete	ge
90027468:	6d63      	ldrge	r3, [r4, #84]	; 0x54
9002746a:	89a3      	ldrhlt	r3, [r4, #12]
9002746c:	181b      	addge	r3, r3, r0
9002746e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
90027472:	bfac      	ite	ge
90027474:	6563      	strge	r3, [r4, #84]	; 0x54
90027476:	81a3      	strhlt	r3, [r4, #12]
90027478:	bd10      	pop	{r4, pc}

9002747a <__swrite>:
9002747a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9002747e:	461f      	mov	r7, r3
90027480:	898b      	ldrh	r3, [r1, #12]
90027482:	05db      	lsls	r3, r3, #23
90027484:	4605      	mov	r5, r0
90027486:	460c      	mov	r4, r1
90027488:	4616      	mov	r6, r2
9002748a:	d505      	bpl.n	90027498 <__swrite+0x1e>
9002748c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90027490:	2302      	movs	r3, #2
90027492:	2200      	movs	r2, #0
90027494:	f000 f92c 	bl	900276f0 <_lseek_r>
90027498:	89a3      	ldrh	r3, [r4, #12]
9002749a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9002749e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
900274a2:	81a3      	strh	r3, [r4, #12]
900274a4:	4632      	mov	r2, r6
900274a6:	463b      	mov	r3, r7
900274a8:	4628      	mov	r0, r5
900274aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
900274ae:	f000 b967 	b.w	90027780 <_write_r>

900274b2 <__sseek>:
900274b2:	b510      	push	{r4, lr}
900274b4:	460c      	mov	r4, r1
900274b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
900274ba:	f000 f919 	bl	900276f0 <_lseek_r>
900274be:	1c43      	adds	r3, r0, #1
900274c0:	89a3      	ldrh	r3, [r4, #12]
900274c2:	bf15      	itete	ne
900274c4:	6560      	strne	r0, [r4, #84]	; 0x54
900274c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
900274ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
900274ce:	81a3      	strheq	r3, [r4, #12]
900274d0:	bf18      	it	ne
900274d2:	81a3      	strhne	r3, [r4, #12]
900274d4:	bd10      	pop	{r4, pc}

900274d6 <__sclose>:
900274d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
900274da:	f000 b8f9 	b.w	900276d0 <_close_r>

900274de <__swbuf_r>:
900274de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900274e0:	460e      	mov	r6, r1
900274e2:	4614      	mov	r4, r2
900274e4:	4605      	mov	r5, r0
900274e6:	b118      	cbz	r0, 900274f0 <__swbuf_r+0x12>
900274e8:	6a03      	ldr	r3, [r0, #32]
900274ea:	b90b      	cbnz	r3, 900274f0 <__swbuf_r+0x12>
900274ec:	f7ff ff6c 	bl	900273c8 <__sinit>
900274f0:	69a3      	ldr	r3, [r4, #24]
900274f2:	60a3      	str	r3, [r4, #8]
900274f4:	89a3      	ldrh	r3, [r4, #12]
900274f6:	071a      	lsls	r2, r3, #28
900274f8:	d525      	bpl.n	90027546 <__swbuf_r+0x68>
900274fa:	6923      	ldr	r3, [r4, #16]
900274fc:	b31b      	cbz	r3, 90027546 <__swbuf_r+0x68>
900274fe:	6823      	ldr	r3, [r4, #0]
90027500:	6922      	ldr	r2, [r4, #16]
90027502:	1a98      	subs	r0, r3, r2
90027504:	6963      	ldr	r3, [r4, #20]
90027506:	b2f6      	uxtb	r6, r6
90027508:	4283      	cmp	r3, r0
9002750a:	4637      	mov	r7, r6
9002750c:	dc04      	bgt.n	90027518 <__swbuf_r+0x3a>
9002750e:	4621      	mov	r1, r4
90027510:	4628      	mov	r0, r5
90027512:	f000 fd87 	bl	90028024 <_fflush_r>
90027516:	b9e0      	cbnz	r0, 90027552 <__swbuf_r+0x74>
90027518:	68a3      	ldr	r3, [r4, #8]
9002751a:	3b01      	subs	r3, #1
9002751c:	60a3      	str	r3, [r4, #8]
9002751e:	6823      	ldr	r3, [r4, #0]
90027520:	1c5a      	adds	r2, r3, #1
90027522:	6022      	str	r2, [r4, #0]
90027524:	701e      	strb	r6, [r3, #0]
90027526:	6962      	ldr	r2, [r4, #20]
90027528:	1c43      	adds	r3, r0, #1
9002752a:	429a      	cmp	r2, r3
9002752c:	d004      	beq.n	90027538 <__swbuf_r+0x5a>
9002752e:	89a3      	ldrh	r3, [r4, #12]
90027530:	07db      	lsls	r3, r3, #31
90027532:	d506      	bpl.n	90027542 <__swbuf_r+0x64>
90027534:	2e0a      	cmp	r6, #10
90027536:	d104      	bne.n	90027542 <__swbuf_r+0x64>
90027538:	4621      	mov	r1, r4
9002753a:	4628      	mov	r0, r5
9002753c:	f000 fd72 	bl	90028024 <_fflush_r>
90027540:	b938      	cbnz	r0, 90027552 <__swbuf_r+0x74>
90027542:	4638      	mov	r0, r7
90027544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90027546:	4621      	mov	r1, r4
90027548:	4628      	mov	r0, r5
9002754a:	f000 f805 	bl	90027558 <__swsetup_r>
9002754e:	2800      	cmp	r0, #0
90027550:	d0d5      	beq.n	900274fe <__swbuf_r+0x20>
90027552:	f04f 37ff 	mov.w	r7, #4294967295
90027556:	e7f4      	b.n	90027542 <__swbuf_r+0x64>

90027558 <__swsetup_r>:
90027558:	b538      	push	{r3, r4, r5, lr}
9002755a:	4b2a      	ldr	r3, [pc, #168]	; (90027604 <__swsetup_r+0xac>)
9002755c:	4605      	mov	r5, r0
9002755e:	6818      	ldr	r0, [r3, #0]
90027560:	460c      	mov	r4, r1
90027562:	b118      	cbz	r0, 9002756c <__swsetup_r+0x14>
90027564:	6a03      	ldr	r3, [r0, #32]
90027566:	b90b      	cbnz	r3, 9002756c <__swsetup_r+0x14>
90027568:	f7ff ff2e 	bl	900273c8 <__sinit>
9002756c:	89a3      	ldrh	r3, [r4, #12]
9002756e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90027572:	0718      	lsls	r0, r3, #28
90027574:	d422      	bmi.n	900275bc <__swsetup_r+0x64>
90027576:	06d9      	lsls	r1, r3, #27
90027578:	d407      	bmi.n	9002758a <__swsetup_r+0x32>
9002757a:	2309      	movs	r3, #9
9002757c:	602b      	str	r3, [r5, #0]
9002757e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
90027582:	81a3      	strh	r3, [r4, #12]
90027584:	f04f 30ff 	mov.w	r0, #4294967295
90027588:	e034      	b.n	900275f4 <__swsetup_r+0x9c>
9002758a:	0758      	lsls	r0, r3, #29
9002758c:	d512      	bpl.n	900275b4 <__swsetup_r+0x5c>
9002758e:	6b61      	ldr	r1, [r4, #52]	; 0x34
90027590:	b141      	cbz	r1, 900275a4 <__swsetup_r+0x4c>
90027592:	f104 0344 	add.w	r3, r4, #68	; 0x44
90027596:	4299      	cmp	r1, r3
90027598:	d002      	beq.n	900275a0 <__swsetup_r+0x48>
9002759a:	4628      	mov	r0, r5
9002759c:	f000 f99c 	bl	900278d8 <_free_r>
900275a0:	2300      	movs	r3, #0
900275a2:	6363      	str	r3, [r4, #52]	; 0x34
900275a4:	89a3      	ldrh	r3, [r4, #12]
900275a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
900275aa:	81a3      	strh	r3, [r4, #12]
900275ac:	2300      	movs	r3, #0
900275ae:	6063      	str	r3, [r4, #4]
900275b0:	6923      	ldr	r3, [r4, #16]
900275b2:	6023      	str	r3, [r4, #0]
900275b4:	89a3      	ldrh	r3, [r4, #12]
900275b6:	f043 0308 	orr.w	r3, r3, #8
900275ba:	81a3      	strh	r3, [r4, #12]
900275bc:	6923      	ldr	r3, [r4, #16]
900275be:	b94b      	cbnz	r3, 900275d4 <__swsetup_r+0x7c>
900275c0:	89a3      	ldrh	r3, [r4, #12]
900275c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
900275c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
900275ca:	d003      	beq.n	900275d4 <__swsetup_r+0x7c>
900275cc:	4621      	mov	r1, r4
900275ce:	4628      	mov	r0, r5
900275d0:	f000 fd76 	bl	900280c0 <__smakebuf_r>
900275d4:	89a0      	ldrh	r0, [r4, #12]
900275d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
900275da:	f010 0301 	ands.w	r3, r0, #1
900275de:	d00a      	beq.n	900275f6 <__swsetup_r+0x9e>
900275e0:	2300      	movs	r3, #0
900275e2:	60a3      	str	r3, [r4, #8]
900275e4:	6963      	ldr	r3, [r4, #20]
900275e6:	425b      	negs	r3, r3
900275e8:	61a3      	str	r3, [r4, #24]
900275ea:	6923      	ldr	r3, [r4, #16]
900275ec:	b943      	cbnz	r3, 90027600 <__swsetup_r+0xa8>
900275ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
900275f2:	d1c4      	bne.n	9002757e <__swsetup_r+0x26>
900275f4:	bd38      	pop	{r3, r4, r5, pc}
900275f6:	0781      	lsls	r1, r0, #30
900275f8:	bf58      	it	pl
900275fa:	6963      	ldrpl	r3, [r4, #20]
900275fc:	60a3      	str	r3, [r4, #8]
900275fe:	e7f4      	b.n	900275ea <__swsetup_r+0x92>
90027600:	2000      	movs	r0, #0
90027602:	e7f7      	b.n	900275f4 <__swsetup_r+0x9c>
90027604:	24000138 	.word	0x24000138

90027608 <memmove>:
90027608:	4288      	cmp	r0, r1
9002760a:	b510      	push	{r4, lr}
9002760c:	eb01 0402 	add.w	r4, r1, r2
90027610:	d902      	bls.n	90027618 <memmove+0x10>
90027612:	4284      	cmp	r4, r0
90027614:	4623      	mov	r3, r4
90027616:	d807      	bhi.n	90027628 <memmove+0x20>
90027618:	1e43      	subs	r3, r0, #1
9002761a:	42a1      	cmp	r1, r4
9002761c:	d008      	beq.n	90027630 <memmove+0x28>
9002761e:	f811 2b01 	ldrb.w	r2, [r1], #1
90027622:	f803 2f01 	strb.w	r2, [r3, #1]!
90027626:	e7f8      	b.n	9002761a <memmove+0x12>
90027628:	4402      	add	r2, r0
9002762a:	4601      	mov	r1, r0
9002762c:	428a      	cmp	r2, r1
9002762e:	d100      	bne.n	90027632 <memmove+0x2a>
90027630:	bd10      	pop	{r4, pc}
90027632:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
90027636:	f802 4d01 	strb.w	r4, [r2, #-1]!
9002763a:	e7f7      	b.n	9002762c <memmove+0x24>

9002763c <memset>:
9002763c:	4402      	add	r2, r0
9002763e:	4603      	mov	r3, r0
90027640:	4293      	cmp	r3, r2
90027642:	d100      	bne.n	90027646 <memset+0xa>
90027644:	4770      	bx	lr
90027646:	f803 1b01 	strb.w	r1, [r3], #1
9002764a:	e7f9      	b.n	90027640 <memset+0x4>

9002764c <strncmp>:
9002764c:	b510      	push	{r4, lr}
9002764e:	b16a      	cbz	r2, 9002766c <strncmp+0x20>
90027650:	3901      	subs	r1, #1
90027652:	1884      	adds	r4, r0, r2
90027654:	f810 2b01 	ldrb.w	r2, [r0], #1
90027658:	f811 3f01 	ldrb.w	r3, [r1, #1]!
9002765c:	429a      	cmp	r2, r3
9002765e:	d103      	bne.n	90027668 <strncmp+0x1c>
90027660:	42a0      	cmp	r0, r4
90027662:	d001      	beq.n	90027668 <strncmp+0x1c>
90027664:	2a00      	cmp	r2, #0
90027666:	d1f5      	bne.n	90027654 <strncmp+0x8>
90027668:	1ad0      	subs	r0, r2, r3
9002766a:	bd10      	pop	{r4, pc}
9002766c:	4610      	mov	r0, r2
9002766e:	e7fc      	b.n	9002766a <strncmp+0x1e>

90027670 <_raise_r>:
90027670:	291f      	cmp	r1, #31
90027672:	b538      	push	{r3, r4, r5, lr}
90027674:	4604      	mov	r4, r0
90027676:	460d      	mov	r5, r1
90027678:	d904      	bls.n	90027684 <_raise_r+0x14>
9002767a:	2316      	movs	r3, #22
9002767c:	6003      	str	r3, [r0, #0]
9002767e:	f04f 30ff 	mov.w	r0, #4294967295
90027682:	bd38      	pop	{r3, r4, r5, pc}
90027684:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
90027686:	b112      	cbz	r2, 9002768e <_raise_r+0x1e>
90027688:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
9002768c:	b94b      	cbnz	r3, 900276a2 <_raise_r+0x32>
9002768e:	4620      	mov	r0, r4
90027690:	f000 f864 	bl	9002775c <_getpid_r>
90027694:	462a      	mov	r2, r5
90027696:	4601      	mov	r1, r0
90027698:	4620      	mov	r0, r4
9002769a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
9002769e:	f000 b84b 	b.w	90027738 <_kill_r>
900276a2:	2b01      	cmp	r3, #1
900276a4:	d00a      	beq.n	900276bc <_raise_r+0x4c>
900276a6:	1c59      	adds	r1, r3, #1
900276a8:	d103      	bne.n	900276b2 <_raise_r+0x42>
900276aa:	2316      	movs	r3, #22
900276ac:	6003      	str	r3, [r0, #0]
900276ae:	2001      	movs	r0, #1
900276b0:	e7e7      	b.n	90027682 <_raise_r+0x12>
900276b2:	2400      	movs	r4, #0
900276b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
900276b8:	4628      	mov	r0, r5
900276ba:	4798      	blx	r3
900276bc:	2000      	movs	r0, #0
900276be:	e7e0      	b.n	90027682 <_raise_r+0x12>

900276c0 <raise>:
900276c0:	4b02      	ldr	r3, [pc, #8]	; (900276cc <raise+0xc>)
900276c2:	4601      	mov	r1, r0
900276c4:	6818      	ldr	r0, [r3, #0]
900276c6:	f7ff bfd3 	b.w	90027670 <_raise_r>
900276ca:	bf00      	nop
900276cc:	24000138 	.word	0x24000138

900276d0 <_close_r>:
900276d0:	b538      	push	{r3, r4, r5, lr}
900276d2:	4d06      	ldr	r5, [pc, #24]	; (900276ec <_close_r+0x1c>)
900276d4:	2300      	movs	r3, #0
900276d6:	4604      	mov	r4, r0
900276d8:	4608      	mov	r0, r1
900276da:	602b      	str	r3, [r5, #0]
900276dc:	f7dd fb7e 	bl	90004ddc <_close>
900276e0:	1c43      	adds	r3, r0, #1
900276e2:	d102      	bne.n	900276ea <_close_r+0x1a>
900276e4:	682b      	ldr	r3, [r5, #0]
900276e6:	b103      	cbz	r3, 900276ea <_close_r+0x1a>
900276e8:	6023      	str	r3, [r4, #0]
900276ea:	bd38      	pop	{r3, r4, r5, pc}
900276ec:	240283dc 	.word	0x240283dc

900276f0 <_lseek_r>:
900276f0:	b538      	push	{r3, r4, r5, lr}
900276f2:	4d07      	ldr	r5, [pc, #28]	; (90027710 <_lseek_r+0x20>)
900276f4:	4604      	mov	r4, r0
900276f6:	4608      	mov	r0, r1
900276f8:	4611      	mov	r1, r2
900276fa:	2200      	movs	r2, #0
900276fc:	602a      	str	r2, [r5, #0]
900276fe:	461a      	mov	r2, r3
90027700:	f7dd fb78 	bl	90004df4 <_lseek>
90027704:	1c43      	adds	r3, r0, #1
90027706:	d102      	bne.n	9002770e <_lseek_r+0x1e>
90027708:	682b      	ldr	r3, [r5, #0]
9002770a:	b103      	cbz	r3, 9002770e <_lseek_r+0x1e>
9002770c:	6023      	str	r3, [r4, #0]
9002770e:	bd38      	pop	{r3, r4, r5, pc}
90027710:	240283dc 	.word	0x240283dc

90027714 <_read_r>:
90027714:	b538      	push	{r3, r4, r5, lr}
90027716:	4d07      	ldr	r5, [pc, #28]	; (90027734 <_read_r+0x20>)
90027718:	4604      	mov	r4, r0
9002771a:	4608      	mov	r0, r1
9002771c:	4611      	mov	r1, r2
9002771e:	2200      	movs	r2, #0
90027720:	602a      	str	r2, [r5, #0]
90027722:	461a      	mov	r2, r3
90027724:	f7dd fb3e 	bl	90004da4 <_read>
90027728:	1c43      	adds	r3, r0, #1
9002772a:	d102      	bne.n	90027732 <_read_r+0x1e>
9002772c:	682b      	ldr	r3, [r5, #0]
9002772e:	b103      	cbz	r3, 90027732 <_read_r+0x1e>
90027730:	6023      	str	r3, [r4, #0]
90027732:	bd38      	pop	{r3, r4, r5, pc}
90027734:	240283dc 	.word	0x240283dc

90027738 <_kill_r>:
90027738:	b538      	push	{r3, r4, r5, lr}
9002773a:	4d07      	ldr	r5, [pc, #28]	; (90027758 <_kill_r+0x20>)
9002773c:	2300      	movs	r3, #0
9002773e:	4604      	mov	r4, r0
90027740:	4608      	mov	r0, r1
90027742:	4611      	mov	r1, r2
90027744:	602b      	str	r3, [r5, #0]
90027746:	f7dd fb1d 	bl	90004d84 <_kill>
9002774a:	1c43      	adds	r3, r0, #1
9002774c:	d102      	bne.n	90027754 <_kill_r+0x1c>
9002774e:	682b      	ldr	r3, [r5, #0]
90027750:	b103      	cbz	r3, 90027754 <_kill_r+0x1c>
90027752:	6023      	str	r3, [r4, #0]
90027754:	bd38      	pop	{r3, r4, r5, pc}
90027756:	bf00      	nop
90027758:	240283dc 	.word	0x240283dc

9002775c <_getpid_r>:
9002775c:	f7dd bb10 	b.w	90004d80 <_getpid>

90027760 <_sbrk_r>:
90027760:	b538      	push	{r3, r4, r5, lr}
90027762:	4d06      	ldr	r5, [pc, #24]	; (9002777c <_sbrk_r+0x1c>)
90027764:	2300      	movs	r3, #0
90027766:	4604      	mov	r4, r0
90027768:	4608      	mov	r0, r1
9002776a:	602b      	str	r3, [r5, #0]
9002776c:	f7dd fb44 	bl	90004df8 <_sbrk>
90027770:	1c43      	adds	r3, r0, #1
90027772:	d102      	bne.n	9002777a <_sbrk_r+0x1a>
90027774:	682b      	ldr	r3, [r5, #0]
90027776:	b103      	cbz	r3, 9002777a <_sbrk_r+0x1a>
90027778:	6023      	str	r3, [r4, #0]
9002777a:	bd38      	pop	{r3, r4, r5, pc}
9002777c:	240283dc 	.word	0x240283dc

90027780 <_write_r>:
90027780:	b538      	push	{r3, r4, r5, lr}
90027782:	4d07      	ldr	r5, [pc, #28]	; (900277a0 <_write_r+0x20>)
90027784:	4604      	mov	r4, r0
90027786:	4608      	mov	r0, r1
90027788:	4611      	mov	r1, r2
9002778a:	2200      	movs	r2, #0
9002778c:	602a      	str	r2, [r5, #0]
9002778e:	461a      	mov	r2, r3
90027790:	f7dd fb16 	bl	90004dc0 <_write>
90027794:	1c43      	adds	r3, r0, #1
90027796:	d102      	bne.n	9002779e <_write_r+0x1e>
90027798:	682b      	ldr	r3, [r5, #0]
9002779a:	b103      	cbz	r3, 9002779e <_write_r+0x1e>
9002779c:	6023      	str	r3, [r4, #0]
9002779e:	bd38      	pop	{r3, r4, r5, pc}
900277a0:	240283dc 	.word	0x240283dc

900277a4 <__errno>:
900277a4:	4b01      	ldr	r3, [pc, #4]	; (900277ac <__errno+0x8>)
900277a6:	6818      	ldr	r0, [r3, #0]
900277a8:	4770      	bx	lr
900277aa:	bf00      	nop
900277ac:	24000138 	.word	0x24000138

900277b0 <__libc_init_array>:
900277b0:	b570      	push	{r4, r5, r6, lr}
900277b2:	4d0d      	ldr	r5, [pc, #52]	; (900277e8 <__libc_init_array+0x38>)
900277b4:	4c0d      	ldr	r4, [pc, #52]	; (900277ec <__libc_init_array+0x3c>)
900277b6:	1b64      	subs	r4, r4, r5
900277b8:	10a4      	asrs	r4, r4, #2
900277ba:	2600      	movs	r6, #0
900277bc:	42a6      	cmp	r6, r4
900277be:	d109      	bne.n	900277d4 <__libc_init_array+0x24>
900277c0:	4d0b      	ldr	r5, [pc, #44]	; (900277f0 <__libc_init_array+0x40>)
900277c2:	4c0c      	ldr	r4, [pc, #48]	; (900277f4 <__libc_init_array+0x44>)
900277c4:	f000 fcda 	bl	9002817c <_init>
900277c8:	1b64      	subs	r4, r4, r5
900277ca:	10a4      	asrs	r4, r4, #2
900277cc:	2600      	movs	r6, #0
900277ce:	42a6      	cmp	r6, r4
900277d0:	d105      	bne.n	900277de <__libc_init_array+0x2e>
900277d2:	bd70      	pop	{r4, r5, r6, pc}
900277d4:	f855 3b04 	ldr.w	r3, [r5], #4
900277d8:	4798      	blx	r3
900277da:	3601      	adds	r6, #1
900277dc:	e7ee      	b.n	900277bc <__libc_init_array+0xc>
900277de:	f855 3b04 	ldr.w	r3, [r5], #4
900277e2:	4798      	blx	r3
900277e4:	3601      	adds	r6, #1
900277e6:	e7f2      	b.n	900277ce <__libc_init_array+0x1e>
900277e8:	9002c4f0 	.word	0x9002c4f0
900277ec:	9002c4f0 	.word	0x9002c4f0
900277f0:	9002c4f0 	.word	0x9002c4f0
900277f4:	9002c50c 	.word	0x9002c50c

900277f8 <__retarget_lock_init_recursive>:
900277f8:	4770      	bx	lr

900277fa <__retarget_lock_acquire_recursive>:
900277fa:	4770      	bx	lr

900277fc <__retarget_lock_release_recursive>:
900277fc:	4770      	bx	lr

900277fe <memcpy>:
900277fe:	440a      	add	r2, r1
90027800:	4291      	cmp	r1, r2
90027802:	f100 33ff 	add.w	r3, r0, #4294967295
90027806:	d100      	bne.n	9002780a <memcpy+0xc>
90027808:	4770      	bx	lr
9002780a:	b510      	push	{r4, lr}
9002780c:	f811 4b01 	ldrb.w	r4, [r1], #1
90027810:	f803 4f01 	strb.w	r4, [r3, #1]!
90027814:	4291      	cmp	r1, r2
90027816:	d1f9      	bne.n	9002780c <memcpy+0xe>
90027818:	bd10      	pop	{r4, pc}
	...

9002781c <__register_exitproc>:
9002781c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90027820:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 900278d4 <__register_exitproc+0xb8>
90027824:	4606      	mov	r6, r0
90027826:	f8d8 0000 	ldr.w	r0, [r8]
9002782a:	461f      	mov	r7, r3
9002782c:	460d      	mov	r5, r1
9002782e:	4691      	mov	r9, r2
90027830:	f7ff ffe3 	bl	900277fa <__retarget_lock_acquire_recursive>
90027834:	4b23      	ldr	r3, [pc, #140]	; (900278c4 <__register_exitproc+0xa8>)
90027836:	681c      	ldr	r4, [r3, #0]
90027838:	b934      	cbnz	r4, 90027848 <__register_exitproc+0x2c>
9002783a:	4c23      	ldr	r4, [pc, #140]	; (900278c8 <__register_exitproc+0xac>)
9002783c:	601c      	str	r4, [r3, #0]
9002783e:	4b23      	ldr	r3, [pc, #140]	; (900278cc <__register_exitproc+0xb0>)
90027840:	b113      	cbz	r3, 90027848 <__register_exitproc+0x2c>
90027842:	681b      	ldr	r3, [r3, #0]
90027844:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
90027848:	6863      	ldr	r3, [r4, #4]
9002784a:	2b1f      	cmp	r3, #31
9002784c:	dd07      	ble.n	9002785e <__register_exitproc+0x42>
9002784e:	f8d8 0000 	ldr.w	r0, [r8]
90027852:	f7ff ffd3 	bl	900277fc <__retarget_lock_release_recursive>
90027856:	f04f 30ff 	mov.w	r0, #4294967295
9002785a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9002785e:	b32e      	cbz	r6, 900278ac <__register_exitproc+0x90>
90027860:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
90027864:	b968      	cbnz	r0, 90027882 <__register_exitproc+0x66>
90027866:	4b1a      	ldr	r3, [pc, #104]	; (900278d0 <__register_exitproc+0xb4>)
90027868:	2b00      	cmp	r3, #0
9002786a:	d0f0      	beq.n	9002784e <__register_exitproc+0x32>
9002786c:	f44f 7084 	mov.w	r0, #264	; 0x108
90027870:	f7ff fc54 	bl	9002711c <malloc>
90027874:	2800      	cmp	r0, #0
90027876:	d0ea      	beq.n	9002784e <__register_exitproc+0x32>
90027878:	2300      	movs	r3, #0
9002787a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
9002787e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
90027882:	6863      	ldr	r3, [r4, #4]
90027884:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
90027888:	2201      	movs	r2, #1
9002788a:	409a      	lsls	r2, r3
9002788c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
90027890:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
90027894:	4313      	orrs	r3, r2
90027896:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
9002789a:	2e02      	cmp	r6, #2
9002789c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
900278a0:	bf02      	ittt	eq
900278a2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
900278a6:	4313      	orreq	r3, r2
900278a8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
900278ac:	6863      	ldr	r3, [r4, #4]
900278ae:	f8d8 0000 	ldr.w	r0, [r8]
900278b2:	1c5a      	adds	r2, r3, #1
900278b4:	3302      	adds	r3, #2
900278b6:	6062      	str	r2, [r4, #4]
900278b8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
900278bc:	f7ff ff9e 	bl	900277fc <__retarget_lock_release_recursive>
900278c0:	2000      	movs	r0, #0
900278c2:	e7ca      	b.n	9002785a <__register_exitproc+0x3e>
900278c4:	24028470 	.word	0x24028470
900278c8:	240283e4 	.word	0x240283e4
900278cc:	9002c300 	.word	0x9002c300
900278d0:	9002711d 	.word	0x9002711d
900278d4:	2400013c 	.word	0x2400013c

900278d8 <_free_r>:
900278d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
900278da:	2900      	cmp	r1, #0
900278dc:	d044      	beq.n	90027968 <_free_r+0x90>
900278de:	f851 3c04 	ldr.w	r3, [r1, #-4]
900278e2:	9001      	str	r0, [sp, #4]
900278e4:	2b00      	cmp	r3, #0
900278e6:	f1a1 0404 	sub.w	r4, r1, #4
900278ea:	bfb8      	it	lt
900278ec:	18e4      	addlt	r4, r4, r3
900278ee:	f7ff fcc5 	bl	9002727c <__malloc_lock>
900278f2:	4a1e      	ldr	r2, [pc, #120]	; (9002796c <_free_r+0x94>)
900278f4:	9801      	ldr	r0, [sp, #4]
900278f6:	6813      	ldr	r3, [r2, #0]
900278f8:	b933      	cbnz	r3, 90027908 <_free_r+0x30>
900278fa:	6063      	str	r3, [r4, #4]
900278fc:	6014      	str	r4, [r2, #0]
900278fe:	b003      	add	sp, #12
90027900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
90027904:	f7ff bcc0 	b.w	90027288 <__malloc_unlock>
90027908:	42a3      	cmp	r3, r4
9002790a:	d908      	bls.n	9002791e <_free_r+0x46>
9002790c:	6825      	ldr	r5, [r4, #0]
9002790e:	1961      	adds	r1, r4, r5
90027910:	428b      	cmp	r3, r1
90027912:	bf01      	itttt	eq
90027914:	6819      	ldreq	r1, [r3, #0]
90027916:	685b      	ldreq	r3, [r3, #4]
90027918:	1949      	addeq	r1, r1, r5
9002791a:	6021      	streq	r1, [r4, #0]
9002791c:	e7ed      	b.n	900278fa <_free_r+0x22>
9002791e:	461a      	mov	r2, r3
90027920:	685b      	ldr	r3, [r3, #4]
90027922:	b10b      	cbz	r3, 90027928 <_free_r+0x50>
90027924:	42a3      	cmp	r3, r4
90027926:	d9fa      	bls.n	9002791e <_free_r+0x46>
90027928:	6811      	ldr	r1, [r2, #0]
9002792a:	1855      	adds	r5, r2, r1
9002792c:	42a5      	cmp	r5, r4
9002792e:	d10b      	bne.n	90027948 <_free_r+0x70>
90027930:	6824      	ldr	r4, [r4, #0]
90027932:	4421      	add	r1, r4
90027934:	1854      	adds	r4, r2, r1
90027936:	42a3      	cmp	r3, r4
90027938:	6011      	str	r1, [r2, #0]
9002793a:	d1e0      	bne.n	900278fe <_free_r+0x26>
9002793c:	681c      	ldr	r4, [r3, #0]
9002793e:	685b      	ldr	r3, [r3, #4]
90027940:	6053      	str	r3, [r2, #4]
90027942:	440c      	add	r4, r1
90027944:	6014      	str	r4, [r2, #0]
90027946:	e7da      	b.n	900278fe <_free_r+0x26>
90027948:	d902      	bls.n	90027950 <_free_r+0x78>
9002794a:	230c      	movs	r3, #12
9002794c:	6003      	str	r3, [r0, #0]
9002794e:	e7d6      	b.n	900278fe <_free_r+0x26>
90027950:	6825      	ldr	r5, [r4, #0]
90027952:	1961      	adds	r1, r4, r5
90027954:	428b      	cmp	r3, r1
90027956:	bf04      	itt	eq
90027958:	6819      	ldreq	r1, [r3, #0]
9002795a:	685b      	ldreq	r3, [r3, #4]
9002795c:	6063      	str	r3, [r4, #4]
9002795e:	bf04      	itt	eq
90027960:	1949      	addeq	r1, r1, r5
90027962:	6021      	streq	r1, [r4, #0]
90027964:	6054      	str	r4, [r2, #4]
90027966:	e7ca      	b.n	900278fe <_free_r+0x26>
90027968:	b003      	add	sp, #12
9002796a:	bd30      	pop	{r4, r5, pc}
9002796c:	24028298 	.word	0x24028298

90027970 <__sfputc_r>:
90027970:	6893      	ldr	r3, [r2, #8]
90027972:	3b01      	subs	r3, #1
90027974:	2b00      	cmp	r3, #0
90027976:	b410      	push	{r4}
90027978:	6093      	str	r3, [r2, #8]
9002797a:	da08      	bge.n	9002798e <__sfputc_r+0x1e>
9002797c:	6994      	ldr	r4, [r2, #24]
9002797e:	42a3      	cmp	r3, r4
90027980:	db01      	blt.n	90027986 <__sfputc_r+0x16>
90027982:	290a      	cmp	r1, #10
90027984:	d103      	bne.n	9002798e <__sfputc_r+0x1e>
90027986:	f85d 4b04 	ldr.w	r4, [sp], #4
9002798a:	f7ff bda8 	b.w	900274de <__swbuf_r>
9002798e:	6813      	ldr	r3, [r2, #0]
90027990:	1c58      	adds	r0, r3, #1
90027992:	6010      	str	r0, [r2, #0]
90027994:	7019      	strb	r1, [r3, #0]
90027996:	4608      	mov	r0, r1
90027998:	f85d 4b04 	ldr.w	r4, [sp], #4
9002799c:	4770      	bx	lr

9002799e <__sfputs_r>:
9002799e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900279a0:	4606      	mov	r6, r0
900279a2:	460f      	mov	r7, r1
900279a4:	4614      	mov	r4, r2
900279a6:	18d5      	adds	r5, r2, r3
900279a8:	42ac      	cmp	r4, r5
900279aa:	d101      	bne.n	900279b0 <__sfputs_r+0x12>
900279ac:	2000      	movs	r0, #0
900279ae:	e007      	b.n	900279c0 <__sfputs_r+0x22>
900279b0:	f814 1b01 	ldrb.w	r1, [r4], #1
900279b4:	463a      	mov	r2, r7
900279b6:	4630      	mov	r0, r6
900279b8:	f7ff ffda 	bl	90027970 <__sfputc_r>
900279bc:	1c43      	adds	r3, r0, #1
900279be:	d1f3      	bne.n	900279a8 <__sfputs_r+0xa>
900279c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

900279c4 <_vfiprintf_r>:
900279c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900279c8:	460d      	mov	r5, r1
900279ca:	b09d      	sub	sp, #116	; 0x74
900279cc:	4614      	mov	r4, r2
900279ce:	4698      	mov	r8, r3
900279d0:	4606      	mov	r6, r0
900279d2:	b118      	cbz	r0, 900279dc <_vfiprintf_r+0x18>
900279d4:	6a03      	ldr	r3, [r0, #32]
900279d6:	b90b      	cbnz	r3, 900279dc <_vfiprintf_r+0x18>
900279d8:	f7ff fcf6 	bl	900273c8 <__sinit>
900279dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
900279de:	07d9      	lsls	r1, r3, #31
900279e0:	d405      	bmi.n	900279ee <_vfiprintf_r+0x2a>
900279e2:	89ab      	ldrh	r3, [r5, #12]
900279e4:	059a      	lsls	r2, r3, #22
900279e6:	d402      	bmi.n	900279ee <_vfiprintf_r+0x2a>
900279e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
900279ea:	f7ff ff06 	bl	900277fa <__retarget_lock_acquire_recursive>
900279ee:	89ab      	ldrh	r3, [r5, #12]
900279f0:	071b      	lsls	r3, r3, #28
900279f2:	d501      	bpl.n	900279f8 <_vfiprintf_r+0x34>
900279f4:	692b      	ldr	r3, [r5, #16]
900279f6:	b99b      	cbnz	r3, 90027a20 <_vfiprintf_r+0x5c>
900279f8:	4629      	mov	r1, r5
900279fa:	4630      	mov	r0, r6
900279fc:	f7ff fdac 	bl	90027558 <__swsetup_r>
90027a00:	b170      	cbz	r0, 90027a20 <_vfiprintf_r+0x5c>
90027a02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90027a04:	07dc      	lsls	r4, r3, #31
90027a06:	d504      	bpl.n	90027a12 <_vfiprintf_r+0x4e>
90027a08:	f04f 30ff 	mov.w	r0, #4294967295
90027a0c:	b01d      	add	sp, #116	; 0x74
90027a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90027a12:	89ab      	ldrh	r3, [r5, #12]
90027a14:	0598      	lsls	r0, r3, #22
90027a16:	d4f7      	bmi.n	90027a08 <_vfiprintf_r+0x44>
90027a18:	6da8      	ldr	r0, [r5, #88]	; 0x58
90027a1a:	f7ff feef 	bl	900277fc <__retarget_lock_release_recursive>
90027a1e:	e7f3      	b.n	90027a08 <_vfiprintf_r+0x44>
90027a20:	2300      	movs	r3, #0
90027a22:	9309      	str	r3, [sp, #36]	; 0x24
90027a24:	2320      	movs	r3, #32
90027a26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
90027a2a:	f8cd 800c 	str.w	r8, [sp, #12]
90027a2e:	2330      	movs	r3, #48	; 0x30
90027a30:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 90027be4 <_vfiprintf_r+0x220>
90027a34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
90027a38:	f04f 0901 	mov.w	r9, #1
90027a3c:	4623      	mov	r3, r4
90027a3e:	469a      	mov	sl, r3
90027a40:	f813 2b01 	ldrb.w	r2, [r3], #1
90027a44:	b10a      	cbz	r2, 90027a4a <_vfiprintf_r+0x86>
90027a46:	2a25      	cmp	r2, #37	; 0x25
90027a48:	d1f9      	bne.n	90027a3e <_vfiprintf_r+0x7a>
90027a4a:	ebba 0b04 	subs.w	fp, sl, r4
90027a4e:	d00b      	beq.n	90027a68 <_vfiprintf_r+0xa4>
90027a50:	465b      	mov	r3, fp
90027a52:	4622      	mov	r2, r4
90027a54:	4629      	mov	r1, r5
90027a56:	4630      	mov	r0, r6
90027a58:	f7ff ffa1 	bl	9002799e <__sfputs_r>
90027a5c:	3001      	adds	r0, #1
90027a5e:	f000 80a9 	beq.w	90027bb4 <_vfiprintf_r+0x1f0>
90027a62:	9a09      	ldr	r2, [sp, #36]	; 0x24
90027a64:	445a      	add	r2, fp
90027a66:	9209      	str	r2, [sp, #36]	; 0x24
90027a68:	f89a 3000 	ldrb.w	r3, [sl]
90027a6c:	2b00      	cmp	r3, #0
90027a6e:	f000 80a1 	beq.w	90027bb4 <_vfiprintf_r+0x1f0>
90027a72:	2300      	movs	r3, #0
90027a74:	f04f 32ff 	mov.w	r2, #4294967295
90027a78:	e9cd 2305 	strd	r2, r3, [sp, #20]
90027a7c:	f10a 0a01 	add.w	sl, sl, #1
90027a80:	9304      	str	r3, [sp, #16]
90027a82:	9307      	str	r3, [sp, #28]
90027a84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
90027a88:	931a      	str	r3, [sp, #104]	; 0x68
90027a8a:	4654      	mov	r4, sl
90027a8c:	2205      	movs	r2, #5
90027a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
90027a92:	4854      	ldr	r0, [pc, #336]	; (90027be4 <_vfiprintf_r+0x220>)
90027a94:	f7d8 fc34 	bl	90000300 <memchr>
90027a98:	9a04      	ldr	r2, [sp, #16]
90027a9a:	b9d8      	cbnz	r0, 90027ad4 <_vfiprintf_r+0x110>
90027a9c:	06d1      	lsls	r1, r2, #27
90027a9e:	bf44      	itt	mi
90027aa0:	2320      	movmi	r3, #32
90027aa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90027aa6:	0713      	lsls	r3, r2, #28
90027aa8:	bf44      	itt	mi
90027aaa:	232b      	movmi	r3, #43	; 0x2b
90027aac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90027ab0:	f89a 3000 	ldrb.w	r3, [sl]
90027ab4:	2b2a      	cmp	r3, #42	; 0x2a
90027ab6:	d015      	beq.n	90027ae4 <_vfiprintf_r+0x120>
90027ab8:	9a07      	ldr	r2, [sp, #28]
90027aba:	4654      	mov	r4, sl
90027abc:	2000      	movs	r0, #0
90027abe:	f04f 0c0a 	mov.w	ip, #10
90027ac2:	4621      	mov	r1, r4
90027ac4:	f811 3b01 	ldrb.w	r3, [r1], #1
90027ac8:	3b30      	subs	r3, #48	; 0x30
90027aca:	2b09      	cmp	r3, #9
90027acc:	d94d      	bls.n	90027b6a <_vfiprintf_r+0x1a6>
90027ace:	b1b0      	cbz	r0, 90027afe <_vfiprintf_r+0x13a>
90027ad0:	9207      	str	r2, [sp, #28]
90027ad2:	e014      	b.n	90027afe <_vfiprintf_r+0x13a>
90027ad4:	eba0 0308 	sub.w	r3, r0, r8
90027ad8:	fa09 f303 	lsl.w	r3, r9, r3
90027adc:	4313      	orrs	r3, r2
90027ade:	9304      	str	r3, [sp, #16]
90027ae0:	46a2      	mov	sl, r4
90027ae2:	e7d2      	b.n	90027a8a <_vfiprintf_r+0xc6>
90027ae4:	9b03      	ldr	r3, [sp, #12]
90027ae6:	1d19      	adds	r1, r3, #4
90027ae8:	681b      	ldr	r3, [r3, #0]
90027aea:	9103      	str	r1, [sp, #12]
90027aec:	2b00      	cmp	r3, #0
90027aee:	bfbb      	ittet	lt
90027af0:	425b      	neglt	r3, r3
90027af2:	f042 0202 	orrlt.w	r2, r2, #2
90027af6:	9307      	strge	r3, [sp, #28]
90027af8:	9307      	strlt	r3, [sp, #28]
90027afa:	bfb8      	it	lt
90027afc:	9204      	strlt	r2, [sp, #16]
90027afe:	7823      	ldrb	r3, [r4, #0]
90027b00:	2b2e      	cmp	r3, #46	; 0x2e
90027b02:	d10c      	bne.n	90027b1e <_vfiprintf_r+0x15a>
90027b04:	7863      	ldrb	r3, [r4, #1]
90027b06:	2b2a      	cmp	r3, #42	; 0x2a
90027b08:	d134      	bne.n	90027b74 <_vfiprintf_r+0x1b0>
90027b0a:	9b03      	ldr	r3, [sp, #12]
90027b0c:	1d1a      	adds	r2, r3, #4
90027b0e:	681b      	ldr	r3, [r3, #0]
90027b10:	9203      	str	r2, [sp, #12]
90027b12:	2b00      	cmp	r3, #0
90027b14:	bfb8      	it	lt
90027b16:	f04f 33ff 	movlt.w	r3, #4294967295
90027b1a:	3402      	adds	r4, #2
90027b1c:	9305      	str	r3, [sp, #20]
90027b1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 90027bf4 <_vfiprintf_r+0x230>
90027b22:	7821      	ldrb	r1, [r4, #0]
90027b24:	2203      	movs	r2, #3
90027b26:	4650      	mov	r0, sl
90027b28:	f7d8 fbea 	bl	90000300 <memchr>
90027b2c:	b138      	cbz	r0, 90027b3e <_vfiprintf_r+0x17a>
90027b2e:	9b04      	ldr	r3, [sp, #16]
90027b30:	eba0 000a 	sub.w	r0, r0, sl
90027b34:	2240      	movs	r2, #64	; 0x40
90027b36:	4082      	lsls	r2, r0
90027b38:	4313      	orrs	r3, r2
90027b3a:	3401      	adds	r4, #1
90027b3c:	9304      	str	r3, [sp, #16]
90027b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
90027b42:	4829      	ldr	r0, [pc, #164]	; (90027be8 <_vfiprintf_r+0x224>)
90027b44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
90027b48:	2206      	movs	r2, #6
90027b4a:	f7d8 fbd9 	bl	90000300 <memchr>
90027b4e:	2800      	cmp	r0, #0
90027b50:	d03f      	beq.n	90027bd2 <_vfiprintf_r+0x20e>
90027b52:	4b26      	ldr	r3, [pc, #152]	; (90027bec <_vfiprintf_r+0x228>)
90027b54:	bb1b      	cbnz	r3, 90027b9e <_vfiprintf_r+0x1da>
90027b56:	9b03      	ldr	r3, [sp, #12]
90027b58:	3307      	adds	r3, #7
90027b5a:	f023 0307 	bic.w	r3, r3, #7
90027b5e:	3308      	adds	r3, #8
90027b60:	9303      	str	r3, [sp, #12]
90027b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
90027b64:	443b      	add	r3, r7
90027b66:	9309      	str	r3, [sp, #36]	; 0x24
90027b68:	e768      	b.n	90027a3c <_vfiprintf_r+0x78>
90027b6a:	fb0c 3202 	mla	r2, ip, r2, r3
90027b6e:	460c      	mov	r4, r1
90027b70:	2001      	movs	r0, #1
90027b72:	e7a6      	b.n	90027ac2 <_vfiprintf_r+0xfe>
90027b74:	2300      	movs	r3, #0
90027b76:	3401      	adds	r4, #1
90027b78:	9305      	str	r3, [sp, #20]
90027b7a:	4619      	mov	r1, r3
90027b7c:	f04f 0c0a 	mov.w	ip, #10
90027b80:	4620      	mov	r0, r4
90027b82:	f810 2b01 	ldrb.w	r2, [r0], #1
90027b86:	3a30      	subs	r2, #48	; 0x30
90027b88:	2a09      	cmp	r2, #9
90027b8a:	d903      	bls.n	90027b94 <_vfiprintf_r+0x1d0>
90027b8c:	2b00      	cmp	r3, #0
90027b8e:	d0c6      	beq.n	90027b1e <_vfiprintf_r+0x15a>
90027b90:	9105      	str	r1, [sp, #20]
90027b92:	e7c4      	b.n	90027b1e <_vfiprintf_r+0x15a>
90027b94:	fb0c 2101 	mla	r1, ip, r1, r2
90027b98:	4604      	mov	r4, r0
90027b9a:	2301      	movs	r3, #1
90027b9c:	e7f0      	b.n	90027b80 <_vfiprintf_r+0x1bc>
90027b9e:	ab03      	add	r3, sp, #12
90027ba0:	9300      	str	r3, [sp, #0]
90027ba2:	462a      	mov	r2, r5
90027ba4:	4b12      	ldr	r3, [pc, #72]	; (90027bf0 <_vfiprintf_r+0x22c>)
90027ba6:	a904      	add	r1, sp, #16
90027ba8:	4630      	mov	r0, r6
90027baa:	f3af 8000 	nop.w
90027bae:	4607      	mov	r7, r0
90027bb0:	1c78      	adds	r0, r7, #1
90027bb2:	d1d6      	bne.n	90027b62 <_vfiprintf_r+0x19e>
90027bb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90027bb6:	07d9      	lsls	r1, r3, #31
90027bb8:	d405      	bmi.n	90027bc6 <_vfiprintf_r+0x202>
90027bba:	89ab      	ldrh	r3, [r5, #12]
90027bbc:	059a      	lsls	r2, r3, #22
90027bbe:	d402      	bmi.n	90027bc6 <_vfiprintf_r+0x202>
90027bc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
90027bc2:	f7ff fe1b 	bl	900277fc <__retarget_lock_release_recursive>
90027bc6:	89ab      	ldrh	r3, [r5, #12]
90027bc8:	065b      	lsls	r3, r3, #25
90027bca:	f53f af1d 	bmi.w	90027a08 <_vfiprintf_r+0x44>
90027bce:	9809      	ldr	r0, [sp, #36]	; 0x24
90027bd0:	e71c      	b.n	90027a0c <_vfiprintf_r+0x48>
90027bd2:	ab03      	add	r3, sp, #12
90027bd4:	9300      	str	r3, [sp, #0]
90027bd6:	462a      	mov	r2, r5
90027bd8:	4b05      	ldr	r3, [pc, #20]	; (90027bf0 <_vfiprintf_r+0x22c>)
90027bda:	a904      	add	r1, sp, #16
90027bdc:	4630      	mov	r0, r6
90027bde:	f000 f879 	bl	90027cd4 <_printf_i>
90027be2:	e7e4      	b.n	90027bae <_vfiprintf_r+0x1ea>
90027be4:	9002c304 	.word	0x9002c304
90027be8:	9002c30e 	.word	0x9002c30e
90027bec:	00000000 	.word	0x00000000
90027bf0:	9002799f 	.word	0x9002799f
90027bf4:	9002c30a 	.word	0x9002c30a

90027bf8 <_printf_common>:
90027bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90027bfc:	4616      	mov	r6, r2
90027bfe:	4699      	mov	r9, r3
90027c00:	688a      	ldr	r2, [r1, #8]
90027c02:	690b      	ldr	r3, [r1, #16]
90027c04:	f8dd 8020 	ldr.w	r8, [sp, #32]
90027c08:	4293      	cmp	r3, r2
90027c0a:	bfb8      	it	lt
90027c0c:	4613      	movlt	r3, r2
90027c0e:	6033      	str	r3, [r6, #0]
90027c10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
90027c14:	4607      	mov	r7, r0
90027c16:	460c      	mov	r4, r1
90027c18:	b10a      	cbz	r2, 90027c1e <_printf_common+0x26>
90027c1a:	3301      	adds	r3, #1
90027c1c:	6033      	str	r3, [r6, #0]
90027c1e:	6823      	ldr	r3, [r4, #0]
90027c20:	0699      	lsls	r1, r3, #26
90027c22:	bf42      	ittt	mi
90027c24:	6833      	ldrmi	r3, [r6, #0]
90027c26:	3302      	addmi	r3, #2
90027c28:	6033      	strmi	r3, [r6, #0]
90027c2a:	6825      	ldr	r5, [r4, #0]
90027c2c:	f015 0506 	ands.w	r5, r5, #6
90027c30:	d106      	bne.n	90027c40 <_printf_common+0x48>
90027c32:	f104 0a19 	add.w	sl, r4, #25
90027c36:	68e3      	ldr	r3, [r4, #12]
90027c38:	6832      	ldr	r2, [r6, #0]
90027c3a:	1a9b      	subs	r3, r3, r2
90027c3c:	42ab      	cmp	r3, r5
90027c3e:	dc26      	bgt.n	90027c8e <_printf_common+0x96>
90027c40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
90027c44:	1e13      	subs	r3, r2, #0
90027c46:	6822      	ldr	r2, [r4, #0]
90027c48:	bf18      	it	ne
90027c4a:	2301      	movne	r3, #1
90027c4c:	0692      	lsls	r2, r2, #26
90027c4e:	d42b      	bmi.n	90027ca8 <_printf_common+0xb0>
90027c50:	f104 0243 	add.w	r2, r4, #67	; 0x43
90027c54:	4649      	mov	r1, r9
90027c56:	4638      	mov	r0, r7
90027c58:	47c0      	blx	r8
90027c5a:	3001      	adds	r0, #1
90027c5c:	d01e      	beq.n	90027c9c <_printf_common+0xa4>
90027c5e:	6823      	ldr	r3, [r4, #0]
90027c60:	6922      	ldr	r2, [r4, #16]
90027c62:	f003 0306 	and.w	r3, r3, #6
90027c66:	2b04      	cmp	r3, #4
90027c68:	bf02      	ittt	eq
90027c6a:	68e5      	ldreq	r5, [r4, #12]
90027c6c:	6833      	ldreq	r3, [r6, #0]
90027c6e:	1aed      	subeq	r5, r5, r3
90027c70:	68a3      	ldr	r3, [r4, #8]
90027c72:	bf0c      	ite	eq
90027c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
90027c78:	2500      	movne	r5, #0
90027c7a:	4293      	cmp	r3, r2
90027c7c:	bfc4      	itt	gt
90027c7e:	1a9b      	subgt	r3, r3, r2
90027c80:	18ed      	addgt	r5, r5, r3
90027c82:	2600      	movs	r6, #0
90027c84:	341a      	adds	r4, #26
90027c86:	42b5      	cmp	r5, r6
90027c88:	d11a      	bne.n	90027cc0 <_printf_common+0xc8>
90027c8a:	2000      	movs	r0, #0
90027c8c:	e008      	b.n	90027ca0 <_printf_common+0xa8>
90027c8e:	2301      	movs	r3, #1
90027c90:	4652      	mov	r2, sl
90027c92:	4649      	mov	r1, r9
90027c94:	4638      	mov	r0, r7
90027c96:	47c0      	blx	r8
90027c98:	3001      	adds	r0, #1
90027c9a:	d103      	bne.n	90027ca4 <_printf_common+0xac>
90027c9c:	f04f 30ff 	mov.w	r0, #4294967295
90027ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90027ca4:	3501      	adds	r5, #1
90027ca6:	e7c6      	b.n	90027c36 <_printf_common+0x3e>
90027ca8:	18e1      	adds	r1, r4, r3
90027caa:	1c5a      	adds	r2, r3, #1
90027cac:	2030      	movs	r0, #48	; 0x30
90027cae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
90027cb2:	4422      	add	r2, r4
90027cb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
90027cb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
90027cbc:	3302      	adds	r3, #2
90027cbe:	e7c7      	b.n	90027c50 <_printf_common+0x58>
90027cc0:	2301      	movs	r3, #1
90027cc2:	4622      	mov	r2, r4
90027cc4:	4649      	mov	r1, r9
90027cc6:	4638      	mov	r0, r7
90027cc8:	47c0      	blx	r8
90027cca:	3001      	adds	r0, #1
90027ccc:	d0e6      	beq.n	90027c9c <_printf_common+0xa4>
90027cce:	3601      	adds	r6, #1
90027cd0:	e7d9      	b.n	90027c86 <_printf_common+0x8e>
	...

90027cd4 <_printf_i>:
90027cd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
90027cd8:	7e0f      	ldrb	r7, [r1, #24]
90027cda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90027cdc:	2f78      	cmp	r7, #120	; 0x78
90027cde:	4691      	mov	r9, r2
90027ce0:	4680      	mov	r8, r0
90027ce2:	460c      	mov	r4, r1
90027ce4:	469a      	mov	sl, r3
90027ce6:	f101 0243 	add.w	r2, r1, #67	; 0x43
90027cea:	d807      	bhi.n	90027cfc <_printf_i+0x28>
90027cec:	2f62      	cmp	r7, #98	; 0x62
90027cee:	d80a      	bhi.n	90027d06 <_printf_i+0x32>
90027cf0:	2f00      	cmp	r7, #0
90027cf2:	f000 80d4 	beq.w	90027e9e <_printf_i+0x1ca>
90027cf6:	2f58      	cmp	r7, #88	; 0x58
90027cf8:	f000 80c0 	beq.w	90027e7c <_printf_i+0x1a8>
90027cfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
90027d00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
90027d04:	e03a      	b.n	90027d7c <_printf_i+0xa8>
90027d06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
90027d0a:	2b15      	cmp	r3, #21
90027d0c:	d8f6      	bhi.n	90027cfc <_printf_i+0x28>
90027d0e:	a101      	add	r1, pc, #4	; (adr r1, 90027d14 <_printf_i+0x40>)
90027d10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
90027d14:	90027d6d 	.word	0x90027d6d
90027d18:	90027d81 	.word	0x90027d81
90027d1c:	90027cfd 	.word	0x90027cfd
90027d20:	90027cfd 	.word	0x90027cfd
90027d24:	90027cfd 	.word	0x90027cfd
90027d28:	90027cfd 	.word	0x90027cfd
90027d2c:	90027d81 	.word	0x90027d81
90027d30:	90027cfd 	.word	0x90027cfd
90027d34:	90027cfd 	.word	0x90027cfd
90027d38:	90027cfd 	.word	0x90027cfd
90027d3c:	90027cfd 	.word	0x90027cfd
90027d40:	90027e85 	.word	0x90027e85
90027d44:	90027dad 	.word	0x90027dad
90027d48:	90027e3f 	.word	0x90027e3f
90027d4c:	90027cfd 	.word	0x90027cfd
90027d50:	90027cfd 	.word	0x90027cfd
90027d54:	90027ea7 	.word	0x90027ea7
90027d58:	90027cfd 	.word	0x90027cfd
90027d5c:	90027dad 	.word	0x90027dad
90027d60:	90027cfd 	.word	0x90027cfd
90027d64:	90027cfd 	.word	0x90027cfd
90027d68:	90027e47 	.word	0x90027e47
90027d6c:	682b      	ldr	r3, [r5, #0]
90027d6e:	1d1a      	adds	r2, r3, #4
90027d70:	681b      	ldr	r3, [r3, #0]
90027d72:	602a      	str	r2, [r5, #0]
90027d74:	f104 0542 	add.w	r5, r4, #66	; 0x42
90027d78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
90027d7c:	2301      	movs	r3, #1
90027d7e:	e09f      	b.n	90027ec0 <_printf_i+0x1ec>
90027d80:	6820      	ldr	r0, [r4, #0]
90027d82:	682b      	ldr	r3, [r5, #0]
90027d84:	0607      	lsls	r7, r0, #24
90027d86:	f103 0104 	add.w	r1, r3, #4
90027d8a:	6029      	str	r1, [r5, #0]
90027d8c:	d501      	bpl.n	90027d92 <_printf_i+0xbe>
90027d8e:	681e      	ldr	r6, [r3, #0]
90027d90:	e003      	b.n	90027d9a <_printf_i+0xc6>
90027d92:	0646      	lsls	r6, r0, #25
90027d94:	d5fb      	bpl.n	90027d8e <_printf_i+0xba>
90027d96:	f9b3 6000 	ldrsh.w	r6, [r3]
90027d9a:	2e00      	cmp	r6, #0
90027d9c:	da03      	bge.n	90027da6 <_printf_i+0xd2>
90027d9e:	232d      	movs	r3, #45	; 0x2d
90027da0:	4276      	negs	r6, r6
90027da2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90027da6:	485a      	ldr	r0, [pc, #360]	; (90027f10 <_printf_i+0x23c>)
90027da8:	230a      	movs	r3, #10
90027daa:	e012      	b.n	90027dd2 <_printf_i+0xfe>
90027dac:	682b      	ldr	r3, [r5, #0]
90027dae:	6820      	ldr	r0, [r4, #0]
90027db0:	1d19      	adds	r1, r3, #4
90027db2:	6029      	str	r1, [r5, #0]
90027db4:	0605      	lsls	r5, r0, #24
90027db6:	d501      	bpl.n	90027dbc <_printf_i+0xe8>
90027db8:	681e      	ldr	r6, [r3, #0]
90027dba:	e002      	b.n	90027dc2 <_printf_i+0xee>
90027dbc:	0641      	lsls	r1, r0, #25
90027dbe:	d5fb      	bpl.n	90027db8 <_printf_i+0xe4>
90027dc0:	881e      	ldrh	r6, [r3, #0]
90027dc2:	4853      	ldr	r0, [pc, #332]	; (90027f10 <_printf_i+0x23c>)
90027dc4:	2f6f      	cmp	r7, #111	; 0x6f
90027dc6:	bf0c      	ite	eq
90027dc8:	2308      	moveq	r3, #8
90027dca:	230a      	movne	r3, #10
90027dcc:	2100      	movs	r1, #0
90027dce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
90027dd2:	6865      	ldr	r5, [r4, #4]
90027dd4:	60a5      	str	r5, [r4, #8]
90027dd6:	2d00      	cmp	r5, #0
90027dd8:	bfa2      	ittt	ge
90027dda:	6821      	ldrge	r1, [r4, #0]
90027ddc:	f021 0104 	bicge.w	r1, r1, #4
90027de0:	6021      	strge	r1, [r4, #0]
90027de2:	b90e      	cbnz	r6, 90027de8 <_printf_i+0x114>
90027de4:	2d00      	cmp	r5, #0
90027de6:	d04b      	beq.n	90027e80 <_printf_i+0x1ac>
90027de8:	4615      	mov	r5, r2
90027dea:	fbb6 f1f3 	udiv	r1, r6, r3
90027dee:	fb03 6711 	mls	r7, r3, r1, r6
90027df2:	5dc7      	ldrb	r7, [r0, r7]
90027df4:	f805 7d01 	strb.w	r7, [r5, #-1]!
90027df8:	4637      	mov	r7, r6
90027dfa:	42bb      	cmp	r3, r7
90027dfc:	460e      	mov	r6, r1
90027dfe:	d9f4      	bls.n	90027dea <_printf_i+0x116>
90027e00:	2b08      	cmp	r3, #8
90027e02:	d10b      	bne.n	90027e1c <_printf_i+0x148>
90027e04:	6823      	ldr	r3, [r4, #0]
90027e06:	07de      	lsls	r6, r3, #31
90027e08:	d508      	bpl.n	90027e1c <_printf_i+0x148>
90027e0a:	6923      	ldr	r3, [r4, #16]
90027e0c:	6861      	ldr	r1, [r4, #4]
90027e0e:	4299      	cmp	r1, r3
90027e10:	bfde      	ittt	le
90027e12:	2330      	movle	r3, #48	; 0x30
90027e14:	f805 3c01 	strble.w	r3, [r5, #-1]
90027e18:	f105 35ff 	addle.w	r5, r5, #4294967295
90027e1c:	1b52      	subs	r2, r2, r5
90027e1e:	6122      	str	r2, [r4, #16]
90027e20:	f8cd a000 	str.w	sl, [sp]
90027e24:	464b      	mov	r3, r9
90027e26:	aa03      	add	r2, sp, #12
90027e28:	4621      	mov	r1, r4
90027e2a:	4640      	mov	r0, r8
90027e2c:	f7ff fee4 	bl	90027bf8 <_printf_common>
90027e30:	3001      	adds	r0, #1
90027e32:	d14a      	bne.n	90027eca <_printf_i+0x1f6>
90027e34:	f04f 30ff 	mov.w	r0, #4294967295
90027e38:	b004      	add	sp, #16
90027e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90027e3e:	6823      	ldr	r3, [r4, #0]
90027e40:	f043 0320 	orr.w	r3, r3, #32
90027e44:	6023      	str	r3, [r4, #0]
90027e46:	4833      	ldr	r0, [pc, #204]	; (90027f14 <_printf_i+0x240>)
90027e48:	2778      	movs	r7, #120	; 0x78
90027e4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
90027e4e:	6823      	ldr	r3, [r4, #0]
90027e50:	6829      	ldr	r1, [r5, #0]
90027e52:	061f      	lsls	r7, r3, #24
90027e54:	f851 6b04 	ldr.w	r6, [r1], #4
90027e58:	d402      	bmi.n	90027e60 <_printf_i+0x18c>
90027e5a:	065f      	lsls	r7, r3, #25
90027e5c:	bf48      	it	mi
90027e5e:	b2b6      	uxthmi	r6, r6
90027e60:	07df      	lsls	r7, r3, #31
90027e62:	bf48      	it	mi
90027e64:	f043 0320 	orrmi.w	r3, r3, #32
90027e68:	6029      	str	r1, [r5, #0]
90027e6a:	bf48      	it	mi
90027e6c:	6023      	strmi	r3, [r4, #0]
90027e6e:	b91e      	cbnz	r6, 90027e78 <_printf_i+0x1a4>
90027e70:	6823      	ldr	r3, [r4, #0]
90027e72:	f023 0320 	bic.w	r3, r3, #32
90027e76:	6023      	str	r3, [r4, #0]
90027e78:	2310      	movs	r3, #16
90027e7a:	e7a7      	b.n	90027dcc <_printf_i+0xf8>
90027e7c:	4824      	ldr	r0, [pc, #144]	; (90027f10 <_printf_i+0x23c>)
90027e7e:	e7e4      	b.n	90027e4a <_printf_i+0x176>
90027e80:	4615      	mov	r5, r2
90027e82:	e7bd      	b.n	90027e00 <_printf_i+0x12c>
90027e84:	682b      	ldr	r3, [r5, #0]
90027e86:	6826      	ldr	r6, [r4, #0]
90027e88:	6961      	ldr	r1, [r4, #20]
90027e8a:	1d18      	adds	r0, r3, #4
90027e8c:	6028      	str	r0, [r5, #0]
90027e8e:	0635      	lsls	r5, r6, #24
90027e90:	681b      	ldr	r3, [r3, #0]
90027e92:	d501      	bpl.n	90027e98 <_printf_i+0x1c4>
90027e94:	6019      	str	r1, [r3, #0]
90027e96:	e002      	b.n	90027e9e <_printf_i+0x1ca>
90027e98:	0670      	lsls	r0, r6, #25
90027e9a:	d5fb      	bpl.n	90027e94 <_printf_i+0x1c0>
90027e9c:	8019      	strh	r1, [r3, #0]
90027e9e:	2300      	movs	r3, #0
90027ea0:	6123      	str	r3, [r4, #16]
90027ea2:	4615      	mov	r5, r2
90027ea4:	e7bc      	b.n	90027e20 <_printf_i+0x14c>
90027ea6:	682b      	ldr	r3, [r5, #0]
90027ea8:	1d1a      	adds	r2, r3, #4
90027eaa:	602a      	str	r2, [r5, #0]
90027eac:	681d      	ldr	r5, [r3, #0]
90027eae:	6862      	ldr	r2, [r4, #4]
90027eb0:	2100      	movs	r1, #0
90027eb2:	4628      	mov	r0, r5
90027eb4:	f7d8 fa24 	bl	90000300 <memchr>
90027eb8:	b108      	cbz	r0, 90027ebe <_printf_i+0x1ea>
90027eba:	1b40      	subs	r0, r0, r5
90027ebc:	6060      	str	r0, [r4, #4]
90027ebe:	6863      	ldr	r3, [r4, #4]
90027ec0:	6123      	str	r3, [r4, #16]
90027ec2:	2300      	movs	r3, #0
90027ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90027ec8:	e7aa      	b.n	90027e20 <_printf_i+0x14c>
90027eca:	6923      	ldr	r3, [r4, #16]
90027ecc:	462a      	mov	r2, r5
90027ece:	4649      	mov	r1, r9
90027ed0:	4640      	mov	r0, r8
90027ed2:	47d0      	blx	sl
90027ed4:	3001      	adds	r0, #1
90027ed6:	d0ad      	beq.n	90027e34 <_printf_i+0x160>
90027ed8:	6823      	ldr	r3, [r4, #0]
90027eda:	079b      	lsls	r3, r3, #30
90027edc:	d413      	bmi.n	90027f06 <_printf_i+0x232>
90027ede:	68e0      	ldr	r0, [r4, #12]
90027ee0:	9b03      	ldr	r3, [sp, #12]
90027ee2:	4298      	cmp	r0, r3
90027ee4:	bfb8      	it	lt
90027ee6:	4618      	movlt	r0, r3
90027ee8:	e7a6      	b.n	90027e38 <_printf_i+0x164>
90027eea:	2301      	movs	r3, #1
90027eec:	4632      	mov	r2, r6
90027eee:	4649      	mov	r1, r9
90027ef0:	4640      	mov	r0, r8
90027ef2:	47d0      	blx	sl
90027ef4:	3001      	adds	r0, #1
90027ef6:	d09d      	beq.n	90027e34 <_printf_i+0x160>
90027ef8:	3501      	adds	r5, #1
90027efa:	68e3      	ldr	r3, [r4, #12]
90027efc:	9903      	ldr	r1, [sp, #12]
90027efe:	1a5b      	subs	r3, r3, r1
90027f00:	42ab      	cmp	r3, r5
90027f02:	dcf2      	bgt.n	90027eea <_printf_i+0x216>
90027f04:	e7eb      	b.n	90027ede <_printf_i+0x20a>
90027f06:	2500      	movs	r5, #0
90027f08:	f104 0619 	add.w	r6, r4, #25
90027f0c:	e7f5      	b.n	90027efa <_printf_i+0x226>
90027f0e:	bf00      	nop
90027f10:	9002c315 	.word	0x9002c315
90027f14:	9002c326 	.word	0x9002c326

90027f18 <__sflush_r>:
90027f18:	898a      	ldrh	r2, [r1, #12]
90027f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90027f1e:	4605      	mov	r5, r0
90027f20:	0710      	lsls	r0, r2, #28
90027f22:	460c      	mov	r4, r1
90027f24:	d458      	bmi.n	90027fd8 <__sflush_r+0xc0>
90027f26:	684b      	ldr	r3, [r1, #4]
90027f28:	2b00      	cmp	r3, #0
90027f2a:	dc05      	bgt.n	90027f38 <__sflush_r+0x20>
90027f2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
90027f2e:	2b00      	cmp	r3, #0
90027f30:	dc02      	bgt.n	90027f38 <__sflush_r+0x20>
90027f32:	2000      	movs	r0, #0
90027f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90027f38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90027f3a:	2e00      	cmp	r6, #0
90027f3c:	d0f9      	beq.n	90027f32 <__sflush_r+0x1a>
90027f3e:	2300      	movs	r3, #0
90027f40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
90027f44:	682f      	ldr	r7, [r5, #0]
90027f46:	6a21      	ldr	r1, [r4, #32]
90027f48:	602b      	str	r3, [r5, #0]
90027f4a:	d032      	beq.n	90027fb2 <__sflush_r+0x9a>
90027f4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
90027f4e:	89a3      	ldrh	r3, [r4, #12]
90027f50:	075a      	lsls	r2, r3, #29
90027f52:	d505      	bpl.n	90027f60 <__sflush_r+0x48>
90027f54:	6863      	ldr	r3, [r4, #4]
90027f56:	1ac0      	subs	r0, r0, r3
90027f58:	6b63      	ldr	r3, [r4, #52]	; 0x34
90027f5a:	b10b      	cbz	r3, 90027f60 <__sflush_r+0x48>
90027f5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
90027f5e:	1ac0      	subs	r0, r0, r3
90027f60:	2300      	movs	r3, #0
90027f62:	4602      	mov	r2, r0
90027f64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90027f66:	6a21      	ldr	r1, [r4, #32]
90027f68:	4628      	mov	r0, r5
90027f6a:	47b0      	blx	r6
90027f6c:	1c43      	adds	r3, r0, #1
90027f6e:	89a3      	ldrh	r3, [r4, #12]
90027f70:	d106      	bne.n	90027f80 <__sflush_r+0x68>
90027f72:	6829      	ldr	r1, [r5, #0]
90027f74:	291d      	cmp	r1, #29
90027f76:	d82b      	bhi.n	90027fd0 <__sflush_r+0xb8>
90027f78:	4a29      	ldr	r2, [pc, #164]	; (90028020 <__sflush_r+0x108>)
90027f7a:	410a      	asrs	r2, r1
90027f7c:	07d6      	lsls	r6, r2, #31
90027f7e:	d427      	bmi.n	90027fd0 <__sflush_r+0xb8>
90027f80:	2200      	movs	r2, #0
90027f82:	6062      	str	r2, [r4, #4]
90027f84:	04d9      	lsls	r1, r3, #19
90027f86:	6922      	ldr	r2, [r4, #16]
90027f88:	6022      	str	r2, [r4, #0]
90027f8a:	d504      	bpl.n	90027f96 <__sflush_r+0x7e>
90027f8c:	1c42      	adds	r2, r0, #1
90027f8e:	d101      	bne.n	90027f94 <__sflush_r+0x7c>
90027f90:	682b      	ldr	r3, [r5, #0]
90027f92:	b903      	cbnz	r3, 90027f96 <__sflush_r+0x7e>
90027f94:	6560      	str	r0, [r4, #84]	; 0x54
90027f96:	6b61      	ldr	r1, [r4, #52]	; 0x34
90027f98:	602f      	str	r7, [r5, #0]
90027f9a:	2900      	cmp	r1, #0
90027f9c:	d0c9      	beq.n	90027f32 <__sflush_r+0x1a>
90027f9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
90027fa2:	4299      	cmp	r1, r3
90027fa4:	d002      	beq.n	90027fac <__sflush_r+0x94>
90027fa6:	4628      	mov	r0, r5
90027fa8:	f7ff fc96 	bl	900278d8 <_free_r>
90027fac:	2000      	movs	r0, #0
90027fae:	6360      	str	r0, [r4, #52]	; 0x34
90027fb0:	e7c0      	b.n	90027f34 <__sflush_r+0x1c>
90027fb2:	2301      	movs	r3, #1
90027fb4:	4628      	mov	r0, r5
90027fb6:	47b0      	blx	r6
90027fb8:	1c41      	adds	r1, r0, #1
90027fba:	d1c8      	bne.n	90027f4e <__sflush_r+0x36>
90027fbc:	682b      	ldr	r3, [r5, #0]
90027fbe:	2b00      	cmp	r3, #0
90027fc0:	d0c5      	beq.n	90027f4e <__sflush_r+0x36>
90027fc2:	2b1d      	cmp	r3, #29
90027fc4:	d001      	beq.n	90027fca <__sflush_r+0xb2>
90027fc6:	2b16      	cmp	r3, #22
90027fc8:	d101      	bne.n	90027fce <__sflush_r+0xb6>
90027fca:	602f      	str	r7, [r5, #0]
90027fcc:	e7b1      	b.n	90027f32 <__sflush_r+0x1a>
90027fce:	89a3      	ldrh	r3, [r4, #12]
90027fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90027fd4:	81a3      	strh	r3, [r4, #12]
90027fd6:	e7ad      	b.n	90027f34 <__sflush_r+0x1c>
90027fd8:	690f      	ldr	r7, [r1, #16]
90027fda:	2f00      	cmp	r7, #0
90027fdc:	d0a9      	beq.n	90027f32 <__sflush_r+0x1a>
90027fde:	0793      	lsls	r3, r2, #30
90027fe0:	680e      	ldr	r6, [r1, #0]
90027fe2:	bf08      	it	eq
90027fe4:	694b      	ldreq	r3, [r1, #20]
90027fe6:	600f      	str	r7, [r1, #0]
90027fe8:	bf18      	it	ne
90027fea:	2300      	movne	r3, #0
90027fec:	eba6 0807 	sub.w	r8, r6, r7
90027ff0:	608b      	str	r3, [r1, #8]
90027ff2:	f1b8 0f00 	cmp.w	r8, #0
90027ff6:	dd9c      	ble.n	90027f32 <__sflush_r+0x1a>
90027ff8:	6a21      	ldr	r1, [r4, #32]
90027ffa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
90027ffc:	4643      	mov	r3, r8
90027ffe:	463a      	mov	r2, r7
90028000:	4628      	mov	r0, r5
90028002:	47b0      	blx	r6
90028004:	2800      	cmp	r0, #0
90028006:	dc06      	bgt.n	90028016 <__sflush_r+0xfe>
90028008:	89a3      	ldrh	r3, [r4, #12]
9002800a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9002800e:	81a3      	strh	r3, [r4, #12]
90028010:	f04f 30ff 	mov.w	r0, #4294967295
90028014:	e78e      	b.n	90027f34 <__sflush_r+0x1c>
90028016:	4407      	add	r7, r0
90028018:	eba8 0800 	sub.w	r8, r8, r0
9002801c:	e7e9      	b.n	90027ff2 <__sflush_r+0xda>
9002801e:	bf00      	nop
90028020:	dfbffffe 	.word	0xdfbffffe

90028024 <_fflush_r>:
90028024:	b538      	push	{r3, r4, r5, lr}
90028026:	690b      	ldr	r3, [r1, #16]
90028028:	4605      	mov	r5, r0
9002802a:	460c      	mov	r4, r1
9002802c:	b913      	cbnz	r3, 90028034 <_fflush_r+0x10>
9002802e:	2500      	movs	r5, #0
90028030:	4628      	mov	r0, r5
90028032:	bd38      	pop	{r3, r4, r5, pc}
90028034:	b118      	cbz	r0, 9002803e <_fflush_r+0x1a>
90028036:	6a03      	ldr	r3, [r0, #32]
90028038:	b90b      	cbnz	r3, 9002803e <_fflush_r+0x1a>
9002803a:	f7ff f9c5 	bl	900273c8 <__sinit>
9002803e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90028042:	2b00      	cmp	r3, #0
90028044:	d0f3      	beq.n	9002802e <_fflush_r+0xa>
90028046:	6e62      	ldr	r2, [r4, #100]	; 0x64
90028048:	07d0      	lsls	r0, r2, #31
9002804a:	d404      	bmi.n	90028056 <_fflush_r+0x32>
9002804c:	0599      	lsls	r1, r3, #22
9002804e:	d402      	bmi.n	90028056 <_fflush_r+0x32>
90028050:	6da0      	ldr	r0, [r4, #88]	; 0x58
90028052:	f7ff fbd2 	bl	900277fa <__retarget_lock_acquire_recursive>
90028056:	4628      	mov	r0, r5
90028058:	4621      	mov	r1, r4
9002805a:	f7ff ff5d 	bl	90027f18 <__sflush_r>
9002805e:	6e63      	ldr	r3, [r4, #100]	; 0x64
90028060:	07da      	lsls	r2, r3, #31
90028062:	4605      	mov	r5, r0
90028064:	d4e4      	bmi.n	90028030 <_fflush_r+0xc>
90028066:	89a3      	ldrh	r3, [r4, #12]
90028068:	059b      	lsls	r3, r3, #22
9002806a:	d4e1      	bmi.n	90028030 <_fflush_r+0xc>
9002806c:	6da0      	ldr	r0, [r4, #88]	; 0x58
9002806e:	f7ff fbc5 	bl	900277fc <__retarget_lock_release_recursive>
90028072:	e7dd      	b.n	90028030 <_fflush_r+0xc>

90028074 <__swhatbuf_r>:
90028074:	b570      	push	{r4, r5, r6, lr}
90028076:	460c      	mov	r4, r1
90028078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9002807c:	2900      	cmp	r1, #0
9002807e:	b096      	sub	sp, #88	; 0x58
90028080:	4615      	mov	r5, r2
90028082:	461e      	mov	r6, r3
90028084:	da0d      	bge.n	900280a2 <__swhatbuf_r+0x2e>
90028086:	89a3      	ldrh	r3, [r4, #12]
90028088:	f013 0f80 	tst.w	r3, #128	; 0x80
9002808c:	f04f 0100 	mov.w	r1, #0
90028090:	bf0c      	ite	eq
90028092:	f44f 6380 	moveq.w	r3, #1024	; 0x400
90028096:	2340      	movne	r3, #64	; 0x40
90028098:	2000      	movs	r0, #0
9002809a:	6031      	str	r1, [r6, #0]
9002809c:	602b      	str	r3, [r5, #0]
9002809e:	b016      	add	sp, #88	; 0x58
900280a0:	bd70      	pop	{r4, r5, r6, pc}
900280a2:	466a      	mov	r2, sp
900280a4:	f000 f848 	bl	90028138 <_fstat_r>
900280a8:	2800      	cmp	r0, #0
900280aa:	dbec      	blt.n	90028086 <__swhatbuf_r+0x12>
900280ac:	9901      	ldr	r1, [sp, #4]
900280ae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
900280b2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
900280b6:	4259      	negs	r1, r3
900280b8:	4159      	adcs	r1, r3
900280ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
900280be:	e7eb      	b.n	90028098 <__swhatbuf_r+0x24>

900280c0 <__smakebuf_r>:
900280c0:	898b      	ldrh	r3, [r1, #12]
900280c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
900280c4:	079d      	lsls	r5, r3, #30
900280c6:	4606      	mov	r6, r0
900280c8:	460c      	mov	r4, r1
900280ca:	d507      	bpl.n	900280dc <__smakebuf_r+0x1c>
900280cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
900280d0:	6023      	str	r3, [r4, #0]
900280d2:	6123      	str	r3, [r4, #16]
900280d4:	2301      	movs	r3, #1
900280d6:	6163      	str	r3, [r4, #20]
900280d8:	b002      	add	sp, #8
900280da:	bd70      	pop	{r4, r5, r6, pc}
900280dc:	ab01      	add	r3, sp, #4
900280de:	466a      	mov	r2, sp
900280e0:	f7ff ffc8 	bl	90028074 <__swhatbuf_r>
900280e4:	9900      	ldr	r1, [sp, #0]
900280e6:	4605      	mov	r5, r0
900280e8:	4630      	mov	r0, r6
900280ea:	f7ff f847 	bl	9002717c <_malloc_r>
900280ee:	b948      	cbnz	r0, 90028104 <__smakebuf_r+0x44>
900280f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
900280f4:	059a      	lsls	r2, r3, #22
900280f6:	d4ef      	bmi.n	900280d8 <__smakebuf_r+0x18>
900280f8:	f023 0303 	bic.w	r3, r3, #3
900280fc:	f043 0302 	orr.w	r3, r3, #2
90028100:	81a3      	strh	r3, [r4, #12]
90028102:	e7e3      	b.n	900280cc <__smakebuf_r+0xc>
90028104:	89a3      	ldrh	r3, [r4, #12]
90028106:	6020      	str	r0, [r4, #0]
90028108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9002810c:	81a3      	strh	r3, [r4, #12]
9002810e:	9b00      	ldr	r3, [sp, #0]
90028110:	6163      	str	r3, [r4, #20]
90028112:	9b01      	ldr	r3, [sp, #4]
90028114:	6120      	str	r0, [r4, #16]
90028116:	b15b      	cbz	r3, 90028130 <__smakebuf_r+0x70>
90028118:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9002811c:	4630      	mov	r0, r6
9002811e:	f000 f81d 	bl	9002815c <_isatty_r>
90028122:	b128      	cbz	r0, 90028130 <__smakebuf_r+0x70>
90028124:	89a3      	ldrh	r3, [r4, #12]
90028126:	f023 0303 	bic.w	r3, r3, #3
9002812a:	f043 0301 	orr.w	r3, r3, #1
9002812e:	81a3      	strh	r3, [r4, #12]
90028130:	89a3      	ldrh	r3, [r4, #12]
90028132:	431d      	orrs	r5, r3
90028134:	81a5      	strh	r5, [r4, #12]
90028136:	e7cf      	b.n	900280d8 <__smakebuf_r+0x18>

90028138 <_fstat_r>:
90028138:	b538      	push	{r3, r4, r5, lr}
9002813a:	4d07      	ldr	r5, [pc, #28]	; (90028158 <_fstat_r+0x20>)
9002813c:	2300      	movs	r3, #0
9002813e:	4604      	mov	r4, r0
90028140:	4608      	mov	r0, r1
90028142:	4611      	mov	r1, r2
90028144:	602b      	str	r3, [r5, #0]
90028146:	f7dc fe4d 	bl	90004de4 <_fstat>
9002814a:	1c43      	adds	r3, r0, #1
9002814c:	d102      	bne.n	90028154 <_fstat_r+0x1c>
9002814e:	682b      	ldr	r3, [r5, #0]
90028150:	b103      	cbz	r3, 90028154 <_fstat_r+0x1c>
90028152:	6023      	str	r3, [r4, #0]
90028154:	bd38      	pop	{r3, r4, r5, pc}
90028156:	bf00      	nop
90028158:	240283dc 	.word	0x240283dc

9002815c <_isatty_r>:
9002815c:	b538      	push	{r3, r4, r5, lr}
9002815e:	4d06      	ldr	r5, [pc, #24]	; (90028178 <_isatty_r+0x1c>)
90028160:	2300      	movs	r3, #0
90028162:	4604      	mov	r4, r0
90028164:	4608      	mov	r0, r1
90028166:	602b      	str	r3, [r5, #0]
90028168:	f7dc fe42 	bl	90004df0 <_isatty>
9002816c:	1c43      	adds	r3, r0, #1
9002816e:	d102      	bne.n	90028176 <_isatty_r+0x1a>
90028170:	682b      	ldr	r3, [r5, #0]
90028172:	b103      	cbz	r3, 90028176 <_isatty_r+0x1a>
90028174:	6023      	str	r3, [r4, #0]
90028176:	bd38      	pop	{r3, r4, r5, pc}
90028178:	240283dc 	.word	0x240283dc

9002817c <_init>:
9002817c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9002817e:	bf00      	nop
90028180:	bcf8      	pop	{r3, r4, r5, r6, r7}
90028182:	bc08      	pop	{r3}
90028184:	469e      	mov	lr, r3
90028186:	4770      	bx	lr

90028188 <_fini>:
90028188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9002818a:	bf00      	nop
9002818c:	bcf8      	pop	{r3, r4, r5, r6, r7}
9002818e:	bc08      	pop	{r3}
90028190:	469e      	mov	lr, r3
90028192:	4770      	bx	lr
